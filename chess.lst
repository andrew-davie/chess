------- FILE ./chess.asm LEVEL 1 PASS 2
      1  10000 ????						; Chess
      2  10000 ????						; Atari 2600 Chess display system
      3  10000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  10000 ????						; andrew@taswegian.com
      5  10000 ????
      6  10000 ????
      7  10000 ????		00 40	    TIA_BASE_ADDRESS =	$40
      8  10000 ????
      9  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; This file defines hardware registers and memory mapping for the
      7  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  10000 ????						; available at at http://www.atari2600.org/dasm
     10  10000 ????						;
     11  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  10000 ????						; with your views.  Please contribute, if you think you can improve this
     15  10000 ????						; file!
     16  10000 ????						;
     17  10000 ????						; Latest Revisions...
     18  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  10000 ????						;			    This will allow conditional code to verify VCS.H being
     21  10000 ????						;			    used for code assembly.
     22  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  10000 ????						;			 mirrored reading/writing differences.	This is more a
     25  10000 ????						;			 readability issue, and binary compatibility with disassembled
     26  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  10000 ????						;			 which was broken by the use of segments in this file, as
     29  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  10000 ????						;						   it is safe to leave it undefined, and the base address will
     34  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  10000 ????						;			  - register definitions are now generated through assignment
     37  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  10000 ????						;			    address architecture.
     39  10000 ????						; 1.0	22/MAR/2003		Initial release
     40  10000 ????
     41  10000 ????
     42  10000 ????						;-------------------------------------------------------------------------------
     43  10000 ????
     44  10000 ????						; TIA_BASE_ADDRESS
     45  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  10000 ????						; Normally 0, the base address should (externally, before including this file)
     47  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  10000 ????						; < $40 as a bankswitch.
     50  10000 ????
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????
     55  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  10000 ????						; *OR* by declaring the label before including this file, eg:
     58  10000 ????						; TIA_BASE_ADDRESS = $40
     59  10000 ????						;   include "vcs.h"
     60  10000 ????
     61  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  10000 ????						; for the mirrored ROM hardware registers.
     64  10000 ????
     65  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  10000 ????
     69  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     70  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????						;FIXED_BANK		 = 15 * 2048	       ; ->> 32K
     22  0000 ????	       f8 00	   FIXED_BANK =	31 * 2048	; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						; assemble diagnostics. Remove for release.
     31  0000 ????	       00 01	   ASSERTS    =	1
     32  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     33  0000 ????	       00 00	   PVSP       =	0	; player versus player =1
     34  0000 ????	       00 01	   DPN	      =	1	; draw piece number X12 or B64
     35  0000 ????
     36  0000 ????	       00 00	   WHITE_PLAYER =	0	; human
     37  0000 ????	       00 00	   BLACK_PLAYER =	0	; human
     38  0000 ????
     39  0000 ????
     40  0000 ????						;===================================
     41  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     42  0000 ????						;===================================
     43  0000 ????
     44  0000 ????						;-------------------------------------------------------------------------------
     45  0000 ????						; The following are optional YES/NO depending on phase of the moon
     46  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     49  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     50  0000 ????			  -	      IF	FINAL_VERSION = YES
     51  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     52  0000 ????				      ENDIF
     53  0000 ????
     54  0000 ????						;-------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     57  0000 ????
     58  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     59  0000 ????
     60  0000 ????						;------------------------------------------------------------------------------
     61  0000 ????
     62  0000 ????	       00 01	   PLUSCART   =	YES
     63  0000 ????
     64  0000 ????						;------------------------------------------------------------------------------
     65  0000 ????
     66  0000 ????
     67  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     68  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     69  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     70  0000 ????
     71  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     72  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     73  0000 ????
     74  0000 ????
     75  0000 ????	       10 00	   RAM_3E     =	$1000
     76  0000 ????	       04 00	   RAM_SIZE   =	$400
     77  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     78  0000 ????
     79  0000 ????
     80  0000 ????
     81  0000 ????
     82  0000 ????						; Platform constants:
     83  0000 ????	       00 02	   PAL	      =	%10
     84  0000 ????	       00 02	   PAL_50     =	PAL|0
     85  0000 ????	       00 03	   PAL_60     =	PAL|1
     86  0000 ????
     87  0000 ????
     88  0000 ????				      IF	L276
     89  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     90  0000 ????			  -	      ELSE
     91  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     92  0000 ????				      ENDIF
     93  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     94  0000 ????
     95  0000 ????				      IF	L276
     96  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     97  0000 ????			  -	      ELSE
     98  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     99  0000 ????				      ENDIF
    100  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
    101  0000 ????
    102  0000 ????				      IF	L276
    103  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
    104  0000 ????			  -	      ELSE
    105  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
    106  0000 ????				      ENDIF
    107  0000 ????	       01 38	   SCANLINES_PAL =	312
    108  0000 ????
    109  0000 ????
    110  0000 ????	       00 2e	   TIME_PART_2 =	46
    111  0000 ????	       00 2f	   TIME_PART_1 =	47
    112  0000 ????
    113  0000 ????
    114  0000 ????						;------------------------------------------------------------------------------
    115  0000 ????						; MACRO definitions
    116  0000 ????
    117  0000 ????
    118  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    119  0000 ????
    120  0000 ????				      MAC	newbank
    121  0000 ????				      SEG	{1}
    122  0000 ????				      ORG	ORIGIN
    123  0000 ????				      RORG	$F000
    124  0000 ????			   BANK_START SET	*
    125  0000 ????			   {1}	      SET	ORIGIN / 2048
    126  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    127  0000 ????			   _CURRENT_BANK SET	{1}
    128  0000 ????				      ENDM		; bank name
    129  0000 ????
    130  0000 ????				      MAC	define_1k_segment
    131  0000 ????				      ALIGN	$400
    132  0000 ????			   SEGMENT_{1} SET	*
    133  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    134  0000 ????				      ENDM		; {seg name}
    135  0000 ????
    136  0000 ????				      MAC	check_bank_size
    137  0000 ????			   .TEMP      =	* - BANK_START
    138  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    139  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    140  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    141  0000 ????				      ERR
    142  0000 ????				      endif
    143  0000 ????				      ENDM		; name
    144  0000 ????
    145  0000 ????
    146  0000 ????				      MAC	check_half_bank_size
    147  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    148  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    149  0000 ????			   .TEMP      =	* - BANK_START
    150  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    151  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    152  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    153  0000 ????				      ERR
    154  0000 ????				      endif
    155  0000 ????				      ENDM		; name
    156  0000 ????
    157  0000 ????
    158  0000 ????						;---------------------------------------------------------------------------------------------------
    159  0000 ????
    160  0000 ????						; Macro inserts a page break if the object would overlap a page
    161  0000 ????
    162  0000 ????				      MAC	optional_pagebreak
    163  0000 ????				      LIST	OFF
    164  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    165  0000 ????			   EARLY_LOCATION SET	*
    166  0000 ????				      ALIGN	256
    167  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR", {1}
    168  0000 ????				      ECHO	"REQUESTED SIZE =", {2}
    169  0000 ????				      ECHO	"WASTED SPACE =", *-EARLY_LOCATION
    170  0000 ????				      ECHO	"PAGEBREAK LOCATION =", *
    171  0000 ????				      ENDIF
    172  0000 ????				      LIST	ON
    173  0000 ????				      ENDM		; { string, size }
    174  0000 ????
    175  0000 ????
    176  0000 ????				      MAC	check_page_crossing
    177  0000 ????				      LIST	OFF
    178  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    179  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    180  0000 ????				      endif
    181  0000 ????				      LIST	ON
    182  0000 ????				      ENDM
    183  0000 ????
    184  0000 ????				      MAC	checkpage
    185  0000 ????				      LIST	OFF
    186  0000 ????				      IF	>. != >{1}
    187  0000 ????				      ECHO	""
    188  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    189  0000 ????				      ECHO	""
    190  0000 ????				      ERR
    191  0000 ????				      ENDIF
    192  0000 ????				      LIST	ON
    193  0000 ????				      ENDM
    194  0000 ????
    195  0000 ????				      MAC	checkpagex
    196  0000 ????				      LIST	OFF
    197  0000 ????				      IF	>. != >{1}
    198  0000 ????				      ECHO	""
    199  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    200  0000 ????				      ECHO	{2}
    201  0000 ????				      ECHO	""
    202  0000 ????				      ERR
    203  0000 ????				      ENDIF
    204  0000 ????				      LIST	ON
    205  0000 ????				      ENDM
    206  0000 ????
    207  0000 ????						;---------------------------------------------------------------------------------------------------
    208  0000 ????
    209  0000 ????						; Defines a variable of the given size, making sure it doesn't cross a page
    210  0000 ????				      MAC	variable
    211  0000 ????				      OPTIONAL_PAGEBREAK	"Variable", {2}
    212  0000 ????			   {1}	      ds	{2}
    213  0000 ????				      ENDM		; {name, size}
    214  0000 ????
    215  0000 ????
    216  0000 ????						;---------------------------------------------------------------------------------------------------
    217  0000 ????
    218  0000 ????				      MAC	def
    219  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    220  0000 ????			   {1}			; entry point
    221  0000 ????			   TEMPORARY_VAR SET	Overlay
    222  0000 ????			   TEMPORARY_OFFSET SET	0
    223  0000 ????				      SUBROUTINE
    224  0000 ????				      ENDM		; name of subroutine
    225  0000 ????
    226  0000 ????
    227  0000 ????						;---------------------------------------------------------------------------------------------------
    228  0000 ????
    229  0000 ????				      MAC	allocate
    230  0000 ????				      OPTIONAL_PAGEBREAK	"Table", {2}
    231  0000 ????				      DEF	{1}
    232  0000 ????				      ENDM
    233  0000 ????
    234  0000 ????
    235  0000 ????						;---------------------------------------------------------------------------------------------------
    236  0000 ????
    237  0000 ????			   TEMPORARY_OFFSET SET	0
    238  0000 ????
    239  0000 ????				      MAC	varbase
    240  0000 ????			   TEMPORARY_OFFSET SET	{1}
    241  0000 ????				      ENDM		; {offset}
    242  0000 ????
    243  0000 ????	       00 00	   VAR_LEVEL0 =	0
    244  0000 ????	       00 10	   VAR_LEVEL1 =	16
    245  0000 ????	       00 20	   VAR_LEVEL2 =	32
    246  0000 ????
    247  0000 ????
    248  0000 ????						; Define a temporary variable for use in a subroutine
    249  0000 ????						; Will allocate appropriate bytes, and also check for overflow of the available overlay buffer
    250  0000 ????
    251  0000 ????				      MAC	var
    252  0000 ????			   {1}	      SET	TEMPORARY_VAR
    253  0000 ????			   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + {2}
    254  0000 ????
    255  0000 ????			   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
    256  0000 ????				      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
    257  0000 ????			   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
    258  0000 ????				      ENDIF
    259  0000 ????				      IF	OVERLAY_DELTA > OVERLAY_SIZE
    260  0000 ????				      ECHO	"Temporary Variable", {1}, "overflow!"
    261  0000 ????				      ERR
    262  0000 ????				      ENDIF
    263  0000 ????				      LIST	ON
    264  0000 ????				      ENDM		; { name, size }
    265  0000 ????
    266  0000 ????
    267  0000 ????
    268  0000 ????
    269  0000 ????						;---------------------------------------------------------------------------------------------------
    270  0000 ????
    271  0000 ????				      MAC	tag
    272  0000 ????						; {0}
    273  0000 ????				      ENDM		; {ident/tag}
    274  0000 ????
    275  0000 ????
    276  0000 ????						;---------------------------------------------------------------------------------------------------
    277  0000 ????
    278  0000 ????				      MAC	newrambank
    279  0000 ????						; {1}	     bank name
    280  0000 ????						; {2}	     RAM bank number
    281  0000 ????
    282  0000 ????				      SEG.U	{1}
    283  0000 ????				      ORG	ORIGIN_RAM
    284  0000 ????				      RORG	RAM_3E
    285  0000 ????			   BANK_START SET	*
    286  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    287  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    288  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    289  0000 ????				      ENDM		; bank name
    290  0000 ????
    291  0000 ????						; TODO - fix - this is faulty....
    292  0000 ????				      MAC	validate_ram_size
    293  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    294  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    295  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    296  0000 ????				      ERR
    297  0000 ????				      ENDIF
    298  0000 ????				      ENDM
    299  0000 ????
    300  0000 ????						;---------------------------------------------------------------------------------------------------
    301  0000 ????
    302  0000 ????				      MAC	resync
    303  0000 ????						; resync screen, X and Y == 0 afterwards
    304  0000 ????				      lda	#%10	; make sure VBLANK is ON
    305  0000 ????				      sta	VBLANK
    306  0000 ????
    307  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    308  0000 ????			   .loopResync
    309  0000 ????				      VERTICAL_SYNC
    310  0000 ????
    311  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    312  0000 ????				      lda	Platform
    313  0000 ????				      eor	#PAL_50	; PAL-50?
    314  0000 ????				      bne	.ntsc
    315  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    316  0000 ????			   .ntsc
    317  0000 ????			   .loopWait
    318  0000 ????				      sta	WSYNC
    319  0000 ????				      sta	WSYNC
    320  0000 ????				      dey
    321  0000 ????				      bne	.loopWait
    322  0000 ????				      dex
    323  0000 ????				      bne	.loopResync
    324  0000 ????				      ENDM
    325  0000 ????
    326  0000 ????				      MAC	set_platform
    327  0000 ????						; 00 = NTSC
    328  0000 ????						; 01 = NTSC
    329  0000 ????						; 10 = PAL-50
    330  0000 ????						; 11 = PAL-60
    331  0000 ????				      lda	SWCHB
    332  0000 ????				      rol
    333  0000 ????				      rol
    334  0000 ????				      rol
    335  0000 ????				      and	#%11
    336  0000 ????				      eor	#PAL
    337  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    338  0000 ????				      ENDM
    339  0000 ????
    340  0000 ????
    341  0000 ????						;---------------------------------------------------------------------------------------------------
    342  0000 ????
    343  0000 ????				      MAC	jsrom_safe
    344  0000 ????						; Saves bank of routine to variable for later restore.
    345  0000 ????						; Switches to the bank and does a JSR to the routine.
    346  0000 ????
    347  0000 ????				      lda	#BANK_{1}
    348  0000 ????				      sta	savedBank
    349  0000 ????				      sta	SET_BANK
    350  0000 ????				      jsr	{1}
    351  0000 ????				      ENDM		; {routine}
    352  0000 ????
    353  0000 ????
    354  0000 ????				      MAC	jsrom
    355  0000 ????
    356  0000 ????				      lda	#BANK_{1}
    357  0000 ????				      sta	SET_BANK
    358  0000 ????				      jsr	{1}
    359  0000 ????				      ENDM		; {routine}
    360  0000 ????
    361  0000 ????
    362  0000 ????				      MAC	timecheck
    363  0000 ????				      lda	INTIM
    364  0000 ????				      cmp	#SPEEDOF_{1}
    365  0000 ????				      bcc	{2}
    366  0000 ????				      ENDM		; {ident}, {branch if out of time}
    367  0000 ????
    368  0000 ????
    369  0000 ????				      MAC	timing
    370  0000 ????			   SPEEDOF_{1} =	({2}/64) + 1
    371  0000 ????				      ENDM		; {label}, {cycles}
    372  0000 ????
    373  0000 ????
    374  0000 ????						;---------------------------------------------------------------------------------------------------
    375  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00f9 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080
      9 U0080		       00	   drawPieceNumberX12 ds	1
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawDelay  ds	1
     12 U0083		       00	   lastSquareX12 ds	1
     13 U0084
     14 U0084		       00	   drawCount  ds	1
     15 U0085		       00	   fromX12    ds	1
     16 U0086		       00	   toX12      ds	1
     17 U0087		       00	   originX12  ds	1
     18 U0088
     19 U0088		       00	   cursorX12  ds	1
     20 U0089
     21 U0089		       00	   mdelay     ds	1
     22 U008a		       00	   ccur       ds	1
     23 U008b		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     24 U008c		       00	   aiPhase    ds	1	; human/computer state machine
     25 U008d		       00	   aiFlashDelay ds	1
     26 U008e
     27 U008e		       00	   aiFromSquareX12 ds	1
     28 U008f		       00	   aiToSquareX12 ds	1
     29 U0090		       00	   aiMoveIndex ds	1
     30 U0091
     31 U0091		       00	   aiFlashPhase ds	1
     32 U0092
     33 U0092		       00 00	   Evaluation ds	2	; tracks value of the board position
     34 U0094
     35 U0094		       00	   currentPiece ds	1
     36 U0095		       00	   currentSquare ds	1
     37 U0096		       00	   returnBank ds	1
     38 U0097		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     39 U0098		       00	   followPiece ds	1
     40 U0099		       00	   currentPly ds	1
     41 U009a		       00	   piecelistIndex ds	1
     42 U009b		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     43 U009c		       00	   fromPiece  ds	1
     44 U009d		       00	   lastPiece  ds	1
     45 U009e		       00	   previousPiece ds	1
     46 U009f
     47 U009f		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     48 U00a0		       00	   aiPiece    ds	1
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a1					      include	"overlays.asm"
      1 U00a1							; Chess
      2 U00a1							; Atari 2600 Chess display system
      3 U00a1							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a1							; andrew@taswegian.com
      5 U00a1
      6 U00a1							;---------------------------------------------------------------------------------------------------
      7 U00a1							; OVERLAYS!
      8 U00a1							; These variables are overlays, and should be managed with care
      9 U00a1							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a1							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a1							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a1							; overlay #2
     13 U00a1
     14 U00a1							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a1
     16 U00a1							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a1							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a1							;---------------------------------------------------------------------------------------------------
     19 U00a1
     20 U00a1					      MAC	overlay
     21 U00a1				   OVERLAY_NAME SET	{1}
     22 U00a1					      SEG.U	OVERLAY_{1}
     23 U00a1					      org	Overlay
     24 U00a1					      ENDM		; {name}
     25 U00a1
     26 U00a1							;---------------------------------------------------------------------------------------------------
     27 U00a1
     28 U00a1					      MAC	validate_overlay
     29 U00a1					      LIST	OFF
     30 U00a1				   OVERLAY_DELTA SET	* - Overlay
     31 U00a1					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a1				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a1					      ENDIF
     34 U00a1					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a1					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a1					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a1					      ERR
     38 U00a1					      ENDIF
     39 U00a1					      LIST	ON
     40 U00a1					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a1					      ENDM
     42 U00a1
     43 U00a1							;---------------------------------------------------------------------------------------------------
     44 U00a1
     45 U00a1				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a1				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a1
     48 U00a1
     49 U00a1							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a1							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a1							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a1							; (especially the latter ones) are only used in rare occasions.
     53 U00a1
     54 U00a1							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a1							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a1
      0 U00a1					      DEF	Overlay
      1 U00a1				   BANK_Overlay SET	_CURRENT_BANK
      2 U00a1				   Overlay
      3 U00a1				   TEMPORARY_VAR SET	Overlay
      4 U00a1				   TEMPORARY_OFFSET SET	0
      5 U00a1					      SUBROUTINE
     58 U00a1		       00 00 00 00*	      ds	OVERLAY_SIZE	;--> overlay (share) variables
     59 U00ed				   END_OF_OVERLAY
     60 U00ed
     61 U00ed							;---------------------------------------------------------------------------------------------------
     62 U00ed							; And now... the overlays....
     63 U00ed
 ---- OVERLAYS ( $4c bytes ) ----
     64 U00ed					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     65 U00ed
     66 U00ed							;---------------------------------------------------------------------------------------------------
     67 U00ed
     68 U00ed							; Some overlays are used across multiple routines/calls, and they will need to be defined
     69 U00ed							; "globally" in this file.
     70 U00ed
      0 U00ed					      VAR	__pieceShapeBuffer, PIECE_SHAPE_SIZE
      1 U00ed				   __pieceShapeBuffer SET	TEMPORARY_VAR
      2 U00ed				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + PIECE_SHAPE_SIZE
      3 U00ed
      4 U00ed				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00ed					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00ed				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00ed					      ENDIF
      8 U00ed				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00ed				  -	      ECHO	"Temporary Variable", __pieceShapeBuffer, "overflow!"
     10 U00ed				  -	      ERR
     11 U00ed					      ENDIF
     12 U00ed					      LIST	ON
      0 U00ed					      VAR	__ptr, 2
      1 U00ed				   __ptr      SET	TEMPORARY_VAR
      2 U00ed				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3 U00ed
      4 U00ed				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00ed					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00ed				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00ed					      ENDIF
      8 U00ed				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00ed				  -	      ECHO	"Temporary Variable", __ptr, "overflow!"
     10 U00ed				  -	      ERR
     11 U00ed					      ENDIF
     12 U00ed					      LIST	ON
      0 U00ed					      VAR	__ptr2, 2
      1 U00ed				   __ptr2     SET	TEMPORARY_VAR
      2 U00ed				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3 U00ed
      4 U00ed				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00ed					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00ed				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00ed					      ENDIF
      8 U00ed				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00ed				  -	      ECHO	"Temporary Variable", __ptr2, "overflow!"
     10 U00ed				  -	      ERR
     11 U00ed					      ENDIF
     12 U00ed					      LIST	ON
     74 U00ed
     75 U00ed							;---------------------------------------------------------------------------------------------------
     76 U00ed
     77 U00ed
     78 U00ed					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
     79 U00ed					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
     80 U00ed					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
     81 U00ed
     82 U00ed							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00ed					      include	"stack.asm"
      1 U00ed							; Chess
      2 U00ed							; Atari 2600 Chess display system
      3 U00ed							; Copyright (c) 2019-2020 Andrew Davie
      4 U00ed							; andrew@taswegian.com
      5 U00ed
      6 U00ed
      7 U00ed		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00ed
      9 U00ed		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00f9
     11 U00f9							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00f9							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00f9							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    379 U00f9
 FREE BYTES IN ZERO PAGE =  $6
    380 U00f9					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    381 U00f9				  -	      IF	* > $FF
    382 U00f9				  -	      ERR	"Zero Page overflow!"
    383 U00f9					      ENDIF
    384 U00f9
    385 U00f9							;------------------------------------------------------------------------------
    386 U00f9							;##############################################################################
    387 U00f9							;------------------------------------------------------------------------------
    388 U00f9
    389 U00f9							; NOW THE VERY INTERESTING '3E' RAM BANKS
    390 U00f9							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    391 U00f9							; IN A 2K MEMORY SPACE
    392 U00f9
      0 U00f9					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00f9
      2 U00f9
      3 U00f9
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    394 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    394 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    394 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    394 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    394 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    394 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    394 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    397 U1c00					      REPEND
    398 U1c00
    399 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    400 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    401 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    402 U1c00
    403 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    404 U1c00							; is that we can use that code to switch between banks, and the system will happily
    405 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    406 U1c00
    407 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    408 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    409 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    410 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    411 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    412 U1c00
    413 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    414 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    415 U1c00
    416 U1c00							;------------------------------------------------------------------------------
    417 U1c00
    418 U1c00
    419 U1c00							;---------------------------------------------------------------------------------------------------
    420 U1c00
    421 U1c00
    422 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    423 U1c00
    424 U1c00					      MAC	next_random
    425 U1c00					      lda	rnd
    426 U1c00					      lsr
    427 U1c00					      bcc	.skipEOR
    428 U1c00					      eor	#RND_EOR_VAL
    429 U1c00				   .skipEOR   sta	rnd
    430 U1c00					      ENDM
    431 U1c00
    432 U1c00							;--------------------------------------------------------------------------------
    433 U1c00
    434 U1c00					      MAC	phase
    435 U1c00					      lda	#{1}
    436 U1c00					      sta	aiPhase
    437 U1c00					      ENDM		;#
    438 U1c00
    439 U1c00							;--------------------------------------------------------------------------------
    440 U1c00
    441 U1c00							;ORIGIN      SET 0
    442 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00
     12 U1c00							; = 76 for single square (empty/take)
     13 U1c00
     14 U1c00					      ldx	currentSquare	; 3
     15 U1c00					      bne	.project	; 3   unconditional
     16 U1c00
     17 U1c00				   .empty     jsr	AddMove	; 57
     18 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     19 U1c00					      bmi	.invalid	; 2/3 off board!
     20 U1c00					      lda	Board,y	; 4   piece @ destination
     21 U1c00					      beq	.empty	; 2/3
     22 U1c00					      eor	currentPiece	; 3
     23 U1c00					      bpl	.invalid	; 2/3 same colour
     24 U1c00					      jsr	AddMove	; 57  and exit
     25 U1c00
     26 U1c00				   .invalid
     27 U1c00					      ENDM
     28 U1c00
     29 U1c00
     30 U1c00							;---------------------------------------------------------------------------------------------------
     31 U1c00
     32 U1c00					      MAC	move_to
     33 U1c00					      SUBROUTINE
     34 U1c00					      ldy	ValidSquare+{1},x
     35 U1c00					      bmi	.invalid	; off board!
     36 U1c00					      lda	Board,y	; piece @ destination
     37 U1c00					      beq	.squareEmpty
     38 U1c00					      eor	currentPiece
     39 U1c00					      bpl	.invalid	; same colour
     40 U1c00				   .squareEmpty jsr	AddMove
     41 U1c00				   .invalid
     42 U1c00					      ENDM
     43 U1c00
     44 U1c00
     45 U1c00							;---------------------------------------------------------------------------------------------------
     46 U1c00
     47 U1c00					      MAC	move_to_x
     48 U1c00					      ldx	currentSquare
     49 U1c00					      MOVE_TO	{1}
     50 U1c00					      ENDM
     51 U1c00
     52 U1c00
     53 U1c00							;---------------------------------------------------------------------------------------------------
     54 U1c00							; EOF
------- FILE ./chess.asm
    444 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  0137 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;---------------------------------------------------------------------------------------------------
     18  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;---------------------------------------------------------------------------------------------------
     22  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004				   Cart_Init
      3  0004				   TEMPORARY_VAR SET	Overlay
      4  0004				   TEMPORARY_OFFSET SET	0
      5  0004					      SUBROUTINE
     24  0004					      SUBROUTINE
     25  0004
     26  0004		       a9 00		      lda	#0
     27  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     28  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     29  000c		       85 6b		      sta	HMCLR
     30  000e
     31  000e							; cleanup remains of title screen
     32  000e		       85 5b		      sta	GRP0
     33  0010		       85 5c		      sta	GRP1
     34  0012
     35  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     36  0014		       85 44		      sta	NUSIZ0
     37  0016		       85 45		      sta	NUSIZ1
     38  0018
     39  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     40  001a		       85 4a		      sta	CTRLPF
     41  001c
     42  001c		       60		      rts
     43  001d
     44  001d
     45  001d							;---------------------------------------------------------------------------------------------------
     46  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d				   Resync
      3  001d				   TEMPORARY_VAR SET	Overlay
      4  001d				   TEMPORARY_OFFSET SET	0
      5  001d					      SUBROUTINE
     48  001d					      SUBROUTINE
     49  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 9f		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     51  0040		       60		      rts
     52  0041
     53  0041
     54  0041							;---------------------------------------------------------------------------------------------------
     55  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041				   aiStartClearBoard
      3  0041				   TEMPORARY_VAR SET	Overlay
      4  0041				   TEMPORARY_OFFSET SET	0
      5  0041					      SUBROUTINE
     57  0041					      SUBROUTINE
     58  0041
     59  0041		       a2 08		      ldx	#8
     60  0043		       86 84		      stx	drawCount	; = bank
     61  0045
     62  0045		       a9 ff		      lda	#-1
     63  0047		       85 88		      sta	cursorX12
     64  0049
      0  0049					      PHASE	AI_ClearEachRow
      1  0049		       a9 0e		      lda	#AI_ClearEachRow
      2  004b		       85 8c		      sta	aiPhase
     66  004d		       60		      rts
     67  004e
     68  004e							;---------------------------------------------------------------------------------------------------
     69  004e
      0  004e					      DEF	aiClearEachRow
      1  004e				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  004e				   aiClearEachRow
      3  004e				   TEMPORARY_VAR SET	Overlay
      4  004e				   TEMPORARY_OFFSET SET	0
      5  004e					      SUBROUTINE
     71  004e					      SUBROUTINE
     72  004e
     73  004e		       c6 84		      dec	drawCount
     74  0050		       30 05		      bmi	.bitmapCleared
     75  0052		       a4 84		      ldy	drawCount
     76  0054		       4c a9 f8 	      jmp	CallClear
     77  0057
     78  0057				   .bitmapCleared
     79  0057
     80  0057		       a9 63		      lda	#99
     81  0059		       85 80		      sta	drawPieceNumberX12
     82  005b
      0  005b					      PHASE	AI_DrawEntireBoard
      1  005b		       a9 0f		      lda	#AI_DrawEntireBoard
      2  005d		       85 8c		      sta	aiPhase
     84  005f		       60		      rts
     85  0060
     86  0060
     87  0060							;---------------------------------------------------------------------------------------------------
     88  0060
      0  0060					      DEF	aiPrepForPhysicalMove
      1  0060				   BANK_aiPrepForPhysicalMove SET	_CURRENT_BANK
      2  0060				   aiPrepForPhysicalMove
      3  0060				   TEMPORARY_VAR SET	Overlay
      4  0060				   TEMPORARY_OFFSET SET	0
      5  0060					      SUBROUTINE
     90  0060					      SUBROUTINE
      0  0060					      TAG	MOVE_SELECTED (AI)
      1  0060
     92  0060
     93  0060
     94  0060							; Both computer and human have now seleted a move, and converge here
     95  0060
     96  0060
     97  0060							; fromPiece	 piece doing the move
     98  0060							; fromSquare	 starting square BASE64
     99  0060							; toSquare	 ending square BASE64
    100  0060							; fromX12	 current square X12
    101  0060							; originX12	 starting square X12
    102  0060							; toX12	 ending square X12
    103  0060
    104  0060							;    -previousPiece
    105  0060							;    +fromPiece
    106  0060
    107  0060
    108  0060
    109  0060		       a9 00		      lda	#BLANK
    110  0062		       85 9e		      sta	previousPiece
    111  0064
    112  0064
    113  0064							;TODO: evaluation mods
    114  0064
    115  0064
    116  0064				  -	      if	0
    117  0064				  -	      get	piece
    118  0064				  -	      eor	#128
    119  0064				  -	      cmp	#128	; negate colour --> C
    120  0064				  -
    121  0064				  -	      and	#PIECE_MASK
    122  0064				  -	      beq	.nopiece
    123  0064				  -
    124  0064				  -			;TOD: we're taking a piece - at this point we could adjust the
    125  0064				  -			; we've negated the colour so the captured piece will be negatively-added, so to speak
    126  0064				  -
    127  0064				  -	      tay
    128  0064				  -
    129  0064				  -	      ldx	#BANK_AddPieceMaterialValue
    130  0064				  -	      sta	SET_BANK
    131  0064				  -	      jsr	AddPieceMaterialValue
    132  0064					      endif
    133  0064
    134  0064
    135  0064
    136  0064
    137  0064							;lda toSquare
    138  0064							;cmp fromSquare
    139  0064							;beq .idleErase
    140  0064
    141  0064		       a9 06		      lda	#6	; on/off count
    142  0066		       85 84		      sta	drawCount	; flashing for piece about to move
    143  0068		       a9 00		      lda	#0
    144  006a		       85 82		      sta	drawDelay
    145  006c
      0  006c					      PHASE	AI_WriteStartPieceBlank
      1  006c		       a9 16		      lda	#AI_WriteStartPieceBlank
      2  006e		       85 8c		      sta	aiPhase
    147  0070		       60	   .idleErase rts
    148  0071
    149  0071
    150  0071							;---------------------------------------------------------------------------------------------------
    151  0071
      0  0071					      DEF	aiWriteStartPieceBlank
      1  0071				   BANK_aiWriteStartPieceBlank SET	_CURRENT_BANK
      2  0071				   aiWriteStartPieceBlank
      3  0071				   TEMPORARY_VAR SET	Overlay
      4  0071				   TEMPORARY_OFFSET SET	0
      5  0071					      SUBROUTINE
    153  0071					      SUBROUTINE
    154  0071
    155  0071							; Flash the piece in-place preparatory to moving it.
    156  0071							; drawDelay = flash speed
    157  0071							; drawCount = # of flashes
    158  0071
    159  0071		       a5 82		      lda	drawDelay
    160  0073		       f0 03		      beq	deCount
    161  0075		       c6 82		      dec	drawDelay
    162  0077		       60		      rts
    163  0078
    164  0078				   deCount
    165  0078
    166  0078		       a5 84		      lda	drawCount
    167  007a		       f0 0e		      beq	flashDone
    168  007c		       c6 84		      dec	drawCount
    169  007e
    170  007e		       a9 04		      lda	#4
    171  0080		       85 82		      sta	drawDelay	; "getting ready to move" flash
    172  0082
    173  0082		       a5 85		      lda	fromX12
    174  0084		       85 80		      sta	drawPieceNumberX12
    175  0086
    176  0086		       20 2f fd 	      jsr	SAFE_CopySinglePiece	; EOR-draw = flash
    177  0089		       60		      rts
    178  008a
      0  008a				   flashDone  PHASE	AI_MarchToTargetA
      1  008a		       a9 17		      lda	#AI_MarchToTargetA
      2  008c		       85 8c		      sta	aiPhase
    180  008e		       60		      rts
    181  008f
    182  008f
    183  008f							;---------------------------------------------------------------------------------------------------
    184  008f
      0  008f					      DEF	aiDrawPart2
      1  008f				   BANK_aiDrawPart2 SET	_CURRENT_BANK
      2  008f				   aiDrawPart2
      3  008f				   TEMPORARY_VAR SET	Overlay
      4  008f				   TEMPORARY_OFFSET SET	0
      5  008f					      SUBROUTINE
    186  008f					      SUBROUTINE
    187  008f
    188  008f		       20 2f fd 	      jsr	SAFE_CopySinglePiece
    189  0092
      0  0092					      DEF	aiDrawPart3
      1  0092				   BANK_aiDrawPart3 SET	_CURRENT_BANK
      2  0092				   aiDrawPart3
      3  0092				   TEMPORARY_VAR SET	Overlay
      4  0092				   TEMPORARY_OFFSET SET	0
      5  0092					      SUBROUTINE
    191  0092					      SUBROUTINE
    192  0092
    193  0092		       c6 80		      dec	drawPieceNumberX12
    194  0094		       a5 80		      lda	drawPieceNumberX12
    195  0096		       c9 16		      cmp	#22
    196  0098		       90 05		      bcc	.comp
    197  009a
      0  009a					      PHASE	AI_DrawEntireBoard
      1  009a		       a9 0f		      lda	#AI_DrawEntireBoard
      2  009c		       85 8c		      sta	aiPhase
    199  009e		       60		      rts
    200  009f
      0  009f				   .comp      PHASE	AI_FlipBuffers
      1  009f		       a9 12		      lda	#AI_FlipBuffers
      2  00a1		       85 8c		      sta	aiPhase
    202  00a3		       60		      rts
    203  00a4
    204  00a4
    205  00a4
    206  00a4							;---------------------------------------------------------------------------------------------------
    207  00a4
      0  00a4					      DEF	aiMarchB
      1  00a4				   BANK_aiMarchB SET	_CURRENT_BANK
      2  00a4				   aiMarchB
      3  00a4				   TEMPORARY_VAR SET	Overlay
      4  00a4				   TEMPORARY_OFFSET SET	0
      5  00a4					      SUBROUTINE
    209  00a4					      SUBROUTINE
    210  00a4
    211  00a4							; Draw the piece in the new square
    212  00a4
    213  00a4		       a5 85		      lda	fromX12
    214  00a6		       85 80		      sta	drawPieceNumberX12
    215  00a8
    216  00a8		       20 2f fd 	      jsr	SAFE_CopySinglePiece	; draw the moving piece into the new square
    217  00ab
    218  00ab		       a9 06		      lda	#6	; snail trail delay
    219  00ad		       85 82		      sta	drawDelay
    220  00af
      0  00af					      PHASE	AI_MarchToTargetB
      1  00af		       a9 19		      lda	#AI_MarchToTargetB
      2  00b1		       85 8c		      sta	aiPhase
    222  00b3		       60		      rts
    223  00b4
    224  00b4
    225  00b4							;---------------------------------------------------------------------------------------------------
    226  00b4
      0  00b4					      DEF	aiFinalFlash
      1  00b4				   BANK_aiFinalFlash SET	_CURRENT_BANK
      2  00b4				   aiFinalFlash
      3  00b4				   TEMPORARY_VAR SET	Overlay
      4  00b4				   TEMPORARY_OFFSET SET	0
      5  00b4					      SUBROUTINE
    228  00b4					      SUBROUTINE
    229  00b4
    230  00b4		       a5 82		      lda	drawDelay
    231  00b6		       f0 03		      beq	.deCount
    232  00b8		       c6 82		      dec	drawDelay
    233  00ba		       60		      rts
    234  00bb
    235  00bb		       a5 84	   .deCount   lda	drawCount
    236  00bd		       f0 0e		      beq	flashDone2
    237  00bf		       c6 84		      dec	drawCount
    238  00c1
    239  00c1		       a9 0a		      lda	#10
    240  00c3		       85 82		      sta	drawDelay	; "getting ready to move" flash
    241  00c5
    242  00c5		       a5 85		      lda	fromX12
    243  00c7		       85 80		      sta	drawPieceNumberX12
    244  00c9
    245  00c9		       20 2f fd 	      jsr	SAFE_CopySinglePiece
    246  00cc		       60		      rts
    247  00cd
      0  00cd				   flashDone2 PHASE	AI_SpecialMoveFixup
      1  00cd		       a9 1c		      lda	#AI_SpecialMoveFixup
      2  00cf		       85 8c		      sta	aiPhase
    249  00d1		       60		      rts
    250  00d2
    251  00d2
    252  00d2							;---------------------------------------------------------------------------------------------------
    253  00d2
      0  00d2					      DEF	CastleFixup
      1  00d2				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00d2				   CastleFixup
      3  00d2				   TEMPORARY_VAR SET	Overlay
      4  00d2				   TEMPORARY_OFFSET SET	0
      5  00d2					      SUBROUTINE
    255  00d2					      SUBROUTINE
    256  00d2
    257  00d2							; fixup any castling issues
    258  00d2							; at this point the king has finished his two-square march
    259  00d2							; based on the finish square, we determine which rook we're interacting with
    260  00d2							; and generate a 'move' for the rook to position on the other side of the king
    261  00d2
    262  00d2
    263  00d2		       a5 9c		      lda	fromPiece
    264  00d4		       29 10		      and	#FLAG_CASTLE
    265  00d6		       f0 2e		      beq	.noCast	; NOT involved in castle!
    266  00d8
    267  00d8		       a2 04		      ldx	#4
    268  00da		       a5 85		      lda	fromX12
    269  00dc		       ca	   .findCast  dex
    270  00dd		       30 27		      bmi	.noCast
    271  00df		       dd 07 f1 	      cmp	KSquare,x
    272  00e2		       d0 f8		      bne	.findCast
    273  00e4
    274  00e4		       20 3b f9 	      jsr	debug
    275  00e7
    276  00e7		       bd 0f f1 	      lda	RSquareEnd,x
    277  00ea		       85 86		      sta	toX12
    278  00ec		       bc 0b f1 	      ldy	RSquareStart,x
    279  00ef		       84 85		      sty	fromX12
    280  00f1		       84 87		      sty	originX12
    281  00f3
    282  00f3		       a5 9c		      lda	fromPiece
    283  00f5		       29 80		      and	#128	; colour bit
    284  00f7		       09 05		      ora	#ROOK	; preserve colour
    285  00f9		       85 9c		      sta	fromPiece
    286  00fb
      0  00fb					      PHASE	AI_PrepForPhysicalMove
      1  00fb		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  00fd		       85 8c		      sta	aiPhase
    288  00ff
    289  00ff							; in this siutation (castle, rook moving) we do not change sides yet!
    290  00ff							; SO we DO change sides so the later change is a no-change...
    291  00ff
    292  00ff		       a5 9b		      lda	sideToMove
    293  0101		       49 80		      eor	#128
    294  0103		       85 9b		      sta	sideToMove
    295  0105
    296  0105		       60		      rts
    297  0106
    298  0106				   .noCast
    299  0106
    300  0106
    301  0106		       60		      rts
    302  0107
    303  0107
    304  0107		       18 1c 5e 62 KSquare    .byte.b	24,28,94,98
    305  010b		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    306  010f		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    307  0113
    308  0113
    309  0113							;---------------------------------------------------------------------------------------------------
    310  0113
      0  0113					      DEF	SetupBanks
      1  0113				   BANK_SetupBanks SET	_CURRENT_BANK
      2  0113				   SetupBanks
      3  0113				   TEMPORARY_VAR SET	Overlay
      4  0113				   TEMPORARY_OFFSET SET	0
      5  0113					      SUBROUTINE
    312  0113					      SUBROUTINE
    313  0113
      0  0113					      VAR	__plyBank, 1
      1  0113				   __plyBank  SET	TEMPORARY_VAR
      2  0113				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  0113
      4  0113				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  0113				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  0113				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  0113					      ENDIF
      8  0113				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  0113				  -	      ECHO	"Temporary Variable", __plyBank, "overflow!"
     10  0113				  -	      ERR
     11  0113					      ENDIF
     12  0113					      LIST	ON
    315  0113
    316  0113							; SAFE
    317  0113
    318  0113		       a0 07		      ldy	#7
    319  0115		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    320  0117		       20 f4 fc 	      jsr	SAFE_CopyShadowROMtoRAM
    321  011a		       88		      dey
    322  011b		       10 f8		      bpl	.copyRowBanks
    323  011d
    324  011d							; copy the BOARD/MOVES bank
    325  011d
    326  011d		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    327  011f		       a2 0d		      ldx	#MOVES
    328  0121		       20 f4 fc 	      jsr	SAFE_CopyShadowROMtoRAM	; this auto-initialises Board too
    329  0124
    330  0124							; copy the PLY banks
    331  0124
    332  0124		       a9 06		      lda	#MAX_PLY
    333  0126		       85 a1		      sta	__plyBank
    334  0128		       a0 09		      ldy	#RAMBANK_PLY
    335  012a		       84 99		      sty	currentPly
    336  012c		       a2 0e	   .copyPlyBanks ldx	#BANK_PLY
    337  012e		       20 f4 fc 	      jsr	SAFE_CopyShadowROMtoRAM
    338  0131		       c8		      iny
    339  0132		       c6 a1		      dec	__plyBank
    340  0134		       d0 f6		      bne	.copyPlyBanks
    341  0136
    342  0136		       60		      rts
    343  0137
    344  0137
    345  0137							;---------------------------------------------------------------------------------------------------
    346  0137
      0  0137					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  0137		       01 37	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $137 , FREE= $6c9
      2  0137					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  0137				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  0137				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  0137				  -	      ERR
      6  0137					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  0137					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  0137
      0  0137					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0b36 ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a6	   COLOUR_LINE_1 =	$a6
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 2a	   COLOUR_LINE_3 =	$2A
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800
     18  0800
     19  0800							; good/contrast
     20  0800							;COLOUR_LINE_1 = $a6
     21  0800							;COLOUR_LINE_2 = $4a
     22  0800							;COLOUR_LINE_3 = $2A
     23  0800
     24  0800							;COLOUR_LINE_1 = $94 ; square col
     25  0800							;COLOUR_LINE_2 = $C6
     26  0800							;COLOUR_LINE_3 = $48
     27  0800							;BACKGCOL	= 0 ;$F0
     28  0800
     29  0800
     30  0800							; good 94/46/28/0
     31  0800							; good 94/44/26/0
     32  0800
     33  0800
     34  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     35  0800
     36  0800
      0  0800					      ALLOCATE	ChessBitmap, ROW_BITMAP_SIZE
      0  0800					      OPTIONAL_PAGEBREAK	"Table", ROW_BITMAP_SIZE
     10  0800					      LIST	ON
      0  0800					      DEF	ChessBitmap
      1  0800				   BANK_ChessBitmap SET	_CURRENT_BANK
      2  0800				   ChessBitmap
      3  0800				   TEMPORARY_VAR SET	Overlay
      4  0800				   TEMPORARY_OFFSET SET	0
      5  0800					      SUBROUTINE
     38  0800		       00 00 00 00*ChessBitmap0 ds	24
     39  0818		       00 00 00 00*ChessBitmap1 ds	24
     40  0830		       00 00 00 00*ChessBitmap2 ds	24
     41  0848		       00 00 00 00*ChessBitmap3 ds	24
     42  0860		       00 00 00 00*ChessBitmap4 ds	24
     43  0878		       00 00 00 00*ChessBitmap5 ds	24
     44  0890
      0  0890					      ALLOCATE	BlankSprite, 8
      0  0890					      OPTIONAL_PAGEBREAK	"Table", 8
     10  0890					      LIST	ON
      0  0890					      DEF	BlankSprite
      1  0890				   BANK_BlankSprite SET	_CURRENT_BANK
      2  0890				   BlankSprite
      3  0890				   TEMPORARY_VAR SET	Overlay
      4  0890				   TEMPORARY_OFFSET SET	0
      5  0890					      SUBROUTINE
     46  0890		       00 00 00 00*	      ds	8, 0
     47  0898
      0  0898					      ALLOCATE	SpriteBuffer, 24
      0  0898					      OPTIONAL_PAGEBREAK	"Table", 24
     10  0898					      LIST	ON
      0  0898					      DEF	SpriteBuffer
      1  0898				   BANK_SpriteBuffer SET	_CURRENT_BANK
      2  0898				   SpriteBuffer
      3  0898				   TEMPORARY_VAR SET	Overlay
      4  0898				   TEMPORARY_OFFSET SET	0
      5  0898					      SUBROUTINE
     49  0898				   SpriteBuffer2
     50  0898					      REPEAT	24
     51  0898		       f8		      .byte.b	%11111000
     50  0898					      REPEND
     51  0899		       f8		      .byte.b	%11111000
     50  0899					      REPEND
     51  089a		       f8		      .byte.b	%11111000
     50  089a					      REPEND
     51  089b		       f8		      .byte.b	%11111000
     50  089b					      REPEND
     51  089c		       f8		      .byte.b	%11111000
     50  089c					      REPEND
     51  089d		       f8		      .byte.b	%11111000
     50  089d					      REPEND
     51  089e		       f8		      .byte.b	%11111000
     50  089e					      REPEND
     51  089f		       f8		      .byte.b	%11111000
     50  089f					      REPEND
     51  08a0		       f8		      .byte.b	%11111000
     50  08a0					      REPEND
     51  08a1		       f8		      .byte.b	%11111000
     50  08a1					      REPEND
     51  08a2		       f8		      .byte.b	%11111000
     50  08a2					      REPEND
     51  08a3		       f8		      .byte.b	%11111000
     50  08a3					      REPEND
     51  08a4		       f8		      .byte.b	%11111000
     50  08a4					      REPEND
     51  08a5		       f8		      .byte.b	%11111000
     50  08a5					      REPEND
     51  08a6		       f8		      .byte.b	%11111000
     50  08a6					      REPEND
     51  08a7		       f8		      .byte.b	%11111000
     50  08a7					      REPEND
     51  08a8		       f8		      .byte.b	%11111000
     50  08a8					      REPEND
     51  08a9		       f8		      .byte.b	%11111000
     50  08a9					      REPEND
     51  08aa		       f8		      .byte.b	%11111000
     50  08aa					      REPEND
     51  08ab		       f8		      .byte.b	%11111000
     50  08ab					      REPEND
     51  08ac		       f8		      .byte.b	%11111000
     50  08ac					      REPEND
     51  08ad		       f8		      .byte.b	%11111000
     50  08ad					      REPEND
     51  08ae		       f8		      .byte.b	%11111000
     50  08ae					      REPEND
     51  08af		       f8		      .byte.b	%11111000
     52  08b0					      REPEND
     53  08b0
      0  08b0					      ALLOCATE	BackupBitmap, ROW_BITMAP_SIZE
      0  08b0					      OPTIONAL_PAGEBREAK	"Table", ROW_BITMAP_SIZE
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $90
 WASTED SPACE = $50
 PAGEBREAK LOCATION = $f100
     10  0900					      LIST	ON
      0  0900					      DEF	BackupBitmap
      1  0900				   BANK_BackupBitmap SET	_CURRENT_BANK
      2  0900				   BackupBitmap
      3  0900				   TEMPORARY_VAR SET	Overlay
      4  0900				   TEMPORARY_OFFSET SET	0
      5  0900					      SUBROUTINE
     55  0900		       00 00 00 00*	      ds	ROW_BITMAP_SIZE, 0
     56  0990
     57  0990							;---------------------------------------------------------------------------------------------------
     58  0990
      0  0990					      DEF	ClearRowBitmap
      1  0990				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  0990				   ClearRowBitmap
      3  0990				   TEMPORARY_VAR SET	Overlay
      4  0990				   TEMPORARY_OFFSET SET	0
      5  0990					      SUBROUTINE
     60  0990					      SUBROUTINE
     61  0990
     62  0990		       a9 00		      lda	#0
     63  0992		       a0 90		      ldy	#ROW_BITMAP_SIZE
     64  0994		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     65  0997		       88		      dey
     66  0998		       d0 fa		      bne	.clearRow
     67  099a		       60		      rts
     68  099b
     69  099b
     70  099b							;---------------------------------------------------------------------------------------------------
     71  099b
      0  099b					      DEF	CopyPieceToRowBitmap
      1  099b				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  099b				   CopyPieceToRowBitmap
      3  099b				   TEMPORARY_VAR SET	Overlay
      4  099b				   TEMPORARY_OFFSET SET	0
      5  099b					      SUBROUTINE
     73  099b					      SUBROUTINE
     74  099b
     75  099b		       a0 11		      ldy	#17
     76  099d		       b0 30		      bcs	.rightSide
     77  099f
     78  099f		       b9 a1 00    .copyPiece lda	__pieceShapeBuffer,y
     79  09a2		       f0 06		      beq	.blank1
     80  09a4		       59 00 f0 	      eor	ChessBitmap,y
     81  09a7		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
     82  09aa
     83  09aa		       b9 b3 00    .blank1    lda	__pieceShapeBuffer+18,y
     84  09ad		       f0 06		      beq	.blank2
     85  09af		       59 12 f0 	      eor	ChessBitmap+18,y
     86  09b2		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
     87  09b5
     88  09b5		       b9 c5 00    .blank2    lda	__pieceShapeBuffer+36,y
     89  09b8		       f0 06		      beq	.blank3
     90  09ba		       59 24 f0 	      eor	ChessBitmap+36,y
     91  09bd		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
     92  09c0
     93  09c0		       b9 d7 00    .blank3    lda	__pieceShapeBuffer+54,y
     94  09c3		       f0 06		      beq	.blank4
     95  09c5		       59 36 f0 	      eor	ChessBitmap+54,y
     96  09c8		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
     97  09cb
     98  09cb		       88	   .blank4    dey
     99  09cc		       10 d1		      bpl	.copyPiece
    100  09ce		       60		      rts
    101  09cf
    102  09cf				   .rightSide
    103  09cf
    104  09cf					      SUBROUTINE
    105  09cf
    106  09cf		       b9 a1 00    .copyPieceR lda	__pieceShapeBuffer,y
    107  09d2		       f0 06		      beq	.blank1
    108  09d4		       59 48 f0 	      eor	ChessBitmap+72,y
    109  09d7		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    110  09da
    111  09da		       b9 b3 00    .blank1    lda	__pieceShapeBuffer+18,y
    112  09dd		       f0 06		      beq	.blank2
    113  09df		       59 5a f0 	      eor	ChessBitmap+72+18,y
    114  09e2		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    115  09e5
    116  09e5		       b9 c5 00    .blank2    lda	__pieceShapeBuffer+36,y
    117  09e8		       f0 06		      beq	.blank3
    118  09ea		       59 6c f0 	      eor	ChessBitmap+72+36,y
    119  09ed		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    120  09f0
    121  09f0		       b9 d7 00    .blank3    lda	__pieceShapeBuffer+54,y
    122  09f3		       f0 06		      beq	.blank4
    123  09f5		       59 7e f0 	      eor	ChessBitmap+72+54,y
    124  09f8		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    125  09fb
    126  09fb		       88	   .blank4    dey
    127  09fc		       10 d1		      bpl	.copyPieceR
    128  09fe		       60		      rts
    129  09ff
    130  09ff
    131  09ff							;---------------------------------------------------------------------------------------------------
    132  09ff
    133  0a00		       00		      ALIGN	256
    134  0a00
    135  0a00							; x = row # (and bank#)
    136  0a00
    137  0a00				   .endline
    138  0a00
    139  0a00							;@59
    140  0a00
    141  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    142  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    143  0a00				   SELFMOD_RTS_ON_LAST_ROW
    144  0a00
    145  0a00		       e8		      inx		; 2
    146  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    147  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03				   DrawRow
      3  0a03				   TEMPORARY_VAR SET	Overlay
      4  0a03				   TEMPORARY_OFFSET SET	0
      5  0a03					      SUBROUTINE
    149  0a03
    150  0a03							;@64
    151  0a03		       a0 07		      ldy	#7	; 2
    152  0a05		       10 3b		      bpl	.dl2	; 3   (must be 69 here)
    153  0a07
    154  0a07							;@58...
    155  0a07
    156  0a07				   .l3
    157  0a07
    158  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    159  0a0a		       85 5b		      sta	GRP0	; 3
    160  0a0c		       b9 a8 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    161  0a0f		       85 5c		      sta	GRP1	; 3
    162  0a11
    163  0a11							;@-4
    164  0a11
    165  0a11		       a9 a6		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    166  0a13		       85 48		      sta	COLUPF	; 3 @1
    167  0a15
    168  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    169  0a18		       85 4d		      sta	PF0	; 3
    170  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    171  0a1d		       85 4e		      sta	PF1	; 3
    172  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    173  0a22		       85 4f		      sta	PF2	; 3 @22
    174  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    176  0a27
    177  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    178  0a2a		       85 4d		      sta	PF0	; 3
    179  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    180  0a2f		       85 4e		      sta	PF1	; 3
    181  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    182  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    183  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    185  0a39
    186  0a39		       88		      dey		; 2
    187  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    188  0a3c
    189  0a3c							;@57
    190  0a3c				   .drawLine
    191  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    193  0a42
    194  0a42				   .dl2
    195  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    196  0a45		       85 5b		      sta	GRP0	; 3
    197  0a47		       b9 98 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    198  0a4a		       85 5c		      sta	GRP1	; 3
    199  0a4c
    200  0a4c							;@7
    201  0a4c
    202  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    203  0a4e		       85 48		      sta	COLUPF	; 3 @12
    204  0a50
    205  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    206  0a53		       85 4d		      sta	PF0	; 3
    207  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    208  0a58		       85 4e		      sta	PF1	; 3
    209  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    210  0a5d		       85 4f		      sta	PF2	; 3 @33
    211  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    213  0a61
    214  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    215  0a64		       85 4d		      sta	PF0	; 3
    216  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    217  0a69		       85 4e		      sta	PF1	; 3
    218  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    219  0a6e		       85 4f		      sta	PF2	; 3 @57
    220  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    222  0a73
    223  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    224  0a76		       85 5b		      sta	GRP0	; 3
    225  0a78		       b9 a0 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    226  0a7b		       85 5c		      sta	GRP1	; 3
    227  0a7d
    228  0a7d							;@0
    229  0a7d		       a9 2a		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    230  0a7f		       85 48		      sta	COLUPF	; 3 @5
    231  0a81
    232  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    233  0a84		       85 4d		      sta	PF0	; 3
    234  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    235  0a89		       85 4e		      sta	PF1	; 3
    236  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    237  0a8e		       85 4f		      sta	PF2	; 3 @26
    238  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    240  0a94
    241  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    242  0a97		       85 4d		      sta	PF0	; 3
    243  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    244  0a9c		       85 4e		      sta	PF1	; 3
    245  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    246  0aa1		       85 4f		      sta	PF2	; 3 @55
    247  0aa3
    248  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    249  0aa6
    250  0aa6
    251  0aa6							;---------------------------------------------------------------------------------------------------
    252  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6				   WriteBlank
      3  0aa6				   TEMPORARY_VAR SET	Overlay
      4  0aa6				   TEMPORARY_OFFSET SET	0
      5  0aa6					      SUBROUTINE
    254  0aa6					      SUBROUTINE
    255  0aa6
    256  0aa6		       a9 90		      lda	#<BlankSprite
    257  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    258  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    259  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    260  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    261  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    262  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    263  0aba
    264  0aba		       a9 f0		      lda	#>BlankSprite
    265  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    266  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    267  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    268  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    269  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    270  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    271  0ace
    272  0ace		       60		      rts
    273  0acf
    274  0acf
    275  0acf							;---------------------------------------------------------------------------------------------------
    276  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf				   WriteCursor
      3  0acf				   TEMPORARY_VAR SET	Overlay
      4  0acf				   TEMPORARY_OFFSET SET	0
      5  0acf					      SUBROUTINE
    278  0acf					      SUBROUTINE
    279  0acf
    280  0acf		       38		      sec
    281  0ad0		       a5 88		      lda	cursorX12
    282  0ad2		       30 1f		      bmi	.exit
    283  0ad4		       a2 0a		      ldx	#10
    284  0ad6		       e9 0a	   .sub10     sbc	#10
    285  0ad8		       ca		      dex
    286  0ad9		       b0 fb		      bcs	.sub10
    287  0adb
    288  0adb		       86 3e		      stx	SET_BANK_RAM
    289  0add		       a9 98		      lda	#<SpriteBuffer
    290  0adf		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    291  0ae2		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    292  0ae5		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    293  0ae8		       a9 f0		      lda	#>SpriteBuffer
    294  0aea		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    295  0aed		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    296  0af0		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    297  0af3
    298  0af3		       60	   .exit      rts
    299  0af4
    300  0af4
    301  0af4							;---------------------------------------------------------------------------------------------------
    302  0af4
      0  0af4					      DEF	SaveBitmap
      1  0af4				   BANK_SaveBitmap SET	_CURRENT_BANK
      2  0af4				   SaveBitmap
      3  0af4				   TEMPORARY_VAR SET	Overlay
      4  0af4				   TEMPORARY_OFFSET SET	0
      5  0af4					      SUBROUTINE
    304  0af4					      SUBROUTINE
    305  0af4
    306  0af4		       a0 47		      ldy	#71
    307  0af6		       b9 00 f0    .fromTo    lda	ChessBitmap,y
    308  0af9		       99 00 f5 	      sta	BackupBitmap+RAM_WRITE,y
    309  0afc		       b9 48 f0 	      lda	ChessBitmap+72,y
    310  0aff		       99 48 f5 	      sta	BackupBitmap+72+RAM_WRITE,y
    311  0b02		       88		      dey
    312  0b03		       10 f1		      bpl	.fromTo
    313  0b05		       60		      rts
    314  0b06
    315  0b06
    316  0b06							;---------------------------------------------------------------------------------------------------
    317  0b06
      0  0b06					      DEF	RestoreBitmap
      1  0b06				   BANK_RestoreBitmap SET	_CURRENT_BANK
      2  0b06				   RestoreBitmap
      3  0b06				   TEMPORARY_VAR SET	Overlay
      4  0b06				   TEMPORARY_OFFSET SET	0
      5  0b06					      SUBROUTINE
    319  0b06					      SUBROUTINE
    320  0b06
    321  0b06		       a0 47		      ldy	#71
    322  0b08		       b9 00 f1    .fromTo    lda	BackupBitmap,y
    323  0b0b		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    324  0b0e		       b9 48 f1 	      lda	BackupBitmap+72,y
    325  0b11		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
    326  0b14		       88		      dey
    327  0b15		       10 f1		      bpl	.fromTo
    328  0b17		       60		      rts
    329  0b18
    330  0b18
    331  0b18							;---------------------------------------------------------------------------------------------------
    332  0b18
      0  0b18					      DEF	CopyTextToRowBitmap
      1  0b18				   BANK_CopyTextToRowBitmap SET	_CURRENT_BANK
      2  0b18				   CopyTextToRowBitmap
      3  0b18				   TEMPORARY_VAR SET	Overlay
      4  0b18				   TEMPORARY_OFFSET SET	0
      5  0b18					      SUBROUTINE
    334  0b18					      SUBROUTINE
    335  0b18
    336  0b18							; An OR-draw, used for placing matricies/text onscreen
    337  0b18							; Similar to the EOR - first copy data into __pieceShapeBuffer, then call this function
    338  0b18							; The draw can be bracketed by "SaveBitmap" and "RestoreBitmap" to leave screen
    339  0b18							; in original state once text disappears
    340  0b18
    341  0b18		       a0 47		      ldy	#71
    342  0b1a		       b0 0d		      bcs	.rightSide
    343  0b1c
    344  0b1c		       b9 a1 00    .copy      lda	__pieceShapeBuffer,y
    345  0b1f		       19 00 f0 	      ora	ChessBitmap,y
    346  0b22		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    347  0b25		       88		      dey
    348  0b26		       10 f4		      bpl	.copy
    349  0b28
    350  0b28		       60		      rts
    351  0b29
    352  0b29				   .rightSide
    353  0b29
    354  0b29					      SUBROUTINE
    355  0b29
    356  0b29		       b9 a1 00    .copy      lda	__pieceShapeBuffer,y
    357  0b2c		       19 48 f0 	      ora	ChessBitmap+72,y
    358  0b2f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    359  0b32		       88		      dey
    360  0b33		       10 f4		      bpl	.copy
    361  0b35
    362  0b35		       60		      rts
    363  0b36
    364  0b36
    365  0b36							;---------------------------------------------------------------------------------------------------
    366  0b36
      0  0b36					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0b36
      2  0b36
      3  0b36		       03 36	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $336 , FREE= $ca
      4  0b36					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0b36				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0b36				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0b36				  -	      ERR
      8  0b36					      endif
    368  0b36							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  0b36					      include	"BANK_CHESS_INCLUDES.asm"
      1  0b36							; Chess
      2  0b36							; Atari 2600 Chess display system
      3  0b36							; Copyright (c) 2019-2020 Andrew Davie
      4  0b36							; andrew@taswegian.com
      5  0b36
      6  0b36
      7  0b36							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  0b36							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  0b36							; a single gif of the format..
     10  0b36							; a row of white pieces on black squares
     11  0b36							; a row of white pieces on white squares
     12  0b36							; a row of black pieces on black squares
     13  0b36							; a row of black pieces on white squares
     14  0b36
     15  0b36							; each row has the pieces ordered thus:
     16  0b36							; a blank, then pawn, knight, bishop, rook, queen, king
     17  0b36							; each piece is 5 pixels wide x 8 pixels deep
     18  0b36							; each pixel is from an 8-colour palette.
     19  0b36							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  0b36							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  0b36							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  0b36							; bit "b" becomes the second ICC pixel line (2)
     23  0b36							; bit "c" becomes the third ICC pixel line (3)
     24  0b36							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  0b36							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  0b36							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  0b36							; These 4 shifted positions are stored consecutively in the shape definition
     28  0b36
     29  0b36							; Example...
     30  0b36							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     31  0b36							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  0b36							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  0b36							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  0b36
     35  0b36							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  0b36							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  0b36							; actually have any data in PF1 or PF2.
     38  0b36
     39  0b36
     40  0b36
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  0b36					      include	"piece_graphics.asm"
      1  0b36							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0b36					      NEWBANK	PIECES_0
      1  17d8 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000				   TEMPORARY_VAR SET	Overlay
      4  1000				   TEMPORARY_OFFSET SET	0
      5  1000					      SUBROUTINE
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048				   TEMPORARY_VAR SET	Overlay
      4  1048				   TEMPORARY_OFFSET SET	0
      5  1048					      SUBROUTINE
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090				   TEMPORARY_VAR SET	Overlay
      4  1090				   TEMPORARY_OFFSET SET	0
      5  1090					      SUBROUTINE
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f100
     10  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100				   TEMPORARY_VAR SET	Overlay
      4  1100				   TEMPORARY_OFFSET SET	0
      5  1100					      SUBROUTINE
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148				   TEMPORARY_VAR SET	Overlay
      4  1148				   TEMPORARY_OFFSET SET	0
      5  1148					      SUBROUTINE
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190				   TEMPORARY_VAR SET	Overlay
      4  1190				   TEMPORARY_OFFSET SET	0
      5  1190					      SUBROUTINE
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f200
     10  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200				   TEMPORARY_VAR SET	Overlay
      4  1200				   TEMPORARY_OFFSET SET	0
      5  1200					      SUBROUTINE
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248				   TEMPORARY_VAR SET	Overlay
      4  1248				   TEMPORARY_OFFSET SET	0
      5  1248					      SUBROUTINE
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290				   TEMPORARY_VAR SET	Overlay
      4  1290				   TEMPORARY_OFFSET SET	0
      5  1290					      SUBROUTINE
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f300
     10  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300				   TEMPORARY_VAR SET	Overlay
      4  1300				   TEMPORARY_OFFSET SET	0
      5  1300					      SUBROUTINE
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348				   TEMPORARY_VAR SET	Overlay
      4  1348				   TEMPORARY_OFFSET SET	0
      5  1348					      SUBROUTINE
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390				   TEMPORARY_VAR SET	Overlay
      4  1390				   TEMPORARY_OFFSET SET	0
      5  1390					      SUBROUTINE
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f400
     10  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400				   TEMPORARY_VAR SET	Overlay
      4  1400				   TEMPORARY_OFFSET SET	0
      5  1400					      SUBROUTINE
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448				   TEMPORARY_VAR SET	Overlay
      4  1448				   TEMPORARY_OFFSET SET	0
      5  1448					      SUBROUTINE
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490				   TEMPORARY_VAR SET	Overlay
      4  1490				   TEMPORARY_OFFSET SET	0
      5  1490					      SUBROUTINE
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f500
     10  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500				   TEMPORARY_VAR SET	Overlay
      4  1500				   TEMPORARY_OFFSET SET	0
      5  1500					      SUBROUTINE
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548				   TEMPORARY_VAR SET	Overlay
      4  1548				   TEMPORARY_OFFSET SET	0
      5  1548					      SUBROUTINE
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590				   TEMPORARY_VAR SET	Overlay
      4  1590				   TEMPORARY_OFFSET SET	0
      5  1590					      SUBROUTINE
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f600
     10  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600				   TEMPORARY_VAR SET	Overlay
      4  1600				   TEMPORARY_OFFSET SET	0
      5  1600					      SUBROUTINE
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648				   TEMPORARY_VAR SET	Overlay
      4  1648				   TEMPORARY_OFFSET SET	0
      5  1648					      SUBROUTINE
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690				   TEMPORARY_VAR SET	Overlay
      4  1690				   TEMPORARY_OFFSET SET	0
      5  1690					      SUBROUTINE
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f700
     10  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700				   TEMPORARY_VAR SET	Overlay
      4  1700				   TEMPORARY_OFFSET SET	0
      5  1700					      SUBROUTINE
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748				   TEMPORARY_VAR SET	Overlay
      4  1748				   TEMPORARY_OFFSET SET	0
      5  1748					      SUBROUTINE
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790				   TEMPORARY_VAR SET	Overlay
      4  1790				   TEMPORARY_OFFSET SET	0
      5  1790					      SUBROUTINE
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  1fd8 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800				   TEMPORARY_VAR SET	Overlay
      4  1800				   TEMPORARY_OFFSET SET	0
      5  1800					      SUBROUTINE
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$70,$40,$e0,$40,$00,$00,$00,$a0,$80,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848				   TEMPORARY_VAR SET	Overlay
      4  1848				   TEMPORARY_OFFSET SET	0
      5  1848					      SUBROUTINE
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$70,$10,$38,$10,$00,$00,$00,$28,$08,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890				   TEMPORARY_VAR SET	Overlay
      4  1890				   TEMPORARY_OFFSET SET	0
      5  1890					      SUBROUTINE
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f100
     10  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900				   TEMPORARY_VAR SET	Overlay
      4  1900				   TEMPORARY_OFFSET SET	0
      5  1900					      SUBROUTINE
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$38,$20,$70,$20,$00,$00,$00,$50,$40,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948				   TEMPORARY_VAR SET	Overlay
      4  1948				   TEMPORARY_OFFSET SET	0
      5  1948					      SUBROUTINE
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990				   TEMPORARY_VAR SET	Overlay
      4  1990				   TEMPORARY_OFFSET SET	0
      5  1990					      SUBROUTINE
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f200
     10  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00				   TEMPORARY_VAR SET	Overlay
      4  1a00				   TEMPORARY_OFFSET SET	0
      5  1a00					      SUBROUTINE
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48				   TEMPORARY_VAR SET	Overlay
      4  1a48				   TEMPORARY_OFFSET SET	0
      5  1a48					      SUBROUTINE
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90				   TEMPORARY_VAR SET	Overlay
      4  1a90				   TEMPORARY_OFFSET SET	0
      5  1a90					      SUBROUTINE
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f300
     10  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00				   TEMPORARY_VAR SET	Overlay
      4  1b00				   TEMPORARY_OFFSET SET	0
      5  1b00					      SUBROUTINE
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48				   TEMPORARY_VAR SET	Overlay
      4  1b48				   TEMPORARY_OFFSET SET	0
      5  1b48					      SUBROUTINE
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90				   TEMPORARY_VAR SET	Overlay
      4  1b90				   TEMPORARY_OFFSET SET	0
      5  1b90					      SUBROUTINE
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f400
     10  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00				   TEMPORARY_VAR SET	Overlay
      4  1c00				   TEMPORARY_OFFSET SET	0
      5  1c00					      SUBROUTINE
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48				   TEMPORARY_VAR SET	Overlay
      4  1c48				   TEMPORARY_OFFSET SET	0
      5  1c48					      SUBROUTINE
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90				   TEMPORARY_VAR SET	Overlay
      4  1c90				   TEMPORARY_OFFSET SET	0
      5  1c90					      SUBROUTINE
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f500
     10  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00				   TEMPORARY_VAR SET	Overlay
      4  1d00				   TEMPORARY_OFFSET SET	0
      5  1d00					      SUBROUTINE
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48				   TEMPORARY_VAR SET	Overlay
      4  1d48				   TEMPORARY_OFFSET SET	0
      5  1d48					      SUBROUTINE
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90				   TEMPORARY_VAR SET	Overlay
      4  1d90				   TEMPORARY_OFFSET SET	0
      5  1d90					      SUBROUTINE
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f600
     10  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00				   TEMPORARY_VAR SET	Overlay
      4  1e00				   TEMPORARY_OFFSET SET	0
      5  1e00					      SUBROUTINE
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48				   TEMPORARY_VAR SET	Overlay
      4  1e48				   TEMPORARY_OFFSET SET	0
      5  1e48					      SUBROUTINE
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90				   TEMPORARY_VAR SET	Overlay
      4  1e90				   TEMPORARY_OFFSET SET	0
      5  1e90					      SUBROUTINE
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f700
     10  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00				   TEMPORARY_VAR SET	Overlay
      4  1f00				   TEMPORARY_OFFSET SET	0
      5  1f00					      SUBROUTINE
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48				   TEMPORARY_VAR SET	Overlay
      4  1f48				   TEMPORARY_OFFSET SET	0
      5  1f48					      SUBROUTINE
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90				   TEMPORARY_VAR SET	Overlay
      4  1f90				   TEMPORARY_OFFSET SET	0
      5  1f90					      SUBROUTINE
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  27d8 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000				   TEMPORARY_VAR SET	Overlay
      4  2000				   TEMPORARY_OFFSET SET	0
      5  2000					      SUBROUTINE
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048				   TEMPORARY_VAR SET	Overlay
      4  2048				   TEMPORARY_OFFSET SET	0
      5  2048					      SUBROUTINE
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090				   TEMPORARY_VAR SET	Overlay
      4  2090				   TEMPORARY_OFFSET SET	0
      5  2090					      SUBROUTINE
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f100
     10  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100				   TEMPORARY_VAR SET	Overlay
      4  2100				   TEMPORARY_OFFSET SET	0
      5  2100					      SUBROUTINE
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148				   TEMPORARY_VAR SET	Overlay
      4  2148				   TEMPORARY_OFFSET SET	0
      5  2148					      SUBROUTINE
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$70,$40,$e0,$40,$e0,$e0,$f0,$50,$70,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190				   TEMPORARY_VAR SET	Overlay
      4  2190				   TEMPORARY_OFFSET SET	0
      5  2190					      SUBROUTINE
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$70,$10,$38,$10,$38,$38,$7c,$54,$74,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f200
     10  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200				   TEMPORARY_VAR SET	Overlay
      4  2200				   TEMPORARY_OFFSET SET	0
      5  2200					      SUBROUTINE
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$01,$01,$03,$02,$03,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248				   TEMPORARY_VAR SET	Overlay
      4  2248				   TEMPORARY_OFFSET SET	0
      5  2248					      SUBROUTINE
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$38,$20,$70,$20,$70,$70,$f8,$a8,$b8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290				   TEMPORARY_VAR SET	Overlay
      4  2290				   TEMPORARY_OFFSET SET	0
      5  2290					      SUBROUTINE
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f300
     10  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300				   TEMPORARY_VAR SET	Overlay
      4  2300				   TEMPORARY_OFFSET SET	0
      5  2300					      SUBROUTINE
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348				   TEMPORARY_VAR SET	Overlay
      4  2348				   TEMPORARY_OFFSET SET	0
      5  2348					      SUBROUTINE
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390				   TEMPORARY_VAR SET	Overlay
      4  2390				   TEMPORARY_OFFSET SET	0
      5  2390					      SUBROUTINE
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f400
     10  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400				   TEMPORARY_VAR SET	Overlay
      4  2400				   TEMPORARY_OFFSET SET	0
      5  2400					      SUBROUTINE
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448				   TEMPORARY_VAR SET	Overlay
      4  2448				   TEMPORARY_OFFSET SET	0
      5  2448					      SUBROUTINE
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490				   TEMPORARY_VAR SET	Overlay
      4  2490				   TEMPORARY_OFFSET SET	0
      5  2490					      SUBROUTINE
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f500
     10  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500				   TEMPORARY_VAR SET	Overlay
      4  2500				   TEMPORARY_OFFSET SET	0
      5  2500					      SUBROUTINE
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548				   TEMPORARY_VAR SET	Overlay
      4  2548				   TEMPORARY_OFFSET SET	0
      5  2548					      SUBROUTINE
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590				   TEMPORARY_VAR SET	Overlay
      4  2590				   TEMPORARY_OFFSET SET	0
      5  2590					      SUBROUTINE
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$70,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f600
     10  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600				   TEMPORARY_VAR SET	Overlay
      4  2600				   TEMPORARY_OFFSET SET	0
      5  2600					      SUBROUTINE
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$01,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648				   TEMPORARY_VAR SET	Overlay
      4  2648				   TEMPORARY_OFFSET SET	0
      5  2648					      SUBROUTINE
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$38,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690				   TEMPORARY_VAR SET	Overlay
      4  2690				   TEMPORARY_OFFSET SET	0
      5  2690					      SUBROUTINE
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f700
     10  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700				   TEMPORARY_VAR SET	Overlay
      4  2700				   TEMPORARY_OFFSET SET	0
      5  2700					      SUBROUTINE
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748				   TEMPORARY_VAR SET	Overlay
      4  2748				   TEMPORARY_OFFSET SET	0
      5  2748					      SUBROUTINE
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790				   TEMPORARY_VAR SET	Overlay
      4  2790				   TEMPORARY_OFFSET SET	0
      5  2790					      SUBROUTINE
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  2fd8 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800				   TEMPORARY_VAR SET	Overlay
      4  2800				   TEMPORARY_OFFSET SET	0
      5  2800					      SUBROUTINE
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848				   TEMPORARY_VAR SET	Overlay
      4  2848				   TEMPORARY_OFFSET SET	0
      5  2848					      SUBROUTINE
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890				   TEMPORARY_VAR SET	Overlay
      4  2890				   TEMPORARY_OFFSET SET	0
      5  2890					      SUBROUTINE
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f100
     10  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900				   TEMPORARY_VAR SET	Overlay
      4  2900				   TEMPORARY_OFFSET SET	0
      5  2900					      SUBROUTINE
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948				   TEMPORARY_VAR SET	Overlay
      4  2948				   TEMPORARY_OFFSET SET	0
      5  2948					      SUBROUTINE
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990				   TEMPORARY_VAR SET	Overlay
      4  2990				   TEMPORARY_OFFSET SET	0
      5  2990					      SUBROUTINE
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f200
     10  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00				   TEMPORARY_VAR SET	Overlay
      4  2a00				   TEMPORARY_OFFSET SET	0
      5  2a00					      SUBROUTINE
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48				   TEMPORARY_VAR SET	Overlay
      4  2a48				   TEMPORARY_OFFSET SET	0
      5  2a48					      SUBROUTINE
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90				   TEMPORARY_VAR SET	Overlay
      4  2a90				   TEMPORARY_OFFSET SET	0
      5  2a90					      SUBROUTINE
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$70,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f300
     10  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00				   TEMPORARY_VAR SET	Overlay
      4  2b00				   TEMPORARY_OFFSET SET	0
      5  2b00					      SUBROUTINE
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$70,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48				   TEMPORARY_VAR SET	Overlay
      4  2b48				   TEMPORARY_OFFSET SET	0
      5  2b48					      SUBROUTINE
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90				   TEMPORARY_VAR SET	Overlay
      4  2b90				   TEMPORARY_OFFSET SET	0
      5  2b90					      SUBROUTINE
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$38,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f400
     10  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00				   TEMPORARY_VAR SET	Overlay
      4  2c00				   TEMPORARY_OFFSET SET	0
      5  2c00					      SUBROUTINE
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48				   TEMPORARY_VAR SET	Overlay
      4  2c48				   TEMPORARY_OFFSET SET	0
      5  2c48					      SUBROUTINE
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90				   TEMPORARY_VAR SET	Overlay
      4  2c90				   TEMPORARY_OFFSET SET	0
      5  2c90					      SUBROUTINE
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f500
     10  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00				   TEMPORARY_VAR SET	Overlay
      4  2d00				   TEMPORARY_OFFSET SET	0
      5  2d00					      SUBROUTINE
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48				   TEMPORARY_VAR SET	Overlay
      4  2d48				   TEMPORARY_OFFSET SET	0
      5  2d48					      SUBROUTINE
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90				   TEMPORARY_VAR SET	Overlay
      4  2d90				   TEMPORARY_OFFSET SET	0
      5  2d90					      SUBROUTINE
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f600
     10  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00				   TEMPORARY_VAR SET	Overlay
      4  2e00				   TEMPORARY_OFFSET SET	0
      5  2e00					      SUBROUTINE
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48				   TEMPORARY_VAR SET	Overlay
      4  2e48				   TEMPORARY_OFFSET SET	0
      5  2e48					      SUBROUTINE
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90				   TEMPORARY_VAR SET	Overlay
      4  2e90				   TEMPORARY_OFFSET SET	0
      5  2e90					      SUBROUTINE
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f700
     10  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00				   TEMPORARY_VAR SET	Overlay
      4  2f00				   TEMPORARY_OFFSET SET	0
      5  2f00					      SUBROUTINE
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48				   TEMPORARY_VAR SET	Overlay
      4  2f48				   TEMPORARY_OFFSET SET	0
      5  2f48					      SUBROUTINE
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90				   TEMPORARY_VAR SET	Overlay
      4  2f90				   TEMPORARY_OFFSET SET	0
      5  2f90					      SUBROUTINE
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_4
      1  37d8 ????				      SEG	PIECES_4
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_4   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3000				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3000				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3000				   TEMPORARY_VAR SET	Overlay
      4  3000				   TEMPORARY_OFFSET SET	0
      5  3000					      SUBROUTINE
      3  3000		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3048				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3048				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3048				   TEMPORARY_VAR SET	Overlay
      4  3048				   TEMPORARY_OFFSET SET	0
      5  3048					      SUBROUTINE
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3090				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3090				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3090				   TEMPORARY_VAR SET	Overlay
      4  3090				   TEMPORARY_OFFSET SET	0
      5  3090					      SUBROUTINE
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  30c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f100
     10  3100					      LIST	ON
      0  3100					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3100				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3100				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3100				   TEMPORARY_VAR SET	Overlay
      4  3100				   TEMPORARY_OFFSET SET	0
      5  3100					      SUBROUTINE
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3148				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3148				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3148				   TEMPORARY_VAR SET	Overlay
      4  3148				   TEMPORARY_OFFSET SET	0
      5  3148					      SUBROUTINE
      3  3148		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  3160		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3190				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3190				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3190				   TEMPORARY_VAR SET	Overlay
      4  3190				   TEMPORARY_OFFSET SET	0
      5  3190					      SUBROUTINE
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f200
     10  3200					      LIST	ON
      0  3200					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3200				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3200				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3200				   TEMPORARY_VAR SET	Overlay
      4  3200				   TEMPORARY_OFFSET SET	0
      5  3200					      SUBROUTINE
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  3230		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3248				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3248				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3248				   TEMPORARY_VAR SET	Overlay
      4  3248				   TEMPORARY_OFFSET SET	0
      5  3248					      SUBROUTINE
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3290				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3290				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3290				   TEMPORARY_VAR SET	Overlay
      4  3290				   TEMPORARY_OFFSET SET	0
      5  3290					      SUBROUTINE
      3  3290		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  32a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f300
     10  3300					      LIST	ON
      0  3300					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3300				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3300				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3300				   TEMPORARY_VAR SET	Overlay
      4  3300				   TEMPORARY_OFFSET SET	0
      5  3300					      SUBROUTINE
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3348				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3348				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3348				   TEMPORARY_VAR SET	Overlay
      4  3348				   TEMPORARY_OFFSET SET	0
      5  3348					      SUBROUTINE
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3378		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3390				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3390				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3390				   TEMPORARY_VAR SET	Overlay
      4  3390				   TEMPORARY_OFFSET SET	0
      5  3390					      SUBROUTINE
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f400
     10  3400					      LIST	ON
      0  3400					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400				   BLACK_KING_on_BLACK_SQUARE_0
      3  3400				   TEMPORARY_VAR SET	Overlay
      4  3400				   TEMPORARY_OFFSET SET	0
      5  3400					      SUBROUTINE
      3  3400		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$70,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  3418		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448				   BLACK_KING_on_BLACK_SQUARE_1
      3  3448				   TEMPORARY_VAR SET	Overlay
      4  3448				   TEMPORARY_OFFSET SET	0
      5  3448					      SUBROUTINE
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$70,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490				   BLACK_KING_on_BLACK_SQUARE_2
      3  3490				   TEMPORARY_VAR SET	Overlay
      4  3490				   TEMPORARY_OFFSET SET	0
      5  3490					      SUBROUTINE
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  34c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f500
     10  3500					      LIST	ON
      0  3500					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500				   BLACK_KING_on_BLACK_SQUARE_3
      3  3500				   TEMPORARY_VAR SET	Overlay
      4  3500				   TEMPORARY_OFFSET SET	0
      5  3500					      SUBROUTINE
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$38,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE piece_graphics.asm
    124  3548
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  3548				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  3548				   TEMPORARY_VAR SET	Overlay
      4  3548				   TEMPORARY_OFFSET SET	0
      5  3548					      SUBROUTINE
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  3590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  3590				   TEMPORARY_VAR SET	Overlay
      4  3590				   TEMPORARY_OFFSET SET	0
      5  3590					      SUBROUTINE
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR WHITE_MARKER_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f600
     10  3600					      LIST	ON
      0  3600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  3600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  3600				   TEMPORARY_VAR SET	Overlay
      4  3600				   TEMPORARY_OFFSET SET	0
      5  3600					      SUBROUTINE
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  3648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  3648				   TEMPORARY_VAR SET	Overlay
      4  3648				   TEMPORARY_OFFSET SET	0
      5  3648					      SUBROUTINE
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  3690				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3690				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  3690				   TEMPORARY_VAR SET	Overlay
      4  3690				   TEMPORARY_OFFSET SET	0
      5  3690					      SUBROUTINE
      3  3690		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR WHITE_MARKER_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f700
     10  3700					      LIST	ON
      0  3700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  3700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3700				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  3700				   TEMPORARY_VAR SET	Overlay
      4  3700				   TEMPORARY_OFFSET SET	0
      5  3700					      SUBROUTINE
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  3748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3748				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  3748				   TEMPORARY_VAR SET	Overlay
      4  3748				   TEMPORARY_OFFSET SET	0
      5  3748					      SUBROUTINE
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3778		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  3790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3790				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  3790				   TEMPORARY_VAR SET	Overlay
      4  3790				   TEMPORARY_OFFSET SET	0
      5  3790					      SUBROUTINE
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
    134  37d8
      0  37d8					      NEWBANK	PIECES_5
      1  3fd8 ????				      SEG	PIECES_5
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_5   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_5
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3800				   TEMPORARY_VAR SET	Overlay
      4  3800				   TEMPORARY_OFFSET SET	0
      5  3800					      SUBROUTINE
      3  3800		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3848				   TEMPORARY_VAR SET	Overlay
      4  3848				   TEMPORARY_OFFSET SET	0
      5  3848					      SUBROUTINE
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3890				   TEMPORARY_VAR SET	Overlay
      4  3890				   TEMPORARY_OFFSET SET	0
      5  3890					      SUBROUTINE
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  38c0		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR BLACK_MARKER_on_BLACK_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f100
     10  3900					      LIST	ON
      0  3900					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3900				   TEMPORARY_VAR SET	Overlay
      4  3900				   TEMPORARY_OFFSET SET	0
      5  3900					      SUBROUTINE
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3948				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3948				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3948				   TEMPORARY_VAR SET	Overlay
      4  3948				   TEMPORARY_OFFSET SET	0
      5  3948					      SUBROUTINE
      3  3948		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  3960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3990				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3990				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3990				   TEMPORARY_VAR SET	Overlay
      4  3990				   TEMPORARY_OFFSET SET	0
      5  3990					      SUBROUTINE
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR BLACK_MARKER_on_WHITE_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f200
     10  3a00					      LIST	ON
      0  3a00					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3a00				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3a00				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3a00				   TEMPORARY_VAR SET	Overlay
      4  3a00				   TEMPORARY_OFFSET SET	0
      5  3a00					      SUBROUTINE
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a30		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3a48				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3a48				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3a48				   TEMPORARY_VAR SET	Overlay
      4  3a48				   TEMPORARY_OFFSET SET	0
      5  3a48					      SUBROUTINE
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    144  3a90
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3a90					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  3a90					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_0", 72
     10  3a90					      LIST	ON
      0  3a90					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_0
      1  3a90				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3a90				   WHITE_PROMOTE_on_BLACK_SQUARE_0
      3  3a90				   TEMPORARY_VAR SET	Overlay
      4  3a90				   TEMPORARY_OFFSET SET	0
      5  3a90					      SUBROUTINE
      3  3a90		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  3aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ad8					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  3ad8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR WHITE_PROMOTE_on_BLACK_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f300
     10  3b00					      LIST	ON
      0  3b00					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_1
      1  3b00				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3b00				   WHITE_PROMOTE_on_BLACK_SQUARE_1
      3  3b00				   TEMPORARY_VAR SET	Overlay
      4  3b00				   TEMPORARY_OFFSET SET	0
      5  3b00					      SUBROUTINE
      3  3b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b18		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  3b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3b48					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  3b48					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_2", 72
     10  3b48					      LIST	ON
      0  3b48					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_2
      1  3b48				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3b48				   WHITE_PROMOTE_on_BLACK_SQUARE_2
      3  3b48				   TEMPORARY_VAR SET	Overlay
      4  3b48				   TEMPORARY_OFFSET SET	0
      5  3b48					      SUBROUTINE
      3  3b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  3b78		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3b90					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  3b90					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_3", 72
     10  3b90					      LIST	ON
      0  3b90					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_3
      1  3b90				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3b90				   WHITE_PROMOTE_on_BLACK_SQUARE_3
      3  3b90				   TEMPORARY_VAR SET	Overlay
      4  3b90				   TEMPORARY_OFFSET SET	0
      5  3b90					      SUBROUTINE
      3  3b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3bc0		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3bd8					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  3bd8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR WHITE_PROMOTE_on_WHITE_SQUARE_0
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f400
     10  3c00					      LIST	ON
      0  3c00					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_0
      1  3c00				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3c00				   WHITE_PROMOTE_on_WHITE_SQUARE_0
      3  3c00				   TEMPORARY_VAR SET	Overlay
      4  3c00				   TEMPORARY_OFFSET SET	0
      5  3c00					      SUBROUTINE
      3  3c00		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3c48					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  3c48					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_1", 72
     10  3c48					      LIST	ON
      0  3c48					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_1
      1  3c48				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3c48				   WHITE_PROMOTE_on_WHITE_SQUARE_1
      3  3c48				   TEMPORARY_VAR SET	Overlay
      4  3c48				   TEMPORARY_OFFSET SET	0
      5  3c48					      SUBROUTINE
      3  3c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c60		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3c90					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  3c90					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_2", 72
     10  3c90					      LIST	ON
      0  3c90					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_2
      1  3c90				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3c90				   WHITE_PROMOTE_on_WHITE_SQUARE_2
      3  3c90				   TEMPORARY_VAR SET	Overlay
      4  3c90				   TEMPORARY_OFFSET SET	0
      5  3c90					      SUBROUTINE
      3  3c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3cc0		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3cd8					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  3cd8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR WHITE_PROMOTE_on_WHITE_SQUARE_3
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f500
     10  3d00					      LIST	ON
      0  3d00					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_3
      1  3d00				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3d00				   WHITE_PROMOTE_on_WHITE_SQUARE_3
      3  3d00				   TEMPORARY_VAR SET	Overlay
      4  3d00				   TEMPORARY_OFFSET SET	0
      5  3d00					      SUBROUTINE
      3  3d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d30		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    153  3d48
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3d48					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  3d48					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_0", 72
     10  3d48					      LIST	ON
      0  3d48					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_0
      1  3d48				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3d48				   BLACK_PROMOTE_on_BLACK_SQUARE_0
      3  3d48				   TEMPORARY_VAR SET	Overlay
      4  3d48				   TEMPORARY_OFFSET SET	0
      5  3d48					      SUBROUTINE
      3  3d48		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3d90					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  3d90					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_1", 72
     10  3d90					      LIST	ON
      0  3d90					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_1
      1  3d90				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3d90				   BLACK_PROMOTE_on_BLACK_SQUARE_1
      3  3d90				   TEMPORARY_VAR SET	Overlay
      4  3d90				   TEMPORARY_OFFSET SET	0
      5  3d90					      SUBROUTINE
      3  3d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3da8		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3dd8					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  3dd8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR BLACK_PROMOTE_on_BLACK_SQUARE_2
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f600
     10  3e00					      LIST	ON
      0  3e00					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_2
      1  3e00				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3e00				   BLACK_PROMOTE_on_BLACK_SQUARE_2
      3  3e00				   TEMPORARY_VAR SET	Overlay
      4  3e00				   TEMPORARY_OFFSET SET	0
      5  3e00					      SUBROUTINE
      3  3e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3e18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3e30		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3e48					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  3e48					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_3", 72
     10  3e48					      LIST	ON
      0  3e48					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_3
      1  3e48				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3e48				   BLACK_PROMOTE_on_BLACK_SQUARE_3
      3  3e48				   TEMPORARY_VAR SET	Overlay
      4  3e48				   TEMPORARY_OFFSET SET	0
      5  3e48					      SUBROUTINE
      3  3e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3e78		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3e90					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  3e90					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_0", 72
     10  3e90					      LIST	ON
      0  3e90					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_0
      1  3e90				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3e90				   BLACK_PROMOTE_on_WHITE_SQUARE_0
      3  3e90				   TEMPORARY_VAR SET	Overlay
      4  3e90				   TEMPORARY_OFFSET SET	0
      5  3e90					      SUBROUTINE
      3  3e90		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  3ea8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ed8					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  3ed8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR BLACK_PROMOTE_on_WHITE_SQUARE_1
 REQUESTED SIZE = $48
 WASTED SPACE = $28
 PAGEBREAK LOCATION = $f700
     10  3f00					      LIST	ON
      0  3f00					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_1
      1  3f00				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3f00				   BLACK_PROMOTE_on_WHITE_SQUARE_1
      3  3f00				   TEMPORARY_VAR SET	Overlay
      4  3f00				   TEMPORARY_OFFSET SET	0
      5  3f00					      SUBROUTINE
      3  3f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3f18		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  3f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3f48					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  3f48					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_2", 72
     10  3f48					      LIST	ON
      0  3f48					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_2
      1  3f48				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3f48				   BLACK_PROMOTE_on_WHITE_SQUARE_2
      3  3f48				   TEMPORARY_VAR SET	Overlay
      4  3f48				   TEMPORARY_OFFSET SET	0
      5  3f48					      SUBROUTINE
      3  3f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3f60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  3f78		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3f90					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  3f90					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_3", 72
     10  3f90					      LIST	ON
      0  3f90					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_3
      1  3f90				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3f90				   BLACK_PROMOTE_on_WHITE_SQUARE_3
      3  3f90				   TEMPORARY_VAR SET	Overlay
      4  3f90				   TEMPORARY_OFFSET SET	0
      5  3f90					      SUBROUTINE
      3  3f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3fc0		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE piece_graphics.asm
    162  3fd8
    163  3fd8
    164  3fd8				  -	      if	0
    165  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    166  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    167  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    168  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    169  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    170  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    171  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    172  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    173  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    174  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    175  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    176  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    177  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    178  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    179  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    180  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    181  3fd8					      endif
      0  3fd8					      CHECK_BANK_SIZE	"PIECES_5 (2K)"
      1  3fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_5 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  3fd8					      ECHO	"PIECES_5 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3fd8				  -	      ERR
      6  3fd8					      endif
    183  3fd8
    184  3fd8				  -	      if	0
    185  3fd8				  -	      NEWBANK	PIECES_6
    186  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    187  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    188  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    189  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    190  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    191  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    192  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    193  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    194  3fd8				  -
    195  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    196  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    197  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    198  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    199  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    200  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    201  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    202  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    203  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    204  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    205  3fd8				  -
    206  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    207  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    208  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    209  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    210  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    211  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    212  3fd8				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    213  3fd8				  -
    214  3fd8				  -
    215  3fd8				  -	      NEWBANK	PIECES_7
    216  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    217  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    218  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    219  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    220  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    221  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    222  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    223  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    224  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    225  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    226  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    227  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    228  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    229  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    230  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    231  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    232  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    233  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    234  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    235  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    236  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    237  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    238  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    239  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    240  3fd8				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    241  3fd8				  -
    242  3fd8				  -
    243  3fd8				  -	      NEWBANK	PIECES_8
    244  3fd8				  -
    245  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    246  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    247  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    248  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    249  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    250  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    251  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    252  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    253  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    254  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    255  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    256  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    257  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    258  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    259  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    260  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    261  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    262  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    263  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    264  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    265  3fd8				  -
    266  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    267  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    268  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    269  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    270  3fd8				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    271  3fd8				  -
    272  3fd8					      endif
    273  3fd8
    274  3fd8							;    NEWBANK PIECES_9
    275  3fd8
    276  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    277  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    278  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    279  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    280  3fd8							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    281  3fd8
    282  3fd8				  -	      if	0
    283  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    284  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    285  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    286  3fd8					      endif
    287  3fd8
    288  3fd8							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    289  3fd8
    290  3fd8				  -	      if	0
    291  3fd8				  -
    292  3fd8				  -
    293  3fd8				  -
    294  3fd8				  -
    295  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    296  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    297  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    298  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    299  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    300  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    301  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    302  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    303  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    304  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    305  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    306  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    307  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    308  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    309  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    310  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    311  3fd8				  -
    312  3fd8				  -
    313  3fd8					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3fd8
      0  3fd8					      NEWBANK	PIECE_VECTORS
      1  41b0 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEF	PIECE_VECTOR_LO
      1  4000				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4000				   PIECE_VECTOR_LO
      3  4000				   TEMPORARY_VAR SET	Overlay
      4  4000				   TEMPORARY_OFFSET SET	0
      5  4000					      SUBROUTINE
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  401d		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  401e		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  401f		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  4020		       00		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_0
     36  4021		       48		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_1
     37  4022		       90		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_2
     38  4023		       00		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_3
     39  4024		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     40  4025		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     41  4026		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     42  4027		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     43  4028		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     44  4029		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     45  402a		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     46  402b		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     47  402c		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     48  402d		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     49  402e		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     50  402f		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     51  4030		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     52  4031		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     53  4032		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     54  4033		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     55  4034		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     56  4035		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     57  4036		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     58  4037		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     59  4038		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     60  4039		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     61  403a		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     62  403b		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     63  403c		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     64  403d		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     65  403e		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     66  403f		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     67  4040		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     68  4041		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     69  4042		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     70  4043		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     71  4044		       90		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_0
     72  4045		       00		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_1
     73  4046		       48		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_2
     74  4047		       90		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_3
     75  4048		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     76  4049		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     77  404a		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     78  404b		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     79  404c		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     80  404d		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     81  404e		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     82  404f		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     83  4050		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     84  4051		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     85  4052		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     86  4053		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     87  4054		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     88  4055		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     89  4056		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     90  4057		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     91  4058		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     92  4059		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     93  405a		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     94  405b		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     95  405c		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     96  405d		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     97  405e		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     98  405f		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     99  4060		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
    100  4061		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
    101  4062		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
    102  4063		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    115  4070		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    116  4071		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    117  4072		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    118  4073		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    119  4074		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    120  4075		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    121  4076		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    122  4077		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    123  4078		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    124  4079		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    125  407a		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    126  407b		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    127  407c		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    128  407d		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    129  407e		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    130  407f		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    131  4080		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    132  4081		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    133  4082		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    134  4083		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    135  4084		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    136  4085		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    137  4086		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    138  4087		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    139  4088		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    140  4089		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    141  408a		       90		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    142  408b		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
    143  408c		       48		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_0
    144  408d		       90		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_1
    145  408e		       00		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_2
    146  408f		       48		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  4090					      DEF	PIECE_VECTOR_HI
      1  4090				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4090				   PIECE_VECTOR_HI
      3  4090				   TEMPORARY_VAR SET	Overlay
      4  4090				   TEMPORARY_OFFSET SET	0
      5  4090					      SUBROUTINE
    148  4090		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    149  4091		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    150  4092		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    151  4093		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    152  4094		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    153  4095		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    154  4096		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    155  4097		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    156  4098		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    157  4099		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    158  409a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    159  409b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    160  409c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    161  409d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    162  409e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    163  409f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    164  40a0		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    165  40a1		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    166  40a2		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    167  40a3		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    168  40a4		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    169  40a5		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    170  40a6		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    171  40a7		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    172  40a8		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    173  40a9		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    174  40aa		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    175  40ab		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    176  40ac		       f6		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    177  40ad		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    178  40ae		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    179  40af		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    180  40b0		       f4		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_0
    181  40b1		       f4		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_1
    182  40b2		       f4		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_2
    183  40b3		       f5		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_3
    184  40b4		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    185  40b5		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    186  40b6		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    187  40b7		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    188  40b8		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    189  40b9		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    190  40ba		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    191  40bb		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    192  40bc		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    193  40bd		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    194  40be		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    195  40bf		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    196  40c0		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    197  40c1		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    198  40c2		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    199  40c3		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    200  40c4		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    201  40c5		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    202  40c6		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    203  40c7		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    204  40c8		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    205  40c9		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    206  40ca		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    207  40cb		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    208  40cc		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    209  40cd		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    210  40ce		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    211  40cf		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    212  40d0		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    213  40d1		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    214  40d2		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    215  40d3		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    216  40d4		       f2		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_0
    217  40d5		       f3		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_1
    218  40d6		       f3		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_2
    219  40d7		       f3		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    224  40dc		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    225  40dd		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    226  40de		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    227  40df		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    228  40e0		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    229  40e1		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    230  40e2		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    231  40e3		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    232  40e4		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    233  40e5		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    234  40e6		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    235  40e7		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    236  40e8		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    237  40e9		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    238  40ea		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    239  40eb		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    240  40ec		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    241  40ed		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    242  40ee		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    243  40ef		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    244  40f0		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    245  40f1		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    246  40f2		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    247  40f3		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    248  40f4		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    249  40f5		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    250  40f6		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    251  40f7		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    252  40f8		       f6		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_0
    253  40f9		       f7		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_1
    254  40fa		       f7		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_2
    255  40fb		       f7		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_3
    256  40fc		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    257  40fd		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    258  40fe		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    259  40ff		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    260  4100		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    261  4101		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    262  4102		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    263  4103		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    264  4104		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    265  4105		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    266  4106		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    267  4107		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    268  4108		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    269  4109		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    270  410a		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    271  410b		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    272  410c		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    273  410d		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    274  410e		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    275  410f		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    276  4110		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    277  4111		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    278  4112		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    279  4113		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    280  4114		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    281  4115		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    282  4116		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    283  4117		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    284  4118		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    285  4119		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    286  411a		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    287  411b		       f1		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
    288  411c		       f5		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_0
    289  411d		       f5		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_1
    290  411e		       f6		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_2
    291  411f		       f6		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  4120					      DEF	PIECE_VECTOR_BANK
      1  4120				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  4120				   PIECE_VECTOR_BANK
      3  4120				   TEMPORARY_VAR SET	Overlay
      4  4120				   TEMPORARY_OFFSET SET	0
      5  4120					      SUBROUTINE
    293  4120		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    294  4121		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    295  4122		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    296  4123		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    297  4124		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    298  4125		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    299  4126		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    300  4127		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    301  4128		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    302  4129		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    303  412a		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    304  412b		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    305  412c		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    306  412d		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    307  412e		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    308  412f		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    309  4130		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    310  4131		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    311  4132		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    312  4133		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    313  4134		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    314  4135		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    315  4136		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    316  4137		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    317  4138		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    318  4139		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    319  413a		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    320  413b		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    321  413c		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    322  413d		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    323  413e		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    324  413f		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    325  4140		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0
    326  4141		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1
    327  4142		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2
    328  4143		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3
    329  4144		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    330  4145		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    331  4146		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    332  4147		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    333  4148		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    334  4149		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    335  414a		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    336  414b		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    337  414c		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    338  414d		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    339  414e		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    340  414f		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    341  4150		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    342  4151		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    343  4152		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    344  4153		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    345  4154		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    346  4155		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    347  4156		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    348  4157		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    349  4158		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    350  4159		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    351  415a		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    352  415b		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    353  415c		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    354  415d		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    355  415e		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    356  415f		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    357  4160		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    358  4161		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    359  4162		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    360  4163		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    361  4164		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0
    362  4165		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1
    363  4166		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2
    364  4167		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3
    365  4168		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    366  4169		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    367  416a		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    368  416b		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    369  416c		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    370  416d		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    371  416e		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    372  416f		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    373  4170		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    374  4171		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    375  4172		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    376  4173		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    377  4174		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    378  4175		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    379  4176		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    380  4177		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    381  4178		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    382  4179		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    383  417a		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    384  417b		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    385  417c		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    386  417d		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    387  417e		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    388  417f		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    389  4180		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    390  4181		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    391  4182		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    392  4183		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    393  4184		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    394  4185		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    395  4186		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    396  4187		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    397  4188		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0
    398  4189		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1
    399  418a		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2
    400  418b		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3
    401  418c		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    402  418d		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    403  418e		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    404  418f		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    405  4190		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    406  4191		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    407  4192		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    408  4193		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    409  4194		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    410  4195		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    411  4196		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    412  4197		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    413  4198		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    414  4199		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    415  419a		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    416  419b		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    417  419c		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    418  419d		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    419  419e		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    420  419f		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    421  41a0		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    422  41a1		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    423  41a2		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    424  41a3		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    425  41a4		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    426  41a5		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    427  41a6		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    428  41a7		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    429  41a8		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    430  41a9		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    431  41aa		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    432  41ab		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    433  41ac		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0
    434  41ad		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1
    435  41ae		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2
    436  41af		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3
    437  41b0
    438  41b0							; piece index equates...
    439  41b0		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    440  41b0		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    441  41b0		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    442  41b0		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    443  41b0		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    444  41b0		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    445  41b0		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    446  41b0		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    447  41b0		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    448  41b0		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    449  41b0		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    450  41b0		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    451  41b0		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    452  41b0		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    453  41b0		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    454  41b0		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    455  41b0		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    456  41b0		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    457  41b0		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    458  41b0		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    459  41b0		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    460  41b0		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    461  41b0		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    462  41b0		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    463  41b0		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    464  41b0		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    465  41b0		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    466  41b0		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    467  41b0		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    468  41b0		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    469  41b0		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    470  41b0		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    471  41b0		       00 20	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0 =	32
    472  41b0		       00 21	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_1 =	33
    473  41b0		       00 22	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_2 =	34
    474  41b0		       00 23	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_3 =	35
    475  41b0		       00 24	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	36
    476  41b0		       00 25	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	37
    477  41b0		       00 26	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	38
    478  41b0		       00 27	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	39
    479  41b0		       00 28	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	40
    480  41b0		       00 29	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	41
    481  41b0		       00 2a	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	42
    482  41b0		       00 2b	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	43
    483  41b0		       00 2c	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	44
    484  41b0		       00 2d	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	45
    485  41b0		       00 2e	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	46
    486  41b0		       00 2f	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	47
    487  41b0		       00 30	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	48
    488  41b0		       00 31	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	49
    489  41b0		       00 32	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	50
    490  41b0		       00 33	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	51
    491  41b0		       00 34	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	52
    492  41b0		       00 35	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	53
    493  41b0		       00 36	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	54
    494  41b0		       00 37	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	55
    495  41b0		       00 38	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	56
    496  41b0		       00 39	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	57
    497  41b0		       00 3a	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	58
    498  41b0		       00 3b	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	59
    499  41b0		       00 3c	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	60
    500  41b0		       00 3d	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	61
    501  41b0		       00 3e	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	62
    502  41b0		       00 3f	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	63
    503  41b0		       00 40	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	64
    504  41b0		       00 41	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	65
    505  41b0		       00 42	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	66
    506  41b0		       00 43	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	67
    507  41b0		       00 44	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_0 =	68
    508  41b0		       00 45	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_1 =	69
    509  41b0		       00 46	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_2 =	70
    510  41b0		       00 47	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_3 =	71
    511  41b0		       00 48	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	72
    512  41b0		       00 49	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	73
    513  41b0		       00 4a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	74
    514  41b0		       00 4b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	75
    515  41b0		       00 4c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	76
    516  41b0		       00 4d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	77
    517  41b0		       00 4e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	78
    518  41b0		       00 4f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	79
    519  41b0		       00 50	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	80
    520  41b0		       00 51	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	81
    521  41b0		       00 52	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	82
    522  41b0		       00 53	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	83
    523  41b0		       00 54	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	84
    524  41b0		       00 55	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	85
    525  41b0		       00 56	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	86
    526  41b0		       00 57	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	87
    527  41b0		       00 58	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	88
    528  41b0		       00 59	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	89
    529  41b0		       00 5a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	90
    530  41b0		       00 5b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	91
    531  41b0		       00 5c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	92
    532  41b0		       00 5d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	93
    533  41b0		       00 5e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	94
    534  41b0		       00 5f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	95
    535  41b0		       00 60	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	96
    536  41b0		       00 61	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	97
    537  41b0		       00 62	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	98
    538  41b0		       00 63	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	99
    539  41b0		       00 64	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	100
    540  41b0		       00 65	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	101
    541  41b0		       00 66	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	102
    542  41b0		       00 67	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	103
    543  41b0		       00 68	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_0 =	104
    544  41b0		       00 69	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_1 =	105
    545  41b0		       00 6a	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_2 =	106
    546  41b0		       00 6b	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_3 =	107
    547  41b0		       00 6c	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	108
    548  41b0		       00 6d	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	109
    549  41b0		       00 6e	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	110
    550  41b0		       00 6f	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	111
    551  41b0		       00 70	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	112
    552  41b0		       00 71	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	113
    553  41b0		       00 72	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	114
    554  41b0		       00 73	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	115
    555  41b0		       00 74	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	116
    556  41b0		       00 75	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	117
    557  41b0		       00 76	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	118
    558  41b0		       00 77	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	119
    559  41b0		       00 78	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	120
    560  41b0		       00 79	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	121
    561  41b0		       00 7a	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	122
    562  41b0		       00 7b	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	123
    563  41b0		       00 7c	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	124
    564  41b0		       00 7d	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	125
    565  41b0		       00 7e	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	126
    566  41b0		       00 7f	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	127
    567  41b0		       00 80	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	128
    568  41b0		       00 81	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	129
    569  41b0		       00 82	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	130
    570  41b0		       00 83	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	131
    571  41b0		       00 84	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	132
    572  41b0		       00 85	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	133
    573  41b0		       00 86	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	134
    574  41b0		       00 87	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	135
    575  41b0		       00 88	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	136
    576  41b0		       00 89	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	137
    577  41b0		       00 8a	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	138
    578  41b0		       00 8b	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	139
    579  41b0		       00 8c	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_0 =	140
    580  41b0		       00 8d	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_1 =	141
    581  41b0		       00 8e	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_2 =	142
    582  41b0		       00 8f	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_3 =	143
------- FILE BANK_CHESS_INCLUDES.asm
      0  41b0					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  41b0		       01 b0	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $1b0 , FREE= $650
      2  41b0					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  41b0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  41b0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  41b0				  -	      ERR
      6  41b0					      endif
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 2
      0  41b0					      include	"BANK_StateMachine.asm"
      0  41b0					      NEWBANK	STATEMACHINE
      1  4c38 ????				      SEG	STATEMACHINE
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   STATEMACHINE SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	STATEMACHINE
      2  4800
      3  4800
      4  4800							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
      5  4800
      6  4800		       00 09	   PLAYER     =	RAMBANK_PLY
      7  4800		       00 0a	   OPPONENT   =	PLAYER + 1
      8  4800
      9  4800		       00 08	   CURSOR_MOVE_SPEED =	16/2
     10  4800		       00 08	   CAP_SPEED  =	16/2
     11  4800		       00 0f	   HOLD_DELAY =	30/2
     12  4800
     13  4800							;---------------------------------------------------------------------------------------------------
     14  4800
     15  4800				   P	      SET	0
     16  4800					      MAC	ain
     17  4800				   AI_{1}     SET	P
     18  4800				   P	      SET	P+1
     19  4800					      ENDM
     20  4800
     21  4800					      MAC	lo
     22  4800					      .byte	<ai{1}
     23  4800					      ENDM
     24  4800
     25  4800					      MAC	hi
     26  4800					      .byte	>ai{1}
     27  4800					      ENDM
     28  4800
     29  4800					      MAC	bk
     30  4800					      .byte	BANK_ai{1}
     31  4800					      ENDM
     32  4800
     33  4800					      MAC	tm
     34  4800					      .byte	{2}
     35  4800					      ENDM
     36  4800
     37  4800
     38  4800		       00 28	   ONCEPERFRAME =	40
     39  4800
     40  4800					      MAC	tabdef
     41  4800							; and per-line, {1} = #, {2} = name, {3} = time
     42  4800
     43  4800					      {1}	BeginSelectMovePhase, 1
     44  4800					      {1}	SelectStartSquare, ONCEPERFRAME
     45  4800					      {1}	StartSquareSelected, ONCEPERFRAME
     46  4800					      {1}	DrawMoves, ONCEPERFRAME
     47  4800					      {1}	ShowMoveCaptures, ONCEPERFRAME
     48  4800					      {1}	SlowFlash, ONCEPERFRAME
     49  4800					      {1}	UnDrawTargetSquares, ONCEPERFRAME
     50  4800					      {1}	SelectDestinationSquare, ONCEPERFRAME
     51  4800					      {1}	Quiescent, ONCEPERFRAME
     52  4800					      {1}	ReselectDebounce, ONCEPERFRAME
     53  4800					      {1}	StartMoveGen, ONCEPERFRAME
     54  4800					      {1}	StepMoveGen, ONCEPERFRAME
     55  4800					      {1}	LookForCheck, ONCEPERFRAME
     56  4800					      {1}	StartClearBoard, ONCEPERFRAME
     57  4800					      {1}	ClearEachRow, ONCEPERFRAME
     58  4800					      {1}	DrawEntireBoard, ONCEPERFRAME
     59  4800					      {1}	DrawPart2, ONCEPERFRAME
     60  4800					      {1}	DrawPart3, ONCEPERFRAME
     61  4800					      {1}	FlipBuffers, ONCEPERFRAME
     62  4800					      {1}	GenerateMoves, ONCEPERFRAME
     63  4800					      {1}	ComputerMove, ONCEPERFRAME
     64  4800					      {1}	PrepForPhysicalMove, ONCEPERFRAME
     65  4800					      {1}	WriteStartPieceBlank, ONCEPERFRAME
     66  4800					      {1}	MarchToTargetA, ONCEPERFRAME
     67  4800					      {1}	MarchB, ONCEPERFRAME
     68  4800					      {1}	MarchToTargetB, ONCEPERFRAME
     69  4800					      {1}	MarchB2, ONCEPERFRAME
     70  4800					      {1}	FinalFlash, ONCEPERFRAME
     71  4800					      {1}	SpecialMoveFixup, ONCEPERFRAME
     72  4800					      {1}	InCheckBackup, ONCEPERFRAME
     73  4800					      {1}	InCheckDelay, ONCEPERFRAME
     74  4800					      {1}	PromotePawnStart, ONCEPERFRAME
     75  4800					      {1}	RollPromotionPiece, ONCEPERFRAME
     76  4800					      {1}	ChoosePromotePiece, ONCEPERFRAME
     77  4800					      {1}	ChooseDebounce, ONCEPERFRAME
     78  4800					      ENDM		; {1} = macro to use
     79  4800
      0  4800					      TABDEF	AIN
      1  4800
      2  4800
      0  4800					      AIN	BeginSelectMovePhase, 1
      1  4800				   AI_BeginSelectMovePhase SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SelectStartSquare, ONCEPERFRAME
      1  4800				   AI_SelectStartSquare SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StartSquareSelected, ONCEPERFRAME
      1  4800				   AI_StartSquareSelected SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawMoves, ONCEPERFRAME
      1  4800				   AI_DrawMoves SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ShowMoveCaptures, ONCEPERFRAME
      1  4800				   AI_ShowMoveCaptures SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SlowFlash, ONCEPERFRAME
      1  4800				   AI_SlowFlash SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	UnDrawTargetSquares, ONCEPERFRAME
      1  4800				   AI_UnDrawTargetSquares SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SelectDestinationSquare, ONCEPERFRAME
      1  4800				   AI_SelectDestinationSquare SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	Quiescent, ONCEPERFRAME
      1  4800				   AI_Quiescent SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ReselectDebounce, ONCEPERFRAME
      1  4800				   AI_ReselectDebounce SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StartMoveGen, ONCEPERFRAME
      1  4800				   AI_StartMoveGen SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StepMoveGen, ONCEPERFRAME
      1  4800				   AI_StepMoveGen SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	LookForCheck, ONCEPERFRAME
      1  4800				   AI_LookForCheck SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StartClearBoard, ONCEPERFRAME
      1  4800				   AI_StartClearBoard SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ClearEachRow, ONCEPERFRAME
      1  4800				   AI_ClearEachRow SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawEntireBoard, ONCEPERFRAME
      1  4800				   AI_DrawEntireBoard SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawPart2, ONCEPERFRAME
      1  4800				   AI_DrawPart2 SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawPart3, ONCEPERFRAME
      1  4800				   AI_DrawPart3 SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FlipBuffers, ONCEPERFRAME
      1  4800				   AI_FlipBuffers SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	GenerateMoves, ONCEPERFRAME
      1  4800				   AI_GenerateMoves SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ComputerMove, ONCEPERFRAME
      1  4800				   AI_ComputerMove SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	PrepForPhysicalMove, ONCEPERFRAME
      1  4800				   AI_PrepForPhysicalMove SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	WriteStartPieceBlank, ONCEPERFRAME
      1  4800				   AI_WriteStartPieceBlank SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchToTargetA, ONCEPERFRAME
      1  4800				   AI_MarchToTargetA SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchB, ONCEPERFRAME
      1  4800				   AI_MarchB  SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchToTargetB, ONCEPERFRAME
      1  4800				   AI_MarchToTargetB SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchB2, ONCEPERFRAME
      1  4800				   AI_MarchB2 SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FinalFlash, ONCEPERFRAME
      1  4800				   AI_FinalFlash SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SpecialMoveFixup, ONCEPERFRAME
      1  4800				   AI_SpecialMoveFixup SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	InCheckBackup, ONCEPERFRAME
      1  4800				   AI_InCheckBackup SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	InCheckDelay, ONCEPERFRAME
      1  4800				   AI_InCheckDelay SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	PromotePawnStart, ONCEPERFRAME
      1  4800				   AI_PromotePawnStart SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	RollPromotionPiece, ONCEPERFRAME
      1  4800				   AI_RollPromotionPiece SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ChoosePromotePiece, ONCEPERFRAME
      1  4800				   AI_ChoosePromotePiece SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ChooseDebounce, ONCEPERFRAME
      1  4800				   AI_ChooseDebounce SET	P
      2  4800				   P	      SET	P+1
      0  4800					      DEF	AiVectorLO
      1  4800				   BANK_AiVectorLO SET	_CURRENT_BANK
      2  4800				   AiVectorLO
      3  4800				   TEMPORARY_VAR SET	Overlay
      4  4800				   TEMPORARY_OFFSET SET	0
      5  4800					      SUBROUTINE
      0  4800					      TABDEF	LO
      1  4800
      2  4800
      0  4800					      LO	BeginSelectMovePhase, 1
      1  4800		       0a		      .byte.b	<aiBeginSelectMovePhase
      0  4801					      LO	SelectStartSquare, ONCEPERFRAME
      1  4801		       1f		      .byte.b	<aiSelectStartSquare
      0  4802					      LO	StartSquareSelected, ONCEPERFRAME
      1  4802		       7d		      .byte.b	<aiStartSquareSelected
      0  4803					      LO	DrawMoves, ONCEPERFRAME
      1  4803		       98		      .byte.b	<aiDrawMoves
      0  4804					      LO	ShowMoveCaptures, ONCEPERFRAME
      1  4804		       f1		      .byte.b	<aiShowMoveCaptures
      0  4805					      LO	SlowFlash, ONCEPERFRAME
      1  4805		       0f		      .byte.b	<aiSlowFlash
      0  4806					      LO	UnDrawTargetSquares, ONCEPERFRAME
      1  4806		       cf		      .byte.b	<aiUnDrawTargetSquares
      0  4807					      LO	SelectDestinationSquare, ONCEPERFRAME
      1  4807		       76		      .byte.b	<aiSelectDestinationSquare
      0  4808					      LO	Quiescent, ONCEPERFRAME
      1  4808		       b7		      .byte.b	<aiQuiescent
      0  4809					      LO	ReselectDebounce, ONCEPERFRAME
      1  4809		       ae		      .byte.b	<aiReselectDebounce
      0  480a					      LO	StartMoveGen, ONCEPERFRAME
      1  480a		       a7		      .byte.b	<aiStartMoveGen
      0  480b					      LO	StepMoveGen, ONCEPERFRAME
      1  480b		       b9		      .byte.b	<aiStepMoveGen
      0  480c					      LO	LookForCheck, ONCEPERFRAME
      1  480c		       c9		      .byte.b	<aiLookForCheck
      0  480d					      LO	StartClearBoard, ONCEPERFRAME
      1  480d		       41		      .byte.b	<aiStartClearBoard
      0  480e					      LO	ClearEachRow, ONCEPERFRAME
      1  480e		       4e		      .byte.b	<aiClearEachRow
      0  480f					      LO	DrawEntireBoard, ONCEPERFRAME
      1  480f		       af		      .byte.b	<aiDrawEntireBoard
      0  4810					      LO	DrawPart2, ONCEPERFRAME
      1  4810		       8f		      .byte.b	<aiDrawPart2
      0  4811					      LO	DrawPart3, ONCEPERFRAME
      1  4811		       92		      .byte.b	<aiDrawPart3
      0  4812					      LO	FlipBuffers, ONCEPERFRAME
      1  4812		       dc		      .byte.b	<aiFlipBuffers
      0  4813					      LO	GenerateMoves, ONCEPERFRAME
      1  4813		       2e		      .byte.b	<aiGenerateMoves
      0  4814					      LO	ComputerMove, ONCEPERFRAME
      1  4814		       1e		      .byte.b	<aiComputerMove
      0  4815					      LO	PrepForPhysicalMove, ONCEPERFRAME
      1  4815		       60		      .byte.b	<aiPrepForPhysicalMove
      0  4816					      LO	WriteStartPieceBlank, ONCEPERFRAME
      1  4816		       71		      .byte.b	<aiWriteStartPieceBlank
      0  4817					      LO	MarchToTargetA, ONCEPERFRAME
      1  4817		       52		      .byte.b	<aiMarchToTargetA
      0  4818					      LO	MarchB, ONCEPERFRAME
      1  4818		       a4		      .byte.b	<aiMarchB
      0  4819					      LO	MarchToTargetB, ONCEPERFRAME
      1  4819		       17		      .byte.b	<aiMarchToTargetB
      0  481a					      LO	MarchB2, ONCEPERFRAME
      1  481a		       c1		      .byte.b	<aiMarchB2
      0  481b					      LO	FinalFlash, ONCEPERFRAME
      1  481b		       b4		      .byte.b	<aiFinalFlash
      0  481c					      LO	SpecialMoveFixup, ONCEPERFRAME
      1  481c		       3c		      .byte.b	<aiSpecialMoveFixup
      0  481d					      LO	InCheckBackup, ONCEPERFRAME
      1  481d		       ef		      .byte.b	<aiInCheckBackup
      0  481e					      LO	InCheckDelay, ONCEPERFRAME
      1  481e		       fd		      .byte.b	<aiInCheckDelay
      0  481f					      LO	PromotePawnStart, ONCEPERFRAME
      1  481f		       e1		      .byte.b	<aiPromotePawnStart
      0  4820					      LO	RollPromotionPiece, ONCEPERFRAME
      1  4820		       f3		      .byte.b	<aiRollPromotionPiece
      0  4821					      LO	ChoosePromotePiece, ONCEPERFRAME
      1  4821		       26		      .byte.b	<aiChoosePromotePiece
      0  4822					      LO	ChooseDebounce, ONCEPERFRAME
      1  4822		       83		      .byte.b	<aiChooseDebounce
      0  4823					      DEF	AiVectorHI
      1  4823				   BANK_AiVectorHI SET	_CURRENT_BANK
      2  4823				   AiVectorHI
      3  4823				   TEMPORARY_VAR SET	Overlay
      4  4823				   TEMPORARY_OFFSET SET	0
      5  4823					      SUBROUTINE
      0  4823					      TABDEF	HI
      1  4823
      2  4823
      0  4823					      HI	BeginSelectMovePhase, 1
      1  4823		       f1		      .byte.b	>aiBeginSelectMovePhase
      0  4824					      HI	SelectStartSquare, ONCEPERFRAME
      1  4824		       f1		      .byte.b	>aiSelectStartSquare
      0  4825					      HI	StartSquareSelected, ONCEPERFRAME
      1  4825		       f1		      .byte.b	>aiStartSquareSelected
      0  4826					      HI	DrawMoves, ONCEPERFRAME
      1  4826		       f1		      .byte.b	>aiDrawMoves
      0  4827					      HI	ShowMoveCaptures, ONCEPERFRAME
      1  4827		       f1		      .byte.b	>aiShowMoveCaptures
      0  4828					      HI	SlowFlash, ONCEPERFRAME
      1  4828		       f2		      .byte.b	>aiSlowFlash
      0  4829					      HI	UnDrawTargetSquares, ONCEPERFRAME
      1  4829		       f1		      .byte.b	>aiUnDrawTargetSquares
      0  482a					      HI	SelectDestinationSquare, ONCEPERFRAME
      1  482a		       f2		      .byte.b	>aiSelectDestinationSquare
      0  482b					      HI	Quiescent, ONCEPERFRAME
      1  482b		       f2		      .byte.b	>aiQuiescent
      0  482c					      HI	ReselectDebounce, ONCEPERFRAME
      1  482c		       f2		      .byte.b	>aiReselectDebounce
      0  482d					      HI	StartMoveGen, ONCEPERFRAME
      1  482d		       f0		      .byte.b	>aiStartMoveGen
      0  482e					      HI	StepMoveGen, ONCEPERFRAME
      1  482e		       f0		      .byte.b	>aiStepMoveGen
      0  482f					      HI	LookForCheck, ONCEPERFRAME
      1  482f		       f0		      .byte.b	>aiLookForCheck
      0  4830					      HI	StartClearBoard, ONCEPERFRAME
      1  4830		       f0		      .byte.b	>aiStartClearBoard
      0  4831					      HI	ClearEachRow, ONCEPERFRAME
      1  4831		       f0		      .byte.b	>aiClearEachRow
      0  4832					      HI	DrawEntireBoard, ONCEPERFRAME
      1  4832		       f8		      .byte.b	>aiDrawEntireBoard
      0  4833					      HI	DrawPart2, ONCEPERFRAME
      1  4833		       f0		      .byte.b	>aiDrawPart2
      0  4834					      HI	DrawPart3, ONCEPERFRAME
      1  4834		       f0		      .byte.b	>aiDrawPart3
      0  4835					      HI	FlipBuffers, ONCEPERFRAME
      1  4835		       f8		      .byte.b	>aiFlipBuffers
      0  4836					      HI	GenerateMoves, ONCEPERFRAME
      1  4836		       f1		      .byte.b	>aiGenerateMoves
      0  4837					      HI	ComputerMove, ONCEPERFRAME
      1  4837		       f9		      .byte.b	>aiComputerMove
      0  4838					      HI	PrepForPhysicalMove, ONCEPERFRAME
      1  4838		       f0		      .byte.b	>aiPrepForPhysicalMove
      0  4839					      HI	WriteStartPieceBlank, ONCEPERFRAME
      1  4839		       f0		      .byte.b	>aiWriteStartPieceBlank
      0  483a					      HI	MarchToTargetA, ONCEPERFRAME
      1  483a		       f0		      .byte.b	>aiMarchToTargetA
      0  483b					      HI	MarchB, ONCEPERFRAME
      1  483b		       f0		      .byte.b	>aiMarchB
      0  483c					      HI	MarchToTargetB, ONCEPERFRAME
      1  483c		       f1		      .byte.b	>aiMarchToTargetB
      0  483d					      HI	MarchB2, ONCEPERFRAME
      1  483d		       f0		      .byte.b	>aiMarchB2
      0  483e					      HI	FinalFlash, ONCEPERFRAME
      1  483e		       f0		      .byte.b	>aiFinalFlash
      0  483f					      HI	SpecialMoveFixup, ONCEPERFRAME
      1  483f		       f9		      .byte.b	>aiSpecialMoveFixup
      0  4840					      HI	InCheckBackup, ONCEPERFRAME
      1  4840		       f0		      .byte.b	>aiInCheckBackup
      0  4841					      HI	InCheckDelay, ONCEPERFRAME
      1  4841		       f0		      .byte.b	>aiInCheckDelay
      0  4842					      HI	PromotePawnStart, ONCEPERFRAME
      1  4842		       f2		      .byte.b	>aiPromotePawnStart
      0  4843					      HI	RollPromotionPiece, ONCEPERFRAME
      1  4843		       f2		      .byte.b	>aiRollPromotionPiece
      0  4844					      HI	ChoosePromotePiece, ONCEPERFRAME
      1  4844		       f3		      .byte.b	>aiChoosePromotePiece
      0  4845					      HI	ChooseDebounce, ONCEPERFRAME
      1  4845		       f3		      .byte.b	>aiChooseDebounce
      0  4846					      DEF	AiVectorBANK
      1  4846				   BANK_AiVectorBANK SET	_CURRENT_BANK
      2  4846				   AiVectorBANK
      3  4846				   TEMPORARY_VAR SET	Overlay
      4  4846				   TEMPORARY_OFFSET SET	0
      5  4846					      SUBROUTINE
      0  4846					      TABDEF	BK
      1  4846
      2  4846
      0  4846					      BK	BeginSelectMovePhase, 1
      1  4846		       09		      .byte.b	BANK_aiBeginSelectMovePhase
      0  4847					      BK	SelectStartSquare, ONCEPERFRAME
      1  4847		       09		      .byte.b	BANK_aiSelectStartSquare
      0  4848					      BK	StartSquareSelected, ONCEPERFRAME
      1  4848		       09		      .byte.b	BANK_aiStartSquareSelected
      0  4849					      BK	DrawMoves, ONCEPERFRAME
      1  4849		       09		      .byte.b	BANK_aiDrawMoves
      0  484a					      BK	ShowMoveCaptures, ONCEPERFRAME
      1  484a		       09		      .byte.b	BANK_aiShowMoveCaptures
      0  484b					      BK	SlowFlash, ONCEPERFRAME
      1  484b		       09		      .byte.b	BANK_aiSlowFlash
      0  484c					      BK	UnDrawTargetSquares, ONCEPERFRAME
      1  484c		       09		      .byte.b	BANK_aiUnDrawTargetSquares
      0  484d					      BK	SelectDestinationSquare, ONCEPERFRAME
      1  484d		       09		      .byte.b	BANK_aiSelectDestinationSquare
      0  484e					      BK	Quiescent, ONCEPERFRAME
      1  484e		       09		      .byte.b	BANK_aiQuiescent
      0  484f					      BK	ReselectDebounce, ONCEPERFRAME
      1  484f		       09		      .byte.b	BANK_aiReselectDebounce
      0  4850					      BK	StartMoveGen, ONCEPERFRAME
      1  4850		       09		      .byte.b	BANK_aiStartMoveGen
      0  4851					      BK	StepMoveGen, ONCEPERFRAME
      1  4851		       09		      .byte.b	BANK_aiStepMoveGen
      0  4852					      BK	LookForCheck, ONCEPERFRAME
      1  4852		       09		      .byte.b	BANK_aiLookForCheck
      0  4853					      BK	StartClearBoard, ONCEPERFRAME
      1  4853		       00		      .byte.b	BANK_aiStartClearBoard
      0  4854					      BK	ClearEachRow, ONCEPERFRAME
      1  4854		       00		      .byte.b	BANK_aiClearEachRow
      0  4855					      BK	DrawEntireBoard, ONCEPERFRAME
      1  4855		       1f		      .byte.b	BANK_aiDrawEntireBoard
      0  4856					      BK	DrawPart2, ONCEPERFRAME
      1  4856		       00		      .byte.b	BANK_aiDrawPart2
      0  4857					      BK	DrawPart3, ONCEPERFRAME
      1  4857		       00		      .byte.b	BANK_aiDrawPart3
      0  4858					      BK	FlipBuffers, ONCEPERFRAME
      1  4858		       1f		      .byte.b	BANK_aiFlipBuffers
      0  4859					      BK	GenerateMoves, ONCEPERFRAME
      1  4859		       0c		      .byte.b	BANK_aiGenerateMoves
      0  485a					      BK	ComputerMove, ONCEPERFRAME
      1  485a		       1f		      .byte.b	BANK_aiComputerMove
      0  485b					      BK	PrepForPhysicalMove, ONCEPERFRAME
      1  485b		       00		      .byte.b	BANK_aiPrepForPhysicalMove
      0  485c					      BK	WriteStartPieceBlank, ONCEPERFRAME
      1  485c		       00		      .byte.b	BANK_aiWriteStartPieceBlank
      0  485d					      BK	MarchToTargetA, ONCEPERFRAME
      1  485d		       0c		      .byte.b	BANK_aiMarchToTargetA
      0  485e					      BK	MarchB, ONCEPERFRAME
      1  485e		       00		      .byte.b	BANK_aiMarchB
      0  485f					      BK	MarchToTargetB, ONCEPERFRAME
      1  485f		       0c		      .byte.b	BANK_aiMarchToTargetB
      0  4860					      BK	MarchB2, ONCEPERFRAME
      1  4860		       0c		      .byte.b	BANK_aiMarchB2
      0  4861					      BK	FinalFlash, ONCEPERFRAME
      1  4861		       00		      .byte.b	BANK_aiFinalFlash
      0  4862					      BK	SpecialMoveFixup, ONCEPERFRAME
      1  4862		       1f		      .byte.b	BANK_aiSpecialMoveFixup
      0  4863					      BK	InCheckBackup, ONCEPERFRAME
      1  4863		       09		      .byte.b	BANK_aiInCheckBackup
      0  4864					      BK	InCheckDelay, ONCEPERFRAME
      1  4864		       09		      .byte.b	BANK_aiInCheckDelay
      0  4865					      BK	PromotePawnStart, ONCEPERFRAME
      1  4865		       09		      .byte.b	BANK_aiPromotePawnStart
      0  4866					      BK	RollPromotionPiece, ONCEPERFRAME
      1  4866		       09		      .byte.b	BANK_aiRollPromotionPiece
      0  4867					      BK	ChoosePromotePiece, ONCEPERFRAME
      1  4867		       09		      .byte.b	BANK_aiChoosePromotePiece
      0  4868					      BK	ChooseDebounce, ONCEPERFRAME
      1  4868		       09		      .byte.b	BANK_aiChooseDebounce
      0  4869					      DEF	AiTimeRequired
      1  4869				   BANK_AiTimeRequired SET	_CURRENT_BANK
      2  4869				   AiTimeRequired
      3  4869				   TEMPORARY_VAR SET	Overlay
      4  4869				   TEMPORARY_OFFSET SET	0
      5  4869					      SUBROUTINE
      0  4869					      TABDEF	TM
      1  4869
      2  4869
      0  4869					      TM	BeginSelectMovePhase, 1
      1  4869		       01		      .byte.b	1
      0  486a					      TM	SelectStartSquare, ONCEPERFRAME
      1  486a		       28		      .byte.b	ONCEPERFRAME
      0  486b					      TM	StartSquareSelected, ONCEPERFRAME
      1  486b		       28		      .byte.b	ONCEPERFRAME
      0  486c					      TM	DrawMoves, ONCEPERFRAME
      1  486c		       28		      .byte.b	ONCEPERFRAME
      0  486d					      TM	ShowMoveCaptures, ONCEPERFRAME
      1  486d		       28		      .byte.b	ONCEPERFRAME
      0  486e					      TM	SlowFlash, ONCEPERFRAME
      1  486e		       28		      .byte.b	ONCEPERFRAME
      0  486f					      TM	UnDrawTargetSquares, ONCEPERFRAME
      1  486f		       28		      .byte.b	ONCEPERFRAME
      0  4870					      TM	SelectDestinationSquare, ONCEPERFRAME
      1  4870		       28		      .byte.b	ONCEPERFRAME
      0  4871					      TM	Quiescent, ONCEPERFRAME
      1  4871		       28		      .byte.b	ONCEPERFRAME
      0  4872					      TM	ReselectDebounce, ONCEPERFRAME
      1  4872		       28		      .byte.b	ONCEPERFRAME
      0  4873					      TM	StartMoveGen, ONCEPERFRAME
      1  4873		       28		      .byte.b	ONCEPERFRAME
      0  4874					      TM	StepMoveGen, ONCEPERFRAME
      1  4874		       28		      .byte.b	ONCEPERFRAME
      0  4875					      TM	LookForCheck, ONCEPERFRAME
      1  4875		       28		      .byte.b	ONCEPERFRAME
      0  4876					      TM	StartClearBoard, ONCEPERFRAME
      1  4876		       28		      .byte.b	ONCEPERFRAME
      0  4877					      TM	ClearEachRow, ONCEPERFRAME
      1  4877		       28		      .byte.b	ONCEPERFRAME
      0  4878					      TM	DrawEntireBoard, ONCEPERFRAME
      1  4878		       28		      .byte.b	ONCEPERFRAME
      0  4879					      TM	DrawPart2, ONCEPERFRAME
      1  4879		       28		      .byte.b	ONCEPERFRAME
      0  487a					      TM	DrawPart3, ONCEPERFRAME
      1  487a		       28		      .byte.b	ONCEPERFRAME
      0  487b					      TM	FlipBuffers, ONCEPERFRAME
      1  487b		       28		      .byte.b	ONCEPERFRAME
      0  487c					      TM	GenerateMoves, ONCEPERFRAME
      1  487c		       28		      .byte.b	ONCEPERFRAME
      0  487d					      TM	ComputerMove, ONCEPERFRAME
      1  487d		       28		      .byte.b	ONCEPERFRAME
      0  487e					      TM	PrepForPhysicalMove, ONCEPERFRAME
      1  487e		       28		      .byte.b	ONCEPERFRAME
      0  487f					      TM	WriteStartPieceBlank, ONCEPERFRAME
      1  487f		       28		      .byte.b	ONCEPERFRAME
      0  4880					      TM	MarchToTargetA, ONCEPERFRAME
      1  4880		       28		      .byte.b	ONCEPERFRAME
      0  4881					      TM	MarchB, ONCEPERFRAME
      1  4881		       28		      .byte.b	ONCEPERFRAME
      0  4882					      TM	MarchToTargetB, ONCEPERFRAME
      1  4882		       28		      .byte.b	ONCEPERFRAME
      0  4883					      TM	MarchB2, ONCEPERFRAME
      1  4883		       28		      .byte.b	ONCEPERFRAME
      0  4884					      TM	FinalFlash, ONCEPERFRAME
      1  4884		       28		      .byte.b	ONCEPERFRAME
      0  4885					      TM	SpecialMoveFixup, ONCEPERFRAME
      1  4885		       28		      .byte.b	ONCEPERFRAME
      0  4886					      TM	InCheckBackup, ONCEPERFRAME
      1  4886		       28		      .byte.b	ONCEPERFRAME
      0  4887					      TM	InCheckDelay, ONCEPERFRAME
      1  4887		       28		      .byte.b	ONCEPERFRAME
      0  4888					      TM	PromotePawnStart, ONCEPERFRAME
      1  4888		       28		      .byte.b	ONCEPERFRAME
      0  4889					      TM	RollPromotionPiece, ONCEPERFRAME
      1  4889		       28		      .byte.b	ONCEPERFRAME
      0  488a					      TM	ChoosePromotePiece, ONCEPERFRAME
      1  488a		       28		      .byte.b	ONCEPERFRAME
      0  488b					      TM	ChooseDebounce, ONCEPERFRAME
      1  488b		       28		      .byte.b	ONCEPERFRAME
     89  488c
     90  488c
     91  488c							;---------------------------------------------------------------------------------------------------
     92  488c
      0  488c					      DEF	AiSetupVectors
      1  488c				   BANK_AiSetupVectors SET	_CURRENT_BANK
      2  488c				   AiSetupVectors
      3  488c				   TEMPORARY_VAR SET	Overlay
      4  488c				   TEMPORARY_OFFSET SET	0
      5  488c					      SUBROUTINE
     94  488c							;SUBROUTINE
     95  488c
     96  488c							; State machine vector setup - points to current routine to execute
     97  488c
     98  488c		       a6 8c		      ldx	aiPhase
     99  488e
    100  488e		       bd 69 f0 	      lda	AiTimeRequired,x
    101  4891		       cd 84 02 	      cmp	INTIM	; is there enough time left?
    102  4894		       b0 10		      bcs	.exit	; nope
    103  4896
    104  4896		       bd 00 f0 	      lda	AiVectorLO,x
    105  4899		       85 e9		      sta	__ptr
    106  489b		       bd 23 f0 	      lda	AiVectorHI,x
    107  489e		       85 ea		      sta	__ptr+1
    108  48a0
    109  48a0		       bd 46 f0 	      lda	AiVectorBANK,x
    110  48a3		       85 8b		      sta	savedBank
    111  48a5
    112  48a5		       18		      clc
    113  48a6		       60	   .exit      rts
    114  48a7
    115  48a7
    116  48a7							;---------------------------------------------------------------------------------------------------
    117  48a7
      0  48a7					      DEF	aiStartMoveGen
      1  48a7				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  48a7				   aiStartMoveGen
      3  48a7				   TEMPORARY_VAR SET	Overlay
      4  48a7				   TEMPORARY_OFFSET SET	0
      5  48a7					      SUBROUTINE
    119  48a7					      SUBROUTINE
    120  48a7
    121  48a7							; To assist with castling, generate the moves for the opponent, giving us effectively
    122  48a7							; a list of squares that are being attacked. The castling can't happen if the king is
    123  48a7							; in check or if the squares it would have to move over are in check
    124  48a7
    125  48a7							; we don't need to worry about this if K has moved, or relevant R has moved or if
    126  48a7							; the squares between are occupied. We can tell THAT by examining the movelist to see
    127  48a7							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    128  48a7
    129  48a7		       a9 0a		      lda	#OPPONENT
    130  48a9		       85 99		      sta	currentPly
    131  48ab		       20 e8 f8 	      jsr	InitialiseMoveGeneration
    132  48ae
    133  48ae		       a5 9b		      lda	sideToMove
    134  48b0		       49 80		      eor	#128
    135  48b2		       85 9b		      sta	sideToMove	; for movegen to know
    136  48b4
      0  48b4					      PHASE	AI_StepMoveGen
      1  48b4		       a9 0b		      lda	#AI_StepMoveGen
      2  48b6		       85 8c		      sta	aiPhase
    138  48b8		       60		      rts
    139  48b9
    140  48b9
    141  48b9							;---------------------------------------------------------------------------------------------------
    142  48b9
      0  48b9					      DEF	aiStepMoveGen
      1  48b9				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  48b9				   aiStepMoveGen
      3  48b9				   TEMPORARY_VAR SET	Overlay
      4  48b9				   TEMPORARY_OFFSET SET	0
      5  48b9					      SUBROUTINE
    144  48b9					      SUBROUTINE
    145  48b9
    146  48b9							; Because we're (possibly) running with the screen on, processing time is very short and
    147  48b9							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    148  48b9							; this happens over multiple frames.
    149  48b9
    150  48b9		       20 f4 f8 	      jsr	GenerateOneMove
    151  48bc		       90 0a		      bcc	.wait
    152  48be
    153  48be		       a5 9b		      lda	sideToMove
    154  48c0		       49 80		      eor	#128
    155  48c2		       85 9b		      sta	sideToMove
    156  48c4
      0  48c4					      PHASE	AI_LookForCheck
      1  48c4		       a9 0c		      lda	#AI_LookForCheck
      2  48c6		       85 8c		      sta	aiPhase
    158  48c8		       60	   .wait      rts
    159  48c9
    160  48c9
    161  48c9							;---------------------------------------------------------------------------------------------------
    162  48c9
      0  48c9					      DEF	aiLookForCheck
      1  48c9				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  48c9				   aiLookForCheck
      3  48c9				   TEMPORARY_VAR SET	Overlay
      4  48c9				   TEMPORARY_OFFSET SET	0
      5  48c9					      SUBROUTINE
    164  48c9					      SUBROUTINE
    165  48c9
    166  48c9							; now we've finished generating the opponent moves
    167  48c9							; See if the square our king is on is an attacked square (that is, it appears as a TO
    168  48c9							; square in the opponent's movelist)
    169  48c9
    170  48c9		       a9 09		      lda	#PLAYER
    171  48cb		       85 99		      sta	currentPly
    172  48cd		       20 98 fc 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    173  48d0
    174  48d0		       e6 99		      inc	currentPly
    175  48d2		       20 dc fd 	      jsr	SAFE_IsSquareUnderAttack
    176  48d5		       c6 99		      dec	currentPly
    177  48d7		       90 11		      bcc	.exit
    178  48d9
    179  48d9							; in check!
    180  48d9
    181  48d9		       a9 40		      lda	#$40
    182  48db		       85 49		      sta	COLUBK
    183  48dd
    184  48dd		       a9 32		      lda	#50
    185  48df		       85 89		      sta	mdelay
    186  48e1
    187  48e1		       a9 08		      lda	#8
    188  48e3		       85 84		      sta	drawCount	; row #
    189  48e5
      0  48e5					      PHASE	AI_InCheckBackup
      1  48e5		       a9 1d		      lda	#AI_InCheckBackup
      2  48e7		       85 8c		      sta	aiPhase
    191  48e9		       60		      rts
    192  48ea
      0  48ea				   .exit      PHASE	AI_BeginSelectMovePhase
      1  48ea		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  48ec		       85 8c		      sta	aiPhase
    194  48ee		       60		      rts
    195  48ef
    196  48ef
    197  48ef							;---------------------------------------------------------------------------------------------------
    198  48ef
      0  48ef					      DEF	aiInCheckBackup
      1  48ef				   BANK_aiInCheckBackup SET	_CURRENT_BANK
      2  48ef				   aiInCheckBackup
      3  48ef				   TEMPORARY_VAR SET	Overlay
      4  48ef				   TEMPORARY_OFFSET SET	0
      5  48ef					      SUBROUTINE
    200  48ef					      SUBROUTINE
    201  48ef
    202  48ef							; We're about to draw some large text on the screen
    203  48ef							; Make a backup copy of all of the row bitmaps, so that we can restore once text is done
    204  48ef
    205  48ef		       c6 84		      dec	drawCount
    206  48f1		       30 05		      bmi	.exit	; done all rows
    207  48f3		       a4 84		      ldy	drawCount
    208  48f5		       4c d2 fd 	      jmp	SAFE_BackupBitmaps
    209  48f8
      0  48f8				   .exit      PHASE	AI_InCheckDelay
      1  48f8		       a9 1e		      lda	#AI_InCheckDelay
      2  48fa		       85 8c		      sta	aiPhase
    211  48fc		       60		      rts
    212  48fd
    213  48fd
    214  48fd							;---------------------------------------------------------------------------------------------------
    215  48fd
      0  48fd					      DEF	aiInCheckDelay
      1  48fd				   BANK_aiInCheckDelay SET	_CURRENT_BANK
      2  48fd				   aiInCheckDelay
      3  48fd				   TEMPORARY_VAR SET	Overlay
      4  48fd				   TEMPORARY_OFFSET SET	0
      5  48fd					      SUBROUTINE
    217  48fd					      SUBROUTINE
    218  48fd
    219  48fd		       c6 89		      dec	mdelay
    220  48ff		       d0 08		      bne	.exit
    221  4901
    222  4901		       a9 00		      lda	#0
    223  4903		       85 49		      sta	COLUBK
    224  4905
      0  4905					      PHASE	AI_BeginSelectMovePhase
      1  4905		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  4907		       85 8c		      sta	aiPhase
    226  4909		       60	   .exit      rts
    227  490a
    228  490a
    229  490a							;---------------------------------------------------------------------------------------------------
    230  490a
      0  490a					      DEF	aiBeginSelectMovePhase
      1  490a				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  490a				   aiBeginSelectMovePhase
      3  490a				   TEMPORARY_VAR SET	Overlay
      4  490a				   TEMPORARY_OFFSET SET	0
      5  490a					      SUBROUTINE
    232  490a					      SUBROUTINE
    233  490a
    234  490a
    235  490a		       a9 38		      lda	#$38
    236  490c		       85 88		      sta	cursorX12
    237  490e
    238  490e		       a9 00		      lda	#0
    239  4910		       85 89		      sta	mdelay	;?
    240  4912		       85 91		      sta	aiFlashPhase	;?
    241  4914
    242  4914		       a9 ff		      lda	#-1
    243  4916		       85 8e		      sta	aiFromSquareX12
    244  4918		       85 8f		      sta	aiToSquareX12
    245  491a
      0  491a					      PHASE	AI_SelectStartSquare
      1  491a		       a9 01		      lda	#AI_SelectStartSquare
      2  491c		       85 8c		      sta	aiPhase
    247  491e		       60		      rts
    248  491f
    249  491f							;---------------------------------------------------------------------------------------------------
    250  491f
      0  491f					      DEF	aiSelectStartSquare
      1  491f				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  491f				   aiSelectStartSquare
      3  491f				   TEMPORARY_VAR SET	Overlay
      4  491f				   TEMPORARY_OFFSET SET	0
      5  491f					      SUBROUTINE
    252  491f					      SUBROUTINE
    253  491f
    254  491f		       20 34 f2 	      jsr	moveCursor
    255  4922		       20 c6 fc 	      jsr	SAFE_IsValidMoveFromSquare
    256  4925
    257  4925		       c6 8a		      dec	ccur	; pulse colour for valid squares
    258  4927		       20 4a f1 	      jsr	setCursorColours
    259  492a
    260  492a		       98		      tya
    261  492b		       05 4c		      ora	INPT4
    262  492d		       30 04		      bmi	.exit	; illegal square or no button press
    263  492f
      0  492f					      PHASE	AI_StartSquareSelected
      1  492f		       a9 02		      lda	#AI_StartSquareSelected
      2  4931		       85 8c		      sta	aiPhase
    265  4933
    266  4933		       60	   .exit      rts
    267  4934
    268  4934							;---------------------------------------------------------------------------------------------------
    269  4934
      0  4934					      DEF	setCursorPriority
      1  4934				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  4934				   setCursorPriority
      3  4934				   TEMPORARY_VAR SET	Overlay
      4  4934				   TEMPORARY_OFFSET SET	0
      5  4934					      SUBROUTINE
    271  4934					      SUBROUTINE
    272  4934
    273  4934		       98		      tya
    274  4935		       48		      pha
    275  4936
    276  4936		       a2 04		      ldx	#%100
    277  4938
    278  4938		       a4 88		      ldy	cursorX12
    279  493a		       30 09		      bmi	.under
    280  493c		       20 ae fc 	      jsr	GetBoard
    281  493f		       c9 00		      cmp	#0
    282  4941		       d0 02		      bne	.under
    283  4943		       a2 00		      ldx	#0
    284  4945		       86 4a	   .under     stx	CTRLPF	; UNDER
    285  4947
    286  4947		       68		      pla
    287  4948		       a8		      tay
    288  4949		       60		      rts
    289  494a
    290  494a							;---------------------------------------------------------------------------------------------------
    291  494a
      0  494a					      DEF	setCursorColours
      1  494a				   BANK_setCursorColours SET	_CURRENT_BANK
      2  494a				   setCursorColours
      3  494a				   TEMPORARY_VAR SET	Overlay
      4  494a				   TEMPORARY_OFFSET SET	0
      5  494a					      SUBROUTINE
    293  494a					      SUBROUTINE
    294  494a
    295  494a							; pass y=-1 if move is NOT in the movelist
    296  494a							; preserve y
    297  494a
    298  494a		       a9 44		      lda	#$44
    299  494c
    300  494c		       c0 ff		      cpy	#-1
    301  494e		       f0 0a		      beq	.writeCursorCol	; NOT in the movelist
    302  4950
    303  4950		       a5 8a		      lda	ccur
    304  4952		       4a		      lsr
    305  4953		       4a		      lsr
    306  4954		       4a		      lsr
    307  4955		       29 03		      and	#3
    308  4957		       18		      clc
    309  4958		       69 c0		      adc	#$C0	;COLOUR_LINE_1
    310  495a
    311  495a		       85 46	   .writeCursorCol sta	COLUP0
    312  495c		       60		      rts
    313  495d
    314  495d
    315  495d							;	    RLDU RLD  RL U RL	R DU R D  R  U R     LDU  LD   L U  L	  DU   D     U
    316  495d							;	   0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    317  495d
      0  495d					      ALLOCATE	JoyCombined, 16
      0  495d					      OPTIONAL_PAGEBREAK	"Table", 16
     10  495d					      LIST	ON
      0  495d					      DEF	JoyCombined
      1  495d				   BANK_JoyCombined SET	_CURRENT_BANK
      2  495d				   JoyCombined
      3  495d				   TEMPORARY_VAR SET	Overlay
      4  495d				   TEMPORARY_OFFSET SET	0
      5  495d					      SUBROUTINE
    319  495d		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1, -1, 0
    320  496d
      0  496d					      ALLOCATE	JoyMoveCursor, 16
      0  496d					      OPTIONAL_PAGEBREAK	"Table", 16
     10  496d					      LIST	ON
      0  496d					      DEF	JoyMoveCursor
      1  496d				   BANK_JoyMoveCursor SET	_CURRENT_BANK
      2  496d				   JoyMoveCursor
      3  496d				   TEMPORARY_VAR SET	Overlay
      4  496d				   TEMPORARY_OFFSET SET	0
      5  496d					      SUBROUTINE
    322  496d		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, -9, 11, 1, 0, -11, 9, -1, 0, -10, 10, 0
    323  497d
    324  497d							;---------------------------------------------------------------------------------------------------
    325  497d
      0  497d					      DEF	aiStartSquareSelected
      1  497d				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  497d				   aiStartSquareSelected
      3  497d				   TEMPORARY_VAR SET	Overlay
      4  497d				   TEMPORARY_OFFSET SET	0
      5  497d					      SUBROUTINE
    327  497d					      SUBROUTINE
    328  497d
    329  497d							; Mark all the valid moves for the selected piece on the board
    330  497d							; and then start pulsing the piece
    331  497d							; AND start choosing for selection of TO square
    332  497d
    333  497d							; Iterate the movelist and for all from squares which = drawPieceNumber
    334  497d							; then draw a BLANK at that square
    335  497d							; do 1 by one, when none found then increment state
    336  497d
    337  497d		       a5 88		      lda	cursorX12
    338  497f		       85 80		      sta	drawPieceNumberX12
    339  4981
    340  4981		       a9 0a		      lda	#10
    341  4983		       85 8d		      sta	aiFlashDelay
    342  4985
    343  4985		       a9 00		      lda	#0
    344  4987		       85 8f		      sta	aiToSquareX12
    345  4989		       85 91		      sta	aiFlashPhase	; for debounce exit timing
    346  498b
    347  498b		       a9 ff		      lda	#-1
    348  498d		       85 90		      sta	aiMoveIndex
    349  498f
    350  498f		       a9 0f		      lda	#HOLD_DELAY
    351  4991		       85 89		      sta	mdelay	; hold-down delay before moves are shown
    352  4993
      0  4993					      PHASE	AI_DrawMoves
      1  4993		       a9 03		      lda	#AI_DrawMoves
      2  4995		       85 8c		      sta	aiPhase
    354  4997		       60		      rts
    355  4998
    356  4998							;---------------------------------------------------------------------------------------------------
    357  4998
      0  4998					      DEF	aiDrawMoves
      1  4998				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  4998				   aiDrawMoves
      3  4998				   TEMPORARY_VAR SET	Overlay
      4  4998				   TEMPORARY_OFFSET SET	0
      5  4998					      SUBROUTINE
    359  4998					      SUBROUTINE
    360  4998
    361  4998		       c6 8a		      dec	ccur
    362  499a		       20 4a f1 	      jsr	setCursorColours
    363  499d
    364  499d		       c6 89		      dec	mdelay
    365  499f		       d0 21		      bne	.exit
    366  49a1		       a9 01		      lda	#1	; larger number will slow the draw of available moves
    367  49a3		       85 89		      sta	mdelay	; once triggered, runs always
    368  49a5
    369  49a5		       a5 90		      lda	aiMoveIndex
    370  49a7		       10 05		      bpl	.valid
    371  49a9		       20 6e fd 	      jsr	SAFE_getMoveIndex
    372  49ac		       85 90		      sta	aiMoveIndex
    373  49ae				   .valid
    374  49ae
    375  49ae		       20 84 fd 	      jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    376  49b1		       a5 90		      lda	aiMoveIndex
    377  49b3		       10 19		      bpl	.unsure	; still drawing in this phase
    378  49b5
    379  49b5		       a9 08		      lda	#CAP_SPEED
    380  49b7		       85 89		      sta	mdelay
    381  49b9
    382  49b9		       a9 00		      lda	#0
    383  49bb		       85 91		      sta	aiFlashPhase	; controls odd/even exit of flashing
    384  49bd
      0  49bd					      PHASE	AI_ShowMoveCaptures
      1  49bd		       a9 04		      lda	#AI_ShowMoveCaptures
      2  49bf		       85 8c		      sta	aiPhase
    386  49c1		       60		      rts
    387  49c2
    388  49c2				   .exit
    389  49c2
    390  49c2							; Initial piece selection has happened, but the button hasn't been released yet
    391  49c2							; AND we're still in the waiting phase to see if the button was held long enough for move show
    392  49c2
    393  49c2		       a5 4c		      lda	INPT4
    394  49c4		       10 08		      bpl	.unsure	; button still pressed, so still unsure what to do
    395  49c6
    396  49c6							; Aha! Button released, so we know the selected piece and can start flashing it
    397  49c6							; and allowing movement of the selector to a destination square...
    398  49c6
    399  49c6		       a9 18		      lda	#6*4
    400  49c8		       85 8a		      sta	ccur	; bright green square for selection
    401  49ca
      0  49ca					      PHASE	AI_SelectDestinationSquare
      1  49ca		       a9 07		      lda	#AI_SelectDestinationSquare
      2  49cc		       85 8c		      sta	aiPhase
    403  49ce
    404  49ce		       60	   .unsure    rts
    405  49cf
    406  49cf
    407  49cf							;---------------------------------------------------------------------------------------------------
    408  49cf
      0  49cf					      DEF	aiUnDrawTargetSquares
      1  49cf				   BANK_aiUnDrawTargetSquares SET	_CURRENT_BANK
      2  49cf				   aiUnDrawTargetSquares
      3  49cf				   TEMPORARY_VAR SET	Overlay
      4  49cf				   TEMPORARY_OFFSET SET	0
      5  49cf					      SUBROUTINE
    410  49cf					      SUBROUTINE
    411  49cf
    412  49cf		       c6 8a		      dec	ccur
    413  49d1		       20 4a f1 	      jsr	setCursorColours
    414  49d4
    415  49d4		       c6 89		      dec	mdelay
    416  49d6		       d0 18		      bne	.exit
    417  49d8		       a9 01		      lda	#1
    418  49da		       85 89		      sta	mdelay	; once triggered, runs always
    419  49dc
    420  49dc		       a5 90		      lda	aiMoveIndex
    421  49de		       10 05		      bpl	.valid
    422  49e0		       20 6e fd 	      jsr	SAFE_getMoveIndex
    423  49e3		       85 90		      sta	aiMoveIndex
    424  49e5				   .valid
    425  49e5
    426  49e5		       20 84 fd 	      jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    427  49e8		       a5 90		      lda	aiMoveIndex
    428  49ea		       10 04		      bpl	.exit	; still drawing in this phase
    429  49ec
      0  49ec					      PHASE	AI_SelectStartSquare
      1  49ec		       a9 01		      lda	#AI_SelectStartSquare
      2  49ee		       85 8c		      sta	aiPhase
    431  49f0
    432  49f0		       60	   .exit      rts
    433  49f1
    434  49f1
    435  49f1							;---------------------------------------------------------------------------------------------------
    436  49f1
    437  49f1
      0  49f1					      DEF	aiShowMoveCaptures
      1  49f1				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  49f1				   aiShowMoveCaptures
      3  49f1				   TEMPORARY_VAR SET	Overlay
      4  49f1				   TEMPORARY_OFFSET SET	0
      5  49f1					      SUBROUTINE
    439  49f1					      SUBROUTINE
    440  49f1
    441  49f1							; draw/undraw ALL captured pieces
    442  49f1							; we should do this an even number of times so that pieces don't disappEOR
    443  49f1
    444  49f1		       c6 8a		      dec	ccur
    445  49f3		       20 4a f1 	      jsr	setCursorColours
    446  49f6
    447  49f6		       c6 89		      dec	mdelay	; flash speed UNVARYING despite draw happening
    448  49f8
    449  49f8		       a5 90		      lda	aiMoveIndex
    450  49fa		       10 05		      bpl	.valid	; guaranteed -1 on 1st call
    451  49fc		       20 6e fd 	      jsr	SAFE_getMoveIndex
    452  49ff		       85 90		      sta	aiMoveIndex
    453  4a01				   .valid
    454  4a01
    455  4a01		       20 e8 fd 	      jsr	SAFE_showMoveCaptures
    456  4a04		       a5 90		      lda	aiMoveIndex
    457  4a06		       10 06		      bpl	.exit
    458  4a08
    459  4a08		       e6 91		      inc	aiFlashPhase
    460  4a0a
      0  4a0a					      PHASE	AI_SlowFlash
      1  4a0a		       a9 05		      lda	#AI_SlowFlash
      2  4a0c		       85 8c		      sta	aiPhase
    462  4a0e
    463  4a0e		       60	   .exit      rts
    464  4a0f
    465  4a0f
    466  4a0f							;---------------------------------------------------------------------------------------------------
    467  4a0f
      0  4a0f					      DEF	aiSlowFlash
      1  4a0f				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  4a0f				   aiSlowFlash
      3  4a0f				   TEMPORARY_VAR SET	Overlay
      4  4a0f				   TEMPORARY_OFFSET SET	0
      5  4a0f					      SUBROUTINE
    469  4a0f					      SUBROUTINE
    470  4a0f
    471  4a0f							; Joystick button is held down, so we're displaying the available moves
    472  4a0f							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    473  4a0f
    474  4a0f		       c6 8a		      dec	ccur
    475  4a11		       20 4a f1 	      jsr	setCursorColours
    476  4a14
    477  4a14		       a5 91		      lda	aiFlashPhase
    478  4a16		       29 01		      and	#1
    479  4a18		       d0 04		      bne	.notEven	; only exit after even # EOR-draws
    480  4a1a
    481  4a1a		       a5 4c		      lda	INPT4
    482  4a1c		       30 0d		      bmi	.butpress	; exit on button release
    483  4a1e
    484  4a1e				   .notEven
    485  4a1e
    486  4a1e							; Wait for delay to expire then back and flash 'em again
    487  4a1e
    488  4a1e		       c6 89		      dec	mdelay
    489  4a20		       10 08		      bpl	.slowWait
    490  4a22
    491  4a22		       a9 08		      lda	#CAP_SPEED
    492  4a24		       85 89		      sta	mdelay
    493  4a26
      0  4a26					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  4a26		       a9 04		      lda	#AI_ShowMoveCaptures
      2  4a28		       85 8c		      sta	aiPhase
    495  4a2a
    496  4a2a		       60	   .slowWait  rts
    497  4a2b
    498  4a2b
    499  4a2b		       a9 01	   .butpress  lda	#1
    500  4a2d		       85 89		      sta	mdelay
    501  4a2f
      0  4a2f					      PHASE	AI_UnDrawTargetSquares
      1  4a2f		       a9 06		      lda	#AI_UnDrawTargetSquares
      2  4a31		       85 8c		      sta	aiPhase
    503  4a33		       60		      rts
    504  4a34
    505  4a34
    506  4a34							;---------------------------------------------------------------------------------------------------
    507  4a34
      0  4a34					      DEF	moveCursor
      1  4a34				   BANK_moveCursor SET	_CURRENT_BANK
      2  4a34				   moveCursor
      3  4a34				   TEMPORARY_VAR SET	Overlay
      4  4a34				   TEMPORARY_OFFSET SET	0
      5  4a34					      SUBROUTINE
    509  4a34					      SUBROUTINE
    510  4a34
      0  4a34					      VAR	__newCursor, 1
      1  4a34				   __newCursor SET	TEMPORARY_VAR
      2  4a34				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4a34
      4  4a34				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4a34				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4a34				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4a34					      ENDIF
      8  4a34				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4a34				  -	      ECHO	"Temporary Variable", __newCursor, "overflow!"
     10  4a34				  -	      ERR
     11  4a34					      ENDIF
     12  4a34					      LIST	ON
    512  4a34
    513  4a34							; Part (a) move cursor around the board waiting for joystick press
    514  4a34
    515  4a34
    516  4a34		       ad 80 02 	      lda	SWCHA
    517  4a37		       4a		      lsr
    518  4a38		       4a		      lsr
    519  4a39		       4a		      lsr
    520  4a3a		       4a		      lsr
    521  4a3b		       a8		      tay
    522  4a3c
    523  4a3c		       c9 0f		      cmp	#15
    524  4a3e		       f0 20		      beq	.cursor	; nothing pressed - skip delays
    525  4a40
    526  4a40		       c6 89		      dec	mdelay
    527  4a42		       10 23		      bpl	.delaym
    528  4a44
    529  4a44		       18		      clc
    530  4a45		       a5 88		      lda	cursorX12
    531  4a47		       79 6d f1 	      adc	JoyMoveCursor,y
    532  4a4a		       85 a1		      sta	__newCursor
    533  4a4c		       a8		      tay
    534  4a4d		       20 a2 fc 	      jsr	GetValid
    535  4a50		       c9 ff		      cmp	#-1
    536  4a52		       f0 04		      beq	.invalid
    537  4a54		       a5 a1		      lda	__newCursor
    538  4a56		       85 88		      sta	cursorX12
    539  4a58				   .invalid
    540  4a58
    541  4a58		       a9 08		      lda	#CURSOR_MOVE_SPEED
    542  4a5a		       85 89		      sta	mdelay
    543  4a5c		       20 34 f1 	      jsr	setCursorPriority
    544  4a5f		       60		      rts
    545  4a60
    546  4a60
    547  4a60		       a9 00	   .cursor    lda	#0
    548  4a62		       85 89		      sta	mdelay
    549  4a64		       20 34 f1 	      jsr	setCursorPriority
    550  4a67
    551  4a67		       60	   .delaym    rts
    552  4a68
    553  4a68
    554  4a68							;---------------------------------------------------------------------------------------------------
    555  4a68
      0  4a68					      DEF	FlashPiece
      1  4a68				   BANK_FlashPiece SET	_CURRENT_BANK
      2  4a68				   FlashPiece
      3  4a68				   TEMPORARY_VAR SET	Overlay
      4  4a68				   TEMPORARY_OFFSET SET	0
      5  4a68					      SUBROUTINE
    557  4a68					      SUBROUTINE
    558  4a68
    559  4a68							; Flash the selected piece
    560  4a68
    561  4a68		       c6 8d		      dec	aiFlashDelay
    562  4a6a		       d0 09		      bne	.noFlashAi
    563  4a6c
    564  4a6c		       e6 91		      inc	aiFlashPhase
    565  4a6e
    566  4a6e		       a9 0a		      lda	#10
    567  4a70		       85 8d		      sta	aiFlashDelay
    568  4a72
    569  4a72		       20 2f fd 	      jsr	SAFE_CopySinglePiece
    570  4a75
    571  4a75		       60	   .noFlashAi rts
    572  4a76
    573  4a76							;---------------------------------------------------------------------------------------------------
    574  4a76
      0  4a76					      DEF	aiSelectDestinationSquare
      1  4a76				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  4a76				   aiSelectDestinationSquare
      3  4a76				   TEMPORARY_VAR SET	Overlay
      4  4a76				   TEMPORARY_OFFSET SET	0
      5  4a76					      SUBROUTINE
    576  4a76					      SUBROUTINE
    577  4a76
    578  4a76							; Piece is selected and now we're looking for a button press on a destination square
    579  4a76							; we flash the piece on-and-off while we're doing that
    580  4a76
    581  4a76		       20 68 f2 	      jsr	FlashPiece
    582  4a79		       20 34 f2 	      jsr	moveCursor
    583  4a7c		       20 e3 fc 	      jsr	SAFE_IsValidMoveToSquare
    584  4a7f		       20 4a f1 	      jsr	setCursorColours
    585  4a82
    586  4a82							; y = valid square
    587  4a82
    588  4a82		       a5 4c		      lda	INPT4
    589  4a84		       30 27		      bmi	.noButton
    590  4a86
    591  4a86		       a5 8f		      lda	aiToSquareX12
    592  4a88		       c5 8e		      cmp	aiFromSquareX12
    593  4a8a		       f0 0d		      beq	.cancel
    594  4a8c
    595  4a8c		       c0 ff		      cpy	#-1
    596  4a8e		       f0 1d		      beq	.noButton	; not a valid square
    597  4a90
    598  4a90		       a5 91		      lda	aiFlashPhase
    599  4a92		       29 01		      and	#1
    600  4a94		       f0 13		      beq	.done
    601  4a96		       85 8d		      sta	aiFlashDelay	; EOR-phase incorrect - force quick fix to allow next-frame button detect
    602  4a98		       60		      rts
    603  4a99
    604  4a99				   .cancel
    605  4a99
    606  4a99		       a5 91		      lda	aiFlashPhase
    607  4a9b		       29 01		      and	#1
    608  4a9d		       f0 05		      beq	.doCancel
    609  4a9f
    610  4a9f							; EOR-phase incorrect - force quick fix to allow next-frame button detect
    611  4a9f
    612  4a9f		       a9 01		      lda	#1
    613  4aa1		       85 8d		      sta	aiFlashDelay
    614  4aa3		       60		      rts
    615  4aa4
    616  4aa4
      0  4aa4				   .doCancel  PHASE	AI_ReselectDebounce
      1  4aa4		       a9 09		      lda	#AI_ReselectDebounce
      2  4aa6		       85 8c		      sta	aiPhase
    618  4aa8		       60		      rts
    619  4aa9
      0  4aa9				   .done      PHASE	AI_Quiescent	; destination selected!
      1  4aa9		       a9 08		      lda	#AI_Quiescent
      2  4aab		       85 8c		      sta	aiPhase
    621  4aad		       60	   .noButton  rts
    622  4aae
    623  4aae
    624  4aae							;---------------------------------------------------------------------------------------------------
    625  4aae
      0  4aae					      DEF	aiReselectDebounce
      1  4aae				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  4aae				   aiReselectDebounce
      3  4aae				   TEMPORARY_VAR SET	Overlay
      4  4aae				   TEMPORARY_OFFSET SET	0
      5  4aae					      SUBROUTINE
    627  4aae					      SUBROUTINE
    628  4aae
    629  4aae							; We've just cancelled the move. Wait for the button to be released
    630  4aae							; and then go back to selecting a piece to move
    631  4aae
    632  4aae		       a5 4c		      lda	INPT4
    633  4ab0		       10 04		      bpl	.exit	; button still pressed, so wait
    634  4ab2
      0  4ab2					      PHASE	AI_SelectStartSquare
      1  4ab2		       a9 01		      lda	#AI_SelectStartSquare
      2  4ab4		       85 8c		      sta	aiPhase
    636  4ab6		       60	   .exit      rts
    637  4ab7
    638  4ab7							;---------------------------------------------------------------------------------------------------
    639  4ab7
      0  4ab7					      DEF	aiQuiescent
      1  4ab7				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  4ab7				   aiQuiescent
      3  4ab7				   TEMPORARY_VAR SET	Overlay
      4  4ab7				   TEMPORARY_OFFSET SET	0
      5  4ab7					      SUBROUTINE
    641  4ab7					      SUBROUTINE
      0  4ab7					      TAG	MOVE_SELECTED
      1  4ab7
    643  4ab7
    644  4ab7		       a9 ff		      lda	#-1
    645  4ab9		       85 88		      sta	cursorX12
    646  4abb
    647  4abb		       a5 8e		      lda	aiFromSquareX12
    648  4abd		       85 85		      sta	fromX12
    649  4abf		       85 87		      sta	originX12
    650  4ac1		       a5 8f		      lda	aiToSquareX12
    651  4ac3		       85 86		      sta	toX12
    652  4ac5
    653  4ac5		       20 d7 fc 	      jsr	SAFE_GetPiece
    654  4ac8
    655  4ac8							; With en-passant flag, it is essentially dual-use.
    656  4ac8							; First, it marks if the move is *involved* somehow in an en-passant
    657  4ac8							; if the piece has MOVED already, then it's an en-passant capture
    658  4ac8							; if it has NOT moved, then it's a pawn leaving home rank, and sets the en-passant square
    659  4ac8
    660  4ac8
    661  4ac8				  -	      if	0
    662  4ac8				  -	      ldx	#0
    663  4ac8				  -	      lda	aiPiece
    664  4ac8				  -	      and	#FLAG_ENPASSANT|FLAG_MOVED
    665  4ac8				  -	      cmp	#FLAG_ENPASSANT
    666  4ac8				  -	      bne	.noep	; HAS moved, or not en-passant
    667  4ac8				  -
    668  4ac8				  -	      lda	aiPiece
    669  4ac8				  -	      and	#~FLAG_ENPASSANT	; clear flag as it's been handled
    670  4ac8				  -	      sta	aiPiece
    671  4ac8				  -
    672  4ac8				  -	      ldx	toX12	; this IS an en-passantable opening, so record the square
    673  4ac8				  -.noep		;stx enPassantPawn		  ; capturable square for en-passant move
    674  4ac8					      endif
    675  4ac8
    676  4ac8							; End of en-passant handling
    677  4ac8
    678  4ac8		       a5 a0		      lda	aiPiece
    679  4aca		       85 9c		      sta	fromPiece
    680  4acc							;ora #FLAG_MOVED		 ; for K/R prevents usage in castling
    681  4acc							;sta toPiece
    682  4acc
    683  4acc
    684  4acc
    685  4acc		       a4 85		      ldy	fromX12
    686  4ace		       20 ae fc 	      jsr	GetBoard	; get the piece
    687  4ad1
    688  4ad1		       45 9c		      eor	fromPiece
    689  4ad3		       29 0f		      and	#PIECE_MASK	; if not the same piece board/movelist...
    690  4ad5		       d0 05		      bne	.promote	; promote a pawn
    691  4ad7
      0  4ad7					      PHASE	AI_PrepForPhysicalMove
      1  4ad7		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  4ad9		       85 8c		      sta	aiPhase
    693  4adb		       60		      rts
    694  4adc
      0  4adc				   .promote   PHASE	AI_PromotePawnStart
      1  4adc		       a9 1f		      lda	#AI_PromotePawnStart
      2  4ade		       85 8c		      sta	aiPhase
    696  4ae0		       60		      rts
    697  4ae1
    698  4ae1
    699  4ae1							;---------------------------------------------------------------------------------------------------
    700  4ae1
      0  4ae1					      DEF	aiPromotePawnStart
      1  4ae1				   BANK_aiPromotePawnStart SET	_CURRENT_BANK
      2  4ae1				   aiPromotePawnStart
      3  4ae1				   TEMPORARY_VAR SET	Overlay
      4  4ae1				   TEMPORARY_OFFSET SET	0
      5  4ae1					      SUBROUTINE
    702  4ae1					      SUBROUTINE
    703  4ae1
    704  4ae1		       a9 00		      lda	#0
    705  4ae3		       85 91		      sta	aiFlashPhase
    706  4ae5		       85 8d		      sta	aiFlashDelay
    707  4ae7
    708  4ae7		       a4 8f		      ldy	aiToSquareX12
    709  4ae9		       84 80		      sty	drawPieceNumberX12
    710  4aeb		       20 28 fd 	      jsr	PromoteStart	; remove any capturable piece for display purposes
    711  4aee
      0  4aee					      PHASE	AI_RollPromotionPiece
      1  4aee		       a9 20		      lda	#AI_RollPromotionPiece
      2  4af0		       85 8c		      sta	aiPhase
    713  4af2		       60		      rts
    714  4af3
    715  4af3
    716  4af3							;---------------------------------------------------------------------------------------------------
    717  4af3
      0  4af3					      DEF	aiRollPromotionPiece
      1  4af3				   BANK_aiRollPromotionPiece SET	_CURRENT_BANK
      2  4af3				   aiRollPromotionPiece
      3  4af3				   TEMPORARY_VAR SET	Overlay
      4  4af3				   TEMPORARY_OFFSET SET	0
      5  4af3					      SUBROUTINE
    719  4af3					      SUBROUTINE
    720  4af3
    721  4af3							; Flash the '?' and wait for an UDLR move
    722  4af3
    723  4af3		       ad 80 02 	      lda	SWCHA
    724  4af6		       29 f0		      and	#$F0
    725  4af8		       c9 f0		      cmp	#$F0
    726  4afa		       f0 0a		      beq	.nojoy
    727  4afc
    728  4afc		       a9 00		      lda	#0
    729  4afe		       85 8d		      sta	aiFlashDelay
    730  4b00
    731  4b00		       a5 91		      lda	aiFlashPhase
    732  4b02		       29 01		      and	#1
    733  4b04		       f0 10		      beq	.even
    734  4b06
    735  4b06		       c6 8d	   .nojoy     dec	aiFlashDelay
    736  4b08		       10 0b		      bpl	.exit
    737  4b0a
    738  4b0a		       a9 0a		      lda	#10
    739  4b0c		       85 8d		      sta	aiFlashDelay
    740  4b0e
    741  4b0e		       a2 20		      ldx	#INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0
    742  4b10		       20 bf fd 	      jsr	SAFE_showPromoteOptions
    743  4b13
    744  4b13		       e6 91		      inc	aiFlashPhase
    745  4b15
    746  4b15		       60	   .exit      rts
    747  4b16
    748  4b16
    749  4b16		       a9 03	   .even      lda	#3	; QUEEN
    750  4b18		       85 a0		      sta	aiPiece	; cycles as index to NBRQ
    751  4b1a
    752  4b1a		       e6 91		      inc	aiFlashPhase
    753  4b1c
    754  4b1c		       a2 14		      ldx	#INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0	;TODO: fix for colour
    755  4b1e		       20 bf fd 	      jsr	SAFE_showPromoteOptions
    756  4b21
      0  4b21					      PHASE	AI_ChooseDebounce
      1  4b21		       a9 22		      lda	#AI_ChooseDebounce
      2  4b23		       85 8c		      sta	aiPhase
    758  4b25		       60		      rts
    759  4b26
    760  4b26
    761  4b26							;---------------------------------------------------------------------------------------------------
    762  4b26
      0  4b26					      DEF	aiChoosePromotePiece
      1  4b26				   BANK_aiChoosePromotePiece SET	_CURRENT_BANK
      2  4b26				   aiChoosePromotePiece
      3  4b26				   TEMPORARY_VAR SET	Overlay
      4  4b26				   TEMPORARY_OFFSET SET	0
      5  4b26					      SUBROUTINE
    764  4b26					      SUBROUTINE
    765  4b26
    766  4b26							; Question-mark phase has exited via joystick direction
    767  4b26							; Now we cycle through the selectable pieces
    768  4b26
    769  4b26		       a5 4c		      lda	INPT4
    770  4b28		       30 0a		      bmi	.nobut	; no press
    771  4b2a
    772  4b2a							; button pressed but make sure phase is correct for exit
    773  4b2a
    774  4b2a		       a9 00		      lda	#0
    775  4b2c		       85 8d		      sta	aiFlashDelay
    776  4b2e
    777  4b2e		       a5 91		      lda	aiFlashPhase
    778  4b30		       29 01		      and	#1
    779  4b32		       f0 33		      beq	.chosen	; button pressed --> selection made
    780  4b34
    781  4b34				   .nobut
    782  4b34
    783  4b34		       ad 80 02 	      lda	SWCHA
    784  4b37		       29 f0		      and	#$F0
    785  4b39		       c9 f0		      cmp	#$F0
    786  4b3b		       f0 17		      beq	.odd	; no direction pressed
    787  4b3d
    788  4b3d		       4a		      lsr
    789  4b3e		       4a		      lsr
    790  4b3f		       4a		      lsr
    791  4b40		       4a		      lsr
    792  4b41		       a8		      tay
    793  4b42
    794  4b42							; joystick but make sure phase is correct
    795  4b42
    796  4b42		       a5 91		      lda	aiFlashPhase
    797  4b44		       4a		      lsr
    798  4b45		       b0 0d		      bcs	.odd	; must wait until piece undrawn
    799  4b47
    800  4b47							; cycle to the next promotable piece (N/B/R/Q)
    801  4b47							; TODO; use joy table for mod instead of just incrementing all the time
    802  4b47
    803  4b47							;clc
    804  4b47		       a5 a0		      lda	aiPiece
    805  4b49		       79 5d f1 	      adc	JoyCombined,y
    806  4b4c		       29 03		      and	#3
    807  4b4e		       85 a0		      sta	aiPiece
    808  4b50
      0  4b50					      PHASE	AI_ChooseDebounce	; wait for release
      1  4b50		       a9 22		      lda	#AI_ChooseDebounce
      2  4b52		       85 8c		      sta	aiPhase
    810  4b54
    811  4b54		       c6 8d	   .odd       dec	aiFlashDelay
    812  4b56		       10 0e		      bpl	.exit
    813  4b58
    814  4b58		       a9 0a	   .force     lda	#10
    815  4b5a		       85 8d		      sta	aiFlashDelay
    816  4b5c
    817  4b5c		       e6 91		      inc	aiFlashPhase
    818  4b5e
    819  4b5e		       a4 a0		      ldy	aiPiece
    820  4b60		       be 7b f3 	      ldx	promotePiece,y
    821  4b63		       20 bf fd 	      jsr	SAFE_showPromoteOptions
    822  4b66
    823  4b66		       60	   .exit      rts
    824  4b67
    825  4b67
    826  4b67				   .chosen
    827  4b67		       a5 a0		      lda	aiPiece
    828  4b69		       29 0f		      and	#PIECE_MASK
    829  4b6b		       aa		      tax
    830  4b6c
    831  4b6c		       bd 7f f3 	      lda	promoteType,x
    832  4b6f		       85 9c		      sta	fromPiece
    833  4b71
    834  4b71		       a4 8f		      ldy	aiToSquareX12
    835  4b73		       20 28 fd 	      jsr	PromoteStart
    836  4b76
      0  4b76					      PHASE	AI_PrepForPhysicalMove
      1  4b76		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  4b78		       85 8c		      sta	aiPhase
    838  4b7a		       60		      rts
    839  4b7b
      0  4b7b					      ALLOCATE	promotePiece, 4
      0  4b7b					      OPTIONAL_PAGEBREAK	"Table", 4
     10  4b7b					      LIST	ON
      0  4b7b					      DEF	promotePiece
      1  4b7b				   BANK_promotePiece SET	_CURRENT_BANK
      2  4b7b				   promotePiece
      3  4b7b				   TEMPORARY_VAR SET	Overlay
      4  4b7b				   TEMPORARY_OFFSET SET	0
      5  4b7b					      SUBROUTINE
    841  4b7b		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    842  4b7c		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    843  4b7d		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    844  4b7e		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    845  4b7f
      0  4b7f					      ALLOCATE	promoteType,4
      0  4b7f					      OPTIONAL_PAGEBREAK	"Table", 4
     10  4b7f					      LIST	ON
      0  4b7f					      DEF	promoteType
      1  4b7f				   BANK_promoteType SET	_CURRENT_BANK
      2  4b7f				   promoteType
      3  4b7f				   TEMPORARY_VAR SET	Overlay
      4  4b7f				   TEMPORARY_OFFSET SET	0
      5  4b7f					      SUBROUTINE
    847  4b7f		       03 04 05 06	      .byte.b	KNIGHT, BISHOP, ROOK, QUEEN
    848  4b83
    849  4b83
    850  4b83							;---------------------------------------------------------------------------------------------------
    851  4b83
      0  4b83					      DEF	aiChooseDebounce
      1  4b83				   BANK_aiChooseDebounce SET	_CURRENT_BANK
      2  4b83				   aiChooseDebounce
      3  4b83				   TEMPORARY_VAR SET	Overlay
      4  4b83				   TEMPORARY_OFFSET SET	0
      5  4b83					      SUBROUTINE
    853  4b83					      SUBROUTINE
    854  4b83
    855  4b83							; We've changed promotion piece, but wait for joystick to be released
    856  4b83
    857  4b83		       ad 80 02 	      lda	SWCHA
    858  4b86		       29 f0		      and	#$F0
    859  4b88		       c9 f0		      cmp	#$F0
    860  4b8a		       d0 08		      bne	.exit	; wait while joystick still pressed
    861  4b8c
    862  4b8c		       a9 01		      lda	#1
    863  4b8e		       85 8d		      sta	aiFlashDelay
    864  4b90
      0  4b90					      PHASE	AI_ChoosePromotePiece
      1  4b90		       a9 21		      lda	#AI_ChoosePromotePiece
      2  4b92		       85 8c		      sta	aiPhase
    866  4b94		       60	   .exit      rts
    867  4b95
    868  4b95							;---------------------------------------------------------------------------------------------------
    869  4b95
    870  4c00		       00 00 00 00*	      align	256
      0  4c00					      DEF	PositionSprites
      1  4c00				   BANK_PositionSprites SET	_CURRENT_BANK
      2  4c00				   PositionSprites
      3  4c00				   TEMPORARY_VAR SET	Overlay
      4  4c00				   TEMPORARY_OFFSET SET	0
      5  4c00					      SUBROUTINE
    872  4c00					      SUBROUTINE
    873  4c00
    874  4c00		       a5 88		      lda	cursorX12
    875  4c02		       38		      sec
    876  4c03		       e9 0a	   .sub10     sbc	#10
    877  4c05		       b0 fc		      bcs	.sub10
    878  4c07		       69 08		      adc	#8
    879  4c09		       a8		      tay
    880  4c0a
    881  4c0a		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    882  4c0c
    883  4c0c		       b9 30 f4 	      lda	colToPixel,y
    884  4c0f
    885  4c0f		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    886  4c10		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    887  4c12		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    888  4c14
    889  4c14		       a8		      tay
    890  4c15		       b9 30 f3 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    891  4c18		       85 60		      sta	HMP0
    892  4c1a		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    893  4c1c
    894  4c1c		       85 42		      sta	WSYNC
    895  4c1e		       85 6a		      sta	HMOVE
    896  4c20
    897  4c20		       60		      rts
    898  4c21
    899  4c21							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    900  4c21							; fine adjustment value. This table is on a page boundary to guarantee the processor
    901  4c21							; will cross a page boundary and waste a cycle in order to be at the precise position
    902  4c21							; for a RESP0,x write
    903  4c21
    904  4c21				   fineAdjustBegin
    905  4c21
    906  4c21		       70		      DC.B	%01110000	; Left 7
    907  4c22		       60		      DC.B	%01100000	; Left 6
    908  4c23		       50		      DC.B	%01010000	; Left 5
    909  4c24		       40		      DC.B	%01000000	; Left 4
    910  4c25		       30		      DC.B	%00110000	; Left 3
    911  4c26		       20		      DC.B	%00100000	; Left 2
    912  4c27		       10		      DC.B	%00010000	; Left 1
    913  4c28		       00		      DC.B	%00000000	; No movement.
    914  4c29		       f0		      DC.B	%11110000	; Right 1
    915  4c2a		       e0		      DC.B	%11100000	; Right 2
    916  4c2b		       d0		      DC.B	%11010000	; Right 3
    917  4c2c		       c0		      DC.B	%11000000	; Right 4
    918  4c2d		       b0		      DC.B	%10110000	; Right 5
    919  4c2e		       a0		      DC.B	%10100000	; Right 6
    920  4c2f		       90		      DC.B	%10010000	; Right 7
    921  4c30
    922  4c30		       f3 30	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    923  4c30
    924  4c30
      0  4c30					      ALLOCATE	colToPixel, 8
      0  4c30					      OPTIONAL_PAGEBREAK	"Table", 8
     10  4c30					      LIST	ON
      0  4c30					      DEF	colToPixel
      1  4c30				   BANK_colToPixel SET	_CURRENT_BANK
      2  4c30				   colToPixel
      3  4c30				   TEMPORARY_VAR SET	Overlay
      4  4c30				   TEMPORARY_OFFSET SET	0
      5  4c30					      SUBROUTINE
    926  4c30		       00 14 28 3c*	      .byte.b	0,20,40,60,80,100,120,140
    927  4c38
      0  4c38					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  4c38		       04 38	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $438 , FREE= $3c8
      2  4c38					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4c38				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4c38				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4c38				  -	      ERR
      6  4c38					      endif
    929  4c38
    930  4c38
    931  4c38							; EOF
------- FILE ./chess.asm
------- FILE BANK_TEXT_OVERLAYS.asm LEVEL 2 PASS 2
      0  4c38					      include	"BANK_TEXT_OVERLAYS.asm"
      0  4c38					      NEWBANK	TEXT_OVERLAYS
      1  5002 ????				      SEG	TEXT_OVERLAYS
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   TEXT_OVERLAYS SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	TEXT_OVERLAYS
      2  5000
      3  5000
      4  5000
      5  5000
      6  5000				   sample
      7  5000		       48 aa		      .byte.b	72,%10101010
      8  5002
      9  5002
     10  5002
     11  5002							;EOF
------- FILE ./chess.asm
    450  5002
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  5002					      include	"titleScreen.asm"
      0  5002					      NEWBANK	TITLESCREEN
      1  5fc0 ????				      SEG	TITLESCREEN
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   TITLESCREEN SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	TITLESCREEN
      2  5800
      3  5800				   OverscanTime2
      4  5800		       1a 1a		      .byte.b	26, 26
      5  5802		       20 20		      .byte.b	32, 32
      6  5804
      7  5804				   colvec
      8  5804		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  5808
     10  5808
     11  5808		       32 32	   VBlankTime .byte.b	50,50
     12  580a
      0  580a					      DEF	TitleScreen
      1  580a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  580a				   TitleScreen
      3  580a				   TEMPORARY_VAR SET	Overlay
      4  580a				   TEMPORARY_OFFSET SET	0
      5  580a					      SUBROUTINE
     14  580a					      SUBROUTINE
     15  580a
      0  580a					      VAR	__colour_table, 2
      1  580a				   __colour_table SET	TEMPORARY_VAR
      2  580a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  580a
      4  580a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  580a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  580a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  580a					      ENDIF
      8  580a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  580a				  -	      ECHO	"Temporary Variable", __colour_table, "overflow!"
     10  580a				  -	      ERR
     11  580a					      ENDIF
     12  580a					      LIST	ON
     17  580a
     18  580a							; Start of new frame
     19  580a
     20  580a							; Start of vertical blank processing
     21  580a
     22  580a				   TitleSequence
     23  580a
     24  580a		       a9 00		      lda	#%00000000
     25  580c		       85 4a		      sta	CTRLPF
     26  580e		       85 49		      sta	COLUBK
     27  5810
     28  5810		       a2 00		      ldx	#0	;Platform
     29  5812		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     30  5814		       85 a1		      sta	__colour_table
     31  5816		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     32  5818		       85 a2		      sta	__colour_table+1
     33  581a
     34  581a							;		  sta rndHi
     35  581a							;		  sta rnd
     36  581a
     37  581a
     38  581a				  -	      if	0
     39  581a				  -	      lda	#0
     40  581a				  -	      sta	digit
     41  581a				  -	      lda	#$10
     42  581a				  -	      sta	digit+1
     43  581a				  -	      lda	#$20
     44  581a				  -	      sta	digit+2
     45  581a					      endif
     46  581a
     47  581a
     48  581a
     49  581a
      0  581a					      RESYNC
      1  581a
      2  581a		       a9 02		      lda	#%10
      3  581c		       85 41		      sta	VBLANK
      4  581e
      5  581e		       a2 08		      ldx	#8
      6  5820				   .loopResync
      0  5820					      VERTICAL_SYNC
      1  5820		       a9 0e		      lda	#%1110
      2  5822		       85 42	   .VSLP1     sta	WSYNC
      3  5824		       85 40		      sta	VSYNC
      4  5826		       4a		      lsr
      5  5827		       d0 f9		      bne	.VSLP1
      8  5829
      9  5829		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  582b		       a5 9f		      lda	Platform
     11  582d		       49 02		      eor	#PAL_50
     12  582f		       d0 02		      bne	.ntsc
     13  5831		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  5833				   .ntsc
     15  5833				   .loopWait
     16  5833		       85 42		      sta	WSYNC
     17  5835		       85 42		      sta	WSYNC
     18  5837		       88		      dey
     19  5838		       d0 f9		      bne	.loopWait
     20  583a		       ca		      dex
     21  583b		       d0 e3		      bne	.loopResync
     51  583d
     52  583d				   RestartFrame0
     53  583d
     54  583d				  -	      if	0
     55  583d				  -	      ldx	#2
     56  583d				  -rollcols   clc
     57  583d				  -	      lda	digit+2
     58  583d				  -	      adc	#$10
     59  583d				  -	      sta	digit+2
     60  583d				  -	      bcc	finxc
     61  583d				  -	      dex
     62  583d				  -	      bpl	rollcols
     63  583d				  -finxc
     64  583d					      endif
     65  583d
      0  583d					      DEF	RestartFrame
      1  583d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  583d				   RestartFrame
      3  583d				   TEMPORARY_VAR SET	Overlay
      4  583d				   TEMPORARY_OFFSET SET	0
      5  583d					      SUBROUTINE
     67  583d		       a9 00		      LDA	#0
     68  583f		       a9 0e		      lda	#%1110	; VSYNC ON
     69  5841		       85 42	   .loopVSync2 sta	WSYNC
     70  5843		       85 40		      sta	VSYNC
     71  5845		       4a		      lsr
     72  5846		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     73  5848
     74  5848							;------------------------------------------------------------------
     75  5848
     76  5848		       a6 9f		      ldx	Platform
     77  584a		       bc 08 f0 	      ldy	VBlankTime,x
     78  584d		       8c 96 02 	      sty	TIM64T
     79  5850
     80  5850
     81  5850				  -	      if	0
     82  5850				  -	      lda	SWCHB
     83  5850				  -	      rol
     84  5850				  -	      rol
     85  5850				  -	      rol
     86  5850				  -	      and	#%11
     87  5850				  -	      eor	#PAL
     88  5850				  -	      cmp	Platform
     89  5850				  -	      beq	platOK
     90  5850				  -	      sta	Platform
     91  5850				  -	      jmp	TitleSequence
     92  5850				  -platOK
     93  5850					      endif
     94  5850
     95  5850		       e6 81	   k2	      inc	rnd
     96  5852		       f0 fc		      beq	k2
     97  5854
     98  5854
     99  5854		       85 42	   VerticalBlank sta	WSYNC
    100  5856		       ad 84 02 	      lda	INTIM
    101  5859		       d0 f9		      bne	VerticalBlank
    102  585b		       85 41		      sta	VBLANK
    103  585d
    104  585d							;sta COLUBK
    105  585d
    106  585d							;------------------------------------------------------------------
    107  585d
    108  585d							; Do X scanlines of color-changing (our picture)
    109  585d
    110  585d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    111  585f		       a2 03	   SokoLogo   ldx	#3
    112  5861		       b1 a1	   triplet    lda	(__colour_table),y
    113  5863							;    eor digit-1,x
    114  5863		       85 42		      sta	WSYNC
    115  5865		       85 48		      sta	COLUPF	; 3
    116  5867
    117  5867		       b9 b0 f2 	      lda	COL_0,y	; 5
    118  586a		       85 4d		      sta	PF0	; 3   @11
    119  586c		       b9 88 f3 	      lda	COL_1,y	; 5
    120  586f		       85 4e		      sta	PF1	; 3   @19
    121  5871		       b9 60 f4 	      lda	COL_2,y	; 5
    122  5874		       85 4f		      sta	PF2	; 3   @27
    123  5876
    124  5876		       b9 38 f5 	      lda	COL_3,y	; 5
    125  5879		       85 4d		      sta	PF0	; 3   @35
      0  587b					      SLEEP	2	; @37
      1  587b				   .CYCLES    SET	2
      2  587b
      3  587b				  -	      IF	.CYCLES < 2
      4  587b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  587b				  -	      ERR
      6  587b					      ENDIF
      7  587b
      8  587b				  -	      IF	.CYCLES & 1
      9  587b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  587b				  -	      nop	0
     11  587b				  -	      ELSE
     12  587b				  -	      bit	VSYNC
     13  587b				  -	      ENDIF
     14  587b				  -.CYCLES    SET	.CYCLES - 3
     15  587b					      ENDIF
     16  587b
     17  587b					      REPEAT	.CYCLES / 2
     18  587b		       ea		      nop
     19  587c					      REPEND
    127  587c		       b9 10 f6 	      lda	COL_4,y	; 5
    128  587f		       85 4e		      sta	PF1	; 3   @45
      0  5881					      SLEEP	3	; @45
      1  5881				   .CYCLES    SET	3
      2  5881
      3  5881				  -	      IF	.CYCLES < 2
      4  5881				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  5881				  -	      ERR
      6  5881					      ENDIF
      7  5881
      8  5881					      IF	.CYCLES & 1
      9  5881					      IFNCONST	NO_ILLEGAL_OPCODES
     10  5881		       04 00		      nop	0
     11  5883				  -	      ELSE
     12  5883				  -	      bit	VSYNC
     13  5883					      ENDIF
     14  5883				   .CYCLES    SET	.CYCLES - 3
     15  5883					      ENDIF
     16  5883
     17  5883				  -	      REPEAT	.CYCLES / 2
     18  5883				  -	      nop
     19  5883					      REPEND
    130  5883		       b9 e8 f6 	      lda	COL_5,y	; 5
    131  5886		       85 4f		      sta	PF2	; 3
    132  5888
    133  5888		       88		      dey		; 2
    134  5889		       ca		      dex		; 2
    135  588a		       d0 d5		      bne	triplet	; 2(3)
    136  588c
    137  588c		       c0 ff		      cpy	#-1	; 2
    138  588e		       d0 cf		      bne	SokoLogo	; 2(3)
    139  5890
    140  5890							;lda #0
    141  5890							;sta PF0
    142  5890							;sta PF1
    143  5890							;sta PF2
    144  5890
    145  5890		       a6 9f		      ldx	Platform
    146  5892		       bd 00 f0 	      lda	OverscanTime2,x
    147  5895		       8d 96 02 	      sta	TIM64T
    148  5898
    149  5898				  -	      if	0
    150  5898				  -	      sta	WSYNC
    151  5898				  -	      sta	WSYNC
    152  5898				  -	      sta	WSYNC
    153  5898				  -	      sta	WSYNC
    154  5898				  -	      sta	WSYNC
    155  5898				  -	      SLEEP	8
    156  5898				  -	      jsr	SokoScreen
    157  5898				  -
    158  5898				  -	      lda	#0
    159  5898				  -	      sta	BoardScrollX
    160  5898				  -	      sta	BoardScrollY
    161  5898					      endif
    162  5898
    163  5898							;		ldy #63
    164  5898							;bot2		 sta WSYNC
    165  5898							;		dey
    166  5898							;		bpl bot2
    167  5898
    168  5898							;--------------------------------------------------------------------------
    169  5898
    170  5898		       a9 00		      lda	#0
    171  589a		       85 4d		      sta	PF0
    172  589c		       85 4e		      sta	PF1
    173  589e		       85 4f		      sta	PF2
    174  58a0
    175  58a0
      0  58a0					      NEXT_RANDOM
      1  58a0		       a5 81		      lda	rnd
      2  58a2		       4a		      lsr
      3  58a3		       90 02		      bcc	.skipEOR
      4  58a5		       49 fe		      eor	#RND_EOR_VAL
      5  58a7		       85 81	   .skipEOR   sta	rnd
    177  58a9
    178  58a9							; D1 VBLANK turns off beam
    179  58a9							; It needs to be turned on 37 scanlines later
    180  58a9
    181  58a9				   oscan
    182  58a9		       ad 84 02 	      lda	INTIM
    183  58ac		       d0 fb		      bne	oscan
    184  58ae
    185  58ae		       a9 42		      lda	#%01000010	; bit6 is not required
    186  58b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    187  58b2
    188  58b2				  -	      if	0
    189  58b2				  -	      inc	rnd
    190  58b2				  -	      bne	rdd
    191  58b2				  -	      inc	rndHi
    192  58b2				  -rdd
    193  58b2				  -
    194  58b2				  -	      dec	digitick
    195  58b2				  -	      bpl	ret2
    196  58b2				  -	      lda	#40
    197  58b2				  -	      sta	digitick
    198  58b2				  -
    199  58b2				  -	      jsr	Random
    200  58b2				  -	      and	#3
    201  58b2				  -	      beq	ret2
    202  58b2				  -	      tax
    203  58b2				  -	      jsr	Random
    204  58b2				  -	      and	#$F0
    205  58b2				  -	      sta	digit-1,x
    206  58b2				  -	      jmp	RestartFrame0
    207  58b2				  -
    208  58b2				  -ret2
    209  58b2					      endif
    210  58b2
    211  58b2
    212  58b2		       a5 4c		      lda	INPT4
    213  58b4		       10 03		      bpl	ret
    214  58b6
    215  58b6		       4c 3d f0 	      jmp	RestartFrame
    216  58b9
    217  58b9				   ret
    218  58b9		       60		      rts
    219  58ba
    220  58ba
    221  58ba
    222  58ba					      MAC	lumtable
    223  58ba							; {4} MIN LUM 1
    224  58ba							; {5} MIN LUM 2
    225  58ba							; {6} MIN LUM 3
    226  58ba
    227  58ba				   .LUM1      SET	{4}*256
    228  58ba				   .LUM2      SET	{5}*256
    229  58ba				   .LUM3      SET	{6}*256
    230  58ba
    231  58ba				   .STEP1     =	(256*({7}-{4}))/72
    232  58ba				   .STEP2     =	(256*({8}-{5}))/72
    233  58ba				   .STEP3     =	(256*({9}-{6}))/72
    234  58ba
    235  58ba					      REPEAT	72
    236  58ba					      .byte	{1}+(.LUM1/256)
    237  58ba					      .byte	{2}+(.LUM2/256)
    238  58ba					      .byte	{3}+(.LUM3/256)
    239  58ba
    240  58ba							;    ECHO {1}+(.LUM1/256)
    241  58ba							;    ECHO {2}+(.LUM1/256)
    242  58ba							;    ECHO {3}+(.LUM1/256)
    243  58ba
    244  58ba				   .LUM1      SET	.LUM1 + .STEP1
    245  58ba				   .LUM2      SET	.LUM2 + .STEP2
    246  58ba				   .LUM3      SET	.LUM3 + .STEP3
    247  58ba					      REPEND
    248  58ba					      ENDM		;{1}{2}{3} base colours
    249  58ba
    250  58ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    251  58ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    252  58ba
    253  5900		       00 00 00 00*	      align	256
    254  5900							;    ECHO "NTSC LUMS"
    255  5900				   colr_ntsc2
      0  5900					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  5900
      2  5900
      3  5900
      4  5900
      5  5900				   .LUM1      SET	$4*256
      6  5900				   .LUM2      SET	$6*256
      7  5900				   .LUM3      SET	$8*256
      8  5900
      9  5900		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  5900		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  5900		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  5900
     13  5900					      REPEAT	72
     14  5900		       44		      .byte.b	$40+(.LUM1/256)
     15  5901		       26		      .byte.b	$20+(.LUM2/256)
     16  5902		       98		      .byte.b	$90+(.LUM3/256)
     17  5903
     18  5903
     19  5903
     20  5903
     21  5903
     22  5903				   .LUM1      SET	.LUM1 + .STEP1
     23  5903				   .LUM2      SET	.LUM2 + .STEP2
     24  5903				   .LUM3      SET	.LUM3 + .STEP3
     13  5903					      REPEND
     14  5903		       44		      .byte.b	$40+(.LUM1/256)
     15  5904		       26		      .byte.b	$20+(.LUM2/256)
     16  5905		       98		      .byte.b	$90+(.LUM3/256)
     17  5906
     18  5906
     19  5906
     20  5906
     21  5906
     22  5906				   .LUM1      SET	.LUM1 + .STEP1
     23  5906				   .LUM2      SET	.LUM2 + .STEP2
     24  5906				   .LUM3      SET	.LUM3 + .STEP3
     13  5906					      REPEND
     14  5906		       44		      .byte.b	$40+(.LUM1/256)
     15  5907		       26		      .byte.b	$20+(.LUM2/256)
     16  5908		       98		      .byte.b	$90+(.LUM3/256)
     17  5909
     18  5909
     19  5909
     20  5909
     21  5909
     22  5909				   .LUM1      SET	.LUM1 + .STEP1
     23  5909				   .LUM2      SET	.LUM2 + .STEP2
     24  5909				   .LUM3      SET	.LUM3 + .STEP3
     13  5909					      REPEND
     14  5909		       44		      .byte.b	$40+(.LUM1/256)
     15  590a		       26		      .byte.b	$20+(.LUM2/256)
     16  590b		       98		      .byte.b	$90+(.LUM3/256)
     17  590c
     18  590c
     19  590c
     20  590c
     21  590c
     22  590c				   .LUM1      SET	.LUM1 + .STEP1
     23  590c				   .LUM2      SET	.LUM2 + .STEP2
     24  590c				   .LUM3      SET	.LUM3 + .STEP3
     13  590c					      REPEND
     14  590c		       44		      .byte.b	$40+(.LUM1/256)
     15  590d		       26		      .byte.b	$20+(.LUM2/256)
     16  590e		       98		      .byte.b	$90+(.LUM3/256)
     17  590f
     18  590f
     19  590f
     20  590f
     21  590f
     22  590f				   .LUM1      SET	.LUM1 + .STEP1
     23  590f				   .LUM2      SET	.LUM2 + .STEP2
     24  590f				   .LUM3      SET	.LUM3 + .STEP3
     13  590f					      REPEND
     14  590f		       44		      .byte.b	$40+(.LUM1/256)
     15  5910		       26		      .byte.b	$20+(.LUM2/256)
     16  5911		       98		      .byte.b	$90+(.LUM3/256)
     17  5912
     18  5912
     19  5912
     20  5912
     21  5912
     22  5912				   .LUM1      SET	.LUM1 + .STEP1
     23  5912				   .LUM2      SET	.LUM2 + .STEP2
     24  5912				   .LUM3      SET	.LUM3 + .STEP3
     13  5912					      REPEND
     14  5912		       44		      .byte.b	$40+(.LUM1/256)
     15  5913		       26		      .byte.b	$20+(.LUM2/256)
     16  5914		       98		      .byte.b	$90+(.LUM3/256)
     17  5915
     18  5915
     19  5915
     20  5915
     21  5915
     22  5915				   .LUM1      SET	.LUM1 + .STEP1
     23  5915				   .LUM2      SET	.LUM2 + .STEP2
     24  5915				   .LUM3      SET	.LUM3 + .STEP3
     13  5915					      REPEND
     14  5915		       44		      .byte.b	$40+(.LUM1/256)
     15  5916		       26		      .byte.b	$20+(.LUM2/256)
     16  5917		       98		      .byte.b	$90+(.LUM3/256)
     17  5918
     18  5918
     19  5918
     20  5918
     21  5918
     22  5918				   .LUM1      SET	.LUM1 + .STEP1
     23  5918				   .LUM2      SET	.LUM2 + .STEP2
     24  5918				   .LUM3      SET	.LUM3 + .STEP3
     13  5918					      REPEND
     14  5918		       44		      .byte.b	$40+(.LUM1/256)
     15  5919		       26		      .byte.b	$20+(.LUM2/256)
     16  591a		       98		      .byte.b	$90+(.LUM3/256)
     17  591b
     18  591b
     19  591b
     20  591b
     21  591b
     22  591b				   .LUM1      SET	.LUM1 + .STEP1
     23  591b				   .LUM2      SET	.LUM2 + .STEP2
     24  591b				   .LUM3      SET	.LUM3 + .STEP3
     13  591b					      REPEND
     14  591b		       44		      .byte.b	$40+(.LUM1/256)
     15  591c		       26		      .byte.b	$20+(.LUM2/256)
     16  591d		       98		      .byte.b	$90+(.LUM3/256)
     17  591e
     18  591e
     19  591e
     20  591e
     21  591e
     22  591e				   .LUM1      SET	.LUM1 + .STEP1
     23  591e				   .LUM2      SET	.LUM2 + .STEP2
     24  591e				   .LUM3      SET	.LUM3 + .STEP3
     13  591e					      REPEND
     14  591e		       44		      .byte.b	$40+(.LUM1/256)
     15  591f		       26		      .byte.b	$20+(.LUM2/256)
     16  5920		       98		      .byte.b	$90+(.LUM3/256)
     17  5921
     18  5921
     19  5921
     20  5921
     21  5921
     22  5921				   .LUM1      SET	.LUM1 + .STEP1
     23  5921				   .LUM2      SET	.LUM2 + .STEP2
     24  5921				   .LUM3      SET	.LUM3 + .STEP3
     13  5921					      REPEND
     14  5921		       44		      .byte.b	$40+(.LUM1/256)
     15  5922		       26		      .byte.b	$20+(.LUM2/256)
     16  5923		       98		      .byte.b	$90+(.LUM3/256)
     17  5924
     18  5924
     19  5924
     20  5924
     21  5924
     22  5924				   .LUM1      SET	.LUM1 + .STEP1
     23  5924				   .LUM2      SET	.LUM2 + .STEP2
     24  5924				   .LUM3      SET	.LUM3 + .STEP3
     13  5924					      REPEND
     14  5924		       44		      .byte.b	$40+(.LUM1/256)
     15  5925		       26		      .byte.b	$20+(.LUM2/256)
     16  5926		       98		      .byte.b	$90+(.LUM3/256)
     17  5927
     18  5927
     19  5927
     20  5927
     21  5927
     22  5927				   .LUM1      SET	.LUM1 + .STEP1
     23  5927				   .LUM2      SET	.LUM2 + .STEP2
     24  5927				   .LUM3      SET	.LUM3 + .STEP3
     13  5927					      REPEND
     14  5927		       44		      .byte.b	$40+(.LUM1/256)
     15  5928		       26		      .byte.b	$20+(.LUM2/256)
     16  5929		       98		      .byte.b	$90+(.LUM3/256)
     17  592a
     18  592a
     19  592a
     20  592a
     21  592a
     22  592a				   .LUM1      SET	.LUM1 + .STEP1
     23  592a				   .LUM2      SET	.LUM2 + .STEP2
     24  592a				   .LUM3      SET	.LUM3 + .STEP3
     13  592a					      REPEND
     14  592a		       44		      .byte.b	$40+(.LUM1/256)
     15  592b		       26		      .byte.b	$20+(.LUM2/256)
     16  592c		       98		      .byte.b	$90+(.LUM3/256)
     17  592d
     18  592d
     19  592d
     20  592d
     21  592d
     22  592d				   .LUM1      SET	.LUM1 + .STEP1
     23  592d				   .LUM2      SET	.LUM2 + .STEP2
     24  592d				   .LUM3      SET	.LUM3 + .STEP3
     13  592d					      REPEND
     14  592d		       44		      .byte.b	$40+(.LUM1/256)
     15  592e		       26		      .byte.b	$20+(.LUM2/256)
     16  592f		       98		      .byte.b	$90+(.LUM3/256)
     17  5930
     18  5930
     19  5930
     20  5930
     21  5930
     22  5930				   .LUM1      SET	.LUM1 + .STEP1
     23  5930				   .LUM2      SET	.LUM2 + .STEP2
     24  5930				   .LUM3      SET	.LUM3 + .STEP3
     13  5930					      REPEND
     14  5930		       44		      .byte.b	$40+(.LUM1/256)
     15  5931		       26		      .byte.b	$20+(.LUM2/256)
     16  5932		       98		      .byte.b	$90+(.LUM3/256)
     17  5933
     18  5933
     19  5933
     20  5933
     21  5933
     22  5933				   .LUM1      SET	.LUM1 + .STEP1
     23  5933				   .LUM2      SET	.LUM2 + .STEP2
     24  5933				   .LUM3      SET	.LUM3 + .STEP3
     13  5933					      REPEND
     14  5933		       44		      .byte.b	$40+(.LUM1/256)
     15  5934		       26		      .byte.b	$20+(.LUM2/256)
     16  5935		       98		      .byte.b	$90+(.LUM3/256)
     17  5936
     18  5936
     19  5936
     20  5936
     21  5936
     22  5936				   .LUM1      SET	.LUM1 + .STEP1
     23  5936				   .LUM2      SET	.LUM2 + .STEP2
     24  5936				   .LUM3      SET	.LUM3 + .STEP3
     13  5936					      REPEND
     14  5936		       44		      .byte.b	$40+(.LUM1/256)
     15  5937		       26		      .byte.b	$20+(.LUM2/256)
     16  5938		       98		      .byte.b	$90+(.LUM3/256)
     17  5939
     18  5939
     19  5939
     20  5939
     21  5939
     22  5939				   .LUM1      SET	.LUM1 + .STEP1
     23  5939				   .LUM2      SET	.LUM2 + .STEP2
     24  5939				   .LUM3      SET	.LUM3 + .STEP3
     13  5939					      REPEND
     14  5939		       44		      .byte.b	$40+(.LUM1/256)
     15  593a		       26		      .byte.b	$20+(.LUM2/256)
     16  593b		       98		      .byte.b	$90+(.LUM3/256)
     17  593c
     18  593c
     19  593c
     20  593c
     21  593c
     22  593c				   .LUM1      SET	.LUM1 + .STEP1
     23  593c				   .LUM2      SET	.LUM2 + .STEP2
     24  593c				   .LUM3      SET	.LUM3 + .STEP3
     13  593c					      REPEND
     14  593c		       44		      .byte.b	$40+(.LUM1/256)
     15  593d		       26		      .byte.b	$20+(.LUM2/256)
     16  593e		       98		      .byte.b	$90+(.LUM3/256)
     17  593f
     18  593f
     19  593f
     20  593f
     21  593f
     22  593f				   .LUM1      SET	.LUM1 + .STEP1
     23  593f				   .LUM2      SET	.LUM2 + .STEP2
     24  593f				   .LUM3      SET	.LUM3 + .STEP3
     13  593f					      REPEND
     14  593f		       44		      .byte.b	$40+(.LUM1/256)
     15  5940		       26		      .byte.b	$20+(.LUM2/256)
     16  5941		       98		      .byte.b	$90+(.LUM3/256)
     17  5942
     18  5942
     19  5942
     20  5942
     21  5942
     22  5942				   .LUM1      SET	.LUM1 + .STEP1
     23  5942				   .LUM2      SET	.LUM2 + .STEP2
     24  5942				   .LUM3      SET	.LUM3 + .STEP3
     13  5942					      REPEND
     14  5942		       44		      .byte.b	$40+(.LUM1/256)
     15  5943		       26		      .byte.b	$20+(.LUM2/256)
     16  5944		       98		      .byte.b	$90+(.LUM3/256)
     17  5945
     18  5945
     19  5945
     20  5945
     21  5945
     22  5945				   .LUM1      SET	.LUM1 + .STEP1
     23  5945				   .LUM2      SET	.LUM2 + .STEP2
     24  5945				   .LUM3      SET	.LUM3 + .STEP3
     13  5945					      REPEND
     14  5945		       44		      .byte.b	$40+(.LUM1/256)
     15  5946		       26		      .byte.b	$20+(.LUM2/256)
     16  5947		       98		      .byte.b	$90+(.LUM3/256)
     17  5948
     18  5948
     19  5948
     20  5948
     21  5948
     22  5948				   .LUM1      SET	.LUM1 + .STEP1
     23  5948				   .LUM2      SET	.LUM2 + .STEP2
     24  5948				   .LUM3      SET	.LUM3 + .STEP3
     13  5948					      REPEND
     14  5948		       44		      .byte.b	$40+(.LUM1/256)
     15  5949		       26		      .byte.b	$20+(.LUM2/256)
     16  594a		       98		      .byte.b	$90+(.LUM3/256)
     17  594b
     18  594b
     19  594b
     20  594b
     21  594b
     22  594b				   .LUM1      SET	.LUM1 + .STEP1
     23  594b				   .LUM2      SET	.LUM2 + .STEP2
     24  594b				   .LUM3      SET	.LUM3 + .STEP3
     13  594b					      REPEND
     14  594b		       44		      .byte.b	$40+(.LUM1/256)
     15  594c		       26		      .byte.b	$20+(.LUM2/256)
     16  594d		       98		      .byte.b	$90+(.LUM3/256)
     17  594e
     18  594e
     19  594e
     20  594e
     21  594e
     22  594e				   .LUM1      SET	.LUM1 + .STEP1
     23  594e				   .LUM2      SET	.LUM2 + .STEP2
     24  594e				   .LUM3      SET	.LUM3 + .STEP3
     13  594e					      REPEND
     14  594e		       44		      .byte.b	$40+(.LUM1/256)
     15  594f		       26		      .byte.b	$20+(.LUM2/256)
     16  5950		       98		      .byte.b	$90+(.LUM3/256)
     17  5951
     18  5951
     19  5951
     20  5951
     21  5951
     22  5951				   .LUM1      SET	.LUM1 + .STEP1
     23  5951				   .LUM2      SET	.LUM2 + .STEP2
     24  5951				   .LUM3      SET	.LUM3 + .STEP3
     13  5951					      REPEND
     14  5951		       44		      .byte.b	$40+(.LUM1/256)
     15  5952		       26		      .byte.b	$20+(.LUM2/256)
     16  5953		       98		      .byte.b	$90+(.LUM3/256)
     17  5954
     18  5954
     19  5954
     20  5954
     21  5954
     22  5954				   .LUM1      SET	.LUM1 + .STEP1
     23  5954				   .LUM2      SET	.LUM2 + .STEP2
     24  5954				   .LUM3      SET	.LUM3 + .STEP3
     13  5954					      REPEND
     14  5954		       44		      .byte.b	$40+(.LUM1/256)
     15  5955		       26		      .byte.b	$20+(.LUM2/256)
     16  5956		       98		      .byte.b	$90+(.LUM3/256)
     17  5957
     18  5957
     19  5957
     20  5957
     21  5957
     22  5957				   .LUM1      SET	.LUM1 + .STEP1
     23  5957				   .LUM2      SET	.LUM2 + .STEP2
     24  5957				   .LUM3      SET	.LUM3 + .STEP3
     13  5957					      REPEND
     14  5957		       44		      .byte.b	$40+(.LUM1/256)
     15  5958		       26		      .byte.b	$20+(.LUM2/256)
     16  5959		       98		      .byte.b	$90+(.LUM3/256)
     17  595a
     18  595a
     19  595a
     20  595a
     21  595a
     22  595a				   .LUM1      SET	.LUM1 + .STEP1
     23  595a				   .LUM2      SET	.LUM2 + .STEP2
     24  595a				   .LUM3      SET	.LUM3 + .STEP3
     13  595a					      REPEND
     14  595a		       44		      .byte.b	$40+(.LUM1/256)
     15  595b		       26		      .byte.b	$20+(.LUM2/256)
     16  595c		       98		      .byte.b	$90+(.LUM3/256)
     17  595d
     18  595d
     19  595d
     20  595d
     21  595d
     22  595d				   .LUM1      SET	.LUM1 + .STEP1
     23  595d				   .LUM2      SET	.LUM2 + .STEP2
     24  595d				   .LUM3      SET	.LUM3 + .STEP3
     13  595d					      REPEND
     14  595d		       44		      .byte.b	$40+(.LUM1/256)
     15  595e		       26		      .byte.b	$20+(.LUM2/256)
     16  595f		       98		      .byte.b	$90+(.LUM3/256)
     17  5960
     18  5960
     19  5960
     20  5960
     21  5960
     22  5960				   .LUM1      SET	.LUM1 + .STEP1
     23  5960				   .LUM2      SET	.LUM2 + .STEP2
     24  5960				   .LUM3      SET	.LUM3 + .STEP3
     13  5960					      REPEND
     14  5960		       44		      .byte.b	$40+(.LUM1/256)
     15  5961		       26		      .byte.b	$20+(.LUM2/256)
     16  5962		       98		      .byte.b	$90+(.LUM3/256)
     17  5963
     18  5963
     19  5963
     20  5963
     21  5963
     22  5963				   .LUM1      SET	.LUM1 + .STEP1
     23  5963				   .LUM2      SET	.LUM2 + .STEP2
     24  5963				   .LUM3      SET	.LUM3 + .STEP3
     13  5963					      REPEND
     14  5963		       44		      .byte.b	$40+(.LUM1/256)
     15  5964		       26		      .byte.b	$20+(.LUM2/256)
     16  5965		       98		      .byte.b	$90+(.LUM3/256)
     17  5966
     18  5966
     19  5966
     20  5966
     21  5966
     22  5966				   .LUM1      SET	.LUM1 + .STEP1
     23  5966				   .LUM2      SET	.LUM2 + .STEP2
     24  5966				   .LUM3      SET	.LUM3 + .STEP3
     13  5966					      REPEND
     14  5966		       44		      .byte.b	$40+(.LUM1/256)
     15  5967		       26		      .byte.b	$20+(.LUM2/256)
     16  5968		       98		      .byte.b	$90+(.LUM3/256)
     17  5969
     18  5969
     19  5969
     20  5969
     21  5969
     22  5969				   .LUM1      SET	.LUM1 + .STEP1
     23  5969				   .LUM2      SET	.LUM2 + .STEP2
     24  5969				   .LUM3      SET	.LUM3 + .STEP3
     13  5969					      REPEND
     14  5969		       44		      .byte.b	$40+(.LUM1/256)
     15  596a		       26		      .byte.b	$20+(.LUM2/256)
     16  596b		       98		      .byte.b	$90+(.LUM3/256)
     17  596c
     18  596c
     19  596c
     20  596c
     21  596c
     22  596c				   .LUM1      SET	.LUM1 + .STEP1
     23  596c				   .LUM2      SET	.LUM2 + .STEP2
     24  596c				   .LUM3      SET	.LUM3 + .STEP3
     13  596c					      REPEND
     14  596c		       44		      .byte.b	$40+(.LUM1/256)
     15  596d		       26		      .byte.b	$20+(.LUM2/256)
     16  596e		       98		      .byte.b	$90+(.LUM3/256)
     17  596f
     18  596f
     19  596f
     20  596f
     21  596f
     22  596f				   .LUM1      SET	.LUM1 + .STEP1
     23  596f				   .LUM2      SET	.LUM2 + .STEP2
     24  596f				   .LUM3      SET	.LUM3 + .STEP3
     13  596f					      REPEND
     14  596f		       44		      .byte.b	$40+(.LUM1/256)
     15  5970		       26		      .byte.b	$20+(.LUM2/256)
     16  5971		       98		      .byte.b	$90+(.LUM3/256)
     17  5972
     18  5972
     19  5972
     20  5972
     21  5972
     22  5972				   .LUM1      SET	.LUM1 + .STEP1
     23  5972				   .LUM2      SET	.LUM2 + .STEP2
     24  5972				   .LUM3      SET	.LUM3 + .STEP3
     13  5972					      REPEND
     14  5972		       44		      .byte.b	$40+(.LUM1/256)
     15  5973		       26		      .byte.b	$20+(.LUM2/256)
     16  5974		       98		      .byte.b	$90+(.LUM3/256)
     17  5975
     18  5975
     19  5975
     20  5975
     21  5975
     22  5975				   .LUM1      SET	.LUM1 + .STEP1
     23  5975				   .LUM2      SET	.LUM2 + .STEP2
     24  5975				   .LUM3      SET	.LUM3 + .STEP3
     13  5975					      REPEND
     14  5975		       44		      .byte.b	$40+(.LUM1/256)
     15  5976		       26		      .byte.b	$20+(.LUM2/256)
     16  5977		       98		      .byte.b	$90+(.LUM3/256)
     17  5978
     18  5978
     19  5978
     20  5978
     21  5978
     22  5978				   .LUM1      SET	.LUM1 + .STEP1
     23  5978				   .LUM2      SET	.LUM2 + .STEP2
     24  5978				   .LUM3      SET	.LUM3 + .STEP3
     13  5978					      REPEND
     14  5978		       44		      .byte.b	$40+(.LUM1/256)
     15  5979		       26		      .byte.b	$20+(.LUM2/256)
     16  597a		       98		      .byte.b	$90+(.LUM3/256)
     17  597b
     18  597b
     19  597b
     20  597b
     21  597b
     22  597b				   .LUM1      SET	.LUM1 + .STEP1
     23  597b				   .LUM2      SET	.LUM2 + .STEP2
     24  597b				   .LUM3      SET	.LUM3 + .STEP3
     13  597b					      REPEND
     14  597b		       44		      .byte.b	$40+(.LUM1/256)
     15  597c		       26		      .byte.b	$20+(.LUM2/256)
     16  597d		       98		      .byte.b	$90+(.LUM3/256)
     17  597e
     18  597e
     19  597e
     20  597e
     21  597e
     22  597e				   .LUM1      SET	.LUM1 + .STEP1
     23  597e				   .LUM2      SET	.LUM2 + .STEP2
     24  597e				   .LUM3      SET	.LUM3 + .STEP3
     13  597e					      REPEND
     14  597e		       44		      .byte.b	$40+(.LUM1/256)
     15  597f		       26		      .byte.b	$20+(.LUM2/256)
     16  5980		       98		      .byte.b	$90+(.LUM3/256)
     17  5981
     18  5981
     19  5981
     20  5981
     21  5981
     22  5981				   .LUM1      SET	.LUM1 + .STEP1
     23  5981				   .LUM2      SET	.LUM2 + .STEP2
     24  5981				   .LUM3      SET	.LUM3 + .STEP3
     13  5981					      REPEND
     14  5981		       44		      .byte.b	$40+(.LUM1/256)
     15  5982		       26		      .byte.b	$20+(.LUM2/256)
     16  5983		       98		      .byte.b	$90+(.LUM3/256)
     17  5984
     18  5984
     19  5984
     20  5984
     21  5984
     22  5984				   .LUM1      SET	.LUM1 + .STEP1
     23  5984				   .LUM2      SET	.LUM2 + .STEP2
     24  5984				   .LUM3      SET	.LUM3 + .STEP3
     13  5984					      REPEND
     14  5984		       44		      .byte.b	$40+(.LUM1/256)
     15  5985		       26		      .byte.b	$20+(.LUM2/256)
     16  5986		       98		      .byte.b	$90+(.LUM3/256)
     17  5987
     18  5987
     19  5987
     20  5987
     21  5987
     22  5987				   .LUM1      SET	.LUM1 + .STEP1
     23  5987				   .LUM2      SET	.LUM2 + .STEP2
     24  5987				   .LUM3      SET	.LUM3 + .STEP3
     13  5987					      REPEND
     14  5987		       44		      .byte.b	$40+(.LUM1/256)
     15  5988		       26		      .byte.b	$20+(.LUM2/256)
     16  5989		       98		      .byte.b	$90+(.LUM3/256)
     17  598a
     18  598a
     19  598a
     20  598a
     21  598a
     22  598a				   .LUM1      SET	.LUM1 + .STEP1
     23  598a				   .LUM2      SET	.LUM2 + .STEP2
     24  598a				   .LUM3      SET	.LUM3 + .STEP3
     13  598a					      REPEND
     14  598a		       44		      .byte.b	$40+(.LUM1/256)
     15  598b		       26		      .byte.b	$20+(.LUM2/256)
     16  598c		       98		      .byte.b	$90+(.LUM3/256)
     17  598d
     18  598d
     19  598d
     20  598d
     21  598d
     22  598d				   .LUM1      SET	.LUM1 + .STEP1
     23  598d				   .LUM2      SET	.LUM2 + .STEP2
     24  598d				   .LUM3      SET	.LUM3 + .STEP3
     13  598d					      REPEND
     14  598d		       44		      .byte.b	$40+(.LUM1/256)
     15  598e		       26		      .byte.b	$20+(.LUM2/256)
     16  598f		       98		      .byte.b	$90+(.LUM3/256)
     17  5990
     18  5990
     19  5990
     20  5990
     21  5990
     22  5990				   .LUM1      SET	.LUM1 + .STEP1
     23  5990				   .LUM2      SET	.LUM2 + .STEP2
     24  5990				   .LUM3      SET	.LUM3 + .STEP3
     13  5990					      REPEND
     14  5990		       44		      .byte.b	$40+(.LUM1/256)
     15  5991		       26		      .byte.b	$20+(.LUM2/256)
     16  5992		       98		      .byte.b	$90+(.LUM3/256)
     17  5993
     18  5993
     19  5993
     20  5993
     21  5993
     22  5993				   .LUM1      SET	.LUM1 + .STEP1
     23  5993				   .LUM2      SET	.LUM2 + .STEP2
     24  5993				   .LUM3      SET	.LUM3 + .STEP3
     13  5993					      REPEND
     14  5993		       44		      .byte.b	$40+(.LUM1/256)
     15  5994		       26		      .byte.b	$20+(.LUM2/256)
     16  5995		       98		      .byte.b	$90+(.LUM3/256)
     17  5996
     18  5996
     19  5996
     20  5996
     21  5996
     22  5996				   .LUM1      SET	.LUM1 + .STEP1
     23  5996				   .LUM2      SET	.LUM2 + .STEP2
     24  5996				   .LUM3      SET	.LUM3 + .STEP3
     13  5996					      REPEND
     14  5996		       44		      .byte.b	$40+(.LUM1/256)
     15  5997		       26		      .byte.b	$20+(.LUM2/256)
     16  5998		       98		      .byte.b	$90+(.LUM3/256)
     17  5999
     18  5999
     19  5999
     20  5999
     21  5999
     22  5999				   .LUM1      SET	.LUM1 + .STEP1
     23  5999				   .LUM2      SET	.LUM2 + .STEP2
     24  5999				   .LUM3      SET	.LUM3 + .STEP3
     13  5999					      REPEND
     14  5999		       44		      .byte.b	$40+(.LUM1/256)
     15  599a		       26		      .byte.b	$20+(.LUM2/256)
     16  599b		       98		      .byte.b	$90+(.LUM3/256)
     17  599c
     18  599c
     19  599c
     20  599c
     21  599c
     22  599c				   .LUM1      SET	.LUM1 + .STEP1
     23  599c				   .LUM2      SET	.LUM2 + .STEP2
     24  599c				   .LUM3      SET	.LUM3 + .STEP3
     13  599c					      REPEND
     14  599c		       44		      .byte.b	$40+(.LUM1/256)
     15  599d		       26		      .byte.b	$20+(.LUM2/256)
     16  599e		       98		      .byte.b	$90+(.LUM3/256)
     17  599f
     18  599f
     19  599f
     20  599f
     21  599f
     22  599f				   .LUM1      SET	.LUM1 + .STEP1
     23  599f				   .LUM2      SET	.LUM2 + .STEP2
     24  599f				   .LUM3      SET	.LUM3 + .STEP3
     13  599f					      REPEND
     14  599f		       44		      .byte.b	$40+(.LUM1/256)
     15  59a0		       26		      .byte.b	$20+(.LUM2/256)
     16  59a1		       98		      .byte.b	$90+(.LUM3/256)
     17  59a2
     18  59a2
     19  59a2
     20  59a2
     21  59a2
     22  59a2				   .LUM1      SET	.LUM1 + .STEP1
     23  59a2				   .LUM2      SET	.LUM2 + .STEP2
     24  59a2				   .LUM3      SET	.LUM3 + .STEP3
     13  59a2					      REPEND
     14  59a2		       44		      .byte.b	$40+(.LUM1/256)
     15  59a3		       26		      .byte.b	$20+(.LUM2/256)
     16  59a4		       98		      .byte.b	$90+(.LUM3/256)
     17  59a5
     18  59a5
     19  59a5
     20  59a5
     21  59a5
     22  59a5				   .LUM1      SET	.LUM1 + .STEP1
     23  59a5				   .LUM2      SET	.LUM2 + .STEP2
     24  59a5				   .LUM3      SET	.LUM3 + .STEP3
     13  59a5					      REPEND
     14  59a5		       44		      .byte.b	$40+(.LUM1/256)
     15  59a6		       26		      .byte.b	$20+(.LUM2/256)
     16  59a7		       98		      .byte.b	$90+(.LUM3/256)
     17  59a8
     18  59a8
     19  59a8
     20  59a8
     21  59a8
     22  59a8				   .LUM1      SET	.LUM1 + .STEP1
     23  59a8				   .LUM2      SET	.LUM2 + .STEP2
     24  59a8				   .LUM3      SET	.LUM3 + .STEP3
     13  59a8					      REPEND
     14  59a8		       44		      .byte.b	$40+(.LUM1/256)
     15  59a9		       26		      .byte.b	$20+(.LUM2/256)
     16  59aa		       98		      .byte.b	$90+(.LUM3/256)
     17  59ab
     18  59ab
     19  59ab
     20  59ab
     21  59ab
     22  59ab				   .LUM1      SET	.LUM1 + .STEP1
     23  59ab				   .LUM2      SET	.LUM2 + .STEP2
     24  59ab				   .LUM3      SET	.LUM3 + .STEP3
     13  59ab					      REPEND
     14  59ab		       44		      .byte.b	$40+(.LUM1/256)
     15  59ac		       26		      .byte.b	$20+(.LUM2/256)
     16  59ad		       98		      .byte.b	$90+(.LUM3/256)
     17  59ae
     18  59ae
     19  59ae
     20  59ae
     21  59ae
     22  59ae				   .LUM1      SET	.LUM1 + .STEP1
     23  59ae				   .LUM2      SET	.LUM2 + .STEP2
     24  59ae				   .LUM3      SET	.LUM3 + .STEP3
     13  59ae					      REPEND
     14  59ae		       44		      .byte.b	$40+(.LUM1/256)
     15  59af		       26		      .byte.b	$20+(.LUM2/256)
     16  59b0		       98		      .byte.b	$90+(.LUM3/256)
     17  59b1
     18  59b1
     19  59b1
     20  59b1
     21  59b1
     22  59b1				   .LUM1      SET	.LUM1 + .STEP1
     23  59b1				   .LUM2      SET	.LUM2 + .STEP2
     24  59b1				   .LUM3      SET	.LUM3 + .STEP3
     13  59b1					      REPEND
     14  59b1		       44		      .byte.b	$40+(.LUM1/256)
     15  59b2		       26		      .byte.b	$20+(.LUM2/256)
     16  59b3		       98		      .byte.b	$90+(.LUM3/256)
     17  59b4
     18  59b4
     19  59b4
     20  59b4
     21  59b4
     22  59b4				   .LUM1      SET	.LUM1 + .STEP1
     23  59b4				   .LUM2      SET	.LUM2 + .STEP2
     24  59b4				   .LUM3      SET	.LUM3 + .STEP3
     13  59b4					      REPEND
     14  59b4		       44		      .byte.b	$40+(.LUM1/256)
     15  59b5		       26		      .byte.b	$20+(.LUM2/256)
     16  59b6		       98		      .byte.b	$90+(.LUM3/256)
     17  59b7
     18  59b7
     19  59b7
     20  59b7
     21  59b7
     22  59b7				   .LUM1      SET	.LUM1 + .STEP1
     23  59b7				   .LUM2      SET	.LUM2 + .STEP2
     24  59b7				   .LUM3      SET	.LUM3 + .STEP3
     13  59b7					      REPEND
     14  59b7		       44		      .byte.b	$40+(.LUM1/256)
     15  59b8		       26		      .byte.b	$20+(.LUM2/256)
     16  59b9		       98		      .byte.b	$90+(.LUM3/256)
     17  59ba
     18  59ba
     19  59ba
     20  59ba
     21  59ba
     22  59ba				   .LUM1      SET	.LUM1 + .STEP1
     23  59ba				   .LUM2      SET	.LUM2 + .STEP2
     24  59ba				   .LUM3      SET	.LUM3 + .STEP3
     13  59ba					      REPEND
     14  59ba		       44		      .byte.b	$40+(.LUM1/256)
     15  59bb		       26		      .byte.b	$20+(.LUM2/256)
     16  59bc		       98		      .byte.b	$90+(.LUM3/256)
     17  59bd
     18  59bd
     19  59bd
     20  59bd
     21  59bd
     22  59bd				   .LUM1      SET	.LUM1 + .STEP1
     23  59bd				   .LUM2      SET	.LUM2 + .STEP2
     24  59bd				   .LUM3      SET	.LUM3 + .STEP3
     13  59bd					      REPEND
     14  59bd		       44		      .byte.b	$40+(.LUM1/256)
     15  59be		       26		      .byte.b	$20+(.LUM2/256)
     16  59bf		       98		      .byte.b	$90+(.LUM3/256)
     17  59c0
     18  59c0
     19  59c0
     20  59c0
     21  59c0
     22  59c0				   .LUM1      SET	.LUM1 + .STEP1
     23  59c0				   .LUM2      SET	.LUM2 + .STEP2
     24  59c0				   .LUM3      SET	.LUM3 + .STEP3
     13  59c0					      REPEND
     14  59c0		       44		      .byte.b	$40+(.LUM1/256)
     15  59c1		       26		      .byte.b	$20+(.LUM2/256)
     16  59c2		       98		      .byte.b	$90+(.LUM3/256)
     17  59c3
     18  59c3
     19  59c3
     20  59c3
     21  59c3
     22  59c3				   .LUM1      SET	.LUM1 + .STEP1
     23  59c3				   .LUM2      SET	.LUM2 + .STEP2
     24  59c3				   .LUM3      SET	.LUM3 + .STEP3
     13  59c3					      REPEND
     14  59c3		       44		      .byte.b	$40+(.LUM1/256)
     15  59c4		       26		      .byte.b	$20+(.LUM2/256)
     16  59c5		       98		      .byte.b	$90+(.LUM3/256)
     17  59c6
     18  59c6
     19  59c6
     20  59c6
     21  59c6
     22  59c6				   .LUM1      SET	.LUM1 + .STEP1
     23  59c6				   .LUM2      SET	.LUM2 + .STEP2
     24  59c6				   .LUM3      SET	.LUM3 + .STEP3
     13  59c6					      REPEND
     14  59c6		       44		      .byte.b	$40+(.LUM1/256)
     15  59c7		       26		      .byte.b	$20+(.LUM2/256)
     16  59c8		       98		      .byte.b	$90+(.LUM3/256)
     17  59c9
     18  59c9
     19  59c9
     20  59c9
     21  59c9
     22  59c9				   .LUM1      SET	.LUM1 + .STEP1
     23  59c9				   .LUM2      SET	.LUM2 + .STEP2
     24  59c9				   .LUM3      SET	.LUM3 + .STEP3
     13  59c9					      REPEND
     14  59c9		       44		      .byte.b	$40+(.LUM1/256)
     15  59ca		       26		      .byte.b	$20+(.LUM2/256)
     16  59cb		       98		      .byte.b	$90+(.LUM3/256)
     17  59cc
     18  59cc
     19  59cc
     20  59cc
     21  59cc
     22  59cc				   .LUM1      SET	.LUM1 + .STEP1
     23  59cc				   .LUM2      SET	.LUM2 + .STEP2
     24  59cc				   .LUM3      SET	.LUM3 + .STEP3
     13  59cc					      REPEND
     14  59cc		       44		      .byte.b	$40+(.LUM1/256)
     15  59cd		       26		      .byte.b	$20+(.LUM2/256)
     16  59ce		       98		      .byte.b	$90+(.LUM3/256)
     17  59cf
     18  59cf
     19  59cf
     20  59cf
     21  59cf
     22  59cf				   .LUM1      SET	.LUM1 + .STEP1
     23  59cf				   .LUM2      SET	.LUM2 + .STEP2
     24  59cf				   .LUM3      SET	.LUM3 + .STEP3
     13  59cf					      REPEND
     14  59cf		       44		      .byte.b	$40+(.LUM1/256)
     15  59d0		       26		      .byte.b	$20+(.LUM2/256)
     16  59d1		       98		      .byte.b	$90+(.LUM3/256)
     17  59d2
     18  59d2
     19  59d2
     20  59d2
     21  59d2
     22  59d2				   .LUM1      SET	.LUM1 + .STEP1
     23  59d2				   .LUM2      SET	.LUM2 + .STEP2
     24  59d2				   .LUM3      SET	.LUM3 + .STEP3
     13  59d2					      REPEND
     14  59d2		       44		      .byte.b	$40+(.LUM1/256)
     15  59d3		       26		      .byte.b	$20+(.LUM2/256)
     16  59d4		       98		      .byte.b	$90+(.LUM3/256)
     17  59d5
     18  59d5
     19  59d5
     20  59d5
     21  59d5
     22  59d5				   .LUM1      SET	.LUM1 + .STEP1
     23  59d5				   .LUM2      SET	.LUM2 + .STEP2
     24  59d5				   .LUM3      SET	.LUM3 + .STEP3
     13  59d5					      REPEND
     14  59d5		       44		      .byte.b	$40+(.LUM1/256)
     15  59d6		       26		      .byte.b	$20+(.LUM2/256)
     16  59d7		       98		      .byte.b	$90+(.LUM3/256)
     17  59d8
     18  59d8
     19  59d8
     20  59d8
     21  59d8
     22  59d8				   .LUM1      SET	.LUM1 + .STEP1
     23  59d8				   .LUM2      SET	.LUM2 + .STEP2
     24  59d8				   .LUM3      SET	.LUM3 + .STEP3
     25  59d8					      REPEND
    257  59d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    258  59d8
    259  59d8							;    ECHO "PAL LUMS"
    260  59d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  59d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  59d8
      2  59d8
      3  59d8
      4  59d8
      5  59d8				   .LUM1      SET	$6*256
      6  59d8				   .LUM2      SET	$4*256
      7  59d8				   .LUM3      SET	$8*256
      8  59d8
      9  59d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  59d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  59d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  59d8
     13  59d8					      REPEAT	72
     14  59d8		       66		      .byte.b	$60+(.LUM1/256)
     15  59d9		       84		      .byte.b	$80+(.LUM2/256)
     16  59da		       18		      .byte.b	$10+(.LUM3/256)
     17  59db
     18  59db
     19  59db
     20  59db
     21  59db
     22  59db				   .LUM1      SET	.LUM1 + .STEP1
     23  59db				   .LUM2      SET	.LUM2 + .STEP2
     24  59db				   .LUM3      SET	.LUM3 + .STEP3
     13  59db					      REPEND
     14  59db		       66		      .byte.b	$60+(.LUM1/256)
     15  59dc		       84		      .byte.b	$80+(.LUM2/256)
     16  59dd		       18		      .byte.b	$10+(.LUM3/256)
     17  59de
     18  59de
     19  59de
     20  59de
     21  59de
     22  59de				   .LUM1      SET	.LUM1 + .STEP1
     23  59de				   .LUM2      SET	.LUM2 + .STEP2
     24  59de				   .LUM3      SET	.LUM3 + .STEP3
     13  59de					      REPEND
     14  59de		       66		      .byte.b	$60+(.LUM1/256)
     15  59df		       84		      .byte.b	$80+(.LUM2/256)
     16  59e0		       18		      .byte.b	$10+(.LUM3/256)
     17  59e1
     18  59e1
     19  59e1
     20  59e1
     21  59e1
     22  59e1				   .LUM1      SET	.LUM1 + .STEP1
     23  59e1				   .LUM2      SET	.LUM2 + .STEP2
     24  59e1				   .LUM3      SET	.LUM3 + .STEP3
     13  59e1					      REPEND
     14  59e1		       66		      .byte.b	$60+(.LUM1/256)
     15  59e2		       84		      .byte.b	$80+(.LUM2/256)
     16  59e3		       18		      .byte.b	$10+(.LUM3/256)
     17  59e4
     18  59e4
     19  59e4
     20  59e4
     21  59e4
     22  59e4				   .LUM1      SET	.LUM1 + .STEP1
     23  59e4				   .LUM2      SET	.LUM2 + .STEP2
     24  59e4				   .LUM3      SET	.LUM3 + .STEP3
     13  59e4					      REPEND
     14  59e4		       66		      .byte.b	$60+(.LUM1/256)
     15  59e5		       84		      .byte.b	$80+(.LUM2/256)
     16  59e6		       18		      .byte.b	$10+(.LUM3/256)
     17  59e7
     18  59e7
     19  59e7
     20  59e7
     21  59e7
     22  59e7				   .LUM1      SET	.LUM1 + .STEP1
     23  59e7				   .LUM2      SET	.LUM2 + .STEP2
     24  59e7				   .LUM3      SET	.LUM3 + .STEP3
     13  59e7					      REPEND
     14  59e7		       66		      .byte.b	$60+(.LUM1/256)
     15  59e8		       84		      .byte.b	$80+(.LUM2/256)
     16  59e9		       18		      .byte.b	$10+(.LUM3/256)
     17  59ea
     18  59ea
     19  59ea
     20  59ea
     21  59ea
     22  59ea				   .LUM1      SET	.LUM1 + .STEP1
     23  59ea				   .LUM2      SET	.LUM2 + .STEP2
     24  59ea				   .LUM3      SET	.LUM3 + .STEP3
     13  59ea					      REPEND
     14  59ea		       66		      .byte.b	$60+(.LUM1/256)
     15  59eb		       84		      .byte.b	$80+(.LUM2/256)
     16  59ec		       18		      .byte.b	$10+(.LUM3/256)
     17  59ed
     18  59ed
     19  59ed
     20  59ed
     21  59ed
     22  59ed				   .LUM1      SET	.LUM1 + .STEP1
     23  59ed				   .LUM2      SET	.LUM2 + .STEP2
     24  59ed				   .LUM3      SET	.LUM3 + .STEP3
     13  59ed					      REPEND
     14  59ed		       66		      .byte.b	$60+(.LUM1/256)
     15  59ee		       84		      .byte.b	$80+(.LUM2/256)
     16  59ef		       18		      .byte.b	$10+(.LUM3/256)
     17  59f0
     18  59f0
     19  59f0
     20  59f0
     21  59f0
     22  59f0				   .LUM1      SET	.LUM1 + .STEP1
     23  59f0				   .LUM2      SET	.LUM2 + .STEP2
     24  59f0				   .LUM3      SET	.LUM3 + .STEP3
     13  59f0					      REPEND
     14  59f0		       66		      .byte.b	$60+(.LUM1/256)
     15  59f1		       84		      .byte.b	$80+(.LUM2/256)
     16  59f2		       18		      .byte.b	$10+(.LUM3/256)
     17  59f3
     18  59f3
     19  59f3
     20  59f3
     21  59f3
     22  59f3				   .LUM1      SET	.LUM1 + .STEP1
     23  59f3				   .LUM2      SET	.LUM2 + .STEP2
     24  59f3				   .LUM3      SET	.LUM3 + .STEP3
     13  59f3					      REPEND
     14  59f3		       66		      .byte.b	$60+(.LUM1/256)
     15  59f4		       84		      .byte.b	$80+(.LUM2/256)
     16  59f5		       18		      .byte.b	$10+(.LUM3/256)
     17  59f6
     18  59f6
     19  59f6
     20  59f6
     21  59f6
     22  59f6				   .LUM1      SET	.LUM1 + .STEP1
     23  59f6				   .LUM2      SET	.LUM2 + .STEP2
     24  59f6				   .LUM3      SET	.LUM3 + .STEP3
     13  59f6					      REPEND
     14  59f6		       66		      .byte.b	$60+(.LUM1/256)
     15  59f7		       84		      .byte.b	$80+(.LUM2/256)
     16  59f8		       18		      .byte.b	$10+(.LUM3/256)
     17  59f9
     18  59f9
     19  59f9
     20  59f9
     21  59f9
     22  59f9				   .LUM1      SET	.LUM1 + .STEP1
     23  59f9				   .LUM2      SET	.LUM2 + .STEP2
     24  59f9				   .LUM3      SET	.LUM3 + .STEP3
     13  59f9					      REPEND
     14  59f9		       66		      .byte.b	$60+(.LUM1/256)
     15  59fa		       84		      .byte.b	$80+(.LUM2/256)
     16  59fb		       18		      .byte.b	$10+(.LUM3/256)
     17  59fc
     18  59fc
     19  59fc
     20  59fc
     21  59fc
     22  59fc				   .LUM1      SET	.LUM1 + .STEP1
     23  59fc				   .LUM2      SET	.LUM2 + .STEP2
     24  59fc				   .LUM3      SET	.LUM3 + .STEP3
     13  59fc					      REPEND
     14  59fc		       66		      .byte.b	$60+(.LUM1/256)
     15  59fd		       84		      .byte.b	$80+(.LUM2/256)
     16  59fe		       18		      .byte.b	$10+(.LUM3/256)
     17  59ff
     18  59ff
     19  59ff
     20  59ff
     21  59ff
     22  59ff				   .LUM1      SET	.LUM1 + .STEP1
     23  59ff				   .LUM2      SET	.LUM2 + .STEP2
     24  59ff				   .LUM3      SET	.LUM3 + .STEP3
     13  59ff					      REPEND
     14  59ff		       66		      .byte.b	$60+(.LUM1/256)
     15  5a00		       84		      .byte.b	$80+(.LUM2/256)
     16  5a01		       18		      .byte.b	$10+(.LUM3/256)
     17  5a02
     18  5a02
     19  5a02
     20  5a02
     21  5a02
     22  5a02				   .LUM1      SET	.LUM1 + .STEP1
     23  5a02				   .LUM2      SET	.LUM2 + .STEP2
     24  5a02				   .LUM3      SET	.LUM3 + .STEP3
     13  5a02					      REPEND
     14  5a02		       66		      .byte.b	$60+(.LUM1/256)
     15  5a03		       84		      .byte.b	$80+(.LUM2/256)
     16  5a04		       18		      .byte.b	$10+(.LUM3/256)
     17  5a05
     18  5a05
     19  5a05
     20  5a05
     21  5a05
     22  5a05				   .LUM1      SET	.LUM1 + .STEP1
     23  5a05				   .LUM2      SET	.LUM2 + .STEP2
     24  5a05				   .LUM3      SET	.LUM3 + .STEP3
     13  5a05					      REPEND
     14  5a05		       66		      .byte.b	$60+(.LUM1/256)
     15  5a06		       84		      .byte.b	$80+(.LUM2/256)
     16  5a07		       18		      .byte.b	$10+(.LUM3/256)
     17  5a08
     18  5a08
     19  5a08
     20  5a08
     21  5a08
     22  5a08				   .LUM1      SET	.LUM1 + .STEP1
     23  5a08				   .LUM2      SET	.LUM2 + .STEP2
     24  5a08				   .LUM3      SET	.LUM3 + .STEP3
     13  5a08					      REPEND
     14  5a08		       66		      .byte.b	$60+(.LUM1/256)
     15  5a09		       84		      .byte.b	$80+(.LUM2/256)
     16  5a0a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a0b
     18  5a0b
     19  5a0b
     20  5a0b
     21  5a0b
     22  5a0b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a0b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a0b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a0b					      REPEND
     14  5a0b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a0c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a0d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a0e
     18  5a0e
     19  5a0e
     20  5a0e
     21  5a0e
     22  5a0e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a0e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a0e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a0e					      REPEND
     14  5a0e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a0f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a10		       18		      .byte.b	$10+(.LUM3/256)
     17  5a11
     18  5a11
     19  5a11
     20  5a11
     21  5a11
     22  5a11				   .LUM1      SET	.LUM1 + .STEP1
     23  5a11				   .LUM2      SET	.LUM2 + .STEP2
     24  5a11				   .LUM3      SET	.LUM3 + .STEP3
     13  5a11					      REPEND
     14  5a11		       66		      .byte.b	$60+(.LUM1/256)
     15  5a12		       84		      .byte.b	$80+(.LUM2/256)
     16  5a13		       18		      .byte.b	$10+(.LUM3/256)
     17  5a14
     18  5a14
     19  5a14
     20  5a14
     21  5a14
     22  5a14				   .LUM1      SET	.LUM1 + .STEP1
     23  5a14				   .LUM2      SET	.LUM2 + .STEP2
     24  5a14				   .LUM3      SET	.LUM3 + .STEP3
     13  5a14					      REPEND
     14  5a14		       66		      .byte.b	$60+(.LUM1/256)
     15  5a15		       84		      .byte.b	$80+(.LUM2/256)
     16  5a16		       18		      .byte.b	$10+(.LUM3/256)
     17  5a17
     18  5a17
     19  5a17
     20  5a17
     21  5a17
     22  5a17				   .LUM1      SET	.LUM1 + .STEP1
     23  5a17				   .LUM2      SET	.LUM2 + .STEP2
     24  5a17				   .LUM3      SET	.LUM3 + .STEP3
     13  5a17					      REPEND
     14  5a17		       66		      .byte.b	$60+(.LUM1/256)
     15  5a18		       84		      .byte.b	$80+(.LUM2/256)
     16  5a19		       18		      .byte.b	$10+(.LUM3/256)
     17  5a1a
     18  5a1a
     19  5a1a
     20  5a1a
     21  5a1a
     22  5a1a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a1a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a1a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a1a					      REPEND
     14  5a1a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a1b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a1c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a1d
     18  5a1d
     19  5a1d
     20  5a1d
     21  5a1d
     22  5a1d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a1d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a1d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a1d					      REPEND
     14  5a1d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a1e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a1f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a20
     18  5a20
     19  5a20
     20  5a20
     21  5a20
     22  5a20				   .LUM1      SET	.LUM1 + .STEP1
     23  5a20				   .LUM2      SET	.LUM2 + .STEP2
     24  5a20				   .LUM3      SET	.LUM3 + .STEP3
     13  5a20					      REPEND
     14  5a20		       66		      .byte.b	$60+(.LUM1/256)
     15  5a21		       84		      .byte.b	$80+(.LUM2/256)
     16  5a22		       18		      .byte.b	$10+(.LUM3/256)
     17  5a23
     18  5a23
     19  5a23
     20  5a23
     21  5a23
     22  5a23				   .LUM1      SET	.LUM1 + .STEP1
     23  5a23				   .LUM2      SET	.LUM2 + .STEP2
     24  5a23				   .LUM3      SET	.LUM3 + .STEP3
     13  5a23					      REPEND
     14  5a23		       66		      .byte.b	$60+(.LUM1/256)
     15  5a24		       84		      .byte.b	$80+(.LUM2/256)
     16  5a25		       18		      .byte.b	$10+(.LUM3/256)
     17  5a26
     18  5a26
     19  5a26
     20  5a26
     21  5a26
     22  5a26				   .LUM1      SET	.LUM1 + .STEP1
     23  5a26				   .LUM2      SET	.LUM2 + .STEP2
     24  5a26				   .LUM3      SET	.LUM3 + .STEP3
     13  5a26					      REPEND
     14  5a26		       66		      .byte.b	$60+(.LUM1/256)
     15  5a27		       84		      .byte.b	$80+(.LUM2/256)
     16  5a28		       18		      .byte.b	$10+(.LUM3/256)
     17  5a29
     18  5a29
     19  5a29
     20  5a29
     21  5a29
     22  5a29				   .LUM1      SET	.LUM1 + .STEP1
     23  5a29				   .LUM2      SET	.LUM2 + .STEP2
     24  5a29				   .LUM3      SET	.LUM3 + .STEP3
     13  5a29					      REPEND
     14  5a29		       66		      .byte.b	$60+(.LUM1/256)
     15  5a2a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a2b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a2c
     18  5a2c
     19  5a2c
     20  5a2c
     21  5a2c
     22  5a2c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a2c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a2c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a2c					      REPEND
     14  5a2c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a2d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a2e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a2f
     18  5a2f
     19  5a2f
     20  5a2f
     21  5a2f
     22  5a2f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a2f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a2f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a2f					      REPEND
     14  5a2f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a30		       84		      .byte.b	$80+(.LUM2/256)
     16  5a31		       18		      .byte.b	$10+(.LUM3/256)
     17  5a32
     18  5a32
     19  5a32
     20  5a32
     21  5a32
     22  5a32				   .LUM1      SET	.LUM1 + .STEP1
     23  5a32				   .LUM2      SET	.LUM2 + .STEP2
     24  5a32				   .LUM3      SET	.LUM3 + .STEP3
     13  5a32					      REPEND
     14  5a32		       66		      .byte.b	$60+(.LUM1/256)
     15  5a33		       84		      .byte.b	$80+(.LUM2/256)
     16  5a34		       18		      .byte.b	$10+(.LUM3/256)
     17  5a35
     18  5a35
     19  5a35
     20  5a35
     21  5a35
     22  5a35				   .LUM1      SET	.LUM1 + .STEP1
     23  5a35				   .LUM2      SET	.LUM2 + .STEP2
     24  5a35				   .LUM3      SET	.LUM3 + .STEP3
     13  5a35					      REPEND
     14  5a35		       66		      .byte.b	$60+(.LUM1/256)
     15  5a36		       84		      .byte.b	$80+(.LUM2/256)
     16  5a37		       18		      .byte.b	$10+(.LUM3/256)
     17  5a38
     18  5a38
     19  5a38
     20  5a38
     21  5a38
     22  5a38				   .LUM1      SET	.LUM1 + .STEP1
     23  5a38				   .LUM2      SET	.LUM2 + .STEP2
     24  5a38				   .LUM3      SET	.LUM3 + .STEP3
     13  5a38					      REPEND
     14  5a38		       66		      .byte.b	$60+(.LUM1/256)
     15  5a39		       84		      .byte.b	$80+(.LUM2/256)
     16  5a3a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a3b
     18  5a3b
     19  5a3b
     20  5a3b
     21  5a3b
     22  5a3b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a3b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a3b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a3b					      REPEND
     14  5a3b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a3c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a3d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a3e
     18  5a3e
     19  5a3e
     20  5a3e
     21  5a3e
     22  5a3e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a3e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a3e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a3e					      REPEND
     14  5a3e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a3f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a40		       18		      .byte.b	$10+(.LUM3/256)
     17  5a41
     18  5a41
     19  5a41
     20  5a41
     21  5a41
     22  5a41				   .LUM1      SET	.LUM1 + .STEP1
     23  5a41				   .LUM2      SET	.LUM2 + .STEP2
     24  5a41				   .LUM3      SET	.LUM3 + .STEP3
     13  5a41					      REPEND
     14  5a41		       66		      .byte.b	$60+(.LUM1/256)
     15  5a42		       84		      .byte.b	$80+(.LUM2/256)
     16  5a43		       18		      .byte.b	$10+(.LUM3/256)
     17  5a44
     18  5a44
     19  5a44
     20  5a44
     21  5a44
     22  5a44				   .LUM1      SET	.LUM1 + .STEP1
     23  5a44				   .LUM2      SET	.LUM2 + .STEP2
     24  5a44				   .LUM3      SET	.LUM3 + .STEP3
     13  5a44					      REPEND
     14  5a44		       66		      .byte.b	$60+(.LUM1/256)
     15  5a45		       84		      .byte.b	$80+(.LUM2/256)
     16  5a46		       18		      .byte.b	$10+(.LUM3/256)
     17  5a47
     18  5a47
     19  5a47
     20  5a47
     21  5a47
     22  5a47				   .LUM1      SET	.LUM1 + .STEP1
     23  5a47				   .LUM2      SET	.LUM2 + .STEP2
     24  5a47				   .LUM3      SET	.LUM3 + .STEP3
     13  5a47					      REPEND
     14  5a47		       66		      .byte.b	$60+(.LUM1/256)
     15  5a48		       84		      .byte.b	$80+(.LUM2/256)
     16  5a49		       18		      .byte.b	$10+(.LUM3/256)
     17  5a4a
     18  5a4a
     19  5a4a
     20  5a4a
     21  5a4a
     22  5a4a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a4a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a4a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a4a					      REPEND
     14  5a4a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a4b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a4c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a4d
     18  5a4d
     19  5a4d
     20  5a4d
     21  5a4d
     22  5a4d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a4d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a4d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a4d					      REPEND
     14  5a4d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a4e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a4f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a50
     18  5a50
     19  5a50
     20  5a50
     21  5a50
     22  5a50				   .LUM1      SET	.LUM1 + .STEP1
     23  5a50				   .LUM2      SET	.LUM2 + .STEP2
     24  5a50				   .LUM3      SET	.LUM3 + .STEP3
     13  5a50					      REPEND
     14  5a50		       66		      .byte.b	$60+(.LUM1/256)
     15  5a51		       84		      .byte.b	$80+(.LUM2/256)
     16  5a52		       18		      .byte.b	$10+(.LUM3/256)
     17  5a53
     18  5a53
     19  5a53
     20  5a53
     21  5a53
     22  5a53				   .LUM1      SET	.LUM1 + .STEP1
     23  5a53				   .LUM2      SET	.LUM2 + .STEP2
     24  5a53				   .LUM3      SET	.LUM3 + .STEP3
     13  5a53					      REPEND
     14  5a53		       66		      .byte.b	$60+(.LUM1/256)
     15  5a54		       84		      .byte.b	$80+(.LUM2/256)
     16  5a55		       18		      .byte.b	$10+(.LUM3/256)
     17  5a56
     18  5a56
     19  5a56
     20  5a56
     21  5a56
     22  5a56				   .LUM1      SET	.LUM1 + .STEP1
     23  5a56				   .LUM2      SET	.LUM2 + .STEP2
     24  5a56				   .LUM3      SET	.LUM3 + .STEP3
     13  5a56					      REPEND
     14  5a56		       66		      .byte.b	$60+(.LUM1/256)
     15  5a57		       84		      .byte.b	$80+(.LUM2/256)
     16  5a58		       18		      .byte.b	$10+(.LUM3/256)
     17  5a59
     18  5a59
     19  5a59
     20  5a59
     21  5a59
     22  5a59				   .LUM1      SET	.LUM1 + .STEP1
     23  5a59				   .LUM2      SET	.LUM2 + .STEP2
     24  5a59				   .LUM3      SET	.LUM3 + .STEP3
     13  5a59					      REPEND
     14  5a59		       66		      .byte.b	$60+(.LUM1/256)
     15  5a5a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a5b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a5c
     18  5a5c
     19  5a5c
     20  5a5c
     21  5a5c
     22  5a5c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a5c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a5c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a5c					      REPEND
     14  5a5c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a5d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a5e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a5f
     18  5a5f
     19  5a5f
     20  5a5f
     21  5a5f
     22  5a5f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a5f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a5f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a5f					      REPEND
     14  5a5f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a60		       84		      .byte.b	$80+(.LUM2/256)
     16  5a61		       18		      .byte.b	$10+(.LUM3/256)
     17  5a62
     18  5a62
     19  5a62
     20  5a62
     21  5a62
     22  5a62				   .LUM1      SET	.LUM1 + .STEP1
     23  5a62				   .LUM2      SET	.LUM2 + .STEP2
     24  5a62				   .LUM3      SET	.LUM3 + .STEP3
     13  5a62					      REPEND
     14  5a62		       66		      .byte.b	$60+(.LUM1/256)
     15  5a63		       84		      .byte.b	$80+(.LUM2/256)
     16  5a64		       18		      .byte.b	$10+(.LUM3/256)
     17  5a65
     18  5a65
     19  5a65
     20  5a65
     21  5a65
     22  5a65				   .LUM1      SET	.LUM1 + .STEP1
     23  5a65				   .LUM2      SET	.LUM2 + .STEP2
     24  5a65				   .LUM3      SET	.LUM3 + .STEP3
     13  5a65					      REPEND
     14  5a65		       66		      .byte.b	$60+(.LUM1/256)
     15  5a66		       84		      .byte.b	$80+(.LUM2/256)
     16  5a67		       18		      .byte.b	$10+(.LUM3/256)
     17  5a68
     18  5a68
     19  5a68
     20  5a68
     21  5a68
     22  5a68				   .LUM1      SET	.LUM1 + .STEP1
     23  5a68				   .LUM2      SET	.LUM2 + .STEP2
     24  5a68				   .LUM3      SET	.LUM3 + .STEP3
     13  5a68					      REPEND
     14  5a68		       66		      .byte.b	$60+(.LUM1/256)
     15  5a69		       84		      .byte.b	$80+(.LUM2/256)
     16  5a6a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a6b
     18  5a6b
     19  5a6b
     20  5a6b
     21  5a6b
     22  5a6b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a6b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a6b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a6b					      REPEND
     14  5a6b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a6c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a6d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a6e
     18  5a6e
     19  5a6e
     20  5a6e
     21  5a6e
     22  5a6e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a6e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a6e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a6e					      REPEND
     14  5a6e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a6f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a70		       18		      .byte.b	$10+(.LUM3/256)
     17  5a71
     18  5a71
     19  5a71
     20  5a71
     21  5a71
     22  5a71				   .LUM1      SET	.LUM1 + .STEP1
     23  5a71				   .LUM2      SET	.LUM2 + .STEP2
     24  5a71				   .LUM3      SET	.LUM3 + .STEP3
     13  5a71					      REPEND
     14  5a71		       66		      .byte.b	$60+(.LUM1/256)
     15  5a72		       84		      .byte.b	$80+(.LUM2/256)
     16  5a73		       18		      .byte.b	$10+(.LUM3/256)
     17  5a74
     18  5a74
     19  5a74
     20  5a74
     21  5a74
     22  5a74				   .LUM1      SET	.LUM1 + .STEP1
     23  5a74				   .LUM2      SET	.LUM2 + .STEP2
     24  5a74				   .LUM3      SET	.LUM3 + .STEP3
     13  5a74					      REPEND
     14  5a74		       66		      .byte.b	$60+(.LUM1/256)
     15  5a75		       84		      .byte.b	$80+(.LUM2/256)
     16  5a76		       18		      .byte.b	$10+(.LUM3/256)
     17  5a77
     18  5a77
     19  5a77
     20  5a77
     21  5a77
     22  5a77				   .LUM1      SET	.LUM1 + .STEP1
     23  5a77				   .LUM2      SET	.LUM2 + .STEP2
     24  5a77				   .LUM3      SET	.LUM3 + .STEP3
     13  5a77					      REPEND
     14  5a77		       66		      .byte.b	$60+(.LUM1/256)
     15  5a78		       84		      .byte.b	$80+(.LUM2/256)
     16  5a79		       18		      .byte.b	$10+(.LUM3/256)
     17  5a7a
     18  5a7a
     19  5a7a
     20  5a7a
     21  5a7a
     22  5a7a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a7a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a7a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a7a					      REPEND
     14  5a7a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a7b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a7c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a7d
     18  5a7d
     19  5a7d
     20  5a7d
     21  5a7d
     22  5a7d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a7d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a7d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a7d					      REPEND
     14  5a7d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a7e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a7f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a80
     18  5a80
     19  5a80
     20  5a80
     21  5a80
     22  5a80				   .LUM1      SET	.LUM1 + .STEP1
     23  5a80				   .LUM2      SET	.LUM2 + .STEP2
     24  5a80				   .LUM3      SET	.LUM3 + .STEP3
     13  5a80					      REPEND
     14  5a80		       66		      .byte.b	$60+(.LUM1/256)
     15  5a81		       84		      .byte.b	$80+(.LUM2/256)
     16  5a82		       18		      .byte.b	$10+(.LUM3/256)
     17  5a83
     18  5a83
     19  5a83
     20  5a83
     21  5a83
     22  5a83				   .LUM1      SET	.LUM1 + .STEP1
     23  5a83				   .LUM2      SET	.LUM2 + .STEP2
     24  5a83				   .LUM3      SET	.LUM3 + .STEP3
     13  5a83					      REPEND
     14  5a83		       66		      .byte.b	$60+(.LUM1/256)
     15  5a84		       84		      .byte.b	$80+(.LUM2/256)
     16  5a85		       18		      .byte.b	$10+(.LUM3/256)
     17  5a86
     18  5a86
     19  5a86
     20  5a86
     21  5a86
     22  5a86				   .LUM1      SET	.LUM1 + .STEP1
     23  5a86				   .LUM2      SET	.LUM2 + .STEP2
     24  5a86				   .LUM3      SET	.LUM3 + .STEP3
     13  5a86					      REPEND
     14  5a86		       66		      .byte.b	$60+(.LUM1/256)
     15  5a87		       84		      .byte.b	$80+(.LUM2/256)
     16  5a88		       18		      .byte.b	$10+(.LUM3/256)
     17  5a89
     18  5a89
     19  5a89
     20  5a89
     21  5a89
     22  5a89				   .LUM1      SET	.LUM1 + .STEP1
     23  5a89				   .LUM2      SET	.LUM2 + .STEP2
     24  5a89				   .LUM3      SET	.LUM3 + .STEP3
     13  5a89					      REPEND
     14  5a89		       66		      .byte.b	$60+(.LUM1/256)
     15  5a8a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a8b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a8c
     18  5a8c
     19  5a8c
     20  5a8c
     21  5a8c
     22  5a8c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a8c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a8c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a8c					      REPEND
     14  5a8c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a8d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a8e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a8f
     18  5a8f
     19  5a8f
     20  5a8f
     21  5a8f
     22  5a8f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a8f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a8f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a8f					      REPEND
     14  5a8f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a90		       84		      .byte.b	$80+(.LUM2/256)
     16  5a91		       18		      .byte.b	$10+(.LUM3/256)
     17  5a92
     18  5a92
     19  5a92
     20  5a92
     21  5a92
     22  5a92				   .LUM1      SET	.LUM1 + .STEP1
     23  5a92				   .LUM2      SET	.LUM2 + .STEP2
     24  5a92				   .LUM3      SET	.LUM3 + .STEP3
     13  5a92					      REPEND
     14  5a92		       66		      .byte.b	$60+(.LUM1/256)
     15  5a93		       84		      .byte.b	$80+(.LUM2/256)
     16  5a94		       18		      .byte.b	$10+(.LUM3/256)
     17  5a95
     18  5a95
     19  5a95
     20  5a95
     21  5a95
     22  5a95				   .LUM1      SET	.LUM1 + .STEP1
     23  5a95				   .LUM2      SET	.LUM2 + .STEP2
     24  5a95				   .LUM3      SET	.LUM3 + .STEP3
     13  5a95					      REPEND
     14  5a95		       66		      .byte.b	$60+(.LUM1/256)
     15  5a96		       84		      .byte.b	$80+(.LUM2/256)
     16  5a97		       18		      .byte.b	$10+(.LUM3/256)
     17  5a98
     18  5a98
     19  5a98
     20  5a98
     21  5a98
     22  5a98				   .LUM1      SET	.LUM1 + .STEP1
     23  5a98				   .LUM2      SET	.LUM2 + .STEP2
     24  5a98				   .LUM3      SET	.LUM3 + .STEP3
     13  5a98					      REPEND
     14  5a98		       66		      .byte.b	$60+(.LUM1/256)
     15  5a99		       84		      .byte.b	$80+(.LUM2/256)
     16  5a9a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a9b
     18  5a9b
     19  5a9b
     20  5a9b
     21  5a9b
     22  5a9b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a9b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a9b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a9b					      REPEND
     14  5a9b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a9c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a9d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a9e
     18  5a9e
     19  5a9e
     20  5a9e
     21  5a9e
     22  5a9e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a9e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a9e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a9e					      REPEND
     14  5a9e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a9f		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa0		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa1
     18  5aa1
     19  5aa1
     20  5aa1
     21  5aa1
     22  5aa1				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa1				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa1				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa1					      REPEND
     14  5aa1		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa2		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa3		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa4
     18  5aa4
     19  5aa4
     20  5aa4
     21  5aa4
     22  5aa4				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa4				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa4				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa4					      REPEND
     14  5aa4		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa5		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa6		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa7
     18  5aa7
     19  5aa7
     20  5aa7
     21  5aa7
     22  5aa7				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa7				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa7				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa7					      REPEND
     14  5aa7		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa8		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa9		       18		      .byte.b	$10+(.LUM3/256)
     17  5aaa
     18  5aaa
     19  5aaa
     20  5aaa
     21  5aaa
     22  5aaa				   .LUM1      SET	.LUM1 + .STEP1
     23  5aaa				   .LUM2      SET	.LUM2 + .STEP2
     24  5aaa				   .LUM3      SET	.LUM3 + .STEP3
     13  5aaa					      REPEND
     14  5aaa		       66		      .byte.b	$60+(.LUM1/256)
     15  5aab		       84		      .byte.b	$80+(.LUM2/256)
     16  5aac		       18		      .byte.b	$10+(.LUM3/256)
     17  5aad
     18  5aad
     19  5aad
     20  5aad
     21  5aad
     22  5aad				   .LUM1      SET	.LUM1 + .STEP1
     23  5aad				   .LUM2      SET	.LUM2 + .STEP2
     24  5aad				   .LUM3      SET	.LUM3 + .STEP3
     13  5aad					      REPEND
     14  5aad		       66		      .byte.b	$60+(.LUM1/256)
     15  5aae		       84		      .byte.b	$80+(.LUM2/256)
     16  5aaf		       18		      .byte.b	$10+(.LUM3/256)
     17  5ab0
     18  5ab0
     19  5ab0
     20  5ab0
     21  5ab0
     22  5ab0				   .LUM1      SET	.LUM1 + .STEP1
     23  5ab0				   .LUM2      SET	.LUM2 + .STEP2
     24  5ab0				   .LUM3      SET	.LUM3 + .STEP3
     25  5ab0					      REPEND
    262  5ab0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    263  5ab0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  5ab0					      include	"titleData.asm"
      1  5ab0				   COL_0
      2  5ab0		       00		      .byte.b	0	;R (71)
      3  5ab1		       00		      .byte.b	0	;G
      4  5ab2		       00		      .byte.b	0	;B
      5  5ab3		       40		      .byte.b	64	;R (70)
      6  5ab4		       40		      .byte.b	64	;G
      7  5ab5		       00		      .byte.b	0	;B
      8  5ab6		       00		      .byte.b	0	;R (69)
      9  5ab7		       00		      .byte.b	0	;G
     10  5ab8		       00		      .byte.b	0	;B
     11  5ab9		       00		      .byte.b	0	;R (68)
     12  5aba		       80		      .byte.b	128	;G
     13  5abb		       00		      .byte.b	0	;B
     14  5abc		       00		      .byte.b	0	;R (67)
     15  5abd		       20		      .byte.b	32	;G
     16  5abe		       00		      .byte.b	0	;B
     17  5abf		       80		      .byte.b	128	;R (66)
     18  5ac0		       80		      .byte.b	128	;G
     19  5ac1		       00		      .byte.b	0	;B
     20  5ac2		       c0		      .byte.b	192	;R (65)
     21  5ac3		       c0		      .byte.b	192	;G
     22  5ac4		       00		      .byte.b	0	;B
     23  5ac5		       40		      .byte.b	64	;R (64)
     24  5ac6		       c0		      .byte.b	192	;G
     25  5ac7		       00		      .byte.b	0	;B
     26  5ac8		       00		      .byte.b	0	;R (63)
     27  5ac9		       a0		      .byte.b	160	;G
     28  5aca		       00		      .byte.b	0	;B
     29  5acb		       10		      .byte.b	16	;R (62)
     30  5acc		       70		      .byte.b	112	;G
     31  5acd		       00		      .byte.b	0	;B
     32  5ace		       00		      .byte.b	0	;R (61)
     33  5acf		       80		      .byte.b	128	;G
     34  5ad0		       40		      .byte.b	64	;B
     35  5ad1		       00		      .byte.b	0	;R (60)
     36  5ad2		       c0		      .byte.b	192	;G
     37  5ad3		       00		      .byte.b	0	;B
     38  5ad4		       00		      .byte.b	0	;R (59)
     39  5ad5		       c0		      .byte.b	192	;G
     40  5ad6		       00		      .byte.b	0	;B
     41  5ad7		       00		      .byte.b	0	;R (58)
     42  5ad8		       40		      .byte.b	64	;G
     43  5ad9		       00		      .byte.b	0	;B
     44  5ada		       00		      .byte.b	0	;R (57)
     45  5adb		       c0		      .byte.b	192	;G
     46  5adc		       00		      .byte.b	0	;B
     47  5add		       00		      .byte.b	0	;R (56)
     48  5ade		       60		      .byte.b	96	;G
     49  5adf		       00		      .byte.b	0	;B
     50  5ae0		       00		      .byte.b	0	;R (55)
     51  5ae1		       80		      .byte.b	128	;G
     52  5ae2		       00		      .byte.b	0	;B
     53  5ae3		       00		      .byte.b	0	;R (54)
     54  5ae4		       40		      .byte.b	64	;G
     55  5ae5		       00		      .byte.b	0	;B
     56  5ae6		       00		      .byte.b	0	;R (53)
     57  5ae7		       80		      .byte.b	128	;G
     58  5ae8		       00		      .byte.b	0	;B
     59  5ae9		       00		      .byte.b	0	;R (52)
     60  5aea		       80		      .byte.b	128	;G
     61  5aeb		       00		      .byte.b	0	;B
     62  5aec		       00		      .byte.b	0	;R (51)
     63  5aed		       10		      .byte.b	16	;G
     64  5aee		       00		      .byte.b	0	;B
     65  5aef		       00		      .byte.b	0	;R (50)
     66  5af0		       00		      .byte.b	0	;G
     67  5af1		       00		      .byte.b	0	;B
     68  5af2		       00		      .byte.b	0	;R (49)
     69  5af3		       00		      .byte.b	0	;G
     70  5af4		       00		      .byte.b	0	;B
     71  5af5		       00		      .byte.b	0	;R (48)
     72  5af6		       00		      .byte.b	0	;G
     73  5af7		       00		      .byte.b	0	;B
     74  5af8		       00		      .byte.b	0	;R (47)
     75  5af9		       00		      .byte.b	0	;G
     76  5afa		       00		      .byte.b	0	;B
     77  5afb		       00		      .byte.b	0	;R (46)
     78  5afc		       40		      .byte.b	64	;G
     79  5afd		       00		      .byte.b	0	;B
     80  5afe		       00		      .byte.b	0	;R (45)
     81  5aff		       00		      .byte.b	0	;G
     82  5b00		       00		      .byte.b	0	;B
     83  5b01		       00		      .byte.b	0	;R (44)
     84  5b02		       00		      .byte.b	0	;G
     85  5b03		       00		      .byte.b	0	;B
     86  5b04		       00		      .byte.b	0	;R (43)
     87  5b05		       00		      .byte.b	0	;G
     88  5b06		       00		      .byte.b	0	;B
     89  5b07		       00		      .byte.b	0	;R (42)
     90  5b08		       40		      .byte.b	64	;G
     91  5b09		       00		      .byte.b	0	;B
     92  5b0a		       00		      .byte.b	0	;R (41)
     93  5b0b		       00		      .byte.b	0	;G
     94  5b0c		       00		      .byte.b	0	;B
     95  5b0d		       00		      .byte.b	0	;R (40)
     96  5b0e		       00		      .byte.b	0	;G
     97  5b0f		       00		      .byte.b	0	;B
     98  5b10		       00		      .byte.b	0	;R (39)
     99  5b11		       20		      .byte.b	32	;G
    100  5b12		       00		      .byte.b	0	;B
    101  5b13		       00		      .byte.b	0	;R (38)
    102  5b14		       00		      .byte.b	0	;G
    103  5b15		       00		      .byte.b	0	;B
    104  5b16		       00		      .byte.b	0	;R (37)
    105  5b17		       10		      .byte.b	16	;G
    106  5b18		       00		      .byte.b	0	;B
    107  5b19		       00		      .byte.b	0	;R (36)
    108  5b1a		       00		      .byte.b	0	;G
    109  5b1b		       00		      .byte.b	0	;B
    110  5b1c		       00		      .byte.b	0	;R (35)
    111  5b1d		       40		      .byte.b	64	;G
    112  5b1e		       00		      .byte.b	0	;B
    113  5b1f		       00		      .byte.b	0	;R (34)
    114  5b20		       20		      .byte.b	32	;G
    115  5b21		       00		      .byte.b	0	;B
    116  5b22		       00		      .byte.b	0	;R (33)
    117  5b23		       00		      .byte.b	0	;G
    118  5b24		       00		      .byte.b	0	;B
    119  5b25		       00		      .byte.b	0	;R (32)
    120  5b26		       00		      .byte.b	0	;G
    121  5b27		       00		      .byte.b	0	;B
    122  5b28		       00		      .byte.b	0	;R (31)
    123  5b29		       20		      .byte.b	32	;G
    124  5b2a		       00		      .byte.b	0	;B
    125  5b2b		       00		      .byte.b	0	;R (30)
    126  5b2c		       00		      .byte.b	0	;G
    127  5b2d		       00		      .byte.b	0	;B
    128  5b2e		       00		      .byte.b	0	;R (29)
    129  5b2f		       80		      .byte.b	128	;G
    130  5b30		       00		      .byte.b	0	;B
    131  5b31		       00		      .byte.b	0	;R (28)
    132  5b32		       00		      .byte.b	0	;G
    133  5b33		       00		      .byte.b	0	;B
    134  5b34		       00		      .byte.b	0	;R (27)
    135  5b35		       20		      .byte.b	32	;G
    136  5b36		       00		      .byte.b	0	;B
    137  5b37		       00		      .byte.b	0	;R (26)
    138  5b38		       00		      .byte.b	0	;G
    139  5b39		       00		      .byte.b	0	;B
    140  5b3a		       00		      .byte.b	0	;R (25)
    141  5b3b		       00		      .byte.b	0	;G
    142  5b3c		       00		      .byte.b	0	;B
    143  5b3d		       00		      .byte.b	0	;R (24)
    144  5b3e		       20		      .byte.b	32	;G
    145  5b3f		       00		      .byte.b	0	;B
    146  5b40		       00		      .byte.b	0	;R (23)
    147  5b41		       00		      .byte.b	0	;G
    148  5b42		       00		      .byte.b	0	;B
    149  5b43		       00		      .byte.b	0	;R (22)
    150  5b44		       00		      .byte.b	0	;G
    151  5b45		       00		      .byte.b	0	;B
    152  5b46		       00		      .byte.b	0	;R (21)
    153  5b47		       20		      .byte.b	32	;G
    154  5b48		       00		      .byte.b	0	;B
    155  5b49		       00		      .byte.b	0	;R (20)
    156  5b4a		       00		      .byte.b	0	;G
    157  5b4b		       00		      .byte.b	0	;B
    158  5b4c		       00		      .byte.b	0	;R (19)
    159  5b4d		       00		      .byte.b	0	;G
    160  5b4e		       00		      .byte.b	0	;B
    161  5b4f		       00		      .byte.b	0	;R (18)
    162  5b50		       00		      .byte.b	0	;G
    163  5b51		       00		      .byte.b	0	;B
    164  5b52		       00		      .byte.b	0	;R (17)
    165  5b53		       80		      .byte.b	128	;G
    166  5b54		       00		      .byte.b	0	;B
    167  5b55		       00		      .byte.b	0	;R (16)
    168  5b56		       00		      .byte.b	0	;G
    169  5b57		       00		      .byte.b	0	;B
    170  5b58		       00		      .byte.b	0	;R (15)
    171  5b59		       10		      .byte.b	16	;G
    172  5b5a		       00		      .byte.b	0	;B
    173  5b5b		       00		      .byte.b	0	;R (14)
    174  5b5c		       00		      .byte.b	0	;G
    175  5b5d		       00		      .byte.b	0	;B
    176  5b5e		       00		      .byte.b	0	;R (13)
    177  5b5f		       00		      .byte.b	0	;G
    178  5b60		       00		      .byte.b	0	;B
    179  5b61		       00		      .byte.b	0	;R (12)
    180  5b62		       80		      .byte.b	128	;G
    181  5b63		       00		      .byte.b	0	;B
    182  5b64		       00		      .byte.b	0	;R (11)
    183  5b65		       00		      .byte.b	0	;G
    184  5b66		       00		      .byte.b	0	;B
    185  5b67		       00		      .byte.b	0	;R (10)
    186  5b68		       00		      .byte.b	0	;G
    187  5b69		       00		      .byte.b	0	;B
    188  5b6a		       00		      .byte.b	0	;R (9)
    189  5b6b		       80		      .byte.b	128	;G
    190  5b6c		       00		      .byte.b	0	;B
    191  5b6d		       00		      .byte.b	0	;R (8)
    192  5b6e		       00		      .byte.b	0	;G
    193  5b6f		       00		      .byte.b	0	;B
    194  5b70		       00		      .byte.b	0	;R (7)
    195  5b71		       20		      .byte.b	32	;G
    196  5b72		       00		      .byte.b	0	;B
    197  5b73		       00		      .byte.b	0	;R (6)
    198  5b74		       00		      .byte.b	0	;G
    199  5b75		       00		      .byte.b	0	;B
    200  5b76		       00		      .byte.b	0	;R (5)
    201  5b77		       10		      .byte.b	16	;G
    202  5b78		       00		      .byte.b	0	;B
    203  5b79		       00		      .byte.b	0	;R (4)
    204  5b7a		       00		      .byte.b	0	;G
    205  5b7b		       00		      .byte.b	0	;B
    206  5b7c		       00		      .byte.b	0	;R (3)
    207  5b7d		       00		      .byte.b	0	;G
    208  5b7e		       00		      .byte.b	0	;B
    209  5b7f		       00		      .byte.b	0	;R (2)
    210  5b80		       40		      .byte.b	64	;G
    211  5b81		       00		      .byte.b	0	;B
    212  5b82		       00		      .byte.b	0	;R (1)
    213  5b83		       00		      .byte.b	0	;G
    214  5b84		       00		      .byte.b	0	;B
    215  5b85		       00		      .byte.b	0	;R (0)
    216  5b86		       00		      .byte.b	0	;G
    217  5b87		       00		      .byte.b	0	;B
    218  5b88				   COL_1
    219  5b88		       80		      .byte.b	128	;R (71)
    220  5b89		       80		      .byte.b	128	;G
    221  5b8a		       00		      .byte.b	0	;B
    222  5b8b		       10		      .byte.b	16	;R (70)
    223  5b8c		       14		      .byte.b	20	;G
    224  5b8d		       00		      .byte.b	0	;B
    225  5b8e		       00		      .byte.b	0	;R (69)
    226  5b8f		       41		      .byte.b	65	;G
    227  5b90		       00		      .byte.b	0	;B
    228  5b91		       00		      .byte.b	0	;R (68)
    229  5b92		       08		      .byte.b	8	;G
    230  5b93		       00		      .byte.b	0	;B
    231  5b94		       20		      .byte.b	32	;R (67)
    232  5b95		       20		      .byte.b	32	;G
    233  5b96		       00		      .byte.b	0	;B
    234  5b97		       63		      .byte.b	99	;R (66)
    235  5b98		       6b		      .byte.b	107	;G
    236  5b99		       00		      .byte.b	0	;B
    237  5b9a		       ff		      .byte.b	255	;R (65)
    238  5b9b		       f5		      .byte.b	245	;G
    239  5b9c		       00		      .byte.b	0	;B
    240  5b9d		       80		      .byte.b	128	;R (64)
    241  5b9e		       fb		      .byte.b	251	;G
    242  5b9f		       04		      .byte.b	4	;B
    243  5ba0		       00		      .byte.b	0	;R (63)
    244  5ba1		       b7		      .byte.b	183	;G
    245  5ba2		       00		      .byte.b	0	;B
    246  5ba3		       00		      .byte.b	0	;R (62)
    247  5ba4		       b5		      .byte.b	181	;G
    248  5ba5		       00		      .byte.b	0	;B
    249  5ba6		       00		      .byte.b	0	;R (61)
    250  5ba7		       ef		      .byte.b	239	;G
    251  5ba8		       10		      .byte.b	16	;B
    252  5ba9		       00		      .byte.b	0	;R (60)
    253  5baa		       bd		      .byte.b	189	;G
    254  5bab		       42		      .byte.b	66	;B
    255  5bac		       00		      .byte.b	0	;R (59)
    256  5bad		       77		      .byte.b	119	;G
    257  5bae		       00		      .byte.b	0	;B
    258  5baf		       00		      .byte.b	0	;R (58)
    259  5bb0		       ee		      .byte.b	238	;G
    260  5bb1		       00		      .byte.b	0	;B
    261  5bb2		       00		      .byte.b	0	;R (57)
    262  5bb3		       9b		      .byte.b	155	;G
    263  5bb4		       00		      .byte.b	0	;B
    264  5bb5		       00		      .byte.b	0	;R (56)
    265  5bb6		       f2		      .byte.b	242	;G
    266  5bb7		       00		      .byte.b	0	;B
    267  5bb8		       00		      .byte.b	0	;R (55)
    268  5bb9		       40		      .byte.b	64	;G
    269  5bba		       00		      .byte.b	0	;B
    270  5bbb		       00		      .byte.b	0	;R (54)
    271  5bbc		       df		      .byte.b	223	;G
    272  5bbd		       00		      .byte.b	0	;B
    273  5bbe		       10		      .byte.b	16	;R (53)
    274  5bbf		       69		      .byte.b	105	;G
    275  5bc0		       10		      .byte.b	16	;B
    276  5bc1		       00		      .byte.b	0	;R (52)
    277  5bc2		       4b		      .byte.b	75	;G
    278  5bc3		       00		      .byte.b	0	;B
    279  5bc4		       00		      .byte.b	0	;R (51)
    280  5bc5		       b0		      .byte.b	176	;G
    281  5bc6		       00		      .byte.b	0	;B
    282  5bc7		       00		      .byte.b	0	;R (50)
    283  5bc8		       a7		      .byte.b	167	;G
    284  5bc9		       00		      .byte.b	0	;B
    285  5bca		       00		      .byte.b	0	;R (49)
    286  5bcb		       7d		      .byte.b	125	;G
    287  5bcc		       02		      .byte.b	2	;B
    288  5bcd		       00		      .byte.b	0	;R (48)
    289  5bce		       db		      .byte.b	219	;G
    290  5bcf		       20		      .byte.b	32	;B
    291  5bd0		       00		      .byte.b	0	;R (47)
    292  5bd1		       6d		      .byte.b	109	;G
    293  5bd2		       00		      .byte.b	0	;B
    294  5bd3		       00		      .byte.b	0	;R (46)
    295  5bd4		       ea		      .byte.b	234	;G
    296  5bd5		       00		      .byte.b	0	;B
    297  5bd6		       00		      .byte.b	0	;R (45)
    298  5bd7		       13		      .byte.b	19	;G
    299  5bd8		       00		      .byte.b	0	;B
    300  5bd9		       00		      .byte.b	0	;R (44)
    301  5bda		       7e		      .byte.b	126	;G
    302  5bdb		       01		      .byte.b	1	;B
    303  5bdc		       22		      .byte.b	34	;R (43)
    304  5bdd		       77		      .byte.b	119	;G
    305  5bde		       08		      .byte.b	8	;B
    306  5bdf		       04		      .byte.b	4	;R (42)
    307  5be0		       5f		      .byte.b	95	;G
    308  5be1		       00		      .byte.b	0	;B
    309  5be2		       00		      .byte.b	0	;R (41)
    310  5be3		       6f		      .byte.b	111	;G
    311  5be4		       00		      .byte.b	0	;B
    312  5be5		       00		      .byte.b	0	;R (40)
    313  5be6		       b5		      .byte.b	181	;G
    314  5be7		       00		      .byte.b	0	;B
    315  5be8		       00		      .byte.b	0	;R (39)
    316  5be9		       5b		      .byte.b	91	;G
    317  5bea		       00		      .byte.b	0	;B
    318  5beb		       00		      .byte.b	0	;R (38)
    319  5bec		       57		      .byte.b	87	;G
    320  5bed		       00		      .byte.b	0	;B
    321  5bee		       20		      .byte.b	32	;R (37)
    322  5bef		       4d		      .byte.b	77	;G
    323  5bf0		       22		      .byte.b	34	;B
    324  5bf1		       00		      .byte.b	0	;R (36)
    325  5bf2		       55		      .byte.b	85	;G
    326  5bf3		       00		      .byte.b	0	;B
    327  5bf4		       01		      .byte.b	1	;R (35)
    328  5bf5		       56		      .byte.b	86	;G
    329  5bf6		       00		      .byte.b	0	;B
    330  5bf7		       02		      .byte.b	2	;R (34)
    331  5bf8		       57		      .byte.b	87	;G
    332  5bf9		       00		      .byte.b	0	;B
    333  5bfa		       00		      .byte.b	0	;R (33)
    334  5bfb		       2a		      .byte.b	42	;G
    335  5bfc		       01		      .byte.b	1	;B
    336  5bfd		       01		      .byte.b	1	;R (32)
    337  5bfe		       ab		      .byte.b	171	;G
    338  5bff		       00		      .byte.b	0	;B
    339  5c00		       22		      .byte.b	34	;R (31)
    340  5c01		       17		      .byte.b	23	;G
    341  5c02		       20		      .byte.b	32	;B
    342  5c03		       00		      .byte.b	0	;R (30)
    343  5c04		       55		      .byte.b	85	;G
    344  5c05		       02		      .byte.b	2	;B
    345  5c06		       22		      .byte.b	34	;R (29)
    346  5c07		       17		      .byte.b	23	;G
    347  5c08		       20		      .byte.b	32	;B
    348  5c09		       00		      .byte.b	0	;R (28)
    349  5c0a		       2b		      .byte.b	43	;G
    350  5c0b		       00		      .byte.b	0	;B
    351  5c0c		       00		      .byte.b	0	;R (27)
    352  5c0d		       95		      .byte.b	149	;G
    353  5c0e		       02		      .byte.b	2	;B
    354  5c0f		       00		      .byte.b	0	;R (26)
    355  5c10		       17		      .byte.b	23	;G
    356  5c11		       00		      .byte.b	0	;B
    357  5c12		       00		      .byte.b	0	;R (25)
    358  5c13		       2d		      .byte.b	45	;G
    359  5c14		       00		      .byte.b	0	;B
    360  5c15		       00		      .byte.b	0	;R (24)
    361  5c16		       b4		      .byte.b	180	;G
    362  5c17		       00		      .byte.b	0	;B
    363  5c18		       00		      .byte.b	0	;R (23)
    364  5c19		       0a		      .byte.b	10	;G
    365  5c1a		       00		      .byte.b	0	;B
    366  5c1b		       10		      .byte.b	16	;R (22)
    367  5c1c		       3c		      .byte.b	60	;G
    368  5c1d		       00		      .byte.b	0	;B
    369  5c1e		       10		      .byte.b	16	;R (21)
    370  5c1f		       98		      .byte.b	152	;G
    371  5c20		       00		      .byte.b	0	;B
    372  5c21		       10		      .byte.b	16	;R (20)
    373  5c22		       1a		      .byte.b	26	;G
    374  5c23		       00		      .byte.b	0	;B
    375  5c24		       00		      .byte.b	0	;R (19)
    376  5c25		       14		      .byte.b	20	;G
    377  5c26		       00		      .byte.b	0	;B
    378  5c27		       00		      .byte.b	0	;R (18)
    379  5c28		       5a		      .byte.b	90	;G
    380  5c29		       00		      .byte.b	0	;B
    381  5c2a		       00		      .byte.b	0	;R (17)
    382  5c2b		       09		      .byte.b	9	;G
    383  5c2c		       00		      .byte.b	0	;B
    384  5c2d		       08		      .byte.b	8	;R (16)
    385  5c2e		       1d		      .byte.b	29	;G
    386  5c2f		       00		      .byte.b	0	;B
    387  5c30		       00		      .byte.b	0	;R (15)
    388  5c31		       1a		      .byte.b	26	;G
    389  5c32		       00		      .byte.b	0	;B
    390  5c33		       20		      .byte.b	32	;R (14)
    391  5c34		       ba		      .byte.b	186	;G
    392  5c35		       00		      .byte.b	0	;B
    393  5c36		       00		      .byte.b	0	;R (13)
    394  5c37		       12		      .byte.b	18	;G
    395  5c38		       00		      .byte.b	0	;B
    396  5c39		       00		      .byte.b	0	;R (12)
    397  5c3a		       1a		      .byte.b	26	;G
    398  5c3b		       00		      .byte.b	0	;B
    399  5c3c		       00		      .byte.b	0	;R (11)
    400  5c3d		       2d		      .byte.b	45	;G
    401  5c3e		       10		      .byte.b	16	;B
    402  5c3f		       10		      .byte.b	16	;R (10)
    403  5c40		       3b		      .byte.b	59	;G
    404  5c41		       00		      .byte.b	0	;B
    405  5c42		       24		      .byte.b	36	;R (9)
    406  5c43		       39		      .byte.b	57	;G
    407  5c44		       04		      .byte.b	4	;B
    408  5c45		       20		      .byte.b	32	;R (8)
    409  5c46		       35		      .byte.b	53	;G
    410  5c47		       00		      .byte.b	0	;B
    411  5c48		       00		      .byte.b	0	;R (7)
    412  5c49		       3d		      .byte.b	61	;G
    413  5c4a		       00		      .byte.b	0	;B
    414  5c4b		       00		      .byte.b	0	;R (6)
    415  5c4c		       32		      .byte.b	50	;G
    416  5c4d		       00		      .byte.b	0	;B
    417  5c4e		       00		      .byte.b	0	;R (5)
    418  5c4f		       98		      .byte.b	152	;G
    419  5c50		       00		      .byte.b	0	;B
    420  5c51		       00		      .byte.b	0	;R (4)
    421  5c52		       12		      .byte.b	18	;G
    422  5c53		       00		      .byte.b	0	;B
    423  5c54		       00		      .byte.b	0	;R (3)
    424  5c55		       20		      .byte.b	32	;G
    425  5c56		       00		      .byte.b	0	;B
    426  5c57		       01		      .byte.b	1	;R (2)
    427  5c58		       49		      .byte.b	73	;G
    428  5c59		       00		      .byte.b	0	;B
    429  5c5a		       20		      .byte.b	32	;R (1)
    430  5c5b		       20		      .byte.b	32	;G
    431  5c5c		       00		      .byte.b	0	;B
    432  5c5d		       00		      .byte.b	0	;R (0)
    433  5c5e		       00		      .byte.b	0	;G
    434  5c5f		       00		      .byte.b	0	;B
    435  5c60				   COL_2
    436  5c60		       14		      .byte.b	20	;R (71)
    437  5c61		       14		      .byte.b	20	;G
    438  5c62		       00		      .byte.b	0	;B
    439  5c63		       40		      .byte.b	64	;R (70)
    440  5c64		       42		      .byte.b	66	;G
    441  5c65		       00		      .byte.b	0	;B
    442  5c66		       a8		      .byte.b	168	;R (69)
    443  5c67		       a8		      .byte.b	168	;G
    444  5c68		       00		      .byte.b	0	;B
    445  5c69		       fd		      .byte.b	253	;R (68)
    446  5c6a		       1d		      .byte.b	29	;G
    447  5c6b		       00		      .byte.b	0	;B
    448  5c6c		       f0		      .byte.b	240	;R (67)
    449  5c6d		       44		      .byte.b	68	;G
    450  5c6e		       08		      .byte.b	8	;B
    451  5c6f		       ff		      .byte.b	255	;R (66)
    452  5c70		       2f		      .byte.b	47	;G
    453  5c71		       00		      .byte.b	0	;B
    454  5c72		       ff		      .byte.b	255	;R (65)
    455  5c73		       0e		      .byte.b	14	;G
    456  5c74		       00		      .byte.b	0	;B
    457  5c75		       f8		      .byte.b	248	;R (64)
    458  5c76		       0f		      .byte.b	15	;G
    459  5c77		       00		      .byte.b	0	;B
    460  5c78		       f8		      .byte.b	248	;R (63)
    461  5c79		       2e		      .byte.b	46	;G
    462  5c7a		       00		      .byte.b	0	;B
    463  5c7b		       f8		      .byte.b	248	;R (62)
    464  5c7c		       1e		      .byte.b	30	;G
    465  5c7d		       01		      .byte.b	1	;B
    466  5c7e		       74		      .byte.b	116	;R (61)
    467  5c7f		       23		      .byte.b	35	;G
    468  5c80		       88		      .byte.b	136	;B
    469  5c81		       fc		      .byte.b	252	;R (60)
    470  5c82		       0f		      .byte.b	15	;G
    471  5c83		       00		      .byte.b	0	;B
    472  5c84		       f8		      .byte.b	248	;R (59)
    473  5c85		       06		      .byte.b	6	;G
    474  5c86		       01		      .byte.b	1	;B
    475  5c87		       f8		      .byte.b	248	;R (58)
    476  5c88		       8f		      .byte.b	143	;G
    477  5c89		       00		      .byte.b	0	;B
    478  5c8a		       e8		      .byte.b	232	;R (57)
    479  5c8b		       0e		      .byte.b	14	;G
    480  5c8c		       10		      .byte.b	16	;B
    481  5c8d		       e0		      .byte.b	224	;R (56)
    482  5c8e		       97		      .byte.b	151	;G
    483  5c8f		       00		      .byte.b	0	;B
    484  5c90		       f0		      .byte.b	240	;R (55)
    485  5c91		       3a		      .byte.b	58	;G
    486  5c92		       00		      .byte.b	0	;B
    487  5c93		       e0		      .byte.b	224	;R (54)
    488  5c94		       bb		      .byte.b	187	;G
    489  5c95		       04		      .byte.b	4	;B
    490  5c96		       e0		      .byte.b	224	;R (53)
    491  5c97		       3e		      .byte.b	62	;G
    492  5c98		       00		      .byte.b	0	;B
    493  5c99		       c0		      .byte.b	192	;R (52)
    494  5c9a		       2a		      .byte.b	42	;G
    495  5c9b		       00		      .byte.b	0	;B
    496  5c9c		       80		      .byte.b	128	;R (51)
    497  5c9d		       3f		      .byte.b	63	;G
    498  5c9e		       40		      .byte.b	64	;B
    499  5c9f		       f5		      .byte.b	245	;R (50)
    500  5ca0		       3f		      .byte.b	63	;G
    501  5ca1		       00		      .byte.b	0	;B
    502  5ca2		       e8		      .byte.b	232	;R (49)
    503  5ca3		       7f		      .byte.b	127	;G
    504  5ca4		       00		      .byte.b	0	;B
    505  5ca5		       e0		      .byte.b	224	;R (48)
    506  5ca6		       7a		      .byte.b	122	;G
    507  5ca7		       04		      .byte.b	4	;B
    508  5ca8		       c0		      .byte.b	192	;R (47)
    509  5ca9		       5f		      .byte.b	95	;G
    510  5caa		       00		      .byte.b	0	;B
    511  5cab		       90		      .byte.b	144	;R (46)
    512  5cac		       dd		      .byte.b	221	;G
    513  5cad		       02		      .byte.b	2	;B
    514  5cae		       84		      .byte.b	132	;R (45)
    515  5caf		       9f		      .byte.b	159	;G
    516  5cb0		       00		      .byte.b	0	;B
    517  5cb1		       c4		      .byte.b	196	;R (44)
    518  5cb2		       cf		      .byte.b	207	;G
    519  5cb3		       00		      .byte.b	0	;B
    520  5cb4		       c5		      .byte.b	197	;R (43)
    521  5cb5		       1f		      .byte.b	31	;G
    522  5cb6		       00		      .byte.b	0	;B
    523  5cb7		       d4		      .byte.b	212	;R (42)
    524  5cb8		       9f		      .byte.b	159	;G
    525  5cb9		       20		      .byte.b	32	;B
    526  5cba		       c8		      .byte.b	200	;R (41)
    527  5cbb		       1e		      .byte.b	30	;G
    528  5cbc		       01		      .byte.b	1	;B
    529  5cbd		       c8		      .byte.b	200	;R (40)
    530  5cbe		       5f		      .byte.b	95	;G
    531  5cbf		       00		      .byte.b	0	;B
    532  5cc0		       cd		      .byte.b	205	;R (39)
    533  5cc1		       5e		      .byte.b	94	;G
    534  5cc2		       00		      .byte.b	0	;B
    535  5cc3		       c7		      .byte.b	199	;R (38)
    536  5cc4		       5b		      .byte.b	91	;G
    537  5cc5		       00		      .byte.b	0	;B
    538  5cc6		       8b		      .byte.b	139	;R (37)
    539  5cc7		       1c		      .byte.b	28	;G
    540  5cc8		       00		      .byte.b	0	;B
    541  5cc9		       81		      .byte.b	129	;R (36)
    542  5cca		       9a		      .byte.b	154	;G
    543  5ccb		       04		      .byte.b	4	;B
    544  5ccc		       8e		      .byte.b	142	;R (35)
    545  5ccd		       9d		      .byte.b	157	;G
    546  5cce		       00		      .byte.b	0	;B
    547  5ccf		       2b		      .byte.b	43	;R (34)
    548  5cd0		       36		      .byte.b	54	;G
    549  5cd1		       00		      .byte.b	0	;B
    550  5cd2		       3a		      .byte.b	58	;R (33)
    551  5cd3		       0d		      .byte.b	13	;G
    552  5cd4		       00		      .byte.b	0	;B
    553  5cd5		       3e		      .byte.b	62	;R (32)
    554  5cd6		       85		      .byte.b	133	;G
    555  5cd7		       40		      .byte.b	64	;B
    556  5cd8		       fa		      .byte.b	250	;R (31)
    557  5cd9		       17		      .byte.b	23	;G
    558  5cda		       00		      .byte.b	0	;B
    559  5cdb		       ff		      .byte.b	255	;R (30)
    560  5cdc		       03		      .byte.b	3	;G
    561  5cdd		       00		      .byte.b	0	;B
    562  5cde		       fc		      .byte.b	252	;R (29)
    563  5cdf		       93		      .byte.b	147	;G
    564  5ce0		       00		      .byte.b	0	;B
    565  5ce1		       f7		      .byte.b	247	;R (28)
    566  5ce2		       81		      .byte.b	129	;G
    567  5ce3		       08		      .byte.b	8	;B
    568  5ce4		       ff		      .byte.b	255	;R (27)
    569  5ce5		       03		      .byte.b	3	;G
    570  5ce6		       00		      .byte.b	0	;B
    571  5ce7		       fe		      .byte.b	254	;R (26)
    572  5ce8		       2b		      .byte.b	43	;G
    573  5ce9		       00		      .byte.b	0	;B
    574  5cea		       fe		      .byte.b	254	;R (25)
    575  5ceb		       0a		      .byte.b	10	;G
    576  5cec		       00		      .byte.b	0	;B
    577  5ced		       fc		      .byte.b	252	;R (24)
    578  5cee		       4f		      .byte.b	79	;G
    579  5cef		       00		      .byte.b	0	;B
    580  5cf0		       fc		      .byte.b	252	;R (23)
    581  5cf1		       55		      .byte.b	85	;G
    582  5cf2		       00		      .byte.b	0	;B
    583  5cf3		       f8		      .byte.b	248	;R (22)
    584  5cf4		       45		      .byte.b	69	;G
    585  5cf5		       00		      .byte.b	0	;B
    586  5cf6		       e8		      .byte.b	232	;R (21)
    587  5cf7		       05		      .byte.b	5	;G
    588  5cf8		       10		      .byte.b	16	;B
    589  5cf9		       f8		      .byte.b	248	;R (20)
    590  5cfa		       5b		      .byte.b	91	;G
    591  5cfb		       00		      .byte.b	0	;B
    592  5cfc		       f8		      .byte.b	248	;R (19)
    593  5cfd		       1d		      .byte.b	29	;G
    594  5cfe		       00		      .byte.b	0	;B
    595  5cff		       f0		      .byte.b	240	;R (18)
    596  5d00		       55		      .byte.b	85	;G
    597  5d01		       00		      .byte.b	0	;B
    598  5d02		       f0		      .byte.b	240	;R (17)
    599  5d03		       16		      .byte.b	22	;G
    600  5d04		       00		      .byte.b	0	;B
    601  5d05		       f0		      .byte.b	240	;R (16)
    602  5d06		       b2		      .byte.b	178	;G
    603  5d07		       00		      .byte.b	0	;B
    604  5d08		       e0		      .byte.b	224	;R (15)
    605  5d09		       0e		      .byte.b	14	;G
    606  5d0a		       10		      .byte.b	16	;B
    607  5d0b		       f0		      .byte.b	240	;R (14)
    608  5d0c		       93		      .byte.b	147	;G
    609  5d0d		       00		      .byte.b	0	;B
    610  5d0e		       e0		      .byte.b	224	;R (13)
    611  5d0f		       25		      .byte.b	37	;G
    612  5d10		       00		      .byte.b	0	;B
    613  5d11		       c0		      .byte.b	192	;R (12)
    614  5d12		       e5		      .byte.b	229	;G
    615  5d13		       00		      .byte.b	0	;B
    616  5d14		       80		      .byte.b	128	;R (11)
    617  5d15		       0e		      .byte.b	14	;G
    618  5d16		       00		      .byte.b	0	;B
    619  5d17		       c0		      .byte.b	192	;R (10)
    620  5d18		       ca		      .byte.b	202	;G
    621  5d19		       00		      .byte.b	0	;B
    622  5d1a		       84		      .byte.b	132	;R (9)
    623  5d1b		       8e		      .byte.b	142	;G
    624  5d1c		       00		      .byte.b	0	;B
    625  5d1d		       00		      .byte.b	0	;R (8)
    626  5d1e		       8e		      .byte.b	142	;G
    627  5d1f		       00		      .byte.b	0	;B
    628  5d20		       00		      .byte.b	0	;R (7)
    629  5d21		       15		      .byte.b	21	;G
    630  5d22		       00		      .byte.b	0	;B
    631  5d23		       00		      .byte.b	0	;R (6)
    632  5d24		       14		      .byte.b	20	;G
    633  5d25		       00		      .byte.b	0	;B
    634  5d26		       00		      .byte.b	0	;R (5)
    635  5d27		       14		      .byte.b	20	;G
    636  5d28		       00		      .byte.b	0	;B
    637  5d29		       00		      .byte.b	0	;R (4)
    638  5d2a		       0a		      .byte.b	10	;G
    639  5d2b		       00		      .byte.b	0	;B
    640  5d2c		       00		      .byte.b	0	;R (3)
    641  5d2d		       10		      .byte.b	16	;G
    642  5d2e		       00		      .byte.b	0	;B
    643  5d2f		       08		      .byte.b	8	;R (2)
    644  5d30		       88		      .byte.b	136	;G
    645  5d31		       00		      .byte.b	0	;B
    646  5d32		       40		      .byte.b	64	;R (1)
    647  5d33		       42		      .byte.b	66	;G
    648  5d34		       00		      .byte.b	0	;B
    649  5d35		       00		      .byte.b	0	;R (0)
    650  5d36		       00		      .byte.b	0	;G
    651  5d37		       00		      .byte.b	0	;B
    652  5d38				   COL_3
    653  5d38		       90		      .byte.b	144	;R (71)
    654  5d39		       90		      .byte.b	144	;G
    655  5d3a		       00		      .byte.b	0	;B
    656  5d3b		       40		      .byte.b	64	;R (70)
    657  5d3c		       40		      .byte.b	64	;G
    658  5d3d		       00		      .byte.b	0	;B
    659  5d3e		       b0		      .byte.b	176	;R (69)
    660  5d3f		       b0		      .byte.b	176	;G
    661  5d40		       00		      .byte.b	0	;B
    662  5d41		       d0		      .byte.b	208	;R (68)
    663  5d42		       00		      .byte.b	0	;G
    664  5d43		       20		      .byte.b	32	;B
    665  5d44		       f0		      .byte.b	240	;R (67)
    666  5d45		       00		      .byte.b	0	;G
    667  5d46		       00		      .byte.b	0	;B
    668  5d47		       f0		      .byte.b	240	;R (66)
    669  5d48		       d0		      .byte.b	208	;G
    670  5d49		       00		      .byte.b	0	;B
    671  5d4a		       f0		      .byte.b	240	;R (65)
    672  5d4b		       00		      .byte.b	0	;G
    673  5d4c		       00		      .byte.b	0	;B
    674  5d4d		       f0		      .byte.b	240	;R (64)
    675  5d4e		       00		      .byte.b	0	;G
    676  5d4f		       00		      .byte.b	0	;B
    677  5d50		       f0		      .byte.b	240	;R (63)
    678  5d51		       50		      .byte.b	80	;G
    679  5d52		       00		      .byte.b	0	;B
    680  5d53		       f0		      .byte.b	240	;R (62)
    681  5d54		       00		      .byte.b	0	;G
    682  5d55		       00		      .byte.b	0	;B
    683  5d56		       f0		      .byte.b	240	;R (61)
    684  5d57		       a0		      .byte.b	160	;G
    685  5d58		       00		      .byte.b	0	;B
    686  5d59		       f0		      .byte.b	240	;R (60)
    687  5d5a		       00		      .byte.b	0	;G
    688  5d5b		       00		      .byte.b	0	;B
    689  5d5c		       f0		      .byte.b	240	;R (59)
    690  5d5d		       d0		      .byte.b	208	;G
    691  5d5e		       00		      .byte.b	0	;B
    692  5d5f		       f0		      .byte.b	240	;R (58)
    693  5d60		       c0		      .byte.b	192	;G
    694  5d61		       00		      .byte.b	0	;B
    695  5d62		       f0		      .byte.b	240	;R (57)
    696  5d63		       90		      .byte.b	144	;G
    697  5d64		       00		      .byte.b	0	;B
    698  5d65		       f0		      .byte.b	240	;R (56)
    699  5d66		       80		      .byte.b	128	;G
    700  5d67		       00		      .byte.b	0	;B
    701  5d68		       f0		      .byte.b	240	;R (55)
    702  5d69		       40		      .byte.b	64	;G
    703  5d6a		       00		      .byte.b	0	;B
    704  5d6b		       70		      .byte.b	112	;R (54)
    705  5d6c		       00		      .byte.b	0	;G
    706  5d6d		       80		      .byte.b	128	;B
    707  5d6e		       d0		      .byte.b	208	;R (53)
    708  5d6f		       00		      .byte.b	0	;G
    709  5d70		       20		      .byte.b	32	;B
    710  5d71		       f0		      .byte.b	240	;R (52)
    711  5d72		       80		      .byte.b	128	;G
    712  5d73		       00		      .byte.b	0	;B
    713  5d74		       f0		      .byte.b	240	;R (51)
    714  5d75		       00		      .byte.b	0	;G
    715  5d76		       00		      .byte.b	0	;B
    716  5d77		       f0		      .byte.b	240	;R (50)
    717  5d78		       a0		      .byte.b	160	;G
    718  5d79		       00		      .byte.b	0	;B
    719  5d7a		       f0		      .byte.b	240	;R (49)
    720  5d7b		       80		      .byte.b	128	;G
    721  5d7c		       00		      .byte.b	0	;B
    722  5d7d		       f0		      .byte.b	240	;R (48)
    723  5d7e		       40		      .byte.b	64	;G
    724  5d7f		       00		      .byte.b	0	;B
    725  5d80		       f0		      .byte.b	240	;R (47)
    726  5d81		       20		      .byte.b	32	;G
    727  5d82		       00		      .byte.b	0	;B
    728  5d83		       f0		      .byte.b	240	;R (46)
    729  5d84		       00		      .byte.b	0	;G
    730  5d85		       00		      .byte.b	0	;B
    731  5d86		       f0		      .byte.b	240	;R (45)
    732  5d87		       80		      .byte.b	128	;G
    733  5d88		       00		      .byte.b	0	;B
    734  5d89		       f0		      .byte.b	240	;R (44)
    735  5d8a		       00		      .byte.b	0	;G
    736  5d8b		       00		      .byte.b	0	;B
    737  5d8c		       f0		      .byte.b	240	;R (43)
    738  5d8d		       40		      .byte.b	64	;G
    739  5d8e		       00		      .byte.b	0	;B
    740  5d8f		       f0		      .byte.b	240	;R (42)
    741  5d90		       00		      .byte.b	0	;G
    742  5d91		       00		      .byte.b	0	;B
    743  5d92		       f0		      .byte.b	240	;R (41)
    744  5d93		       20		      .byte.b	32	;G
    745  5d94		       00		      .byte.b	0	;B
    746  5d95		       f0		      .byte.b	240	;R (40)
    747  5d96		       20		      .byte.b	32	;G
    748  5d97		       00		      .byte.b	0	;B
    749  5d98		       f0		      .byte.b	240	;R (39)
    750  5d99		       50		      .byte.b	80	;G
    751  5d9a		       00		      .byte.b	0	;B
    752  5d9b		       f0		      .byte.b	240	;R (38)
    753  5d9c		       10		      .byte.b	16	;G
    754  5d9d		       00		      .byte.b	0	;B
    755  5d9e		       70		      .byte.b	112	;R (37)
    756  5d9f		       80		      .byte.b	128	;G
    757  5da0		       80		      .byte.b	128	;B
    758  5da1		       f0		      .byte.b	240	;R (36)
    759  5da2		       50		      .byte.b	80	;G
    760  5da3		       00		      .byte.b	0	;B
    761  5da4		       f0		      .byte.b	240	;R (35)
    762  5da5		       00		      .byte.b	0	;G
    763  5da6		       00		      .byte.b	0	;B
    764  5da7		       f0		      .byte.b	240	;R (34)
    765  5da8		       40		      .byte.b	64	;G
    766  5da9		       00		      .byte.b	0	;B
    767  5daa		       f0		      .byte.b	240	;R (33)
    768  5dab		       10		      .byte.b	16	;G
    769  5dac		       00		      .byte.b	0	;B
    770  5dad		       f0		      .byte.b	240	;R (32)
    771  5dae		       b0		      .byte.b	176	;G
    772  5daf		       00		      .byte.b	0	;B
    773  5db0		       e0		      .byte.b	224	;R (31)
    774  5db1		       00		      .byte.b	0	;G
    775  5db2		       10		      .byte.b	16	;B
    776  5db3		       e0		      .byte.b	224	;R (30)
    777  5db4		       40		      .byte.b	64	;G
    778  5db5		       00		      .byte.b	0	;B
    779  5db6		       e0		      .byte.b	224	;R (29)
    780  5db7		       20		      .byte.b	32	;G
    781  5db8		       00		      .byte.b	0	;B
    782  5db9		       c0		      .byte.b	192	;R (28)
    783  5dba		       00		      .byte.b	0	;G
    784  5dbb		       00		      .byte.b	0	;B
    785  5dbc		       c0		      .byte.b	192	;R (27)
    786  5dbd		       10		      .byte.b	16	;G
    787  5dbe		       00		      .byte.b	0	;B
    788  5dbf		       c0		      .byte.b	192	;R (26)
    789  5dc0		       40		      .byte.b	64	;G
    790  5dc1		       10		      .byte.b	16	;B
    791  5dc2		       90		      .byte.b	144	;R (25)
    792  5dc3		       00		      .byte.b	0	;G
    793  5dc4		       00		      .byte.b	0	;B
    794  5dc5		       f0		      .byte.b	240	;R (24)
    795  5dc6		       60		      .byte.b	96	;G
    796  5dc7		       00		      .byte.b	0	;B
    797  5dc8		       f0		      .byte.b	240	;R (23)
    798  5dc9		       00		      .byte.b	0	;G
    799  5dca		       00		      .byte.b	0	;B
    800  5dcb		       f0		      .byte.b	240	;R (22)
    801  5dcc		       40		      .byte.b	64	;G
    802  5dcd		       00		      .byte.b	0	;B
    803  5dce		       f0		      .byte.b	240	;R (21)
    804  5dcf		       10		      .byte.b	16	;G
    805  5dd0		       00		      .byte.b	0	;B
    806  5dd1		       f0		      .byte.b	240	;R (20)
    807  5dd2		       00		      .byte.b	0	;G
    808  5dd3		       00		      .byte.b	0	;B
    809  5dd4		       f0		      .byte.b	240	;R (19)
    810  5dd5		       60		      .byte.b	96	;G
    811  5dd6		       00		      .byte.b	0	;B
    812  5dd7		       f0		      .byte.b	240	;R (18)
    813  5dd8		       20		      .byte.b	32	;G
    814  5dd9		       00		      .byte.b	0	;B
    815  5dda		       f0		      .byte.b	240	;R (17)
    816  5ddb		       50		      .byte.b	80	;G
    817  5ddc		       00		      .byte.b	0	;B
    818  5ddd		       f0		      .byte.b	240	;R (16)
    819  5dde		       40		      .byte.b	64	;G
    820  5ddf		       00		      .byte.b	0	;B
    821  5de0		       f0		      .byte.b	240	;R (15)
    822  5de1		       80		      .byte.b	128	;G
    823  5de2		       00		      .byte.b	0	;B
    824  5de3		       f0		      .byte.b	240	;R (14)
    825  5de4		       40		      .byte.b	64	;G
    826  5de5		       00		      .byte.b	0	;B
    827  5de6		       f0		      .byte.b	240	;R (13)
    828  5de7		       00		      .byte.b	0	;G
    829  5de8		       00		      .byte.b	0	;B
    830  5de9		       f0		      .byte.b	240	;R (12)
    831  5dea		       10		      .byte.b	16	;G
    832  5deb		       00		      .byte.b	0	;B
    833  5dec		       f0		      .byte.b	240	;R (11)
    834  5ded		       50		      .byte.b	80	;G
    835  5dee		       00		      .byte.b	0	;B
    836  5def		       f0		      .byte.b	240	;R (10)
    837  5df0		       00		      .byte.b	0	;G
    838  5df1		       00		      .byte.b	0	;B
    839  5df2		       f0		      .byte.b	240	;R (9)
    840  5df3		       b0		      .byte.b	176	;G
    841  5df4		       00		      .byte.b	0	;B
    842  5df5		       f0		      .byte.b	240	;R (8)
    843  5df6		       90		      .byte.b	144	;G
    844  5df7		       00		      .byte.b	0	;B
    845  5df8		       e0		      .byte.b	224	;R (7)
    846  5df9		       e0		      .byte.b	224	;G
    847  5dfa		       00		      .byte.b	0	;B
    848  5dfb		       f0		      .byte.b	240	;R (6)
    849  5dfc		       d0		      .byte.b	208	;G
    850  5dfd		       00		      .byte.b	0	;B
    851  5dfe		       60		      .byte.b	96	;R (5)
    852  5dff		       00		      .byte.b	0	;G
    853  5e00		       00		      .byte.b	0	;B
    854  5e01		       60		      .byte.b	96	;R (4)
    855  5e02		       40		      .byte.b	64	;G
    856  5e03		       00		      .byte.b	0	;B
    857  5e04		       40		      .byte.b	64	;R (3)
    858  5e05		       50		      .byte.b	80	;G
    859  5e06		       00		      .byte.b	0	;B
    860  5e07		       00		      .byte.b	0	;R (2)
    861  5e08		       00		      .byte.b	0	;G
    862  5e09		       00		      .byte.b	0	;B
    863  5e0a		       00		      .byte.b	0	;R (1)
    864  5e0b		       80		      .byte.b	128	;G
    865  5e0c		       00		      .byte.b	0	;B
    866  5e0d		       00		      .byte.b	0	;R (0)
    867  5e0e		       00		      .byte.b	0	;G
    868  5e0f		       00		      .byte.b	0	;B
    869  5e10				   COL_4
    870  5e10		       25		      .byte.b	37	;R (71)
    871  5e11		       25		      .byte.b	37	;G
    872  5e12		       00		      .byte.b	0	;B
    873  5e13		       48		      .byte.b	72	;R (70)
    874  5e14		       48		      .byte.b	72	;G
    875  5e15		       00		      .byte.b	0	;B
    876  5e16		       25		      .byte.b	37	;R (69)
    877  5e17		       25		      .byte.b	37	;G
    878  5e18		       88		      .byte.b	136	;B
    879  5e19		       ff		      .byte.b	255	;R (68)
    880  5e1a		       00		      .byte.b	0	;G
    881  5e1b		       00		      .byte.b	0	;B
    882  5e1c		       ff		      .byte.b	255	;R (67)
    883  5e1d		       04		      .byte.b	4	;G
    884  5e1e		       00		      .byte.b	0	;B
    885  5e1f		       ef		      .byte.b	239	;R (66)
    886  5e20		       40		      .byte.b	64	;G
    887  5e21		       10		      .byte.b	16	;B
    888  5e22		       ff		      .byte.b	255	;R (65)
    889  5e23		       00		      .byte.b	0	;G
    890  5e24		       00		      .byte.b	0	;B
    891  5e25		       ff		      .byte.b	255	;R (64)
    892  5e26		       02		      .byte.b	2	;G
    893  5e27		       00		      .byte.b	0	;B
    894  5e28		       ff		      .byte.b	255	;R (63)
    895  5e29		       20		      .byte.b	32	;G
    896  5e2a		       00		      .byte.b	0	;B
    897  5e2b		       ff		      .byte.b	255	;R (62)
    898  5e2c		       a5		      .byte.b	165	;G
    899  5e2d		       00		      .byte.b	0	;B
    900  5e2e		       ff		      .byte.b	255	;R (61)
    901  5e2f		       09		      .byte.b	9	;G
    902  5e30		       00		      .byte.b	0	;B
    903  5e31		       ff		      .byte.b	255	;R (60)
    904  5e32		       00		      .byte.b	0	;G
    905  5e33		       00		      .byte.b	0	;B
    906  5e34		       7f		      .byte.b	127	;R (59)
    907  5e35		       42		      .byte.b	66	;G
    908  5e36		       80		      .byte.b	128	;B
    909  5e37		       ff		      .byte.b	255	;R (58)
    910  5e38		       88		      .byte.b	136	;G
    911  5e39		       00		      .byte.b	0	;B
    912  5e3a		       ff		      .byte.b	255	;R (57)
    913  5e3b		       40		      .byte.b	64	;G
    914  5e3c		       00		      .byte.b	0	;B
    915  5e3d		       ff		      .byte.b	255	;R (56)
    916  5e3e		       09		      .byte.b	9	;G
    917  5e3f		       00		      .byte.b	0	;B
    918  5e40		       7f		      .byte.b	127	;R (55)
    919  5e41		       01		      .byte.b	1	;G
    920  5e42		       80		      .byte.b	128	;B
    921  5e43		       ff		      .byte.b	255	;R (54)
    922  5e44		       91		      .byte.b	145	;G
    923  5e45		       00		      .byte.b	0	;B
    924  5e46		       fe		      .byte.b	254	;R (53)
    925  5e47		       81		      .byte.b	129	;G
    926  5e48		       00		      .byte.b	0	;B
    927  5e49		       fe		      .byte.b	254	;R (52)
    928  5e4a		       20		      .byte.b	32	;G
    929  5e4b		       00		      .byte.b	0	;B
    930  5e4c		       ff		      .byte.b	255	;R (51)
    931  5e4d		       03		      .byte.b	3	;G
    932  5e4e		       00		      .byte.b	0	;B
    933  5e4f		       ff		      .byte.b	255	;R (50)
    934  5e50		       83		      .byte.b	131	;G
    935  5e51		       00		      .byte.b	0	;B
    936  5e52		       fe		      .byte.b	254	;R (49)
    937  5e53		       90		      .byte.b	144	;G
    938  5e54		       00		      .byte.b	0	;B
    939  5e55		       fe		      .byte.b	254	;R (48)
    940  5e56		       83		      .byte.b	131	;G
    941  5e57		       00		      .byte.b	0	;B
    942  5e58		       7e		      .byte.b	126	;R (47)
    943  5e59		       12		      .byte.b	18	;G
    944  5e5a		       80		      .byte.b	128	;B
    945  5e5b		       fc		      .byte.b	252	;R (46)
    946  5e5c		       00		      .byte.b	0	;G
    947  5e5d		       00		      .byte.b	0	;B
    948  5e5e		       fe		      .byte.b	254	;R (45)
    949  5e5f		       07		      .byte.b	7	;G
    950  5e60		       00		      .byte.b	0	;B
    951  5e61		       ef		      .byte.b	239	;R (44)
    952  5e62		       03		      .byte.b	3	;G
    953  5e63		       10		      .byte.b	16	;B
    954  5e64		       ff		      .byte.b	255	;R (43)
    955  5e65		       40		      .byte.b	64	;G
    956  5e66		       00		      .byte.b	0	;B
    957  5e67		       ff		      .byte.b	255	;R (42)
    958  5e68		       01		      .byte.b	1	;G
    959  5e69		       00		      .byte.b	0	;B
    960  5e6a		       ff		      .byte.b	255	;R (41)
    961  5e6b		       01		      .byte.b	1	;G
    962  5e6c		       00		      .byte.b	0	;B
    963  5e6d		       bf		      .byte.b	191	;R (40)
    964  5e6e		       01		      .byte.b	1	;G
    965  5e6f		       40		      .byte.b	64	;B
    966  5e70		       f7		      .byte.b	247	;R (39)
    967  5e71		       80		      .byte.b	128	;G
    968  5e72		       08		      .byte.b	8	;B
    969  5e73		       ff		      .byte.b	255	;R (38)
    970  5e74		       40		      .byte.b	64	;G
    971  5e75		       00		      .byte.b	0	;B
    972  5e76		       ff		      .byte.b	255	;R (37)
    973  5e77		       00		      .byte.b	0	;G
    974  5e78		       00		      .byte.b	0	;B
    975  5e79		       ff		      .byte.b	255	;R (36)
    976  5e7a		       40		      .byte.b	64	;G
    977  5e7b		       00		      .byte.b	0	;B
    978  5e7c		       ff		      .byte.b	255	;R (35)
    979  5e7d		       a1		      .byte.b	161	;G
    980  5e7e		       00		      .byte.b	0	;B
    981  5e7f		       7f		      .byte.b	127	;R (34)
    982  5e80		       05		      .byte.b	5	;G
    983  5e81		       80		      .byte.b	128	;B
    984  5e82		       ff		      .byte.b	255	;R (33)
    985  5e83		       21		      .byte.b	33	;G
    986  5e84		       00		      .byte.b	0	;B
    987  5e85		       bf		      .byte.b	191	;R (32)
    988  5e86		       40		      .byte.b	64	;G
    989  5e87		       40		      .byte.b	64	;B
    990  5e88		       ff		      .byte.b	255	;R (31)
    991  5e89		       61		      .byte.b	97	;G
    992  5e8a		       00		      .byte.b	0	;B
    993  5e8b		       7f		      .byte.b	127	;R (30)
    994  5e8c		       81		      .byte.b	129	;G
    995  5e8d		       80		      .byte.b	128	;B
    996  5e8e		       f7		      .byte.b	247	;R (29)
    997  5e8f		       60		      .byte.b	96	;G
    998  5e90		       08		      .byte.b	8	;B
    999  5e91		       ff		      .byte.b	255	;R (28)
   1000  5e92		       81		      .byte.b	129	;G
   1001  5e93		       00		      .byte.b	0	;B
   1002  5e94		       ef		      .byte.b	239	;R (27)
   1003  5e95		       40		      .byte.b	64	;G
   1004  5e96		       10		      .byte.b	16	;B
   1005  5e97		       ff		      .byte.b	255	;R (26)
   1006  5e98		       60		      .byte.b	96	;G
   1007  5e99		       00		      .byte.b	0	;B
   1008  5e9a		       ff		      .byte.b	255	;R (25)
   1009  5e9b		       18		      .byte.b	24	;G
   1010  5e9c		       00		      .byte.b	0	;B
   1011  5e9d		       ff		      .byte.b	255	;R (24)
   1012  5e9e		       20		      .byte.b	32	;G
   1013  5e9f		       00		      .byte.b	0	;B
   1014  5ea0		       ff		      .byte.b	255	;R (23)
   1015  5ea1		       8a		      .byte.b	138	;G
   1016  5ea2		       00		      .byte.b	0	;B
   1017  5ea3		       f7		      .byte.b	247	;R (22)
   1018  5ea4		       10		      .byte.b	16	;G
   1019  5ea5		       08		      .byte.b	8	;B
   1020  5ea6		       ff		      .byte.b	255	;R (21)
   1021  5ea7		       04		      .byte.b	4	;G
   1022  5ea8		       00		      .byte.b	0	;B
   1023  5ea9		       df		      .byte.b	223	;R (20)
   1024  5eaa		       10		      .byte.b	16	;G
   1025  5eab		       20		      .byte.b	32	;B
   1026  5eac		       ff		      .byte.b	255	;R (19)
   1027  5ead		       90		      .byte.b	144	;G
   1028  5eae		       00		      .byte.b	0	;B
   1029  5eaf		       ff		      .byte.b	255	;R (18)
   1030  5eb0		       12		      .byte.b	18	;G
   1031  5eb1		       00		      .byte.b	0	;B
   1032  5eb2		       ff		      .byte.b	255	;R (17)
   1033  5eb3		       00		      .byte.b	0	;G
   1034  5eb4		       00		      .byte.b	0	;B
   1035  5eb5		       ff		      .byte.b	255	;R (16)
   1036  5eb6		       45		      .byte.b	69	;G
   1037  5eb7		       00		      .byte.b	0	;B
   1038  5eb8		       ff		      .byte.b	255	;R (15)
   1039  5eb9		       10		      .byte.b	16	;G
   1040  5eba		       00		      .byte.b	0	;B
   1041  5ebb		       ff		      .byte.b	255	;R (14)
   1042  5ebc		       23		      .byte.b	35	;G
   1043  5ebd		       00		      .byte.b	0	;B
   1044  5ebe		       fc		      .byte.b	252	;R (13)
   1045  5ebf		       12		      .byte.b	18	;G
   1046  5ec0		       00		      .byte.b	0	;B
   1047  5ec1		       fc		      .byte.b	252	;R (12)
   1048  5ec2		       20		      .byte.b	32	;G
   1049  5ec3		       00		      .byte.b	0	;B
   1050  5ec4		       fe		      .byte.b	254	;R (11)
   1051  5ec5		       46		      .byte.b	70	;G
   1052  5ec6		       00		      .byte.b	0	;B
   1053  5ec7		       f8		      .byte.b	248	;R (10)
   1054  5ec8		       48		      .byte.b	72	;G
   1055  5ec9		       00		      .byte.b	0	;B
   1056  5eca		       f0		      .byte.b	240	;R (9)
   1057  5ecb		       04		      .byte.b	4	;G
   1058  5ecc		       00		      .byte.b	0	;B
   1059  5ecd		       e0		      .byte.b	224	;R (8)
   1060  5ece		       20		      .byte.b	32	;G
   1061  5ecf		       00		      .byte.b	0	;B
   1062  5ed0		       e0		      .byte.b	224	;R (7)
   1063  5ed1		       29		      .byte.b	41	;G
   1064  5ed2		       00		      .byte.b	0	;B
   1065  5ed3		       e0		      .byte.b	224	;R (6)
   1066  5ed4		       20		      .byte.b	32	;G
   1067  5ed5		       00		      .byte.b	0	;B
   1068  5ed6		       e0		      .byte.b	224	;R (5)
   1069  5ed7		       84		      .byte.b	132	;G
   1070  5ed8		       00		      .byte.b	0	;B
   1071  5ed9		       60		      .byte.b	96	;R (4)
   1072  5eda		       40		      .byte.b	64	;G
   1073  5edb		       00		      .byte.b	0	;B
   1074  5edc		       00		      .byte.b	0	;R (3)
   1075  5edd		       88		      .byte.b	136	;G
   1076  5ede		       00		      .byte.b	0	;B
   1077  5edf		       00		      .byte.b	0	;R (2)
   1078  5ee0		       11		      .byte.b	17	;G
   1079  5ee1		       00		      .byte.b	0	;B
   1080  5ee2		       24		      .byte.b	36	;R (1)
   1081  5ee3		       24		      .byte.b	36	;G
   1082  5ee4		       00		      .byte.b	0	;B
   1083  5ee5		       00		      .byte.b	0	;R (0)
   1084  5ee6		       00		      .byte.b	0	;G
   1085  5ee7		       00		      .byte.b	0	;B
   1086  5ee8				   COL_5
   1087  5ee8		       02		      .byte.b	2	;R (71)
   1088  5ee9		       12		      .byte.b	18	;G
   1089  5eea		       00		      .byte.b	0	;B
   1090  5eeb		       00		      .byte.b	0	;R (70)
   1091  5eec		       00		      .byte.b	0	;G
   1092  5eed		       00		      .byte.b	0	;B
   1093  5eee		       00		      .byte.b	0	;R (69)
   1094  5eef		       02		      .byte.b	2	;G
   1095  5ef0		       00		      .byte.b	0	;B
   1096  5ef1		       03		      .byte.b	3	;R (68)
   1097  5ef2		       12		      .byte.b	18	;G
   1098  5ef3		       00		      .byte.b	0	;B
   1099  5ef4		       0b		      .byte.b	11	;R (67)
   1100  5ef5		       09		      .byte.b	9	;G
   1101  5ef6		       00		      .byte.b	0	;B
   1102  5ef7		       07		      .byte.b	7	;R (66)
   1103  5ef8		       05		      .byte.b	5	;G
   1104  5ef9		       00		      .byte.b	0	;B
   1105  5efa		       03		      .byte.b	3	;R (65)
   1106  5efb		       06		      .byte.b	6	;G
   1107  5efc		       00		      .byte.b	0	;B
   1108  5efd		       01		      .byte.b	1	;R (64)
   1109  5efe		       20		      .byte.b	32	;G
   1110  5eff		       00		      .byte.b	0	;B
   1111  5f00		       03		      .byte.b	3	;R (63)
   1112  5f01		       03		      .byte.b	3	;G
   1113  5f02		       00		      .byte.b	0	;B
   1114  5f03		       03		      .byte.b	3	;R (62)
   1115  5f04		       0a		      .byte.b	10	;G
   1116  5f05		       00		      .byte.b	0	;B
   1117  5f06		       03		      .byte.b	3	;R (61)
   1118  5f07		       02		      .byte.b	2	;G
   1119  5f08		       00		      .byte.b	0	;B
   1120  5f09		       03		      .byte.b	3	;R (60)
   1121  5f0a		       00		      .byte.b	0	;G
   1122  5f0b		       00		      .byte.b	0	;B
   1123  5f0c		       03		      .byte.b	3	;R (59)
   1124  5f0d		       0a		      .byte.b	10	;G
   1125  5f0e		       00		      .byte.b	0	;B
   1126  5f0f		       03		      .byte.b	3	;R (58)
   1127  5f10		       02		      .byte.b	2	;G
   1128  5f11		       00		      .byte.b	0	;B
   1129  5f12		       01		      .byte.b	1	;R (57)
   1130  5f13		       03		      .byte.b	3	;G
   1131  5f14		       00		      .byte.b	0	;B
   1132  5f15		       01		      .byte.b	1	;R (56)
   1133  5f16		       01		      .byte.b	1	;G
   1134  5f17		       00		      .byte.b	0	;B
   1135  5f18		       00		      .byte.b	0	;R (55)
   1136  5f19		       25		      .byte.b	37	;G
   1137  5f1a		       00		      .byte.b	0	;B
   1138  5f1b		       00		      .byte.b	0	;R (54)
   1139  5f1c		       00		      .byte.b	0	;G
   1140  5f1d		       00		      .byte.b	0	;B
   1141  5f1e		       00		      .byte.b	0	;R (53)
   1142  5f1f		       20		      .byte.b	32	;G
   1143  5f20		       00		      .byte.b	0	;B
   1144  5f21		       00		      .byte.b	0	;R (52)
   1145  5f22		       08		      .byte.b	8	;G
   1146  5f23		       00		      .byte.b	0	;B
   1147  5f24		       00		      .byte.b	0	;R (51)
   1148  5f25		       02		      .byte.b	2	;G
   1149  5f26		       00		      .byte.b	0	;B
   1150  5f27		       00		      .byte.b	0	;R (50)
   1151  5f28		       40		      .byte.b	64	;G
   1152  5f29		       00		      .byte.b	0	;B
   1153  5f2a		       00		      .byte.b	0	;R (49)
   1154  5f2b		       11		      .byte.b	17	;G
   1155  5f2c		       00		      .byte.b	0	;B
   1156  5f2d		       00		      .byte.b	0	;R (48)
   1157  5f2e		       00		      .byte.b	0	;G
   1158  5f2f		       00		      .byte.b	0	;B
   1159  5f30		       00		      .byte.b	0	;R (47)
   1160  5f31		       20		      .byte.b	32	;G
   1161  5f32		       00		      .byte.b	0	;B
   1162  5f33		       00		      .byte.b	0	;R (46)
   1163  5f34		       08		      .byte.b	8	;G
   1164  5f35		       00		      .byte.b	0	;B
   1165  5f36		       00		      .byte.b	0	;R (45)
   1166  5f37		       00		      .byte.b	0	;G
   1167  5f38		       00		      .byte.b	0	;B
   1168  5f39		       00		      .byte.b	0	;R (44)
   1169  5f3a		       24		      .byte.b	36	;G
   1170  5f3b		       00		      .byte.b	0	;B
   1171  5f3c		       00		      .byte.b	0	;R (43)
   1172  5f3d		       00		      .byte.b	0	;G
   1173  5f3e		       00		      .byte.b	0	;B
   1174  5f3f		       00		      .byte.b	0	;R (42)
   1175  5f40		       04		      .byte.b	4	;G
   1176  5f41		       00		      .byte.b	0	;B
   1177  5f42		       00		      .byte.b	0	;R (41)
   1178  5f43		       21		      .byte.b	33	;G
   1179  5f44		       00		      .byte.b	0	;B
   1180  5f45		       01		      .byte.b	1	;R (40)
   1181  5f46		       01		      .byte.b	1	;G
   1182  5f47		       00		      .byte.b	0	;B
   1183  5f48		       01		      .byte.b	1	;R (39)
   1184  5f49		       25		      .byte.b	37	;G
   1185  5f4a		       00		      .byte.b	0	;B
   1186  5f4b		       01		      .byte.b	1	;R (38)
   1187  5f4c		       01		      .byte.b	1	;G
   1188  5f4d		       00		      .byte.b	0	;B
   1189  5f4e		       03		      .byte.b	3	;R (37)
   1190  5f4f		       23		      .byte.b	35	;G
   1191  5f50		       00		      .byte.b	0	;B
   1192  5f51		       03		      .byte.b	3	;R (36)
   1193  5f52		       13		      .byte.b	19	;G
   1194  5f53		       00		      .byte.b	0	;B
   1195  5f54		       01		      .byte.b	1	;R (35)
   1196  5f55		       02		      .byte.b	2	;G
   1197  5f56		       00		      .byte.b	0	;B
   1198  5f57		       01		      .byte.b	1	;R (34)
   1199  5f58		       10		      .byte.b	16	;G
   1200  5f59		       00		      .byte.b	0	;B
   1201  5f5a		       03		      .byte.b	3	;R (33)
   1202  5f5b		       02		      .byte.b	2	;G
   1203  5f5c		       00		      .byte.b	0	;B
   1204  5f5d		       01		      .byte.b	1	;R (32)
   1205  5f5e		       08		      .byte.b	8	;G
   1206  5f5f		       00		      .byte.b	0	;B
   1207  5f60		       03		      .byte.b	3	;R (31)
   1208  5f61		       20		      .byte.b	32	;G
   1209  5f62		       00		      .byte.b	0	;B
   1210  5f63		       03		      .byte.b	3	;R (30)
   1211  5f64		       00		      .byte.b	0	;G
   1212  5f65		       00		      .byte.b	0	;B
   1213  5f66		       03		      .byte.b	3	;R (29)
   1214  5f67		       10		      .byte.b	16	;G
   1215  5f68		       00		      .byte.b	0	;B
   1216  5f69		       03		      .byte.b	3	;R (28)
   1217  5f6a		       00		      .byte.b	0	;G
   1218  5f6b		       00		      .byte.b	0	;B
   1219  5f6c		       07		      .byte.b	7	;R (27)
   1220  5f6d		       0e		      .byte.b	14	;G
   1221  5f6e		       00		      .byte.b	0	;B
   1222  5f6f		       03		      .byte.b	3	;R (26)
   1223  5f70		       41		      .byte.b	65	;G
   1224  5f71		       00		      .byte.b	0	;B
   1225  5f72		       07		      .byte.b	7	;R (25)
   1226  5f73		       04		      .byte.b	4	;G
   1227  5f74		       00		      .byte.b	0	;B
   1228  5f75		       03		      .byte.b	3	;R (24)
   1229  5f76		       21		      .byte.b	33	;G
   1230  5f77		       00		      .byte.b	0	;B
   1231  5f78		       03		      .byte.b	3	;R (23)
   1232  5f79		       04		      .byte.b	4	;G
   1233  5f7a		       00		      .byte.b	0	;B
   1234  5f7b		       03		      .byte.b	3	;R (22)
   1235  5f7c		       02		      .byte.b	2	;G
   1236  5f7d		       00		      .byte.b	0	;B
   1237  5f7e		       03		      .byte.b	3	;R (21)
   1238  5f7f		       26		      .byte.b	38	;G
   1239  5f80		       00		      .byte.b	0	;B
   1240  5f81		       01		      .byte.b	1	;R (20)
   1241  5f82		       01		      .byte.b	1	;G
   1242  5f83		       00		      .byte.b	0	;B
   1243  5f84		       00		      .byte.b	0	;R (19)
   1244  5f85		       21		      .byte.b	33	;G
   1245  5f86		       00		      .byte.b	0	;B
   1246  5f87		       01		      .byte.b	1	;R (18)
   1247  5f88		       09		      .byte.b	9	;G
   1248  5f89		       00		      .byte.b	0	;B
   1249  5f8a		       23		      .byte.b	35	;R (17)
   1250  5f8b		       22		      .byte.b	34	;G
   1251  5f8c		       00		      .byte.b	0	;B
   1252  5f8d		       01		      .byte.b	1	;R (16)
   1253  5f8e		       01		      .byte.b	1	;G
   1254  5f8f		       00		      .byte.b	0	;B
   1255  5f90		       00		      .byte.b	0	;R (15)
   1256  5f91		       29		      .byte.b	41	;G
   1257  5f92		       00		      .byte.b	0	;B
   1258  5f93		       00		      .byte.b	0	;R (14)
   1259  5f94		       00		      .byte.b	0	;G
   1260  5f95		       00		      .byte.b	0	;B
   1261  5f96		       00		      .byte.b	0	;R (13)
   1262  5f97		       04		      .byte.b	4	;G
   1263  5f98		       00		      .byte.b	0	;B
   1264  5f99		       00		      .byte.b	0	;R (12)
   1265  5f9a		       20		      .byte.b	32	;G
   1266  5f9b		       00		      .byte.b	0	;B
   1267  5f9c		       10		      .byte.b	16	;R (11)
   1268  5f9d		       12		      .byte.b	18	;G
   1269  5f9e		       00		      .byte.b	0	;B
   1270  5f9f		       00		      .byte.b	0	;R (10)
   1271  5fa0		       00		      .byte.b	0	;G
   1272  5fa1		       00		      .byte.b	0	;B
   1273  5fa2		       00		      .byte.b	0	;R (9)
   1274  5fa3		       21		      .byte.b	33	;G
   1275  5fa4		       00		      .byte.b	0	;B
   1276  5fa5		       00		      .byte.b	0	;R (8)
   1277  5fa6		       08		      .byte.b	8	;G
   1278  5fa7		       00		      .byte.b	0	;B
   1279  5fa8		       00		      .byte.b	0	;R (7)
   1280  5fa9		       20		      .byte.b	32	;G
   1281  5faa		       00		      .byte.b	0	;B
   1282  5fab		       00		      .byte.b	0	;R (6)
   1283  5fac		       04		      .byte.b	4	;G
   1284  5fad		       00		      .byte.b	0	;B
   1285  5fae		       20		      .byte.b	32	;R (5)
   1286  5faf		       20		      .byte.b	32	;G
   1287  5fb0		       00		      .byte.b	0	;B
   1288  5fb1		       00		      .byte.b	0	;R (4)
   1289  5fb2		       09		      .byte.b	9	;G
   1290  5fb3		       00		      .byte.b	0	;B
   1291  5fb4		       00		      .byte.b	0	;R (3)
   1292  5fb5		       00		      .byte.b	0	;G
   1293  5fb6		       00		      .byte.b	0	;B
   1294  5fb7		       00		      .byte.b	0	;R (2)
   1295  5fb8		       48		      .byte.b	72	;G
   1296  5fb9		       00		      .byte.b	0	;B
   1297  5fba		       02		      .byte.b	2	;R (1)
   1298  5fbb		       02		      .byte.b	2	;G
   1299  5fbc		       00		      .byte.b	0	;B
   1300  5fbd		       00		      .byte.b	0	;R (0)
   1301  5fbe		       00		      .byte.b	0	;G
   1302  5fbf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    265  5fc0							;    include "pizza.asm"
    266  5fc0
      0  5fc0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  5fc0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  5fc0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  5fc0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  5fc0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  5fc0				  -	      ERR
      6  5fc0					      endif
------- FILE ./chess.asm
------- FILE BANK_RECON.asm LEVEL 2 PASS 2
      0  5fc0					      include	"BANK_RECON.asm"
      0  5fc0					      NEWBANK	RECON
      1  6141 ????				      SEG	RECON
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   RECON      SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	RECON
      2  6000
      3  6000							;---------------------------------------------------------------------------------------------------
      4  6000
      0  6000					      DEF	UNSAFE_showMoveCaptures
      1  6000				   BANK_UNSAFE_showMoveCaptures SET	_CURRENT_BANK
      2  6000				   UNSAFE_showMoveCaptures
      3  6000				   TEMPORARY_VAR SET	Overlay
      4  6000				   TEMPORARY_OFFSET SET	0
      5  6000					      SUBROUTINE
      6  6000					      SUBROUTINE
      7  6000
      0  6000					      VAR	__toSquareX12, 1
      1  6000				   __toSquareX12 SET	TEMPORARY_VAR
      2  6000				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6000
      4  6000				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6000				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6000				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6000					      ENDIF
      8  6000				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6000				  -	      ECHO	"Temporary Variable", __toSquareX12, "overflow!"
     10  6000				  -	      ERR
     11  6000					      ENDIF
     12  6000					      LIST	ON
      0  6000					      VAR	__fromPiece, 1
      1  6000				   __fromPiece SET	TEMPORARY_VAR
      2  6000				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6000
      4  6000				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6000				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6000				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6000					      ENDIF
      8  6000				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6000				  -	      ECHO	"Temporary Variable", __fromPiece, "overflow!"
     10  6000				  -	      ERR
     11  6000					      ENDIF
     12  6000					      LIST	ON
      0  6000					      VAR	__aiMoveIndex, 1
      1  6000				   __aiMoveIndex SET	TEMPORARY_VAR
      2  6000				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6000
      4  6000				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6000				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6000				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6000					      ENDIF
      8  6000				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6000				  -	      ECHO	"Temporary Variable", __aiMoveIndex, "overflow!"
     10  6000				  -	      ERR
     11  6000					      ENDIF
     12  6000					      LIST	ON
     11  6000
     12  6000							; place a marker on the board for any square matching the piece
     13  6000							; EXCEPT for squares which are occupied (we'll flash those later)
     14  6000							; x = movelist item # being checked
     15  6000
     16  6000		       a5 8b		      lda	savedBank
     17  6002		       48		      pha
     18  6003
     19  6003		       a9 0c		      lda	#BANK_UNSAFE_showMoveCaptures
     20  6005		       85 8b		      sta	savedBank
     21  6007
     22  6007
     23  6007		       a6 90	   .next      ldx	aiMoveIndex
     24  6009		       86 a3		      stx	__aiMoveIndex
     25  600b		       30 3a		      bmi	.skip	; no moves in list
     26  600d
     27  600d		       c6 90		      dec	aiMoveIndex
     28  600f
     29  600f		       20 f4 fd 	      jsr	GetMoveFrom
     30  6012		       c5 8e		      cmp	aiFromSquareX12
     31  6014		       d0 f1		      bne	.next
     32  6016
     33  6016
     34  6016		       20 00 fe 	      jsr	GetMoveTo
     35  6019		       85 a1		      sta	__toSquareX12
     36  601b		       a8		      tay
     37  601c		       20 ae fc 	      jsr	GetBoard
     38  601f		       29 0f		      and	#PIECE_MASK
     39  6021		       f0 e4		      beq	.next
     40  6023
     41  6023							; There's something on the board at destination, so it's a capture
     42  6023							; Let's see if we are doing a pawn promote...
     43  6023
     44  6023		       a4 8e		      ldy	aiFromSquareX12
     45  6025		       20 ae fc 	      jsr	GetBoard
     46  6028		       85 a2		      sta	__fromPiece
     47  602a
     48  602a		       20 0c fe 	      jsr	GetMovePiece
     49  602d		       45 a2		      eor	__fromPiece
     50  602f		       29 0f		      and	#PIECE_MASK
     51  6031		       f0 06		      beq	.legit	; from == to, so not a promote
     52  6033
     53  6033							; Have detected a promotion duplicate - skip all 3 of them
     54  6033
     55  6033		       c6 90		      dec	aiMoveIndex	; skip "KBRQ" promotes
     56  6035		       c6 90		      dec	aiMoveIndex
     57  6037		       c6 90		      dec	aiMoveIndex
     58  6039
     59  6039				   .legit
     60  6039
      0  6039					      TIMECHECK	COPYSINGLEPIECE, restoreIndex	; not enough time to draw
      1  6039		       ad 84 02 	      lda	INTIM
      2  603c		       c9 22		      cmp	#SPEEDOF_COPYSINGLEPIECE
      3  603e		       90 0b		      bcc	restoreIndex
     62  6040
     63  6040		       a5 a1		      lda	__toSquareX12
     64  6042		       85 80		      sta	drawPieceNumberX12
     65  6044
     66  6044		       20 2f fd 	      jsr	SAFE_CopySinglePiece
     67  6047
     68  6047		       68	   .skip      pla
     69  6048		       85 8b		      sta	savedBank
     70  604a		       60		      rts
     71  604b
     72  604b		       a5 a3	   restoreIndex lda	__aiMoveIndex
     73  604d		       85 90		      sta	aiMoveIndex
     74  604f		       4c 47 f0 	      jmp	.skip
     75  6052
     76  6052
     77  6052							;---------------------------------------------------------------------------------------------------
     78  6052
      0  6052					      DEF	aiMarchToTargetA
      1  6052				   BANK_aiMarchToTargetA SET	_CURRENT_BANK
      2  6052				   aiMarchToTargetA
      3  6052				   TEMPORARY_VAR SET	Overlay
      4  6052				   TEMPORARY_OFFSET SET	0
      5  6052					      SUBROUTINE
     80  6052					      SUBROUTINE
     81  6052
      0  6052					      VAR	__fromRow, 1
      1  6052				   __fromRow  SET	TEMPORARY_VAR
      2  6052				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6052
      4  6052				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6052				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6052				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6052					      ENDIF
      8  6052				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6052				  -	      ECHO	"Temporary Variable", __fromRow, "overflow!"
     10  6052				  -	      ERR
     11  6052					      ENDIF
     12  6052					      LIST	ON
      0  6052					      VAR	__boardIndex, 1
      1  6052				   __boardIndex SET	TEMPORARY_VAR
      2  6052				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6052
      4  6052				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6052				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6052				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6052					      ENDIF
      8  6052				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6052				  -	      ECHO	"Temporary Variable", __boardIndex, "overflow!"
     10  6052				  -	      ERR
     11  6052					      ENDIF
     12  6052					      LIST	ON
      0  6052					      VAR	__fromCol, 1
      1  6052				   __fromCol  SET	TEMPORARY_VAR
      2  6052				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6052
      4  6052				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6052				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6052				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6052					      ENDIF
      8  6052				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6052				  -	      ECHO	"Temporary Variable", __fromCol, "overflow!"
     10  6052				  -	      ERR
     11  6052					      ENDIF
     12  6052					      LIST	ON
      0  6052					      VAR	__toCol, 1
      1  6052				   __toCol    SET	TEMPORARY_VAR
      2  6052				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6052
      4  6052				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6052				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6052				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6052					      ENDIF
      8  6052				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6052				  -	      ECHO	"Temporary Variable", __toCol, "overflow!"
     10  6052				  -	      ERR
     11  6052					      ENDIF
     12  6052					      LIST	ON
     86  6052
     87  6052
     88  6052							; Now we calculate move to new square
     89  6052
     90  6052		       a5 85		      lda	fromX12
     91  6054		       c5 86		      cmp	toX12
     92  6056		       f0 68		      beq	.unmovedx
     93  6058		       85 83		      sta	lastSquareX12
     94  605a
     95  605a		       38		      sec
     96  605b		       a2 fd		      ldx	#-3
     97  605d		       e9 0a	   .sub10     sbc	#10
     98  605f		       e8		      inx
     99  6060		       b0 fb		      bcs	.sub10
    100  6062		       69 08		      adc	#8
    101  6064		       85 a3		      sta	__fromCol
    102  6066		       86 a1		      stx	__fromRow
    103  6068
    104  6068		       a5 86		      lda	toX12
    105  606a		       38		      sec
    106  606b		       a2 fd		      ldx	#-3
    107  606d		       e9 0a	   .sub10b    sbc	#10
    108  606f		       e8		      inx
    109  6070		       b0 fb		      bcs	.sub10b
    110  6072		       69 08		      adc	#8
    111  6074		       85 a4		      sta	__toCol
    112  6076
    113  6076
    114  6076		       e4 a1		      cpx	__fromRow
    115  6078		       f0 13		      beq	.rowDone
    116  607a
    117  607a		       b0 0a		      bcs	.incRow
    118  607c
    119  607c		       38		      sec
    120  607d		       a5 85		      lda	fromX12
    121  607f		       e9 0a		      sbc	#10
    122  6081		       85 85		      sta	fromX12
    123  6083		       4c 8d f0 	      jmp	.rowDone
    124  6086
    125  6086		       18	   .incRow    clc
    126  6087		       a5 85		      lda	fromX12
    127  6089		       69 0a		      adc	#10
    128  608b		       85 85		      sta	fromX12
    129  608d
    130  608d				   .rowDone
    131  608d
    132  608d		       a5 a4		      lda	__toCol
    133  608f		       c5 a3		      cmp	__fromCol
    134  6091		       f0 09		      beq	.colDone
    135  6093
    136  6093		       b0 05		      bcs	.incCol
    137  6095
    138  6095		       c6 85		      dec	fromX12
    139  6097		       4c 9c f0 	      jmp	.colDone
    140  609a
    141  609a		       e6 85	   .incCol    inc	fromX12
    142  609c				   .colDone
    143  609c
    144  609c
    145  609c
    146  609c
    147  609c							; erase object in new sqare --> blank
    148  609c
    149  609c		       a4 85		      ldy	fromX12
    150  609e		       84 80		      sty	drawPieceNumberX12
    151  60a0
    152  60a0		       20 ae fc 	      jsr	GetBoard
    153  60a3		       c9 00		      cmp	#0
    154  60a5		       f0 03		      beq	.skipbl
    155  60a7		       20 2f fd 	      jsr	SAFE_CopySinglePiece	; erase next square along --> blank
    156  60aa
    157  60aa				   .skipbl
    158  60aa		       a4 85		      ldy	fromX12
    159  60ac		       84 a2		      sty	__boardIndex
    160  60ae
    161  60ae		       20 ae fc 	      jsr	GetBoard
    162  60b1		       85 9d		      sta	lastPiece	; what we are overwriting
    163  60b3		       a5 9c		      lda	fromPiece
    164  60b5							;ora #FLAG_MOVED		  ; prevents usage in castling for K/R
    165  60b5		       29 df		      and	#~FLAG_ENPASSANT
    166  60b7		       a4 a2		      ldy	__boardIndex
    167  60b9		       20 ba fc 	      jsr	PutBoard
    168  60bc
      0  60bc					      PHASE	AI_MarchB
      1  60bc		       a9 18		      lda	#AI_MarchB
      2  60be		       85 8c		      sta	aiPhase
    170  60c0
    171  60c0				   .unmovedx
    172  60c0		       60		      rts
    173  60c1
    174  60c1
    175  60c1							;---------------------------------------------------------------------------------------------------
    176  60c1
      0  60c1					      DEF	aiMarchB2
      1  60c1				   BANK_aiMarchB2 SET	_CURRENT_BANK
      2  60c1				   aiMarchB2
      3  60c1				   TEMPORARY_VAR SET	Overlay
      4  60c1				   TEMPORARY_OFFSET SET	0
      5  60c1					      SUBROUTINE
    178  60c1					      SUBROUTINE
    179  60c1
    180  60c1		       a4 83		      ldy	lastSquareX12
    181  60c3		       84 80		      sty	drawPieceNumberX12
    182  60c5
    183  60c5		       20 ae fc 	      jsr	GetBoard
    184  60c8		       c9 00		      cmp	#0
    185  60ca		       f0 03		      beq	.skipbl2
    186  60cc
    187  60cc		       20 2f fd 	      jsr	SAFE_CopySinglePiece	; draw previous piece back in old position
    188  60cf				   .skipbl2
    189  60cf
    190  60cf		       a5 85		      lda	fromX12
    191  60d1		       c5 86		      cmp	toX12
    192  60d3		       f0 09		      beq	xhalt
    193  60d5
    194  60d5		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    195  60d7		       85 82		      sta	drawDelay
      0  60d9					      PHASE	AI_MarchToTargetA
      1  60d9		       a9 17		      lda	#AI_MarchToTargetA
      2  60db		       85 8c		      sta	aiPhase
    197  60dd
    198  60dd		       60		      rts
    199  60de
    200  60de				   xhalt
    201  60de
    202  60de		       20 ee f0 	      jsr	FinaliseMove
    203  60e1
    204  60e1		       a9 04		      lda	#4	; on/off count
    205  60e3		       85 84		      sta	drawCount	; flashing for piece about to move
    206  60e5		       a9 00		      lda	#0
    207  60e7		       85 82		      sta	drawDelay
    208  60e9
      0  60e9					      PHASE	AI_FinalFlash
      1  60e9		       a9 1b		      lda	#AI_FinalFlash
      2  60eb		       85 8c		      sta	aiPhase
    210  60ed		       60		      rts
    211  60ee
    212  60ee
    213  60ee							;---------------------------------------------------------------------------------------------------
    214  60ee
      0  60ee					      DEF	FinaliseMove
      1  60ee				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  60ee				   FinaliseMove
      3  60ee				   TEMPORARY_VAR SET	Overlay
      4  60ee				   TEMPORARY_OFFSET SET	0
      5  60ee					      SUBROUTINE
    216  60ee					      SUBROUTINE
    217  60ee
    218  60ee							; Now the visible movement on the board has happened, fix up the pointers to the pieces
    219  60ee							; for both sides.
    220  60ee
    221  60ee		       a9 0c		      lda	#BANK_FinaliseMove
    222  60f0		       85 8b		      sta	savedBank
    223  60f2
    224  60f2		       a5 9b		      lda	sideToMove
    225  60f4		       0a		      asl
    226  60f5		       a9 09		      lda	#RAMBANK_PLY
    227  60f7		       69 00		      adc	#0
    228  60f9		       20 7a fd 	      jsr	GoFixPieceList
    229  60fc
    230  60fc		       a5 86		      lda	toX12
    231  60fe		       85 85		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
    232  6100		       85 87		      sta	originX12
    233  6102
    234  6102		       a9 00		      lda	#0
    235  6104		       85 86		      sta	toX12	; --> deleted (square=0)
    236  6106
    237  6106		       a5 9d		      lda	lastPiece
    238  6108		       f0 0c		      beq	.notake
    239  610a
    240  610a		       a5 9b		      lda	sideToMove
    241  610c		       49 80		      eor	#128
    242  610e		       0a		      asl
    243  610f		       a9 09		      lda	#RAMBANK_PLY
    244  6111		       69 00		      adc	#0
    245  6113		       20 7a fd 	      jsr	GoFixPieceList	; REMOVE any captured object
    246  6116
    247  6116		       60	   .notake    rts
    248  6117
    249  6117
    250  6117							;---------------------------------------------------------------------------------------------------
    251  6117
      0  6117					      DEF	aiMarchToTargetB
      1  6117				   BANK_aiMarchToTargetB SET	_CURRENT_BANK
      2  6117				   aiMarchToTargetB
      3  6117				   TEMPORARY_VAR SET	Overlay
      4  6117				   TEMPORARY_OFFSET SET	0
      5  6117					      SUBROUTINE
    253  6117					      SUBROUTINE
    254  6117
    255  6117							; now we want to undraw the piece in the old square
    256  6117
    257  6117		       a5 83		      lda	lastSquareX12
    258  6119		       85 80		      sta	drawPieceNumberX12
    259  611b
    260  611b		       20 2f fd 	      jsr	SAFE_CopySinglePiece	; erase whatever was on the previous square (completely blank)
    261  611e
    262  611e		       a4 83		      ldy	lastSquareX12
    263  6120		       a5 9e		      lda	previousPiece
    264  6122		       20 ba fc 	      jsr	PutBoard
    265  6125
    266  6125		       a5 9d		      lda	lastPiece
    267  6127		       85 9e		      sta	previousPiece
    268  6129
      0  6129					      PHASE	AI_MarchB2
      1  6129		       a9 1a		      lda	#AI_MarchB2
      2  612b		       85 8c		      sta	aiPhase
    270  612d		       60		      rts
    271  612e
    272  612e
    273  612e							;---------------------------------------------------------------------------------------------------
    274  612e
      0  612e					      DEF	aiGenerateMoves
      1  612e				   BANK_aiGenerateMoves SET	_CURRENT_BANK
      2  612e				   aiGenerateMoves
      3  612e				   TEMPORARY_VAR SET	Overlay
      4  612e				   TEMPORARY_OFFSET SET	0
      5  612e					      SUBROUTINE
    276  612e					      SUBROUTINE
    277  612e
    278  612e		       20 f4 f8 	      jsr	GenerateOneMove
    279  6131		       90 0d		      bcc	.wait
    280  6133
    281  6133							;lda currentPly
    282  6133							;sta SET_BANK_RAM
    283  6133							;jsr alphaBeta
    284  6133
    285  6133				  -	      if	PVSP
    286  6133				  -	      jmp	.player	;tmp
    287  6133					      endif
    288  6133
    289  6133		       a6 9b		      ldx	sideToMove
    290  6135		       10 05		      bpl	.player
    291  6137
    292  6137
      0  6137				   .computer  PHASE	AI_ComputerMove	; computer select move
      1  6137		       a9 14		      lda	#AI_ComputerMove
      2  6139		       85 8c		      sta	aiPhase
    294  613b		       60		      rts
    295  613c
    296  613c
      0  613c				   .player    PHASE	AI_StartMoveGen
      1  613c		       a9 0a		      lda	#AI_StartMoveGen
      2  613e		       85 8c		      sta	aiPhase
    298  6140		       60	   .wait      rts
    299  6141
    300  6141
    301  6141							;---------------------------------------------------------------------------------------------------
    302  6141
    303  6141
    304  6141
    305  6141							;---------------------------------------------------------------------------------------------------
    306  6141
      0  6141					      CHECK_BANK_SIZE	"BANK_RECON"
      1  6141		       01 41	   .TEMP      =	* - BANK_START
 BANK_RECON (2K) SIZE =  $141 , FREE= $6bf
      2  6141					      ECHO	"BANK_RECON", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  6141				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  6141				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  6141				  -	      ERR
      6  6141					      endif
    308  6141
    309  6141							; EOF
------- FILE ./chess.asm
    453  6141
    454  6141							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  6141					      include	"Handler_BANK1.asm"
      1  6141							; Copyright (C)2020 Andrew Davie
      2  6141
      3  6141							;---------------------------------------------------------------------------------------------------
      4  6141
      0  6141					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  6141
      2  6141
      3  6141
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  6bb3 ????				      SEG	MOVES
      2  6800					      ORG	ORIGIN
      3  6800					      RORG	$F000
      4  6800				   BANK_START SET	*
      5  6800				   MOVES      SET	ORIGIN / 2048
      6  6800				   ORIGIN     SET	ORIGIN + 2048
      7  6800				   _CURRENT_BANK SET	MOVES
      7  6800
      0  6800					      DEF	.GetBoard
      1  6800				   BANK_.GetBoard SET	_CURRENT_BANK
      2  6800				   .GetBoard
      3  6800				   TEMPORARY_VAR SET	Overlay
      4  6800				   TEMPORARY_OFFSET SET	0
      5  6800					      SUBROUTINE
      9  6800		       00 00 00 00	      ds	4	; dummy to switch here
     10  6804		       a6 8b		      ldx	savedBank
     11  6806		       b9 70 f0 	      lda	Board,y
     12  6809		       86 3e		      stx	SET_BANK_RAM
     13  680b		       00		      ds	1
     14  680c
     15  680c
     16  680c							; Board is a 10 x 12 object which simplifies the generation of moves
     17  680c							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     18  680c							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     19  680c							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     20  680c
     21  680c							;     X12 numbering
     22  680c							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     23  680c							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     24  680c							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     25  680c							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     26  680c							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     27  680c							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     28  680c							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     29  680c							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     30  680c							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     31  680c							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     32  680c							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     33  680c							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     34  680c							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     35  680c							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     36  680c							;	0   1	2   3	4   5	6   7	8   9
     37  680c							;		A   B	C   D	E   F	G   H
     38  680c
     39  680c							;     HEX X12
     40  680c							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     41  680c							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     42  680c							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     43  680c							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     44  680c							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     45  680c							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     46  680c							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     47  680c							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     48  680c							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     49  680c							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     50  680c							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     51  680c							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     52  680c							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     53  680c							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     54  680c							;	0   1	2   3	4   5	6   7	8   9
     55  680c							;		A   B	C   D	E   F	G   H
     56  680c
     57  680c
     58  680c							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     59  680c							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     60  680c							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     61  680c							; be re-used for something else - we just need to guarantee there are 22 of them there
     62  680c
      0  680c					      ALLOCATE	Valid, 120 + 80	;+ 22
      0  680c					      OPTIONAL_PAGEBREAK	"Table", 120 + 80
     10  680c					      LIST	ON
      0  680c					      DEF	Valid
      1  680c				   BANK_Valid SET	_CURRENT_BANK
      2  680c				   Valid
      3  680c				   TEMPORARY_VAR SET	Overlay
      4  680c				   TEMPORARY_OFFSET SET	0
      5  680c					      SUBROUTINE
     64  680c
     65  680c							;ORG Valid+22
     66  680c							;ds 22 		     ; so indexing of "ValidSquare-22,x" won't fail
     67  680c
     68  680c							; Note, we will never index INTO the above bytes - x will always be >= 22
     69  680c							; We just need to make sure that the actual indexing will not have an address before
     70  680c							; the index of outside the page.
     71  680c
      0  680c					      DEF	ValidSquare
      1  680c				   BANK_ValidSquare SET	_CURRENT_BANK
      2  680c				   ValidSquare
      3  680c				   TEMPORARY_VAR SET	Overlay
      4  680c				   TEMPORARY_OFFSET SET	0
      5  680c					      SUBROUTINE
     73  680c
     74  680c
     75  680c							; Use this table to
     76  680c							;   a) Determine if a square is valid (-1 = NO)
     77  680c							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     78  680c							;	if a white pawn on square "x" can move "up" the board.
     79  680c
     80  680c		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     81  6816		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     82  6820		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     83  682a		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     84  6834		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     85  683e		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     86  6848		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     87  6852		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     88  685c		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     89  6866		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     90  6870
      0  6870					      DEF	Board
      1  6870				   BANK_Board SET	_CURRENT_BANK
      2  6870				   Board
      3  6870				   TEMPORARY_VAR SET	Overlay
      4  6870				   TEMPORARY_OFFSET SET	0
      5  6870					      SUBROUTINE
     92  6870
     93  6870							; A 10X10... we should never write using invalid square
     94  6870							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     95  6870							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     96  6870
     97  6870		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     98  687a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     99  6884
    100  6884					      REPEAT	8
    101  6884		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  6884					      REPEND
    101  688e		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  688e					      REPEND
    101  6898		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  6898					      REPEND
    101  68a2		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  68a2					      REPEND
    101  68ac		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  68ac					      REPEND
    101  68b6		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  68b6					      REPEND
    101  68c0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    100  68c0					      REPEND
    101  68ca		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    102  68d4					      REPEND
    103  68d4
    104  68d4							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
    105  68d4
    106  68d4							; PARANOIA... following not used, but there in case above violated
    107  68d4							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    108  68d4							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    109  68d4
    110  68d4							;---------------------------------------------------------------------------------------------------
    111  68d4
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  68d4					      include	"Handler_QUEEN.asm"
      1  68d4							; Copyright (C)2020 Andrew Davie
      2  68d4
      3  68d4							;---------------------------------------------------------------------------------------------------
      4  68d4							; QUEEN
      5  68d4							;---------------------------------------------------------------------------------------------------
      6  68d4
      0  68d4					      DEF	Handle_QUEEN
      1  68d4				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  68d4				   Handle_QUEEN
      3  68d4				   TEMPORARY_VAR SET	Overlay
      4  68d4				   TEMPORARY_OFFSET SET	0
      5  68d4					      SUBROUTINE
      8  68d4					      SUBROUTINE
      9  68d4
     10  68d4							; Pass...
     11  68d4							; x = currentSquare (square the piece is on)
     12  68d4							; currentPiece (with flags/colour attached)
     13  68d4
      0  68d4					      MOVE_TOWARDS	_DOWN+_LEFT
      1  68d4					      SUBROUTINE
      2  68d4
      3  68d4
      4  68d4
      5  68d4		       a6 95		      ldx	currentSquare
      6  68d6		       d0 03		      bne	.project
      7  68d8
      8  68d8		       20 0b fc    .empty     jsr	AddMove
      9  68db		       bc 01 f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
     10  68de		       30 0c		      bmi	.invalid
     11  68e0		       b9 70 f0 	      lda	Board,y
     12  68e3		       f0 f3		      beq	.empty
     13  68e5		       45 94		      eor	currentPiece
     14  68e7		       10 03		      bpl	.invalid
     15  68e9		       20 0b fc 	      jsr	AddMove
     16  68ec
     17  68ec				   .invalid
      0  68ec					      MOVE_TOWARDS	_DOWN
      1  68ec					      SUBROUTINE
      2  68ec
      3  68ec
      4  68ec
      5  68ec		       a6 95		      ldx	currentSquare
      6  68ee		       d0 03		      bne	.project
      7  68f0
      8  68f0		       20 0b fc    .empty     jsr	AddMove
      9  68f3		       bc 02 f0    .project   ldy	ValidSquare+_DOWN,x
     10  68f6		       30 0c		      bmi	.invalid
     11  68f8		       b9 70 f0 	      lda	Board,y
     12  68fb		       f0 f3		      beq	.empty
     13  68fd		       45 94		      eor	currentPiece
     14  68ff		       10 03		      bpl	.invalid
     15  6901		       20 0b fc 	      jsr	AddMove
     16  6904
     17  6904				   .invalid
      0  6904					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  6904					      SUBROUTINE
      2  6904
      3  6904
      4  6904
      5  6904		       a6 95		      ldx	currentSquare
      6  6906		       d0 03		      bne	.project
      7  6908
      8  6908		       20 0b fc    .empty     jsr	AddMove
      9  690b		       bc 03 f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
     10  690e		       30 0c		      bmi	.invalid
     11  6910		       b9 70 f0 	      lda	Board,y
     12  6913		       f0 f3		      beq	.empty
     13  6915		       45 94		      eor	currentPiece
     14  6917		       10 03		      bpl	.invalid
     15  6919		       20 0b fc 	      jsr	AddMove
     16  691c
     17  691c				   .invalid
      0  691c					      MOVE_TOWARDS	_RIGHT
      1  691c					      SUBROUTINE
      2  691c
      3  691c
      4  691c
      5  691c		       a6 95		      ldx	currentSquare
      6  691e		       d0 03		      bne	.project
      7  6920
      8  6920		       20 0b fc    .empty     jsr	AddMove
      9  6923		       bc 0d f0    .project   ldy	ValidSquare+_RIGHT,x
     10  6926		       30 0c		      bmi	.invalid
     11  6928		       b9 70 f0 	      lda	Board,y
     12  692b		       f0 f3		      beq	.empty
     13  692d		       45 94		      eor	currentPiece
     14  692f		       10 03		      bpl	.invalid
     15  6931		       20 0b fc 	      jsr	AddMove
     16  6934
     17  6934				   .invalid
      0  6934					      MOVE_TOWARDS	_UP+_RIGHT
      1  6934					      SUBROUTINE
      2  6934
      3  6934
      4  6934
      5  6934		       a6 95		      ldx	currentSquare
      6  6936		       d0 03		      bne	.project
      7  6938
      8  6938		       20 0b fc    .empty     jsr	AddMove
      9  693b		       bc 17 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
     10  693e		       30 0c		      bmi	.invalid
     11  6940		       b9 70 f0 	      lda	Board,y
     12  6943		       f0 f3		      beq	.empty
     13  6945		       45 94		      eor	currentPiece
     14  6947		       10 03		      bpl	.invalid
     15  6949		       20 0b fc 	      jsr	AddMove
     16  694c
     17  694c				   .invalid
      0  694c					      MOVE_TOWARDS	_UP
      1  694c					      SUBROUTINE
      2  694c
      3  694c
      4  694c
      5  694c		       a6 95		      ldx	currentSquare
      6  694e		       d0 03		      bne	.project
      7  6950
      8  6950		       20 0b fc    .empty     jsr	AddMove
      9  6953		       bc 16 f0    .project   ldy	ValidSquare+_UP,x
     10  6956		       30 0c		      bmi	.invalid
     11  6958		       b9 70 f0 	      lda	Board,y
     12  695b		       f0 f3		      beq	.empty
     13  695d		       45 94		      eor	currentPiece
     14  695f		       10 03		      bpl	.invalid
     15  6961		       20 0b fc 	      jsr	AddMove
     16  6964
     17  6964				   .invalid
      0  6964					      MOVE_TOWARDS	_UP+_LEFT
      1  6964					      SUBROUTINE
      2  6964
      3  6964
      4  6964
      5  6964		       a6 95		      ldx	currentSquare
      6  6966		       d0 03		      bne	.project
      7  6968
      8  6968		       20 0b fc    .empty     jsr	AddMove
      9  696b		       bc 15 f0    .project   ldy	ValidSquare+_UP+_LEFT,x
     10  696e		       30 0c		      bmi	.invalid
     11  6970		       b9 70 f0 	      lda	Board,y
     12  6973		       f0 f3		      beq	.empty
     13  6975		       45 94		      eor	currentPiece
     14  6977		       10 03		      bpl	.invalid
     15  6979		       20 0b fc 	      jsr	AddMove
     16  697c
     17  697c				   .invalid
      0  697c					      MOVE_TOWARDS	_LEFT
      1  697c					      SUBROUTINE
      2  697c
      3  697c
      4  697c
      5  697c		       a6 95		      ldx	currentSquare
      6  697e		       d0 03		      bne	.project
      7  6980
      8  6980		       20 0b fc    .empty     jsr	AddMove
      9  6983		       bc 0b f0    .project   ldy	ValidSquare+_LEFT,x
     10  6986		       30 0c		      bmi	.invalid
     11  6988		       b9 70 f0 	      lda	Board,y
     12  698b		       f0 f3		      beq	.empty
     13  698d		       45 94		      eor	currentPiece
     14  698f		       10 03		      bpl	.invalid
     15  6991		       20 0b fc 	      jsr	AddMove
     16  6994
     17  6994				   .invalid
     22  6994
     23  6994		       4c d2 f9 	      jmp	MoveReturn
     24  6997
     25  6997							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  6997					      include	"Handler_BISHOP.asm"
      1  6997							; Copyright (C)2020 Andrew Davie
      2  6997
      3  6997							;---------------------------------------------------------------------------------------------------
      4  6997							; BISHOP
      5  6997							;---------------------------------------------------------------------------------------------------
      6  6997
      0  6997					      DEF	Handle_BISHOP
      1  6997				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  6997				   Handle_BISHOP
      3  6997				   TEMPORARY_VAR SET	Overlay
      4  6997				   TEMPORARY_OFFSET SET	0
      5  6997					      SUBROUTINE
      8  6997					      SUBROUTINE
      9  6997
     10  6997							; x = currentSquare (square the piece is on)
     11  6997							; currentPiece (with flags/colour attached)
     12  6997
      0  6997					      MOVE_TOWARDS	_DOWN+_LEFT
      1  6997					      SUBROUTINE
      2  6997
      3  6997
      4  6997
      5  6997		       a6 95		      ldx	currentSquare
      6  6999		       d0 03		      bne	.project
      7  699b
      8  699b		       20 0b fc    .empty     jsr	AddMove
      9  699e		       bc 01 f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
     10  69a1		       30 0c		      bmi	.invalid
     11  69a3		       b9 70 f0 	      lda	Board,y
     12  69a6		       f0 f3		      beq	.empty
     13  69a8		       45 94		      eor	currentPiece
     14  69aa		       10 03		      bpl	.invalid
     15  69ac		       20 0b fc 	      jsr	AddMove
     16  69af
     17  69af				   .invalid
      0  69af					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  69af					      SUBROUTINE
      2  69af
      3  69af
      4  69af
      5  69af		       a6 95		      ldx	currentSquare
      6  69b1		       d0 03		      bne	.project
      7  69b3
      8  69b3		       20 0b fc    .empty     jsr	AddMove
      9  69b6		       bc 03 f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
     10  69b9		       30 0c		      bmi	.invalid
     11  69bb		       b9 70 f0 	      lda	Board,y
     12  69be		       f0 f3		      beq	.empty
     13  69c0		       45 94		      eor	currentPiece
     14  69c2		       10 03		      bpl	.invalid
     15  69c4		       20 0b fc 	      jsr	AddMove
     16  69c7
     17  69c7				   .invalid
      0  69c7					      MOVE_TOWARDS	_UP+_LEFT
      1  69c7					      SUBROUTINE
      2  69c7
      3  69c7
      4  69c7
      5  69c7		       a6 95		      ldx	currentSquare
      6  69c9		       d0 03		      bne	.project
      7  69cb
      8  69cb		       20 0b fc    .empty     jsr	AddMove
      9  69ce		       bc 15 f0    .project   ldy	ValidSquare+_UP+_LEFT,x
     10  69d1		       30 0c		      bmi	.invalid
     11  69d3		       b9 70 f0 	      lda	Board,y
     12  69d6		       f0 f3		      beq	.empty
     13  69d8		       45 94		      eor	currentPiece
     14  69da		       10 03		      bpl	.invalid
     15  69dc		       20 0b fc 	      jsr	AddMove
     16  69df
     17  69df				   .invalid
      0  69df					      MOVE_TOWARDS	_UP+_RIGHT
      1  69df					      SUBROUTINE
      2  69df
      3  69df
      4  69df
      5  69df		       a6 95		      ldx	currentSquare
      6  69e1		       d0 03		      bne	.project
      7  69e3
      8  69e3		       20 0b fc    .empty     jsr	AddMove
      9  69e6		       bc 17 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
     10  69e9		       30 0c		      bmi	.invalid
     11  69eb		       b9 70 f0 	      lda	Board,y
     12  69ee		       f0 f3		      beq	.empty
     13  69f0		       45 94		      eor	currentPiece
     14  69f2		       10 03		      bpl	.invalid
     15  69f4		       20 0b fc 	      jsr	AddMove
     16  69f7
     17  69f7				   .invalid
     17  69f7
     18  69f7		       4c d2 f9 	      jmp	MoveReturn
     19  69fa
     20  69fa							;---------------------------------------------------------------------------------------------------
     21  69fa							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  69fa					      include	"Handler_ROOK.asm"
      1  69fa							; Copyright (C)2020 Andrew Davie
      2  69fa							; Rook move handler
      3  69fa
      4  69fa							;---------------------------------------------------------------------------------------------------
      5  69fa							; ROOK
      6  69fa							;---------------------------------------------------------------------------------------------------
      7  69fa
      0  69fa					      DEF	Handle_ROOK
      1  69fa				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  69fa				   Handle_ROOK
      3  69fa				   TEMPORARY_VAR SET	Overlay
      4  69fa				   TEMPORARY_OFFSET SET	0
      5  69fa					      SUBROUTINE
      9  69fa					      SUBROUTINE
     10  69fa
     11  69fa							; Pass...
     12  69fa							; x = currentSquare (square the piece is on)
     13  69fa							; currentPiece (with flags/colour attached)
     14  69fa
      0  69fa					      MOVE_TOWARDS	_DOWN
      1  69fa					      SUBROUTINE
      2  69fa
      3  69fa
      4  69fa
      5  69fa		       a6 95		      ldx	currentSquare
      6  69fc		       d0 03		      bne	.project
      7  69fe
      8  69fe		       20 0b fc    .empty     jsr	AddMove
      9  6a01		       bc 02 f0    .project   ldy	ValidSquare+_DOWN,x
     10  6a04		       30 0c		      bmi	.invalid
     11  6a06		       b9 70 f0 	      lda	Board,y
     12  6a09		       f0 f3		      beq	.empty
     13  6a0b		       45 94		      eor	currentPiece
     14  6a0d		       10 03		      bpl	.invalid
     15  6a0f		       20 0b fc 	      jsr	AddMove
     16  6a12
     17  6a12				   .invalid
      0  6a12					      MOVE_TOWARDS	_RIGHT
      1  6a12					      SUBROUTINE
      2  6a12
      3  6a12
      4  6a12
      5  6a12		       a6 95		      ldx	currentSquare
      6  6a14		       d0 03		      bne	.project
      7  6a16
      8  6a16		       20 0b fc    .empty     jsr	AddMove
      9  6a19		       bc 0d f0    .project   ldy	ValidSquare+_RIGHT,x
     10  6a1c		       30 0c		      bmi	.invalid
     11  6a1e		       b9 70 f0 	      lda	Board,y
     12  6a21		       f0 f3		      beq	.empty
     13  6a23		       45 94		      eor	currentPiece
     14  6a25		       10 03		      bpl	.invalid
     15  6a27		       20 0b fc 	      jsr	AddMove
     16  6a2a
     17  6a2a				   .invalid
      0  6a2a					      MOVE_TOWARDS	_UP
      1  6a2a					      SUBROUTINE
      2  6a2a
      3  6a2a
      4  6a2a
      5  6a2a		       a6 95		      ldx	currentSquare
      6  6a2c		       d0 03		      bne	.project
      7  6a2e
      8  6a2e		       20 0b fc    .empty     jsr	AddMove
      9  6a31		       bc 16 f0    .project   ldy	ValidSquare+_UP,x
     10  6a34		       30 0c		      bmi	.invalid
     11  6a36		       b9 70 f0 	      lda	Board,y
     12  6a39		       f0 f3		      beq	.empty
     13  6a3b		       45 94		      eor	currentPiece
     14  6a3d		       10 03		      bpl	.invalid
     15  6a3f		       20 0b fc 	      jsr	AddMove
     16  6a42
     17  6a42				   .invalid
      0  6a42					      MOVE_TOWARDS	_LEFT
      1  6a42					      SUBROUTINE
      2  6a42
      3  6a42
      4  6a42
      5  6a42		       a6 95		      ldx	currentSquare
      6  6a44		       d0 03		      bne	.project
      7  6a46
      8  6a46		       20 0b fc    .empty     jsr	AddMove
      9  6a49		       bc 0b f0    .project   ldy	ValidSquare+_LEFT,x
     10  6a4c		       30 0c		      bmi	.invalid
     11  6a4e		       b9 70 f0 	      lda	Board,y
     12  6a51		       f0 f3		      beq	.empty
     13  6a53		       45 94		      eor	currentPiece
     14  6a55		       10 03		      bpl	.invalid
     15  6a57		       20 0b fc 	      jsr	AddMove
     16  6a5a
     17  6a5a				   .invalid
     19  6a5a
     20  6a5a		       4c d2 f9 	      jmp	MoveReturn
     21  6a5d
     22  6a5d							;---------------------------------------------------------------------------------------------------
     23  6a5d							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  6a5d					      include	"Handler_KING.asm"
      1  6a5d							; Copyright (C)2020 Andrew Davie
      2  6a5d
      3  6a5d							;---------------------------------------------------------------------------------------------------
      4  6a5d							; KING
      5  6a5d							; This is the move handler for a KING
      6  6a5d							; "Check" is detected in the next ply of the search.
      7  6a5d
      8  6a5d
      9  6a5d							;---------------------------------------------------------------------------------------------------
     10  6a5d
     11  6a5d							; MACRO - Castling
     12  6a5d
     13  6a5d		       00 03	   KINGSIDE   =	3
     14  6a5d		       ff ff ff fc QUEENSIDE  =	-4
     15  6a5d
     16  6a5d					      MAC	castle
     17  6a5d							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  6a5d
     19  6a5d					      ldx	currentSquare
     20  6a5d					      lda	Board+{1},x	; kingside/queenside R position
     21  6a5d					      and	#PIECE_MASK|FLAG_MOVED
     22  6a5d					      cmp	#ROOK
     23  6a5d					      bne	.noCastle	; not a R that hasn't moved
     24  6a5d
     25  6a5d							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  6a5d							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  6a5d
     28  6a5d					      IF	{1} = QUEENSIDE
     29  6a5d					      lda	Board-3,x	; nothing in N pos
     30  6a5d					      bne	.noCastle
     31  6a5d					      lda	Board-2,x	; nothing in B pos
     32  6a5d					      bne	.noCastle
     33  6a5d					      lda	Board-1,x	; nothing in Q pos
     34  6a5d					      bne	.noCastle
     35  6a5d
     36  6a5d					      ENDIF
     37  6a5d
     38  6a5d					      IF	{1} = KINGSIDE
     39  6a5d					      lda	Board+2,x	; check N pos
     40  6a5d					      bne	.noCastle
     41  6a5d					      lda	Board+1,x	; check B pos
     42  6a5d					      bne	.noCastle
     43  6a5d					      ENDIF
     44  6a5d
     45  6a5d							; appropriate N/B/(Q) squares are vacant so we proceed...
     46  6a5d
     47  6a5d							; FINALLY -- king can castle
     48  6a5d							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     49  6a5d							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     50  6a5d							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     51  6a5d
     52  6a5d					      lda	currentPiece
     53  6a5d					      ora	#FLAG_CASTLE	; flag it's a castling move
     54  6a5d					      sta	currentPiece
     55  6a5d
     56  6a5d					      IF	{1} = KINGSIDE
     57  6a5d					      ldy	ValidSquare+2,x
     58  6a5d					      ENDIF
     59  6a5d
     60  6a5d					      IF	{1} = QUEENSIDE
     61  6a5d					      ldy	ValidSquare-2,x
     62  6a5d					      ENDIF
     63  6a5d
     64  6a5d					      jsr	AddMove	; 57
     65  6a5d
     66  6a5d				   .noCastle
     67  6a5d					      ENDM
     68  6a5d
     69  6a5d
     70  6a5d							;---------------------------------------------------------------------------------------------------
     71  6a5d
      0  6a5d					      DEF	Handle_KING
      1  6a5d				   BANK_Handle_KING SET	_CURRENT_BANK
      2  6a5d				   Handle_KING
      3  6a5d				   TEMPORARY_VAR SET	Overlay
      4  6a5d				   TEMPORARY_OFFSET SET	0
      5  6a5d					      SUBROUTINE
     73  6a5d					      SUBROUTINE
     74  6a5d
     75  6a5d							; x = currentSquare (square the KING is on)
     76  6a5d							; currentPiece (KING of course, but with flags/colour attached)
     77  6a5d
      0  6a5d					      MOVE_TO	_DOWN+_LEFT
      1  6a5d					      SUBROUTINE
      2  6a5d		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  6a60		       30 0c		      bmi	.invalid
      4  6a62		       b9 70 f0 	      lda	Board,y
      5  6a65		       f0 04		      beq	.squareEmpty
      6  6a67		       45 94		      eor	currentPiece
      7  6a69		       10 03		      bpl	.invalid
      8  6a6b		       20 0b fc    .squareEmpty jsr	AddMove
      9  6a6e				   .invalid
      0  6a6e					      MOVE_TO_X	_DOWN
      1  6a6e		       a6 95		      ldx	currentSquare
      0  6a70					      MOVE_TO	_DOWN
      1  6a70					      SUBROUTINE
      2  6a70		       bc 02 f0 	      ldy	ValidSquare+_DOWN,x
      3  6a73		       30 0c		      bmi	.invalid
      4  6a75		       b9 70 f0 	      lda	Board,y
      5  6a78		       f0 04		      beq	.squareEmpty
      6  6a7a		       45 94		      eor	currentPiece
      7  6a7c		       10 03		      bpl	.invalid
      8  6a7e		       20 0b fc    .squareEmpty jsr	AddMove
      9  6a81				   .invalid
      0  6a81					      MOVE_TO_X	_DOWN+_RIGHT
      1  6a81		       a6 95		      ldx	currentSquare
      0  6a83					      MOVE_TO	_DOWN+_RIGHT
      1  6a83					      SUBROUTINE
      2  6a83		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  6a86		       30 0c		      bmi	.invalid
      4  6a88		       b9 70 f0 	      lda	Board,y
      5  6a8b		       f0 04		      beq	.squareEmpty
      6  6a8d		       45 94		      eor	currentPiece
      7  6a8f		       10 03		      bpl	.invalid
      8  6a91		       20 0b fc    .squareEmpty jsr	AddMove
      9  6a94				   .invalid
      0  6a94					      MOVE_TO_X	_RIGHT
      1  6a94		       a6 95		      ldx	currentSquare
      0  6a96					      MOVE_TO	_RIGHT
      1  6a96					      SUBROUTINE
      2  6a96		       bc 0d f0 	      ldy	ValidSquare+_RIGHT,x
      3  6a99		       30 0c		      bmi	.invalid
      4  6a9b		       b9 70 f0 	      lda	Board,y
      5  6a9e		       f0 04		      beq	.squareEmpty
      6  6aa0		       45 94		      eor	currentPiece
      7  6aa2		       10 03		      bpl	.invalid
      8  6aa4		       20 0b fc    .squareEmpty jsr	AddMove
      9  6aa7				   .invalid
      0  6aa7					      MOVE_TO_X	_UP+_RIGHT
      1  6aa7		       a6 95		      ldx	currentSquare
      0  6aa9					      MOVE_TO	_UP+_RIGHT
      1  6aa9					      SUBROUTINE
      2  6aa9		       bc 17 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  6aac		       30 0c		      bmi	.invalid
      4  6aae		       b9 70 f0 	      lda	Board,y
      5  6ab1		       f0 04		      beq	.squareEmpty
      6  6ab3		       45 94		      eor	currentPiece
      7  6ab5		       10 03		      bpl	.invalid
      8  6ab7		       20 0b fc    .squareEmpty jsr	AddMove
      9  6aba				   .invalid
      0  6aba					      MOVE_TO_X	_UP
      1  6aba		       a6 95		      ldx	currentSquare
      0  6abc					      MOVE_TO	_UP
      1  6abc					      SUBROUTINE
      2  6abc		       bc 16 f0 	      ldy	ValidSquare+_UP,x
      3  6abf		       30 0c		      bmi	.invalid
      4  6ac1		       b9 70 f0 	      lda	Board,y
      5  6ac4		       f0 04		      beq	.squareEmpty
      6  6ac6		       45 94		      eor	currentPiece
      7  6ac8		       10 03		      bpl	.invalid
      8  6aca		       20 0b fc    .squareEmpty jsr	AddMove
      9  6acd				   .invalid
      0  6acd					      MOVE_TO_X	_UP+_LEFT
      1  6acd		       a6 95		      ldx	currentSquare
      0  6acf					      MOVE_TO	_UP+_LEFT
      1  6acf					      SUBROUTINE
      2  6acf		       bc 15 f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  6ad2		       30 0c		      bmi	.invalid
      4  6ad4		       b9 70 f0 	      lda	Board,y
      5  6ad7		       f0 04		      beq	.squareEmpty
      6  6ad9		       45 94		      eor	currentPiece
      7  6adb		       10 03		      bpl	.invalid
      8  6add		       20 0b fc    .squareEmpty jsr	AddMove
      9  6ae0				   .invalid
      0  6ae0					      MOVE_TO_X	_LEFT
      1  6ae0		       a6 95		      ldx	currentSquare
      0  6ae2					      MOVE_TO	_LEFT
      1  6ae2					      SUBROUTINE
      2  6ae2		       bc 0b f0 	      ldy	ValidSquare+_LEFT,x
      3  6ae5		       30 0c		      bmi	.invalid
      4  6ae7		       b9 70 f0 	      lda	Board,y
      5  6aea		       f0 04		      beq	.squareEmpty
      6  6aec		       45 94		      eor	currentPiece
      7  6aee		       10 03		      bpl	.invalid
      8  6af0		       20 0b fc    .squareEmpty jsr	AddMove
      9  6af3				   .invalid
     86  6af3
     87  6af3		       24 94		      bit	currentPiece
     88  6af5		       70 47		      bvs	.exit	; king has moved, so no castling
     89  6af7
      0  6af7					      CASTLE	KINGSIDE
      1  6af7
      2  6af7
      3  6af7		       a6 95		      ldx	currentSquare
      4  6af9		       bd 73 f0 	      lda	Board+KINGSIDE,x
      5  6afc		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  6afe		       c9 05		      cmp	#ROOK
      7  6b00		       d0 16		      bne	.noCastle
      8  6b02
      9  6b02
     10  6b02
     11  6b02
     12  6b02				  -	      IF	KINGSIDE = QUEENSIDE
     13  6b02				  -	      lda	Board-3,x
     14  6b02				  -	      bne	.noCastle
     15  6b02				  -	      lda	Board-2,x
     16  6b02				  -	      bne	.noCastle
     17  6b02				  -	      lda	Board-1,x
     18  6b02				  -	      bne	.noCastle
     19  6b02				  -
     20  6b02					      ENDIF
     21  6b02
     22  6b02					      IF	KINGSIDE = KINGSIDE
     23  6b02		       bd 72 f0 	      lda	Board+2,x
     24  6b05		       d0 11		      bne	.noCastle
     25  6b07		       bd 71 f0 	      lda	Board+1,x
     26  6b0a		       d0 0c		      bne	.noCastle
     27  6b0c					      ENDIF
     28  6b0c
     29  6b0c
     30  6b0c
     31  6b0c
     32  6b0c
     33  6b0c
     34  6b0c
     35  6b0c
     36  6b0c		       a5 94		      lda	currentPiece
     37  6b0e		       09 10		      ora	#FLAG_CASTLE
     38  6b10		       85 94		      sta	currentPiece
     39  6b12
     40  6b12					      IF	KINGSIDE = KINGSIDE
     41  6b12		       bc 0e f0 	      ldy	ValidSquare+2,x
     42  6b15					      ENDIF
     43  6b15
     44  6b15				  -	      IF	KINGSIDE = QUEENSIDE
     45  6b15				  -	      ldy	ValidSquare-2,x
     46  6b15					      ENDIF
     47  6b15
     48  6b15		       20 0b fc 	      jsr	AddMove
     49  6b18
     50  6b18				   .noCastle
      0  6b18					      CASTLE	QUEENSIDE
      1  6b18
      2  6b18
      3  6b18		       a6 95		      ldx	currentSquare
      4  6b1a		       bd 6c f0 	      lda	Board+QUEENSIDE,x
      5  6b1d		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  6b1f		       c9 05		      cmp	#ROOK
      7  6b21		       d0 1b		      bne	.noCastle
      8  6b23
      9  6b23
     10  6b23
     11  6b23
     12  6b23					      IF	QUEENSIDE = QUEENSIDE
     13  6b23		       bd 6d f0 	      lda	Board-3,x
     14  6b26		       d0 16		      bne	.noCastle
     15  6b28		       bd 6e f0 	      lda	Board-2,x
     16  6b2b		       d0 11		      bne	.noCastle
     17  6b2d		       bd 6f f0 	      lda	Board-1,x
     18  6b30		       d0 0c		      bne	.noCastle
     19  6b32
     20  6b32					      ENDIF
     21  6b32
     22  6b32				  -	      IF	QUEENSIDE = KINGSIDE
     23  6b32				  -	      lda	Board+2,x
     24  6b32				  -	      bne	.noCastle
     25  6b32				  -	      lda	Board+1,x
     26  6b32				  -	      bne	.noCastle
     27  6b32					      ENDIF
     28  6b32
     29  6b32
     30  6b32
     31  6b32
     32  6b32
     33  6b32
     34  6b32
     35  6b32
     36  6b32		       a5 94		      lda	currentPiece
     37  6b34		       09 10		      ora	#FLAG_CASTLE
     38  6b36		       85 94		      sta	currentPiece
     39  6b38
     40  6b38				  -	      IF	QUEENSIDE = KINGSIDE
     41  6b38				  -	      ldy	ValidSquare+2,x
     42  6b38					      ENDIF
     43  6b38
     44  6b38					      IF	QUEENSIDE = QUEENSIDE
     45  6b38		       bc 0a f0 	      ldy	ValidSquare-2,x
     46  6b3b					      ENDIF
     47  6b3b
     48  6b3b		       20 0b fc 	      jsr	AddMove
     49  6b3e
     50  6b3e				   .noCastle
     92  6b3e
     93  6b3e		       4c d2 f9    .exit      jmp	MoveReturn
     94  6b41
     95  6b41							;---------------------------------------------------------------------------------------------------
     96  6b41							; EOF
------- FILE Handler_BANK1.asm
    116  6b41
    117  6b41
    118  6b41							;---------------------------------------------------------------------------------------------------
    119  6b41
      0  6b41					      DEF	CopySetupForMarker
      1  6b41				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  6b41				   CopySetupForMarker
      3  6b41				   TEMPORARY_VAR SET	Overlay
      4  6b41				   TEMPORARY_OFFSET SET	0
      5  6b41					      SUBROUTINE
    121  6b41					      SUBROUTINE
    122  6b41
      0  6b41					      VAR	__pieceColour, 1
      1  6b41				   __pieceColour SET	TEMPORARY_VAR
      2  6b41				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6b41
      4  6b41				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6b41				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6b41				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6b41					      ENDIF
      8  6b41				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6b41				  -	      ECHO	"Temporary Variable", __pieceColour, "overflow!"
     10  6b41				  -	      ERR
     11  6b41					      ENDIF
     12  6b41					      LIST	ON
    124  6b41
    125  6b41		       a5 80		      lda	drawPieceNumberX12
    126  6b43		       38		      sec
    127  6b44		       e9 0a	   .sub10     sbc	#10
    128  6b46		       b0 fc		      bcs	.sub10
    129  6b48		       69 07		      adc	#7
    130  6b4a		       65 80		      adc	drawPieceNumberX12
    131  6b4c
    132  6b4c		       29 01		      and	#1
    133  6b4e		       49 01		      eor	#1
    134  6b50		       f0 02		      beq	.white
    135  6b52		       a9 24		      lda	#36
    136  6b54				   .white
    137  6b54		       85 a1		      sta	__pieceColour	; actually SQUARE black/white
    138  6b56
    139  6b56		       8a		      txa
    140  6b57		       18		      clc
    141  6b58		       65 a1		      adc	__pieceColour
    142  6b5a		       85 a1		      sta	__pieceColour
    143  6b5c
    144  6b5c		       a5 80		      lda	drawPieceNumberX12
    145  6b5e		       38		      sec
    146  6b5f		       e9 0a	   .sub10b    sbc	#10
    147  6b61		       b0 fc		      bcs	.sub10b
    148  6b63		       69 08		      adc	#8
    149  6b65		       29 03		      and	#3
    150  6b67
    151  6b67		       18		      clc
    152  6b68		       65 a1		      adc	__pieceColour
    153  6b6a		       a8		      tay
    154  6b6b		       60		      rts
    155  6b6c
    156  6b6c
    157  6b6c							;---------------------------------------------------------------------------------------------------
    158  6b6c
      0  6b6c					      DEF	CopySetup
      1  6b6c				   BANK_CopySetup SET	_CURRENT_BANK
      2  6b6c				   CopySetup
      3  6b6c				   TEMPORARY_VAR SET	Overlay
      4  6b6c				   TEMPORARY_OFFSET SET	0
      5  6b6c					      SUBROUTINE
    160  6b6c					      SUBROUTINE
    161  6b6c
      0  6b6c					      VAR	__tmp, 1
      1  6b6c				   __tmp      SET	TEMPORARY_VAR
      2  6b6c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6b6c
      4  6b6c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6b6c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6b6c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6b6c					      ENDIF
      8  6b6c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6b6c				  -	      ECHO	"Temporary Variable", __tmp, "overflow!"
     10  6b6c				  -	      ERR
     11  6b6c					      ENDIF
     12  6b6c					      LIST	ON
      0  6b6c					      VAR	__shiftx, 1
      1  6b6c				   __shiftx   SET	TEMPORARY_VAR
      2  6b6c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  6b6c
      4  6b6c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6b6c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6b6c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6b6c					      ENDIF
      8  6b6c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6b6c				  -	      ECHO	"Temporary Variable", __shiftx, "overflow!"
     10  6b6c				  -	      ERR
     11  6b6c					      ENDIF
     12  6b6c					      LIST	ON
    164  6b6c
    165  6b6c
    166  6b6c							; figure colouration of square
    167  6b6c
    168  6b6c		       a5 80		      lda	drawPieceNumberX12
    169  6b6e		       a2 0a		      ldx	#10
    170  6b70		       38		      sec
    171  6b71		       e9 0a	   .sub10     sbc	#10
    172  6b73		       ca		      dex
    173  6b74		       b0 fb		      bcs	.sub10
    174  6b76		       69 08		      adc	#8
    175  6b78		       85 a2		      sta	__shiftx
    176  6b7a		       86 a1		      stx	__tmp
    177  6b7c		       65 a1		      adc	__tmp
    178  6b7e
    179  6b7e
    180  6b7e		       29 01		      and	#1
    181  6b80		       49 01		      eor	#1
    182  6b82		       f0 02		      beq	.white
    183  6b84		       a9 24		      lda	#36
    184  6b86		       85 a1	   .white     sta	__pieceColour	; actually SQUARE black/white
    185  6b88
    186  6b88							; PieceColour = 0 for white square, 36 for black square
    187  6b88
    188  6b88							;lda #RAMBANK_MOVES_RAM
    189  6b88							;sta SET_BANK_RAM
    190  6b88
    191  6b88		       a6 80		      ldx	drawPieceNumberX12
    192  6b8a		       bd 70 f0 	      lda	Board,x
    193  6b8d		       0a		      asl
    194  6b8e		       90 02		      bcc	.blackAdjust
    195  6b90		       09 10		      ora	#16
    196  6b92		       4a	   .blackAdjust lsr
    197  6b93		       29 0f		      and	#%1111
    198  6b95		       aa		      tax
    199  6b96
    200  6b96		       a5 a2		      lda	__shiftx
    201  6b98		       29 03		      and	#3	; shift position in P
    202  6b9a
    203  6b9a		       18		      clc
    204  6b9b		       7d a3 f3 	      adc	PieceToShape,x
    205  6b9e		       18		      clc
    206  6b9f		       65 a1		      adc	__pieceColour
    207  6ba1		       a8		      tay
    208  6ba2		       60		      rts
    209  6ba3
    210  6ba3				   PieceToShape
    211  6ba3
    212  6ba3		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    213  6ba4		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    214  6ba5		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    215  6ba6		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    216  6ba7		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    217  6ba8		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    218  6ba9		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    219  6baa		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    220  6bab
    221  6bab		       48		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    222  6bac		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    223  6bad		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    224  6bae		       50		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    225  6baf		       54		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    226  6bb0		       58		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    227  6bb1		       5c		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    228  6bb2		       60		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    229  6bb3
    230  6bb3
    231  6bb3
    232  6bb3
    233  6bb3
    234  6bb3							;    ds 20
    235  6bb3
    236  6bb3							;---------------------------------------------------------------------------------------------------
    237  6bb3
    238  6bb3
      0  6bb3					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  6bb3
      2  6bb3
      3  6bb3		       03 b3	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3b3 , FREE= $4d
      4  6bb3					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  6bb3				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  6bb3				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  6bb3				  -	      ERR
      8  6bb3					      endif
    240  6bb3
    241  6bb3
    242  6bb3							; There is space here (1K) for use as ROM
    243  6bb3							; but NOT when the above bank is switched in as RAM, of course!
    244  6bb3
    245  6bb3
    246  6bb3							;---------------------------------------------------------------------------------------------------
    247  6bb3
      0  6bb3					      CHECK_BANK_SIZE	"HANDLER_BANK_1 -- full 2K"
      1  6bb3		       03 b3	   .TEMP      =	* - BANK_START
 HANDLER_BANK_1 -- full 2K (2K) SIZE =  $3b3 , FREE= $44d
      2  6bb3					      ECHO	"HANDLER_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  6bb3				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  6bb3				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  6bb3				  -	      ERR
      6  6bb3					      endif
    249  6bb3
    250  6bb3							;---------------------------------------------------------------------------------------------------
    251  6bb3							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 2
      0  6bb3					      include	"ply.asm"
      1  6bb3							; Copyright (C)2020 Andrew Davie
      2  6bb3							; andrew@taswegian.com
      3  6bb3
      4  6bb3
      5  6bb3							;---------------------------------------------------------------------------------------------------
      6  6bb3							; Define the RAM banks
      7  6bb3							; A "PLY" bank represents all the data required on any single ply of the search tree.
      8  6bb3							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      9  6bb3							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
     10  6bb3							; they act as independant switchable banks usable for data on each ply during the search.
     11  6bb3							; A ply will hold the move list for that position
     12  6bb3
     13  6bb3
     14  6bb3		       00 06	   MAX_PLY    =	6
      0  6bb3					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  6bb3
      2  6bb3
      3  6bb3
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     18 U3800					      REPEND
     19 U3800
     20 U3800
     21 U3800							;---------------------------------------------------------------------------------------------------
     22 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     23 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  73bd ????				      SEG	BANK_PLY
      2  7000					      ORG	ORIGIN
      3  7000					      RORG	$F000
      4  7000				   BANK_START SET	*
      5  7000				   BANK_PLY   SET	ORIGIN / 2048
      6  7000				   ORIGIN     SET	ORIGIN + 2048
      7  7000				   _CURRENT_BANK SET	BANK_PLY
     25  7000
      0  7000					      DEF	XGetBoard
      1  7000				   BANK_XGetBoard SET	_CURRENT_BANK
      2  7000				   XGetBoard
      3  7000				   TEMPORARY_VAR SET	Overlay
      4  7000				   TEMPORARY_OFFSET SET	0
      5  7000					      SUBROUTINE
     27  7000		       a2 08		      ldx	#RAMBANK_MOVES_RAM
     28  7002		       86 3e		      stx	SET_BANK_RAM	; now executing in other bank
     29  7004		       00 00 00 00*	      ds	7
     30  700b		       60		      rts
     31  700c
     32  700c							;---------------------------------------------------------------------------------------------------
     33  700c							; The piece-lists
     34  700c							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     35  700c							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     36  700c							; but this needs to be initialised programatically on new game.
     37  700c
     38  700c							; We have TWO piecelists, in different banks
     39  700c							; WHITE pieces in bank BANK_PLY
     40  700c							; BLACK pieces in bank BANK_PLY+1
     41  700c
     42  700c
     43  700c		       7f ff	   INFINITY   =	32767
     44  700c
     45  700c
      0  700c					      VARIABLE	SortedPieceList, 16	; indexes into PieceSquare, etc. NEG = no piece
      0  700c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  700c					      LIST	ON
      2  700c		       00 00 00 00*SortedPieceList ds	16
      0  701c					      VARIABLE	PieceSquare, 16
      0  701c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  701c					      LIST	ON
      2  701c		       00 00 00 00*PieceSquare ds	16
      0  702c					      VARIABLE	PieceType, 16
      0  702c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  702c					      LIST	ON
      2  702c		       00 00 00 00*PieceType  ds	16
      0  703c					      VARIABLE	PieceMaterialValueLO, 16
      0  703c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  703c					      LIST	ON
      2  703c		       00 00 00 00*PieceMaterialValueLO ds	16
      0  704c					      VARIABLE	PieceMaterialValueHI, 16
      0  704c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  704c					      LIST	ON
      2  704c		       00 00 00 00*PieceMaterialValueHI ds	16
      0  705c					      VARIABLE	PiecePositionValueLO, 16
      0  705c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  705c					      LIST	ON
      2  705c		       00 00 00 00*PiecePositionValueLO ds	16
      0  706c					      VARIABLE	PiecePositionValueHI, 16
      0  706c					      OPTIONAL_PAGEBREAK	"Variable", 16
     10  706c					      LIST	ON
      2  706c		       00 00 00 00*PiecePositionValueHI ds	16
      0  707c					      VARIABLE	PieceListPtr, 1
      0  707c					      OPTIONAL_PAGEBREAK	"Variable", 1
     10  707c					      LIST	ON
      2  707c		       00	   PieceListPtr ds	1
      0  707d					      VARIABLE	plyValue, 2	; 16-bit signed score value from alphabeta
      0  707d					      OPTIONAL_PAGEBREAK	"Variable", 2
     10  707d					      LIST	ON
      2  707d		       00 00	   plyValue   ds	2
      0  707f					      VARIABLE	bestMove, 1	; index of move (-1 = none)
      0  707f					      OPTIONAL_PAGEBREAK	"Variable", 1
     10  707f					      LIST	ON
      2  707f		       00	   bestMove   ds	1
      0  7080					      VARIABLE	SavedEvaluation, 2	; THIS node's evaluation - used for reverting moves!
      0  7080					      OPTIONAL_PAGEBREAK	"Variable", 2
     10  7080					      LIST	ON
      2  7080		       00 00	   SavedEvaluation ds	2
     57  7082
     58  7082
     59  7082							;---------------------------------------------------------------------------------------------------
     60  7082
     61  7082		       00 64	   MAX_MOVES  =	100
     62  7082
      0  7082					      VARIABLE	MoveFrom, MAX_MOVES
      0  7082					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     10  7082					      LIST	ON
      2  7082		       00 00 00 00*MoveFrom   ds	MAX_MOVES
      0  70e6					      VARIABLE	MoveTo, MAX_MOVES
      0  70e6					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
 PAGE BREAK INSERTED FOR Variable
 REQUESTED SIZE = $64
 WASTED SPACE = $1a
 PAGEBREAK LOCATION = $f100
     10  7100					      LIST	ON
      2  7100		       00 00 00 00*MoveTo     ds	MAX_MOVES
      0  7164					      VARIABLE	MovePiece, MAX_MOVES
      0  7164					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     10  7164					      LIST	ON
      2  7164		       00 00 00 00*MovePiece  ds	MAX_MOVES
     66  71c8
     67  71c8
     68  71c8							;---------------------------------------------------------------------------------------------------
     69  71c8
     70  71c8							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
     71  71c8							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
     72  71c8
      0  71c8					      VARIABLE	enPassantSquare, 1
      0  71c8					      OPTIONAL_PAGEBREAK	"Variable", 1
     10  71c8					      LIST	ON
      2  71c8		       00	   enPassantSquare ds	1
     74  71c9
     75  71c9
     76  71c9							;---------------------------------------------------------------------------------------------------
     77  71c9							; Move tables hold piece moves for this current ply
     78  71c9
      0  71c9					      VARIABLE	moveIndex, 1	; points to first available 'slot' for move storage
      0  71c9					      OPTIONAL_PAGEBREAK	"Variable", 1
     10  71c9					      LIST	ON
      2  71c9		       00	   moveIndex  ds	1
     80  71ca
     81  71ca
     82  71ca							;---------------------------------------------------------------------------------------------------
     83  71ca
     84  71ca
     85  71ca				  -	      if	0
     86  71ca				  -			; reverting a move
     87  71ca				  -			; from/to/piece/toOriginal
     88  71ca				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     89  71ca				  -			; en-passant
     90  71ca				  -
     91  71ca				  -from/to/piece
     92  71ca				  -
     93  71ca				  -
     94  71ca				  -from       =	piece
     95  71ca				  -to	      =	originalPiece
     96  71ca				  -from2      =	piece2
     97  71ca				  -to2	      =	originalPiece2
     98  71ca				  -
     99  71ca				  -
    100  71ca				  -
    101  71ca				  -so,	      normal	move (N)
    102  71ca				  -
    103  71ca				  -B1	      =	knight
    104  71ca				  -C3	      =	blank
    105  71ca				  -null/null
    106  71ca				  -
    107  71ca				  -pawn       promot	with capture
    108  71ca				  -A7	      =	WP
    109  71ca				  -B8	      =	BLACK_ROOK
    110  71ca				  -
    111  71ca				  -
    112  71ca				  -castle
    113  71ca				  -E1	      =	king
    114  71ca				  -G1	      =	blank
    115  71ca				  -H1	      =	rook
    116  71ca				  -F1	      =	blank
    117  71ca				  -
    118  71ca				  -
    119  71ca				  -en-passant
    120  71ca				  -B4	      =	P
    121  71ca				  -A3	      =	blank
    122  71ca				  -A4	      =	P
    123  71ca				  -A3	      =	blank
    124  71ca				  -
    125  71ca				  -FROM
    126  71ca				  -TO
    127  71ca				  -CAPTURED_PIECE
    128  71ca				  -ORIG_PIECE
    129  71ca				  -FROM2
    130  71ca				  -TO2
    131  71ca				  -PIECE2
    132  71ca				  -
    133  71ca				  -board[FROM] =	ORIG_PIECE
    134  71ca				  -board[TO]  =	CAPTURED_PIECE
    135  71ca				  -
    136  71ca				  -value      =	-new_piece + orig_piece - captured_piece
    137  71ca				  -
    138  71ca				  -
    139  71ca					      endif
    140  71ca
    141  71ca
    142  71ca
    143  71ca							;---------------------------------------------------------------------------------------------------
    144  71ca
      0  71ca					      DEF	InitPieceLists
      1  71ca				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  71ca				   InitPieceLists
      3  71ca				   TEMPORARY_VAR SET	Overlay
      4  71ca				   TEMPORARY_OFFSET SET	0
      5  71ca					      SUBROUTINE
    146  71ca
    147  71ca		       a9 ff		      lda	#-1
    148  71cc		       8d 7c f4 	      sta	PieceListPtr+RAM_WRITE
    149  71cf
    150  71cf		       a2 0f		      ldx	#15
    151  71d1		       a9 00		      lda	#0
    152  71d3		       9d 0c f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    153  71d6		       9d 1c f4 	      sta	PieceSquare+RAM_WRITE,x
    154  71d9		       9d 2c f4 	      sta	PieceType+RAM_WRITE,x
    155  71dc		       ca		      dex
    156  71dd		       10 f4		      bpl	.clearLists
    157  71df
    158  71df
    159  71df							; TODO: move the following as they're called 2x due to double-call of InitPiecLists
    160  71df
    161  71df		       85 92		      sta	Evaluation
    162  71e1		       85 93		      sta	Evaluation+1	; tracks CURRENT value of everything (signed 16-bit)
    163  71e3
    164  71e3
    165  71e3							; General inits that are moved out of FIXED....
    166  71e3
    167  71e3		       a9 07		      lda	#%111	; 111= quad
    168  71e5		       85 44		      sta	NUSIZ0
    169  71e7		       85 45		      sta	NUSIZ1	; quad-width
    170  71e9
    171  71e9		       a9 04		      lda	#%00000100
    172  71eb		       85 4a		      sta	CTRLPF
    173  71ed		       a9 00		      lda	#BACKGCOL
    174  71ef		       85 49		      sta	COLUBK
    175  71f1
      0  71f1					      PHASE	AI_StartClearBoard
      1  71f1		       a9 0d		      lda	#AI_StartClearBoard
      2  71f3		       85 8c		      sta	aiPhase
    177  71f5		       60		      rts
    178  71f6
    179  71f6
    180  71f6							;---------------------------------------------------------------------------------------------------
    181  71f6
    182  71f6					      if	ASSERTS
    183  71f6
      0  71f6					      DEF	checkPiecesBank
      1  71f6				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  71f6				   checkPiecesBank
      3  71f6				   TEMPORARY_VAR SET	Overlay
      4  71f6				   TEMPORARY_OFFSET SET	0
      5  71f6					      SUBROUTINE
    185  71f6					      SUBROUTINE
    186  71f6
      0  71f6					      VAR	__x, 1
      1  71f6				   __x	      SET	TEMPORARY_VAR
      2  71f6				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  71f6
      4  71f6				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  71f6				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  71f6				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  71f6					      ENDIF
      8  71f6				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  71f6				  -	      ECHO	"Temporary Variable", __x, "overflow!"
     10  71f6				  -	      ERR
     11  71f6					      ENDIF
     12  71f6					      LIST	ON
      0  71f6					      VAR	__bank, 1
      1  71f6				   __bank     SET	TEMPORARY_VAR
      2  71f6				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  71f6
      4  71f6				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  71f6				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  71f6				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  71f6					      ENDIF
      8  71f6				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  71f6				  -	      ECHO	"Temporary Variable", __bank, "overflow!"
     10  71f6				  -	      ERR
     11  71f6					      ENDIF
     12  71f6					      LIST	ON
    189  71f6
    190  71f6							; odd usage - switches between concurrent bank code
    191  71f6
    192  71f6		       a2 0f		      ldx	#15
    193  71f8		       a5 a2	   .check     lda	__bank
    194  71fa		       85 3e		      sta	SET_BANK_RAM
    195  71fc		       bc 1c f0 	      ldy	PieceSquare,x
    196  71ff		       f0 0d		      beq	.nonehere
    197  7201
    198  7201		       86 a1		      stx	__x
    199  7203
    200  7203		       20 00 f0 	      jsr	XGetBoard
    201  7206		       f0 fe	   .fail      beq	.fail
    202  7208		       c9 ff		      cmp	#-1
    203  720a		       f0 fe	   .fail2     beq	.fail2
    204  720c
    205  720c		       a6 a1		      ldx	__x
    206  720e
    207  720e		       ca	   .nonehere  dex
    208  720f		       10 e7		      bpl	.check
    209  7211		       60		      rts
    210  7212
    211  7212					      endif
    212  7212
    213  7212
    214  7212							;---------------------------------------------------------------------------------------------------
    215  7212
    216  7212					      if	ASSERTS
    217  7212
      0  7212					      DEF	DIAGNOSTIC_checkPieces
      1  7212				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  7212				   DIAGNOSTIC_checkPieces
      3  7212				   TEMPORARY_VAR SET	Overlay
      4  7212				   TEMPORARY_OFFSET SET	0
      5  7212					      SUBROUTINE
    219  7212					      SUBROUTINE
    220  7212
    221  7212							; SAFE call
    222  7212							; DIAGNOSTIC ONLY
    223  7212							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    224  7212
    225  7212		       a9 09		      lda	#RAMBANK_PLY
    226  7214		       85 a2		      sta	__bank
    227  7216		       20 f6 f1 	      jsr	checkPiecesBank
    228  7219		       e6 a2		      inc	__bank
    229  721b		       20 f6 f1 	      jsr	checkPiecesBank
    230  721e		       60		      rts
    231  721f
    232  721f					      endif
    233  721f
    234  721f
    235  721f							;---------------------------------------------------------------------------------------------------
    236  721f
    237  721f				   InitPieceList
    238  721f
------- FILE setup_board.asm LEVEL 3 PASS 2
      0  721f					      include	"setup_board.asm"
      1  721f					      if	!TEST_POSITION
      2  721f
      3  721f		       06 19		      .byte.b	WHITE|Q, 25
      4  7221		       04 18		      .byte.b	WHITE|B, 24
      5  7223		       04 1b		      .byte.b	WHITE|B, 27
      6  7225		       05 16		      .byte.b	WHITE|R, 22
      7  7227		       05 1d		      .byte.b	WHITE|R, 29
      8  7229		       03 17		      .byte.b	WHITE|N, 23
      9  722b		       03 1c		      .byte.b	WHITE|N, 28
     10  722d
     11  722d		       01 23		      .byte.b	WHITE|WP, 35
     12  722f		       01 24		      .byte.b	WHITE|WP, 36
     13  7231		       01 22		      .byte.b	WHITE|WP, 34
     14  7233		       01 25		      .byte.b	WHITE|WP, 37
     15  7235		       01 21		      .byte.b	WHITE|WP, 33
     16  7237		       01 26		      .byte.b	WHITE|WP, 38
     17  7239		       01 20		      .byte.b	WHITE|WP, 32
     18  723b		       01 27		      .byte.b	WHITE|WP, 39
     19  723d
     20  723d		       07 1a		      .byte.b	WHITE|K, 26
     21  723f
     22  723f		       86 5f		      .byte.b	BLACK|Q, 95
     23  7241		       84 5e		      .byte.b	BLACK|B, 94
     24  7243		       84 61		      .byte.b	BLACK|B, 97
     25  7245		       85 5c		      .byte.b	BLACK|R, 92
     26  7247		       85 63		      .byte.b	BLACK|R, 99
     27  7249		       83 5d		      .byte.b	BLACK|N, 93
     28  724b		       83 62		      .byte.b	BLACK|N, 98
     29  724d
     30  724d		       82 55		      .byte.b	BLACK|BP, 85
     31  724f		       82 56		      .byte.b	BLACK|BP, 86
     32  7251		       82 54		      .byte.b	BLACK|BP, 84
     33  7253		       82 57		      .byte.b	BLACK|BP, 87
     34  7255		       82 53		      .byte.b	BLACK|BP, 83
     35  7257		       82 58		      .byte.b	BLACK|BP, 88
     36  7259		       82 52		      .byte.b	BLACK|BP, 82
     37  725b		       82 59		      .byte.b	BLACK|BP, 89
     38  725d
     39  725d		       87 60		      .byte.b	BLACK|K, 96
     40  725f
     41  725f		       00		      .byte.b	0	;end
     42  7260
     43  7260				  -	      else		; test position...
     44  7260				  -
     45  7260				  -	      .byte	WHITE|WP, 88
     46  7260				  -	      .byte	BLACK|BISHOP, 97
     47  7260				  -
     48  7260				  -	      .byte	BLACK|BP, 82
     49  7260				  -
     50  7260				  -
     51  7260				  -	      .byte	0	;end
     52  7260				  -
     53  7260					      endif
------- FILE ply.asm
    240  7260
    241  7260
    242  7260							;---------------------------------------------------------------------------------------------------
    243  7260
      0  7260					      DEF	NewPlyInitialise
      1  7260				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  7260				   NewPlyInitialise
      3  7260				   TEMPORARY_VAR SET	Overlay
      4  7260				   TEMPORARY_OFFSET SET	0
      5  7260					      SUBROUTINE
    245  7260
    246  7260							; This MUST be called at the start of a new ply
    247  7260							; It initialises the movelist to empty
    248  7260
    249  7260		       a2 ff		      ldx	#-1
    250  7262		       8e c9 f5 	      stx	moveIndex+RAM_WRITE	; no valid moves
    251  7265		       8d 7f f4 	      sta	bestMove+RAM_WRITE
    252  7268
    253  7268		       a5 97		      lda	enPassantPawn	; flag/square from last actual move made
    254  726a		       8d c8 f5 	      sta	enPassantSquare+RAM_WRITE	; used for backtracking, to reset the flag
    255  726d
    256  726d							; The evaluation of the current position is a signed 16-bit number
    257  726d							; +ve is good for the current side.
    258  726d							; This is used during the alpha-beta search for finding best position
    259  726d							; Note, this is not the same as the 'Evaluation' which is the current value at ply -- it is the
    260  726d							; alphabeta best/worst value of the node!!
    261  726d
    262  726d		       a9 01		      lda	#<(-INFINITY)
    263  726f		       8d 7d f4 	      sta	plyValue+RAM_WRITE
    264  7272		       a9 80		      lda	#>(-INFINITY)
    265  7274		       8d 7e f4 	      sta	plyValue+RAM_WRITE+1
    266  7277
    267  7277							; The value of the material (signed, 16-bit) is restored to the saved value at the reversion
    268  7277							; of a move. It's quicker to restore than to re-sum. So we save the current evaluation at the
    269  7277							; start of each new ply.
    270  7277
    271  7277		       a5 92		      lda	Evaluation
    272  7279		       8d 80 f4 	      sta	SavedEvaluation+RAM_WRITE
    273  727c		       a5 93		      lda	Evaluation+1
    274  727e		       8d 81 f4 	      sta	SavedEvaluation+RAM_WRITE+1
    275  7281
    276  7281		       a9 00		      lda	#0
    277  7283		       85 9a		      sta	piecelistIndex	; move traversing
    278  7285
    279  7285		       60		      rts
    280  7286
    281  7286
    282  7286							;---------------------------------------------------------------------------------------------------
    283  7286
      0  7286					      DEF	GenerateMovesForNextPiece
      1  7286				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  7286				   GenerateMovesForNextPiece
      3  7286				   TEMPORARY_VAR SET	Overlay
      4  7286				   TEMPORARY_OFFSET SET	0
      5  7286					      SUBROUTINE
    285  7286
    286  7286		       a5 9a		      lda	piecelistIndex
    287  7288		       29 0f		      and	#15
    288  728a		       aa		      tax
    289  728b
    290  728b		       a5 9b		      lda	sideToMove
    291  728d		       0a		      asl
    292  728e		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    293  7290		       69 00		      adc	#0
    294  7292		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    295  7294
    296  7294		       bd 1c f0 	      lda	PieceSquare,x
    297  7297		       f0 05		      beq	.noPieceHere	; piece deleted
    298  7299		       85 95		      sta	currentSquare
    299  729b
    300  729b							;lda enPassantSquare	     ; saved from previous side's move...
    301  729b							;sta enPassantPawn	     ; used for move generation
    302  729b
    303  729b		       20 af f9 	      jsr	MoveForSinglePiece
    304  729e
    305  729e		       e6 9a	   .noPieceHere inc	piecelistIndex
    306  72a0
    307  72a0		       a5 9a		      lda	piecelistIndex
    308  72a2		       29 0f		      and	#15
    309  72a4		       c9 00		      cmp	#0
    310  72a6		       f0 07		      beq	.stop
    311  72a8
    312  72a8		       ad 84 02 	      lda	INTIM
    313  72ab		       c9 16		      cmp	#22
    314  72ad		       b0 d7		      bcs	GenerateMovesForNextPiece
    315  72af
    316  72af
    317  72af		       60	   .stop      rts
    318  72b0
    319  72b0
    320  72b0							;---------------------------------------------------------------------------------------------------
    321  72b0
      0  72b0					      DEF	GetMaterialValue
      1  72b0				   BANK_GetMaterialValue SET	_CURRENT_BANK
      2  72b0				   GetMaterialValue
      3  72b0				   TEMPORARY_VAR SET	Overlay
      4  72b0				   TEMPORARY_OFFSET SET	0
      5  72b0					      SUBROUTINE
    323  72b0					      SUBROUTINE
    324  72b0
      0  72b0					      VAR	__material, 2
      1  72b0				   __material SET	TEMPORARY_VAR
      2  72b0				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  72b0
      4  72b0				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  72b0				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  72b0				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  72b0					      ENDIF
      8  72b0				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  72b0				  -	      ECHO	"Temporary Variable", __material, "overflow!"
     10  72b0				  -	      ERR
     11  72b0					      ENDIF
     12  72b0					      LIST	ON
    326  72b0
    327  72b0				  -	      if	0
    328  72b0				  -	      lda	#0
    329  72b0				  -	      sta	__material
    330  72b0				  -	      sta	__material+1
    331  72b0				  -
    332  72b0				  -	      ldx	#15
    333  72b0				  -.sum       lda	PieceSquare,x
    334  72b0				  -	      beq	.dead
    335  72b0				  -
    336  72b0				  -	      clc
    337  72b0				  -	      lda	__material
    338  72b0				  -	      adc	PieceMaterialValueLO,x
    339  72b0				  -	      sta	__material
    340  72b0				  -	      lda	__material+1
    341  72b0				  -	      adc	PieceMaterialValueHI,x
    342  72b0				  -	      sta	__material+1
    343  72b0				  -
    344  72b0				  -.dead      dex
    345  72b0				  -	      bpl	.sum
    346  72b0					      endif
    347  72b0		       60		      rts
    348  72b1
    349  72b1
    350  72b1							;---------------------------------------------------------------------------------------------------
    351  72b1
      0  72b1					      DEF	FixPieceList
      1  72b1				   BANK_FixPieceList SET	_CURRENT_BANK
      2  72b1				   FixPieceList
      3  72b1				   TEMPORARY_VAR SET	Overlay
      4  72b1				   TEMPORARY_OFFSET SET	0
      5  72b1					      SUBROUTINE
    353  72b1					      SUBROUTINE
    354  72b1
    355  72b1							; fromX12	      X12 square piece moved from
    356  72b1							; toX12	      X12 square piece moved to (0 to erase piece from list)
    357  72b1
    358  72b1							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    359  72b1							; Eventually this will have to be more sophisticated when moves (like castling) involve
    360  72b1							; more than one piece.
    361  72b1
    362  72b1							; TODO: this is slow and should use a pointer to pieces instead
    363  72b1
    364  72b1
    365  72b1		       a2 0f		      ldx	#15
    366  72b3		       a5 87		      lda	originX12
    367  72b5		       dd 1c f0    .pieceCheck cmp	PieceSquare,x
    368  72b8		       f0 04		      beq	.adjustPiece
    369  72ba		       ca		      dex
    370  72bb		       10 f8		      bpl	.pieceCheck
    371  72bd		       60		      rts
    372  72be
    373  72be		       a5 86	   .adjustPiece lda	toX12
    374  72c0		       9d 1c f4 	      sta	PieceSquare+RAM_WRITE,x
    375  72c3		       60		      rts
    376  72c4
    377  72c4
    378  72c4							;---------------------------------------------------------------------------------------------------
    379  72c4
      0  72c4					      DEF	alphaBeta
      1  72c4				   BANK_alphaBeta SET	_CURRENT_BANK
      2  72c4				   alphaBeta
      3  72c4				   TEMPORARY_VAR SET	Overlay
      4  72c4				   TEMPORARY_OFFSET SET	0
      5  72c4					      SUBROUTINE
    381  72c4					      SUBROUTINE
    382  72c4
    383  72c4
    384  72c4				  -	      if	0
    385  72c4				  -
    386  72c4				  -1.	      create	movelist
    387  72c4				  -2.	      init	score
    388  72c4				  -
    389  72c4				  -
    390  72c4				  -
    391  72c4				  -
    392  72c4				  -
    393  72c4				  -
    394  72c4				  -
    395  72c4					      endif
    396  72c4
    397  72c4
    398  72c4
    399  72c4
    400  72c4		       60		      rts
    401  72c5
    402  72c5		       e6 99		      inc	currentPly
    403  72c7		       a5 99		      lda	currentPly
    404  72c9
    405  72c9		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    406  72cb		       f0 31		      beq	.bottomOut	; at a leaf node of the search?
    407  72cd		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    408  72cf
    409  72cf		       a5 9b		      lda	sideToMove
    410  72d1		       49 80		      eor	#128
    411  72d3		       85 9b		      sta	sideToMove
    412  72d5
    413  72d5		       20 60 f2 	      jsr	NewPlyInitialise
    414  72d8
    415  72d8		       a5 99		      lda	currentPly
    416  72da		       85 3e		      sta	SET_BANK_RAM
    417  72dc
    418  72dc		       a9 00		      lda	#0
    419  72de		       85 9a		      sta	piecelistIndex
    420  72e0		       20 86 f2    iterPieces jsr	GenerateMovesForNextPiece
    421  72e3		       a5 9a		      lda	piecelistIndex
    422  72e5		       c9 0f		      cmp	#15
    423  72e7		       d0 f7		      bne	iterPieces
    424  72e9
    425  72e9							; Perform a recursive search
    426  72e9							; simulate alpha-beta cull to just 7 moves per node
    427  72e9
    428  72e9					      REPEAT	7
    429  72e9							;jsr PhysicallyMovePiece
    430  72e9							;jsr FinaliseMove
    431  72e9		       20 c4 f2 	      jsr	alphaBeta
    428  72e9					      REPEND
    429  72ec							;jsr PhysicallyMovePiece
    430  72ec							;jsr FinaliseMove
    431  72ec		       20 c4 f2 	      jsr	alphaBeta
    428  72ec					      REPEND
    429  72ef							;jsr PhysicallyMovePiece
    430  72ef							;jsr FinaliseMove
    431  72ef		       20 c4 f2 	      jsr	alphaBeta
    428  72ef					      REPEND
    429  72f2							;jsr PhysicallyMovePiece
    430  72f2							;jsr FinaliseMove
    431  72f2		       20 c4 f2 	      jsr	alphaBeta
    428  72f2					      REPEND
    429  72f5							;jsr PhysicallyMovePiece
    430  72f5							;jsr FinaliseMove
    431  72f5		       20 c4 f2 	      jsr	alphaBeta
    428  72f5					      REPEND
    429  72f8							;jsr PhysicallyMovePiece
    430  72f8							;jsr FinaliseMove
    431  72f8		       20 c4 f2 	      jsr	alphaBeta
    428  72f8					      REPEND
    429  72fb							;jsr PhysicallyMovePiece
    430  72fb							;jsr FinaliseMove
    431  72fb		       20 c4 f2 	      jsr	alphaBeta
    432  72fe					      REPEND
    433  72fe
    434  72fe				   .bottomOut
    435  72fe
    436  72fe							; TODO: evaluate board position
    437  72fe							; reverse move to previous position
    438  72fe							; check the results, update scores and move pointers
    439  72fe							; and return vars to expected
    440  72fe
    441  72fe		       a5 9b		      lda	sideToMove
    442  7300		       49 80		      eor	#128
    443  7302		       85 9b		      sta	sideToMove
    444  7304
    445  7304		       c6 99		      dec	currentPly
    446  7306		       a5 99		      lda	currentPly
    447  7308		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    448  730a
    449  730a		       60		      rts
    450  730b
    451  730b							;---------------------------------------------------------------------------------------------------
    452  730b
      0  730b					      DEF	RevertMove
      1  730b				   BANK_RevertMove SET	_CURRENT_BANK
      2  730b				   RevertMove
      3  730b				   TEMPORARY_VAR SET	Overlay
      4  730b				   TEMPORARY_OFFSET SET	0
      5  730b					      SUBROUTINE
    454  730b					      SUBROUTINE
    455  730b
    456  730b							; backtrack after a move, restoring things to the way they were
    457  730b
    458  730b
    459  730b							; piecelist
    460  730b							; piece1, piece2
    461  730b							; board
    462  730b							; enpassantpawn
    463  730b							; materialvalue
    464  730b							; positionvalue
    465  730b							; score?
    466  730b
    467  730b
    468  730b							; restore the board evaluation to what it was at the start of this ply
    469  730b
    470  730b		       ad 80 f0 	      lda	SavedEvaluation
    471  730e		       85 92		      sta	Evaluation
    472  7310		       ad 81 f0 	      lda	SavedEvaluation+1
    473  7313		       85 93		      sta	Evaluation+1
    474  7315
    475  7315		       60		      rts
    476  7316
    477  7316
    478  7316							;---------------------------------------------------------------------------------------------------
    479  7316
      0  7316					      DEF	MoveViaListAtPly
      1  7316				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  7316				   MoveViaListAtPly
      3  7316				   TEMPORARY_VAR SET	Overlay
      4  7316				   TEMPORARY_OFFSET SET	0
      5  7316					      SUBROUTINE
    481  7316					      SUBROUTINE
    482  7316
    483  7316		       ac c9 f1 	      ldy	moveIndex
    484  7319		       30 2e		      bmi	halted	; no valid moves (stalemate if not in check)
    485  731b
      0  731b					      NEXT_RANDOM
      1  731b		       a5 81		      lda	rnd
      2  731d		       4a		      lsr
      3  731e		       90 02		      bcc	.skipEOR
      4  7320		       49 fe		      eor	#RND_EOR_VAL
      5  7322		       85 81	   .skipEOR   sta	rnd
    487  7324
    488  7324							; int(random * # moves) --> a random move #
    489  7324
    490  7324		       a9 00		      lda	#0
    491  7326		       aa		      tax		; selected move
    492  7327		       18		      clc
    493  7328		       65 81	   .mulxcc    adc	rnd
    494  732a		       90 02		      bcc	.mulx
    495  732c		       18		      clc
    496  732d		       e8		      inx
    497  732e		       88	   .mulx      dey
    498  732f		       10 f7		      bpl	.mulxcc
    499  7331
    500  7331					      IF	ASSERTS
    501  7331							; Catch illgal move/index
    502  7331		       ec c9 f1 	      cpx	moveIndex
    503  7334		       f0 02		      beq	.ok
    504  7336		       b0 fe	   .whoops    bcs	.whoops
    505  7338				   .ok
    506  7338					      ENDIF
    507  7338
    508  7338
    509  7338							; fall through...
    510  7338							;---------------------------------------------------------------------------------------------------
    511  7338
    512  7338							;DEF PhysicallyMovePiece
    513  7338
    514  7338				   .foundMove
    515  7338		       bd 82 f0 	      lda	MoveFrom,x
    516  733b		       85 85		      sta	fromX12
    517  733d		       85 87		      sta	originX12
    518  733f
    519  733f		       bd 00 f1 	      lda	MoveTo,x
    520  7342		       85 86		      sta	toX12
    521  7344
    522  7344		       bd 64 f1 	      lda	MovePiece,x
    523  7347							;ora #FLAG_MOVED		 ; prevents usage in castling (for K/R)
    524  7347		       85 9c		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    525  7349
    526  7349		       60	   halted     rts
    527  734a
    528  734a
    529  734a							;---------------------------------------------------------------------------------------------------
    530  734a
      0  734a					      DEF	CheckMoveListFromSquare
      1  734a				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  734a				   CheckMoveListFromSquare
      3  734a				   TEMPORARY_VAR SET	Overlay
      4  734a				   TEMPORARY_OFFSET SET	0
      5  734a					      SUBROUTINE
    532  734a					      SUBROUTINE
    533  734a
    534  734a							; X12 in A
    535  734a							; y = -1 on return if NOT FOUND
    536  734a
    537  734a		       ac c9 f1 	      ldy	moveIndex
    538  734d		       30 0d		      bmi	.failed
    539  734f
    540  734f		       d9 82 f0    .scan      cmp	MoveFrom,y
    541  7352		       f0 03		      beq	.scanned
    542  7354		       88		      dey
    543  7355		       10 f8		      bpl	.scan
    544  7357
    545  7357		       b9 64 f1    .scanned   lda	MovePiece,y
    546  735a							;and #PIECE_MASK
    547  735a		       85 a0		      sta	aiPiece
    548  735c
    549  735c		       60	   .failed    rts
    550  735d
    551  735d
    552  735d							;---------------------------------------------------------------------------------------------------
    553  735d
      0  735d					      DEF	IsSquareUnderAttack
      1  735d				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  735d				   IsSquareUnderAttack
      3  735d				   TEMPORARY_VAR SET	Overlay
      4  735d				   TEMPORARY_OFFSET SET	0
      5  735d					      SUBROUTINE
    555  735d					      SUBROUTINE
    556  735d
    557  735d							; Scan the movelist to find if given square is under attack
    558  735d
    559  735d							; Pass:	 A = X12 square to check
    560  735d							; Return:	 CC = no
    561  735d
    562  735d		       ac c9 f1 	      ldy	moveIndex
    563  7360		       30 08		      bmi	.exit
    564  7362		       d9 00 f1    .scan      cmp	MoveTo,y
    565  7365		       f0 04		      beq	.found	; YES!
    566  7367		       88		      dey
    567  7368		       10 f8		      bpl	.scan
    568  736a
    569  736a		       18	   .exit      clc
    570  736b		       60	   .found     rts
    571  736c
    572  736c
    573  736c							;---------------------------------------------------------------------------------------------------
    574  736c
      0  736c					      DEF	GetKingSquare
      1  736c				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  736c				   GetKingSquare
      3  736c				   TEMPORARY_VAR SET	Overlay
      4  736c				   TEMPORARY_OFFSET SET	0
      5  736c					      SUBROUTINE
    576  736c					      SUBROUTINE
    577  736c
    578  736c							; Return:	 a = square king is on (or -1)
    579  736c
    580  736c		       ac 7c f0 	      ldy	PieceListPtr
    581  736f		       30 0c		      bmi	.exit	; no pieces?!
    582  7371		       b9 2c f0    .find      lda	PieceType,y
    583  7374		       29 0f		      and	#PIECE_MASK
    584  7376		       c9 07		      cmp	#KING
    585  7378		       f0 06		      beq	.found
    586  737a		       88		      dey
    587  737b		       10 f4		      bpl	.find
    588  737d
    589  737d		       a9 ff	   .exit      lda	#-1	; not found/no king square
    590  737f		       60		      rts
    591  7380
    592  7380		       b9 1c f0    .found     lda	PieceSquare,y
    593  7383		       be 2c f0 	      ldx	PieceType,y
    594  7386		       60		      rts
    595  7387
    596  7387
    597  7387							;---------------------------------------------------------------------------------------------------
    598  7387
      0  7387					      DEF	GetPieceGivenFromToSquares
      1  7387				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  7387				   GetPieceGivenFromToSquares
      3  7387				   TEMPORARY_VAR SET	Overlay
      4  7387				   TEMPORARY_OFFSET SET	0
      5  7387					      SUBROUTINE
    600  7387					      SUBROUTINE
    601  7387
    602  7387							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    603  7387							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    604  7387							; This fixes the move with/without castle flag
    605  7387
    606  7387		       ac c9 f1 	      ldy	moveIndex
    607  738a		       30 11		      bmi	.fail	; shouldn't happen
    608  738c		       a5 85	   .scan      lda	fromX12
    609  738e		       d9 82 f0 	      cmp	MoveFrom,y
    610  7391		       d0 07		      bne	.next
    611  7393		       a5 86		      lda	toX12
    612  7395		       d9 00 f1 	      cmp	MoveTo,y
    613  7398		       f0 04		      beq	.found
    614  739a		       88	   .next      dey
    615  739b		       10 ef		      bpl	.scan
    616  739d		       60	   .fail      rts
    617  739e
    618  739e		       b9 64 f1    .found     lda	MovePiece,y
    619  73a1							;and #PIECE_MASK	 castling fails if enabled
    620  73a1		       85 a0		      sta	aiPiece
    621  73a3		       60		      rts
    622  73a4
    623  73a4
    624  73a4
    625  73a4							;---------------------------------------------------------------------------------------------------
    626  73a4
      0  73a4					      DEF	CheckMoveListToSquare
      1  73a4				   BANK_CheckMoveListToSquare SET	_CURRENT_BANK
      2  73a4				   CheckMoveListToSquare
      3  73a4				   TEMPORARY_VAR SET	Overlay
      4  73a4				   TEMPORARY_OFFSET SET	0
      5  73a4					      SUBROUTINE
    628  73a4					      SUBROUTINE
    629  73a4
    630  73a4							; X12 in A
    631  73a4							; y = -1 on return if NOT FOUND
    632  73a4
    633  73a4		       ac c9 f1 	      ldy	moveIndex
    634  73a7		       30 13		      bmi	.sout
    635  73a9		       d9 00 f1    .scan      cmp	MoveTo,y
    636  73ac		       d0 09		      bne	.xscanned
    637  73ae
    638  73ae		       48		      pha
    639  73af		       b9 82 f0 	      lda	MoveFrom,y
    640  73b2		       c5 8e		      cmp	aiFromSquareX12
    641  73b4		       f0 05		      beq	.scanned
    642  73b6		       68		      pla
    643  73b7
    644  73b7		       88	   .xscanned  dey
    645  73b8		       10 ef		      bpl	.scan
    646  73ba		       48		      pha
    647  73bb
    648  73bb		       68	   .scanned   pla
    649  73bc		       60	   .sout      rts
    650  73bd
    651  73bd
    652  73bd							;---------------------------------------------------------------------------------------------------
    653  73bd
      0  73bd					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  73bd
      2  73bd
      3  73bd		       03 bd	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3bd , FREE= $43
      4  73bd					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  73bd				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  73bd				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  73bd				  -	      ERR
      8  73bd					      endif
    655  73bd
    656  73bd							;---------------------------------------------------------------------------------------------------
    657  73bd
    658  73bd							; There is space here (1K) for use as ROM
    659  73bd							; but NOT when the above bank is switched in as RAM, of course!
    660  73bd
    661  73bd
    662  73bd
    663  73bd
    664  73bd							;---------------------------------------------------------------------------------------------------
    665  73bd							; EOF
------- FILE ./chess.asm
------- FILE BANK_EVAL.asm LEVEL 2 PASS 2
      0  73bd					      include	"BANK_EVAL.asm"
      0  73bd					      NEWBANK	EVAL
      1  7fc8 ????				      SEG	EVAL
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   EVAL       SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	EVAL
      2  7800
      3  7800
      4  7800							; see https://www.chessprogramming.org/Simplified_Evaluation_Function
      5  7800
      6  7800
      7  7800		       00 64	   VALUE_P    =	100
      8  7800		       01 40	   VALUE_N    =	320
      9  7800		       01 4a	   VALUE_B    =	330
     10  7800		       01 f4	   VALUE_R    =	500
     11  7800		       03 84	   VALUE_Q    =	900
     12  7800		       4e 20	   VALUE_K    =	20000
     13  7800
     14  7800
     15  7800					      MAC	vequ
     16  7800				   VALUE_{1}  =	{2}
     17  7800					      ENDM
     18  7800
     19  7800					      MAC	lobyte
     20  7800					      .byte	<{2}
     21  7800					      ENDM
     22  7800
     23  7800					      MAC	hibyte
     24  7800					      .byte	>{2}
     25  7800					      ENDM
     26  7800
     27  7800
     28  7800					      MAC	valueof
     29  7800					      {1}	BLANK, 0
     30  7800					      {1}	PAWN, 100	; white
     31  7800					      {1}	PAWN, 100	; black
     32  7800					      {1}	KNIGHT, 320
     33  7800					      {1}	BISHOP, 330
     34  7800					      {1}	ROOK, 500
     35  7800					      {1}	QUEEN, 900
     36  7800					      {1}	KING, 20000
     37  7800					      ENDM
     38  7800
     39  7800
      0  7800					      VALUEOF	VEQU
      0  7800					      VEQU	BLANK, 0
      1  7800		       00 00	   VALUE_BLANK =	0
      0  7800					      VEQU	PAWN, 100
      1  7800		       00 64	   VALUE_PAWN =	100
      0  7800					      VEQU	PAWN, 100
      1  7800		       00 64	   VALUE_PAWN =	100
      0  7800					      VEQU	KNIGHT, 320
      1  7800		       01 40	   VALUE_KNIGHT =	320
      0  7800					      VEQU	BISHOP, 330
      1  7800		       01 4a	   VALUE_BISHOP =	330
      0  7800					      VEQU	ROOK, 500
      1  7800		       01 f4	   VALUE_ROOK =	500
      0  7800					      VEQU	QUEEN, 900
      1  7800		       03 84	   VALUE_QUEEN =	900
      0  7800					      VEQU	KING, 20000
      1  7800		       4e 20	   VALUE_KING =	20000
      0  7800					      DEF	PieceValueLO
      1  7800				   BANK_PieceValueLO SET	_CURRENT_BANK
      2  7800				   PieceValueLO
      3  7800				   TEMPORARY_VAR SET	Overlay
      4  7800				   TEMPORARY_OFFSET SET	0
      5  7800					      SUBROUTINE
      0  7800					      VALUEOF	LOBYTE
      0  7800					      LOBYTE	BLANK, 0
      1  7800		       00		      .byte.b	<0
      0  7801					      LOBYTE	PAWN, 100
      1  7801		       64		      .byte.b	<100
      0  7802					      LOBYTE	PAWN, 100
      1  7802		       64		      .byte.b	<100
      0  7803					      LOBYTE	KNIGHT, 320
      1  7803		       40		      .byte.b	<320
      0  7804					      LOBYTE	BISHOP, 330
      1  7804		       4a		      .byte.b	<330
      0  7805					      LOBYTE	ROOK, 500
      1  7805		       f4		      .byte.b	<500
      0  7806					      LOBYTE	QUEEN, 900
      1  7806		       84		      .byte.b	<900
      0  7807					      LOBYTE	KING, 20000
      1  7807		       20		      .byte.b	<20000
      0  7808					      DEF	PieceValueHI
      1  7808				   BANK_PieceValueHI SET	_CURRENT_BANK
      2  7808				   PieceValueHI
      3  7808				   TEMPORARY_VAR SET	Overlay
      4  7808				   TEMPORARY_OFFSET SET	0
      5  7808					      SUBROUTINE
      0  7808					      VALUEOF	HIBYTE
      0  7808					      HIBYTE	BLANK, 0
      1  7808		       00		      .byte.b	>0
      0  7809					      HIBYTE	PAWN, 100
      1  7809		       00		      .byte.b	>100
      0  780a					      HIBYTE	PAWN, 100
      1  780a		       00		      .byte.b	>100
      0  780b					      HIBYTE	KNIGHT, 320
      1  780b		       01		      .byte.b	>320
      0  780c					      HIBYTE	BISHOP, 330
      1  780c		       01		      .byte.b	>330
      0  780d					      HIBYTE	ROOK, 500
      1  780d		       01		      .byte.b	>500
      0  780e					      HIBYTE	QUEEN, 900
      1  780e		       03		      .byte.b	>900
      0  780f					      HIBYTE	KING, 20000
      1  780f		       4e		      .byte.b	>20000
     45  7810
     46  7810
     47  7810							;---------------------------------------------------------------------------------------------------
     48  7810
      0  7810					      DEF	AddPieceMaterialValue
      1  7810				   BANK_AddPieceMaterialValue SET	_CURRENT_BANK
      2  7810				   AddPieceMaterialValue
      3  7810				   TEMPORARY_VAR SET	Overlay
      4  7810				   TEMPORARY_OFFSET SET	0
      5  7810					      SUBROUTINE
     50  7810					      SUBROUTINE
     51  7810							; Adjust the material score based on the piece
     52  7810							; to REMOVE a piece, negate the piece colour!
     53  7810							; y = piece type
     54  7810							; carry C = white, S = black
     55  7810
     56  7810		       b0 0f		      bcs	.black
     57  7812
     58  7812		       b9 00 f0 	      lda	PieceValueLO,y
     59  7815		       65 92		      adc	Evaluation
     60  7817		       85 92		      sta	Evaluation
     61  7819		       b9 08 f0 	      lda	PieceValueHI,y
     62  781c		       65 93		      adc	Evaluation+1
     63  781e		       85 93		      sta	Evaluation+1
     64  7820
     65  7820		       60		      rts
     66  7821
     67  7821		       a5 92	   .black     lda	Evaluation
     68  7823		       f9 00 f0 	      sbc	PieceValueLO,y
     69  7826		       85 92		      sta	Evaluation
     70  7828		       a5 93		      lda	Evaluation+1
     71  782a		       f9 08 f0 	      sbc	PieceValueHI,y
     72  782d		       85 93		      sta	Evaluation+1
     73  782f		       60		      rts
     74  7830
     75  7830
     76  7830							;---------------------------------------------------------------------------------------------------
     77  7830
      0  7830					      DEF	AddPiecePositionValue
      1  7830				   BANK_AddPiecePositionValue SET	_CURRENT_BANK
      2  7830				   AddPiecePositionValue
      3  7830				   TEMPORARY_VAR SET	Overlay
      4  7830				   TEMPORARY_OFFSET SET	0
      5  7830					      SUBROUTINE
     79  7830					      SUBROUTINE
     80  7830
      0  7830					      VAR	__pval, 2
      1  7830				   __pval     SET	TEMPORARY_VAR
      2  7830				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  7830
      4  7830				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7830				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7830				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7830					      ENDIF
      8  7830				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7830				  -	      ECHO	"Temporary Variable", __pval, "overflow!"
     10  7830				  -	      ERR
     11  7830					      ENDIF
     12  7830					      LIST	ON
     82  7830
     83  7830							; y = square
     84  7830							; a = piece type (+flags)
     85  7830
     86  7830		       c9 80		      cmp	#128	; black = CS
     87  7832		       29 0f		      and	#PIECE_MASK
     88  7834		       aa		      tax
     89  7835
     90  7835		       bd cb f0 	      lda	PosValVecLO,x
     91  7838		       85 a1		      sta	__pval
     92  783a		       bd d3 f0 	      lda	PosValVecHI,x
     93  783d		       85 a2		      sta	__pval+1
     94  783f
     95  783f		       b0 12		      bcs	.black
     96  7841
     97  7841		       98		      tya
     98  7842		       0a		      asl
     99  7843		       a8		      tay
    100  7844
    101  7844		       18		      clc
    102  7845		       a5 92		      lda	Evaluation
    103  7847		       71 a1		      adc	(__pval),y
    104  7849		       85 92		      sta	Evaluation
    105  784b		       c8		      iny
    106  784c		       a5 93		      lda	Evaluation+1
    107  784e		       71 a1		      adc	(__pval),y
    108  7850		       85 93		      sta	Evaluation+1
    109  7852		       60		      rts
    110  7853
    111  7853				   .black
    112  7853
    113  7853
    114  7853							; negate the index
    115  7853							; converts
    116  7853
    117  7853		       98		      tya
    118  7854		       aa		      tax
    119  7855		       bc 67 f0 	      ldy	FlipSquareIndex,x
    120  7858
    121  7858		       38		      sec
    122  7859		       a5 92		      lda	Evaluation
    123  785b		       f1 a1		      sbc	(__pval),y
    124  785d		       85 92		      sta	Evaluation
    125  785f		       c8		      iny
    126  7860		       a5 93		      lda	Evaluation+1
    127  7862		       f1 a1		      sbc	(__pval),y
    128  7864		       85 93		      sta	Evaluation+1
    129  7866		       60		      rts
    130  7867
    131  7867
    132  7867							;---------------------------------------------------------------------------------------------------
    133  7867
    134  7867
      0  7867					      ALLOCATE	FlipSquareIndex, 100
      0  7867					      OPTIONAL_PAGEBREAK	"Table", 100
     10  7867					      LIST	ON
      0  7867					      DEF	FlipSquareIndex
      1  7867				   BANK_FlipSquareIndex SET	_CURRENT_BANK
      2  7867				   FlipSquareIndex
      3  7867				   TEMPORARY_VAR SET	Overlay
      4  7867				   TEMPORARY_OFFSET SET	0
      5  7867					      SUBROUTINE
    136  7867
    137  7867		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0
    138  7871		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0
    139  787b
    140  787b				   .SQBASE    SET	90
    141  787b					      REPEAT	8
    142  787b		       00 00		      .byte.b	0,0
    143  787b				   .SQX       SET	2
    144  787d					      REPEAT	8
    145  787d		       b8		      .byte.b	(.SQBASE+.SQX)*2
    146  787d				   .SQX       SET	.SQX + 1
    144  787d					      REPEND
    145  787e		       ba		      .byte.b	(.SQBASE+.SQX)*2
    146  787e				   .SQX       SET	.SQX + 1
    144  787e					      REPEND
    145  787f		       bc		      .byte.b	(.SQBASE+.SQX)*2
    146  787f				   .SQX       SET	.SQX + 1
    144  787f					      REPEND
    145  7880		       be		      .byte.b	(.SQBASE+.SQX)*2
    146  7880				   .SQX       SET	.SQX + 1
    144  7880					      REPEND
    145  7881		       c0		      .byte.b	(.SQBASE+.SQX)*2
    146  7881				   .SQX       SET	.SQX + 1
    144  7881					      REPEND
    145  7882		       c2		      .byte.b	(.SQBASE+.SQX)*2
    146  7882				   .SQX       SET	.SQX + 1
    144  7882					      REPEND
    145  7883		       c4		      .byte.b	(.SQBASE+.SQX)*2
    146  7883				   .SQX       SET	.SQX + 1
    144  7883					      REPEND
    145  7884		       c6		      .byte.b	(.SQBASE+.SQX)*2
    146  7884				   .SQX       SET	.SQX + 1
    147  7885					      REPEND
    148  7885				   .SQBASE    SET	.SQBASE - 10
    141  7885					      REPEND
    142  7885		       00 00		      .byte.b	0,0
    143  7885				   .SQX       SET	2
    144  7887					      REPEAT	8
    145  7887		       a4		      .byte.b	(.SQBASE+.SQX)*2
    146  7887				   .SQX       SET	.SQX + 1
    144  7887					      REPEND
    145  7888		       a6		      .byte.b	(.SQBASE+.SQX)*2
    146  7888				   .SQX       SET	.SQX + 1
    144  7888					      REPEND
    145  7889		       a8		      .byte.b	(.SQBASE+.SQX)*2
    146  7889				   .SQX       SET	.SQX + 1
    144  7889					      REPEND
    145  788a		       aa		      .byte.b	(.SQBASE+.SQX)*2
    146  788a				   .SQX       SET	.SQX + 1
    144  788a					      REPEND
    145  788b		       ac		      .byte.b	(.SQBASE+.SQX)*2
    146  788b				   .SQX       SET	.SQX + 1
    144  788b					      REPEND
    145  788c		       ae		      .byte.b	(.SQBASE+.SQX)*2
    146  788c				   .SQX       SET	.SQX + 1
    144  788c					      REPEND
    145  788d		       b0		      .byte.b	(.SQBASE+.SQX)*2
    146  788d				   .SQX       SET	.SQX + 1
    144  788d					      REPEND
    145  788e		       b2		      .byte.b	(.SQBASE+.SQX)*2
    146  788e				   .SQX       SET	.SQX + 1
    147  788f					      REPEND
    148  788f				   .SQBASE    SET	.SQBASE - 10
    141  788f					      REPEND
    142  788f		       00 00		      .byte.b	0,0
    143  788f				   .SQX       SET	2
    144  7891					      REPEAT	8
    145  7891		       90		      .byte.b	(.SQBASE+.SQX)*2
    146  7891				   .SQX       SET	.SQX + 1
    144  7891					      REPEND
    145  7892		       92		      .byte.b	(.SQBASE+.SQX)*2
    146  7892				   .SQX       SET	.SQX + 1
    144  7892					      REPEND
    145  7893		       94		      .byte.b	(.SQBASE+.SQX)*2
    146  7893				   .SQX       SET	.SQX + 1
    144  7893					      REPEND
    145  7894		       96		      .byte.b	(.SQBASE+.SQX)*2
    146  7894				   .SQX       SET	.SQX + 1
    144  7894					      REPEND
    145  7895		       98		      .byte.b	(.SQBASE+.SQX)*2
    146  7895				   .SQX       SET	.SQX + 1
    144  7895					      REPEND
    145  7896		       9a		      .byte.b	(.SQBASE+.SQX)*2
    146  7896				   .SQX       SET	.SQX + 1
    144  7896					      REPEND
    145  7897		       9c		      .byte.b	(.SQBASE+.SQX)*2
    146  7897				   .SQX       SET	.SQX + 1
    144  7897					      REPEND
    145  7898		       9e		      .byte.b	(.SQBASE+.SQX)*2
    146  7898				   .SQX       SET	.SQX + 1
    147  7899					      REPEND
    148  7899				   .SQBASE    SET	.SQBASE - 10
    141  7899					      REPEND
    142  7899		       00 00		      .byte.b	0,0
    143  7899				   .SQX       SET	2
    144  789b					      REPEAT	8
    145  789b		       7c		      .byte.b	(.SQBASE+.SQX)*2
    146  789b				   .SQX       SET	.SQX + 1
    144  789b					      REPEND
    145  789c		       7e		      .byte.b	(.SQBASE+.SQX)*2
    146  789c				   .SQX       SET	.SQX + 1
    144  789c					      REPEND
    145  789d		       80		      .byte.b	(.SQBASE+.SQX)*2
    146  789d				   .SQX       SET	.SQX + 1
    144  789d					      REPEND
    145  789e		       82		      .byte.b	(.SQBASE+.SQX)*2
    146  789e				   .SQX       SET	.SQX + 1
    144  789e					      REPEND
    145  789f		       84		      .byte.b	(.SQBASE+.SQX)*2
    146  789f				   .SQX       SET	.SQX + 1
    144  789f					      REPEND
    145  78a0		       86		      .byte.b	(.SQBASE+.SQX)*2
    146  78a0				   .SQX       SET	.SQX + 1
    144  78a0					      REPEND
    145  78a1		       88		      .byte.b	(.SQBASE+.SQX)*2
    146  78a1				   .SQX       SET	.SQX + 1
    144  78a1					      REPEND
    145  78a2		       8a		      .byte.b	(.SQBASE+.SQX)*2
    146  78a2				   .SQX       SET	.SQX + 1
    147  78a3					      REPEND
    148  78a3				   .SQBASE    SET	.SQBASE - 10
    141  78a3					      REPEND
    142  78a3		       00 00		      .byte.b	0,0
    143  78a3				   .SQX       SET	2
    144  78a5					      REPEAT	8
    145  78a5		       68		      .byte.b	(.SQBASE+.SQX)*2
    146  78a5				   .SQX       SET	.SQX + 1
    144  78a5					      REPEND
    145  78a6		       6a		      .byte.b	(.SQBASE+.SQX)*2
    146  78a6				   .SQX       SET	.SQX + 1
    144  78a6					      REPEND
    145  78a7		       6c		      .byte.b	(.SQBASE+.SQX)*2
    146  78a7				   .SQX       SET	.SQX + 1
    144  78a7					      REPEND
    145  78a8		       6e		      .byte.b	(.SQBASE+.SQX)*2
    146  78a8				   .SQX       SET	.SQX + 1
    144  78a8					      REPEND
    145  78a9		       70		      .byte.b	(.SQBASE+.SQX)*2
    146  78a9				   .SQX       SET	.SQX + 1
    144  78a9					      REPEND
    145  78aa		       72		      .byte.b	(.SQBASE+.SQX)*2
    146  78aa				   .SQX       SET	.SQX + 1
    144  78aa					      REPEND
    145  78ab		       74		      .byte.b	(.SQBASE+.SQX)*2
    146  78ab				   .SQX       SET	.SQX + 1
    144  78ab					      REPEND
    145  78ac		       76		      .byte.b	(.SQBASE+.SQX)*2
    146  78ac				   .SQX       SET	.SQX + 1
    147  78ad					      REPEND
    148  78ad				   .SQBASE    SET	.SQBASE - 10
    141  78ad					      REPEND
    142  78ad		       00 00		      .byte.b	0,0
    143  78ad				   .SQX       SET	2
    144  78af					      REPEAT	8
    145  78af		       54		      .byte.b	(.SQBASE+.SQX)*2
    146  78af				   .SQX       SET	.SQX + 1
    144  78af					      REPEND
    145  78b0		       56		      .byte.b	(.SQBASE+.SQX)*2
    146  78b0				   .SQX       SET	.SQX + 1
    144  78b0					      REPEND
    145  78b1		       58		      .byte.b	(.SQBASE+.SQX)*2
    146  78b1				   .SQX       SET	.SQX + 1
    144  78b1					      REPEND
    145  78b2		       5a		      .byte.b	(.SQBASE+.SQX)*2
    146  78b2				   .SQX       SET	.SQX + 1
    144  78b2					      REPEND
    145  78b3		       5c		      .byte.b	(.SQBASE+.SQX)*2
    146  78b3				   .SQX       SET	.SQX + 1
    144  78b3					      REPEND
    145  78b4		       5e		      .byte.b	(.SQBASE+.SQX)*2
    146  78b4				   .SQX       SET	.SQX + 1
    144  78b4					      REPEND
    145  78b5		       60		      .byte.b	(.SQBASE+.SQX)*2
    146  78b5				   .SQX       SET	.SQX + 1
    144  78b5					      REPEND
    145  78b6		       62		      .byte.b	(.SQBASE+.SQX)*2
    146  78b6				   .SQX       SET	.SQX + 1
    147  78b7					      REPEND
    148  78b7				   .SQBASE    SET	.SQBASE - 10
    141  78b7					      REPEND
    142  78b7		       00 00		      .byte.b	0,0
    143  78b7				   .SQX       SET	2
    144  78b9					      REPEAT	8
    145  78b9		       40		      .byte.b	(.SQBASE+.SQX)*2
    146  78b9				   .SQX       SET	.SQX + 1
    144  78b9					      REPEND
    145  78ba		       42		      .byte.b	(.SQBASE+.SQX)*2
    146  78ba				   .SQX       SET	.SQX + 1
    144  78ba					      REPEND
    145  78bb		       44		      .byte.b	(.SQBASE+.SQX)*2
    146  78bb				   .SQX       SET	.SQX + 1
    144  78bb					      REPEND
    145  78bc		       46		      .byte.b	(.SQBASE+.SQX)*2
    146  78bc				   .SQX       SET	.SQX + 1
    144  78bc					      REPEND
    145  78bd		       48		      .byte.b	(.SQBASE+.SQX)*2
    146  78bd				   .SQX       SET	.SQX + 1
    144  78bd					      REPEND
    145  78be		       4a		      .byte.b	(.SQBASE+.SQX)*2
    146  78be				   .SQX       SET	.SQX + 1
    144  78be					      REPEND
    145  78bf		       4c		      .byte.b	(.SQBASE+.SQX)*2
    146  78bf				   .SQX       SET	.SQX + 1
    144  78bf					      REPEND
    145  78c0		       4e		      .byte.b	(.SQBASE+.SQX)*2
    146  78c0				   .SQX       SET	.SQX + 1
    147  78c1					      REPEND
    148  78c1				   .SQBASE    SET	.SQBASE - 10
    141  78c1					      REPEND
    142  78c1		       00 00		      .byte.b	0,0
    143  78c1				   .SQX       SET	2
    144  78c3					      REPEAT	8
    145  78c3		       2c		      .byte.b	(.SQBASE+.SQX)*2
    146  78c3				   .SQX       SET	.SQX + 1
    144  78c3					      REPEND
    145  78c4		       2e		      .byte.b	(.SQBASE+.SQX)*2
    146  78c4				   .SQX       SET	.SQX + 1
    144  78c4					      REPEND
    145  78c5		       30		      .byte.b	(.SQBASE+.SQX)*2
    146  78c5				   .SQX       SET	.SQX + 1
    144  78c5					      REPEND
    145  78c6		       32		      .byte.b	(.SQBASE+.SQX)*2
    146  78c6				   .SQX       SET	.SQX + 1
    144  78c6					      REPEND
    145  78c7		       34		      .byte.b	(.SQBASE+.SQX)*2
    146  78c7				   .SQX       SET	.SQX + 1
    144  78c7					      REPEND
    145  78c8		       36		      .byte.b	(.SQBASE+.SQX)*2
    146  78c8				   .SQX       SET	.SQX + 1
    144  78c8					      REPEND
    145  78c9		       38		      .byte.b	(.SQBASE+.SQX)*2
    146  78c9				   .SQX       SET	.SQX + 1
    144  78c9					      REPEND
    145  78ca		       3a		      .byte.b	(.SQBASE+.SQX)*2
    146  78ca				   .SQX       SET	.SQX + 1
    147  78cb					      REPEND
    148  78cb				   .SQBASE    SET	.SQBASE - 10
    149  78cb					      REPEND
    150  78cb
    151  78cb
    152  78cb							;---------------------------------------------------------------------------------------------------
    153  78cb							; Vectors to the position value tables for each piece
    154  78cb
    155  78cb					      MAC	posval
    156  78cb					      .byte	0
    157  78cb					      .byte	{1}PositionalValue_PAWN
    158  78cb					      .byte	{1}PositionalValue_PAWN
    159  78cb					      .byte	{1}PositionalValue_KNIGHT
    160  78cb					      .byte	{1}PositionalValue_BISHOP
    161  78cb					      .byte	{1}PositionalValue_ROOK
    162  78cb					      .byte	{1}PositionalValue_QUEEN
    163  78cb					      .byte	{1}PositionalValue_KING_MIDGAME
    164  78cb					      ENDM
    165  78cb
      0  78cb					      ALLOCATE	PosValVecLO, 8
      0  78cb					      OPTIONAL_PAGEBREAK	"Table", 8
     10  78cb					      LIST	ON
      0  78cb					      DEF	PosValVecLO
      1  78cb				   BANK_PosValVecLO SET	_CURRENT_BANK
      2  78cb				   PosValVecLO
      3  78cb				   TEMPORARY_VAR SET	Overlay
      4  78cb				   TEMPORARY_OFFSET SET	0
      5  78cb					      SUBROUTINE
      0  78cb					      POSVAL	<
      1  78cb		       00		      .byte.b	0
      2  78cc		       00		      .byte.b	<PositionalValue_PAWN
      3  78cd		       00		      .byte.b	<PositionalValue_PAWN
      4  78ce		       00		      .byte.b	<PositionalValue_KNIGHT
      5  78cf		       00		      .byte.b	<PositionalValue_BISHOP
      6  78d0		       00		      .byte.b	<PositionalValue_ROOK
      7  78d1		       00		      .byte.b	<PositionalValue_QUEEN
      8  78d2		       00		      .byte.b	<PositionalValue_KING_MIDGAME
      0  78d3					      ALLOCATE	PosValVecHI, 8
      0  78d3					      OPTIONAL_PAGEBREAK	"Table", 8
     10  78d3					      LIST	ON
      0  78d3					      DEF	PosValVecHI
      1  78d3				   BANK_PosValVecHI SET	_CURRENT_BANK
      2  78d3				   PosValVecHI
      3  78d3				   TEMPORARY_VAR SET	Overlay
      4  78d3				   TEMPORARY_OFFSET SET	0
      5  78d3					      SUBROUTINE
      0  78d3					      POSVAL	>
      1  78d3		       00		      .byte.b	0
      2  78d4		       f1		      .byte.b	>PositionalValue_PAWN
      3  78d5		       f1		      .byte.b	>PositionalValue_PAWN
      4  78d6		       f2		      .byte.b	>PositionalValue_KNIGHT
      5  78d7		       f3		      .byte.b	>PositionalValue_BISHOP
      6  78d8		       f4		      .byte.b	>PositionalValue_ROOK
      7  78d9		       f5		      .byte.b	>PositionalValue_QUEEN
      8  78da		       f6		      .byte.b	>PositionalValue_KING_MIDGAME
    170  78db
    171  78db
    172  78db							;---------------------------------------------------------------------------------------------------
    173  78db
      0  78db					      ALLOCATE	PositionalValue_PAWN, 200
      0  78db					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $25
 PAGEBREAK LOCATION = $f100
     10  7900					      LIST	ON
      0  7900					      DEF	PositionalValue_PAWN
      1  7900				   BANK_PositionalValue_PAWN SET	_CURRENT_BANK
      2  7900				   PositionalValue_PAWN
      3  7900				   TEMPORARY_VAR SET	Overlay
      4  7900				   TEMPORARY_OFFSET SET	0
      5  7900					      SUBROUTINE
    175  7900
    176  7900		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    177  7914		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    178  7928
    179  7928		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 0, 0, 0, 0, 0	; 20-29
    180  793c		       00 00 00 00*	      .word.w	0,0, 5, 10, 10,-20,-20, 10, 10, 5	; 30-
    181  7950		       00 00 00 00*	      .word.w	0,0, 5, -5,-10, 0, 0,-10, -5, 5	; 40-
    182  7964		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 20, 20, 0, 0, 0	; 50-
    183  7978		       00 00 00 00*	      .word.w	0,0, 5, 5, 10, 25, 25, 10, 5, 5	; 60-
    184  798c		       00 00 00 00*	      .word.w	0,0, 10, 10, 20, 30, 30, 20, 10, 10	; 70-
    185  79a0		       00 00 00 00*	      .word.w	0,0, 50, 50, 50, 50, 50, 50, 50, 50	; 80-
    186  79b4		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 0, 0, 0, 0, 0	; 90-
    187  79c8
    188  79c8
    189  79c8							;---------------------------------------------------------------------------------------------------
    190  79c8
      0  79c8					      ALLOCATE	PositionalValue_KNIGHT, 200
      0  79c8					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $38
 PAGEBREAK LOCATION = $f200
     10  7a00					      LIST	ON
      0  7a00					      DEF	PositionalValue_KNIGHT
      1  7a00				   BANK_PositionalValue_KNIGHT SET	_CURRENT_BANK
      2  7a00				   PositionalValue_KNIGHT
      3  7a00				   TEMPORARY_VAR SET	Overlay
      4  7a00				   TEMPORARY_OFFSET SET	0
      5  7a00					      SUBROUTINE
    192  7a00
    193  7a00		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    194  7a14		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    195  7a28
    196  7a28		       00 00 00 00*	      .word.w	0,0, -50,-40,-30,-30,-30,-30,-40,-50
    197  7a3c		       00 00 00 00*	      .word.w	0,0, -40,-20, 0, 5, 5, 0,-20,-40
    198  7a50		       00 00 00 00*	      .word.w	0,0, -30, 5, 10, 15, 15, 10, 5,-30
    199  7a64		       00 00 00 00*	      .word.w	0,0, -30, 0, 15, 20, 20, 15, 0,-30
    200  7a78		       00 00 00 00*	      .word.w	0,0, -30, 5, 15, 20, 20, 15, 5,-30
    201  7a8c		       00 00 00 00*	      .word.w	0,0, -30, 0, 10, 15, 15, 10, 0,-30
    202  7aa0		       00 00 00 00*	      .word.w	0,0, -40,-20, 0, 0, 0, 0,-20,-40
    203  7ab4		       00 00 00 00*	      .word.w	0,0, -50,-40,-30,-30,-30,-30,-40,-50
    204  7ac8
    205  7ac8
    206  7ac8							;---------------------------------------------------------------------------------------------------
    207  7ac8
      0  7ac8					      ALLOCATE	PositionalValue_BISHOP, 200
      0  7ac8					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $38
 PAGEBREAK LOCATION = $f300
     10  7b00					      LIST	ON
      0  7b00					      DEF	PositionalValue_BISHOP
      1  7b00				   BANK_PositionalValue_BISHOP SET	_CURRENT_BANK
      2  7b00				   PositionalValue_BISHOP
      3  7b00				   TEMPORARY_VAR SET	Overlay
      4  7b00				   TEMPORARY_OFFSET SET	0
      5  7b00					      SUBROUTINE
    209  7b00
    210  7b00		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    211  7b14		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    212  7b28
    213  7b28		       00 00 00 00*	      .word.w	0,0, -20,-10,-10,-10,-10,-10,-10,-20
    214  7b3c		       00 00 00 00*	      .word.w	0,0, -10, 5, 0, 0, 0, 0, 5,-10
    215  7b50		       00 00 00 00*	      .word.w	0,0, -10, 10, 10, 10, 10, 10, 10,-10
    216  7b64		       00 00 00 00*	      .word.w	0,0, -10, 0, 10, 10, 10, 10, 0,-10
    217  7b78		       00 00 00 00*	      .word.w	0,0, -10, 5, 5, 10, 10, 5, 5,-10
    218  7b8c		       00 00 00 00*	      .word.w	0,0, -10, 0, 5, 10, 10, 5, 0,-10
    219  7ba0		       00 00 00 00*	      .word.w	0,0, -10, 0, 0, 0, 0, 0, 0,-10
    220  7bb4		       00 00 00 00*	      .word.w	0,0, -20,-10,-10,-10,-10,-10,-10,-20
    221  7bc8
    222  7bc8
    223  7bc8							;---------------------------------------------------------------------------------------------------
    224  7bc8
      0  7bc8					      ALLOCATE	PositionalValue_ROOK, 200
      0  7bc8					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $38
 PAGEBREAK LOCATION = $f400
     10  7c00					      LIST	ON
      0  7c00					      DEF	PositionalValue_ROOK
      1  7c00				   BANK_PositionalValue_ROOK SET	_CURRENT_BANK
      2  7c00				   PositionalValue_ROOK
      3  7c00				   TEMPORARY_VAR SET	Overlay
      4  7c00				   TEMPORARY_OFFSET SET	0
      5  7c00					      SUBROUTINE
    226  7c00
    227  7c00		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    228  7c14		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    229  7c28
    230  7c28		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 5, 5, 0, 0, 0
    231  7c3c		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    232  7c50		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    233  7c64		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    234  7c78		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    235  7c8c		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    236  7ca0		       00 00 00 00*	      .word.w	0,0, 5, 10, 10, 10, 10, 10, 10, 5
    237  7cb4		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 0, 0, 0, 0, 0
    238  7cc8
    239  7cc8
    240  7cc8							;---------------------------------------------------------------------------------------------------
    241  7cc8
      0  7cc8					      ALLOCATE	PositionalValue_QUEEN, 200
      0  7cc8					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $38
 PAGEBREAK LOCATION = $f500
     10  7d00					      LIST	ON
      0  7d00					      DEF	PositionalValue_QUEEN
      1  7d00				   BANK_PositionalValue_QUEEN SET	_CURRENT_BANK
      2  7d00				   PositionalValue_QUEEN
      3  7d00				   TEMPORARY_VAR SET	Overlay
      4  7d00				   TEMPORARY_OFFSET SET	0
      5  7d00					      SUBROUTINE
    243  7d00
    244  7d00		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    245  7d14		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    246  7d28
    247  7d28		       00 00 00 00*	      .word.w	0,0, -20,-10,-10, -5, -5,-10,-10,-20
    248  7d3c		       00 00 00 00*	      .word.w	0,0, -10, 0, 5, 0, 0, 0, 0,-10
    249  7d50		       00 00 00 00*	      .word.w	0,0, -10, 5, 5, 5, 5, 5, 0,-10
    250  7d64		       00 00 00 00*	      .word.w	0,0, 0, 0, 5, 5, 5, 5, 0, -5
    251  7d78		       00 00 00 00*	      .word.w	0,0, -5, 0, 5, 5, 5, 5, 0, -5
    252  7d8c		       00 00 00 00*	      .word.w	0,0, -10, 0, 5, 5, 5, 5, 0,-10
    253  7da0		       00 00 00 00*	      .word.w	0,0, -10, 0, 0, 0, 0, 0, 0,-10
    254  7db4		       00 00 00 00*	      .word.w	0,0, -20,-10,-10, -5, -5,-10,-10,-20
    255  7dc8
    256  7dc8
    257  7dc8							;---------------------------------------------------------------------------------------------------
    258  7dc8
      0  7dc8					      ALLOCATE	PositionalValue_KING_MIDGAME, 200
      0  7dc8					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $38
 PAGEBREAK LOCATION = $f600
     10  7e00					      LIST	ON
      0  7e00					      DEF	PositionalValue_KING_MIDGAME
      1  7e00				   BANK_PositionalValue_KING_MIDGAME SET	_CURRENT_BANK
      2  7e00				   PositionalValue_KING_MIDGAME
      3  7e00				   TEMPORARY_VAR SET	Overlay
      4  7e00				   TEMPORARY_OFFSET SET	0
      5  7e00					      SUBROUTINE
    260  7e00
    261  7e00		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    262  7e14		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    263  7e28
    264  7e28		       00 00 00 00*	      .word.w	0,0, 20, 30, 10, 0, 0, 10, 30, 20
    265  7e3c		       00 00 00 00*	      .word.w	0,0, 20, 20, 0, 0, 0, 0, 20, 20
    266  7e50		       00 00 00 00*	      .word.w	0,0, -10,-20,-20,-20,-20,-20,-20,-10
    267  7e64		       00 00 00 00*	      .word.w	0,0, -20,-30,-30,-40,-40,-30,-30,-20
    268  7e78		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    269  7e8c		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    270  7ea0		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    271  7eb4		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    272  7ec8
    273  7ec8
    274  7ec8							;---------------------------------------------------------------------------------------------------
    275  7ec8
      0  7ec8					      ALLOCATE	PositionalValue_KING_ENDGAME, 200
      0  7ec8					      OPTIONAL_PAGEBREAK	"Table", 200
 PAGE BREAK INSERTED FOR Table
 REQUESTED SIZE = $c8
 WASTED SPACE = $38
 PAGEBREAK LOCATION = $f700
     10  7f00					      LIST	ON
      0  7f00					      DEF	PositionalValue_KING_ENDGAME
      1  7f00				   BANK_PositionalValue_KING_ENDGAME SET	_CURRENT_BANK
      2  7f00				   PositionalValue_KING_ENDGAME
      3  7f00				   TEMPORARY_VAR SET	Overlay
      4  7f00				   TEMPORARY_OFFSET SET	0
      5  7f00					      SUBROUTINE
    277  7f00
    278  7f00		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    279  7f14		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    280  7f28
    281  7f28		       00 00 00 00*	      .word.w	0,0, -50,-30,-30,-30,-30,-30,-30,-50
    282  7f3c		       00 00 00 00*	      .word.w	0,0, -30,-30, 0, 0, 0, 0,-30,-30
    283  7f50		       00 00 00 00*	      .word.w	0,0, -30,-10, 20, 30, 30, 20,-10,-30
    284  7f64		       00 00 00 00*	      .word.w	0,0, -30,-10, 30, 40, 40, 30,-10,-30
    285  7f78		       00 00 00 00*	      .word.w	0,0, -30,-10, 30, 40, 40, 30,-10,-30
    286  7f8c		       00 00 00 00*	      .word.w	0,0, -30,-10, 20, 30, 30, 20,-10,-30
    287  7fa0		       00 00 00 00*	      .word.w	0,0, -30,-20,-10, 0, 0,-10,-20,-30
    288  7fb4		       00 00 00 00*	      .word.w	0,0, -50,-40,-30,-20,-20,-30,-40,-50
    289  7fc8
    290  7fc8
    291  7fc8							;---------------------------------------------------------------------------------------------------
    292  7fc8
    293  7fc8
    294  7fc8				  -	      if	0
    295  7fc8				  -
    296  7fc8				  -def	      quiesce(	alpha, beta ):
    297  7fc8				  -	      stand_pat	= evaluate_board()
    298  7fc8				  -	      if(	stand_pat >= beta ):
    299  7fc8				  -	      return	beta
    300  7fc8				  -	      if(	alpha < stand_pat ):
    301  7fc8				  -	      alpha	= stand_pat
    302  7fc8				  -
    303  7fc8				  -	      for	move in board.legal_moves:
    304  7fc8				  -	      if	board.is_capture(move):
    305  7fc8				  -	      make_move(move)
    306  7fc8				  -	      score	= -quiesce( -beta, -alpha )
    307  7fc8				  -	      unmake_move()
    308  7fc8				  -
    309  7fc8				  -	      if(	score >= beta ):
    310  7fc8				  -	      return	beta
    311  7fc8				  -	      if(	score > alpha ):
    312  7fc8				  -	      alpha	= score
    313  7fc8				  -	      return	alpha
    314  7fc8				  -
    315  7fc8				  -def	      alphabeta(	alpha, beta, depthleft ):
    316  7fc8				  -	      bestscore	= -9999
    317  7fc8				  -	      if(	depthleft == 0 ):
    318  7fc8				  -	      return	quiesce( alpha, beta )
    319  7fc8				  -	      for	move in board.legal_moves:
    320  7fc8				  -	      make_move(move)
    321  7fc8				  -	      score	= -alphabeta( -beta, -alpha, depthleft - 1 )
    322  7fc8				  -	      unmake_move()
    323  7fc8				  -	      if(	score >= beta ):
    324  7fc8				  -	      return	score
    325  7fc8				  -	      if(	score > bestscore ):
    326  7fc8				  -	      bestscore	= score
    327  7fc8				  -	      if(	score > alpha ):
    328  7fc8				  -	      alpha	= score
    329  7fc8				  -	      return	bestscore
    330  7fc8				  -
    331  7fc8				  -import     chess.polyglot
    332  7fc8				  -
    333  7fc8				  -def	      selectmove(depth):
    334  7fc8				  -	      try:
    335  7fc8				  -	      move	= chess.polyglot.MemoryMappedReader("bookfish.bin").weighted_choice(board).move()
    336  7fc8				  -	      movehistory.append(move)
    337  7fc8				  -	      return	move
    338  7fc8				  -	      except:
    339  7fc8				  -	      bestMove	= chess.Move.null()
    340  7fc8				  -	      bestValue	= -99999
    341  7fc8				  -	      alpha	= -100000
    342  7fc8				  -	      beta	= 100000
    343  7fc8				  -	      for	move in board.legal_moves:
    344  7fc8				  -	      make_move(move)
    345  7fc8				  -	      boardValue	= -alphabeta(-beta, -alpha, depth-1)
    346  7fc8				  -	      if	boardValue > bestValue:
    347  7fc8				  -	      bestValue	= boardValue	;
    348  7fc8				  -	      bestMove	= move
    349  7fc8				  -	      if(	boardValue > alpha ):
    350  7fc8				  -	      alpha	= boardValue
    351  7fc8				  -	      unmake_move()
    352  7fc8				  -	      movehistory.append(bestMove)
    353  7fc8				  -	      return	bestMove
    354  7fc8				  -
    355  7fc8				  -
    356  7fc8				  -def	      evaluate_board():
    357  7fc8				  -
    358  7fc8				  -	      if	board.is_checkmate():
    359  7fc8				  -	      if	board.turn:
    360  7fc8				  -	      return	-9999
    361  7fc8				  -	      else:
    362  7fc8				  -	      return	9999
    363  7fc8				  -	      if	board.is_stalemate():
    364  7fc8				  -	      return	0
    365  7fc8				  -	      if	board.is_insufficient_material():
    366  7fc8				  -	      return	0
    367  7fc8				  -
    368  7fc8				  -	      eval	= boardvalue
    369  7fc8				  -	      if	board.turn:
    370  7fc8				  -	      return	eval
    371  7fc8				  -	      else:
    372  7fc8				  -	      return	-eval
    373  7fc8				  -
    374  7fc8				  -
    375  7fc8				  -
    376  7fc8				  -piecetypes =	[chess.PAWN, chess.KNIGHT, chess.BISHOP, chess.ROOK, chess.QUEEN, chess.KING ]
    377  7fc8				  -tables     =	[pawntable, knightstable, bishopstable, rookstable, queenstable, kingstable]
    378  7fc8				  -piecevalues =	[100,320,330,500,900]
    379  7fc8				  -
    380  7fc8				  -def	      update_eval(mov,	side):
    381  7fc8				  -	      global	boardvalue
    382  7fc8				  -
    383  7fc8				  -	      update	piecequares
    384  7fc8				  -	      movingpiece	= board.piece_type_at(mov.from_square)
    385  7fc8				  -	      if	side:
    386  7fc8				  -	      boardvalue	= boardvalue - tables[movingpiece - 1][mov.from_square]
    387  7fc8				  -	      update	castling
    388  7fc8				  -	      if	(mov.from_square == chess.E1) and (mov.to_square == chess.G1):
    389  7fc8				  -	      boardvalue	= boardvalue - rookstable[chess.H1]
    390  7fc8				  -	      boardvalue	= boardvalue + rookstable[chess.F1]
    391  7fc8				  -	      elif	(mov.from_square == chess.E1) and (mov.to_square == chess.C1):
    392  7fc8				  -	      boardvalue	= boardvalue - rookstable[chess.A1]
    393  7fc8				  -	      boardvalue	= boardvalue + rookstable[chess.D1]
    394  7fc8				  -	      else:
    395  7fc8				  -	      boardvalue	= boardvalue + tables[movingpiece - 1][mov.from_square]
    396  7fc8				  -	      update	castling
    397  7fc8				  -	      if	(mov.from_square == chess.E8) and (mov.to_square == chess.G8):
    398  7fc8				  -	      boardvalue	= boardvalue + rookstable[chess.H8]
    399  7fc8				  -	      boardvalue	= boardvalue - rookstable[chess.F8]
    400  7fc8				  -	      elif	(mov.from_square == chess.E8) and (mov.to_square == chess.C8):
    401  7fc8				  -	      boardvalue	= boardvalue + rookstable[chess.A8]
    402  7fc8				  -	      boardvalue	= boardvalue - rookstable[chess.D8]
    403  7fc8				  -
    404  7fc8				  -	      if	side:
    405  7fc8				  -	      boardvalue	= boardvalue + tables[movingpiece - 1][mov.to_square]
    406  7fc8				  -	      else:
    407  7fc8				  -	      boardvalue	= boardvalue - tables[movingpiece - 1][mov.to_square]
    408  7fc8				  -
    409  7fc8				  -
    410  7fc8				  -	      update	material
    411  7fc8				  -	      if	mov.drop != None:
    412  7fc8				  -	      if	side:
    413  7fc8				  -	      boardvalue	= boardvalue + piecevalues[mov.drop-1]
    414  7fc8				  -	      else:
    415  7fc8				  -	      boardvalue	= boardvalue - piecevalues[mov.drop-1]
    416  7fc8				  -
    417  7fc8				  -	      update	promotion
    418  7fc8				  -	      if	mov.promotion != None:
    419  7fc8				  -	      if	side:
    420  7fc8				  -	      boardvalue	= boardvalue + piecevalues[mov.promotion-1] - piecevalues[movingpiece-1]
    421  7fc8				  -	      boardvalue	= boardvalue - tables[movingpiece - 1][mov.to_square] \
    422  7fc8				  -	      +	tables[mov.promotion - 1][mov.to_square]
    423  7fc8				  -	      else:
    424  7fc8				  -	      boardvalue	= boardvalue - piecevalues[mov.promotion-1] + piecevalues[movingpiece-1]
    425  7fc8				  -	      boardvalue	= boardvalue + tables[movingpiece - 1][mov.to_square] \
    426  7fc8				  -	      -	tables[mov.promotion - 1][mov.to_square]
    427  7fc8				  -
    428  7fc8				  -
    429  7fc8				  -	      return	mov
    430  7fc8				  -
    431  7fc8				  -def	      make_move(mov):
    432  7fc8				  -	      update_eval(mov,	board.turn)
    433  7fc8				  -	      board.push(mov)
    434  7fc8				  -
    435  7fc8				  -	      return	mov
    436  7fc8				  -
    437  7fc8				  -def	      unmake_move():
    438  7fc8				  -	      mov	= board.pop()
    439  7fc8				  -	      update_eval(mov,	not board.turn)
    440  7fc8				  -
    441  7fc8				  -	      return	mov
    442  7fc8				  -
    443  7fc8				  -	      endif
    444  7fc8				  -
    445  7fc8				  -
    446  7fc8				  -	      CHECK_BANK_SIZE	"BANK_EVAL"
    447  7fc8				  -
    448  7fc8				  -
    449  7fc8				  -
    450  7fc8				  -			; EOF
------- FILE ./chess.asm
    458  7fc8
    459  7fc8							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  7fc8					      include	"BANK_FIXED.asm"
      1  7fc8							; Chess
      2  7fc8							; Copyright (c) 2019-2020 Andrew Davie
      3  7fc8							; andrew@taswegian.com
      4  7fc8
      5  7fc8
      6  7fc8							;---------------------------------------------------------------------------------------------------
      7  7fc8							;#########################################  FIXED BANK  ############################################
      8  7fc8							;---------------------------------------------------------------------------------------------------
      9  7fc8
     10  7fc8				   ORIGIN     SET	FIXED_BANK
     11  7fc8
      0  7fc8					      NEWBANK	THE_FIXED_BANK
      1  fe18 ????				      SEG	THE_FIXED_BANK
      2  f800					      ORG	ORIGIN
      3  f800					      RORG	$F000
      4  f800				   BANK_START SET	*
      5  f800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  f800				   ORIGIN     SET	ORIGIN + 2048
      7  f800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  f800					      RORG	$f800
     14  f800
     15  f800							;---------------------------------------------------------------------------------------------------
     16  f800
      0  f800					      DEF	Reset
      1  f800				   BANK_Reset SET	_CURRENT_BANK
      2  f800				   Reset
      3  f800				   TEMPORARY_VAR SET	Overlay
      4  f800				   TEMPORARY_OFFSET SET	0
      5  f800					      SUBROUTINE
     18  f800					      SUBROUTINE
     19  f800
     20  f800		       78		      sei
     21  f801		       d8		      cld
     22  f802		       a2 ff		      ldx	#$FF
     23  f804		       9a		      txs
     24  f805
     25  f805
     26  f805							; See if we can come up with something 'random' for startup
     27  f805
     28  f805		       ac 84 02 	      ldy	INTIM
     29  f808		       d0 02		      bne	.toR
     30  f80a		       a0 9a		      ldy	#$9A
     31  f80c		       84 81	   .toR       sty	rnd
     32  f80e
     33  f80e							;JSROM TitleScreen
     34  f80e
     35  f80e
     36  f80e							; Move a copy of the row bank template to the first 8 banks of RAM
     37  f80e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     38  f80e
      0  f80e					      JSROM_SAFE	SetupBanks
      1  f80e
      2  f80e
      3  f80e
      4  f80e		       a9 00		      lda	#BANK_SetupBanks
      5  f810		       85 8b		      sta	savedBank
      6  f812		       85 3f		      sta	SET_BANK
      7  f814		       20 13 f1 	      jsr	SetupBanks
     40  f817
     41  f817							; Patch the final row's "loop" to a RTS
     42  f817
     43  f817		       a2 07		      ldx	#7
     44  f819		       86 3e		      stx	SET_BANK_RAM
     45  f81b		       a9 60		      lda	#$60	; "rts"
     46  f81d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     47  f820
     48  f820
     49  f820		       a5 99		      lda	currentPly
     50  f822		       85 3e		      sta	SET_BANK_RAM
     51  f824		       20 60 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     52  f827
      0  f827					      JSROM	InitialisePieceSquares
      1  f827
      2  f827		       a9 1f		      lda	#BANK_InitialisePieceSquares
      3  f829		       85 3f		      sta	SET_BANK
      4  f82b		       20 2a fc 	      jsr	InitialisePieceSquares
     54  f82e
     55  f82e		       a9 00		      lda	#WHITE
     56  f830		       85 9b		      sta	sideToMove
     57  f832
     58  f832							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     59  f832
     60  f832							;---------------------------------------------------------------------------------------------------
     61  f832
     62  f832							;RESYNC
     63  f832				   .StartFrame
     64  f832
     65  f832
     66  f832							; START OF FRAME
     67  f832
     68  f832		       a9 0e		      lda	#%1110	; VSYNC ON
     69  f834		       85 42	   .loopVSync3 sta	WSYNC
     70  f836		       85 40		      sta	VSYNC
     71  f838		       4a		      lsr
     72  f839		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     73  f83b
     74  f83b		       a0 2f		      ldy	#TIME_PART_1
     75  f83d		       8c 96 02 	      sty	TIM64T
     76  f840
     77  f840							; LOTS OF PROCESSING TIME - USE IT
     78  f840
     79  f840		       a2 00		      ldx	#0
     80  f842		       86 41		      stx	VBLANK
     81  f844
     82  f844
     83  f844					      IF	ASSERTS
     84  f844							;		      lda #$C2
     85  f844							;		      sta COLUBK		     ; colour timing band top of screen
     86  f844					      ENDIF
     87  f844
     88  f844		       20 9a f8 	      jsr	AiStateMachine
     89  f847
     90  f847							;jsr SAFE_PhasedProcessor
     91  f847
     92  f847					      IF	ASSERTS
     93  f847							;		      lda #0
     94  f847							;		      sta COLUBK		     ; end of timing band
     95  f847					      ENDIF
     96  f847
     97  f847					      if	ASSERTS
     98  f847							; Catch timer expired already
     99  f847		       2c 85 02 	      bit	TIMINT
    100  f84a							;.whoops	      bmi .whoops
    101  f84a					      endif
    102  f84a
    103  f84a
    104  f84a		       2c 85 02    .wait      bit	TIMINT
    105  f84d		       10 fb		      bpl	.wait
    106  f84f
    107  f84f
    108  f84f
    109  f84f							; START OF VISIBLE SCANLINES
    110  f84f
    111  f84f		       85 42		      sta	WSYNC
    112  f851
    113  f851		       20 99 f8 	      jsr	_rts
    114  f854		       20 99 f8 	      jsr	_rts
    115  f857		       20 99 f8 	      jsr	_rts
    116  f85a		       20 99 f8 	      jsr	_rts
      0  f85d					      SLEEP	3
      1  f85d				   .CYCLES    SET	3
      2  f85d
      3  f85d				  -	      IF	.CYCLES < 2
      4  f85d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f85d				  -	      ERR
      6  f85d					      ENDIF
      7  f85d
      8  f85d					      IF	.CYCLES & 1
      9  f85d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f85d		       04 00		      nop	0
     11  f85f				  -	      ELSE
     12  f85f				  -	      bit	VSYNC
     13  f85f					      ENDIF
     14  f85f				   .CYCLES    SET	.CYCLES - 3
     15  f85f					      ENDIF
     16  f85f
     17  f85f				  -	      REPEAT	.CYCLES / 2
     18  f85f				  -	      nop
     19  f85f					      REPEND
    118  f85f
    119  f85f		       a2 00		      ldx	#0
    120  f861		       86 41		      stx	VBLANK
    121  f863
    122  f863		       86 3e		      stx	SET_BANK_RAM
    123  f865		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    124  f868
    125  f868
    126  f868
    127  f868
    128  f868		       a9 00		      lda	#0
    129  f86a		       85 4d		      sta	PF0
    130  f86c		       85 4e		      sta	PF1
    131  f86e		       85 4f		      sta	PF2
    132  f870		       85 5b		      sta	GRP0
    133  f872		       85 5c		      sta	GRP1
    134  f874
    135  f874		       a9 42		      lda	#%01000010	; bit6 is not required
    136  f876		       85 41		      sta	VBLANK	; end of screen - enter blanking
    137  f878
    138  f878
    139  f878							; END OF VISIBLE SCREEN
    140  f878							; HERE'S SOME TIME TO DO STUFF
    141  f878
    142  f878		       a9 2e		      lda	#TIME_PART_2
    143  f87a		       8d 96 02 	      sta	TIM64T
    144  f87d
    145  f87d							;jsr AiStateMachine
    146  f87d
      0  f87d					      JSROM	PositionSprites
      1  f87d
      2  f87d		       a9 09		      lda	#BANK_PositionSprites
      3  f87f		       85 3f		      sta	SET_BANK
      4  f881		       20 00 f4 	      jsr	PositionSprites
    148  f884
    149  f884
    150  f884
    151  f884							; "draw" sprite shapes into row banks
    152  f884
    153  f884		       a2 07		      ldx	#7
    154  f886		       86 3e	   zapem      stx	SET_BANK_RAM
    155  f888		       20 a6 f2 	      jsr	WriteBlank
    156  f88b		       ca		      dex
    157  f88c		       10 f8		      bpl	zapem
    158  f88e
    159  f88e		       20 cf f2 	      jsr	WriteCursor
    160  f891
    161  f891
    162  f891		       2c 85 02    Waitforit  bit	TIMINT
    163  f894		       10 fb		      bpl	Waitforit
    164  f896
    165  f896		       4c 32 f8 	      jmp	.StartFrame
    166  f899
    167  f899
    168  f899		       60	   _rts       rts
    169  f89a
    170  f89a
    171  f89a							;---------------------------------------------------------------------------------------------------
    172  f89a
      0  f89a					      DEF	AiStateMachine
      1  f89a				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  f89a				   AiStateMachine
      3  f89a				   TEMPORARY_VAR SET	Overlay
      4  f89a				   TEMPORARY_OFFSET SET	0
      5  f89a					      SUBROUTINE
    174  f89a					      SUBROUTINE
    175  f89a
      0  f89a					      JSROM	AiSetupVectors
      1  f89a
      2  f89a		       a9 09		      lda	#BANK_AiSetupVectors
      3  f89c		       85 3f		      sta	SET_BANK
      4  f89e		       20 8c f0 	      jsr	AiSetupVectors
    177  f8a1		       b0 05		      bcs	.exit
    178  f8a3		       85 3f		      sta	SET_BANK
    179  f8a5		       6c e9 00 	      jmp	(__ptr)	; TODO: OR branch back to squeeze cycles
    180  f8a8
    181  f8a8		       60	   .exit      rts
    182  f8a9
    183  f8a9
    184  f8a9							;---------------------------------------------------------------------------------------------------
    185  f8a9
      0  f8a9					      DEF	CallClear
      1  f8a9				   BANK_CallClear SET	_CURRENT_BANK
      2  f8a9				   CallClear
      3  f8a9				   TEMPORARY_VAR SET	Overlay
      4  f8a9				   TEMPORARY_OFFSET SET	0
      5  f8a9					      SUBROUTINE
    187  f8a9					      SUBROUTINE
    188  f8a9
    189  f8a9		       84 3e		      sty	SET_BANK_RAM
    190  f8ab		       20 90 f1 	      jsr	ClearRowBitmap
    191  f8ae		       60		      rts
    192  f8af
    193  f8af							;---------------------------------------------------------------------------------------------------
    194  f8af
    195  f8af
      0  f8af					      DEF	aiDrawEntireBoard
      1  f8af				   BANK_aiDrawEntireBoard SET	_CURRENT_BANK
      2  f8af				   aiDrawEntireBoard
      3  f8af				   TEMPORARY_VAR SET	Overlay
      4  f8af				   TEMPORARY_OFFSET SET	0
      5  f8af					      SUBROUTINE
    197  f8af					      SUBROUTINE
    198  f8af
    199  f8af
    200  f8af		       a9 08		      lda	#RAMBANK_MOVES_RAM
    201  f8b1		       85 3e		      sta	SET_BANK_RAM
    202  f8b3		       a4 80		      ldy	drawPieceNumberX12
    203  f8b5		       b9 0c f0 	      lda	ValidSquare,y
    204  f8b8		       30 1d		      bmi	.isablank2
    205  f8ba
    206  f8ba		       b9 70 f0 	      lda	Board,y
    207  f8bd		       f0 13		      beq	.isablank
    208  f8bf		       48		      pha
    209  f8c0		       a9 00		      lda	#BLANK
    210  f8c2		       99 70 f4 	      sta	Board+RAM_WRITE,y
    211  f8c5
    212  f8c5		       20 37 fd 	      jsr	CopySinglePiece
    213  f8c8
    214  f8c8		       a9 08		      lda	#RAMBANK_MOVES_RAM
    215  f8ca		       85 3e		      sta	SET_BANK_RAM
    216  f8cc
    217  f8cc		       a4 80		      ldy	drawPieceNumberX12
    218  f8ce		       68		      pla
    219  f8cf		       99 70 f4 	      sta	Board+RAM_WRITE,y
    220  f8d2
      0  f8d2				   .isablank  PHASE	AI_DrawPart2
      1  f8d2		       a9 10		      lda	#AI_DrawPart2
      2  f8d4		       85 8c		      sta	aiPhase
    222  f8d6		       60		      rts
    223  f8d7
      0  f8d7				   .isablank2 PHASE	AI_DrawPart3
      1  f8d7		       a9 11		      lda	#AI_DrawPart3
      2  f8d9		       85 8c		      sta	aiPhase
    225  f8db		       60		      rts
    226  f8dc
    227  f8dc							;---------------------------------------------------------------------------------------------------
    228  f8dc
      0  f8dc					      DEF	aiFlipBuffers
      1  f8dc				   BANK_aiFlipBuffers SET	_CURRENT_BANK
      2  f8dc				   aiFlipBuffers
      3  f8dc				   TEMPORARY_VAR SET	Overlay
      4  f8dc				   TEMPORARY_OFFSET SET	0
      5  f8dc					      SUBROUTINE
    230  f8dc					      SUBROUTINE
    231  f8dc
    232  f8dc							; Initialise for a new move
    233  f8dc
    234  f8dc		       a5 99		      lda	currentPly
    235  f8de		       85 3e		      sta	SET_BANK_RAM
    236  f8e0
    237  f8e0		       20 60 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    238  f8e3
      0  f8e3					      PHASE	AI_GenerateMoves
      1  f8e3		       a9 13		      lda	#AI_GenerateMoves
      2  f8e5		       85 8c		      sta	aiPhase
    240  f8e7		       60		      rts
    241  f8e8
    242  f8e8
    243  f8e8							;---------------------------------------------------------------------------------------------------
    244  f8e8
      0  f8e8					      DEF	InitialiseMoveGeneration
      1  f8e8				   BANK_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  f8e8				   InitialiseMoveGeneration
      3  f8e8				   TEMPORARY_VAR SET	Overlay
      4  f8e8				   TEMPORARY_OFFSET SET	0
      5  f8e8					      SUBROUTINE
    246  f8e8					      SUBROUTINE
    247  f8e8
    248  f8e8		       a5 99		      lda	currentPly
    249  f8ea		       85 3e		      sta	SET_BANK_RAM
    250  f8ec
    251  f8ec		       20 60 f2 	      jsr	NewPlyInitialise
    252  f8ef
    253  f8ef		       a5 8b		      lda	savedBank
    254  f8f1		       85 3f		      sta	SET_BANK
    255  f8f3		       60		      rts
    256  f8f4
    257  f8f4
    258  f8f4							;---------------------------------------------------------------------------------------------------
    259  f8f4
      0  f8f4					      DEF	GenerateOneMove
      1  f8f4				   BANK_GenerateOneMove SET	_CURRENT_BANK
      2  f8f4				   GenerateOneMove
      3  f8f4				   TEMPORARY_VAR SET	Overlay
      4  f8f4				   TEMPORARY_OFFSET SET	0
      5  f8f4					      SUBROUTINE
    261  f8f4					      SUBROUTINE
    262  f8f4
    263  f8f4		       a5 99		      lda	currentPly
    264  f8f6		       85 3e		      sta	SET_BANK_RAM
    265  f8f8		       20 86 f2 	      jsr	GenerateMovesForNextPiece
    266  f8fb
    267  f8fb		       a5 8b		      lda	savedBank
    268  f8fd		       85 3f		      sta	SET_BANK
    269  f8ff		       60		      rts
    270  f900
    271  f900
    272  f900							;---------------------------------------------------------------------------------------------------
    273  f900
    274  f900							;TODO...
      0  f900					      DEF	SAFE_LookForCheck
      1  f900				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  f900				   SAFE_LookForCheck
      3  f900				   TEMPORARY_VAR SET	Overlay
      4  f900				   TEMPORARY_OFFSET SET	0
      5  f900					      SUBROUTINE
    276  f900					      SUBROUTINE
    277  f900
    278  f900		       a5 99		      lda	currentPly
    279  f902		       85 3e		      sta	SET_BANK_RAM
    280  f904
    281  f904		       ac c9 f1 	      ldy	moveIndex
    282  f907		       30 0f		      bmi	.failed
    283  f909
    284  f909		       be 00 f1    .scan      ldx	MoveTo,y
    285  f90c		       bd 70 f0 	      lda	Board,x
    286  f90f		       29 0f		      and	#PIECE_MASK
    287  f911		       c9 07		      cmp	#KING
    288  f913		       f0 04		      beq	.inCheck	; --> CS too
    289  f915		       88		      dey
    290  f916		       10 f1		      bpl	.scan
    291  f918
    292  f918		       18	   .failed    clc
    293  f919
    294  f919		       a5 8b	   .inCheck   lda	savedBank	; CS or CC
    295  f91b		       85 3f		      sta	SET_BANK
    296  f91d		       60		      rts
    297  f91e
    298  f91e
    299  f91e							;---------------------------------------------------------------------------------------------------
    300  f91e
      0  f91e					      DEF	aiComputerMove
      1  f91e				   BANK_aiComputerMove SET	_CURRENT_BANK
      2  f91e				   aiComputerMove
      3  f91e				   TEMPORARY_VAR SET	Overlay
      4  f91e				   TEMPORARY_OFFSET SET	0
      5  f91e					      SUBROUTINE
    302  f91e					      SUBROUTINE
    303  f91e
    304  f91e							; Choose one of the moves
    305  f91e
    306  f91e		       a5 99		      lda	currentPly
    307  f920		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    308  f922
    309  f922		       a9 ff		      lda	#-1
    310  f924		       cd c9 f1 	      cmp	moveIndex
    311  f927		       f0 11		      beq	.halted	; no valid moves
    312  f929
    313  f929		       85 85		      sta	fromX12
    314  f92b		       85 87		      sta	originX12
    315  f92d		       85 86		      sta	toX12
    316  f92f
    317  f92f		       a5 9b		      lda	sideToMove
    318  f931		       10 03		      bpl	.notComputer
    319  f933
    320  f933		       20 16 f3 	      jsr	MoveViaListAtPly
    321  f936
      0  f936				   .notComputer PHASE	AI_PrepForPhysicalMove
      1  f936		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  f938		       85 8c		      sta	aiPhase
    323  f93a		       60	   .halted    rts
    324  f93b
    325  f93b
    326  f93b							;---------------------------------------------------------------------------------------------------
    327  f93b
      0  f93b					      DEF	debug
      1  f93b				   BANK_debug SET	_CURRENT_BANK
      2  f93b				   debug
      3  f93b				   TEMPORARY_VAR SET	Overlay
      4  f93b				   TEMPORARY_OFFSET SET	0
      5  f93b					      SUBROUTINE
    329  f93b					      SUBROUTINE
    330  f93b
    331  f93b							; Use this to trap breakpoints in "unknown" banks. Just "jsr catch" from wherever you want
    332  f93b							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    333  f93b							; you wanted to see, without knowing the bank.
    334  f93b
    335  f93b		       60		      rts
    336  f93c
    337  f93c
    338  f93c							;---------------------------------------------------------------------------------------------------
    339  f93c
      0  f93c					      DEF	aiSpecialMoveFixup
      1  f93c				   BANK_aiSpecialMoveFixup SET	_CURRENT_BANK
      2  f93c				   aiSpecialMoveFixup
      3  f93c				   TEMPORARY_VAR SET	Overlay
      4  f93c				   TEMPORARY_OFFSET SET	0
      5  f93c					      SUBROUTINE
    341  f93c					      SUBROUTINE
    342  f93c
      0  f93c					      PHASE	AI_FlipBuffers
      1  f93c		       a9 12		      lda	#AI_FlipBuffers
      2  f93e		       85 8c		      sta	aiPhase
    344  f940
      0  f940					      JSROM_SAFE	CastleFixup
      1  f940
      2  f940
      3  f940
      4  f940		       a9 00		      lda	#BANK_CastleFixup
      5  f942		       85 8b		      sta	savedBank
      6  f944		       85 3f		      sta	SET_BANK
      7  f946		       20 d2 f0 	      jsr	CastleFixup
    346  f949
    347  f949
    348  f949							; Handle en-passant captures
    349  f949							; The (dual-use) FLAG_ENPASSANT will have been cleared if it was set for a home-rank move
    350  f949							; but if we're here and the flag is still set, then it's an actual en-passant CAPTURE and we
    351  f949							; need to do the appropriate things...
    352  f949
    353  f949
    354  f949							; With en-passant flag, it is essentially dual-use.
    355  f949							; First, it marks if the move is *involved* somehow in an en-passant
    356  f949							; if the piece has MOVED already, then it's an en-passant capture
    357  f949							; if it has NOT moved, then it's a pawn leaving home rank, and sets the en-passant square
    358  f949
    359  f949		       a4 97		      ldy	enPassantPawn	; save
    360  f94b
    361  f94b		       a2 00		      ldx	#0
    362  f94d		       a5 9c		      lda	fromPiece
    363  f94f		       29 60		      and	#FLAG_ENPASSANT|FLAG_MOVED
    364  f951		       c9 20		      cmp	#FLAG_ENPASSANT
    365  f953		       d0 08		      bne	.noep	; HAS moved, or not en-passant
    366  f955
    367  f955		       a5 9c		      lda	fromPiece
    368  f957		       29 df		      and	#~FLAG_ENPASSANT	; clear flag as it's been handled
    369  f959		       85 9c		      sta	fromPiece
    370  f95b
    371  f95b		       a6 85		      ldx	fromX12	; this IS an en-passantable opening, so record the square
    372  f95d		       86 97	   .noep      stx	enPassantPawn	; capturable square for en-passant move
    373  f95f
    374  f95f
    375  f95f							; ^
    376  f95f
    377  f95f
    378  f95f							; Check to see if we are doing an actual en-passant capture...
    379  f95f
    380  f95f		       a5 9c		      lda	fromPiece
    381  f961		       29 20		      and	#FLAG_ENPASSANT
    382  f963		       f0 2a		      beq	.noEP
    383  f965
    384  f965
    385  f965					      if	1
    386  f965
    387  f965				   capture
    388  f965
    389  f965					      IF	ASSERTS
    390  f965		       c0 00		      cpy	#0
    391  f967		       f0 fe	   .eperror   beq	.eperror	; CANNOT have EP *AND* no capture square!!
    392  f969					      ENDIF
    393  f969
    394  f969		       a5 9b		      lda	sideToMove
    395  f96b		       49 80		      eor	#128
    396  f96d		       85 9b		      sta	sideToMove
    397  f96f
    398  f96f
    399  f96f
    400  f96f		       84 85		      sty	fromX12
    401  f971		       84 80		      sty	drawPieceNumberX12
    402  f973
    403  f973		       a9 08		      lda	#RAMBANK_MOVES_RAM
    404  f975		       85 3e		      sta	SET_BANK_RAM
    405  f977		       b9 70 f0 	      lda	Board,y
    406  f97a		       20 37 fd 	      jsr	CopySinglePiece	; ERASE pawn
    407  f97d
    408  f97d
    409  f97d		       a5 9b		      lda	sideToMove
    410  f97f		       0a		      asl
    411  f980		       a9 09		      lda	#RAMBANK_PLY
    412  f982		       69 00		      adc	#0
    413  f984		       85 3e		      sta	SET_BANK_RAM
    414  f986
    415  f986		       20 b1 f2 	      jsr	FixPieceList	; REMOVE any captured object
    416  f989
    417  f989		       a5 9b		      lda	sideToMove
    418  f98b		       49 80		      eor	#128
    419  f98d		       85 9b		      sta	sideToMove
    420  f98f
    421  f98f					      endif
    422  f98f
    423  f98f
    424  f98f
    425  f98f				   .noEP
    426  f98f
    427  f98f							; Mark the piece as MOVED
    428  f98f
    429  f98f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    430  f991		       85 3e		      sta	SET_BANK_RAM
    431  f993		       a4 85		      ldy	fromX12	; final square
    432  f995		       b9 70 f0 	      lda	Board,y
    433  f998		       29 df		      and	#~FLAG_ENPASSANT
    434  f99a		       09 40		      ora	#FLAG_MOVED
    435  f99c		       99 70 f4 	      sta	Board+RAM_WRITE,y
    436  f99f
    437  f99f
    438  f99f
    439  f99f
    440  f99f					      if	ASSERTS
      0  f99f					      JSROM_SAFE	DIAGNOSTIC_checkPieces
      1  f99f
      2  f99f
      3  f99f
      4  f99f		       a9 0e		      lda	#BANK_DIAGNOSTIC_checkPieces
      5  f9a1		       85 8b		      sta	savedBank
      6  f9a3		       85 3f		      sta	SET_BANK
      7  f9a5		       20 12 f2 	      jsr	DIAGNOSTIC_checkPieces
    442  f9a8					      endif
    443  f9a8
    444  f9a8
    445  f9a8		       a5 9b		      lda	sideToMove
    446  f9aa		       49 80		      eor	#128
    447  f9ac		       85 9b		      sta	sideToMove
    448  f9ae
    449  f9ae		       60		      rts
    450  f9af
    451  f9af
    452  f9af							;---------------------------------------------------------------------------------------------------
    453  f9af
      0  f9af					      DEF	MoveForSinglePiece
      1  f9af				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  f9af				   MoveForSinglePiece
      3  f9af				   TEMPORARY_VAR SET	Overlay
      4  f9af				   TEMPORARY_OFFSET SET	0
      5  f9af					      SUBROUTINE
    455  f9af					      SUBROUTINE
    456  f9af
      0  f9af					      VAR	__vector, 2
      1  f9af				   __vector   SET	TEMPORARY_VAR
      2  f9af				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  f9af
      4  f9af				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  f9af				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  f9af				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  f9af					      ENDIF
      8  f9af				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  f9af				  -	      ECHO	"Temporary Variable", __vector, "overflow!"
     10  f9af				  -	      ERR
     11  f9af					      ENDIF
     12  f9af					      LIST	ON
    458  f9af
    459  f9af		       a9 08		      lda	#RAMBANK_MOVES_RAM
    460  f9b1		       85 3e		      sta	SET_BANK_RAM
    461  f9b3
    462  f9b3		       a6 95		      ldx	currentSquare	; used in move handlers
    463  f9b5		       bd 70 f0 	      lda	Board,x
    464  f9b8		       85 94		      sta	currentPiece
    465  f9ba
    466  f9ba					      IF	ASSERTS
    467  f9ba					      SUBROUTINE
    468  f9ba							; DEBUG: Make sure we're looking at correct colour
    469  f9ba		       45 9b		      eor	sideToMove
    470  f9bc		       30 fe	   .lock      bmi	.lock
    471  f9be		       a5 94		      lda	currentPiece
    472  f9c0					      ENDIF
    473  f9c0
    474  f9c0		       29 0f		      and	#PIECE_MASK
    475  f9c2		       a8		      tay
    476  f9c3
    477  f9c3					      IF	ASSERTS
    478  f9c3							; DEBUG: Make sure we have an actual piece, not an empty square
    479  f9c3					      SUBROUTINE
    480  f9c3		       f0 fe	   .lock      beq	.lock	; catch errors
    481  f9c5					      ENDIF
    482  f9c5
    483  f9c5		       b9 d7 f9 	      lda	HandlerVectorLO-1,y
    484  f9c8		       85 a1		      sta	__vector
    485  f9ca		       b9 de f9 	      lda	HandlerVectorHI-1,y
    486  f9cd		       85 a2		      sta	__vector+1
    487  f9cf		       6c a1 00 	      jmp	(__vector)
    488  f9d2
    489  f9d2		       a5 99	   MoveReturn lda	currentPly
    490  f9d4		       85 3e		      sta	SET_BANK_RAM
    491  f9d6
    492  f9d6		       60		      rts
    493  f9d7
    494  f9d7					      MAC	handlevec
    495  f9d7					      .byte	{1}Handle_WHITE_PAWN	; 1
    496  f9d7					      .byte	{1}Handle_BLACK_PAWN	; 2
    497  f9d7					      .byte	{1}Handle_KNIGHT	; 3
    498  f9d7					      .byte	{1}Handle_BISHOP	; 4
    499  f9d7					      .byte	{1}Handle_ROOK	; 5
    500  f9d7					      .byte	{1}Handle_QUEEN	; 6
    501  f9d7					      .byte	{1}Handle_KING	; 7
    502  f9d7					      ENDM
    503  f9d7
    504  f9d7
      0  f9d7					      ALLOCATE	Handlers, 15
      0  f9d7					      OPTIONAL_PAGEBREAK	"Table", 15
     10  f9d7					      LIST	ON
      0  f9d7					      DEF	Handlers
      1  f9d7				   BANK_Handlers SET	_CURRENT_BANK
      2  f9d7				   Handlers
      3  f9d7				   TEMPORARY_VAR SET	Overlay
      4  f9d7				   TEMPORARY_OFFSET SET	0
      5  f9d7					      SUBROUTINE
    506  f9d7
    507  f9d7		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    508  f9d8
      0  f9d8				   HandlerVectorLO HANDLEVEC	<
      1  f9d8		       11		      .byte.b	<Handle_WHITE_PAWN
      2  f9d9		       d7		      .byte.b	<Handle_BLACK_PAWN
      3  f9da		       72		      .byte.b	<Handle_KNIGHT
      4  f9db		       97		      .byte.b	<Handle_BISHOP
      5  f9dc		       fa		      .byte.b	<Handle_ROOK
      6  f9dd		       d4		      .byte.b	<Handle_QUEEN
      7  f9de		       5d		      .byte.b	<Handle_KING
      0  f9df				   HandlerVectorHI HANDLEVEC	>
      1  f9df		       fa		      .byte.b	>Handle_WHITE_PAWN
      2  f9e0		       fa		      .byte.b	>Handle_BLACK_PAWN
      3  f9e1		       fb		      .byte.b	>Handle_KNIGHT
      4  f9e2		       f1		      .byte.b	>Handle_BISHOP
      5  f9e3		       f1		      .byte.b	>Handle_ROOK
      6  f9e4		       f0		      .byte.b	>Handle_QUEEN
      7  f9e5		       f2		      .byte.b	>Handle_KING
    511  f9e6
    512  f9e6							;---------------------------------------------------------------------------------------------------
    513  f9e6
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  f9e6					      include	"Handler_PAWN.asm"
      1  f9e6							; Copyright (C)2020 Andrew Davie
      2  f9e6							; Pawn move handlers
      3  f9e6
      4  f9e6							;---------------------------------------------------------------------------------------------------
      5  f9e6							; WHITE PAWN
      6  f9e6							;---------------------------------------------------------------------------------------------------
      7  f9e6
      8  f9e6		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  f9e6		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  f9e6
     11  f9e6							;---------------------------------------------------------------------------------------------------
     12  f9e6
     13  f9e6					      MAC	en_passant
     14  f9e6					      SUBROUTINE
     15  f9e6							; {1} = _LEFT or _RIGHT
     16  f9e6
     17  f9e6					      ldx	currentSquare
     18  f9e6					      ldy	ValidSquare+{1},x
     19  f9e6					      cpy	enPassantPawn
     20  f9e6					      bne	.invalid
     21  f9e6					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     22  f9e6					      lda	Board,y
     23  f9e6					      bne	.invalid
     24  f9e6					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     25  f9e6				   .invalid
     26  f9e6					      ENDM
     27  f9e6
     28  f9e6							;---------------------------------------------------------------------------------------------------
     29  f9e6
     30  f9e6					      MAC	promote_pawn
     31  f9e6					      SUBROUTINE
     32  f9e6
     33  f9e6							;{1} = BLACK or WHITE
     34  f9e6
     35  f9e6					      VAR	__temp, 1
     36  f9e6
     37  f9e6					      lda	currentPiece
     38  f9e6					      pha
     39  f9e6
     40  f9e6					      sty	__temp
     41  f9e6					      lda	#{1}|QUEEN
     42  f9e6					      sta	currentPiece
     43  f9e6					      jsr	AddMove
     44  f9e6
     45  f9e6					      lda	#{1}|ROOK
     46  f9e6					      sta	currentPiece
     47  f9e6					      ldy	__temp
     48  f9e6					      jsr	AddMove
     49  f9e6
     50  f9e6					      lda	#{1}|BISHOP
     51  f9e6					      sta	currentPiece
     52  f9e6					      ldy	__temp
     53  f9e6					      jsr	AddMove
     54  f9e6
     55  f9e6					      lda	#{1}|KNIGHT
     56  f9e6					      sta	currentPiece
     57  f9e6					      ldy	__temp
     58  f9e6					      jsr	AddMove
     59  f9e6
     60  f9e6					      pla
     61  f9e6					      sta	currentPiece
     62  f9e6					      ENDM
     63  f9e6
     64  f9e6							;---------------------------------------------------------------------------------------------------
     65  f9e6
     66  f9e6					      MAC	move_or_promote_pawn
     67  f9e6					      SUBROUTINE
     68  f9e6							; {1} = BLACK or WHITE
     69  f9e6
     70  f9e6					      IF	{1} = WHITE
     71  f9e6					      cpy	#90	; last rank?
     72  f9e6					      bcc	.standard
     73  f9e6					      jsr	PromoteWhitePawn
     74  f9e6					      jmp	.pMoved
     75  f9e6					      ENDIF
     76  f9e6
     77  f9e6					      IF	{1} = BLACK
     78  f9e6					      cpy	#30	; last rank?
     79  f9e6					      bcs	.standard
     80  f9e6					      jsr	PromoteBlackPawn
     81  f9e6					      jmp	.pMoved
     82  f9e6					      ENDIF
     83  f9e6
     84  f9e6				   .standard  jsr	AddMove	; add +1UP move
     85  f9e6				   .pMoved
     86  f9e6
     87  f9e6					      ENDM
     88  f9e6
     89  f9e6							;---------------------------------------------------------------------------------------------------
     90  f9e6
     91  f9e6					      MAC	take
     92  f9e6					      SUBROUTINE
     93  f9e6							; {1} = capture square offset
     94  f9e6
     95  f9e6					      ldx	currentSquare
     96  f9e6					      ldy	ValidSquare+{1},x
     97  f9e6					      bmi	.invalid
     98  f9e6					      lda	Board,y
     99  f9e6					      beq	.invalid	; square empty
    100  f9e6					      eor	currentPiece
    101  f9e6					      bpl	.invalid	; same colour
    102  f9e6
    103  f9e6					      MOVE_OR_PROMOTE_PAWN	{2}
    104  f9e6				   .invalid
    105  f9e6					      ENDM
    106  f9e6
    107  f9e6							;---------------------------------------------------------------------------------------------------
    108  f9e6
      0  f9e6					      DEF	PromoteWhitePawn
      1  f9e6				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  f9e6				   PromoteWhitePawn
      3  f9e6				   TEMPORARY_VAR SET	Overlay
      4  f9e6				   TEMPORARY_OFFSET SET	0
      5  f9e6					      SUBROUTINE
    110  f9e6
      0  f9e6					      PROMOTE_PAWN	WHITE
      1  f9e6					      SUBROUTINE
      2  f9e6
      3  f9e6
      4  f9e6
      0  f9e6					      VAR	__temp, 1
      1  f9e6				   __temp     SET	TEMPORARY_VAR
      2  f9e6				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  f9e6
      4  f9e6				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  f9e6				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  f9e6				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  f9e6					      ENDIF
      8  f9e6				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  f9e6				  -	      ECHO	"Temporary Variable", __temp, "overflow!"
     10  f9e6				  -	      ERR
     11  f9e6					      ENDIF
     12  f9e6					      LIST	ON
      6  f9e6
      7  f9e6		       a5 94		      lda	currentPiece
      8  f9e8		       48		      pha
      9  f9e9
     10  f9e9		       84 a1		      sty	__temp
     11  f9eb		       a9 06		      lda	#WHITE|QUEEN
     12  f9ed		       85 94		      sta	currentPiece
     13  f9ef		       20 0b fc 	      jsr	AddMove
     14  f9f2
     15  f9f2		       a9 05		      lda	#WHITE|ROOK
     16  f9f4		       85 94		      sta	currentPiece
     17  f9f6		       a4 a1		      ldy	__temp
     18  f9f8		       20 0b fc 	      jsr	AddMove
     19  f9fb
     20  f9fb		       a9 04		      lda	#WHITE|BISHOP
     21  f9fd		       85 94		      sta	currentPiece
     22  f9ff		       a4 a1		      ldy	__temp
     23  fa01		       20 0b fc 	      jsr	AddMove
     24  fa04
     25  fa04		       a9 03		      lda	#WHITE|KNIGHT
     26  fa06		       85 94		      sta	currentPiece
     27  fa08		       a4 a1		      ldy	__temp
     28  fa0a		       20 0b fc 	      jsr	AddMove
     29  fa0d
     30  fa0d		       68		      pla
     31  fa0e		       85 94		      sta	currentPiece
    112  fa10		       60		      rts
    113  fa11
    114  fa11							;---------------------------------------------------------------------------------------------------
    115  fa11
      0  fa11					      DEF	Handle_WHITE_PAWN
      1  fa11				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  fa11				   Handle_WHITE_PAWN
      3  fa11				   TEMPORARY_VAR SET	Overlay
      4  fa11				   TEMPORARY_OFFSET SET	0
      5  fa11					      SUBROUTINE
    117  fa11
    118  fa11		       bc 16 f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    119  fa14		       b9 70 f0 	      lda	Board,y
    120  fa17		       d0 24		      bne	.pMoved	; occupied
    121  fa19
    122  fa19							; we may need to promote the pawn
    123  fa19							; All possibilites (Q/R/B/N) are added as individual moves
    124  fa19
      0  fa19					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  fa19					      SUBROUTINE
      2  fa19
      3  fa19
      4  fa19					      IF	WHITE = WHITE
      5  fa19		       c0 5a		      cpy	#90
      6  fa1b		       90 06		      bcc	.standard
      7  fa1d		       20 e6 f9 	      jsr	PromoteWhitePawn
      8  fa20		       4c 26 fa 	      jmp	.pMoved
      9  fa23					      ENDIF
     10  fa23
     11  fa23				  -	      IF	WHITE = BLACK
     12  fa23				  -	      cpy	#30
     13  fa23				  -	      bcs	.standard
     14  fa23				  -	      jsr	PromoteBlackPawn
     15  fa23				  -	      jmp	.pMoved
     16  fa23					      ENDIF
     17  fa23
     18  fa23		       20 0b fc    .standard  jsr	AddMove
     19  fa26				   .pMoved
     20  fa26
    126  fa26
    127  fa26							; the +2 move off the home rank...
    128  fa26
    129  fa26		       a6 95		      ldx	currentSquare
    130  fa28		       e0 28		      cpx	#WHITE_HOME_ROW
    131  fa2a		       b0 11		      bcs	.pMoved	; pawn has moved so can't do +2
    132  fa2c		       bc 20 f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    133  fa2f		       b9 70 f0 	      lda	Board,y
    134  fa32		       d0 09		      bne	.pMoved	; destination square occupied
    135  fa34
    136  fa34		       a5 94		      lda	currentPiece
    137  fa36		       09 20		      ora	#FLAG_ENPASSANT
    138  fa38		       85 94		      sta	currentPiece	; GENERATE en-passant opportunity
    139  fa3a
    140  fa3a		       20 0b fc 	      jsr	AddMove	; add the +2UP move off home row
    141  fa3d
    142  fa3d				   .pMoved
    143  fa3d
    144  fa3d							; regular captures...
    145  fa3d
      0  fa3d					      TAKE	_UP+_LEFT, WHITE
      1  fa3d					      SUBROUTINE
      2  fa3d
      3  fa3d
      4  fa3d		       a6 95		      ldx	currentSquare
      5  fa3f		       bc 15 f0 	      ldy	ValidSquare+_UP+_LEFT,x
      6  fa42		       30 16		      bmi	.invalid
      7  fa44		       b9 70 f0 	      lda	Board,y
      8  fa47		       f0 11		      beq	.invalid
      9  fa49		       45 94		      eor	currentPiece
     10  fa4b		       10 0d		      bpl	.invalid
     11  fa4d
      0  fa4d					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  fa4d					      SUBROUTINE
      2  fa4d
      3  fa4d
      4  fa4d					      IF	WHITE = WHITE
      5  fa4d		       c0 5a		      cpy	#90
      6  fa4f		       90 06		      bcc	.standard
      7  fa51		       20 e6 f9 	      jsr	PromoteWhitePawn
      8  fa54		       4c 5a fa 	      jmp	.pMoved
      9  fa57					      ENDIF
     10  fa57
     11  fa57				  -	      IF	WHITE = BLACK
     12  fa57				  -	      cpy	#30
     13  fa57				  -	      bcs	.standard
     14  fa57				  -	      jsr	PromoteBlackPawn
     15  fa57				  -	      jmp	.pMoved
     16  fa57					      ENDIF
     17  fa57
     18  fa57		       20 0b fc    .standard  jsr	AddMove
     19  fa5a				   .pMoved
     20  fa5a
     13  fa5a				   .invalid
      0  fa5a					      TAKE	_UP+_RIGHT, WHITE
      1  fa5a					      SUBROUTINE
      2  fa5a
      3  fa5a
      4  fa5a		       a6 95		      ldx	currentSquare
      5  fa5c		       bc 17 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      6  fa5f		       30 16		      bmi	.invalid
      7  fa61		       b9 70 f0 	      lda	Board,y
      8  fa64		       f0 11		      beq	.invalid
      9  fa66		       45 94		      eor	currentPiece
     10  fa68		       10 0d		      bpl	.invalid
     11  fa6a
      0  fa6a					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  fa6a					      SUBROUTINE
      2  fa6a
      3  fa6a
      4  fa6a					      IF	WHITE = WHITE
      5  fa6a		       c0 5a		      cpy	#90
      6  fa6c		       90 06		      bcc	.standard
      7  fa6e		       20 e6 f9 	      jsr	PromoteWhitePawn
      8  fa71		       4c 77 fa 	      jmp	.pMoved
      9  fa74					      ENDIF
     10  fa74
     11  fa74				  -	      IF	WHITE = BLACK
     12  fa74				  -	      cpy	#30
     13  fa74				  -	      bcs	.standard
     14  fa74				  -	      jsr	PromoteBlackPawn
     15  fa74				  -	      jmp	.pMoved
     16  fa74					      ENDIF
     17  fa74
     18  fa74		       20 0b fc    .standard  jsr	AddMove
     19  fa77				   .pMoved
     20  fa77
     13  fa77				   .invalid
    148  fa77
    149  fa77
    150  fa77							; en-passant captures...
    151  fa77
    152  fa77		       a5 97		      lda	enPassantPawn
    153  fa79		       f0 2e		      beq	.noEnPassant	; previous move (opponent) enpassant square?
    154  fa7b
    155  fa7b		       a5 94		      lda	currentPiece
    156  fa7d		       09 20		      ora	#FLAG_ENPASSANT
    157  fa7f		       85 94		      sta	currentPiece	; CONSUME en-passant opportunity
    158  fa81
      0  fa81					      EN_PASSANT	_LEFT, _UP
      1  fa81					      SUBROUTINE
      2  fa81
      3  fa81
      4  fa81		       a6 95		      ldx	currentSquare
      5  fa83		       bc 0b f0 	      ldy	ValidSquare+_LEFT,x
      6  fa86		       c4 97		      cpy	enPassantPawn
      7  fa88		       d0 0b		      bne	.invalid
      8  fa8a		       bc 15 f0 	      ldy	ValidSquare+_LEFT+_UP,x
      9  fa8d		       b9 70 f0 	      lda	Board,y
     10  fa90		       d0 03		      bne	.invalid
     11  fa92		       20 0b fc 	      jsr	AddMove
     12  fa95				   .invalid
      0  fa95					      EN_PASSANT	_RIGHT, _UP
      1  fa95					      SUBROUTINE
      2  fa95
      3  fa95
      4  fa95		       a6 95		      ldx	currentSquare
      5  fa97		       bc 0d f0 	      ldy	ValidSquare+_RIGHT,x
      6  fa9a		       c4 97		      cpy	enPassantPawn
      7  fa9c		       d0 0b		      bne	.invalid
      8  fa9e		       bc 17 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      9  faa1		       b9 70 f0 	      lda	Board,y
     10  faa4		       d0 03		      bne	.invalid
     11  faa6		       20 0b fc 	      jsr	AddMove
     12  faa9				   .invalid
    161  faa9
    162  faa9		       4c d2 f9    .noEnPassant jmp	MoveReturn
    163  faac
    164  faac
    165  faac							;---------------------------------------------------------------------------------------------------
    166  faac							; BLACK PAWN
    167  faac							;---------------------------------------------------------------------------------------------------
    168  faac
      0  faac					      DEF	PromoteBlackPawn
      1  faac				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  faac				   PromoteBlackPawn
      3  faac				   TEMPORARY_VAR SET	Overlay
      4  faac				   TEMPORARY_OFFSET SET	0
      5  faac					      SUBROUTINE
      0  faac					      PROMOTE_PAWN	BLACK
      1  faac					      SUBROUTINE
      2  faac
      3  faac
      4  faac
      0  faac					      VAR	__temp, 1
      1  faac				   __temp     SET	TEMPORARY_VAR
      2  faac				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  faac
      4  faac				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  faac				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  faac				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  faac					      ENDIF
      8  faac				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  faac				  -	      ECHO	"Temporary Variable", __temp, "overflow!"
     10  faac				  -	      ERR
     11  faac					      ENDIF
     12  faac					      LIST	ON
      6  faac
      7  faac		       a5 94		      lda	currentPiece
      8  faae		       48		      pha
      9  faaf
     10  faaf		       84 a1		      sty	__temp
     11  fab1		       a9 86		      lda	#BLACK|QUEEN
     12  fab3		       85 94		      sta	currentPiece
     13  fab5		       20 0b fc 	      jsr	AddMove
     14  fab8
     15  fab8		       a9 85		      lda	#BLACK|ROOK
     16  faba		       85 94		      sta	currentPiece
     17  fabc		       a4 a1		      ldy	__temp
     18  fabe		       20 0b fc 	      jsr	AddMove
     19  fac1
     20  fac1		       a9 84		      lda	#BLACK|BISHOP
     21  fac3		       85 94		      sta	currentPiece
     22  fac5		       a4 a1		      ldy	__temp
     23  fac7		       20 0b fc 	      jsr	AddMove
     24  faca
     25  faca		       a9 83		      lda	#BLACK|KNIGHT
     26  facc		       85 94		      sta	currentPiece
     27  face		       a4 a1		      ldy	__temp
     28  fad0		       20 0b fc 	      jsr	AddMove
     29  fad3
     30  fad3		       68		      pla
     31  fad4		       85 94		      sta	currentPiece
    171  fad6		       60		      rts
    172  fad7
      0  fad7					      DEF	Handle_BLACK_PAWN
      1  fad7				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  fad7				   Handle_BLACK_PAWN
      3  fad7				   TEMPORARY_VAR SET	Overlay
      4  fad7				   TEMPORARY_OFFSET SET	0
      5  fad7					      SUBROUTINE
    174  fad7					      SUBROUTINE
    175  fad7
    176  fad7		       bc 02 f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    177  fada		       b9 70 f0 	      lda	Board,y
    178  fadd		       d0 24		      bne	.pMoved	; occupied
    179  fadf
    180  fadf
    181  fadf							; we may need to promote the pawn
    182  fadf							; All possibilites (Q/R/B/N) are added as individual moves
    183  fadf
      0  fadf					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  fadf					      SUBROUTINE
      2  fadf
      3  fadf
      4  fadf				  -	      IF	BLACK = WHITE
      5  fadf				  -	      cpy	#90
      6  fadf				  -	      bcc	.standard
      7  fadf				  -	      jsr	PromoteWhitePawn
      8  fadf				  -	      jmp	.pMoved
      9  fadf					      ENDIF
     10  fadf
     11  fadf					      IF	BLACK = BLACK
     12  fadf		       c0 1e		      cpy	#30
     13  fae1		       b0 06		      bcs	.standard
     14  fae3		       20 ac fa 	      jsr	PromoteBlackPawn
     15  fae6		       4c ec fa 	      jmp	.pMoved
     16  fae9					      ENDIF
     17  fae9
     18  fae9		       20 0b fc    .standard  jsr	AddMove
     19  faec				   .pMoved
     20  faec
    185  faec
    186  faec							; the +2 move off the home rank...
    187  faec
    188  faec		       a6 95		      ldx	currentSquare
    189  faee		       e0 52		      cpx	#BLACK_HOME_ROW
    190  faf0		       90 11		      bcc	.pMoved	; pawn has moved so can't do +2
    191  faf2
    192  faf2
    193  faf2		       bc f8 ef 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    194  faf5		       b9 70 f0 	      lda	Board,y
    195  faf8		       d0 09		      bne	.pMoved	; destination square occupied
    196  fafa
    197  fafa		       a5 94		      lda	currentPiece
    198  fafc		       09 20		      ora	#FLAG_ENPASSANT
    199  fafe		       85 94		      sta	currentPiece	; CAN en-passant
    200  fb00
    201  fb00		       20 0b fc 	      jsr	AddMove	; add the +2DOWN move off home row
    202  fb03
    203  fb03				   .pMoved
    204  fb03
    205  fb03							; regular captures... (with promotion)
    206  fb03
      0  fb03					      TAKE	_DOWN+_LEFT, BLACK
      1  fb03					      SUBROUTINE
      2  fb03
      3  fb03
      4  fb03		       a6 95		      ldx	currentSquare
      5  fb05		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      6  fb08		       30 16		      bmi	.invalid
      7  fb0a		       b9 70 f0 	      lda	Board,y
      8  fb0d		       f0 11		      beq	.invalid
      9  fb0f		       45 94		      eor	currentPiece
     10  fb11		       10 0d		      bpl	.invalid
     11  fb13
      0  fb13					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  fb13					      SUBROUTINE
      2  fb13
      3  fb13
      4  fb13				  -	      IF	BLACK = WHITE
      5  fb13				  -	      cpy	#90
      6  fb13				  -	      bcc	.standard
      7  fb13				  -	      jsr	PromoteWhitePawn
      8  fb13				  -	      jmp	.pMoved
      9  fb13					      ENDIF
     10  fb13
     11  fb13					      IF	BLACK = BLACK
     12  fb13		       c0 1e		      cpy	#30
     13  fb15		       b0 06		      bcs	.standard
     14  fb17		       20 ac fa 	      jsr	PromoteBlackPawn
     15  fb1a		       4c 20 fb 	      jmp	.pMoved
     16  fb1d					      ENDIF
     17  fb1d
     18  fb1d		       20 0b fc    .standard  jsr	AddMove
     19  fb20				   .pMoved
     20  fb20
     13  fb20				   .invalid
      0  fb20					      TAKE	_DOWN+_RIGHT, BLACK
      1  fb20					      SUBROUTINE
      2  fb20
      3  fb20
      4  fb20		       a6 95		      ldx	currentSquare
      5  fb22		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      6  fb25		       30 16		      bmi	.invalid
      7  fb27		       b9 70 f0 	      lda	Board,y
      8  fb2a		       f0 11		      beq	.invalid
      9  fb2c		       45 94		      eor	currentPiece
     10  fb2e		       10 0d		      bpl	.invalid
     11  fb30
      0  fb30					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  fb30					      SUBROUTINE
      2  fb30
      3  fb30
      4  fb30				  -	      IF	BLACK = WHITE
      5  fb30				  -	      cpy	#90
      6  fb30				  -	      bcc	.standard
      7  fb30				  -	      jsr	PromoteWhitePawn
      8  fb30				  -	      jmp	.pMoved
      9  fb30					      ENDIF
     10  fb30
     11  fb30					      IF	BLACK = BLACK
     12  fb30		       c0 1e		      cpy	#30
     13  fb32		       b0 06		      bcs	.standard
     14  fb34		       20 ac fa 	      jsr	PromoteBlackPawn
     15  fb37		       4c 3d fb 	      jmp	.pMoved
     16  fb3a					      ENDIF
     17  fb3a
     18  fb3a		       20 0b fc    .standard  jsr	AddMove
     19  fb3d				   .pMoved
     20  fb3d
     13  fb3d				   .invalid
    209  fb3d
    210  fb3d							; en-passant captures...
    211  fb3d
    212  fb3d		       a5 97		      lda	enPassantPawn
    213  fb3f		       f0 2e		      beq	.noEnPassant	; was last move en-passantable?
    214  fb41
    215  fb41		       a5 94		      lda	currentPiece
    216  fb43		       09 20		      ora	#FLAG_ENPASSANT
    217  fb45		       85 94		      sta	currentPiece	; any en-passant move added will have flag set
    218  fb47
      0  fb47					      EN_PASSANT	_LEFT, _DOWN
      1  fb47					      SUBROUTINE
      2  fb47
      3  fb47
      4  fb47		       a6 95		      ldx	currentSquare
      5  fb49		       bc 0b f0 	      ldy	ValidSquare+_LEFT,x
      6  fb4c		       c4 97		      cpy	enPassantPawn
      7  fb4e		       d0 0b		      bne	.invalid
      8  fb50		       bc 01 f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      9  fb53		       b9 70 f0 	      lda	Board,y
     10  fb56		       d0 03		      bne	.invalid
     11  fb58		       20 0b fc 	      jsr	AddMove
     12  fb5b				   .invalid
      0  fb5b					      EN_PASSANT	_RIGHT, _DOWN
      1  fb5b					      SUBROUTINE
      2  fb5b
      3  fb5b
      4  fb5b		       a6 95		      ldx	currentSquare
      5  fb5d		       bc 0d f0 	      ldy	ValidSquare+_RIGHT,x
      6  fb60		       c4 97		      cpy	enPassantPawn
      7  fb62		       d0 0b		      bne	.invalid
      8  fb64		       bc 03 f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      9  fb67		       b9 70 f0 	      lda	Board,y
     10  fb6a		       d0 03		      bne	.invalid
     11  fb6c		       20 0b fc 	      jsr	AddMove
     12  fb6f				   .invalid
    221  fb6f
    222  fb6f				   .noEnPassant
    223  fb6f		       4c d2 f9 	      jmp	MoveReturn
    224  fb72
    225  fb72							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  fb72					      include	"Handler_KNIGHT.asm"
      1  fb72							; Copyright (C)2020 Andrew Davie
      2  fb72							; Knight move handler
      3  fb72
      4  fb72							;---------------------------------------------------------------------------------------------------
      5  fb72							; KNIGHT
      6  fb72							;---------------------------------------------------------------------------------------------------
      7  fb72
      0  fb72					      DEF	Handle_KNIGHT
      1  fb72				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  fb72				   Handle_KNIGHT
      3  fb72				   TEMPORARY_VAR SET	Overlay
      4  fb72				   TEMPORARY_OFFSET SET	0
      5  fb72					      SUBROUTINE
      9  fb72					      SUBROUTINE
     10  fb72
     11  fb72							; x = currentSquare (square the piece is on)
     12  fb72							; currentPiece (with flags/colour attached)
     13  fb72
      0  fb72					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  fb72					      SUBROUTINE
      2  fb72		       bc f7 ef 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  fb75		       30 0c		      bmi	.invalid
      4  fb77		       b9 70 f0 	      lda	Board,y
      5  fb7a		       f0 04		      beq	.squareEmpty
      6  fb7c		       45 94		      eor	currentPiece
      7  fb7e		       10 03		      bpl	.invalid
      8  fb80		       20 0b fc    .squareEmpty jsr	AddMove
      9  fb83				   .invalid
      0  fb83					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  fb83		       a6 95		      ldx	currentSquare
      0  fb85					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  fb85					      SUBROUTINE
      2  fb85		       bc f9 ef 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  fb88		       30 0c		      bmi	.invalid
      4  fb8a		       b9 70 f0 	      lda	Board,y
      5  fb8d		       f0 04		      beq	.squareEmpty
      6  fb8f		       45 94		      eor	currentPiece
      7  fb91		       10 03		      bpl	.invalid
      8  fb93		       20 0b fc    .squareEmpty jsr	AddMove
      9  fb96				   .invalid
      0  fb96					      MOVE_TO_X	_UP+_UP+_LEFT
      1  fb96		       a6 95		      ldx	currentSquare
      0  fb98					      MOVE_TO	_UP+_UP+_LEFT
      1  fb98					      SUBROUTINE
      2  fb98		       bc 1f f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  fb9b		       30 0c		      bmi	.invalid
      4  fb9d		       b9 70 f0 	      lda	Board,y
      5  fba0		       f0 04		      beq	.squareEmpty
      6  fba2		       45 94		      eor	currentPiece
      7  fba4		       10 03		      bpl	.invalid
      8  fba6		       20 0b fc    .squareEmpty jsr	AddMove
      9  fba9				   .invalid
      0  fba9					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  fba9		       a6 95		      ldx	currentSquare
      0  fbab					      MOVE_TO	_UP+_UP+_RIGHT
      1  fbab					      SUBROUTINE
      2  fbab		       bc 21 f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  fbae		       30 0c		      bmi	.invalid
      4  fbb0		       b9 70 f0 	      lda	Board,y
      5  fbb3		       f0 04		      beq	.squareEmpty
      6  fbb5		       45 94		      eor	currentPiece
      7  fbb7		       10 03		      bpl	.invalid
      8  fbb9		       20 0b fc    .squareEmpty jsr	AddMove
      9  fbbc				   .invalid
     18  fbbc
      0  fbbc					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  fbbc		       a6 95		      ldx	currentSquare
      0  fbbe					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  fbbe					      SUBROUTINE
      2  fbbe		       bc 00 f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  fbc1		       30 0c		      bmi	.invalid
      4  fbc3		       b9 70 f0 	      lda	Board,y
      5  fbc6		       f0 04		      beq	.squareEmpty
      6  fbc8		       45 94		      eor	currentPiece
      7  fbca		       10 03		      bpl	.invalid
      8  fbcc		       20 0b fc    .squareEmpty jsr	AddMove
      9  fbcf				   .invalid
      0  fbcf					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  fbcf		       a6 95		      ldx	currentSquare
      0  fbd1					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  fbd1					      SUBROUTINE
      2  fbd1		       bc 04 f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  fbd4		       30 0c		      bmi	.invalid
      4  fbd6		       b9 70 f0 	      lda	Board,y
      5  fbd9		       f0 04		      beq	.squareEmpty
      6  fbdb		       45 94		      eor	currentPiece
      7  fbdd		       10 03		      bpl	.invalid
      8  fbdf		       20 0b fc    .squareEmpty jsr	AddMove
      9  fbe2				   .invalid
      0  fbe2					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  fbe2		       a6 95		      ldx	currentSquare
      0  fbe4					      MOVE_TO	_UP+_LEFT+_LEFT
      1  fbe4					      SUBROUTINE
      2  fbe4		       bc 14 f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  fbe7		       30 0c		      bmi	.invalid
      4  fbe9		       b9 70 f0 	      lda	Board,y
      5  fbec		       f0 04		      beq	.squareEmpty
      6  fbee		       45 94		      eor	currentPiece
      7  fbf0		       10 03		      bpl	.invalid
      8  fbf2		       20 0b fc    .squareEmpty jsr	AddMove
      9  fbf5				   .invalid
      0  fbf5					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  fbf5		       a6 95		      ldx	currentSquare
      0  fbf7					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  fbf7					      SUBROUTINE
      2  fbf7		       bc 18 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  fbfa		       30 0c		      bmi	.invalid
      4  fbfc		       b9 70 f0 	      lda	Board,y
      5  fbff		       f0 04		      beq	.squareEmpty
      6  fc01		       45 94		      eor	currentPiece
      7  fc03		       10 03		      bpl	.invalid
      8  fc05		       20 0b fc    .squareEmpty jsr	AddMove
      9  fc08				   .invalid
     23  fc08
     24  fc08		       4c d2 f9 	      jmp	MoveReturn
     25  fc0b
     26  fc0b							; EOF
------- FILE BANK_FIXED.asm
    516  fc0b
    517  fc0b							;---------------------------------------------------------------------------------------------------
    518  fc0b
      0  fc0b					      DEF	AddMove
      1  fc0b				   BANK_AddMove SET	_CURRENT_BANK
      2  fc0b				   AddMove
      3  fc0b				   TEMPORARY_VAR SET	Overlay
      4  fc0b				   TEMPORARY_OFFSET SET	0
      5  fc0b					      SUBROUTINE
    520  fc0b					      SUBROUTINE
    521  fc0b							; =57 including call
    522  fc0b
    523  fc0b							; add square in y register to movelist as destination (X12 format)
    524  fc0b							; currentPiece = piece moving
    525  fc0b							; currentSquare = start square (X12)
    526  fc0b							; ??do not modify y
    527  fc0b
    528  fc0b		       a5 99		      lda	currentPly	; 3
    529  fc0d		       85 3e		      sta	SET_BANK_RAM	; 3
    530  fc0f
    531  fc0f							; [y]		     to square (X12)
    532  fc0f							; currentSquare     from square (X12)
    533  fc0f							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    534  fc0f							; do not modify [Y]
    535  fc0f
    536  fc0f							; add a move to the movelist
    537  fc0f
    538  fc0f		       98		      tya		; 2
    539  fc10
    540  fc10		       ac c9 f1 	      ldy	moveIndex	; 3
    541  fc13		       c8		      iny		; 2
    542  fc14		       8c c9 f5 	      sty	moveIndex+RAM_WRITE	; 4
    543  fc17
    544  fc17		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    545  fc1a		       aa		      tax		; 2   new square (for projections)
    546  fc1b
    547  fc1b		       a5 95		      lda	currentSquare	; 3
    548  fc1d		       99 82 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    549  fc20		       a5 94		      lda	currentPiece	; 3
    550  fc22		       99 64 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    551  fc25
    552  fc25		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2	     ; TODO: NOT NEEDED IF FIXED BANK CALLED THIS
    553  fc27		       85 3e		      sta	SET_BANK_RAM	; 3
    554  fc29		       60		      rts		; 6
    555  fc2a
    556  fc2a
    557  fc2a							;---------------------------------------------------------------------------------------------------
    558  fc2a
      0  fc2a					      DEF	InitialisePieceSquares
      1  fc2a				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  fc2a				   InitialisePieceSquares
      3  fc2a				   TEMPORARY_VAR SET	Overlay
      4  fc2a				   TEMPORARY_OFFSET SET	0
      5  fc2a					      SUBROUTINE
    560  fc2a					      SUBROUTINE
    561  fc2a
    562  fc2a							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    563  fc2a
    564  fc2a		       a9 09		      lda	#RAMBANK_PLY
    565  fc2c		       85 3e		      sta	SET_BANK_RAM
    566  fc2e		       20 ca f1 	      jsr	InitPieceLists	; for white
    567  fc31		       a9 0a		      lda	#RAMBANK_PLY+1
    568  fc33		       85 3e		      sta	SET_BANK_RAM
    569  fc35		       20 ca f1 	      jsr	InitPieceLists	; for black
    570  fc38
    571  fc38
    572  fc38		       a9 00		      lda	#0
    573  fc3a		       85 97		      sta	enPassantPawn	; no en-passant
    574  fc3c
    575  fc3c
    576  fc3c							; Now setup the board/piecelists
    577  fc3c
    578  fc3c		       a2 00		      ldx	#0
    579  fc3e				   .fillPieceLists
    580  fc3e
    581  fc3e		       a9 09		      lda	#RAMBANK_PLY
    582  fc40		       85 3e		      sta	SET_BANK_RAM
    583  fc42
    584  fc42		       bd 1f f2 	      lda	InitPieceList,x	; colour/-1
    585  fc45		       f0 50		      beq	.finish
    586  fc47
    587  fc47		       0a		      asl
    588  fc48		       a9 09		      lda	#RAMBANK_PLY
    589  fc4a		       69 00		      adc	#0
    590  fc4c		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    591  fc4e
    592  fc4e		       ac 7c f0 	      ldy	PieceListPtr
    593  fc51		       c8		      iny
    594  fc52
    595  fc52		       bd 20 f2 	      lda	InitPieceList+1,x	; square
    596  fc55		       99 1c f4 	      sta	PieceSquare+RAM_WRITE,y
    597  fc58		       98		      tya
    598  fc59		       99 0c f4 	      sta	SortedPieceList+RAM_WRITE,y
    599  fc5c
    600  fc5c		       bd 1f f2 	      lda	InitPieceList,x	; piece type
    601  fc5f		       99 2c f4 	      sta	PieceType+RAM_WRITE,y
    602  fc62		       48		      pha
    603  fc63
    604  fc63		       8c 7c f4 	      sty	PieceListPtr+RAM_WRITE
    605  fc66
    606  fc66
    607  fc66		       bc 20 f2 	      ldy	InitPieceList+1,x	; square
    608  fc69
    609  fc69		       a9 08		      lda	#RAMBANK_MOVES_RAM
    610  fc6b		       85 3e		      sta	SET_BANK_RAM
    611  fc6d		       68		      pla
    612  fc6e		       99 70 f4 	      sta	Board+RAM_WRITE,y
    613  fc71
    614  fc71				  -	      if	0
    615  fc71				  -			; Add the material value of the piece to the material score
    616  fc71				  -
    617  fc71				  -	      cmp	#128	; CC=white, CS=black
    618  fc71				  -	      and	#PIECE_MASK
    619  fc71				  -	      tay
    620  fc71				  -
    621  fc71				  -	      JSROM	AddPieceMaterialValue
    622  fc71				  -
    623  fc71				  -	      txa
    624  fc71				  -	      pha
    625  fc71				  -
    626  fc71				  -	      lda	#RAMBANK_PLY
    627  fc71				  -	      sta	SET_BANK_RAM
    628  fc71				  -	      ldy	InitPieceList+1,x	; square
    629  fc71				  -
    630  fc71				  -
    631  fc71				  -	      lda	InitPieceList,x	; type
    632  fc71				  -
    633  fc71				  -	      ldx	#BANK_AddPiecePositionValue
    634  fc71				  -	      stx	SET_BANK
    635  fc71				  -
    636  fc71				  -
    637  fc71				  -	      jsr	AddPiecePositionValue
    638  fc71				  -
    639  fc71				  -	      pla
    640  fc71				  -	      tax
    641  fc71				  -
    642  fc71				  -			; ^
    643  fc71					      endif
    644  fc71
    645  fc71		       a9 0f		      lda	#BANK_PieceValueLO
    646  fc73		       85 3f		      sta	SET_BANK
    647  fc75
    648  fc75		       b9 08 f0 	      lda	PieceValueHI,y
    649  fc78		       48		      pha
    650  fc79		       b9 00 f0 	      lda	PieceValueLO,y
    651  fc7c		       48		      pha
    652  fc7d
    653  fc7d		       bd 1f f2 	      lda	InitPieceList,x	; colour/-1
    654  fc80		       0a		      asl
    655  fc81		       a9 09		      lda	#RAMBANK_PLY
    656  fc83		       69 00		      adc	#0
    657  fc85		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    658  fc87
    659  fc87		       ac 7c f0 	      ldy	PieceListPtr
    660  fc8a		       c8		      iny
    661  fc8b
    662  fc8b
    663  fc8b		       68		      pla
    664  fc8c		       99 3c f4 	      sta	PieceMaterialValueLO+RAM_WRITE,y
    665  fc8f		       68		      pla
    666  fc90		       99 4c f4 	      sta	PieceMaterialValueHI+RAM_WRITE,y
    667  fc93
    668  fc93		       e8		      inx
    669  fc94		       e8		      inx
    670  fc95		       10 a7		      bpl	.fillPieceLists
    671  fc97
    672  fc97				   .finish
    673  fc97
    674  fc97				  -	      if	0
    675  fc97				  -
    676  fc97				  -	      SUBROUTINE
    677  fc97				  -
    678  fc97				  -	      lda	#RAMBANK_PLY
    679  fc97				  -	      sta	SET_BANK_RAM
    680  fc97				  -
    681  fc97				  -	      ldx	#15
    682  fc97				  -.scan      lda	PieceSquare,x
    683  fc97				  -	      beq	.dead
    684  fc97				  -
    685  fc97				  -	      clc
    686  fc97				  -	      lda	Evaluation
    687  fc97				  -	      adc	PieceMaterialValueLO,x
    688  fc97				  -	      sta	Evaluation
    689  fc97				  -	      lda	Evaluation+1
    690  fc97				  -	      adc	PieceMaterialValueHI,x
    691  fc97				  -	      sta	Evaluation+1
    692  fc97				  -
    693  fc97				  -.dead      dex
    694  fc97				  -	      bpl	.scan
    695  fc97				  -
    696  fc97				  -	      SUBROUTINE
    697  fc97				  -
    698  fc97				  -	      lda	#RAMBANK_PLY+1
    699  fc97				  -	      sta	SET_BANK_RAM
    700  fc97				  -
    701  fc97				  -	      ldx	#15
    702  fc97				  -.scan      lda	PieceSquare,x
    703  fc97				  -	      beq	.dead
    704  fc97				  -
    705  fc97				  -	      sec
    706  fc97				  -	      lda	Evaluation
    707  fc97				  -	      sbc	PieceMaterialValueLO,x
    708  fc97				  -	      sta	Evaluation
    709  fc97				  -	      lda	Evaluation+1
    710  fc97				  -	      sbc	PieceMaterialValueHI,x
    711  fc97				  -	      sta	Evaluation+1
    712  fc97				  -
    713  fc97				  -.dead      dex
    714  fc97				  -	      bpl	.scan
    715  fc97				  -
    716  fc97					      endif
    717  fc97
    718  fc97		       60		      rts
    719  fc98
    720  fc98
    721  fc98							;---------------------------------------------------------------------------------------------------
    722  fc98
      0  fc98					      DEF	SAFE_GetKingSquare
      1  fc98				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  fc98				   SAFE_GetKingSquare
      3  fc98				   TEMPORARY_VAR SET	Overlay
      4  fc98				   TEMPORARY_OFFSET SET	0
      5  fc98					      SUBROUTINE
    724  fc98					      SUBROUTINE
    725  fc98
    726  fc98							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    727  fc98							; Return:	 A = square king is on (or -1)
    728  fc98
    729  fc98		       85 3e		      sta	SET_BANK_RAM
    730  fc9a		       20 6c f3 	      jsr	GetKingSquare
    731  fc9d		       a4 8b		      ldy	savedBank
    732  fc9f		       84 3f		      sty	SET_BANK
    733  fca1		       60		      rts
    734  fca2
    735  fca2							;---------------------------------------------------------------------------------------------------
    736  fca2
      0  fca2					      DEF	GetValid
      1  fca2				   BANK_GetValid SET	_CURRENT_BANK
      2  fca2				   GetValid
      3  fca2				   TEMPORARY_VAR SET	Overlay
      4  fca2				   TEMPORARY_OFFSET SET	0
      5  fca2					      SUBROUTINE
    738  fca2		       a9 08		      lda	#RAMBANK_MOVES_RAM
    739  fca4		       85 3e		      sta	SET_BANK_RAM
    740  fca6		       b9 0c f0 	      lda	ValidSquare,y
    741  fca9		       a4 8b		      ldy	savedBank
    742  fcab		       84 3f		      sty	SET_BANK
    743  fcad		       60		      rts
    744  fcae
    745  fcae
    746  fcae
      0  fcae					      DEF	GetBoard
      1  fcae				   BANK_GetBoard SET	_CURRENT_BANK
      2  fcae				   GetBoard
      3  fcae				   TEMPORARY_VAR SET	Overlay
      4  fcae				   TEMPORARY_OFFSET SET	0
      5  fcae					      SUBROUTINE
    748  fcae		       a9 08		      lda	#RAMBANK_MOVES_RAM
    749  fcb0		       85 3e		      sta	SET_BANK_RAM
    750  fcb2		       b9 70 f0 	      lda	Board,y
    751  fcb5		       a4 8b		      ldy	savedBank
    752  fcb7		       84 3f		      sty	SET_BANK
    753  fcb9		       60		      rts
    754  fcba
      0  fcba					      DEF	PutBoard
      1  fcba				   BANK_PutBoard SET	_CURRENT_BANK
      2  fcba				   PutBoard
      3  fcba				   TEMPORARY_VAR SET	Overlay
      4  fcba				   TEMPORARY_OFFSET SET	0
      5  fcba					      SUBROUTINE
    756  fcba		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    757  fcbc		       86 3e		      stx	SET_BANK_RAM
    758  fcbe		       99 70 f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    759  fcc1		       a6 8b		      ldx	savedBank
    760  fcc3		       86 3f		      stx	SET_BANK
    761  fcc5		       60		      rts
    762  fcc6
    763  fcc6							;---------------------------------------------------------------------------------------------------
    764  fcc6
      0  fcc6					      DEF	SAFE_IsValidMoveFromSquare
      1  fcc6				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  fcc6				   SAFE_IsValidMoveFromSquare
      3  fcc6				   TEMPORARY_VAR SET	Overlay
      4  fcc6				   TEMPORARY_OFFSET SET	0
      5  fcc6					      SUBROUTINE
    766  fcc6					      SUBROUTINE
    767  fcc6
    768  fcc6							; Does the square exist in the movelist?
    769  fcc6
    770  fcc6		       a6 88		      ldx	cursorX12
    771  fcc8		       86 8e		      stx	aiFromSquareX12
    772  fcca		       8a		      txa
    773  fccb
    774  fccb		       a4 99		      ldy	currentPly
    775  fccd		       84 3e		      sty	SET_BANK_RAM
    776  fccf		       20 4a f3 	      jsr	CheckMoveListFromSquare
    777  fcd2
    778  fcd2		       a5 8b		      lda	savedBank
    779  fcd4		       85 3f		      sta	SET_BANK
    780  fcd6		       60		      rts
    781  fcd7
    782  fcd7
    783  fcd7							;---------------------------------------------------------------------------------------------------
    784  fcd7
      0  fcd7					      DEF	SAFE_GetPiece
      1  fcd7				   BANK_SAFE_GetPiece SET	_CURRENT_BANK
      2  fcd7				   SAFE_GetPiece
      3  fcd7				   TEMPORARY_VAR SET	Overlay
      4  fcd7				   TEMPORARY_OFFSET SET	0
      5  fcd7					      SUBROUTINE
    786  fcd7					      SUBROUTINE
    787  fcd7
    788  fcd7							; Retrieve the piece+flags from the movelist, given from/to squares
    789  fcd7							; Required as moves have different flags but same origin squares (e.g., castling)
    790  fcd7
    791  fcd7		       a5 99		      lda	currentPly
    792  fcd9		       85 3e		      sta	SET_BANK_RAM
    793  fcdb
    794  fcdb		       20 87 f3 	      jsr	GetPieceGivenFromToSquares
    795  fcde
    796  fcde		       a5 8b		      lda	savedBank
    797  fce0		       85 3f		      sta	SET_BANK
    798  fce2		       60		      rts
    799  fce3
    800  fce3							;---------------------------------------------------------------------------------------------------
    801  fce3
      0  fce3					      DEF	SAFE_IsValidMoveToSquare
      1  fce3				   BANK_SAFE_IsValidMoveToSquare SET	_CURRENT_BANK
      2  fce3				   SAFE_IsValidMoveToSquare
      3  fce3				   TEMPORARY_VAR SET	Overlay
      4  fce3				   TEMPORARY_OFFSET SET	0
      5  fce3					      SUBROUTINE
    803  fce3					      SUBROUTINE
    804  fce3
    805  fce3							; Does the square exist in the movelist?
    806  fce3
    807  fce3		       a4 88		      ldy	cursorX12
    808  fce5		       84 8f		      sty	aiToSquareX12
    809  fce7		       98		      tya
    810  fce8
    811  fce8		       a4 99		      ldy	currentPly
    812  fcea		       84 3e		      sty	SET_BANK_RAM
    813  fcec		       20 a4 f3 	      jsr	CheckMoveListToSquare
    814  fcef
    815  fcef		       a5 8b	   .found     lda	savedBank
    816  fcf1		       85 3f		      sta	SET_BANK
    817  fcf3		       60		      rts
    818  fcf4
    819  fcf4
    820  fcf4							;---------------------------------------------------------------------------------------------------
    821  fcf4
      0  fcf4					      DEF	SAFE_CopyShadowROMtoRAM
      1  fcf4				   BANK_SAFE_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  fcf4				   SAFE_CopyShadowROMtoRAM
      3  fcf4				   TEMPORARY_VAR SET	Overlay
      4  fcf4				   TEMPORARY_OFFSET SET	0
      5  fcf4					      SUBROUTINE
    823  fcf4					      SUBROUTINE
    824  fcf4
    825  fcf4		       20 fc fc 	      jsr	CopyShadowROMtoRAM
    826  fcf7		       a5 8b		      lda	savedBank
    827  fcf9		       85 3f		      sta	SET_BANK
    828  fcfb		       60		      rts
    829  fcfc
    830  fcfc
    831  fcfc							;---------------------------------------------------------------------------------------------------
    832  fcfc
      0  fcfc					      DEF	CopyShadowROMtoRAM
      1  fcfc				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  fcfc				   CopyShadowROMtoRAM
      3  fcfc				   TEMPORARY_VAR SET	Overlay
      4  fcfc				   TEMPORARY_OFFSET SET	0
      5  fcfc					      SUBROUTINE
    834  fcfc					      SUBROUTINE
    835  fcfc
      0  fcfc					      VAR	__destinationBank, 1
      1  fcfc				   __destinationBank SET	TEMPORARY_VAR
      2  fcfc				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  fcfc
      4  fcfc				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  fcfc				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  fcfc				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  fcfc					      ENDIF
      8  fcfc				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  fcfc				  -	      ECHO	"Temporary Variable", __destinationBank, "overflow!"
     10  fcfc				  -	      ERR
     11  fcfc					      ENDIF
     12  fcfc					      LIST	ON
      0  fcfc					      VAR	__sourceBank, 1
      1  fcfc				   __sourceBank SET	TEMPORARY_VAR
      2  fcfc				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  fcfc
      4  fcfc				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  fcfc				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  fcfc				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  fcfc					      ENDIF
      8  fcfc				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  fcfc				  -	      ECHO	"Temporary Variable", __sourceBank, "overflow!"
     10  fcfc				  -	      ERR
     11  fcfc					      ENDIF
     12  fcfc					      LIST	ON
    838  fcfc
    839  fcfc
    840  fcfc							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    841  fcfc							; used to setup callable RAM code from ROM templates
    842  fcfc
    843  fcfc							; x = source ROM bank
    844  fcfc							; y = destination RAM bank (preserved)
    845  fcfc
    846  fcfc		       86 a2		      stx	__sourceBank
    847  fcfe
    848  fcfe		       a2 00		      ldx	#0
    849  fd00		       a5 a2	   .copyPage  lda	__sourceBank
    850  fd02		       85 3f		      sta	SET_BANK
    851  fd04
    852  fd04		       bd 00 f0 	      lda	$F000,x
    853  fd07		       48		      pha
    854  fd08		       bd 00 f1 	      lda	$F100,x
    855  fd0b		       48		      pha
    856  fd0c		       bd 00 f2 	      lda	$F200,x
    857  fd0f		       48		      pha
    858  fd10		       bd 00 f3 	      lda	$F300,x
    859  fd13
    860  fd13		       84 3e		      sty	SET_BANK_RAM
    861  fd15
    862  fd15		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    863  fd18		       68		      pla
    864  fd19		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    865  fd1c		       68		      pla
    866  fd1d		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    867  fd20		       68		      pla
    868  fd21		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    869  fd24
    870  fd24		       ca		      dex
    871  fd25		       d0 d9		      bne	.copyPage
    872  fd27		       60		      rts
    873  fd28
    874  fd28
    875  fd28							;---------------------------------------------------------------------------------------------------
    876  fd28
      0  fd28					      DEF	PromoteStart
      1  fd28				   BANK_PromoteStart SET	_CURRENT_BANK
      2  fd28				   PromoteStart
      3  fd28				   TEMPORARY_VAR SET	Overlay
      4  fd28				   TEMPORARY_OFFSET SET	0
      5  fd28					      SUBROUTINE
    878  fd28					      SUBROUTINE
    879  fd28
    880  fd28							; Remove any piece on the promotion square while we do the promotion selection
    881  fd28
    882  fd28		       20 ae fc 	      jsr	GetBoard
    883  fd2b		       29 0f		      and	#PIECE_MASK
    884  fd2d		       f0 03		      beq	.nopiece
    885  fd2f
      0  fd2f					      DEF	SAFE_CopySinglePiece
      1  fd2f				   BANK_SAFE_CopySinglePiece SET	_CURRENT_BANK
      2  fd2f				   SAFE_CopySinglePiece
      3  fd2f				   TEMPORARY_VAR SET	Overlay
      4  fd2f				   TEMPORARY_OFFSET SET	0
      5  fd2f					      SUBROUTINE
    887  fd2f
    888  fd2f		       20 37 fd 	      jsr	CopySinglePiece
    889  fd32		       a5 8b	   .nopiece   lda	savedBank
    890  fd34		       85 3f		      sta	SET_BANK
    891  fd36		       60		      rts
    892  fd37
    893  fd37							;---------------------------------------------------------------------------------------------------
    894  fd37
      0  fd37					      DEF	CopySinglePiece
      1  fd37				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  fd37				   CopySinglePiece
      3  fd37				   TEMPORARY_VAR SET	Overlay
      4  fd37				   TEMPORARY_OFFSET SET	0
      5  fd37					      SUBROUTINE
    896  fd37					      SUBROUTINE
      0  fd37					      TIMING	COPYSINGLEPIECE, 2150
      1  fd37		       00 22	   SPEEDOF_COPYSINGLEPIECE =	(2150/64) + 1
    898  fd37
    899  fd37							; WARNING: CANNOT USE VAR/OVERLAY IN ANY ROUTINE CALLING THIS!!
    900  fd37							; ALSO CAN'T USE IN THIS ROUTINE
    901  fd37							; This routine will STOMP on those vars due to __pieceShapeBuffer occupying whole overlay
    902  fd37
    903  fd37
    904  fd37							; @2150 max
    905  fd37							; = 33 TIM64T
    906  fd37
    907  fd37
    908  fd37		       a9 08		      lda	#RAMBANK_MOVES_RAM
    909  fd39		       85 3e		      sta	SET_BANK_RAM
    910  fd3b		       20 6c f3 	      jsr	CopySetup
    911  fd3e
    912  fd3e
      0  fd3e					      DEF	InterceptMarkerCopy
      1  fd3e				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  fd3e				   InterceptMarkerCopy
      3  fd3e				   TEMPORARY_VAR SET	Overlay
      4  fd3e				   TEMPORARY_OFFSET SET	0
      5  fd3e					      SUBROUTINE
    914  fd3e					      SUBROUTINE
    915  fd3e
    916  fd3e
    917  fd3e							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    918  fd3e							; y = piece index
    919  fd3e
    920  fd3e		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
    921  fd40		       85 3f		      sta	SET_BANK
    922  fd42
    923  fd42		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
    924  fd45		       85 e9		      sta	__ptr
    925  fd47		       b9 90 f0 	      lda	PIECE_VECTOR_HI,y
    926  fd4a		       85 ea		      sta	__ptr+1
    927  fd4c		       b9 20 f1 	      lda	PIECE_VECTOR_BANK,y
    928  fd4f		       85 3f		      sta	SET_BANK
    929  fd51
    930  fd51		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
    931  fd53		       b1 e9	   .copy      lda	(__ptr),y
    932  fd55		       99 a1 00 	      sta	__pieceShapeBuffer,y
    933  fd58		       88		      dey
    934  fd59		       10 f8		      bpl	.copy
    935  fd5b
    936  fd5b		       a5 80		      lda	drawPieceNumberX12
    937  fd5d		       38		      sec
    938  fd5e		       a2 0a		      ldx	#10
    939  fd60		       e9 0a	   .sub10     sbc	#10
    940  fd62		       ca		      dex
    941  fd63		       b0 fb		      bcs	.sub10
    942  fd65
    943  fd65		       86 3e		      stx	SET_BANK_RAM
    944  fd67
    945  fd67		       69 08		      adc	#8
    946  fd69		       c9 04		      cmp	#4
    947  fd6b
    948  fd6b		       4c 9b f1 	      jmp	CopyPieceToRowBitmap
    949  fd6e
    950  fd6e
    951  fd6e							;---------------------------------------------------------------------------------------------------
    952  fd6e
      0  fd6e					      DEF	SAFE_getMoveIndex
      1  fd6e				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  fd6e				   SAFE_getMoveIndex
      3  fd6e				   TEMPORARY_VAR SET	Overlay
      4  fd6e				   TEMPORARY_OFFSET SET	0
      5  fd6e					      SUBROUTINE
    954  fd6e					      SUBROUTINE
    955  fd6e
    956  fd6e		       a9 09		      lda	#RAMBANK_PLY
    957  fd70		       85 3e		      sta	SET_BANK_RAM
    958  fd72		       ad c9 f1 	      lda	moveIndex
    959  fd75		       a6 8b		      ldx	savedBank
    960  fd77		       86 3f		      stx	SET_BANK
    961  fd79		       60		      rts
    962  fd7a
    963  fd7a
      0  fd7a					      DEF	GoFixPieceList
      1  fd7a				   BANK_GoFixPieceList SET	_CURRENT_BANK
      2  fd7a				   GoFixPieceList
      3  fd7a				   TEMPORARY_VAR SET	Overlay
      4  fd7a				   TEMPORARY_OFFSET SET	0
      5  fd7a					      SUBROUTINE
    965  fd7a		       85 3e		      sta	SET_BANK_RAM
    966  fd7c		       20 b1 f2 	      jsr	FixPieceList
    967  fd7f		       a5 8b		      lda	savedBank
    968  fd81		       85 3f		      sta	SET_BANK
    969  fd83		       60		      rts
    970  fd84
    971  fd84							;---------------------------------------------------------------------------------------------------
    972  fd84
      0  fd84					      DEF	SAFE_showMoveOptions
      1  fd84				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  fd84				   SAFE_showMoveOptions
      3  fd84				   TEMPORARY_VAR SET	Overlay
      4  fd84				   TEMPORARY_OFFSET SET	0
      5  fd84					      SUBROUTINE
    974  fd84					      SUBROUTINE
    975  fd84
    976  fd84							;SAFETIME = 40 	  ; time required to be able to safely do a piece draw TODO: optimise
    977  fd84
    978  fd84
    979  fd84							; place a marker on the board for any square matching the piece
    980  fd84							; EXCEPT for squares which are occupied (we'll flash those later)
    981  fd84							; x = movelist item # being checked
    982  fd84
    983  fd84
    984  fd84		       a6 90	   .next      ldx	aiMoveIndex
    985  fd86		       30 32		      bmi	.skip
    986  fd88
    987  fd88		       c6 90		      dec	aiMoveIndex
    988  fd8a
    989  fd8a		       a9 09		      lda	#RAMBANK_PLY	; current player
    990  fd8c		       85 3e		      sta	SET_BANK_RAM
    991  fd8e
    992  fd8e		       bd 82 f0 	      lda	MoveFrom,x
    993  fd91		       c5 8e		      cmp	aiFromSquareX12
    994  fd93		       d0 ef		      bne	.next
    995  fd95
    996  fd95		       bc 00 f1 	      ldy	MoveTo,x
    997  fd98
    998  fd98							; If it's a pawn promote (duplicate "to" AND piece different (TODO) then skip others)
    999  fd98
   1000  fd98		       98		      tya
   1001  fd99		       ca	   .sk	      dex
   1002  fd9a		       30 0b		      bmi	.prom
   1003  fd9c		       dd 00 f1 	      cmp	MoveTo,x
   1004  fd9f		       d0 06		      bne	.prom
   1005  fda1
   1006  fda1		       c6 90		      dec	aiMoveIndex
   1007  fda3		       c6 90		      dec	aiMoveIndex
   1008  fda5		       c6 90		      dec	aiMoveIndex
   1009  fda7				   .prom
   1010  fda7
   1011  fda7
   1012  fda7
   1013  fda7		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1014  fda9		       85 3e		      sta	SET_BANK_RAM
   1015  fdab
   1016  fdab		       b9 70 f0 	      lda	Board,y
   1017  fdae		       d0 d4		      bne	.next	; don't draw dots on captures - they are flashed later
   1018  fdb0
   1019  fdb0		       84 80		      sty	drawPieceNumberX12
   1020  fdb2
   1021  fdb2		       a2 1c		      ldx	#INDEX_WHITE_MARKER_on_WHITE_SQUARE_0
   1022  fdb4		       20 41 f3 	      jsr	CopySetupForMarker
   1023  fdb7		       20 3e fd 	      jsr	InterceptMarkerCopy
   1024  fdba
   1025  fdba		       a5 8b	   .skip      lda	savedBank
   1026  fdbc		       85 3f		      sta	SET_BANK
   1027  fdbe		       60		      rts
   1028  fdbf
   1029  fdbf
   1030  fdbf							;---------------------------------------------------------------------------------------------------
   1031  fdbf
      0  fdbf					      DEF	SAFE_showPromoteOptions
      1  fdbf				   BANK_SAFE_showPromoteOptions SET	_CURRENT_BANK
      2  fdbf				   SAFE_showPromoteOptions
      3  fdbf				   TEMPORARY_VAR SET	Overlay
      4  fdbf				   TEMPORARY_OFFSET SET	0
      5  fdbf					      SUBROUTINE
   1033  fdbf					      SUBROUTINE
   1034  fdbf
   1035  fdbf							; Pass 	 X = character shape # (?/N/B/R/Q)
   1036  fdbf
   1037  fdbf		       a4 86		      ldy	toX12
   1038  fdc1		       84 80		      sty	drawPieceNumberX12
   1039  fdc3
   1040  fdc3		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1041  fdc5		       85 3e		      sta	SET_BANK_RAM
   1042  fdc7		       20 41 f3 	      jsr	CopySetupForMarker
   1043  fdca
   1044  fdca		       20 3e fd 	      jsr	InterceptMarkerCopy
   1045  fdcd
   1046  fdcd		       a5 8b		      lda	savedBank
   1047  fdcf		       85 3f		      sta	SET_BANK
   1048  fdd1		       60		      rts
   1049  fdd2
   1050  fdd2							;---------------------------------------------------------------------------------------------------
   1051  fdd2
      0  fdd2					      DEF	SAFE_BackupBitmaps
      1  fdd2				   BANK_SAFE_BackupBitmaps SET	_CURRENT_BANK
      2  fdd2				   SAFE_BackupBitmaps
      3  fdd2				   TEMPORARY_VAR SET	Overlay
      4  fdd2				   TEMPORARY_OFFSET SET	0
      5  fdd2					      SUBROUTINE
   1053  fdd2
   1054  fdd2		       84 3e		      sty	SET_BANK_RAM
   1055  fdd4		       20 f4 f2 	      jsr	SaveBitmap
   1056  fdd7		       a5 8b		      lda	savedBank
   1057  fdd9		       85 3f		      sta	SET_BANK
   1058  fddb		       60		      rts
   1059  fddc
   1060  fddc							;---------------------------------------------------------------------------------------------------
   1061  fddc
      0  fddc					      DEF	SAFE_IsSquareUnderAttack
      1  fddc				   BANK_SAFE_IsSquareUnderAttack SET	_CURRENT_BANK
      2  fddc				   SAFE_IsSquareUnderAttack
      3  fddc				   TEMPORARY_VAR SET	Overlay
      4  fddc				   TEMPORARY_OFFSET SET	0
      5  fddc					      SUBROUTINE
   1063  fddc
   1064  fddc							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
   1065  fddc
   1066  fddc							; Pass:	 currentPly = which movelist to check
   1067  fddc							;		 A = X12 square to check
   1068  fddc							; Return:	 CC = No, CS = Yes
   1069  fddc
   1070  fddc		       a6 99		      ldx	currentPly
   1071  fdde		       86 3e		      stx	SET_BANK_RAM
   1072  fde0		       20 5d f3 	      jsr	IsSquareUnderAttack
   1073  fde3		       a5 8b		      lda	savedBank
   1074  fde5		       85 3f		      sta	SET_BANK
   1075  fde7		       60		      rts
   1076  fde8
   1077  fde8							;---------------------------------------------------------------------------------------------------
   1078  fde8
      0  fde8					      DEF	SAFE_showMoveCaptures
      1  fde8				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  fde8				   SAFE_showMoveCaptures
      3  fde8				   TEMPORARY_VAR SET	Overlay
      4  fde8				   TEMPORARY_OFFSET SET	0
      5  fde8					      SUBROUTINE
   1080  fde8					      SUBROUTINE
   1081  fde8
      0  fde8					      JSROM	UNSAFE_showMoveCaptures
      1  fde8
      2  fde8		       a9 0c		      lda	#BANK_UNSAFE_showMoveCaptures
      3  fdea		       85 3f		      sta	SET_BANK
      4  fdec		       20 00 f0 	      jsr	UNSAFE_showMoveCaptures
   1083  fdef		       a5 8b		      lda	savedBank
   1084  fdf1		       85 3f		      sta	SET_BANK
   1085  fdf3		       60		      rts
   1086  fdf4
   1087  fdf4
   1088  fdf4							;---------------------------------------------------------------------------------------------------
   1089  fdf4
      0  fdf4					      DEF	GetMoveFrom
      1  fdf4				   BANK_GetMoveFrom SET	_CURRENT_BANK
      2  fdf4				   GetMoveFrom
      3  fdf4				   TEMPORARY_VAR SET	Overlay
      4  fdf4				   TEMPORARY_OFFSET SET	0
      5  fdf4					      SUBROUTINE
   1091  fdf4		       a9 09		      lda	#RAMBANK_PLY
   1092  fdf6		       85 3e		      sta	SET_BANK_RAM
   1093  fdf8		       a4 8b		      ldy	savedBank
   1094  fdfa		       bd 82 f0 	      lda	MoveFrom,x
   1095  fdfd		       84 3f		      sty	SET_BANK
   1096  fdff		       60		      rts
   1097  fe00
      0  fe00					      DEF	GetMoveTo
      1  fe00				   BANK_GetMoveTo SET	_CURRENT_BANK
      2  fe00				   GetMoveTo
      3  fe00				   TEMPORARY_VAR SET	Overlay
      4  fe00				   TEMPORARY_OFFSET SET	0
      5  fe00					      SUBROUTINE
   1099  fe00		       a9 09		      lda	#RAMBANK_PLY
   1100  fe02		       85 3e		      sta	SET_BANK_RAM
   1101  fe04		       a4 8b		      ldy	savedBank
   1102  fe06		       bd 00 f1 	      lda	MoveTo,x
   1103  fe09		       84 3f		      sty	SET_BANK
   1104  fe0b		       60		      rts
   1105  fe0c
      0  fe0c					      DEF	GetMovePiece
      1  fe0c				   BANK_GetMovePiece SET	_CURRENT_BANK
      2  fe0c				   GetMovePiece
      3  fe0c				   TEMPORARY_VAR SET	Overlay
      4  fe0c				   TEMPORARY_OFFSET SET	0
      5  fe0c					      SUBROUTINE
   1107  fe0c		       a9 09		      lda	#RAMBANK_PLY
   1108  fe0e		       85 3e		      sta	SET_BANK_RAM
   1109  fe10		       a4 8b		      ldy	savedBank
   1110  fe12		       bd 64 f1 	      lda	MovePiece,x
   1111  fe15		       84 3f		      sty	SET_BANK
   1112  fe17		       60		      rts
   1113  fe18
   1114  fe18
   1115  fe18							;---------------------------------------------------------------------------------------------------
   1116  fe18
 FREE BYTES IN FIXED BANK =  $1e4
   1117  fe18					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1118  fe18
   1119  fe18
   1120  fe18							;---------------------------------------------------------------------------------------------------
   1121  fe18							; The reset vectors
   1122  fe18							; these must live in the fixed bank (last 2K of any ROM image in "3E" scheme)
   1123  fe18
   1124  10000 ????				       SEG	InterruptVectors
   1125  fffc					      ORG	FIXED_BANK + $7FC
   1126  fffc					      RORG	$7ffC
   1127  fffc
   1128  fffc		       00 f8		      .word.w	Reset	; RESET
   1129  fffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1130  10000
   1131  10000							;---------------------------------------------------------------------------------------------------
   1132  10000							; EOF
------- FILE ./chess.asm
    461  10000
    462  10000							;END
