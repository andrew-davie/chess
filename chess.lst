------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
     12  0000 ????
     13  0000 ????			   ORIGIN     SET	0
     14  0000 ????			   ORIGIN_RAM SET	0
     15  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     17  0000 ????
     18  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     19  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     20  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     21  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     22  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     23  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     24  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     25  0000 ????
     26  0000 ????	       00 01	   YES	      =	1
     27  0000 ????	       00 00	   NO	      =	0
     28  0000 ????
     29  0000 ????						;===================================
     30  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     31  0000 ????						;===================================
     32  0000 ????
     33  0000 ????						;-------------------------------------------------------------------------------
     34  0000 ????						; The following are optional YES/NO depending on phase of the moon
     35  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     36  0000 ????						;-------------------------------------------------------------------------------
     37  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     38  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     39  0000 ????			  -	      IF	FINAL_VERSION = YES
     40  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     41  0000 ????				      ENDIF
     42  0000 ????
     43  0000 ????						;-------------------------------------------------------------------------------
     44  0000 ????
     45  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     46  0000 ????	       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
     47  0000 ????
     48  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     49  0000 ????
     50  0000 ????						;------------------------------------------------------------------------------
     51  0000 ????
     52  0000 ????	       00 01	   PLUSCART   =	YES
     53  0000 ????
     54  0000 ????						;------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????
     57  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     58  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     59  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     60  0000 ????
     61  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     62  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     63  0000 ????
     64  0000 ????
     65  0000 ????	       10 00	   RAM_3E     =	$1000
     66  0000 ????	       04 00	   RAM_SIZE   =	$400
     67  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     68  0000 ????
     69  0000 ????
     70  0000 ????						; Platform constants:
     71  0000 ????	       00 02	   PAL	      =	%10
     72  0000 ????	       00 02	   PAL_50     =	PAL|0
     73  0000 ????	       00 03	   PAL_60     =	PAL|1
     74  0000 ????
     75  0000 ????
     76  0000 ????				      IF	L276
     77  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     78  0000 ????			  -	      ELSE
     79  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     80  0000 ????				      ENDIF
     81  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     82  0000 ????
     83  0000 ????				      IF	L276
     84  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     85  0000 ????			  -	      ELSE
     86  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     87  0000 ????				      ENDIF
     88  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     89  0000 ????
     90  0000 ????				      IF	L276
     91  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     92  0000 ????			  -	      ELSE
     93  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     94  0000 ????				      ENDIF
     95  0000 ????	       01 38	   SCANLINES_PAL =	312
     96  0000 ????
     97  0000 ????
     98  0000 ????						;------------------------------------------------------------------------------
     99  0000 ????						; MACRO definitions
    100  0000 ????
    101  0000 ????
    102  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    103  0000 ????
    104  0000 ????				      MAC	newbank
    105  0000 ????				      SEG	{1}
    106  0000 ????				      ORG	ORIGIN
    107  0000 ????				      RORG	$F000
    108  0000 ????			   BANK_START SET	*
    109  0000 ????			   {1}	      SET	ORIGIN / 2048
    110  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    111  0000 ????			   _CURRENT_BANK SET	{1}
    112  0000 ????				      ENDM		; bank name
    113  0000 ????
    114  0000 ????				      MAC	define_1k_segment
    115  0000 ????				      ALIGN	$400
    116  0000 ????			   SEGMENT_{1} SET	*
    117  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    118  0000 ????				      ENDM		; {seg name}
    119  0000 ????
    120  0000 ????				      MAC	check_bank_size
    121  0000 ????			   .TEMP      =	* - BANK_START
    122  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    123  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    124  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    125  0000 ????				      ERR
    126  0000 ????				      endif
    127  0000 ????				      ENDM		; name
    128  0000 ????
    129  0000 ????
    130  0000 ????				      MAC	check_half_bank_size
    131  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    132  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    133  0000 ????			   .TEMP      =	* - BANK_START
    134  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    135  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    136  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    137  0000 ????				      ERR
    138  0000 ????				      endif
    139  0000 ????				      ENDM		; name
    140  0000 ????
    141  0000 ????
    142  0000 ????
    143  0000 ????						;--------------------------------------------------------------------------
    144  0000 ????						; Macro inserts a page break if the object would overlap a page
    145  0000 ????
    146  0000 ????				      MAC	optional_pagebreak
    147  0000 ????				      LIST	OFF
    148  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    149  0000 ????			   EARLY_LOCATION SET	*
    150  0000 ????				      ALIGN	256
    151  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    152  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    153  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    154  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    155  0000 ????				      ENDIF
    156  0000 ????				      LIST	ON
    157  0000 ????				      ENDM		; { string, size }
    158  0000 ????
    159  0000 ????
    160  0000 ????				      MAC	check_page_crossing
    161  0000 ????				      LIST	OFF
    162  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    163  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    164  0000 ????				      endif
    165  0000 ????				      LIST	ON
    166  0000 ????				      ENDM
    167  0000 ????
    168  0000 ????				      MAC	checkpage
    169  0000 ????				      LIST	OFF
    170  0000 ????				      IF	>. != >{1}
    171  0000 ????				      ECHO	""
    172  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    173  0000 ????				      ECHO	""
    174  0000 ????				      ERR
    175  0000 ????				      ENDIF
    176  0000 ????				      LIST	ON
    177  0000 ????				      ENDM
    178  0000 ????
    179  0000 ????				      MAC	checkpagex
    180  0000 ????				      LIST	OFF
    181  0000 ????				      IF	>. != >{1}
    182  0000 ????				      ECHO	""
    183  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    184  0000 ????				      ECHO	{2}
    185  0000 ????				      ECHO	""
    186  0000 ????				      ERR
    187  0000 ????				      ENDIF
    188  0000 ????				      LIST	ON
    189  0000 ????				      ENDM
    190  0000 ????
    191  0000 ????
    192  0000 ????				      MAC	checkpage_bne
    193  0000 ????				      LIST	OFF
    194  0000 ????				      IF	0	;>(. + 2) != >{1}
    195  0000 ????				      ECHO	""
    196  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    197  0000 ????				      ECHO	""
    198  0000 ????				      ERR
    199  0000 ????				      ENDIF
    200  0000 ????				      LIST	ON
    201  0000 ????				      bne	{1}
    202  0000 ????				      ENDM
    203  0000 ????
    204  0000 ????				      MAC	checkpage_bpl
    205  0000 ????				      LIST	OFF
    206  0000 ????				      IF	(>(.+2 )) != >{1}
    207  0000 ????				      ECHO	""
    208  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    209  0000 ????				      ECHO	""
    210  0000 ????				      ERR
    211  0000 ????				      ENDIF
    212  0000 ????				      LIST	ON
    213  0000 ????				      bpl	{1}
    214  0000 ????				      ENDM
    215  0000 ????
    216  0000 ????				      MAC	align_free
    217  0000 ????			   FREE       SET	FREE - .
    218  0000 ????				      align	{1}
    219  0000 ????			   FREE       SET	FREE + .
    220  0000 ????				      echo	"@", ., ":", FREE
    221  0000 ????				      ENDM
    222  0000 ????
    223  0000 ????						;--------------------------------------------------------------------------
    224  0000 ????
    225  0000 ????				      MAC	vector
    226  0000 ????				      .word	{1}
    227  0000 ????				      ENDM		; just a word pointer to code
    228  0000 ????
    229  0000 ????
    230  0000 ????				      MAC	define_subroutine
    231  0000 ????			   BANK_{1}   =	_CURRENT_BANK	; bank in which this subroutine resides
    232  0000 ????				      SUBROUTINE		; keep everything local
    233  0000 ????			   {1}			; entry point
    234  0000 ????				      ENDM		; name of subroutine
    235  0000 ????
    236  0000 ????
    237  0000 ????
    238  0000 ????						;--------------------------------------------------------------------------
    239  0000 ????
    240  0000 ????				      MAC	newrambank
    241  0000 ????				      SEG.U	{1}
    242  0000 ????				      ORG	ORIGIN_RAM
    243  0000 ????				      RORG	RAM_3E
    244  0000 ????			   BANK_START SET	*
    245  0000 ????			   {1}	      SET	ORIGIN_RAM / RAM_SIZE
    246  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    247  0000 ????				      ENDM		; bank name
    248  0000 ????
    249  0000 ????						; TODO - fix - this is faulty....
    250  0000 ????				      MAC	validate_ram_size
    251  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    252  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    253  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    254  0000 ????				      ERR
    255  0000 ????				      ENDIF
    256  0000 ????				      ENDM
    257  0000 ????
    258  0000 ????
    259  0000 ????				      MAC	resync
    260  0000 ????						; resync screen, X and Y == 0 afterwards
    261  0000 ????				      lda	#%10	; make sure VBLANK is ON
    262  0000 ????				      sta	VBLANK
    263  0000 ????
    264  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    265  0000 ????			   .loopResync
    266  0000 ????				      VERTICAL_SYNC
    267  0000 ????
    268  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    269  0000 ????				      lda	Platform
    270  0000 ????				      eor	#PAL_50	; PAL-50?
    271  0000 ????				      bne	.ntsc
    272  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    273  0000 ????			   .ntsc
    274  0000 ????			   .loopWait
    275  0000 ????				      sta	WSYNC
    276  0000 ????				      sta	WSYNC
    277  0000 ????				      dey
    278  0000 ????				      bne	.loopWait
    279  0000 ????				      dex
    280  0000 ????				      bne	.loopResync
    281  0000 ????				      ENDM
    282  0000 ????
    283  0000 ????				      MAC	set_platform
    284  0000 ????						; 00 = NTSC
    285  0000 ????						; 01 = NTSC
    286  0000 ????						; 10 = PAL-50
    287  0000 ????						; 11 = PAL-60
    288  0000 ????				      lda	SWCHB
    289  0000 ????				      rol
    290  0000 ????				      rol
    291  0000 ????				      rol
    292  0000 ????				      and	#%11
    293  0000 ????				      eor	#PAL
    294  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    295  0000 ????				      ENDM
    296  0000 ????
    297  0000 ????
    298  0000 ????						;------------------------------------------------------------------------------
    299  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00dc ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080
      9 U0080		       00	   rnd	      ds	1	; random
     10 U0081		       00	   doubleBufferBase ds	1	; switcher for which draw buffer in use points to DRAW one
     11 U0082		       00	   drawPhase  ds	1	; ticks through the board draw process
     12 U0083		       00	   drawPieceNumber ds	1	; partial - square being drawn
     13 U0084
     14 U0084		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     15 U0085		       00	   BufferedJoystick ds	1	; player joystick input
     16 U0086		       00	   PreviousJoystick ds	1
     17 U0087							;BGColour			  ds 1
     18 U0087		       00 00	   colour_table ds	2
     19 U0089
     20 U0089		       00 00	   Board_AddressR ds	2
     21 U008b		       00 00	   Board_AddressW ds	2
     22 U008d		       00	   ROM_Bank   ds	1	; last switched ROM bank (not accessible if RAM subsequently switched)
     23 U008e		       00	   RAM_Bank   ds	1
     24 U008f
     25 U008f
     26 U008f		       00	   ObjIterator ds	1	; count UP iterator over objects
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U0090					      include	"overlays.asm"
      1 U0090							; Chess
      2 U0090							; Atari 2600 Chess display system
      3 U0090							; Copyright (c) 2019-2020 Andrew Davie
      4 U0090							; andrew@taswegian.com
      5 U0090
      6 U0090							;---------------------------------------------------------------------------------------------------
      7 U0090							; OVERLAYS!
      8 U0090							; These variables are overlays, and should be managed with care
      9 U0090							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U0090							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U0090							; use a variable in overlay #1 while at the same time using a variable in
     12 U0090							; overlay #2
     13 U0090
     14 U0090							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U0090
     16 U0090							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U0090							; ensure this by using the VALIDATE_OVERLAY macro
     18 U0090							;---------------------------------------------------------------------------------------------------
     19 U0090
     20 U0090					      MAC	overlay
     21 U0090				   OVERLAY_NAME SET	{1}
     22 U0090					      SEG.U	OVERLAY_{1}
     23 U0090					      org	Overlay
     24 U0090					      ENDM		; {name}
     25 U0090
     26 U0090							;---------------------------------------------------------------------------------------------------
     27 U0090
     28 U0090					      MAC	validate_overlay
     29 U0090					      LIST	OFF
     30 U0090				   OVERLAY_DELTA SET	* - Overlay
     31 U0090					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U0090				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U0090					      ENDIF
     34 U0090					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U0090					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U0090					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U0090					      ERR
     38 U0090					      ENDIF
     39 U0090					      LIST	ON
     40 U0090					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U0090					      ENDM
     42 U0090
     43 U0090							;---------------------------------------------------------------------------------------------------
     44 U0090
     45 U0090				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U0090				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U0090
     48 U0090
     49 U0090							; This overlay variable is used for the overlay variables.  That's OK.
     50 U0090							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U0090							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U0090							; (especially the latter ones) are only used in rare occasions.
     53 U0090
     54 U0090							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U0090							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U0090
     57 U0090		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00dc
     59 U00dc							;---------------------------------------------------------------------------------------------------
     60 U00dc							; And now... the overlays....
     61 U00dc
 ---- OVERLAYS ( $4c bytes ) ----
     62 U00dc					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     63 U00dc
     64 U00dc							;---------------------------------------------------------------------------------------------------
     65 U00dc
      0 U00dc					      OVERLAY	"PieceBufferOverlay"
      1 U00dc				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00dc ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U0090					      org	Overlay
     67 U0090							; used in CopyPieceFromRAMBufferToScreen
     68 U0090							; used in CopyPieceToRAMBuffer
     69 U0090							; used in ClearChessBitmap
     70 U0090							; used in CopyPieceToRowBitmap
     71 U0090		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     72 U00d8		       00 00	   __ptr      ds	2	; pointer to data
     73 U00da		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00dc					      VALIDATE_OVERLAY
     11 U00dc					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00dc					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     75 U00dc
     76 U00dc							;---------------------------------------------------------------------------------------------------
     77 U00dc
      0 U00dc					      OVERLAY	"CopyROMShadowToRAM"
      1 U00dc				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U0093 ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U0090					      org	Overlay
     79 U0090		       00	   __CopyCount ds	1
     80 U0091		       00	   __ROM_SourceBank ds	1
     81 U0092		       00	   __index    ds	1
      0 U0093					      VALIDATE_OVERLAY
     11 U0093					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U0093					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     83 U0093
     84 U0093							;---------------------------------------------------------------------------------------------------
     85 U0093
      0 U0093					      OVERLAY	"DrawTheChessScreen"
      1 U0093				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U0091 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U0090					      org	Overlay
     87 U0090		       00	   __rows     ds	1
      0 U0091					      VALIDATE_OVERLAY
     11 U0091					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U0091					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     89 U0091
     90 U0091							;---------------------------------------------------------------------------------------------------
     91 U0091
      0 U0091					      OVERLAY	"SetupShadowRAM"
      1 U0091				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U0092 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U0090					      org	Overlay
     93 U0090		       00	   __destinationBank ds	1
     94 U0091		       00	   __sourceBank ds	1
      0 U0092					      VALIDATE_OVERLAY
     11 U0092					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U0092					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     96 U0092
     97 U0092							;---------------------------------------------------------------------------------------------------
      0 U0092					      OVERLAY	"DrawPiece"
      1 U0092				   OVERLAY_NAME SET	"DrawPiece"
      2 U0091 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U0090					      org	Overlay
     99 U0090		       00	   __pieceColour ds	1
      0 U0091					      VALIDATE_OVERLAY
     11 U0091					      LIST	ON
 DrawPiece - $4b bytes available
     12 U0091					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    101 U0091
    102 U0091							;---------------------------------------------------------------------------------------------------
      0 U0091					      OVERLAY	"RandomPiece"
      1 U0091				   OVERLAY_NAME SET	"RandomPiece"
      2 U009d ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U0090					      org	Overlay
    104 U0090		       00	   __tempx    ds	1
      0 U0091					      VALIDATE_OVERLAY
     11 U0091					      LIST	ON
 RandomPiece - $4b bytes available
     12 U0091					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    106 U0091
    107 U0091							;---------------------------------------------------------------------------------------------------
    108 U0091
 ---- END OF OVERLAYS ----
    109 U0091					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    110 U0091					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    111 U0091
    112 U0091							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U0091					      include	"stack.asm"
      1 U0091							; Chess
      2 U0091							; Atari 2600 Chess display system
      3 U0091							; Copyright (c) 2019-2020 Andrew Davie
      4 U0091							; andrew@taswegian.com
      5 U0091
      6 U0091		       00 00 00 00*	      ds	RESERVED_FOR_STACK
------- FILE ./chess.asm
    303 U009d
 FREE BYTES IN ZERO PAGE =  $62
    304 U009d					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    305 U009d				  -	      IF	* > $FF
    306 U009d				  -	      ERR	"Zero Page overflow!"
    307 U009d					      ENDIF
    308 U009d
    309 U009d							;------------------------------------------------------------------------------
    310 U009d							;##############################################################################
    311 U009d							;------------------------------------------------------------------------------
    312 U009d
    313 U009d							; NOW THE VERY INTERESTING '3E' RAM BANKS
    314 U009d							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 2k TOTAL
    315 U009d
      0 U009d					      NEWRAMBANK	BANK_SCREENMARKII1
      1 U0000 ????				      SEG.U	BANK_SCREENMARKII1
      2 U0000					      ORG	ORIGIN_RAM
      3 U0000					      RORG	RAM_3E
      4 U0000				   BANK_START SET	*
      5 U0000				   BANK_SCREENMARKII1 SET	ORIGIN_RAM / RAM_SIZE
      6 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    317 U0000
    318 U0000							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    319 U0000							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    320 U0000							; The variable definitions are also in that ROM bank (even though they're RAM :)
    321 U0000
    322 U0000		       00 60	   SCREEN_BITMAP_SIZE =	4 * LINES_PER_CHAR
    323 U0000
    324 U0000							; These banks (there are #CHESSBOARD_ROWS of them) hold a RAM copy of the screen draw
    325 U0000							; code.  This code is self-modifying, in that the colour values for each scanline
    326 U0000							; are set to NTSC or PAL values on startup -- thus, the single binary can run
    327 U0000							; on either format system.  The main purpose for copying the draw code to RAM,
    328 U0000							; though, is to free up space in the fixed bank (which is incredibly valuable).
    329 U0000
    330 U0000							; A neat feature of having multiple copies of the same code in different RAM banks
    331 U0000							; is that we can use that code to switch between banks, and the system will happily
    332 U0000							; execute the next instruction from the newly switched-in bank without a problem.
    333 U0000
    334 U0000							; Now we have the actual graphics data for each of the rows.  This consists of an
    335 U0000							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    336 U0000							; character shapes are masked/copied. The depth of the character shapes may be
    337 U0000							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    338 U0000							; a multiple of 3, so that the RGB scanlines match at character joins.
    339 U0000
    340 U0000							; The next part of the graphics data is a bitmap sprite buffer -- space for two
    341 U0000							; sprites' graphics shape and colour data.  The shape and colour may be set as
    342 U0000							; part of the draw routine *every* scanline (though the system currently uses
    343 U0000							; one colour shared between both players).
    344 U0000
      0 U0000					      VALIDATE_RAM_SIZE
      1 U0000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0000				  -	      ERR
      5 U0000					      ENDIF
    346 U0000
    347 U0000							; We have one bank for each screen row.  These banks are duplicates of the above,
    348 U0000							; accessed via the above labels but with the appropriate bank switched in.
    349 U0000
    350 U0000							;------------------------------------------------------------------------------
    351 U0000
    352 U0000					      REPEAT	(CHESSBOARD_ROWS * 2) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U3c00 ????				      SEG.U	.DUMMY
      2 U0400					      ORG	ORIGIN_RAM
      3 U0400					      RORG	RAM_3E
      4 U0400				   BANK_START SET	*
      5 U0400				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    352 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400					      SEG.U	.DUMMY
      2 U0800					      ORG	ORIGIN_RAM
      3 U0800					      RORG	RAM_3E
      4 U0800				   BANK_START SET	*
      5 U0800				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    352 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800					      SEG.U	.DUMMY
      2 U0c00					      ORG	ORIGIN_RAM
      3 U0c00					      RORG	RAM_3E
      4 U0c00				   BANK_START SET	*
      5 U0c00				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    352 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00					      SEG.U	.DUMMY
      2 U1000					      ORG	ORIGIN_RAM
      3 U1000					      RORG	RAM_3E
      4 U1000				   BANK_START SET	*
      5 U1000				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    352 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000					      SEG.U	.DUMMY
      2 U1400					      ORG	ORIGIN_RAM
      3 U1400					      RORG	RAM_3E
      4 U1400				   BANK_START SET	*
      5 U1400				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    352 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400					      SEG.U	.DUMMY
      2 U1800					      ORG	ORIGIN_RAM
      3 U1800					      RORG	RAM_3E
      4 U1800				   BANK_START SET	*
      5 U1800				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    352 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800					      SEG.U	.DUMMY
      2 U1c00					      ORG	ORIGIN_RAM
      3 U1c00					      RORG	RAM_3E
      4 U1c00				   BANK_START SET	*
      5 U1c00				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    352 U1c00					      REPEND
      0 U1c00					      NEWRAMBANK	.DUMMY
      1 U1c00					      SEG.U	.DUMMY
      2 U2000					      ORG	ORIGIN_RAM
      3 U2000					      RORG	RAM_3E
      4 U2000				   BANK_START SET	*
      5 U2000				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      VALIDATE_RAM_SIZE
      1 U2000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2000				  -	      ERR
      5 U2000					      ENDIF
    352 U2000					      REPEND
      0 U2000					      NEWRAMBANK	.DUMMY
      1 U2000					      SEG.U	.DUMMY
      2 U2400					      ORG	ORIGIN_RAM
      3 U2400					      RORG	RAM_3E
      4 U2400				   BANK_START SET	*
      5 U2400				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2400					      VALIDATE_RAM_SIZE
      1 U2400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2400				  -	      ERR
      5 U2400					      ENDIF
    352 U2400					      REPEND
      0 U2400					      NEWRAMBANK	.DUMMY
      1 U2400					      SEG.U	.DUMMY
      2 U2800					      ORG	ORIGIN_RAM
      3 U2800					      RORG	RAM_3E
      4 U2800				   BANK_START SET	*
      5 U2800				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2800					      VALIDATE_RAM_SIZE
      1 U2800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2800				  -	      ERR
      5 U2800					      ENDIF
    352 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY
      1 U2800					      SEG.U	.DUMMY
      2 U2c00					      ORG	ORIGIN_RAM
      3 U2c00					      RORG	RAM_3E
      4 U2c00				   BANK_START SET	*
      5 U2c00				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2c00					      VALIDATE_RAM_SIZE
      1 U2c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2c00				  -	      ERR
      5 U2c00					      ENDIF
    352 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY
      1 U2c00					      SEG.U	.DUMMY
      2 U3000					      ORG	ORIGIN_RAM
      3 U3000					      RORG	RAM_3E
      4 U3000				   BANK_START SET	*
      5 U3000				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U3000					      VALIDATE_RAM_SIZE
      1 U3000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U3000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U3000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U3000				  -	      ERR
      5 U3000					      ENDIF
    352 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY
      1 U3000					      SEG.U	.DUMMY
      2 U3400					      ORG	ORIGIN_RAM
      3 U3400					      RORG	RAM_3E
      4 U3400				   BANK_START SET	*
      5 U3400				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U3400					      VALIDATE_RAM_SIZE
      1 U3400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U3400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U3400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U3400				  -	      ERR
      5 U3400					      ENDIF
    352 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY
      1 U3400					      SEG.U	.DUMMY
      2 U3800					      ORG	ORIGIN_RAM
      3 U3800					      RORG	RAM_3E
      4 U3800				   BANK_START SET	*
      5 U3800				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U3800					      VALIDATE_RAM_SIZE
      1 U3800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U3800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U3800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U3800				  -	      ERR
      5 U3800					      ENDIF
    352 U3800					      REPEND
      0 U3800					      NEWRAMBANK	.DUMMY
      1 U3800					      SEG.U	.DUMMY
      2 U3c00					      ORG	ORIGIN_RAM
      3 U3c00					      RORG	RAM_3E
      4 U3c00				   BANK_START SET	*
      5 U3c00				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U3c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U3c00					      VALIDATE_RAM_SIZE
      1 U3c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U3c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U3c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U3c00				  -	      ERR
      5 U3c00					      ENDIF
    355 U3c00					      REPEND
    356 U3c00
    357 U3c00							;---------------------------------------------------------------------------------------------------
    358 U3c00
      0 U3c00					      NEWRAMBANK	BANK_CHESSBOARD
      1 U4040 ????				      SEG.U	BANK_CHESSBOARD
      2 U4000					      ORG	ORIGIN_RAM
      3 U4000					      RORG	RAM_3E
      4 U4000				   BANK_START SET	*
      5 U4000				   BANK_CHESSBOARD SET	ORIGIN_RAM / RAM_SIZE
      6 U4000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    360 U4000		       00 00 00 00*Chessboard ds	64
      0 U4040					      VALIDATE_RAM_SIZE
      1 U4040				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U4040				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U4040				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U4040				  -	      ERR
      5 U4040					      ENDIF
    362 U4040
    363 U4040							;------------------------------------------------------------------------------
    364 U4040							;##############################################################################
    365 U4040							;------------------------------------------------------------------------------
    366 U4040
      0 U4040					      NEWRAMBANK	BANK_SCREEN
      1 U4400 ????				      SEG.U	BANK_SCREEN
      2 U4400					      ORG	ORIGIN_RAM
      3 U4400					      RORG	RAM_3E
      4 U4400				   BANK_START SET	*
      5 U4400				   BANK_SCREEN SET	ORIGIN_RAM / RAM_SIZE
      6 U4400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    368 U4400							; VARS DEFINED IN ROM_SHADOW_OF_SCREEN
      0 U4400					      VALIDATE_RAM_SIZE
      1 U4400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U4400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U4400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U4400				  -	      ERR
      5 U4400					      ENDIF
    370 U4400
    371 U4400
      0 U4400					      NEWRAMBANK	BANK_DRAW_BUFFERS
      1 U4800 ????				      SEG.U	BANK_DRAW_BUFFERS
      2 U4800					      ORG	ORIGIN_RAM
      3 U4800					      RORG	RAM_3E
      4 U4800				   BANK_START SET	*
      5 U4800				   BANK_DRAW_BUFFERS SET	ORIGIN_RAM / RAM_SIZE
      6 U4800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    373 U4800							; VARS DEFINED IN ROM_SHADOW_OF_BANK_DRAW_BUFFERS
    374 U4800							; SELF-MODIFYING SUBROUTINES MAY BE PRESENT IN THIS BANK TOO!
      0 U4800					      VALIDATE_RAM_SIZE
      1 U4800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U4800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U4800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U4800				  -	      ERR
      5 U4800					      ENDIF
    376 U4800
    377 U4800							;------------------------------------------------------------------------------
    378 U4800							;##############################################################################
    379 U4800							;------------------------------------------------------------------------------
    380 U4800
      0 U4800					      NEWRAMBANK	BANK_SCORING
      1 U4c00 ????				      SEG.U	BANK_SCORING
      2 U4c00					      ORG	ORIGIN_RAM
      3 U4c00					      RORG	RAM_3E
      4 U4c00				   BANK_START SET	*
      5 U4c00				   BANK_SCORING SET	ORIGIN_RAM / RAM_SIZE
      6 U4c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    382 U4c00							; VARS DEFINED IN ROM_SHADOW_OF_BANK_SCORING
    383 U4c00							; SELF-MODIFYING SUBROUTINES MAY BE PRESENT IN THIS BANK TOO!
      0 U4c00					      VALIDATE_RAM_SIZE
      1 U4c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U4c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U4c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U4c00				  -	      ERR
      5 U4c00					      ENDIF
    385 U4c00
    386 U4c00							;------------------------------------------------------------------------------
    387 U4c00							;##############################################################################
    388 U4c00							;------------------------------------------------------------------------------
    389 U4c00
      0 U4c00					      NEWRAMBANK	BANK_DECODE_LEVEL
      1 U5000 ????				      SEG.U	BANK_DECODE_LEVEL
      2 U5000					      ORG	ORIGIN_RAM
      3 U5000					      RORG	RAM_3E
      4 U5000				   BANK_START SET	*
      5 U5000				   BANK_DECODE_LEVEL SET	ORIGIN_RAM / RAM_SIZE
      6 U5000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    391 U5000							; VARS DEFINED IN BANK_DECODE_LEVEL_SHADOW
    392 U5000							; SELF-MODIFYING SUBROUTINES MAY BE PRESENT IN THIS BANK TOO!
      0 U5000					      VALIDATE_RAM_SIZE
      1 U5000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U5000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U5000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U5000				  -	      ERR
      5 U5000					      ENDIF
    394 U5000
    395 U5000							;------------------------------------------------------------------------------
    396 U5000							;##############################################################################
    397 U5000							;------------------------------------------------------------------------------
    398 U5000
    399 U5000
    400 U5000							;------------------------------------------------------------------------------
    401 U5000							;##############################################################################
    402 U5000							;------------------------------------------------------------------------------
    403 U5000
      0 U5000					      NEWRAMBANK	BANK_BOARD
      1 U5400 ????				      SEG.U	BANK_BOARD
      2 U5400					      ORG	ORIGIN_RAM
      3 U5400					      RORG	RAM_3E
      4 U5400				   BANK_START SET	*
      5 U5400				   BANK_BOARD SET	ORIGIN_RAM / RAM_SIZE
      6 U5400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    405 U5400
    406 U5400							; Now the interesting 'BOARD' -- which in reality is a free-form system of M*N
    407 U5400							; rows and columns.  We need to reserve enough RAM for the board's entirety, but
    408 U5400							; don't really care much how it overlaps the 1K bank limit.  The code accessing
    409 U5400							; the board *MUST* calculate and take account of the correct RAM bank to switch
    410 U5400							; when accessing.
    411 U5400
    412 U5400							; The system is fairly free-form, in that it rearranges the memory and tables
    413 U5400							; automatically based on the sizes set in these constants. The board may overlay
    414 U5400							; MULTIPLE banks -- just as long as any particular LINE does not cross a bank
    415 U5400							; we're doing OK.
    416 U5400
    417 U5400							; NOTE: Assumption is that board lines CANNOT CROSS page boundaries.
    418 U5400
    419 U5400							; now fits into one single bank (if we don't reserve too much space for code)
    420 U5400
    421 U5400
    422 U5400							;------------------------------------------------------------------------------
    423 U5400							;##############################################################################
    424 U5400							;------------------------------------------------------------------------------
    425 U5400
    426 U5400		       00 b4	   RND_EOR_VAL =	$B4
    427 U5400
    428 U5400					      MAC	next_random
    429 U5400					      lda	rnd
    430 U5400					      lsr
    431 U5400					      bcc	.skipEOR
    432 U5400					      eor	#RND_EOR_VAL
    433 U5400				   .skipEOR   sta	rnd
    434 U5400					      ENDM
    435 U5400
    436 U5400							;--------------------------------------------------------------------------------
    437 U5400
    438 U5400							;ORIGIN      SET 0
    439 U5400
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U5400					      include	"BANK_GENERIC.asm"
      1 U5400
      0 U5400					      NEWBANK	GENERIC_BANK_1
      1  006c ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000
      0  0000					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0000
      2  0000
      3  0000		       00 00	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $0 , FREE= $400
      4  0000					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0000				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0000				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0000				  -	      ERR
      8  0000					      endif
     15  0000
     16  0000							;------------------------------------------------------------------------------
     17  0000							; ... the above is a RAM-copied section -- the following is ROM-only.	Note that
     18  0000							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     19  0000							; bank finishes.  Just continue on from where it left off...
     20  0000							;------------------------------------------------------------------------------
     21  0000
      0  0000					      DEFINE_SUBROUTINE	Cart_Init	; in GENERIC_BANK_1
      1  0000		       00 00	   BANK_Cart_Init =	_CURRENT_BANK
      2  0000					      SUBROUTINE
      3  0000				   Cart_Init
     23  0000
     24  0000							; Note the variables from the title selection are incredibly transient an can be stomped
     25  0000							; at any time.  So they need to be used immediately.
     26  0000
     27  0000
     28  0000							; odd usage below is to prevent any possibility of variable stomping/assumptions
     29  0000
     30  0000		       a9 00		      lda	#0
     31  0002		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     32  0005		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     33  0008		       85 6b		      sta	HMCLR
     34  000a
     35  000a							; cleanup remains of title screen
     36  000a		       85 5b		      sta	GRP0
     37  000c		       85 5c		      sta	GRP1
     38  000e
     39  000e		       a9 10		      lda	#%00010000	; 2	 double width missile, double width player
     40  0010		       85 44		      sta	NUSIZ0	; 3
     41  0012		       85 45		      sta	NUSIZ1
     42  0014
     43  0014		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     44  0016		       85 4a		      sta	CTRLPF
     45  0018
     46  0018		       a9 ff		      lda	#$FF
     47  001a		       85 85		      sta	BufferedJoystick
     48  001c
     49  001c							;lda #DIRECTION_BITS		  ;???
     50  001c							;sta ManLastDirection
     51  001c
     52  001c							;lda #0
     53  001c							;		  sta ObjStackPtr		  ; object stack index of last entry
     54  001c							;		  sta ObjStackPtr+1
     55  001c							;		  sta ObjStackNum
     56  001c							;		  sta ObjIterator
     57  001c
     58  001c							;sta sortPtr
     59  001c							;lda #<(-1)
     60  001c							;sta sortRequired
     61  001c
     62  001c		       60		      rts
     63  001d
     64  001d							;-------------------------------------------------------------------------------------
     65  001d
      0  001d					      DEFINE_SUBROUTINE	Resync
      1  001d		       00 00	   BANK_Resync =	_CURRENT_BANK
      2  001d					      SUBROUTINE
      3  001d				   Resync
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 84		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     68  0040		       60	   Ret	      rts
     69  0041
     70  0041							;------------------------------------------------------------------------------
     71  0041
     72  0041
     73  0041				   OverscanTime
     74  0041		       23 23		      .byte.b	OVERSCAN_TIM_NTSC, OVERSCAN_TIM_NTSC
     75  0043		       29 23		      .byte.b	OVERSCAN_TIM_PAL, OVERSCAN_TIM_NTSC
     76  0045
     77  0045
     78  0045		       00 12	   THROT_BASE =	18
     79  0045				   theThrottler
     80  0045		       12 12 15 12	      .byte.b	THROT_BASE, THROT_BASE, THROT_BASE*60/50, THROT_BASE
     81  0049
      0  0049					      DEFINE_SUBROUTINE	PostScreenCleanup
      1  0049		       00 00	   BANK_PostScreenCleanup =	_CURRENT_BANK
      2  0049					      SUBROUTINE
      3  0049				   PostScreenCleanup
     83  0049
     84  0049		       c8		      iny		; --> 0
     85  004a
     86  004a		       84 49		      sty	COLUBK	; starts colour change bottom score area, wraps to top score area
     87  004c							; + moved here so we don't see a minor colour artefact bottom of screen when look-arounding
     88  004c
     89  004c		       84 4d		      sty	PF0	; why wasn't this here?  I saw colour glitching in score area!
     90  004e							; TJ: no idea why, but you had removed it in revision 758 ;)
     91  004e							; completely accidental -- one of our cats may have deleted it.
     92  004e		       84 4e		      sty	PF1
     93  0050		       84 4f		      sty	PF2
     94  0052		       84 5d		      sty	ENAM0
     95  0054		       84 5b		      sty	GRP0	; when look-scrolling, we can see feet at the top if these aren't here
     96  0056		       84 5c		      sty	GRP1	; 30/12/2011 -- fix dots @ top!
     97  0058
     98  0058							; D1 VBLANK turns off beam
     99  0058
    100  0058		       a9 42		      lda	#%01000010	; bit6 is not required
    101  005a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    102  005c
    103  005c							;------------------------------------------------------------------------------
    104  005c							; This is where the PAL system has a bit of extra time on a per-frame basis.
    105  005c
    106  005c		       a6 84		      ldx	Platform
    107  005e		       bd 41 f0 	      lda	OverscanTime,x
    108  0061		       8d 96 02 	      sta	TIM64T
    109  0064
    110  0064
    111  0064							;----------------------------------------------------------------------------------------------
    112  0064
    113  0064							; has to be done AFTER screen display, because it disables the effect!
    114  0064							;SLEEP 6
    115  0064							;lda rnd		      ; 3     randomly reposition the Cosmic Ark missile
    116  0064							;sta HMM0		      ; 3     this assumes that HMOVE is called at least once/frame
    117  0064
    118  0064				   noFlashBG
    119  0064							;	 sta BGColour
    120  0064
    121  0064							; Create a 'standardised' joystick with D4-D7 having bits CLEAR if the appropriate direction is chosen.
    122  0064
    123  0064		       ad 80 02 	      lda	SWCHA
    124  0067		       25 85		      and	BufferedJoystick
    125  0069		       85 85		      sta	BufferedJoystick
    126  006b
    127  006b		       60		      rts
    128  006c
    129  006c							;------------------------------------------------------------------------------
    130  006c
    131  006c
      0  006c					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  006c		       00 6c	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $6c , FREE= $794
      2  006c					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  006c				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  006c				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  006c				  -	      ERR
      6  006c					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  006c					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  006c
      0  006c					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0ab4 ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     13  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     15  0800
     16  0800				   ChessBitmap
     17  0800		       00 00 00 00*ChessBitmap0 ds	24
     18  0818		       00 00 00 00*ChessBitmap1 ds	24
     19  0830		       00 00 00 00*ChessBitmap2 ds	24
     20  0848		       00 00 00 00*ChessBitmap3 ds	24
     21  0860		       00 00 00 00*ChessBitmap4 ds	24
     22  0878		       00 00 00 00*ChessBitmap5 ds	24
     23  0890
     24  0890							;---------------------------------------------------------------------------------------------------
     25  0890
      0  0890					      DEFINE_SUBROUTINE	ClearRowBitmap
      1  0890		       00 01	   BANK_ClearRowBitmap =	_CURRENT_BANK
      2  0890					      SUBROUTINE
      3  0890				   ClearRowBitmap
     27  0890
     28  0890		       a9 00		      lda	#0
     29  0890				   .OFFSET    SET	0
     30  0892					      REPEAT	ROW_BITMAP_SIZE
     31  0892		       8d 00 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0892				   .OFFSET    SET	.OFFSET + 1
     30  0892					      REPEND
     31  0895		       8d 01 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0895				   .OFFSET    SET	.OFFSET + 1
     30  0895					      REPEND
     31  0898		       8d 02 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0898				   .OFFSET    SET	.OFFSET + 1
     30  0898					      REPEND
     31  089b		       8d 03 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  089b				   .OFFSET    SET	.OFFSET + 1
     30  089b					      REPEND
     31  089e		       8d 04 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  089e				   .OFFSET    SET	.OFFSET + 1
     30  089e					      REPEND
     31  08a1		       8d 05 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08a1				   .OFFSET    SET	.OFFSET + 1
     30  08a1					      REPEND
     31  08a4		       8d 06 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08a4				   .OFFSET    SET	.OFFSET + 1
     30  08a4					      REPEND
     31  08a7		       8d 07 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08a7				   .OFFSET    SET	.OFFSET + 1
     30  08a7					      REPEND
     31  08aa		       8d 08 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08aa				   .OFFSET    SET	.OFFSET + 1
     30  08aa					      REPEND
     31  08ad		       8d 09 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08ad				   .OFFSET    SET	.OFFSET + 1
     30  08ad					      REPEND
     31  08b0		       8d 0a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08b0				   .OFFSET    SET	.OFFSET + 1
     30  08b0					      REPEND
     31  08b3		       8d 0b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08b3				   .OFFSET    SET	.OFFSET + 1
     30  08b3					      REPEND
     31  08b6		       8d 0c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08b6				   .OFFSET    SET	.OFFSET + 1
     30  08b6					      REPEND
     31  08b9		       8d 0d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08b9				   .OFFSET    SET	.OFFSET + 1
     30  08b9					      REPEND
     31  08bc		       8d 0e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08bc				   .OFFSET    SET	.OFFSET + 1
     30  08bc					      REPEND
     31  08bf		       8d 0f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08bf				   .OFFSET    SET	.OFFSET + 1
     30  08bf					      REPEND
     31  08c2		       8d 10 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08c2				   .OFFSET    SET	.OFFSET + 1
     30  08c2					      REPEND
     31  08c5		       8d 11 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08c5				   .OFFSET    SET	.OFFSET + 1
     30  08c5					      REPEND
     31  08c8		       8d 12 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08c8				   .OFFSET    SET	.OFFSET + 1
     30  08c8					      REPEND
     31  08cb		       8d 13 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08cb				   .OFFSET    SET	.OFFSET + 1
     30  08cb					      REPEND
     31  08ce		       8d 14 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08ce				   .OFFSET    SET	.OFFSET + 1
     30  08ce					      REPEND
     31  08d1		       8d 15 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08d1				   .OFFSET    SET	.OFFSET + 1
     30  08d1					      REPEND
     31  08d4		       8d 16 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08d4				   .OFFSET    SET	.OFFSET + 1
     30  08d4					      REPEND
     31  08d7		       8d 17 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08d7				   .OFFSET    SET	.OFFSET + 1
     30  08d7					      REPEND
     31  08da		       8d 18 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08da				   .OFFSET    SET	.OFFSET + 1
     30  08da					      REPEND
     31  08dd		       8d 19 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08dd				   .OFFSET    SET	.OFFSET + 1
     30  08dd					      REPEND
     31  08e0		       8d 1a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08e0				   .OFFSET    SET	.OFFSET + 1
     30  08e0					      REPEND
     31  08e3		       8d 1b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08e3				   .OFFSET    SET	.OFFSET + 1
     30  08e3					      REPEND
     31  08e6		       8d 1c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08e6				   .OFFSET    SET	.OFFSET + 1
     30  08e6					      REPEND
     31  08e9		       8d 1d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08e9				   .OFFSET    SET	.OFFSET + 1
     30  08e9					      REPEND
     31  08ec		       8d 1e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08ec				   .OFFSET    SET	.OFFSET + 1
     30  08ec					      REPEND
     31  08ef		       8d 1f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08ef				   .OFFSET    SET	.OFFSET + 1
     30  08ef					      REPEND
     31  08f2		       8d 20 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08f2				   .OFFSET    SET	.OFFSET + 1
     30  08f2					      REPEND
     31  08f5		       8d 21 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08f5				   .OFFSET    SET	.OFFSET + 1
     30  08f5					      REPEND
     31  08f8		       8d 22 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08f8				   .OFFSET    SET	.OFFSET + 1
     30  08f8					      REPEND
     31  08fb		       8d 23 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08fb				   .OFFSET    SET	.OFFSET + 1
     30  08fb					      REPEND
     31  08fe		       8d 24 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  08fe				   .OFFSET    SET	.OFFSET + 1
     30  08fe					      REPEND
     31  0901		       8d 25 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0901				   .OFFSET    SET	.OFFSET + 1
     30  0901					      REPEND
     31  0904		       8d 26 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0904				   .OFFSET    SET	.OFFSET + 1
     30  0904					      REPEND
     31  0907		       8d 27 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0907				   .OFFSET    SET	.OFFSET + 1
     30  0907					      REPEND
     31  090a		       8d 28 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  090a				   .OFFSET    SET	.OFFSET + 1
     30  090a					      REPEND
     31  090d		       8d 29 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  090d				   .OFFSET    SET	.OFFSET + 1
     30  090d					      REPEND
     31  0910		       8d 2a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0910				   .OFFSET    SET	.OFFSET + 1
     30  0910					      REPEND
     31  0913		       8d 2b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0913				   .OFFSET    SET	.OFFSET + 1
     30  0913					      REPEND
     31  0916		       8d 2c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0916				   .OFFSET    SET	.OFFSET + 1
     30  0916					      REPEND
     31  0919		       8d 2d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0919				   .OFFSET    SET	.OFFSET + 1
     30  0919					      REPEND
     31  091c		       8d 2e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  091c				   .OFFSET    SET	.OFFSET + 1
     30  091c					      REPEND
     31  091f		       8d 2f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  091f				   .OFFSET    SET	.OFFSET + 1
     30  091f					      REPEND
     31  0922		       8d 30 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0922				   .OFFSET    SET	.OFFSET + 1
     30  0922					      REPEND
     31  0925		       8d 31 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0925				   .OFFSET    SET	.OFFSET + 1
     30  0925					      REPEND
     31  0928		       8d 32 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0928				   .OFFSET    SET	.OFFSET + 1
     30  0928					      REPEND
     31  092b		       8d 33 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  092b				   .OFFSET    SET	.OFFSET + 1
     30  092b					      REPEND
     31  092e		       8d 34 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  092e				   .OFFSET    SET	.OFFSET + 1
     30  092e					      REPEND
     31  0931		       8d 35 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0931				   .OFFSET    SET	.OFFSET + 1
     30  0931					      REPEND
     31  0934		       8d 36 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0934				   .OFFSET    SET	.OFFSET + 1
     30  0934					      REPEND
     31  0937		       8d 37 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0937				   .OFFSET    SET	.OFFSET + 1
     30  0937					      REPEND
     31  093a		       8d 38 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  093a				   .OFFSET    SET	.OFFSET + 1
     30  093a					      REPEND
     31  093d		       8d 39 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  093d				   .OFFSET    SET	.OFFSET + 1
     30  093d					      REPEND
     31  0940		       8d 3a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0940				   .OFFSET    SET	.OFFSET + 1
     30  0940					      REPEND
     31  0943		       8d 3b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0943				   .OFFSET    SET	.OFFSET + 1
     30  0943					      REPEND
     31  0946		       8d 3c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0946				   .OFFSET    SET	.OFFSET + 1
     30  0946					      REPEND
     31  0949		       8d 3d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0949				   .OFFSET    SET	.OFFSET + 1
     30  0949					      REPEND
     31  094c		       8d 3e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  094c				   .OFFSET    SET	.OFFSET + 1
     30  094c					      REPEND
     31  094f		       8d 3f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  094f				   .OFFSET    SET	.OFFSET + 1
     30  094f					      REPEND
     31  0952		       8d 40 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0952				   .OFFSET    SET	.OFFSET + 1
     30  0952					      REPEND
     31  0955		       8d 41 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0955				   .OFFSET    SET	.OFFSET + 1
     30  0955					      REPEND
     31  0958		       8d 42 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0958				   .OFFSET    SET	.OFFSET + 1
     30  0958					      REPEND
     31  095b		       8d 43 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  095b				   .OFFSET    SET	.OFFSET + 1
     30  095b					      REPEND
     31  095e		       8d 44 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  095e				   .OFFSET    SET	.OFFSET + 1
     30  095e					      REPEND
     31  0961		       8d 45 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0961				   .OFFSET    SET	.OFFSET + 1
     30  0961					      REPEND
     31  0964		       8d 46 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0964				   .OFFSET    SET	.OFFSET + 1
     30  0964					      REPEND
     31  0967		       8d 47 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0967				   .OFFSET    SET	.OFFSET + 1
     30  0967					      REPEND
     31  096a		       8d 48 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  096a				   .OFFSET    SET	.OFFSET + 1
     30  096a					      REPEND
     31  096d		       8d 49 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  096d				   .OFFSET    SET	.OFFSET + 1
     30  096d					      REPEND
     31  0970		       8d 4a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0970				   .OFFSET    SET	.OFFSET + 1
     30  0970					      REPEND
     31  0973		       8d 4b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0973				   .OFFSET    SET	.OFFSET + 1
     30  0973					      REPEND
     31  0976		       8d 4c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0976				   .OFFSET    SET	.OFFSET + 1
     30  0976					      REPEND
     31  0979		       8d 4d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0979				   .OFFSET    SET	.OFFSET + 1
     30  0979					      REPEND
     31  097c		       8d 4e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  097c				   .OFFSET    SET	.OFFSET + 1
     30  097c					      REPEND
     31  097f		       8d 4f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  097f				   .OFFSET    SET	.OFFSET + 1
     30  097f					      REPEND
     31  0982		       8d 50 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0982				   .OFFSET    SET	.OFFSET + 1
     30  0982					      REPEND
     31  0985		       8d 51 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0985				   .OFFSET    SET	.OFFSET + 1
     30  0985					      REPEND
     31  0988		       8d 52 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0988				   .OFFSET    SET	.OFFSET + 1
     30  0988					      REPEND
     31  098b		       8d 53 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  098b				   .OFFSET    SET	.OFFSET + 1
     30  098b					      REPEND
     31  098e		       8d 54 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  098e				   .OFFSET    SET	.OFFSET + 1
     30  098e					      REPEND
     31  0991		       8d 55 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0991				   .OFFSET    SET	.OFFSET + 1
     30  0991					      REPEND
     31  0994		       8d 56 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0994				   .OFFSET    SET	.OFFSET + 1
     30  0994					      REPEND
     31  0997		       8d 57 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0997				   .OFFSET    SET	.OFFSET + 1
     30  0997					      REPEND
     31  099a		       8d 58 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  099a				   .OFFSET    SET	.OFFSET + 1
     30  099a					      REPEND
     31  099d		       8d 59 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  099d				   .OFFSET    SET	.OFFSET + 1
     30  099d					      REPEND
     31  09a0		       8d 5a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09a0				   .OFFSET    SET	.OFFSET + 1
     30  09a0					      REPEND
     31  09a3		       8d 5b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09a3				   .OFFSET    SET	.OFFSET + 1
     30  09a3					      REPEND
     31  09a6		       8d 5c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09a6				   .OFFSET    SET	.OFFSET + 1
     30  09a6					      REPEND
     31  09a9		       8d 5d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09a9				   .OFFSET    SET	.OFFSET + 1
     30  09a9					      REPEND
     31  09ac		       8d 5e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09ac				   .OFFSET    SET	.OFFSET + 1
     30  09ac					      REPEND
     31  09af		       8d 5f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09af				   .OFFSET    SET	.OFFSET + 1
     30  09af					      REPEND
     31  09b2		       8d 60 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09b2				   .OFFSET    SET	.OFFSET + 1
     30  09b2					      REPEND
     31  09b5		       8d 61 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09b5				   .OFFSET    SET	.OFFSET + 1
     30  09b5					      REPEND
     31  09b8		       8d 62 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09b8				   .OFFSET    SET	.OFFSET + 1
     30  09b8					      REPEND
     31  09bb		       8d 63 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09bb				   .OFFSET    SET	.OFFSET + 1
     30  09bb					      REPEND
     31  09be		       8d 64 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09be				   .OFFSET    SET	.OFFSET + 1
     30  09be					      REPEND
     31  09c1		       8d 65 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09c1				   .OFFSET    SET	.OFFSET + 1
     30  09c1					      REPEND
     31  09c4		       8d 66 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09c4				   .OFFSET    SET	.OFFSET + 1
     30  09c4					      REPEND
     31  09c7		       8d 67 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09c7				   .OFFSET    SET	.OFFSET + 1
     30  09c7					      REPEND
     31  09ca		       8d 68 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09ca				   .OFFSET    SET	.OFFSET + 1
     30  09ca					      REPEND
     31  09cd		       8d 69 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09cd				   .OFFSET    SET	.OFFSET + 1
     30  09cd					      REPEND
     31  09d0		       8d 6a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09d0				   .OFFSET    SET	.OFFSET + 1
     30  09d0					      REPEND
     31  09d3		       8d 6b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09d3				   .OFFSET    SET	.OFFSET + 1
     30  09d3					      REPEND
     31  09d6		       8d 6c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09d6				   .OFFSET    SET	.OFFSET + 1
     30  09d6					      REPEND
     31  09d9		       8d 6d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09d9				   .OFFSET    SET	.OFFSET + 1
     30  09d9					      REPEND
     31  09dc		       8d 6e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09dc				   .OFFSET    SET	.OFFSET + 1
     30  09dc					      REPEND
     31  09df		       8d 6f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09df				   .OFFSET    SET	.OFFSET + 1
     30  09df					      REPEND
     31  09e2		       8d 70 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09e2				   .OFFSET    SET	.OFFSET + 1
     30  09e2					      REPEND
     31  09e5		       8d 71 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09e5				   .OFFSET    SET	.OFFSET + 1
     30  09e5					      REPEND
     31  09e8		       8d 72 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09e8				   .OFFSET    SET	.OFFSET + 1
     30  09e8					      REPEND
     31  09eb		       8d 73 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09eb				   .OFFSET    SET	.OFFSET + 1
     30  09eb					      REPEND
     31  09ee		       8d 74 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09ee				   .OFFSET    SET	.OFFSET + 1
     30  09ee					      REPEND
     31  09f1		       8d 75 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09f1				   .OFFSET    SET	.OFFSET + 1
     30  09f1					      REPEND
     31  09f4		       8d 76 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09f4				   .OFFSET    SET	.OFFSET + 1
     30  09f4					      REPEND
     31  09f7		       8d 77 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09f7				   .OFFSET    SET	.OFFSET + 1
     30  09f7					      REPEND
     31  09fa		       8d 78 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09fa				   .OFFSET    SET	.OFFSET + 1
     30  09fa					      REPEND
     31  09fd		       8d 79 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  09fd				   .OFFSET    SET	.OFFSET + 1
     30  09fd					      REPEND
     31  0a00		       8d 7a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a00				   .OFFSET    SET	.OFFSET + 1
     30  0a00					      REPEND
     31  0a03		       8d 7b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a03				   .OFFSET    SET	.OFFSET + 1
     30  0a03					      REPEND
     31  0a06		       8d 7c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a06				   .OFFSET    SET	.OFFSET + 1
     30  0a06					      REPEND
     31  0a09		       8d 7d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a09				   .OFFSET    SET	.OFFSET + 1
     30  0a09					      REPEND
     31  0a0c		       8d 7e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a0c				   .OFFSET    SET	.OFFSET + 1
     30  0a0c					      REPEND
     31  0a0f		       8d 7f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a0f				   .OFFSET    SET	.OFFSET + 1
     30  0a0f					      REPEND
     31  0a12		       8d 80 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a12				   .OFFSET    SET	.OFFSET + 1
     30  0a12					      REPEND
     31  0a15		       8d 81 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a15				   .OFFSET    SET	.OFFSET + 1
     30  0a15					      REPEND
     31  0a18		       8d 82 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a18				   .OFFSET    SET	.OFFSET + 1
     30  0a18					      REPEND
     31  0a1b		       8d 83 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a1b				   .OFFSET    SET	.OFFSET + 1
     30  0a1b					      REPEND
     31  0a1e		       8d 84 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a1e				   .OFFSET    SET	.OFFSET + 1
     30  0a1e					      REPEND
     31  0a21		       8d 85 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a21				   .OFFSET    SET	.OFFSET + 1
     30  0a21					      REPEND
     31  0a24		       8d 86 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a24				   .OFFSET    SET	.OFFSET + 1
     30  0a24					      REPEND
     31  0a27		       8d 87 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a27				   .OFFSET    SET	.OFFSET + 1
     30  0a27					      REPEND
     31  0a2a		       8d 88 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a2a				   .OFFSET    SET	.OFFSET + 1
     30  0a2a					      REPEND
     31  0a2d		       8d 89 f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a2d				   .OFFSET    SET	.OFFSET + 1
     30  0a2d					      REPEND
     31  0a30		       8d 8a f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a30				   .OFFSET    SET	.OFFSET + 1
     30  0a30					      REPEND
     31  0a33		       8d 8b f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a33				   .OFFSET    SET	.OFFSET + 1
     30  0a33					      REPEND
     31  0a36		       8d 8c f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a36				   .OFFSET    SET	.OFFSET + 1
     30  0a36					      REPEND
     31  0a39		       8d 8d f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a39				   .OFFSET    SET	.OFFSET + 1
     30  0a39					      REPEND
     31  0a3c		       8d 8e f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a3c				   .OFFSET    SET	.OFFSET + 1
     30  0a3c					      REPEND
     31  0a3f		       8d 8f f4 	      sta	ChessBitmap+RAM_WRITE+.OFFSET
     32  0a3f				   .OFFSET    SET	.OFFSET + 1
     33  0a42					      REPEND
     34  0a42
     35  0a42		       60		      rts
     36  0a43
     37  0a43							;---------------------------------------------------------------------------------------------------
     38  0a43
      0  0a43					      DEFINE_SUBROUTINE	CopyPieceToRowBitmap
      1  0a43		       00 01	   BANK_CopyPieceToRowBitmap =	_CURRENT_BANK
      2  0a43					      SUBROUTINE
      3  0a43				   CopyPieceToRowBitmap
     40  0a43
     41  0a43		       b0 0f		      bcs	.rightSide
     42  0a45
     43  0a45		       a0 47		      ldy	#71
     44  0a47		       b9 90 00    .copyPiece lda	__pieceShapeBuffer,y
     45  0a4a		       19 00 f0 	      ora	ChessBitmap,y
     46  0a4d		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
     47  0a50		       88		      dey
     48  0a51		       10 f4		      bpl	.copyPiece
     49  0a53
     50  0a53		       60		      rts
     51  0a54
     52  0a54				   .rightSide
     53  0a54
     54  0a54		       a0 47		      ldy	#71
     55  0a56		       b9 90 00    .copyPieceR lda	__pieceShapeBuffer,y
     56  0a59		       59 48 f0 	      eor	ChessBitmap+72,y
     57  0a5c		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
     58  0a5f		       88		      dey
     59  0a60		       10 f4		      bpl	.copyPieceR
     60  0a62
     61  0a62		       60		      rts
     62  0a63
     63  0a63							;---------------------------------------------------------------------------------------------------
     64  0a63
      0  0a63					      DEFINE_SUBROUTINE	DrawTheChessScreen
      1  0a63		       00 01	   BANK_DrawTheChessScreen =	_CURRENT_BANK
      2  0a63					      SUBROUTINE
      3  0a63				   DrawTheChessScreen
     66  0a63
     67  0a63		       20 67 f2 	      jsr	DrawRow	; draws all 8 rows with nifty bankswitching
     68  0a66		       60		      rts
     69  0a67
     70  0a67							;---------------------------------------------------------------------------------------------------
     71  0a67
      0  0a67					      DEFINE_SUBROUTINE	DrawRow
      1  0a67		       00 01	   BANK_DrawRow =	_CURRENT_BANK
      2  0a67					      SUBROUTINE
      3  0a67				   DrawRow
     73  0a67
     74  0a67							; x = row # (and bank#)
     75  0a67
     76  0a67		       a0 00	   .startLine ldy	#0	; 2
     77  0a69
     78  0a69		       85 42	   .drawLine  sta	WSYNC	; 3 @0
     79  0a6b
     80  0a6b		       b9 9b f2 	      lda	.LineColour,y	; 5
     81  0a6e		       85 48		      sta	COLUPF	; 3 @8
     82  0a70
     83  0a70		       b9 00 f0 	      lda	ChessBitmap0,y	; 5
     84  0a73		       85 4d		      sta	PF0	; 3
     85  0a75		       b9 18 f0 	      lda	ChessBitmap1,y	; 5
     86  0a78		       85 4e		      sta	PF1	; 3
     87  0a7a		       b9 30 f0 	      lda	ChessBitmap2,y	; 5
     88  0a7d		       85 4f		      sta	PF2	; 3 @32
     89  0a7f
      0  0a7f					      SLEEP	6	; 6 @30
      1  0a7f				   .CYCLES    SET	6
      2  0a7f
      3  0a7f				  -	      IF	.CYCLES < 2
      4  0a7f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a7f				  -	      ERR
      6  0a7f					      ENDIF
      7  0a7f
      8  0a7f				  -	      IF	.CYCLES & 1
      9  0a7f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a7f				  -	      nop	0
     11  0a7f				  -	      ELSE
     12  0a7f				  -	      bit	VSYNC
     13  0a7f				  -	      ENDIF
     14  0a7f				  -.CYCLES    SET	.CYCLES - 3
     15  0a7f					      ENDIF
     16  0a7f
     17  0a7f					      REPEAT	.CYCLES / 2
     18  0a7f		       ea		      nop
     17  0a7f					      REPEND
     18  0a80		       ea		      nop
     17  0a80					      REPEND
     18  0a81		       ea		      nop
     19  0a82					      REPEND
     91  0a82
     92  0a82		       b9 48 f0 	      lda	ChessBitmap3,y	; 5
     93  0a85		       85 4d		      sta	PF0	; 3 @38
     94  0a87		       b9 60 f0 	      lda	ChessBitmap4,y	; 5
     95  0a8a		       85 4e		      sta	PF1	; 3 @46
     96  0a8c		       b9 78 f0 	      lda	ChessBitmap5,y	; 5
     97  0a8f		       85 4f		      sta	PF2	; 3 @52
     98  0a91
     99  0a91		       c8		      iny		; 2
    100  0a92		       c0 18		      cpy	#24
    101  0a94		       90 d3		      bcc	.drawLine	; 3(2) @57 (taken)
    102  0a96
    103  0a96							; @56
    104  0a96
    105  0a96							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    106  0a96							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    107  0a96				   SELFMOD_RTS_ON_LAST_ROW
    108  0a96		       e8		      inx		; 2
    109  0a97
    110  0a97		       86 3e		      stx	SET_BANK_RAM	; 3 @61     BANK switch to next row
    111  0a99		       d0 cc		      bne	.startLine	; 3(2) @64 (taken)
    112  0a9b
    113  0a9b				   .LineColour
    114  0a9b							; The ICC triplet colour definitions for a single row of the chessboard
    115  0a9b					      REPEAT	8
    116  0a9b		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0a9b					      REPEND
    116  0a9e		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0a9e					      REPEND
    116  0aa1		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0aa1					      REPEND
    116  0aa4		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0aa4					      REPEND
    116  0aa7		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0aa7					      REPEND
    116  0aaa		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0aaa					      REPEND
    116  0aad		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    115  0aad					      REPEND
    116  0ab0		       44 2c a6 	      .byte.b	$44, $2c, $a6	;$4A, $1A, $98
    117  0ab3					      REPEND
    118  0ab3
    119  0ab3					      MAC	test
    120  0ab3				   V	      SET	"L"+{1}
    121  0ab3				   V2	      SET	"LAB" + V
    122  0ab3				   V2$
    123  0ab3					      ENDM
    124  0ab3
    125  0ab3				   UNQ	      SET	0
      0  0ab3					      TEST	UNQ
      1  0ab3				   V	      SET	"L"+UNQ
      2  0ab3				   V2	      SET	"LAB" + V
      3  0ab3				   V2$
    127  0ab3		       01		      .byte.b	1
    128  0ab3				   UNQ	      SET	UNQ + 1
      0  0ab4					      TEST	UNQ
      1  0ab4				   V	      SET	"L"+UNQ
      2  0ab4				   V2	      SET	"LAB" + V
      3  0ab4				   V2$
    130  0ab4
    131  0ab4
    132  0ab4							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_INITBANK.asm LEVEL 2 PASS 2
      0  0ab4					      include	"BANK_INITBANK.asm"	; MUST be after banks that include levels -- otherwise MAX_LEVELBANK is not calculated properly
      1  0ab4							; Chess
      2  0ab4							; Atari 2600 Chess display system
      3  0ab4							; Copyright (c) 2019-2020 Andrew Davie
      4  0ab4							; andrew@taswegian.com
      5  0ab4
      0  0ab4					      NEWBANK	INITBANK
      1  1027 ????				      SEG	INITBANK
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   INITBANK   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	INITBANK
      7  1000
      8  1000
      9  1000							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
     10  1000							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
     11  1000		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
     12  1010		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
     13  1020
     14  1020				   JoyDirY
     15  1020		       00 00		      .byte.b	0,0	;,1,-1,0
     16  1022				   JoyDirX
     17  1022		       01 ff 00 00*	      .byte.b	1,-1,0,0,0
     18  1027
     19  1027							;Data Bit  Direction Player
     20  1027							;		 D7	   right	  P0  D4
     21  1027							;		 D6	   left      P0  D3
     22  1027							;		 D5	   down      P0  D2
     23  1027							;		 D4	   up	     P0  D1
     24  1027							;     A "0" in a data bit indicates the joystick has been moved
     25  1027							;     to close that switch.  All "1's" in a player's nibble
     26  1027							;     indicates that joystick is not moving.
     27  1027
     28  1027							;0  0000 x
     29  1027							;1  0001 x
     30  1027							;2  0010 x
     31  1027							;3  0011 x
     32  1027							;4  0100 x
     33  1027							;5  0101 right down
     34  1027							;6  0110 right up
     35  1027							;7  0111 right
     36  1027							;8  1000 x
     37  1027							;9  1001 left down
     38  1027							;10  1010 left up
     39  1027							;11  1011 left
     40  1027							;12  1100 x
     41  1027							;13  1101 down
     42  1027							;14  1110 up
     43  1027							;15  1111 none
     44  1027
     45  1027
     46  1027							;------------------------------------------------------------------------------
     47  1027
     48  1027							;------------------------------------------------------------------------------
     49  1027
     50  1027
      0  1027					      CHECK_BANK_SIZE	"INITBANK"
      1  1027		       00 27	   .TEMP      =	* - BANK_START
 INITBANK (2K) SIZE =  $27 , FREE= $7d9
      2  1027					      ECHO	"INITBANK", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1027				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1027				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1027				  -	      ERR
      6  1027					      endif
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  1027					      include	"BANK_CHESS_INCLUDES.asm"
      1  1027							; Chess
      2  1027							; Atari 2600 Chess display system
      3  1027							; Copyright (c) 2019-2020 Andrew Davie
      4  1027							; andrew@taswegian.com
      5  1027
      6  1027
      7  1027							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  1027							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  1027							; a single gif of the format..
     10  1027							; a row of white pieces on black squares
     11  1027							; a row of white pieces on white squares
     12  1027							; a row of black pieces on black squares
     13  1027							; a row of black pieces on white squares
     14  1027
     15  1027							; each row has the pieces ordered thus:
     16  1027							; a blank, then pawn, knight, bishop, rook, queen, king
     17  1027							; each piece is 5 pixels wide x 8 pixels deep
     18  1027							; each pixel is from an 8-colour palette.
     19  1027							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  1027							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  1027							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  1027							; bit "b" becomes the second ICC pixel line (2)
     23  1027							; bit "c" becomes the third ICC pixel line (3)
     24  1027							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  1027							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  1027							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  1027							; These 4 shifted positions are stored consecutively in the shape definition
     28  1027
     29  1027							; Example...
     30  1027							;DEFINE_SUBROUTINE WHITE_BISHOP_on_BLACK_SQUARE_0
     31  1027							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  1027							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  1027							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  1027
     35  1027							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  1027							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  1027							; actually have any data in PF1 or PF2.
     38  1027
     39  1027
     40  1027
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  1027					      include	"piece_graphics.asm"
      1  1027							; Import the graphics definitions generated by ConvertChessPieces.py
      0  1027					      NEWBANK	PIECES_0
      1  1fd8 ????				      SEG	PIECES_0
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_0   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_0
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1800		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1800					      SUBROUTINE
      3  1800				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1800		       00 00 f0 00*	      .byte.b	$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0	;PF0
      4  1818		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1848		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1848					      SUBROUTINE
      3  1848				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       00 00 7c 00*	      .byte.b	$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1890		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1890					      SUBROUTINE
      3  1890				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03	;PF1
      5  18c0		       00 00 07 00*	      .byte.b	$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1900		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1900					      SUBROUTINE
      3  1900				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       00 00 f8 00*	      .byte.b	$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1948		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1948					      SUBROUTINE
      3  1948				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1948		       00 00 f0 00*	      .byte.b	$00,$00,$f0,$00,$40,$f0,$40,$40,$f0,$00,$e0,$f0,$40,$40,$f0,$40,$40,$f0,$40,$e0,$f0,$e0,$00,$f0	;PF0
      4  1960		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1990		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1990					      SUBROUTINE
      3  1990				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 7c 00*	      .byte.b	$00,$00,$7c,$00,$10,$7c,$10,$10,$7c,$00,$38,$7c,$10,$10,$7c,$10,$10,$7c,$10,$38,$7c,$38,$00,$7c	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1a00		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1a00					      SUBROUTINE
      3  1a00				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$01,$03,$00,$00,$03,$00,$00,$03,$00,$01,$03,$01,$00,$03	;PF1
      5  1a30		       00 00 07 00*	      .byte.b	$00,$00,$07,$00,$01,$07,$01,$01,$07,$00,$03,$07,$01,$01,$07,$01,$01,$07,$01,$03,$07,$03,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1a48		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1a48					      SUBROUTINE
      3  1a48				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 f8 00*	      .byte.b	$00,$00,$f8,$00,$20,$f8,$20,$20,$f8,$00,$70,$f8,$20,$20,$f8,$20,$20,$f8,$20,$70,$f8,$70,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1a90		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1a90					      SUBROUTINE
      3  1a90				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1a90		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$a0,$b0,$f0,$f0,$f0,$f0,$f0,$c0,$f0,$e0,$e0,$f0,$f0,$70,$f0,$f0,$f0,$f0	;PF0
      4  1aa8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$80,$80	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1b00		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1b00					      SUBROUTINE
      3  1b00				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       00 00 7c 14*	      .byte.b	$00,$00,$7c,$14,$14,$7c,$2c,$68,$7c,$7c,$78,$7c,$7c,$18,$7c,$3c,$38,$7c,$78,$70,$7c,$78,$7c,$7c	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1b48		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1b48					      SUBROUTINE
      3  1b48				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$03,$03,$03,$03,$03,$03,$00,$03,$01,$01,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  1b78		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$07,$06,$02,$07,$07,$03,$07,$07,$03,$07,$07,$03,$07,$03,$01,$07,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1b90		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1b90					      SUBROUTINE
      3  1b90				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       00 00 f8 a0*	      .byte.b	$00,$00,$f8,$a0,$a0,$f8,$d0,$58,$f8,$f8,$78,$f8,$f8,$60,$f8,$f0,$70,$f8,$78,$38,$f8,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1c00		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1c00					      SUBROUTINE
      3  1c00				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1c00		       00 40 f0 40*	      .byte.b	$00,$40,$f0,$40,$00,$f0,$e0,$e0,$f0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$f0,$f0,$f0,$f0	;PF0
      4  1c18		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$80,$80	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1c48		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1c48					      SUBROUTINE
      3  1c48				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       00 10 7c 10*	      .byte.b	$00,$10,$7c,$10,$00,$7c,$38,$38,$7c,$5c,$58,$5c,$6c,$68,$6c,$7c,$78,$7c,$38,$30,$7c,$78,$7c,$7c	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1c90		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1c90					      SUBROUTINE
      3  1c90				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$03,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$01,$03,$03,$03,$03	;PF1
      5  1cc0		       00 01 07 01*	      .byte.b	$00,$01,$07,$01,$00,$07,$03,$03,$07,$07,$03,$07,$06,$02,$06,$07,$03,$07,$03,$01,$07,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1d00		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1d00					      SUBROUTINE
      3  1d00				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       00 20 f8 20*	      .byte.b	$00,$20,$f8,$20,$00,$f8,$70,$70,$f8,$e8,$68,$e8,$d8,$58,$d8,$f8,$78,$f8,$70,$30,$f8,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1d48		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1d48					      SUBROUTINE
      3  1d48				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1d48		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$00,$f0,$50,$f0,$f0,$f0,$f0,$f0,$e0,$60,$f0,$e0,$60,$f0,$e0,$60,$f0,$f0,$f0,$f0	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$80	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1d90		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1d90					      SUBROUTINE
      3  1d90				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$00,$7c,$54,$78,$7c,$7c,$78,$7c,$3c,$30,$7c,$38,$30,$7c,$38,$30,$7c,$78,$7c,$7c	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1e00		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1e00					      SUBROUTINE
      3  1e00				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$00,$03,$02,$03,$03,$03,$03,$03,$01,$01,$03,$01,$01,$03,$01,$01,$03,$03,$03,$03	;PF1
      5  1e30		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$00,$07,$05,$03,$07,$07,$03,$07,$07,$01,$07,$03,$01,$07,$03,$01,$07,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1e48		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1e48					      SUBROUTINE
      3  1e48				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$00,$f8,$a8,$78,$f8,$f8,$78,$f8,$f0,$30,$f8,$70,$30,$f8,$70,$30,$f8,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1e90		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1e90					      SUBROUTINE
      3  1e90				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1e90		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$50,$f0,$00,$00,$f0,$50,$50,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$e0,$40,$f0,$e0,$e0,$f0	;PF0
      4  1ea8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1f00		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1f00					      SUBROUTINE
      3  1f00				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$54,$7c,$00,$00,$7c,$54,$50,$7c,$7c,$78,$7c,$7c,$78,$7c,$38,$10,$7c,$38,$38,$7c	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1f48		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1f48					      SUBROUTINE
      3  1f48				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$02,$03,$00,$00,$03,$02,$02,$03,$03,$03,$03,$03,$03,$03,$01,$00,$03,$01,$01,$03	;PF1
      5  1f78		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$07,$00,$00,$07,$05,$01,$07,$07,$03,$07,$07,$03,$07,$03,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1f90		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1f90					      SUBROUTINE
      3  1f90				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$a8,$f8,$00,$00,$f8,$a8,$28,$f8,$f8,$78,$f8,$f8,$78,$f8,$70,$20,$f8,$70,$70,$f8	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_1
      1  27d8 ????				      SEG	PIECES_1
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_1   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_0
      1  2000		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2000					      SUBROUTINE
      3  2000				   WHITE_KING_on_WHITE_SQUARE_0
      3  2000		       00 40 f0 e0*	      .byte.b	$00,$40,$f0,$e0,$e0,$f0,$40,$50,$b0,$f0,$50,$50,$50,$50,$50,$50,$f0,$f0,$f0,$60,$f0,$e0,$e0,$f0	;PF0
      4  2018		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_1
      1  2048		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2048					      SUBROUTINE
      3  2048				   WHITE_KING_on_WHITE_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       00 10 7c 38*	      .byte.b	$00,$10,$7c,$38,$38,$7c,$10,$54,$6c,$7c,$50,$54,$54,$50,$54,$54,$78,$7c,$7c,$30,$7c,$38,$38,$7c	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_2
      1  2090		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2090					      SUBROUTINE
      3  2090				   WHITE_KING_on_WHITE_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       00 00 03 01*	      .byte.b	$00,$00,$03,$01,$01,$03,$00,$02,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$03,$01,$03,$01,$01,$03	;PF1
      5  20c0		       00 01 07 03*	      .byte.b	$00,$01,$07,$03,$03,$07,$01,$05,$06,$07,$01,$05,$05,$01,$05,$05,$03,$07,$07,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_3
      1  2100		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2100					      SUBROUTINE
      3  2100				   WHITE_KING_on_WHITE_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       00 20 f8 70*	      .byte.b	$00,$20,$f8,$70,$70,$f8,$20,$a8,$d8,$f8,$28,$a8,$a8,$28,$a8,$a8,$78,$f8,$f8,$30,$f8,$70,$70,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_0
      1  2148		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2148					      SUBROUTINE
      3  2148				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  2148		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_1
      1  2190		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2190					      SUBROUTINE
      3  2190				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_2
      1  2200		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2200					      SUBROUTINE
      3  2200				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2230		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_3
      1  2248		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2248					      SUBROUTINE
      3  2248				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_0
      1  2290		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2290					      SUBROUTINE
      3  2290				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$40,$40,$40,$40,$40,$00,$e0,$e0,$40,$40,$40,$40,$40,$40,$40,$e0,$e0,$e0,$00,$00	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_1
      1  2300		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2300					      SUBROUTINE
      3  2300				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$10,$10,$10,$10,$10,$00,$38,$38,$10,$10,$10,$10,$10,$10,$10,$38,$38,$38,$00,$00	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_2
      1  2348		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2348					      SUBROUTINE
      3  2348				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$01,$01,$01,$01,$01,$00,$03,$03,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_3
      1  2390		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2390					      SUBROUTINE
      3  2390				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$20,$20,$20,$20,$20,$00,$70,$70,$20,$20,$20,$20,$20,$20,$20,$70,$70,$70,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  2400		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2400					      SUBROUTINE
      3  2400				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  2400		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$a0,$b0,$f0,$f0,$f0,$f0,$f0,$c0,$e0,$e0,$e0,$e0,$f0,$70,$f0,$f0,$f0,$f0	;PF0
      4  2418		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$80,$80	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  2448		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2448					      SUBROUTINE
      3  2448				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       00 00 00 14*	      .byte.b	$00,$00,$00,$14,$14,$14,$2c,$68,$7c,$7c,$78,$7c,$7c,$18,$3c,$3c,$38,$38,$78,$70,$78,$78,$7c,$7c	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  2490		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2490					      SUBROUTINE
      3  2490				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$03,$03,$03,$03,$03,$03,$00,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03	;PF1
      5  24c0		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$05,$06,$02,$07,$07,$03,$07,$07,$03,$07,$07,$03,$03,$03,$01,$03,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  2500		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2500					      SUBROUTINE
      3  2500				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       00 00 00 a0*	      .byte.b	$00,$00,$00,$a0,$a0,$a0,$d0,$58,$f8,$f8,$78,$f8,$f8,$60,$f0,$f0,$70,$70,$78,$38,$78,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  2548		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2548					      SUBROUTINE
      3  2548				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  2548		       00 40 40 40*	      .byte.b	$00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0	;PF0
      4  2560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  2590		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2590					      SUBROUTINE
      3  2590				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       00 10 10 10*	      .byte.b	$00,$10,$10,$10,$00,$00,$38,$38,$38,$5c,$58,$5c,$6c,$68,$6c,$7c,$78,$78,$38,$30,$38,$78,$7c,$78	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  2600		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2600					      SUBROUTINE
      3  2600				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$01,$01,$03,$03,$03	;PF1
      5  2630		       00 01 01 01*	      .byte.b	$00,$01,$01,$01,$00,$00,$03,$03,$03,$07,$03,$07,$06,$02,$06,$07,$03,$03,$03,$01,$03,$03,$07,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  2648		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2648					      SUBROUTINE
      3  2648				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       00 20 20 20*	      .byte.b	$00,$20,$20,$20,$00,$00,$70,$70,$70,$e8,$68,$e8,$d8,$58,$d8,$f8,$78,$78,$70,$30,$70,$78,$f8,$78	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_0
      1  2690		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2690					      SUBROUTINE
      3  2690				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  2690		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$00,$50,$50,$f0,$f0,$f0,$f0,$f0,$e0,$60,$e0,$e0,$60,$e0,$e0,$60,$e0,$f0,$f0,$f0	;PF0
      4  26a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_1
      1  2700		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2700					      SUBROUTINE
      3  2700				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$00,$54,$54,$78,$7c,$7c,$78,$7c,$3c,$30,$38,$38,$30,$38,$38,$30,$38,$78,$7c,$7c	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_2
      1  2748		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2748					      SUBROUTINE
      3  2748				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$00,$02,$02,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03	;PF1
      5  2778		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$00,$05,$05,$03,$07,$07,$03,$07,$07,$01,$03,$03,$01,$03,$03,$01,$03,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_3
      1  2790		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2790					      SUBROUTINE
      3  2790				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$00,$a8,$a8,$78,$f8,$f8,$78,$f8,$f0,$30,$70,$70,$30,$70,$70,$30,$70,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_2
      1  2fd8 ????				      SEG	PIECES_2
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_2   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2800		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2800					      SUBROUTINE
      3  2800				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2800		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$50,$50,$00,$00,$00,$50,$50,$50,$f0,$f0,$f0,$f0,$f0,$f0,$e0,$40,$e0,$e0,$e0,$e0	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2848		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2848					      SUBROUTINE
      3  2848				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$54,$54,$00,$00,$00,$54,$50,$54,$7c,$78,$7c,$7c,$78,$7c,$38,$10,$38,$38,$38,$38	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2890		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2890					      SUBROUTINE
      3  2890				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$02,$02,$00,$00,$00,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$00,$01,$01,$01,$01	;PF1
      5  28c0		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$05,$00,$00,$00,$05,$01,$05,$07,$03,$07,$07,$03,$07,$03,$01,$03,$03,$03,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2900		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2900					      SUBROUTINE
      3  2900				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$a8,$a8,$00,$00,$00,$a8,$28,$a8,$f8,$78,$f8,$f8,$78,$f8,$70,$20,$70,$70,$70,$70	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_0
      1  2948		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2948					      SUBROUTINE
      3  2948				   WHITE_KING_on_BLACK_SQUARE_0
      3  2948		       00 40 40 e0*	      .byte.b	$00,$40,$40,$e0,$e0,$e0,$40,$50,$b0,$f0,$50,$50,$50,$50,$50,$50,$f0,$f0,$f0,$60,$e0,$e0,$e0,$e0	;PF0
      4  2960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_1
      1  2990		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2990					      SUBROUTINE
      3  2990				   WHITE_KING_on_BLACK_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       00 10 10 38*	      .byte.b	$00,$10,$10,$38,$38,$38,$10,$54,$6c,$7c,$50,$54,$54,$50,$54,$54,$78,$7c,$7c,$30,$38,$38,$38,$38	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_2
      1  2a00		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2a00					      SUBROUTINE
      3  2a00				   WHITE_KING_on_BLACK_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$00,$02,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$03,$01,$01,$01,$01,$01	;PF1
      5  2a30		       00 01 01 03*	      .byte.b	$00,$01,$01,$03,$03,$03,$01,$05,$06,$07,$01,$05,$05,$01,$05,$05,$03,$07,$07,$01,$03,$03,$03,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_3
      1  2a48		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2a48					      SUBROUTINE
      3  2a48				   WHITE_KING_on_BLACK_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       00 20 20 70*	      .byte.b	$00,$20,$20,$70,$70,$70,$20,$a8,$d8,$f8,$28,$a8,$a8,$28,$a8,$a8,$78,$f8,$f8,$30,$70,$70,$70,$70	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2a90		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2a90					      SUBROUTINE
      3  2a90				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2a90		       f0 f0 f0 10*	      .byte.b	$f0,$f0,$f0,$10,$10,$f0,$10,$10,$f0,$10,$10,$f0,$10,$10,$f0,$10,$10,$f0,$10,$10,$f0,$f0,$f0,$f0	;PF0
      4  2aa8		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2b00		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2b00					      SUBROUTINE
      3  2b00				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       7c 7c 7c 44*	      .byte.b	$7c,$7c,$7c,$44,$44,$7c,$44,$44,$7c,$44,$44,$7c,$44,$44,$7c,$44,$44,$7c,$44,$44,$7c,$7c,$7c,$7c	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2b48		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2b48					      SUBROUTINE
      3  2b48				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       03 03 03 02*	      .byte.b	$03,$03,$03,$02,$02,$03,$02,$02,$03,$02,$02,$03,$02,$02,$03,$02,$02,$03,$02,$02,$03,$03,$03,$03	;PF1
      5  2b78		       07 07 07 04*	      .byte.b	$07,$07,$07,$04,$04,$07,$04,$04,$07,$04,$04,$07,$04,$04,$07,$04,$04,$07,$04,$04,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2b90		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2b90					      SUBROUTINE
      3  2b90				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       f8 f8 f8 88*	      .byte.b	$f8,$f8,$f8,$88,$88,$f8,$88,$88,$f8,$88,$88,$f8,$88,$88,$f8,$88,$88,$f8,$88,$88,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2c00		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2c00					      SUBROUTINE
      3  2c00				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2c00		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$40,$00,$b0,$e0,$e0,$10,$40,$40,$b0,$40,$40,$b0,$e0,$e0,$10,$e0,$00,$f0	;PF0
      4  2c18		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2c48		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2c48					      SUBROUTINE
      3  2c48				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$10,$7c,$10,$00,$6c,$38,$38,$44,$10,$10,$6c,$10,$10,$6c,$38,$38,$44,$38,$00,$7c	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2c90		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2c90					      SUBROUTINE
      3  2c90				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$01,$01,$02,$00,$00,$03,$00,$00,$03,$01,$01,$02,$01,$00,$03	;PF1
      5  2cc0		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$01,$07,$01,$00,$06,$03,$03,$04,$01,$01,$06,$01,$01,$06,$03,$03,$04,$03,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2d00		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2d00					      SUBROUTINE
      3  2d00				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$20,$f8,$20,$00,$d8,$70,$70,$88,$20,$20,$d8,$20,$20,$d8,$70,$70,$88,$70,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2d48		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2d48					      SUBROUTINE
      3  2d48				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2d48		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$a0,$b0,$00,$f0,$f0,$00,$f0,$c0,$30,$e0,$e0,$10,$f0,$70,$00,$f0,$f0,$00	;PF0
      4  2d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$80,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2d90		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2d90					      SUBROUTINE
      3  2d90				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       00 00 7c 14*	      .byte.b	$00,$00,$7c,$14,$14,$78,$2c,$68,$00,$7c,$78,$00,$7c,$18,$60,$3c,$38,$44,$78,$70,$04,$78,$7c,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2e00		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2e00					      SUBROUTINE
      3  2e00				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$03,$00,$03,$03,$00,$03,$00,$03,$01,$01,$02,$03,$03,$00,$03,$03,$00	;PF1
      5  2e30		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$03,$06,$02,$00,$07,$03,$00,$07,$03,$00,$07,$03,$04,$03,$01,$04,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2e48		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2e48					      SUBROUTINE
      3  2e48				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       00 00 f8 a0*	      .byte.b	$00,$00,$f8,$a0,$a0,$78,$d0,$58,$00,$f8,$78,$00,$f8,$60,$18,$f0,$70,$88,$78,$38,$80,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2e90		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2e90					      SUBROUTINE
      3  2e90				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2e90		       00 40 f0 40*	      .byte.b	$00,$40,$f0,$40,$00,$f0,$e0,$e0,$10,$d0,$d0,$00,$b0,$b0,$00,$f0,$f0,$10,$e0,$60,$10,$f0,$f0,$00	;PF0
      4  2ea8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$80,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2f00		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2f00					      SUBROUTINE
      3  2f00				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       00 10 7c 10*	      .byte.b	$00,$10,$7c,$10,$00,$7c,$38,$38,$44,$5c,$58,$00,$6c,$68,$00,$7c,$78,$44,$38,$30,$44,$78,$7c,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2f48		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2f48					      SUBROUTINE
      3  2f48				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$02,$02,$02,$00,$03,$03,$00,$03,$03,$02,$01,$01,$02,$03,$03,$00	;PF1
      5  2f78		       00 01 07 01*	      .byte.b	$00,$01,$07,$01,$00,$07,$03,$03,$04,$07,$03,$00,$06,$02,$00,$07,$03,$04,$03,$01,$04,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2f90		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2f90					      SUBROUTINE
      3  2f90				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       00 20 f8 20*	      .byte.b	$00,$20,$f8,$20,$00,$f8,$70,$70,$88,$e8,$68,$00,$d8,$58,$00,$f8,$78,$88,$70,$30,$88,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_3
      1  37d8 ????				      SEG	PIECES_3
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_3   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_0
      1  3000		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  3000					      SUBROUTINE
      3  3000				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  3000		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$00,$a0,$50,$f0,$00,$f0,$f0,$00,$e0,$60,$10,$e0,$60,$10,$e0,$60,$10,$f0,$f0,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_1
      1  3048		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  3048					      SUBROUTINE
      3  3048				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$00,$28,$54,$78,$00,$7c,$78,$00,$3c,$30,$44,$38,$30,$44,$38,$30,$44,$78,$7c,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_2
      1  3090		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  3090					      SUBROUTINE
      3  3090				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$00,$01,$02,$03,$00,$03,$03,$00,$01,$01,$02,$01,$01,$02,$01,$01,$02,$03,$03,$00	;PF1
      5  30c0		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$00,$02,$05,$03,$00,$07,$03,$00,$07,$01,$04,$03,$01,$04,$03,$01,$04,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_3
      1  3100		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  3100					      SUBROUTINE
      3  3100				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$00,$50,$a8,$78,$00,$f8,$78,$00,$f0,$30,$88,$70,$30,$88,$70,$30,$88,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  3148		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  3148					      SUBROUTINE
      3  3148				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  3148		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$50,$a0,$00,$00,$f0,$50,$50,$a0,$f0,$f0,$00,$f0,$f0,$00,$e0,$40,$10,$e0,$e0,$10	;PF0
      4  3160		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  3190		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  3190					      SUBROUTINE
      3  3190				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$54,$28,$00,$00,$7c,$54,$50,$28,$7c,$78,$00,$7c,$78,$04,$38,$10,$44,$38,$38,$44	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  3200		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  3200					      SUBROUTINE
      3  3200				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$02,$01,$00,$00,$03,$02,$02,$01,$03,$03,$00,$03,$03,$00,$01,$00,$02,$01,$01,$02	;PF1
      5  3230		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$02,$00,$00,$07,$05,$01,$02,$07,$03,$00,$07,$03,$04,$03,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  3248		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  3248					      SUBROUTINE
      3  3248				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$a8,$50,$00,$00,$f8,$a8,$28,$50,$f8,$78,$00,$f8,$78,$80,$70,$20,$88,$70,$70,$88	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_0
      1  3290		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  3290					      SUBROUTINE
      3  3290				   BLACK_KING_on_WHITE_SQUARE_0
      3  3290		       40 40 b0 e0*	      .byte.b	$40,$40,$b0,$e0,$e0,$10,$40,$50,$a0,$f0,$50,$00,$50,$50,$00,$50,$f0,$00,$f0,$60,$10,$e0,$e0,$10	;PF0
      4  32a8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_1
      1  3300		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  3300					      SUBROUTINE
      3  3300				   BLACK_KING_on_WHITE_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       10 10 6c 38*	      .byte.b	$10,$10,$6c,$38,$38,$44,$10,$54,$28,$7c,$50,$00,$54,$50,$00,$54,$78,$00,$7c,$30,$44,$38,$38,$44	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_2
      1  3348		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  3348					      SUBROUTINE
      3  3348				   BLACK_KING_on_WHITE_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       00 00 03 01*	      .byte.b	$00,$00,$03,$01,$01,$02,$00,$02,$01,$03,$02,$00,$02,$02,$00,$02,$03,$00,$03,$01,$02,$01,$01,$02	;PF1
      5  3378		       01 01 06 03*	      .byte.b	$01,$01,$06,$03,$03,$04,$01,$05,$02,$07,$01,$00,$05,$01,$00,$05,$03,$00,$07,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_3
      1  3390		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  3390					      SUBROUTINE
      3  3390				   BLACK_KING_on_WHITE_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       20 20 d8 70*	      .byte.b	$20,$20,$d8,$70,$70,$88,$20,$a8,$50,$f8,$28,$00,$a8,$28,$00,$a8,$78,$00,$f8,$30,$88,$70,$70,$88	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_0
      1  3400		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3400					      SUBROUTINE
      3  3400				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  3400		       f0 f0 f0 10*	      .byte.b	$f0,$f0,$f0,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$f0,$f0,$f0	;PF0
      4  3418		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_1
      1  3448		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3448					      SUBROUTINE
      3  3448				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       7c 7c 7c 44*	      .byte.b	$7c,$7c,$7c,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$7c,$7c,$7c	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_2
      1  3490		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3490					      SUBROUTINE
      3  3490				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       03 03 03 02*	      .byte.b	$03,$03,$03,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03	;PF1
      5  34c0		       07 07 07 04*	      .byte.b	$07,$07,$07,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_3
      1  3500		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3500					      SUBROUTINE
      3  3500				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       f8 f8 f8 88*	      .byte.b	$f8,$f8,$f8,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_0
      1  3548		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3548					      SUBROUTINE
      3  3548				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$40,$00,$00,$e0,$e0,$00,$40,$40,$00,$40,$40,$00,$e0,$e0,$00,$e0,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_1
      1  3590		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3590					      SUBROUTINE
      3  3590				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$10,$10,$00,$00,$38,$38,$00,$10,$10,$00,$10,$10,$00,$38,$38,$00,$38,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_2
      1  3600		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3600					      SUBROUTINE
      3  3600				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$01,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$01,$00,$00,$03,$03,$00,$01,$01,$00,$01,$01,$00,$03,$03,$00,$03,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_3
      1  3648		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3648					      SUBROUTINE
      3  3648				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$20,$20,$00,$00,$70,$70,$00,$20,$20,$00,$20,$20,$00,$70,$70,$00,$70,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  3690		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3690					      SUBROUTINE
      3  3690				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  3690		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$a0,$b0,$00,$f0,$f0,$00,$f0,$c0,$00,$e0,$e0,$00,$f0,$70,$00,$f0,$f0,$00	;PF0
      4  36a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  3700		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3700					      SUBROUTINE
      3  3700				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 00 14*	      .byte.b	$00,$00,$00,$14,$14,$10,$2c,$68,$00,$7c,$78,$00,$7c,$18,$00,$3c,$38,$00,$78,$70,$00,$78,$7c,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  3748		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3748					      SUBROUTINE
      3  3748				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$03,$00,$03,$03,$00,$03,$00,$00,$01,$01,$00,$03,$03,$00,$03,$03,$00	;PF1
      5  3778		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$01,$06,$02,$00,$07,$03,$00,$07,$03,$00,$07,$03,$00,$03,$01,$00,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  3790		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3790					      SUBROUTINE
      3  3790				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 00 a0*	      .byte.b	$00,$00,$00,$a0,$a0,$20,$d0,$58,$00,$f8,$78,$00,$f8,$60,$00,$f0,$70,$00,$78,$38,$00,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
      0  37d8					      NEWBANK	PIECES_4
      1  3d48 ????				      SEG	PIECES_4
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_4   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3800		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3800					      SUBROUTINE
      3  3800				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3800		       00 40 40 40*	      .byte.b	$00,$40,$40,$40,$00,$00,$e0,$e0,$00,$d0,$d0,$00,$b0,$b0,$00,$f0,$f0,$00,$e0,$60,$00,$f0,$f0,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3848		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3848					      SUBROUTINE
      3  3848				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 10 10 10*	      .byte.b	$00,$10,$10,$10,$00,$00,$38,$38,$00,$5c,$58,$00,$6c,$68,$00,$7c,$78,$00,$38,$30,$00,$78,$7c,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3890		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3890					      SUBROUTINE
      3  3890				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$00,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$01,$00,$03,$03,$00	;PF1
      5  38c0		       00 01 01 01*	      .byte.b	$00,$01,$01,$01,$00,$00,$03,$03,$00,$07,$03,$00,$06,$02,$00,$07,$03,$00,$03,$01,$00,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3900		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3900					      SUBROUTINE
      3  3900				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 20 20 20*	      .byte.b	$00,$20,$20,$20,$00,$00,$70,$70,$00,$e8,$68,$00,$d8,$58,$00,$f8,$78,$00,$70,$30,$00,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3948		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3948					      SUBROUTINE
      3  3948				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3948		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$00,$00,$50,$f0,$00,$f0,$f0,$00,$e0,$60,$00,$e0,$60,$00,$e0,$60,$00,$f0,$f0,$00	;PF0
      4  3960		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3990		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3990					      SUBROUTINE
      3  3990				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$00,$00,$54,$78,$00,$7c,$78,$00,$3c,$30,$00,$38,$30,$00,$38,$30,$00,$78,$7c,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3a00		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3a00					      SUBROUTINE
      3  3a00				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$00,$00,$02,$03,$00,$03,$03,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$03,$03,$00	;PF1
      5  3a30		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$00,$00,$05,$03,$00,$07,$03,$00,$07,$01,$00,$03,$01,$00,$03,$01,$00,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3a48		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3a48					      SUBROUTINE
      3  3a48				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$00,$00,$a8,$78,$00,$f8,$78,$00,$f0,$30,$00,$70,$30,$00,$70,$30,$00,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3a90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3a90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3a90					      LIST	ON
      0  3a90					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3a90		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3a90					      SUBROUTINE
      3  3a90				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3a90		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$50,$00,$00,$00,$00,$50,$50,$00,$f0,$f0,$00,$f0,$f0,$00,$e0,$40,$00,$e0,$e0,$00	;PF0
      4  3aa8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$00,$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ad8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  3ad8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3b00					      LIST	ON
      0  3b00					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3b00		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3b00					      SUBROUTINE
      3  3b00				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b18		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$54,$00,$00,$00,$00,$54,$50,$00,$7c,$78,$00,$7c,$78,$00,$38,$10,$00,$38,$38,$00	;PF1
      5  3b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3b48					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3b48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3b48					      LIST	ON
      0  3b48					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3b48		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3b48					      SUBROUTINE
      3  3b48				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b60		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$02,$00,$00,$00,$00,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$00,$00,$01,$01,$00	;PF1
      5  3b78		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$00,$00,$00,$00,$05,$01,$00,$07,$03,$00,$07,$03,$00,$03,$01,$00,$03,$03,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3b90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3b90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3b90					      LIST	ON
      0  3b90					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3b90		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3b90					      SUBROUTINE
      3  3b90				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3bc0		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$a8,$00,$00,$00,$00,$a8,$28,$00,$f8,$78,$00,$f8,$78,$00,$70,$20,$00,$70,$70,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3bd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  3bd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3c00					      LIST	ON
      0  3c00					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_0
      1  3c00		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3c00					      SUBROUTINE
      3  3c00				   BLACK_KING_on_BLACK_SQUARE_0
      3  3c00		       40 40 00 e0*	      .byte.b	$40,$40,$00,$e0,$e0,$00,$40,$50,$a0,$f0,$50,$00,$50,$50,$00,$50,$f0,$00,$f0,$60,$00,$e0,$e0,$00	;PF0
      4  3c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00	;PF1
      5  3c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3c48					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3c48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3c48					      LIST	ON
      0  3c48					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_1
      1  3c48		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3c48					      SUBROUTINE
      3  3c48				   BLACK_KING_on_BLACK_SQUARE_1
      3  3c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c60		       10 10 00 38*	      .byte.b	$10,$10,$00,$38,$38,$00,$10,$54,$28,$7c,$50,$00,$54,$50,$00,$54,$78,$00,$7c,$30,$00,$38,$38,$00	;PF1
      5  3c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3c90					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3c90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3c90					      LIST	ON
      0  3c90					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_2
      1  3c90		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3c90					      SUBROUTINE
      3  3c90				   BLACK_KING_on_BLACK_SQUARE_2
      3  3c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ca8		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$02,$01,$03,$02,$00,$02,$02,$00,$02,$03,$00,$03,$01,$00,$01,$01,$00	;PF1
      5  3cc0		       01 01 00 03*	      .byte.b	$01,$01,$00,$03,$03,$00,$01,$05,$02,$07,$01,$00,$05,$01,$00,$05,$03,$00,$07,$01,$00,$03,$03,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3cd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  3cd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3d00					      LIST	ON
      0  3d00					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_3
      1  3d00		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3d00					      SUBROUTINE
      3  3d00				   BLACK_KING_on_BLACK_SQUARE_3
      3  3d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d30		       20 20 00 70*	      .byte.b	$20,$20,$00,$70,$70,$00,$20,$a8,$50,$f8,$28,$00,$a8,$28,$00,$a8,$78,$00,$f8,$30,$00,$70,$70,$00	;PF2
------- FILE piece_graphics.asm
      0  3d48					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  3d48		       05 48	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $548 , FREE= $2b8
      2  3d48					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3d48				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3d48				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3d48				  -	      ERR
      6  3d48					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3d48
      0  3d48					      NEWBANK	PIECE_VECTORS
      1  4150 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEFINE_SUBROUTINE	PIECE_VECTOR_LO
      1  4000		       00 08	   BANK_PIECE_VECTOR_LO =	_CURRENT_BANK
      2  4000					      SUBROUTINE
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     32  401d		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     33  401e		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     34  401f		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     35  4020		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     36  4021		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     37  4022		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     38  4023		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     39  4024		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     40  4025		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     41  4026		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     42  4027		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     43  4028		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     44  4029		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     45  402a		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     46  402b		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     47  402c		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     48  402d		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     49  402e		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     50  402f		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     51  4030		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     52  4031		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     53  4032		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     54  4033		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     55  4034		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     56  4035		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     57  4036		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     58  4037		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     59  4038		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     60  4039		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     61  403a		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     62  403b		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     63  403c		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     64  403d		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     65  403e		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     66  403f		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     67  4040		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     68  4041		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     69  4042		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     70  4043		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     71  4044		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     72  4045		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     73  4046		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     74  4047		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     75  4048		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     76  4049		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     77  404a		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     78  404b		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     79  404c		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     80  404d		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     81  404e		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     82  404f		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     83  4050		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     84  4051		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     85  4052		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     86  4053		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     87  4054		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
     88  4055		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
     89  4056		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
     90  4057		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
     91  4058		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
     92  4059		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
     93  405a		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
     94  405b		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
     95  405c		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
     96  405d		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
     97  405e		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
     98  405f		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
     99  4060		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    100  4061		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    101  4062		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    102  4063		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
      0  4070					      DEFINE_SUBROUTINE	PIECE_VECTOR_HI
      1  4070		       00 08	   BANK_PIECE_VECTOR_HI =	_CURRENT_BANK
      2  4070					      SUBROUTINE
      3  4070				   PIECE_VECTOR_HI
    116  4070		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    117  4071		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    118  4072		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    119  4073		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    120  4074		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    121  4075		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    122  4076		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    123  4077		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    124  4078		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    125  4079		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    126  407a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    127  407b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    128  407c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    129  407d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    130  407e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    131  407f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    132  4080		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    133  4081		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    134  4082		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    135  4083		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    136  4084		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    137  4085		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    138  4086		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    139  4087		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    140  4088		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    141  4089		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    142  408a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    143  408b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    144  408c		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    145  408d		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    146  408e		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    147  408f		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    148  4090		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    149  4091		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    150  4092		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    151  4093		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    152  4094		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    153  4095		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    154  4096		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    155  4097		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    156  4098		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    157  4099		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    158  409a		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    159  409b		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    160  409c		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    161  409d		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    162  409e		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    163  409f		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    164  40a0		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    165  40a1		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    166  40a2		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    167  40a3		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    168  40a4		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    169  40a5		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    170  40a6		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    171  40a7		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    172  40a8		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    173  40a9		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    174  40aa		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    175  40ab		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    176  40ac		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    177  40ad		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    178  40ae		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    179  40af		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    180  40b0		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    181  40b1		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    182  40b2		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    183  40b3		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    184  40b4		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    185  40b5		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    186  40b6		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    187  40b7		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    188  40b8		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    189  40b9		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    190  40ba		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    191  40bb		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    192  40bc		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    193  40bd		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    194  40be		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    195  40bf		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    196  40c0		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    197  40c1		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    198  40c2		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    199  40c3		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    200  40c4		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    201  40c5		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    202  40c6		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    203  40c7		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    204  40c8		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    205  40c9		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    206  40ca		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    207  40cb		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    208  40cc		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    209  40cd		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    210  40ce		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    211  40cf		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    212  40d0		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    213  40d1		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    214  40d2		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    215  40d3		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    216  40d4		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    217  40d5		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    218  40d6		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    219  40d7		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    224  40dc		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    225  40dd		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    226  40de		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    227  40df		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
      0  40e0					      DEFINE_SUBROUTINE	PIECE_VECTOR_BANK
      1  40e0		       00 08	   BANK_PIECE_VECTOR_BANK =	_CURRENT_BANK
      2  40e0					      SUBROUTINE
      3  40e0				   PIECE_VECTOR_BANK
    229  40e0		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    230  40e1		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    231  40e2		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    232  40e3		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    233  40e4		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    234  40e5		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    235  40e6		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    236  40e7		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    237  40e8		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    238  40e9		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    239  40ea		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    240  40eb		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    241  40ec		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    242  40ed		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    243  40ee		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    244  40ef		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    245  40f0		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    246  40f1		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    247  40f2		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    248  40f3		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    249  40f4		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    250  40f5		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    251  40f6		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    252  40f7		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    253  40f8		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    254  40f9		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    255  40fa		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    256  40fb		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    257  40fc		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    258  40fd		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    259  40fe		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    260  40ff		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    261  4100		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    262  4101		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    263  4102		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    264  4103		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    265  4104		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    266  4105		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    267  4106		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    268  4107		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    269  4108		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    270  4109		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    271  410a		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    272  410b		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    273  410c		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    274  410d		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    275  410e		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    276  410f		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    277  4110		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    278  4111		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    279  4112		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    280  4113		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    281  4114		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    282  4115		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    283  4116		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    284  4117		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    285  4118		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    286  4119		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    287  411a		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    288  411b		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    289  411c		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    290  411d		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    291  411e		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    292  411f		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    293  4120		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    294  4121		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    295  4122		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    296  4123		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    297  4124		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    298  4125		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    299  4126		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    300  4127		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    301  4128		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    302  4129		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    303  412a		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    304  412b		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    305  412c		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    306  412d		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    307  412e		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    308  412f		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    309  4130		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    310  4131		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    311  4132		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    312  4133		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    313  4134		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    314  4135		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    315  4136		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    316  4137		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    317  4138		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    318  4139		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    319  413a		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    320  413b		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    321  413c		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    322  413d		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    323  413e		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    324  413f		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    325  4140		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    326  4141		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    327  4142		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    328  4143		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    329  4144		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    330  4145		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    331  4146		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    332  4147		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    333  4148		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    334  4149		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    335  414a		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    336  414b		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    337  414c		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    338  414d		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    339  414e		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    340  414f		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    341  4150
    342  4150							; piece index equates...
    343  4150		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    344  4150		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    345  4150		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    346  4150		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    347  4150		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    348  4150		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    349  4150		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    350  4150		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    351  4150		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    352  4150		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    353  4150		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    354  4150		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    355  4150		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    356  4150		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    357  4150		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    358  4150		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    359  4150		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    360  4150		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    361  4150		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    362  4150		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    363  4150		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    364  4150		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    365  4150		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    366  4150		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    367  4150		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    368  4150		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    369  4150		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    370  4150		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    371  4150		       00 1c	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	28
    372  4150		       00 1d	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	29
    373  4150		       00 1e	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	30
    374  4150		       00 1f	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	31
    375  4150		       00 20	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	32
    376  4150		       00 21	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	33
    377  4150		       00 22	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	34
    378  4150		       00 23	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	35
    379  4150		       00 24	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	36
    380  4150		       00 25	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	37
    381  4150		       00 26	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	38
    382  4150		       00 27	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	39
    383  4150		       00 28	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	40
    384  4150		       00 29	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	41
    385  4150		       00 2a	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	42
    386  4150		       00 2b	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	43
    387  4150		       00 2c	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	44
    388  4150		       00 2d	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	45
    389  4150		       00 2e	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	46
    390  4150		       00 2f	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	47
    391  4150		       00 30	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	48
    392  4150		       00 31	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	49
    393  4150		       00 32	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	50
    394  4150		       00 33	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	51
    395  4150		       00 34	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	52
    396  4150		       00 35	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	53
    397  4150		       00 36	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	54
    398  4150		       00 37	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	55
    399  4150		       00 38	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	56
    400  4150		       00 39	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	57
    401  4150		       00 3a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	58
    402  4150		       00 3b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	59
    403  4150		       00 3c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	60
    404  4150		       00 3d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	61
    405  4150		       00 3e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	62
    406  4150		       00 3f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	63
    407  4150		       00 40	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	64
    408  4150		       00 41	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	65
    409  4150		       00 42	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	66
    410  4150		       00 43	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	67
    411  4150		       00 44	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	68
    412  4150		       00 45	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	69
    413  4150		       00 46	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	70
    414  4150		       00 47	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	71
    415  4150		       00 48	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	72
    416  4150		       00 49	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	73
    417  4150		       00 4a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	74
    418  4150		       00 4b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	75
    419  4150		       00 4c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	76
    420  4150		       00 4d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	77
    421  4150		       00 4e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	78
    422  4150		       00 4f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	79
    423  4150		       00 50	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	80
    424  4150		       00 51	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	81
    425  4150		       00 52	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	82
    426  4150		       00 53	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	83
    427  4150		       00 54	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	84
    428  4150		       00 55	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	85
    429  4150		       00 56	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	86
    430  4150		       00 57	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	87
    431  4150		       00 58	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	88
    432  4150		       00 59	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	89
    433  4150		       00 5a	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	90
    434  4150		       00 5b	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	91
    435  4150		       00 5c	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	92
    436  4150		       00 5d	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	93
    437  4150		       00 5e	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	94
    438  4150		       00 5f	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	95
    439  4150		       00 60	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	96
    440  4150		       00 61	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	97
    441  4150		       00 62	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	98
    442  4150		       00 63	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	99
    443  4150		       00 64	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	100
    444  4150		       00 65	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	101
    445  4150		       00 66	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	102
    446  4150		       00 67	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	103
    447  4150		       00 68	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	104
    448  4150		       00 69	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	105
    449  4150		       00 6a	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	106
    450  4150		       00 6b	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	107
    451  4150		       00 6c	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	108
    452  4150		       00 6d	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	109
    453  4150		       00 6e	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	110
    454  4150		       00 6f	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	111
------- FILE BANK_CHESS_INCLUDES.asm
      0  4150					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4150		       01 50	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $150 , FREE= $6b0
      2  4150					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4150				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4150				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4150				  -	      ERR
      6  4150					      endif
------- FILE ./chess.asm
    444  4150
    445  4150							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  4150					      include	"BANK_FIXED.asm"
      1  4150							; Chess
      2  4150							; Atari 2600 Chess display system
      3  4150							; Copyright (c) 2019-2020 Andrew Davie
      4  4150							; andrew@taswegian.com
      5  4150
      6  4150							;------------------------------------------------------------------------------
      7  4150							;###############################  FIXED BANK  #################################
      8  4150							;------------------------------------------------------------------------------
      9  4150
     10  4150				   ORIGIN     SET	FIXED_BANK
     11  4150
      0  4150					      NEWBANK	THE_FIXED_BANK
      1  7a42 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00
     16  7804
     17  7804							;---------------------------------------------------------------------------------------------------
     18  7804
      0  7804					      DEFINE_SUBROUTINE	ClearChessBitmap_PART0
      1  7804		       00 0f	   BANK_ClearChessBitmap_PART0 =	_CURRENT_BANK
      2  7804					      SUBROUTINE
      3  7804				   ClearChessBitmap_PART0
     20  7804
     21  7804		       a6 81		      ldx	doubleBufferBase
     22  7806					      REPEAT	4
     23  7806		       86 3e		      stx	SET_BANK_RAM
     24  7808		       20 90 f0 	      jsr	ClearRowBitmap
     25  780b		       e8		      inx
     22  780b					      REPEND
     23  780c		       86 3e		      stx	SET_BANK_RAM
     24  780e		       20 90 f0 	      jsr	ClearRowBitmap
     25  7811		       e8		      inx
     22  7811					      REPEND
     23  7812		       86 3e		      stx	SET_BANK_RAM
     24  7814		       20 90 f0 	      jsr	ClearRowBitmap
     25  7817		       e8		      inx
     22  7817					      REPEND
     23  7818		       86 3e		      stx	SET_BANK_RAM
     24  781a		       20 90 f0 	      jsr	ClearRowBitmap
     25  781d		       e8		      inx
     26  781e					      REPEND
     27  781e		       60		      rts
     28  781f
      0  781f					      DEFINE_SUBROUTINE	ClearChessBitmap_PART1
      1  781f		       00 0f	   BANK_ClearChessBitmap_PART1 =	_CURRENT_BANK
      2  781f					      SUBROUTINE
      3  781f				   ClearChessBitmap_PART1
     30  781f
     31  781f		       a5 81		      lda	doubleBufferBase
     32  7821		       09 04		      ora	#4
     33  7823		       aa		      tax
     34  7824					      REPEAT	4
     35  7824		       86 3e		      stx	SET_BANK_RAM
     36  7826		       20 90 f0 	      jsr	ClearRowBitmap
     37  7829		       e8		      inx
     34  7829					      REPEND
     35  782a		       86 3e		      stx	SET_BANK_RAM
     36  782c		       20 90 f0 	      jsr	ClearRowBitmap
     37  782f		       e8		      inx
     34  782f					      REPEND
     35  7830		       86 3e		      stx	SET_BANK_RAM
     36  7832		       20 90 f0 	      jsr	ClearRowBitmap
     37  7835		       e8		      inx
     34  7835					      REPEND
     35  7836		       86 3e		      stx	SET_BANK_RAM
     36  7838		       20 90 f0 	      jsr	ClearRowBitmap
     37  783b		       e8		      inx
     38  783c					      REPEND
     39  783c		       60		      rts
     40  783d
     41  783d							;---------------------------------------------------------------------------------------------------
     42  783d
      0  783d					      DEFINE_SUBROUTINE	CopyChessboardPiecesToBoardPartial
      1  783d		       00 0f	   BANK_CopyChessboardPiecesToBoardPartial =	_CURRENT_BANK
      2  783d					      SUBROUTINE
      3  783d				   CopyChessboardPiecesToBoardPartial
     44  783d
     45  783d		       a9 10		      lda	#BANK_CHESSBOARD
     46  783f		       85 3e		      sta	SET_BANK_RAM
     47  7841
     48  7841		       a5 83		      lda	drawPieceNumber
     49  7843		       4a		      lsr
     50  7844		       4a		      lsr
     51  7845		       4a		      lsr
     52  7846		       18		      clc
     53  7847		       65 83		      adc	drawPieceNumber
     54  7849		       29 01		      and	#1
     55  784b		       f0 02		      beq	.white
     56  784d		       a9 1c		      lda	#28
     57  784f		       85 90	   .white     sta	__pieceColour
     58  7851
     59  7851		       a4 83		      ldy	drawPieceNumber
     60  7853		       98		      tya
     61  7854		       29 03		      and	#3
     62  7856		       19 00 10 	      ora	Chessboard,y
     63  7859		       38		      sec
     64  785a		       e5 90		      sbc	__pieceColour
     65  785c		       a8		      tay
     66  785d		       20 01 f9 	      jsr	CopyPieceToRAMBuffer
     67  7860
     68  7860		       a5 83		      lda	drawPieceNumber
     69  7862		       4a		      lsr
     70  7863		       4a		      lsr
     71  7864		       4a		      lsr
     72  7865		       05 81		      ora	doubleBufferBase
     73  7867		       aa		      tax		; row
     74  7868
     75  7868		       a5 83		      lda	drawPieceNumber
     76  786a		       29 04		      and	#4
     77  786c		       c9 04		      cmp	#4	; cc = left side, cs = right side
     78  786e
     79  786e		       86 3e		      stx	SET_BANK_RAM
     80  7870		       4c 43 f2 	      jmp	CopyPieceToRowBitmap
     81  7873
     82  7873							;---------------------------------------------------------------------------------------------------
     83  7873
      0  7873					      DEFINE_SUBROUTINE	RandomPieceMove
      1  7873		       00 0f	   BANK_RandomPieceMove =	_CURRENT_BANK
      2  7873					      SUBROUTINE
      3  7873				   RandomPieceMove
     85  7873
     86  7873		       a9 10		      lda	#BANK_CHESSBOARD
     87  7875		       85 3e		      sta	SET_BANK_RAM
     88  7877
      0  7877					      NEXT_RANDOM
      1  7877		       a5 80		      lda	rnd
      2  7879		       4a		      lsr
      3  787a		       90 02		      bcc	.skipEOR
      4  787c		       49 b4		      eor	#RND_EOR_VAL
      5  787e		       85 80	   .skipEOR   sta	rnd
     90  7880		       aa		      tax
     91  7881		       e8	   .nextX     inx
     92  7882		       8a		      txa
     93  7883		       29 3f		      and	#63
     94  7885		       aa		      tax
     95  7886
     96  7886		       bd 00 10 	      lda	Chessboard,x
     97  7889		       c9 1c		      cmp	#BLANK
     98  788b		       f0 f4		      beq	.nextX
     99  788d
      0  788d					      NEXT_RANDOM
      1  788d		       a5 80		      lda	rnd
      2  788f		       4a		      lsr
      3  7890		       90 02		      bcc	.skipEOR
      4  7892		       49 b4		      eor	#RND_EOR_VAL
      5  7894		       85 80	   .skipEOR   sta	rnd
    101  7896		       a8		      tay
    102  7897		       c8	   .nextY     iny
    103  7898		       98		      tya
    104  7899		       29 3f		      and	#63
    105  789b		       a8		      tay
    106  789c
    107  789c		       b9 00 10 	      lda	Chessboard,y
    108  789f		       c9 1c		      cmp	#BLANK
    109  78a1		       d0 f4		      bne	.nextY
    110  78a3
    111  78a3		       bd 00 10 	      lda	Chessboard,x
    112  78a6		       99 00 14 	      sta	Chessboard+RAM_WRITE,y
    113  78a9		       a9 1c		      lda	#BLANK
    114  78ab		       9d 00 14 	      sta	Chessboard+RAM_WRITE,x
    115  78ae
    116  78ae		       60		      rts
    117  78af
    118  78af							;---------------------------------------------------------------------------------------------------
    119  78af
      0  78af					      DEFINE_SUBROUTINE	InitialiseChessboard
      1  78af		       00 0f	   BANK_InitialiseChessboard =	_CURRENT_BANK
      2  78af					      SUBROUTINE
      3  78af				   InitialiseChessboard
    121  78af
    122  78af		       a9 10		      lda	#BANK_CHESSBOARD
    123  78b1		       85 3e		      sta	SET_BANK_RAM
    124  78b3
    125  78b3		       a2 3f		      ldx	#63
    126  78b5		       bd c1 f8    .setupBoard lda	BoardPiece,x
    127  78b8		       29 fc		      and	#~3
    128  78ba		       9d 00 14 	      sta	Chessboard+RAM_WRITE,x
    129  78bd		       ca		      dex
    130  78be		       10 f5		      bpl	.setupBoard
    131  78c0
    132  78c0		       60		      rts
    133  78c1
    134  78c1				   BoardPiece
    135  78c1
    136  78c1		       00 1c	   BLANK      =	INDEX_WHITE_BLANK_on_BLACK_SQUARE_0
    137  78c1		       00 20	   WHITE_PAWN =	INDEX_WHITE_PAWN_on_BLACK_SQUARE_0
    138  78c1		       00 2c	   WHITE_ROOK =	INDEX_WHITE_ROOK_on_BLACK_SQUARE_0
    139  78c1		       00 24	   WHITE_KNIGHT =	INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0
    140  78c1		       00 28	   WHITE_BISHOP =	INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0
    141  78c1		       00 30	   WHITE_QUEEN =	INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0
    142  78c1		       00 34	   WHITE_KING =	INDEX_WHITE_KING_on_BLACK_SQUARE_0
    143  78c1		       00 58	   BLACK_PAWN =	INDEX_BLACK_PAWN_on_BLACK_SQUARE_0
    144  78c1		       00 64	   BLACK_ROOK =	INDEX_BLACK_ROOK_on_BLACK_SQUARE_0
    145  78c1		       00 5c	   BLACK_KNIGHT =	INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0
    146  78c1		       00 60	   BLACK_BISHOP =	INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0
    147  78c1		       00 68	   BLACK_QUEEN =	INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0
    148  78c1		       00 6c	   BLACK_KING =	INDEX_BLACK_KING_on_BLACK_SQUARE_0
    149  78c1
    150  78c1
    151  78c1		       64		      .byte.b	BLACK_ROOK	;0
    152  78c2		       5c		      .byte.b	BLACK_KNIGHT	;1
    153  78c3		       60		      .byte.b	BLACK_BISHOP	;2
    154  78c4		       68		      .byte.b	BLACK_QUEEN	;3
    155  78c5		       6c		      .byte.b	BLACK_KING	;4
    156  78c6		       60		      .byte.b	BLACK_BISHOP	;5
    157  78c7		       5c		      .byte.b	BLACK_KNIGHT	;6
    158  78c8		       64		      .byte.b	BLACK_ROOK	;7
    159  78c9
    160  78c9		       58		      .byte.b	BLACK_PAWN
    161  78ca		       58		      .byte.b	BLACK_PAWN
    162  78cb		       58		      .byte.b	BLACK_PAWN
    163  78cc		       58		      .byte.b	BLACK_PAWN
    164  78cd		       58		      .byte.b	BLACK_PAWN
    165  78ce		       58		      .byte.b	BLACK_PAWN
    166  78cf		       58		      .byte.b	BLACK_PAWN
    167  78d0		       58		      .byte.b	BLACK_PAWN
    168  78d1
    169  78d1		       1c		      .byte.b	BLANK
    170  78d2		       1c		      .byte.b	BLANK
    171  78d3		       1c		      .byte.b	BLANK
    172  78d4		       1c		      .byte.b	BLANK
    173  78d5		       1c		      .byte.b	BLANK
    174  78d6		       1c		      .byte.b	BLANK
    175  78d7		       1c		      .byte.b	BLANK
    176  78d8		       1c		      .byte.b	BLANK
    177  78d9
    178  78d9		       1c		      .byte.b	BLANK
    179  78da		       1c		      .byte.b	BLANK
    180  78db		       1c		      .byte.b	BLANK
    181  78dc		       1c		      .byte.b	BLANK
    182  78dd		       1c		      .byte.b	BLANK
    183  78de		       1c		      .byte.b	BLANK
    184  78df		       1c		      .byte.b	BLANK
    185  78e0		       1c		      .byte.b	BLANK
    186  78e1
    187  78e1		       1c		      .byte.b	BLANK
    188  78e2		       1c		      .byte.b	BLANK
    189  78e3		       1c		      .byte.b	BLANK
    190  78e4		       1c		      .byte.b	BLANK
    191  78e5		       1c		      .byte.b	BLANK
    192  78e6		       1c		      .byte.b	BLANK
    193  78e7		       1c		      .byte.b	BLANK
    194  78e8		       1c		      .byte.b	BLANK
    195  78e9
    196  78e9		       1c		      .byte.b	BLANK
    197  78ea		       1c		      .byte.b	BLANK
    198  78eb		       1c		      .byte.b	BLANK
    199  78ec		       1c		      .byte.b	BLANK
    200  78ed		       1c		      .byte.b	BLANK
    201  78ee		       1c		      .byte.b	BLANK
    202  78ef		       1c		      .byte.b	BLANK
    203  78f0		       1c		      .byte.b	BLANK
    204  78f1
    205  78f1		       20		      .byte.b	WHITE_PAWN
    206  78f2		       20		      .byte.b	WHITE_PAWN
    207  78f3		       20		      .byte.b	WHITE_PAWN
    208  78f4		       20		      .byte.b	WHITE_PAWN
    209  78f5		       20		      .byte.b	WHITE_PAWN
    210  78f6		       20		      .byte.b	WHITE_PAWN
    211  78f7		       20		      .byte.b	WHITE_PAWN
    212  78f8		       20		      .byte.b	WHITE_PAWN
    213  78f9
    214  78f9		       2c		      .byte.b	WHITE_ROOK
    215  78fa		       24		      .byte.b	WHITE_KNIGHT
    216  78fb		       28		      .byte.b	WHITE_BISHOP
    217  78fc		       30		      .byte.b	WHITE_QUEEN
    218  78fd		       34		      .byte.b	WHITE_KING
    219  78fe		       28		      .byte.b	WHITE_BISHOP
    220  78ff		       24		      .byte.b	WHITE_KNIGHT
    221  7900		       2c		      .byte.b	WHITE_ROOK
    222  7901
    223  7901
    224  7901							;---------------------------------------------------------------------------------------------------
    225  7901
    226  7901
    227  7901							;-----------------------------------------------------------------------------------------------
    228  7901
      0  7901					      DEFINE_SUBROUTINE	CopyPieceToRAMBuffer
      1  7901		       00 0f	   BANK_CopyPieceToRAMBuffer =	_CURRENT_BANK
      2  7901					      SUBROUTINE
      3  7901				   CopyPieceToRAMBuffer
    230  7901
    231  7901							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    232  7901							; y = piece index
    233  7901
    234  7901		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
    235  7903		       85 3f		      sta	SET_BANK
    236  7905
    237  7905		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
    238  7908		       85 d8		      sta	__ptr
    239  790a		       b9 70 f0 	      lda	PIECE_VECTOR_HI,y
    240  790d		       85 d9		      sta	__ptr+1
    241  790f		       b9 e0 f0 	      lda	PIECE_VECTOR_BANK,y
    242  7912		       85 3f		      sta	SET_BANK
    243  7914
    244  7914		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
    245  7916		       b1 d8	   .copyPieceGfx lda	(__ptr),y
    246  7918		       99 90 00 	      sta	__pieceShapeBuffer,y
    247  791b		       88		      dey
    248  791c		       10 f8		      bpl	.copyPieceGfx
    249  791e
    250  791e		       60		      rts
    251  791f
    252  791f							;------------------------------------------------------------------------------
    253  791f
    254  791f
      0  791f					      DEFINE_SUBROUTINE	TimeSlice
      1  791f		       00 0f	   BANK_TimeSlice =	_CURRENT_BANK
      2  791f					      SUBROUTINE
      3  791f				   TimeSlice
    256  791f
    257  791f							; FIRST check the time is sufficient for the smallest of the timeslices. Not much point
    258  791f							; going ahead if there's insufficient time. This allows the previous character drawing to
    259  791f							; be much smaller in time, as they don't have to include the timeslice code overhead.
    260  791f
    261  791f		       ad 84 02 	      lda	INTIM	; 4
    262  7922		       c9 03		      cmp	#SEGTIME_MINIMUM_TIMESLICE	; 2
    263  7924		       90 00		      bcc	timeExit	; 2(3)
    264  7926							; @0✅
    265  7926		       60	   timeExit   rts
    266  7927
    267  7927							;---------------------------------------------------------------------------------------------------
    268  7927
      0  7927					      DEFINE_SUBROUTINE	CopyShadowROMtoRAM
      1  7927		       00 0f	   BANK_CopyShadowROMtoRAM =	_CURRENT_BANK
      2  7927					      SUBROUTINE
      3  7927				   CopyShadowROMtoRAM
    270  7927							; pass x = source bank
    271  7927							; pass y = destination bank (preserved)
    272  7927
    273  7927		       86 91		      stx	__sourceBank
    274  7929
    275  7929		       a2 00		      ldx	#0
    276  792b		       a5 91	   .copyPage  lda	__sourceBank
    277  792d		       85 3f		      sta	SET_BANK
    278  792f
    279  792f		       bd 00 f0 	      lda	$F000,x
    280  7932		       48		      pha
    281  7933		       bd 00 f1 	      lda	$F100,x
    282  7936		       48		      pha
    283  7937		       bd 00 f2 	      lda	$F200,x
    284  793a		       48		      pha
    285  793b		       bd 00 f3 	      lda	$F300,x
    286  793e
    287  793e		       84 3e		      sty	SET_BANK_RAM
    288  7940
    289  7940		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    290  7943		       68		      pla
    291  7944		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    292  7947		       68		      pla
    293  7948		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    294  794b		       68		      pla
    295  794c		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    296  794f
    297  794f		       ca		      dex
    298  7950		       d0 d9		      bne	.copyPage
    299  7952		       60		      rts
    300  7953
    301  7953							;---------------------------------------------------------------------------------------------------
    302  7953
      0  7953					      DEFINE_SUBROUTINE	Reset
      1  7953		       00 0f	   BANK_Reset =	_CURRENT_BANK
      2  7953					      SUBROUTINE
      3  7953				   Reset
    304  7953
      0  7953					      CLEAN_START
      1  7953		       78		      sei
      2  7954		       d8		      cld
      3  7955
      4  7955		       a2 00		      ldx	#0
      5  7957		       8a		      txa
      6  7958		       a8		      tay
      7  7959		       ca	   .CLEAR_STACK dex
      8  795a		       9a		      txs
      9  795b		       48		      pha
     10  795c		       d0 fb		      bne	.CLEAR_STACK
     11  795e
    306  795e
    307  795e		       a9 12		      lda	#$12
    308  7960		       85 80		      sta	rnd
    309  7962
    310  7962
    311  7962							; Move a copy of the row bank template to the first 8 banks of RAM
    312  7962							; and then terminate the draw subroutine by substituting in a RTS on the last one
    313  7962
    314  7962		       a0 0f		      ldy	#15
    315  7964		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    316  7966		       20 27 f9 	      jsr	CopyShadowROMtoRAM
    317  7969		       88		      dey
    318  796a		       10 f8		      bpl	.copyRowBanks
    319  796c
    320  796c							; Patch the final row's "loop" to a RTS
    321  796c
    322  796c		       a9 96		      lda	#<SELFMOD_RTS_ON_LAST_ROW
    323  796e		       85 d8		      sta	__ptr
    324  7970		       a9 f6		      lda	#>(SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE)
    325  7972		       85 d9		      sta	__ptr+1
    326  7974
    327  7974
    328  7974		       a0 00		      ldy	#0
    329  7976		       a9 60		      lda	#$60	; rts
    330  7978
    331  7978							; the 'screen' is double-buffered - two sets of 8x1K banks
    332  7978							; we need to put an RTS on the last of both of these
    333  7978
    334  7978		       a2 07		      ldx	#7
    335  797a		       86 3e		      stx	SET_BANK_RAM
    336  797c		       91 d8		      sta	(__ptr),y	; patch selfmod code to RTS
    337  797e
    338  797e		       a2 0f		      ldx	#15
    339  7980		       86 3e		      stx	SET_BANK_RAM
    340  7982		       91 d8		      sta	(__ptr),y
    341  7984
    342  7984
    343  7984		       20 af f8 	      jsr	InitialiseChessboard
    344  7987
    345  7987							; Now the board is "living" in RAM (along with support code) we can do stuff with it
    346  7987
    347  7987		       a9 00		      lda	#0
    348  7989		       85 81		      sta	doubleBufferBase
    349  798b		       85 82		      sta	drawPhase
    350  798d
    351  798d
    352  798d		       a9 00		      lda	#%00000000
    353  798f		       85 4a		      sta	CTRLPF
    354  7991		       85 49		      sta	COLUBK
    355  7993
    356  7993
      0  7993					      RESYNC
      1  7993
      2  7993		       a9 02		      lda	#%10
      3  7995		       85 41		      sta	VBLANK
      4  7997
      5  7997		       a2 08		      ldx	#8
      6  7999				   .loopResync
      0  7999					      VERTICAL_SYNC
      1  7999		       a9 0e		      lda	#%1110
      2  799b		       85 42	   .VSLP1     sta	WSYNC
      3  799d		       85 40		      sta	VSYNC
      4  799f		       4a		      lsr
      5  79a0		       d0 f9		      bne	.VSLP1
      8  79a2
      9  79a2		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  79a4		       a5 84		      lda	Platform
     11  79a6		       49 02		      eor	#PAL_50
     12  79a8		       d0 02		      bne	.ntsc
     13  79aa		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  79ac				   .ntsc
     15  79ac				   .loopWait
     16  79ac		       85 42		      sta	WSYNC
     17  79ae		       85 42		      sta	WSYNC
     18  79b0		       88		      dey
     19  79b1		       d0 f9		      bne	.loopWait
     20  79b3		       ca		      dex
     21  79b4		       d0 e3		      bne	.loopResync
    358  79b6
    359  79b6
    360  79b6				   .doubleBufferLoop
    361  79b6
    362  79b6		       a9 0e		      lda	#%1110	; VSYNC ON
    363  79b8		       85 42	   .loopVSync3 sta	WSYNC
    364  79ba		       85 40		      sta	VSYNC
    365  79bc		       4a		      lsr
    366  79bd		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
    367  79bf
    368  79bf		       a0 32		      ldy	#50	;VBLANK_TIM_NTSC
    369  79c1		       8c 96 02 	      sty	TIM64T
    370  79c4
    371  79c4		       20 fa f9 	      jsr	PhasedProcessor
    372  79c7
    373  79c7		       85 42	   .VerticalBlank sta	WSYNC
    374  79c9		       ad 84 02 	      lda	INTIM
    375  79cc		       d0 f9		      bne	.VerticalBlank
    376  79ce		       85 41		      sta	VBLANK
    377  79d0
    378  79d0		       a5 81		      lda	doubleBufferBase
    379  79d2		       49 08		      eor	#8
    380  79d4		       aa		      tax
    381  79d5		       86 3e		      stx	SET_BANK_RAM
    382  79d7		       20 67 f2 	      jsr	DrawRow
    383  79da
    384  79da		       a9 1a		      lda	#26
    385  79dc		       8d 96 02 	      sta	TIM64T
    386  79df
    387  79df		       a9 00		      lda	#0
    388  79e1		       85 4d		      sta	PF0
    389  79e3		       85 4e		      sta	PF1
    390  79e5		       85 4f		      sta	PF2
    391  79e7
    392  79e7							;jsr PhasedProcessor
    393  79e7
    394  79e7							; D1 VBLANK turns off beam
    395  79e7							; It needs to be turned on 37 scanlines later
    396  79e7
    397  79e7		       ad 84 02    .oscan     lda	INTIM
    398  79ea		       d0 fb		      bne	.oscan
    399  79ec
    400  79ec		       85 42		      sta	WSYNC
    401  79ee		       85 42		      sta	WSYNC
    402  79f0							;		  sta WSYNC
    403  79f0							;		  sta WSYNC
    404  79f0
    405  79f0		       a9 42		      lda	#%01000010	; bit6 is not required
    406  79f2		       85 41		      sta	VBLANK	; end of screen - enter blanking
    407  79f4
    408  79f4
    409  79f4
    410  79f4							;		  lda INPT4
    411  79f4							;		  bpl .ret
    412  79f4
    413  79f4							;		  jmp .RestartChessFrame
    414  79f4
    415  79f4							;.ret
    416  79f4
    417  79f4		       4c b6 f9 	      jmp	.doubleBufferLoop
    418  79f7
    419  79f7							;lda #2
    420  79f7							;sta VSYNC
    421  79f7							;lda #%01000010		  ; bit6 is not required
    422  79f7							;sta VBLANK			  ; end of screen - enter blanking
    423  79f7
    424  79f7				   Restart		; go here on RESET + SELECT
    425  79f7
    426  79f7		       4c 53 f9 	      jmp	Reset
    427  79fa
    428  79fa							;---------------------------------------------------------------------------------------------------
    429  79fa
      0  79fa					      DEFINE_SUBROUTINE	PhasedProcessor
      1  79fa		       00 0f	   BANK_PhasedProcessor =	_CURRENT_BANK
      2  79fa					      SUBROUTINE
      3  79fa				   PhasedProcessor
    431  79fa		       a6 82		      ldx	drawPhase
    432  79fc		       bd 09 fa 	      lda	DrawVectorLO,x
    433  79ff		       85 d8		      sta	__ptr
    434  7a01		       bd 0d fa 	      lda	DrawVectorHI,x
    435  7a04		       85 d9		      sta	__ptr+1
    436  7a06		       6c d8 00 	      jmp	(__ptr)
    437  7a09
    438  7a09				   DrawVectorLO
    439  7a09		       11		      .byte.b	<Phase0_ClearBoard_0
    440  7a0a		       17		      .byte.b	<Phase0_ClearBoard_1
    441  7a0b		       21		      .byte.b	<DrawNextPiece
    442  7a0c		       2b		      .byte.b	<FlipBuffers
    443  7a0d
    444  7a0d				   DrawVectorHI
    445  7a0d		       fa		      .byte.b	>Phase0_ClearBoard_0
    446  7a0e		       fa		      .byte.b	>Phase0_ClearBoard_1
    447  7a0f		       fa		      .byte.b	>DrawNextPiece
    448  7a10		       fa		      .byte.b	>FlipBuffers
    449  7a11
      0  7a11					      DEFINE_SUBROUTINE	Phase0_ClearBoard_0
      1  7a11		       00 0f	   BANK_Phase0_ClearBoard_0 =	_CURRENT_BANK
      2  7a11					      SUBROUTINE
      3  7a11				   Phase0_ClearBoard_0
    451  7a11
    452  7a11		       20 04 f8 	      jsr	ClearChessBitmap_PART0
    453  7a14		       e6 82		      inc	drawPhase
    454  7a16		       60		      rts
    455  7a17
      0  7a17					      DEFINE_SUBROUTINE	Phase0_ClearBoard_1
      1  7a17		       00 0f	   BANK_Phase0_ClearBoard_1 =	_CURRENT_BANK
      2  7a17					      SUBROUTINE
      3  7a17				   Phase0_ClearBoard_1
    457  7a17
    458  7a17		       20 1f f8 	      jsr	ClearChessBitmap_PART1
    459  7a1a
    460  7a1a		       a9 3f		      lda	#63
    461  7a1c		       85 83		      sta	drawPieceNumber
    462  7a1e
    463  7a1e		       e6 82		      inc	drawPhase
    464  7a20		       60		      rts
    465  7a21
      0  7a21					      DEFINE_SUBROUTINE	DrawNextPiece
      1  7a21		       00 0f	   BANK_DrawNextPiece =	_CURRENT_BANK
      2  7a21					      SUBROUTINE
      3  7a21				   DrawNextPiece
    467  7a21
    468  7a21		       20 3d f8 	      jsr	CopyChessboardPiecesToBoardPartial
    469  7a24		       c6 83		      dec	drawPieceNumber
    470  7a26		       10 02		      bpl	.incomplete
    471  7a28
    472  7a28		       e6 82		      inc	drawPhase
    473  7a2a		       60	   .incomplete rts
    474  7a2b
    475  7a2b
      0  7a2b					      DEFINE_SUBROUTINE	FlipBuffers
      1  7a2b		       00 0f	   BANK_FlipBuffers =	_CURRENT_BANK
      2  7a2b					      SUBROUTINE
      3  7a2b				   FlipBuffers
    477  7a2b
    478  7a2b					      REPEAT	4
    479  7a2b		       20 73 f8 	      jsr	RandomPieceMove
    478  7a2b					      REPEND
    479  7a2e		       20 73 f8 	      jsr	RandomPieceMove
    478  7a2e					      REPEND
    479  7a31		       20 73 f8 	      jsr	RandomPieceMove
    478  7a31					      REPEND
    479  7a34		       20 73 f8 	      jsr	RandomPieceMove
    480  7a37					      REPEND
    481  7a37
    482  7a37		       a5 81		      lda	doubleBufferBase
    483  7a39		       49 08		      eor	#8
    484  7a3b		       85 81		      sta	doubleBufferBase
    485  7a3d
    486  7a3d		       a9 00		      lda	#0
    487  7a3f		       85 82		      sta	drawPhase
    488  7a41		       60		      rts
    489  7a42
    490  7a42
    491  7a42
    492  7a42
    493  7a42							;---------------------------------------------------------------------------
    494  7a42
 FREE BYTES IN FIXED BANK =  $5ae
    495  7a42					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFF0 - *
    496  7a42
    497  7a42							;---------------------------------------------------------------------------
    498  7a42							; The reset vectors
    499  7a42							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
    500  7a42
    501  7ff4 ????				      SEG	PlusCart
    502  7ff0					      ORG	FIXED_BANK + $7F0
    503  7ff0					      RORG	$7FF0
    504  7ff0		       7f f0	   PLUSCART_IO =	*
    505  7ff0		       00 aa	   PLUS0      =	%10101010
    506  7ff0		       00 19	   PLUS1      =	%00011001
    507  7ff0		       00 af	   PLUS2      =	%10101111
    508  7ff0		       00 36	   PLUS3      =	%00110110
    509  7ff0		       aa 19 af 36	      .byte.b	PLUS0,PLUS1,PLUS2,PLUS3
    510  7ff4
    511  8000 ????				      SEG	InterruptVectors
    512  7ffc					      ORG	FIXED_BANK + $7FC
    513  7ffc					      RORG	$7ffC
    514  7ffc
    515  7ffc							;		 .word Reset	       ; NMI	    (not used)
    516  7ffc		       53 f9		      .word.w	Reset	; RESET
    517  7ffe		       53 f9		      .word.w	Reset	; IRQ	      (not used)
    518  8000
    519  8000							;---------------------------------------------------------------------------
------- FILE ./chess.asm
    447  8000
    448  8000							;END
