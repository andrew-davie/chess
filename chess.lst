------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????	       00 00	   VERBOSE    =	0	; set to 1 for compile messages
     15  0000 ????
     16  0000 ????			   ORIGIN     SET	0
     17  0000 ????			   ORIGIN_RAM SET	0
     18  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     20  0000 ????
     21  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     22  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     23  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     24  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     25  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     26  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     27  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     28  0000 ????
     29  0000 ????	       00 01	   YES	      =	1
     30  0000 ????	       00 00	   NO	      =	0
     31  0000 ????
     32  0000 ????						; assemble diagnostics. Remove for release.
     33  0000 ????	       00 01	   ASSERTS    =	1
     34  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     35  0000 ????	       00 00	   PVSP       =	0	; player versus player =1
     36  0000 ????
     37  0000 ????	       00 00	   WHITE_PLAYER =	0	; human
     38  0000 ????	       00 00	   BLACK_PLAYER =	0	; human
     39  0000 ????
     40  0000 ????						; DELAYS
     41  0000 ????
     42  0000 ????	       00 0a	   READY_TO_MOVE_FLASH =	10
     43  0000 ????
     44  0000 ????						;===================================
     45  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     46  0000 ????						;===================================
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; The following are optional YES/NO depending on phase of the moon
     50  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     51  0000 ????						;-------------------------------------------------------------------------------
     52  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     53  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     54  0000 ????			  -	      IF	FINAL_VERSION = YES
     55  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     56  0000 ????				      ENDIF
     57  0000 ????
     58  0000 ????						;-------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     61  0000 ????
     62  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     63  0000 ????
     64  0000 ????						;------------------------------------------------------------------------------
     65  0000 ????
     66  0000 ????	       00 01	   PLUSCART   =	YES
     67  0000 ????
     68  0000 ????						;------------------------------------------------------------------------------
     69  0000 ????
     70  0000 ????
     71  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     72  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     73  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     74  0000 ????
     75  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     76  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     77  0000 ????
     78  0000 ????
     79  0000 ????	       10 00	   RAM_3E     =	$1000
     80  0000 ????	       04 00	   RAM_SIZE   =	$400
     81  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     82  0000 ????
     83  0000 ????
     84  0000 ????
     85  0000 ????
     86  0000 ????						; Platform constants:
     87  0000 ????	       00 02	   PAL	      =	%10
     88  0000 ????	       00 02	   PAL_50     =	PAL|0
     89  0000 ????	       00 03	   PAL_60     =	PAL|1
     90  0000 ????
     91  0000 ????
     92  0000 ????				      IF	L276
     93  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     94  0000 ????			  -	      ELSE
     95  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     96  0000 ????				      ENDIF
     97  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     98  0000 ????
     99  0000 ????				      IF	L276
    100  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
    101  0000 ????			  -	      ELSE
    102  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
    103  0000 ????				      ENDIF
    104  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
    105  0000 ????
    106  0000 ????				      IF	L276
    107  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
    108  0000 ????			  -	      ELSE
    109  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
    110  0000 ????				      ENDIF
    111  0000 ????	       01 38	   SCANLINES_PAL =	312
    112  0000 ????
    113  0000 ????
    114  0000 ????	       00 2e	   TIME_PART_2 =	46
    115  0000 ????	       00 2f	   TIME_PART_1 =	47
    116  0000 ????
    117  0000 ????
    118  0000 ????						;------------------------------------------------------------------------------
    119  0000 ????						; MACRO definitions
    120  0000 ????
    121  0000 ????
    122  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    123  0000 ????
    124  0000 ????				      MAC	newbank
    125  0000 ????				      SEG	{1}
    126  0000 ????				      ORG	ORIGIN
    127  0000 ????				      RORG	$F000
    128  0000 ????			   BANK_START SET	*
    129  0000 ????			   {1}	      SET	ORIGIN / 2048
    130  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    131  0000 ????			   _CURRENT_BANK SET	{1}
    132  0000 ????				      ENDM		; bank name
    133  0000 ????
    134  0000 ????				      MAC	define_1k_segment
    135  0000 ????				      ALIGN	$400
    136  0000 ????			   SEGMENT_{1} SET	*
    137  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    138  0000 ????				      ENDM		; {seg name}
    139  0000 ????
    140  0000 ????				      MAC	check_bank_size
    141  0000 ????			   .TEMP      =	* - BANK_START
    142  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    143  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    144  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    145  0000 ????				      ERR
    146  0000 ????				      endif
    147  0000 ????				      ENDM		; name
    148  0000 ????
    149  0000 ????
    150  0000 ????				      MAC	check_half_bank_size
    151  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    152  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    153  0000 ????			   .TEMP      =	* - BANK_START
    154  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    155  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    156  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    157  0000 ????				      ERR
    158  0000 ????				      endif
    159  0000 ????				      ENDM		; name
    160  0000 ????
    161  0000 ????
    162  0000 ????						;---------------------------------------------------------------------------------------------------
    163  0000 ????
    164  0000 ????						; Macro inserts a page break if the object would overlap a page
    165  0000 ????
    166  0000 ????				      MAC	optional_pagebreak
    167  0000 ????				      LIST	OFF
    168  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    169  0000 ????			   EARLY_LOCATION SET	*
    170  0000 ????				      ALIGN	256
    171  0000 ????				      IF	VERBOSE=1
    172  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR", {1}
    173  0000 ????				      ECHO	"REQUESTED SIZE =", {2}
    174  0000 ????				      ECHO	"WASTED SPACE =", *-EARLY_LOCATION
    175  0000 ????				      ECHO	"PAGEBREAK LOCATION =", *
    176  0000 ????				      ENDIF
    177  0000 ????				      ENDIF
    178  0000 ????				      LIST	ON
    179  0000 ????				      ENDM		; { string, size }
    180  0000 ????
    181  0000 ????
    182  0000 ????				      MAC	check_page_crossing
    183  0000 ????				      LIST	OFF
    184  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    185  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    186  0000 ????				      endif
    187  0000 ????				      LIST	ON
    188  0000 ????				      ENDM
    189  0000 ????
    190  0000 ????				      MAC	checkpage
    191  0000 ????				      LIST	OFF
    192  0000 ????				      IF	>. != >{1}
    193  0000 ????				      ECHO	""
    194  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    195  0000 ????				      ECHO	""
    196  0000 ????				      ERR
    197  0000 ????				      ENDIF
    198  0000 ????				      LIST	ON
    199  0000 ????				      ENDM
    200  0000 ????
    201  0000 ????				      MAC	checkpagex
    202  0000 ????				      LIST	OFF
    203  0000 ????				      IF	>. != >{1}
    204  0000 ????				      ECHO	""
    205  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    206  0000 ????				      ECHO	{2}
    207  0000 ????				      ECHO	""
    208  0000 ????				      ERR
    209  0000 ????				      ENDIF
    210  0000 ????				      LIST	ON
    211  0000 ????				      ENDM
    212  0000 ????
    213  0000 ????						;---------------------------------------------------------------------------------------------------
    214  0000 ????
    215  0000 ????						; Defines a variable of the given size, making sure it doesn't cross a page
    216  0000 ????				      MAC	variable
    217  0000 ????				      OPTIONAL_PAGEBREAK	"Variable", {2}
    218  0000 ????			   {1}	      ds	{2}
    219  0000 ????				      ENDM		; {name, size}
    220  0000 ????
    221  0000 ????
    222  0000 ????						;---------------------------------------------------------------------------------------------------
    223  0000 ????
    224  0000 ????				      MAC	def
    225  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    226  0000 ????			   {1}			; entry point
    227  0000 ????			   TEMPORARY_VAR SET	Overlay
    228  0000 ????			   TEMPORARY_OFFSET SET	0
    229  0000 ????				      SUBROUTINE
    230  0000 ????				      ENDM		; name of subroutine
    231  0000 ????
    232  0000 ????
    233  0000 ????						;---------------------------------------------------------------------------------------------------
    234  0000 ????
    235  0000 ????				      MAC	allocate
    236  0000 ????				      OPTIONAL_PAGEBREAK	"Table", {2}
    237  0000 ????				      DEF	{1}
    238  0000 ????				      ENDM
    239  0000 ????
    240  0000 ????
    241  0000 ????						;---------------------------------------------------------------------------------------------------
    242  0000 ????
    243  0000 ????			   TEMPORARY_OFFSET SET	0
    244  0000 ????
    245  0000 ????				      MAC	varbase
    246  0000 ????			   TEMPORARY_OFFSET SET	{1}
    247  0000 ????				      ENDM		; {offset}
    248  0000 ????
    249  0000 ????	       00 00	   VAR_LEVEL0 =	0
    250  0000 ????	       00 10	   VAR_LEVEL1 =	16
    251  0000 ????	       00 20	   VAR_LEVEL2 =	32
    252  0000 ????
    253  0000 ????
    254  0000 ????						; Define a temporary variable for use in a subroutine
    255  0000 ????						; Will allocate appropriate bytes, and also check for overflow of the available overlay buffer
    256  0000 ????
    257  0000 ????				      MAC	var
    258  0000 ????			   {1}	      SET	TEMPORARY_VAR
    259  0000 ????			   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + {2}
    260  0000 ????
    261  0000 ????			   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
    262  0000 ????				      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
    263  0000 ????			   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
    264  0000 ????				      ENDIF
    265  0000 ????				      IF	OVERLAY_DELTA > OVERLAY_SIZE
    266  0000 ????				      ECHO	"Temporary Variable", {1}, "overflow!"
    267  0000 ????				      ERR
    268  0000 ????				      ENDIF
    269  0000 ????				      LIST	ON
    270  0000 ????				      ENDM		; { name, size }
    271  0000 ????
    272  0000 ????
    273  0000 ????
    274  0000 ????
    275  0000 ????						;---------------------------------------------------------------------------------------------------
    276  0000 ????
    277  0000 ????				      MAC	tag
    278  0000 ????						; {0}
    279  0000 ????				      ENDM		; {ident/tag}
    280  0000 ????
    281  0000 ????
    282  0000 ????						;---------------------------------------------------------------------------------------------------
    283  0000 ????
    284  0000 ????				      MAC	newrambank
    285  0000 ????						; {1}	     bank name
    286  0000 ????						; {2}	     RAM bank number
    287  0000 ????
    288  0000 ????				      SEG.U	{1}
    289  0000 ????				      ORG	ORIGIN_RAM
    290  0000 ????				      RORG	RAM_3E
    291  0000 ????			   BANK_START SET	*
    292  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    293  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    294  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    295  0000 ????				      ENDM		; bank name
    296  0000 ????
    297  0000 ????						; TODO - fix - this is faulty....
    298  0000 ????				      MAC	validate_ram_size
    299  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    300  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    301  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    302  0000 ????				      ERR
    303  0000 ????				      ENDIF
    304  0000 ????				      ENDM
    305  0000 ????
    306  0000 ????						;---------------------------------------------------------------------------------------------------
    307  0000 ????
    308  0000 ????				      MAC	resync
    309  0000 ????						; resync screen, X and Y == 0 afterwards
    310  0000 ????				      lda	#%10	; make sure VBLANK is ON
    311  0000 ????				      sta	VBLANK
    312  0000 ????
    313  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    314  0000 ????			   .loopResync
    315  0000 ????				      VERTICAL_SYNC
    316  0000 ????
    317  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    318  0000 ????				      lda	Platform
    319  0000 ????				      eor	#PAL_50	; PAL-50?
    320  0000 ????				      bne	.ntsc
    321  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    322  0000 ????			   .ntsc
    323  0000 ????			   .loopWait
    324  0000 ????				      sta	WSYNC
    325  0000 ????				      sta	WSYNC
    326  0000 ????				      dey
    327  0000 ????				      bne	.loopWait
    328  0000 ????				      dex
    329  0000 ????				      bne	.loopResync
    330  0000 ????				      ENDM
    331  0000 ????
    332  0000 ????				      MAC	set_platform
    333  0000 ????						; 00 = NTSC
    334  0000 ????						; 01 = NTSC
    335  0000 ????						; 10 = PAL-50
    336  0000 ????						; 11 = PAL-60
    337  0000 ????				      lda	SWCHB
    338  0000 ????				      rol
    339  0000 ????				      rol
    340  0000 ????				      rol
    341  0000 ????				      and	#%11
    342  0000 ????				      eor	#PAL
    343  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    344  0000 ????				      ENDM
    345  0000 ????
    346  0000 ????
    347  0000 ????						;---------------------------------------------------------------------------------------------------
    348  0000 ????
    349  0000 ????				      MAC	jsrom_safe
    350  0000 ????						; Saves bank of routine to variable for later restore.
    351  0000 ????						; Switches to the bank and does a JSR to the routine.
    352  0000 ????
    353  0000 ????				      lda	#BANK_{1}
    354  0000 ????				      sta	savedBank
    355  0000 ????				      sta	SET_BANK
    356  0000 ????				      jsr	{1}
    357  0000 ????				      ENDM		; {routine}
    358  0000 ????
    359  0000 ????
    360  0000 ????				      MAC	jsrom
    361  0000 ????
    362  0000 ????				      lda	#BANK_{1}
    363  0000 ????				      sta	SET_BANK
    364  0000 ????				      jsr	{1}
    365  0000 ????				      ENDM		; {routine}
    366  0000 ????
    367  0000 ????
    368  0000 ????				      MAC	jsram
    369  0000 ????				      lda	#BANK_{1}
    370  0000 ????				      sta	SET_BANK_RAM
    371  0000 ????				      jsr	{1}
    372  0000 ????				      ENDM
    373  0000 ????
    374  0000 ????
    375  0000 ????
    376  0000 ????				      MAC	timecheck
    377  0000 ????				      lda	INTIM
    378  0000 ????				      cmp	#SPEEDOF_{1}
    379  0000 ????				      bcc	{2}
    380  0000 ????				      ENDM		; {ident}, {branch if out of time}
    381  0000 ????
    382  0000 ????
    383  0000 ????				      MAC	timing
    384  0000 ????			   SPEEDOF_{1} =	({2}/64) + 1
    385  0000 ????				      ENDM		; {label}, {cycles}
    386  0000 ????
    387  0000 ????
    388  0000 ????						;---------------------------------------------------------------------------------------------------
    389  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00f4 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080
      9 U0080		       00	   squareToDraw ds	1
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawDelay  ds	1
     12 U0083		       00	   lastSquareX12 ds	1
     13 U0084
     14 U0084		       00	   drawCount  ds	1
     15 U0085		       00	   fromX12    ds	1
     16 U0086		       00	   toX12      ds	1
     17 U0087		       00	   originX12  ds	1
     18 U0088
     19 U0088		       00	   cursorX12  ds	1
     20 U0089
     21 U0089		       00	   mdelay     ds	1
     22 U008a		       00	   ccur       ds	1
     23 U008b		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     24 U008c		       00	   aiState    ds	1	; state
     25 U008d		       00	   aiFlashDelay ds	1
     26 U008e
     27 U008e		       00	   aiMoveIndex ds	1
     28 U008f
     29 U008f		       00	   aiFlashPhase ds	1
     30 U0090
     31 U0090		       00 00	   Evaluation ds	2	; tracks value of the board position
     32 U0092
     33 U0092		       00	   currentPiece ds	1
     34 U0093		       00	   currentSquare ds	1
     35 U0094		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     36 U0095		       00	   currentPly ds	1
     37 U0096
     38 U0096		       00	   piecelistIndex ds	1
     39 U0097		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     40 U0098		       00	   fromPiece  ds	1
     41 U0099		       00	   lastPiece  ds	1
     42 U009a		       00	   previousPiece ds	1
     43 U009b
     44 U009b		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U009c					      include	"overlays.asm"
      1 U009c							; Chess
      2 U009c							; Atari 2600 Chess display system
      3 U009c							; Copyright (c) 2019-2020 Andrew Davie
      4 U009c							; andrew@taswegian.com
      5 U009c
      6 U009c							;---------------------------------------------------------------------------------------------------
      7 U009c							; OVERLAYS!
      8 U009c							; These variables are overlays, and should be managed with care
      9 U009c							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U009c							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U009c							; use a variable in overlay #1 while at the same time using a variable in
     12 U009c							; overlay #2
     13 U009c
     14 U009c							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U009c
     16 U009c							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U009c							; ensure this by using the VALIDATE_OVERLAY macro
     18 U009c							;---------------------------------------------------------------------------------------------------
     19 U009c
     20 U009c					      MAC	overlay
     21 U009c				   OVERLAY_NAME SET	{1}
     22 U009c					      SEG.U	OVERLAY_{1}
     23 U009c					      org	Overlay
     24 U009c					      ENDM		; {name}
     25 U009c
     26 U009c							;---------------------------------------------------------------------------------------------------
     27 U009c
     28 U009c					      MAC	validate_overlay
     29 U009c					      LIST	OFF
     30 U009c				   OVERLAY_DELTA SET	* - Overlay
     31 U009c					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U009c				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U009c					      ENDIF
     34 U009c					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U009c					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U009c					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U009c					      ERR
     38 U009c					      ENDIF
     39 U009c					      LIST	ON
     40 U009c					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U009c					      ENDM
     42 U009c
     43 U009c							;---------------------------------------------------------------------------------------------------
     44 U009c
     45 U009c				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U009c				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U009c
     48 U009c
     49 U009c							; This overlay variable is used for the overlay variables.  That's OK.
     50 U009c							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U009c							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U009c							; (especially the latter ones) are only used in rare occasions.
     53 U009c
     54 U009c							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U009c							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U009c
      0 U009c					      DEF	Overlay
      1 U009c				   BANK_Overlay SET	_CURRENT_BANK
      2 U009c				   Overlay
      3 U009c				   TEMPORARY_VAR SET	Overlay
      4 U009c				   TEMPORARY_OFFSET SET	0
      5 U009c					      SUBROUTINE
     58 U009c		       00 00 00 00*	      ds	OVERLAY_SIZE	;--> overlay (share) variables
     59 U00e8				   END_OF_OVERLAY
     60 U00e8
     61 U00e8							;---------------------------------------------------------------------------------------------------
     62 U00e8							; And now... the overlays....
     63 U00e8
 ---- OVERLAYS ( $4c bytes ) ----
     64 U00e8					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     65 U00e8
     66 U00e8							;---------------------------------------------------------------------------------------------------
     67 U00e8
     68 U00e8							; Some overlays are used across multiple routines/calls, and they will need to be defined
     69 U00e8							; "globally" in this file.
     70 U00e8
      0 U00e8					      VAR	__pieceShapeBuffer, PIECE_SHAPE_SIZE
      1 U00e8				   __pieceShapeBuffer SET	TEMPORARY_VAR
      2 U00e8				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + PIECE_SHAPE_SIZE
      3 U00e8
      4 U00e8				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00e8					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00e8				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00e8					      ENDIF
      8 U00e8				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00e8				  -	      ECHO	"Temporary Variable", __pieceShapeBuffer, "overflow!"
     10 U00e8				  -	      ERR
     11 U00e8					      ENDIF
     12 U00e8					      LIST	ON
      0 U00e8					      VAR	__ptr, 2
      1 U00e8				   __ptr      SET	TEMPORARY_VAR
      2 U00e8				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3 U00e8
      4 U00e8				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00e8					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00e8				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00e8					      ENDIF
      8 U00e8				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00e8				  -	      ECHO	"Temporary Variable", __ptr, "overflow!"
     10 U00e8				  -	      ERR
     11 U00e8					      ENDIF
     12 U00e8					      LIST	ON
      0 U00e8					      VAR	__ptr2, 2
      1 U00e8				   __ptr2     SET	TEMPORARY_VAR
      2 U00e8				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3 U00e8
      4 U00e8				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00e8					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00e8				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00e8					      ENDIF
      8 U00e8				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00e8				  -	      ECHO	"Temporary Variable", __ptr2, "overflow!"
     10 U00e8				  -	      ERR
     11 U00e8					      ENDIF
     12 U00e8					      LIST	ON
     74 U00e8
     75 U00e8							;---------------------------------------------------------------------------------------------------
     76 U00e8
     77 U00e8
     78 U00e8					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
     79 U00e8					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
     80 U00e8					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
     81 U00e8
     82 U00e8							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00e8					      include	"stack.asm"
      1 U00e8							; Chess
      2 U00e8							; Atari 2600 Chess display system
      3 U00e8							; Copyright (c) 2019-2020 Andrew Davie
      4 U00e8							; andrew@taswegian.com
      5 U00e8
      6 U00e8
      7 U00e8		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00e8
      9 U00e8		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00f4
     11 U00f4							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00f4							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00f4							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    393 U00f4
 FREE BYTES IN ZERO PAGE =  $b
    394 U00f4					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    395 U00f4				  -	      IF	* > $FF
    396 U00f4				  -	      ERR	"Zero Page overflow!"
    397 U00f4					      ENDIF
    398 U00f4
    399 U00f4							;------------------------------------------------------------------------------
    400 U00f4							;##############################################################################
    401 U00f4							;------------------------------------------------------------------------------
    402 U00f4
    403 U00f4							; NOW THE VERY INTERESTING '3E' RAM BANKS
    404 U00f4							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    405 U00f4							; IN A 2K MEMORY SPACE
    406 U00f4
      0 U00f4					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00f4
      2 U00f4
      3 U00f4
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    408 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    408 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    408 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    408 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    408 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    408 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    408 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    411 U1c00					      REPEND
    412 U1c00
    413 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    414 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    415 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    416 U1c00
    417 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    418 U1c00							; is that we can use that code to switch between banks, and the system will happily
    419 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    420 U1c00
    421 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    422 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    423 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    424 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    425 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    426 U1c00
    427 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    428 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    429 U1c00
    430 U1c00							;------------------------------------------------------------------------------
    431 U1c00
    432 U1c00
    433 U1c00							;---------------------------------------------------------------------------------------------------
    434 U1c00
    435 U1c00
    436 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    437 U1c00
    438 U1c00					      MAC	next_random
    439 U1c00					      lda	rnd
    440 U1c00					      lsr
    441 U1c00					      bcc	.skipEOR
    442 U1c00					      eor	#RND_EOR_VAL
    443 U1c00				   .skipEOR   sta	rnd
    444 U1c00					      ENDM
    445 U1c00
    446 U1c00							;--------------------------------------------------------------------------------
    447 U1c00
    448 U1c00					      MAC	phase
    449 U1c00					      lda	#{1}
    450 U1c00					      sta	aiState
    451 U1c00					      ENDM		;#
    452 U1c00
    453 U1c00							;--------------------------------------------------------------------------------
    454 U1c00
    455 U1c00							;ORIGIN      SET 0
    456 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00
     12 U1c00							; = 76 for single square (empty/take)
     13 U1c00
     14 U1c00					      ldx	currentSquare	; 3
     15 U1c00					      bne	.project	; 3   unconditional
     16 U1c00
     17 U1c00				   .empty     jsr	AddMove	; 57
     18 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     19 U1c00					      bmi	.invalid	; 2/3 off board!
     20 U1c00					      lda	Board,y	; 4   piece @ destination
     21 U1c00					      beq	.empty	; 2/3
     22 U1c00					      eor	currentPiece	; 3
     23 U1c00					      bpl	.invalid	; 2/3 same colour
     24 U1c00					      jsr	AddMove	; 57  and exit
     25 U1c00
     26 U1c00				   .invalid
     27 U1c00					      ENDM
     28 U1c00
     29 U1c00
     30 U1c00							;---------------------------------------------------------------------------------------------------
     31 U1c00
     32 U1c00					      MAC	move_to
     33 U1c00					      SUBROUTINE
     34 U1c00					      ldy	ValidSquare+{1},x
     35 U1c00					      bmi	.invalid	; off board!
     36 U1c00					      lda	Board,y	; piece @ destination
     37 U1c00					      beq	.squareEmpty
     38 U1c00					      eor	currentPiece
     39 U1c00					      bpl	.invalid	; same colour
     40 U1c00				   .squareEmpty jsr	AddMove
     41 U1c00				   .invalid
     42 U1c00					      ENDM
     43 U1c00
     44 U1c00
     45 U1c00							;---------------------------------------------------------------------------------------------------
     46 U1c00
     47 U1c00					      MAC	move_to_x
     48 U1c00					      ldx	currentSquare
     49 U1c00					      MOVE_TO	{1}
     50 U1c00					      ENDM
     51 U1c00
     52 U1c00
     53 U1c00							;---------------------------------------------------------------------------------------------------
     54 U1c00							; EOF
------- FILE ./chess.asm
    458 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  07d8 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
     15  0004
     16  0004							;---------------------------------------------------------------------------------------------------
     17  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     18  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     19  0004							; bank finishes.  Just continue on from where it left off...
     20  0004							;---------------------------------------------------------------------------------------------------
     21  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004				   Cart_Init
      3  0004				   TEMPORARY_VAR SET	Overlay
      4  0004				   TEMPORARY_OFFSET SET	0
      5  0004					      SUBROUTINE
     23  0004					      SUBROUTINE
     24  0004
     25  0004		       a9 00		      lda	#0
     26  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     27  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     28  000c		       85 6b		      sta	HMCLR
     29  000e
     30  000e							; cleanup remains of title screen
     31  000e		       85 5b		      sta	GRP0
     32  0010		       85 5c		      sta	GRP1
     33  0012
     34  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     35  0014		       85 44		      sta	NUSIZ0
     36  0016		       85 45		      sta	NUSIZ1
     37  0018
     38  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     39  001a		       85 4a		      sta	CTRLPF
     40  001c
     41  001c		       60		      rts
     42  001d
     43  001d
     44  001d							;---------------------------------------------------------------------------------------------------
     45  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d				   Resync
      3  001d				   TEMPORARY_VAR SET	Overlay
      4  001d				   TEMPORARY_OFFSET SET	0
      5  001d					      SUBROUTINE
     47  001d					      SUBROUTINE
     48  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 9b		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     50  0040		       60		      rts
     51  0041
     52  0041
     53  0041							;---------------------------------------------------------------------------------------------------
     54  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041				   aiStartClearBoard
      3  0041				   TEMPORARY_VAR SET	Overlay
      4  0041				   TEMPORARY_OFFSET SET	0
      5  0041					      SUBROUTINE
     56  0041					      SUBROUTINE
     57  0041
     58  0041		       a2 08		      ldx	#8
     59  0043		       86 84		      stx	drawCount	; = bank
     60  0045
     61  0045		       a9 ff		      lda	#-1
     62  0047		       85 88		      sta	cursorX12
     63  0049
      0  0049					      PHASE	AI_ClearEachRow
      1  0049		       a9 0e		      lda	#AI_ClearEachRow
      2  004b		       85 8c		      sta	aiState
     65  004d		       60		      rts
     66  004e
     67  004e							;---------------------------------------------------------------------------------------------------
     68  004e
      0  004e					      DEF	aiClearEachRow
      1  004e				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  004e				   aiClearEachRow
      3  004e				   TEMPORARY_VAR SET	Overlay
      4  004e				   TEMPORARY_OFFSET SET	0
      5  004e					      SUBROUTINE
     70  004e					      SUBROUTINE
     71  004e
     72  004e		       c6 84		      dec	drawCount
     73  0050		       30 05		      bmi	.bitmapCleared
     74  0052		       a4 84		      ldy	drawCount
     75  0054		       4c aa f8 	      jmp	CallClear
     76  0057
     77  0057				   .bitmapCleared
     78  0057
     79  0057		       a9 63		      lda	#99
     80  0059		       85 80		      sta	squareToDraw
     81  005b
      0  005b					      PHASE	AI_DrawEntireBoard
      1  005b		       a9 0f		      lda	#AI_DrawEntireBoard
      2  005d		       85 8c		      sta	aiState
     83  005f		       60		      rts
     84  0060
     85  0060
     86  0060							;---------------------------------------------------------------------------------------------------
     87  0060
      0  0060					      DEF	aiPrepForPhysicalMove
      1  0060				   BANK_aiPrepForPhysicalMove SET	_CURRENT_BANK
      2  0060				   aiPrepForPhysicalMove
      3  0060				   TEMPORARY_VAR SET	Overlay
      4  0060				   TEMPORARY_OFFSET SET	0
      5  0060					      SUBROUTINE
     89  0060					      SUBROUTINE
      0  0060					      TAG	MOVE_SELECTED (AI)
      1  0060
     91  0060
     92  0060
     93  0060							; Both computer and human have now seleted a move, and converge here
     94  0060
     95  0060
     96  0060							; fromPiece	 piece doing the move
     97  0060							; fromSquare	 starting square BASE64
     98  0060							; toSquare	 ending square BASE64
     99  0060							; fromX12	 current square X12
    100  0060							; originX12	 starting square X12
    101  0060							; toX12	 ending square X12
    102  0060
    103  0060							;    -previousPiece
    104  0060							;    +fromPiece
    105  0060
    106  0060
    107  0060
    108  0060		       a9 00		      lda	#BLANK
    109  0062		       85 9a		      sta	previousPiece
    110  0064
    111  0064
    112  0064							;TODO: evaluation mods
    113  0064
    114  0064
    115  0064				  -	      if	0
    116  0064				  -	      get	piece
    117  0064				  -	      eor	#128
    118  0064				  -	      cmp	#128	; negate colour --> C
    119  0064				  -
    120  0064				  -	      and	#PIECE_MASK
    121  0064				  -	      beq	.nopiece
    122  0064				  -
    123  0064				  -			;TOD: we're taking a piece - at this point we could adjust the
    124  0064				  -			; we've negated the colour so the captured piece will be negatively-added, so to speak
    125  0064				  -
    126  0064				  -	      tay
    127  0064				  -
    128  0064				  -	      ldx	#BANK_AddPieceMaterialValue
    129  0064				  -	      sta	SET_BANK
    130  0064				  -	      jsr	AddPieceMaterialValue
    131  0064					      endif
    132  0064
    133  0064
    134  0064
    135  0064
    136  0064							;lda toSquare
    137  0064							;cmp fromSquare
    138  0064							;beq .idleErase
    139  0064
    140  0064		       a9 06		      lda	#6	; on/off count
    141  0066		       85 84		      sta	drawCount	; flashing for piece about to move
    142  0068		       a9 00		      lda	#0
    143  006a		       85 82		      sta	drawDelay
    144  006c
      0  006c					      PHASE	AI_WriteStartPieceBlank
      1  006c		       a9 16		      lda	#AI_WriteStartPieceBlank
      2  006e		       85 8c		      sta	aiState
    146  0070		       60	   .idleErase rts
    147  0071
    148  0071
    149  0071							;---------------------------------------------------------------------------------------------------
    150  0071
      0  0071					      DEF	aiWriteStartPieceBlank
      1  0071				   BANK_aiWriteStartPieceBlank SET	_CURRENT_BANK
      2  0071				   aiWriteStartPieceBlank
      3  0071				   TEMPORARY_VAR SET	Overlay
      4  0071				   TEMPORARY_OFFSET SET	0
      5  0071					      SUBROUTINE
    152  0071					      SUBROUTINE
    153  0071
    154  0071							; Flash the piece in-place preparatory to moving it.
    155  0071							; drawDelay = flash speed
    156  0071							; drawCount = # of flashes
    157  0071
    158  0071		       a5 82		      lda	drawDelay
    159  0073		       f0 03		      beq	deCount
    160  0075		       c6 82		      dec	drawDelay
    161  0077		       60		      rts
    162  0078				   deCount
    163  0078
    164  0078		       a5 84		      lda	drawCount
    165  007a		       f0 0e		      beq	flashDone
    166  007c		       c6 84		      dec	drawCount
    167  007e
    168  007e		       a9 0a		      lda	#READY_TO_MOVE_FLASH
    169  0080		       85 82		      sta	drawDelay	; "getting ready to move" flash
    170  0082
    171  0082		       a5 85		      lda	fromX12
    172  0084		       85 80		      sta	squareToDraw
    173  0086
    174  0086		       20 92 fc 	      jsr	CopySinglePiece	; EOR-draw = flash
    175  0089		       60		      rts
    176  008a
      0  008a				   flashDone  PHASE	AI_MarchToTargetA
      1  008a		       a9 17		      lda	#AI_MarchToTargetA
      2  008c		       85 8c		      sta	aiState
    178  008e		       60		      rts
    179  008f
    180  008f
    181  008f							;---------------------------------------------------------------------------------------------------
    182  008f
      0  008f					      DEF	aiDrawPart2
      1  008f				   BANK_aiDrawPart2 SET	_CURRENT_BANK
      2  008f				   aiDrawPart2
      3  008f				   TEMPORARY_VAR SET	Overlay
      4  008f				   TEMPORARY_OFFSET SET	0
      5  008f					      SUBROUTINE
    184  008f					      SUBROUTINE
    185  008f
    186  008f		       20 92 fc 	      jsr	CopySinglePiece
    187  0092
      0  0092					      DEF	aiDrawPart3
      1  0092				   BANK_aiDrawPart3 SET	_CURRENT_BANK
      2  0092				   aiDrawPart3
      3  0092				   TEMPORARY_VAR SET	Overlay
      4  0092				   TEMPORARY_OFFSET SET	0
      5  0092					      SUBROUTINE
    189  0092					      SUBROUTINE
    190  0092
    191  0092		       c6 80		      dec	squareToDraw
    192  0094		       a5 80		      lda	squareToDraw
    193  0096		       c9 16		      cmp	#22
    194  0098		       90 05		      bcc	.comp
    195  009a
      0  009a					      PHASE	AI_DrawEntireBoard
      1  009a		       a9 0f		      lda	#AI_DrawEntireBoard
      2  009c		       85 8c		      sta	aiState
    197  009e		       60		      rts
    198  009f
      0  009f				   .comp      PHASE	AI_FlipBuffers
      1  009f		       a9 12		      lda	#AI_FlipBuffers
      2  00a1		       85 8c		      sta	aiState
    200  00a3		       60		      rts
    201  00a4
    202  00a4
    203  00a4
    204  00a4							;---------------------------------------------------------------------------------------------------
    205  00a4
      0  00a4					      DEF	aiMarchB
      1  00a4				   BANK_aiMarchB SET	_CURRENT_BANK
      2  00a4				   aiMarchB
      3  00a4				   TEMPORARY_VAR SET	Overlay
      4  00a4				   TEMPORARY_OFFSET SET	0
      5  00a4					      SUBROUTINE
    207  00a4					      SUBROUTINE
    208  00a4
    209  00a4							; Draw the piece in the new square
    210  00a4
    211  00a4		       a5 85		      lda	fromX12
    212  00a6		       85 80		      sta	squareToDraw
    213  00a8
    214  00a8		       20 92 fc 	      jsr	CopySinglePiece	; draw the moving piece into the new square
    215  00ab
    216  00ab		       a9 06		      lda	#6	; snail trail delay
    217  00ad		       85 82		      sta	drawDelay
    218  00af
      0  00af					      PHASE	AI_MarchToTargetB
      1  00af		       a9 19		      lda	#AI_MarchToTargetB
      2  00b1		       85 8c		      sta	aiState
    220  00b3		       60		      rts
    221  00b4
    222  00b4
    223  00b4							;---------------------------------------------------------------------------------------------------
    224  00b4
      0  00b4					      DEF	aiFinalFlash
      1  00b4				   BANK_aiFinalFlash SET	_CURRENT_BANK
      2  00b4				   aiFinalFlash
      3  00b4				   TEMPORARY_VAR SET	Overlay
      4  00b4				   TEMPORARY_OFFSET SET	0
      5  00b4					      SUBROUTINE
    226  00b4					      SUBROUTINE
    227  00b4
    228  00b4		       a5 82		      lda	drawDelay
    229  00b6		       f0 03		      beq	.deCount
    230  00b8		       c6 82		      dec	drawDelay
    231  00ba		       60		      rts
    232  00bb
    233  00bb		       a5 84	   .deCount   lda	drawCount
    234  00bd		       f0 0e		      beq	flashDone2
    235  00bf		       c6 84		      dec	drawCount
    236  00c1
    237  00c1		       a9 0a		      lda	#10
    238  00c3		       85 82		      sta	drawDelay	; "getting ready to move" flash
    239  00c5
    240  00c5		       a5 85		      lda	fromX12
    241  00c7		       85 80		      sta	squareToDraw
    242  00c9
    243  00c9		       20 92 fc 	      jsr	CopySinglePiece
    244  00cc		       60		      rts
    245  00cd
      0  00cd				   flashDone2 PHASE	AI_SpecialMoveFixup
      1  00cd		       a9 1c		      lda	#AI_SpecialMoveFixup
      2  00cf		       85 8c		      sta	aiState
    247  00d1		       60		      rts
    248  00d2
    249  00d2
    250  00d2							;---------------------------------------------------------------------------------------------------
    251  00d2
      0  00d2					      DEF	CastleFixup
      1  00d2				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00d2				   CastleFixup
      3  00d2				   TEMPORARY_VAR SET	Overlay
      4  00d2				   TEMPORARY_OFFSET SET	0
      5  00d2					      SUBROUTINE
    253  00d2					      SUBROUTINE
    254  00d2
    255  00d2							; fixup any castling issues
    256  00d2							; at this point the king has finished his two-square march
    257  00d2							; based on the finish square, we determine which rook we're interacting with
    258  00d2							; and generate a 'move' for the rook to position on the other side of the king
    259  00d2
    260  00d2
    261  00d2		       a5 98		      lda	fromPiece
    262  00d4		       29 10		      and	#FLAG_CASTLE
    263  00d6		       f0 2e		      beq	.noCast	; NOT involved in castle!
    264  00d8
    265  00d8		       a2 04		      ldx	#4
    266  00da		       a5 85		      lda	fromX12
    267  00dc		       ca	   .findCast  dex
    268  00dd		       30 27		      bmi	.noCast
    269  00df		       dd 07 f1 	      cmp	KSquare,x
    270  00e2		       d0 f8		      bne	.findCast
    271  00e4
    272  00e4		       20 41 f9 	      jsr	debug
    273  00e7
    274  00e7		       bd 0f f1 	      lda	RSquareEnd,x
    275  00ea		       85 86		      sta	toX12
    276  00ec		       bc 0b f1 	      ldy	RSquareStart,x
    277  00ef		       84 85		      sty	fromX12
    278  00f1		       84 87		      sty	originX12
    279  00f3
    280  00f3		       a5 98		      lda	fromPiece
    281  00f5		       29 80		      and	#128	; colour bit
    282  00f7		       09 05		      ora	#ROOK	; preserve colour
    283  00f9		       85 98		      sta	fromPiece
    284  00fb
      0  00fb					      PHASE	AI_PrepForPhysicalMove
      1  00fb		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  00fd		       85 8c		      sta	aiState
    286  00ff
    287  00ff							; in this siutation (castle, rook moving) we do not change sides yet!
    288  00ff							; SO we DO change sides so the later change is a no-change...
    289  00ff
    290  00ff		       a5 97		      lda	sideToMove
    291  0101		       49 80		      eor	#128
    292  0103		       85 97		      sta	sideToMove
    293  0105
    294  0105		       60		      rts
    295  0106
    296  0106				   .noCast
    297  0106
    298  0106
    299  0106		       60		      rts
    300  0107
    301  0107
    302  0107		       18 1c 5e 62 KSquare    .byte.b	24,28,94,98
    303  010b		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    304  010f		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    305  0113
    306  0113
    307  0113							;---------------------------------------------------------------------------------------------------
    308  0113
      0  0113					      DEF	SetupBanks
      1  0113				   BANK_SetupBanks SET	_CURRENT_BANK
      2  0113				   SetupBanks
      3  0113				   TEMPORARY_VAR SET	Overlay
      4  0113				   TEMPORARY_OFFSET SET	0
      5  0113					      SUBROUTINE
    310  0113					      SUBROUTINE
    311  0113
      0  0113					      VAR	__plyBank, 1
      1  0113				   __plyBank  SET	TEMPORARY_VAR
      2  0113				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  0113
      4  0113				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  0113				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  0113				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  0113					      ENDIF
      8  0113				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  0113				  -	      ECHO	"Temporary Variable", __plyBank, "overflow!"
     10  0113				  -	      ERR
     11  0113					      ENDIF
     12  0113					      LIST	ON
    313  0113
    314  0113							; SAFE
    315  0113
    316  0113		       a0 07		      ldy	#7
    317  0115		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    318  0117		       20 62 fc 	      jsr	CopyShadowROMtoRAM
    319  011a		       88		      dey
    320  011b		       10 f8		      bpl	.copyRowBanks
    321  011d
    322  011d							; copy the BOARD/MOVES bank
    323  011d
    324  011d		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    325  011f		       a2 0a		      ldx	#MOVES
    326  0121		       20 62 fc 	      jsr	CopyShadowROMtoRAM	; this auto-initialises Board too
    327  0124
    328  0124							; copy the PLY banks
    329  0124
    330  0124		       a9 06		      lda	#MAX_PLY
    331  0126		       85 9c		      sta	__plyBank
    332  0128		       a0 09		      ldy	#RAMBANK_PLY
    333  012a		       84 95		      sty	currentPly
    334  012c		       a2 0b	   .copyPlyBanks ldx	#BANK_PLY
    335  012e		       20 62 fc 	      jsr	CopyShadowROMtoRAM
    336  0131		       c8		      iny
    337  0132		       c6 9c		      dec	__plyBank
    338  0134		       d0 f6		      bne	.copyPlyBanks
    339  0136
    340  0136		       60		      rts
    341  0137
    342  0137
    343  0137							;---------------------------------------------------------------------------------------------------
    344  0137
      0  0137					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1"
      1  0137
      2  0137
      3  0137		       01 37	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (1K) SIZE =  $137 , FREE= $2c9
      4  0137					      ECHO	"GENERIC_BANK_1", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0137				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0137				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0137				  -	      ERR
      8  0137					      endif
    346  0137
    347  0137
    348  0137							;---------------------------------------------------------------------------------------------------
    349  0137
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  0137					      include	"piece_vectors.asm"
      1  0137							; Created by ConvertChessPieces.py
      0  0137					      DEF	PIECE_VECTOR_LO
      1  0137				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  0137				   PIECE_VECTOR_LO
      3  0137				   TEMPORARY_VAR SET	Overlay
      4  0137				   TEMPORARY_OFFSET SET	0
      5  0137					      SUBROUTINE
      3  0137		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  0138		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  0139		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  013a		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  013b		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  013c		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  013d		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  013e		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  013f		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  0140		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  0141		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  0142		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  0143		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  0144		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  0145		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  0146		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  0147		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  0148		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  0149		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  014a		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  014b		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  014c		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  014d		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  014e		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  014f		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  0150		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  0151		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  0152		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  0153		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  0154		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  0155		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  0156		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  0157		       48		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_0
     36  0158		       90		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_1
     37  0159		       00		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_2
     38  015a		       48		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_3
     39  015b		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     40  015c		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     41  015d		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     42  015e		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     43  015f		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     44  0160		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     45  0161		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     46  0162		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     47  0163		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     48  0164		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     49  0165		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     50  0166		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     51  0167		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     52  0168		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     53  0169		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     54  016a		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     55  016b		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     56  016c		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     57  016d		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     58  016e		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     59  016f		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     60  0170		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     61  0171		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     62  0172		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     63  0173		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     64  0174		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     65  0175		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     66  0176		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     67  0177		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     68  0178		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     69  0179		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     70  017a		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     71  017b		       00		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_0
     72  017c		       48		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_1
     73  017d		       90		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_2
     74  017e		       00		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_3
     75  017f		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     76  0180		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     77  0181		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     78  0182		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     79  0183		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     80  0184		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     81  0185		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     82  0186		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     83  0187		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     84  0188		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     85  0189		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     86  018a		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     87  018b		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     88  018c		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     89  018d		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     90  018e		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     91  018f		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     92  0190		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     93  0191		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     94  0192		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     95  0193		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     96  0194		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     97  0195		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     98  0196		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     99  0197		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
    100  0198		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
    101  0199		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
    102  019a		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
    103  019b		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
    104  019c		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
    105  019d		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
    106  019e		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
    107  019f		       48		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_0
    108  01a0		       90		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_1
    109  01a1		       00		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_2
    110  01a2		       48		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_3
    111  01a3		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    112  01a4		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    113  01a5		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    114  01a6		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    115  01a7		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    116  01a8		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    117  01a9		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    118  01aa		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    119  01ab		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    120  01ac		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    121  01ad		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    122  01ae		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    123  01af		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    124  01b0		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    125  01b1		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    126  01b2		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    127  01b3		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    128  01b4		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    129  01b5		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    130  01b6		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    131  01b7		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    132  01b8		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    133  01b9		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    134  01ba		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    135  01bb		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    136  01bc		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    137  01bd		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    138  01be		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    139  01bf		       38		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    140  01c0		       80		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    141  01c1		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    142  01c2		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
    143  01c3		       00		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_0
    144  01c4		       48		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_1
    145  01c5		       90		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_2
    146  01c6		       00		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  01c7					      DEF	PIECE_VECTOR_HI
      1  01c7				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  01c7				   PIECE_VECTOR_HI
      3  01c7				   TEMPORARY_VAR SET	Overlay
      4  01c7				   TEMPORARY_OFFSET SET	0
      5  01c7					      SUBROUTINE
    148  01c7		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    149  01c8		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    150  01c9		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    151  01ca		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    152  01cb		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    153  01cc		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    154  01cd		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    155  01ce		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    156  01cf		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    157  01d0		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    158  01d1		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    159  01d2		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    160  01d3		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    161  01d4		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    162  01d5		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    163  01d6		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    164  01d7		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    165  01d8		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    166  01d9		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    167  01da		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    168  01db		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    169  01dc		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    170  01dd		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    171  01de		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    172  01df		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    173  01e0		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    174  01e1		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    175  01e2		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    176  01e3		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    177  01e4		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    178  01e5		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    179  01e6		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    180  01e7		       f5		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_0
    181  01e8		       f5		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_1
    182  01e9		       f6		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_2
    183  01ea		       f6		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_3
    184  01eb		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    185  01ec		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    186  01ed		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    187  01ee		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    188  01ef		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    189  01f0		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    190  01f1		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    191  01f2		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    192  01f3		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    193  01f4		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    194  01f5		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    195  01f6		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    196  01f7		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    197  01f8		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    198  01f9		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    199  01fa		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    200  01fb		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    201  01fc		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    202  01fd		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    203  01fe		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    204  01ff		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    205  0200		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    206  0201		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    207  0202		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    208  0203		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    209  0204		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    210  0205		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    211  0206		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    212  0207		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    213  0208		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    214  0209		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    215  020a		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    216  020b		       f4		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_0
    217  020c		       f4		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_1
    218  020d		       f4		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_2
    219  020e		       f5		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_3
    220  020f		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    221  0210		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    222  0211		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    223  0212		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    224  0213		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    225  0214		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    226  0215		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    227  0216		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    228  0217		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    229  0218		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    230  0219		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    231  021a		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    232  021b		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    233  021c		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    234  021d		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    235  021e		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    236  021f		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    237  0220		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    238  0221		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    239  0222		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    240  0223		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    241  0224		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    242  0225		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    243  0226		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    244  0227		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    245  0228		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    246  0229		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    247  022a		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    248  022b		       f5		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    249  022c		       f6		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    250  022d		       f6		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    251  022e		       f6		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    252  022f		       f4		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_0
    253  0230		       f4		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_1
    254  0231		       f5		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_2
    255  0232		       f5		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_3
    256  0233		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    257  0234		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    258  0235		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    259  0236		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    260  0237		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    261  0238		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    262  0239		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    263  023a		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    264  023b		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    265  023c		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    266  023d		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    267  023e		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    268  023f		       f2		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    269  0240		       f2		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    270  0241		       f2		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    271  0242		       f3		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    272  0243		       f3		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    273  0244		       f3		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    274  0245		       f4		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    275  0246		       f4		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    276  0247		       f4		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    277  0248		       f5		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    278  0249		       f5		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    279  024a		       f5		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    280  024b		       f6		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    281  024c		       f6		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    282  024d		       f6		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    283  024e		       f7		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    284  024f		       f4		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    285  0250		       f4		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    286  0251		       f5		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    287  0252		       f5		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
    288  0253		       f3		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_0
    289  0254		       f3		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_1
    290  0255		       f3		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_2
    291  0256		       f4		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  0257					      DEF	PIECE_VECTOR_BANK
      1  0257				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  0257				   PIECE_VECTOR_BANK
      3  0257				   TEMPORARY_VAR SET	Overlay
      4  0257				   TEMPORARY_OFFSET SET	0
      5  0257					      SUBROUTINE
    293  0257		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    294  0258		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    295  0259		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    296  025a		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    297  025b		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    298  025c		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    299  025d		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    300  025e		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    301  025f		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    302  0260		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    303  0261		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    304  0262		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    305  0263		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    306  0264		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    307  0265		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    308  0266		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    309  0267		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    310  0268		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    311  0269		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    312  026a		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    313  026b		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    314  026c		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    315  026d		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    316  026e		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    317  026f		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    318  0270		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    319  0271		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    320  0272		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    321  0273		       00		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    322  0274		       00		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    323  0275		       00		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    324  0276		       09		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    325  0277		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0
    326  0278		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1
    327  0279		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2
    328  027a		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3
    329  027b		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    330  027c		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    331  027d		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    332  027e		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    333  027f		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    334  0280		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    335  0281		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    336  0282		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    337  0283		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    338  0284		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    339  0285		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    340  0286		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    341  0287		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    342  0288		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    343  0289		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    344  028a		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    345  028b		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    346  028c		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    347  028d		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    348  028e		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    349  028f		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    350  0290		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    351  0291		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    352  0292		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    353  0293		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    354  0294		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    355  0295		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    356  0296		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    357  0297		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    358  0298		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    359  0299		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    360  029a		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    361  029b		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0
    362  029c		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1
    363  029d		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2
    364  029e		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3
    365  029f		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    366  02a0		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    367  02a1		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    368  02a2		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    369  02a3		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    370  02a4		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    371  02a5		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    372  02a6		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    373  02a7		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    374  02a8		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    375  02a9		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    376  02aa		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    377  02ab		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    378  02ac		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    379  02ad		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    380  02ae		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    381  02af		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    382  02b0		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    383  02b1		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    384  02b2		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    385  02b3		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    386  02b4		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    387  02b5		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    388  02b6		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    389  02b7		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    390  02b8		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    391  02b9		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    392  02ba		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    393  02bb		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    394  02bc		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    395  02bd		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    396  02be		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    397  02bf		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0
    398  02c0		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1
    399  02c1		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2
    400  02c2		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3
    401  02c3		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    402  02c4		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    403  02c5		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    404  02c6		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    405  02c7		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    406  02c8		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    407  02c9		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    408  02ca		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    409  02cb		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    410  02cc		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    411  02cd		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    412  02ce		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    413  02cf		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    414  02d0		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    415  02d1		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    416  02d2		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    417  02d3		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    418  02d4		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    419  02d5		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    420  02d6		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    421  02d7		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    422  02d8		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    423  02d9		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    424  02da		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    425  02db		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    426  02dc		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    427  02dd		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    428  02de		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    429  02df		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    430  02e0		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    431  02e1		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    432  02e2		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    433  02e3		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0
    434  02e4		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1
    435  02e5		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2
    436  02e6		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3
    437  02e7
    438  02e7							; piece index equates...
    439  02e7		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    440  02e7		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    441  02e7		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    442  02e7		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    443  02e7		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    444  02e7		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    445  02e7		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    446  02e7		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    447  02e7		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    448  02e7		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    449  02e7		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    450  02e7		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    451  02e7		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    452  02e7		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    453  02e7		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    454  02e7		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    455  02e7		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    456  02e7		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    457  02e7		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    458  02e7		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    459  02e7		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    460  02e7		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    461  02e7		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    462  02e7		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    463  02e7		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    464  02e7		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    465  02e7		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    466  02e7		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    467  02e7		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    468  02e7		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    469  02e7		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    470  02e7		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    471  02e7		       00 20	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0 =	32
    472  02e7		       00 21	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_1 =	33
    473  02e7		       00 22	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_2 =	34
    474  02e7		       00 23	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_3 =	35
    475  02e7		       00 24	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	36
    476  02e7		       00 25	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	37
    477  02e7		       00 26	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	38
    478  02e7		       00 27	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	39
    479  02e7		       00 28	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	40
    480  02e7		       00 29	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	41
    481  02e7		       00 2a	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	42
    482  02e7		       00 2b	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	43
    483  02e7		       00 2c	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	44
    484  02e7		       00 2d	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	45
    485  02e7		       00 2e	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	46
    486  02e7		       00 2f	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	47
    487  02e7		       00 30	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	48
    488  02e7		       00 31	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	49
    489  02e7		       00 32	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	50
    490  02e7		       00 33	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	51
    491  02e7		       00 34	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	52
    492  02e7		       00 35	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	53
    493  02e7		       00 36	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	54
    494  02e7		       00 37	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	55
    495  02e7		       00 38	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	56
    496  02e7		       00 39	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	57
    497  02e7		       00 3a	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	58
    498  02e7		       00 3b	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	59
    499  02e7		       00 3c	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	60
    500  02e7		       00 3d	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	61
    501  02e7		       00 3e	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	62
    502  02e7		       00 3f	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	63
    503  02e7		       00 40	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	64
    504  02e7		       00 41	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	65
    505  02e7		       00 42	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	66
    506  02e7		       00 43	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	67
    507  02e7		       00 44	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_0 =	68
    508  02e7		       00 45	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_1 =	69
    509  02e7		       00 46	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_2 =	70
    510  02e7		       00 47	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_3 =	71
    511  02e7		       00 48	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	72
    512  02e7		       00 49	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	73
    513  02e7		       00 4a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	74
    514  02e7		       00 4b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	75
    515  02e7		       00 4c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	76
    516  02e7		       00 4d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	77
    517  02e7		       00 4e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	78
    518  02e7		       00 4f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	79
    519  02e7		       00 50	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	80
    520  02e7		       00 51	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	81
    521  02e7		       00 52	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	82
    522  02e7		       00 53	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	83
    523  02e7		       00 54	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	84
    524  02e7		       00 55	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	85
    525  02e7		       00 56	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	86
    526  02e7		       00 57	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	87
    527  02e7		       00 58	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	88
    528  02e7		       00 59	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	89
    529  02e7		       00 5a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	90
    530  02e7		       00 5b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	91
    531  02e7		       00 5c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	92
    532  02e7		       00 5d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	93
    533  02e7		       00 5e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	94
    534  02e7		       00 5f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	95
    535  02e7		       00 60	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	96
    536  02e7		       00 61	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	97
    537  02e7		       00 62	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	98
    538  02e7		       00 63	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	99
    539  02e7		       00 64	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	100
    540  02e7		       00 65	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	101
    541  02e7		       00 66	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	102
    542  02e7		       00 67	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	103
    543  02e7		       00 68	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_0 =	104
    544  02e7		       00 69	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_1 =	105
    545  02e7		       00 6a	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_2 =	106
    546  02e7		       00 6b	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_3 =	107
    547  02e7		       00 6c	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	108
    548  02e7		       00 6d	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	109
    549  02e7		       00 6e	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	110
    550  02e7		       00 6f	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	111
    551  02e7		       00 70	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	112
    552  02e7		       00 71	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	113
    553  02e7		       00 72	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	114
    554  02e7		       00 73	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	115
    555  02e7		       00 74	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	116
    556  02e7		       00 75	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	117
    557  02e7		       00 76	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	118
    558  02e7		       00 77	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	119
    559  02e7		       00 78	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	120
    560  02e7		       00 79	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	121
    561  02e7		       00 7a	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	122
    562  02e7		       00 7b	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	123
    563  02e7		       00 7c	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	124
    564  02e7		       00 7d	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	125
    565  02e7		       00 7e	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	126
    566  02e7		       00 7f	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	127
    567  02e7		       00 80	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	128
    568  02e7		       00 81	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	129
    569  02e7		       00 82	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	130
    570  02e7		       00 83	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	131
    571  02e7		       00 84	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	132
    572  02e7		       00 85	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	133
    573  02e7		       00 86	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	134
    574  02e7		       00 87	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	135
    575  02e7		       00 88	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	136
    576  02e7		       00 89	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	137
    577  02e7		       00 8a	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	138
    578  02e7		       00 8b	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	139
    579  02e7		       00 8c	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_0 =	140
    580  02e7		       00 8d	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_1 =	141
    581  02e7		       00 8e	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_2 =	142
    582  02e7		       00 8f	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_3 =	143
------- FILE BANK_GENERIC.asm
    351  02e7
    352  02e7							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
    353  02e7							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
    354  02e7							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
    355  02e7							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
    356  02e7							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
    357  02e7							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
    358  02e7							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
    359  02e7							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
    360  02e7
    361  02e7							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm"
    362  02e7							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm"
    363  02e7							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm"
    364  02e7							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm"
    365  02e7							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm"
    366  02e7							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm"
    367  02e7							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm"
    368  02e7							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm"
    369  02e7
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  02e7					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  02e7					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_0", 72
     12  0300					      LIST	ON
      0  0300					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_0
      1  0300				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  0300				   BLACK_PROMOTE_on_BLACK_SQUARE_0
      3  0300				   TEMPORARY_VAR SET	Overlay
      4  0300				   TEMPORARY_OFFSET SET	0
      5  0300					      SUBROUTINE
      3  0300		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  0348					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  0348					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_1", 72
     12  0348					      LIST	ON
      0  0348					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_1
      1  0348				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  0348				   BLACK_PROMOTE_on_BLACK_SQUARE_1
      3  0348				   TEMPORARY_VAR SET	Overlay
      4  0348				   TEMPORARY_OFFSET SET	0
      5  0348					      SUBROUTINE
      3  0348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0360		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  0390					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  0390					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_2", 72
     12  0390					      LIST	ON
      0  0390					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_2
      1  0390				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  0390				   BLACK_PROMOTE_on_BLACK_SQUARE_2
      3  0390				   TEMPORARY_VAR SET	Overlay
      4  0390				   TEMPORARY_OFFSET SET	0
      5  0390					      SUBROUTINE
      3  0390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  03a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  03c0		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  03d8					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  03d8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_3", 72
     12  0400					      LIST	ON
      0  0400					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_3
      1  0400				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  0400				   BLACK_PROMOTE_on_BLACK_SQUARE_3
      3  0400				   TEMPORARY_VAR SET	Overlay
      4  0400				   TEMPORARY_OFFSET SET	0
      5  0400					      SUBROUTINE
      3  0400		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0430		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  0448					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  0448					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_0", 72
     12  0448					      LIST	ON
      0  0448					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_0
      1  0448				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  0448				   BLACK_PROMOTE_on_WHITE_SQUARE_0
      3  0448				   TEMPORARY_VAR SET	Overlay
      4  0448				   TEMPORARY_OFFSET SET	0
      5  0448					      SUBROUTINE
      3  0448		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  0460		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  0490					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  0490					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_1", 72
     12  0490					      LIST	ON
      0  0490					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_1
      1  0490				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  0490				   BLACK_PROMOTE_on_WHITE_SQUARE_1
      3  0490				   TEMPORARY_VAR SET	Overlay
      4  0490				   TEMPORARY_OFFSET SET	0
      5  0490					      SUBROUTINE
      3  0490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  04a8		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  04c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  04d8					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  04d8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_2", 72
     12  0500					      LIST	ON
      0  0500					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_2
      1  0500				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  0500				   BLACK_PROMOTE_on_WHITE_SQUARE_2
      3  0500				   TEMPORARY_VAR SET	Overlay
      4  0500				   TEMPORARY_OFFSET SET	0
      5  0500					      SUBROUTINE
      3  0500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  0530		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  0548					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  0548					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_3", 72
     12  0548					      LIST	ON
      0  0548					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_3
      1  0548				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  0548				   BLACK_PROMOTE_on_WHITE_SQUARE_3
      3  0548				   TEMPORARY_VAR SET	Overlay
      4  0548				   TEMPORARY_OFFSET SET	0
      5  0548					      SUBROUTINE
      3  0548		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0578		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE BANK_GENERIC.asm
    378  0590
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  0590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  0590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     12  0590					      LIST	ON
      0  0590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  0590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  0590				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  0590				   TEMPORARY_VAR SET	Overlay
      4  0590				   TEMPORARY_OFFSET SET	0
      5  0590					      SUBROUTINE
      3  0590		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  05a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  05c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  05d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  05d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     12  0600					      LIST	ON
      0  0600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  0600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  0600				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  0600				   TEMPORARY_VAR SET	Overlay
      4  0600				   TEMPORARY_OFFSET SET	0
      5  0600					      SUBROUTINE
      3  0600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0618		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  0630		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  0648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  0648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
     12  0648					      LIST	ON
      0  0648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  0648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  0648				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  0648				   TEMPORARY_VAR SET	Overlay
      4  0648				   TEMPORARY_OFFSET SET	0
      5  0648					      SUBROUTINE
      3  0648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0678		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  0690					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  0690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     12  0690					      LIST	ON
      0  0690					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  0690				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  0690				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  0690				   TEMPORARY_VAR SET	Overlay
      4  0690				   TEMPORARY_OFFSET SET	0
      5  0690					      SUBROUTINE
      3  0690		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  06a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  06c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  06d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  06d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     12  0700					      LIST	ON
      0  0700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  0700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  0700				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  0700				   TEMPORARY_VAR SET	Overlay
      4  0700				   TEMPORARY_OFFSET SET	0
      5  0700					      SUBROUTINE
      3  0700		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0718		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  0748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  0748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
     12  0748					      LIST	ON
      0  0748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  0748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  0748				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  0748				   TEMPORARY_VAR SET	Overlay
      4  0748				   TEMPORARY_OFFSET SET	0
      5  0748					      SUBROUTINE
      3  0748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0760		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0778		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  0790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  0790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     12  0790					      LIST	ON
      0  0790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  0790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  0790				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  0790				   TEMPORARY_VAR SET	Overlay
      4  0790				   TEMPORARY_OFFSET SET	0
      5  0790					      SUBROUTINE
      3  0790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  07a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  07c0		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
    386  07d8
      0  07d8					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  07d8		       07 d8	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $7d8 , FREE= $28
      2  07d8					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  07d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  07d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  07d8				  -	      ERR
      6  07d8					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  07d8					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  07d8
      0  07d8					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0b36 ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a6	   COLOUR_LINE_1 =	$a6
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 2a	   COLOUR_LINE_3 =	$2A
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800
     18  0800
     19  0800							; good/contrast
     20  0800							;COLOUR_LINE_1 = $a6
     21  0800							;COLOUR_LINE_2 = $4a
     22  0800							;COLOUR_LINE_3 = $2A
     23  0800
     24  0800							;COLOUR_LINE_1 = $94 ; square col
     25  0800							;COLOUR_LINE_2 = $C6
     26  0800							;COLOUR_LINE_3 = $48
     27  0800							;BACKGCOL	= 0 ;$F0
     28  0800
     29  0800
     30  0800							; good 94/46/28/0
     31  0800							; good 94/44/26/0
     32  0800
     33  0800
     34  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     35  0800
     36  0800
      0  0800					      ALLOCATE	ChessBitmap, ROW_BITMAP_SIZE
      0  0800					      OPTIONAL_PAGEBREAK	"Table", ROW_BITMAP_SIZE
     12  0800					      LIST	ON
      0  0800					      DEF	ChessBitmap
      1  0800				   BANK_ChessBitmap SET	_CURRENT_BANK
      2  0800				   ChessBitmap
      3  0800				   TEMPORARY_VAR SET	Overlay
      4  0800				   TEMPORARY_OFFSET SET	0
      5  0800					      SUBROUTINE
     38  0800		       00 00 00 00*ChessBitmap0 ds	24
     39  0818		       00 00 00 00*ChessBitmap1 ds	24
     40  0830		       00 00 00 00*ChessBitmap2 ds	24
     41  0848		       00 00 00 00*ChessBitmap3 ds	24
     42  0860		       00 00 00 00*ChessBitmap4 ds	24
     43  0878		       00 00 00 00*ChessBitmap5 ds	24
     44  0890
      0  0890					      ALLOCATE	BlankSprite, 8
      0  0890					      OPTIONAL_PAGEBREAK	"Table", 8
     12  0890					      LIST	ON
      0  0890					      DEF	BlankSprite
      1  0890				   BANK_BlankSprite SET	_CURRENT_BANK
      2  0890				   BlankSprite
      3  0890				   TEMPORARY_VAR SET	Overlay
      4  0890				   TEMPORARY_OFFSET SET	0
      5  0890					      SUBROUTINE
     46  0890		       00 00 00 00*	      ds	8, 0
     47  0898
      0  0898					      ALLOCATE	SpriteBuffer, 24
      0  0898					      OPTIONAL_PAGEBREAK	"Table", 24
     12  0898					      LIST	ON
      0  0898					      DEF	SpriteBuffer
      1  0898				   BANK_SpriteBuffer SET	_CURRENT_BANK
      2  0898				   SpriteBuffer
      3  0898				   TEMPORARY_VAR SET	Overlay
      4  0898				   TEMPORARY_OFFSET SET	0
      5  0898					      SUBROUTINE
     49  0898				   SpriteBuffer2
     50  0898					      REPEAT	24
     51  0898		       f8		      .byte.b	%11111000
     50  0898					      REPEND
     51  0899		       f8		      .byte.b	%11111000
     50  0899					      REPEND
     51  089a		       f8		      .byte.b	%11111000
     50  089a					      REPEND
     51  089b		       f8		      .byte.b	%11111000
     50  089b					      REPEND
     51  089c		       f8		      .byte.b	%11111000
     50  089c					      REPEND
     51  089d		       f8		      .byte.b	%11111000
     50  089d					      REPEND
     51  089e		       f8		      .byte.b	%11111000
     50  089e					      REPEND
     51  089f		       f8		      .byte.b	%11111000
     50  089f					      REPEND
     51  08a0		       f8		      .byte.b	%11111000
     50  08a0					      REPEND
     51  08a1		       f8		      .byte.b	%11111000
     50  08a1					      REPEND
     51  08a2		       f8		      .byte.b	%11111000
     50  08a2					      REPEND
     51  08a3		       f8		      .byte.b	%11111000
     50  08a3					      REPEND
     51  08a4		       f8		      .byte.b	%11111000
     50  08a4					      REPEND
     51  08a5		       f8		      .byte.b	%11111000
     50  08a5					      REPEND
     51  08a6		       f8		      .byte.b	%11111000
     50  08a6					      REPEND
     51  08a7		       f8		      .byte.b	%11111000
     50  08a7					      REPEND
     51  08a8		       f8		      .byte.b	%11111000
     50  08a8					      REPEND
     51  08a9		       f8		      .byte.b	%11111000
     50  08a9					      REPEND
     51  08aa		       f8		      .byte.b	%11111000
     50  08aa					      REPEND
     51  08ab		       f8		      .byte.b	%11111000
     50  08ab					      REPEND
     51  08ac		       f8		      .byte.b	%11111000
     50  08ac					      REPEND
     51  08ad		       f8		      .byte.b	%11111000
     50  08ad					      REPEND
     51  08ae		       f8		      .byte.b	%11111000
     50  08ae					      REPEND
     51  08af		       f8		      .byte.b	%11111000
     52  08b0					      REPEND
     53  08b0
      0  08b0					      ALLOCATE	BackupBitmap, ROW_BITMAP_SIZE
      0  08b0					      OPTIONAL_PAGEBREAK	"Table", ROW_BITMAP_SIZE
     12  0900					      LIST	ON
      0  0900					      DEF	BackupBitmap
      1  0900				   BANK_BackupBitmap SET	_CURRENT_BANK
      2  0900				   BackupBitmap
      3  0900				   TEMPORARY_VAR SET	Overlay
      4  0900				   TEMPORARY_OFFSET SET	0
      5  0900					      SUBROUTINE
     55  0900		       00 00 00 00*	      ds	ROW_BITMAP_SIZE, 0
     56  0990
     57  0990							;---------------------------------------------------------------------------------------------------
     58  0990
      0  0990					      DEF	ClearRowBitmap
      1  0990				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  0990				   ClearRowBitmap
      3  0990				   TEMPORARY_VAR SET	Overlay
      4  0990				   TEMPORARY_OFFSET SET	0
      5  0990					      SUBROUTINE
     60  0990					      SUBROUTINE
     61  0990
     62  0990		       a9 00		      lda	#0
     63  0992		       a0 90		      ldy	#ROW_BITMAP_SIZE
     64  0994		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     65  0997		       88		      dey
     66  0998		       d0 fa		      bne	.clearRow
     67  099a		       60		      rts
     68  099b
     69  099b
     70  099b							;---------------------------------------------------------------------------------------------------
     71  099b
      0  099b					      DEF	CopyPieceToRowBitmap
      1  099b				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  099b				   CopyPieceToRowBitmap
      3  099b				   TEMPORARY_VAR SET	Overlay
      4  099b				   TEMPORARY_OFFSET SET	0
      5  099b					      SUBROUTINE
     73  099b					      SUBROUTINE
     74  099b
     75  099b		       a0 11		      ldy	#17
     76  099d		       b0 30		      bcs	.rightSide
     77  099f
     78  099f		       b9 9c 00    .copyPiece lda	__pieceShapeBuffer,y
     79  09a2		       f0 06		      beq	.blank1
     80  09a4		       59 00 f0 	      eor	ChessBitmap,y
     81  09a7		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
     82  09aa
     83  09aa		       b9 ae 00    .blank1    lda	__pieceShapeBuffer+18,y
     84  09ad		       f0 06		      beq	.blank2
     85  09af		       59 12 f0 	      eor	ChessBitmap+18,y
     86  09b2		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
     87  09b5
     88  09b5		       b9 c0 00    .blank2    lda	__pieceShapeBuffer+36,y
     89  09b8		       f0 06		      beq	.blank3
     90  09ba		       59 24 f0 	      eor	ChessBitmap+36,y
     91  09bd		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
     92  09c0
     93  09c0		       b9 d2 00    .blank3    lda	__pieceShapeBuffer+54,y
     94  09c3		       f0 06		      beq	.blank4
     95  09c5		       59 36 f0 	      eor	ChessBitmap+54,y
     96  09c8		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
     97  09cb
     98  09cb		       88	   .blank4    dey
     99  09cc		       10 d1		      bpl	.copyPiece
    100  09ce		       60		      rts
    101  09cf
    102  09cf				   .rightSide
    103  09cf
    104  09cf					      SUBROUTINE
    105  09cf
    106  09cf		       b9 9c 00    .copyPieceR lda	__pieceShapeBuffer,y
    107  09d2		       f0 06		      beq	.blank1
    108  09d4		       59 48 f0 	      eor	ChessBitmap+72,y
    109  09d7		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    110  09da
    111  09da		       b9 ae 00    .blank1    lda	__pieceShapeBuffer+18,y
    112  09dd		       f0 06		      beq	.blank2
    113  09df		       59 5a f0 	      eor	ChessBitmap+72+18,y
    114  09e2		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    115  09e5
    116  09e5		       b9 c0 00    .blank2    lda	__pieceShapeBuffer+36,y
    117  09e8		       f0 06		      beq	.blank3
    118  09ea		       59 6c f0 	      eor	ChessBitmap+72+36,y
    119  09ed		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    120  09f0
    121  09f0		       b9 d2 00    .blank3    lda	__pieceShapeBuffer+54,y
    122  09f3		       f0 06		      beq	.blank4
    123  09f5		       59 7e f0 	      eor	ChessBitmap+72+54,y
    124  09f8		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    125  09fb
    126  09fb		       88	   .blank4    dey
    127  09fc		       10 d1		      bpl	.copyPieceR
    128  09fe		       60		      rts
    129  09ff
    130  09ff
    131  09ff							;---------------------------------------------------------------------------------------------------
    132  09ff
    133  0a00		       00		      ALIGN	256
    134  0a00
    135  0a00							; x = row # (and bank#)
    136  0a00
    137  0a00				   .endline
    138  0a00
    139  0a00							;@59
    140  0a00
    141  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    142  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    143  0a00				   SELFMOD_RTS_ON_LAST_ROW
    144  0a00
    145  0a00		       e8		      inx		; 2
    146  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    147  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03				   DrawRow
      3  0a03				   TEMPORARY_VAR SET	Overlay
      4  0a03				   TEMPORARY_OFFSET SET	0
      5  0a03					      SUBROUTINE
    149  0a03
    150  0a03							;@64
    151  0a03		       a0 07		      ldy	#7	; 2
    152  0a05		       10 3b		      bpl	.dl2	; 3   (must be 69 here)
    153  0a07
    154  0a07							;@58...
    155  0a07
    156  0a07				   .l3
    157  0a07
    158  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    159  0a0a		       85 5b		      sta	GRP0	; 3
    160  0a0c		       b9 a8 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    161  0a0f		       85 5c		      sta	GRP1	; 3
    162  0a11
    163  0a11							;@-4
    164  0a11
    165  0a11		       a9 a6		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    166  0a13		       85 48		      sta	COLUPF	; 3 @1
    167  0a15
    168  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    169  0a18		       85 4d		      sta	PF0	; 3
    170  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    171  0a1d		       85 4e		      sta	PF1	; 3
    172  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    173  0a22		       85 4f		      sta	PF2	; 3 @22
    174  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    176  0a27
    177  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    178  0a2a		       85 4d		      sta	PF0	; 3
    179  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    180  0a2f		       85 4e		      sta	PF1	; 3
    181  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    182  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    183  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    185  0a39
    186  0a39		       88		      dey		; 2
    187  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    188  0a3c
    189  0a3c							;@57
    190  0a3c				   .drawLine
    191  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    193  0a42
    194  0a42				   .dl2
    195  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    196  0a45		       85 5b		      sta	GRP0	; 3
    197  0a47		       b9 98 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    198  0a4a		       85 5c		      sta	GRP1	; 3
    199  0a4c
    200  0a4c							;@7
    201  0a4c
    202  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    203  0a4e		       85 48		      sta	COLUPF	; 3 @12
    204  0a50
    205  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    206  0a53		       85 4d		      sta	PF0	; 3
    207  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    208  0a58		       85 4e		      sta	PF1	; 3
    209  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    210  0a5d		       85 4f		      sta	PF2	; 3 @33
    211  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    213  0a61
    214  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    215  0a64		       85 4d		      sta	PF0	; 3
    216  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    217  0a69		       85 4e		      sta	PF1	; 3
    218  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    219  0a6e		       85 4f		      sta	PF2	; 3 @57
    220  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    222  0a73
    223  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    224  0a76		       85 5b		      sta	GRP0	; 3
    225  0a78		       b9 a0 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    226  0a7b		       85 5c		      sta	GRP1	; 3
    227  0a7d
    228  0a7d							;@0
    229  0a7d		       a9 2a		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    230  0a7f		       85 48		      sta	COLUPF	; 3 @5
    231  0a81
    232  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    233  0a84		       85 4d		      sta	PF0	; 3
    234  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    235  0a89		       85 4e		      sta	PF1	; 3
    236  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    237  0a8e		       85 4f		      sta	PF2	; 3 @26
    238  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    240  0a94
    241  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    242  0a97		       85 4d		      sta	PF0	; 3
    243  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    244  0a9c		       85 4e		      sta	PF1	; 3
    245  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    246  0aa1		       85 4f		      sta	PF2	; 3 @55
    247  0aa3
    248  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    249  0aa6
    250  0aa6
    251  0aa6							;---------------------------------------------------------------------------------------------------
    252  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6				   WriteBlank
      3  0aa6				   TEMPORARY_VAR SET	Overlay
      4  0aa6				   TEMPORARY_OFFSET SET	0
      5  0aa6					      SUBROUTINE
    254  0aa6					      SUBROUTINE
    255  0aa6
    256  0aa6		       a9 90		      lda	#<BlankSprite
    257  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    258  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    259  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    260  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    261  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    262  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    263  0aba
    264  0aba		       a9 f0		      lda	#>BlankSprite
    265  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    266  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    267  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    268  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    269  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    270  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    271  0ace
    272  0ace		       60		      rts
    273  0acf
    274  0acf
    275  0acf							;---------------------------------------------------------------------------------------------------
    276  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf				   WriteCursor
      3  0acf				   TEMPORARY_VAR SET	Overlay
      4  0acf				   TEMPORARY_OFFSET SET	0
      5  0acf					      SUBROUTINE
    278  0acf					      SUBROUTINE
    279  0acf
    280  0acf		       38		      sec
    281  0ad0		       a5 88		      lda	cursorX12
    282  0ad2		       30 1f		      bmi	.exit
    283  0ad4		       a2 0a		      ldx	#10
    284  0ad6		       e9 0a	   .sub10     sbc	#10
    285  0ad8		       ca		      dex
    286  0ad9		       b0 fb		      bcs	.sub10
    287  0adb
    288  0adb		       86 3e		      stx	SET_BANK_RAM
    289  0add		       a9 98		      lda	#<SpriteBuffer
    290  0adf		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    291  0ae2		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    292  0ae5		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    293  0ae8		       a9 f0		      lda	#>SpriteBuffer
    294  0aea		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    295  0aed		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    296  0af0		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    297  0af3
    298  0af3		       60	   .exit      rts
    299  0af4
    300  0af4
    301  0af4							;---------------------------------------------------------------------------------------------------
    302  0af4
      0  0af4					      DEF	SaveBitmap
      1  0af4				   BANK_SaveBitmap SET	_CURRENT_BANK
      2  0af4				   SaveBitmap
      3  0af4				   TEMPORARY_VAR SET	Overlay
      4  0af4				   TEMPORARY_OFFSET SET	0
      5  0af4					      SUBROUTINE
    304  0af4					      SUBROUTINE
    305  0af4
    306  0af4		       a0 47		      ldy	#71
    307  0af6		       b9 00 f0    .fromTo    lda	ChessBitmap,y
    308  0af9		       99 00 f5 	      sta	BackupBitmap+RAM_WRITE,y
    309  0afc		       b9 48 f0 	      lda	ChessBitmap+72,y
    310  0aff		       99 48 f5 	      sta	BackupBitmap+72+RAM_WRITE,y
    311  0b02		       88		      dey
    312  0b03		       10 f1		      bpl	.fromTo
    313  0b05		       60		      rts
    314  0b06
    315  0b06
    316  0b06							;---------------------------------------------------------------------------------------------------
    317  0b06
      0  0b06					      DEF	RestoreBitmap
      1  0b06				   BANK_RestoreBitmap SET	_CURRENT_BANK
      2  0b06				   RestoreBitmap
      3  0b06				   TEMPORARY_VAR SET	Overlay
      4  0b06				   TEMPORARY_OFFSET SET	0
      5  0b06					      SUBROUTINE
    319  0b06					      SUBROUTINE
    320  0b06
    321  0b06		       a0 47		      ldy	#71
    322  0b08		       b9 00 f1    .fromTo    lda	BackupBitmap,y
    323  0b0b		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    324  0b0e		       b9 48 f1 	      lda	BackupBitmap+72,y
    325  0b11		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
    326  0b14		       88		      dey
    327  0b15		       10 f1		      bpl	.fromTo
    328  0b17		       60		      rts
    329  0b18
    330  0b18
    331  0b18							;---------------------------------------------------------------------------------------------------
    332  0b18
      0  0b18					      DEF	CopyTextToRowBitmap
      1  0b18				   BANK_CopyTextToRowBitmap SET	_CURRENT_BANK
      2  0b18				   CopyTextToRowBitmap
      3  0b18				   TEMPORARY_VAR SET	Overlay
      4  0b18				   TEMPORARY_OFFSET SET	0
      5  0b18					      SUBROUTINE
    334  0b18					      SUBROUTINE
    335  0b18
    336  0b18							; An OR-draw, used for placing matricies/text onscreen
    337  0b18							; Similar to the EOR - first copy data into __pieceShapeBuffer, then call this function
    338  0b18							; The draw can be bracketed by "SaveBitmap" and "RestoreBitmap" to leave screen
    339  0b18							; in original state once text disappears
    340  0b18
    341  0b18		       a0 47		      ldy	#71
    342  0b1a		       b0 0d		      bcs	.rightSide
    343  0b1c
    344  0b1c		       b9 9c 00    .copy      lda	__pieceShapeBuffer,y
    345  0b1f		       19 00 f0 	      ora	ChessBitmap,y
    346  0b22		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    347  0b25		       88		      dey
    348  0b26		       10 f4		      bpl	.copy
    349  0b28
    350  0b28		       60		      rts
    351  0b29
    352  0b29				   .rightSide
    353  0b29
    354  0b29					      SUBROUTINE
    355  0b29
    356  0b29		       b9 9c 00    .copy      lda	__pieceShapeBuffer,y
    357  0b2c		       19 48 f0 	      ora	ChessBitmap+72,y
    358  0b2f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    359  0b32		       88		      dey
    360  0b33		       10 f4		      bpl	.copy
    361  0b35
    362  0b35		       60		      rts
    363  0b36
    364  0b36
    365  0b36							;---------------------------------------------------------------------------------------------------
    366  0b36
      0  0b36					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0b36
      2  0b36
      3  0b36		       03 36	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $336 , FREE= $ca
      4  0b36					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0b36				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0b36				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0b36				  -	      ERR
      8  0b36					      endif
    368  0b36							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  0b36					      include	"BANK_CHESS_INCLUDES.asm"
      1  0b36							; Copyright (c) 2019-2020 Andrew Davie
      2  0b36							; andrew@taswegian.com
      3  0b36
      4  0b36
      5  0b36							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      6  0b36							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      7  0b36							; a single gif of the format..
      8  0b36							; a row of white pieces on black squares
      9  0b36							; a row of white pieces on white squares
     10  0b36							; a row of black pieces on black squares
     11  0b36							; a row of black pieces on white squares
     12  0b36
     13  0b36							; each row has the pieces ordered thus:
     14  0b36							; a blank, then pawn, knight, bishop, rook, queen, king
     15  0b36							; each piece is 5 pixels wide x 8 pixels deep
     16  0b36							; each pixel is from an 8-colour palette.
     17  0b36							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     18  0b36							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     19  0b36							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     20  0b36							; bit "b" becomes the second ICC pixel line (2)
     21  0b36							; bit "c" becomes the third ICC pixel line (3)
     22  0b36							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     23  0b36							; The tool produces 4 variants of the piece; shifted into the 4 squares
     24  0b36							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     25  0b36							; These 4 shifted positions are stored consecutively in the shape definition
     26  0b36
     27  0b36							; Example...
     28  0b36							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     29  0b36							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     30  0b36							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     31  0b36							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     32  0b36
     33  0b36							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     34  0b36							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     35  0b36							; actually have any data in PF1 or PF2.
     36  0b36
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  0b36					      include	"piece_graphics.asm"
      1  0b36							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0b36					      NEWBANK	PIECES_0
      1  17d8 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     12  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000				   TEMPORARY_VAR SET	Overlay
      4  1000				   TEMPORARY_OFFSET SET	0
      5  1000					      SUBROUTINE
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     12  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048				   TEMPORARY_VAR SET	Overlay
      4  1048				   TEMPORARY_OFFSET SET	0
      5  1048					      SUBROUTINE
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     12  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090				   TEMPORARY_VAR SET	Overlay
      4  1090				   TEMPORARY_OFFSET SET	0
      5  1090					      SUBROUTINE
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
     12  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100				   TEMPORARY_VAR SET	Overlay
      4  1100				   TEMPORARY_OFFSET SET	0
      5  1100					      SUBROUTINE
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     12  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148				   TEMPORARY_VAR SET	Overlay
      4  1148				   TEMPORARY_OFFSET SET	0
      5  1148					      SUBROUTINE
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     12  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190				   TEMPORARY_VAR SET	Overlay
      4  1190				   TEMPORARY_OFFSET SET	0
      5  1190					      SUBROUTINE
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
     12  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200				   TEMPORARY_VAR SET	Overlay
      4  1200				   TEMPORARY_OFFSET SET	0
      5  1200					      SUBROUTINE
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     12  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248				   TEMPORARY_VAR SET	Overlay
      4  1248				   TEMPORARY_OFFSET SET	0
      5  1248					      SUBROUTINE
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     12  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290				   TEMPORARY_VAR SET	Overlay
      4  1290				   TEMPORARY_OFFSET SET	0
      5  1290					      SUBROUTINE
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
     12  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300				   TEMPORARY_VAR SET	Overlay
      4  1300				   TEMPORARY_OFFSET SET	0
      5  1300					      SUBROUTINE
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     12  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348				   TEMPORARY_VAR SET	Overlay
      4  1348				   TEMPORARY_OFFSET SET	0
      5  1348					      SUBROUTINE
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     12  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390				   TEMPORARY_VAR SET	Overlay
      4  1390				   TEMPORARY_OFFSET SET	0
      5  1390					      SUBROUTINE
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
     12  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400				   TEMPORARY_VAR SET	Overlay
      4  1400				   TEMPORARY_OFFSET SET	0
      5  1400					      SUBROUTINE
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     12  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448				   TEMPORARY_VAR SET	Overlay
      4  1448				   TEMPORARY_OFFSET SET	0
      5  1448					      SUBROUTINE
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     12  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490				   TEMPORARY_VAR SET	Overlay
      4  1490				   TEMPORARY_OFFSET SET	0
      5  1490					      SUBROUTINE
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
     12  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500				   TEMPORARY_VAR SET	Overlay
      4  1500				   TEMPORARY_OFFSET SET	0
      5  1500					      SUBROUTINE
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     12  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548				   TEMPORARY_VAR SET	Overlay
      4  1548				   TEMPORARY_OFFSET SET	0
      5  1548					      SUBROUTINE
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     12  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590				   TEMPORARY_VAR SET	Overlay
      4  1590				   TEMPORARY_OFFSET SET	0
      5  1590					      SUBROUTINE
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
     12  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600				   TEMPORARY_VAR SET	Overlay
      4  1600				   TEMPORARY_OFFSET SET	0
      5  1600					      SUBROUTINE
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     12  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648				   TEMPORARY_VAR SET	Overlay
      4  1648				   TEMPORARY_OFFSET SET	0
      5  1648					      SUBROUTINE
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     12  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690				   TEMPORARY_VAR SET	Overlay
      4  1690				   TEMPORARY_OFFSET SET	0
      5  1690					      SUBROUTINE
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
     12  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700				   TEMPORARY_VAR SET	Overlay
      4  1700				   TEMPORARY_OFFSET SET	0
      5  1700					      SUBROUTINE
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     12  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748				   TEMPORARY_VAR SET	Overlay
      4  1748				   TEMPORARY_OFFSET SET	0
      5  1748					      SUBROUTINE
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     12  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790				   TEMPORARY_VAR SET	Overlay
      4  1790				   TEMPORARY_OFFSET SET	0
      5  1790					      SUBROUTINE
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  1fd8 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     12  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800				   TEMPORARY_VAR SET	Overlay
      4  1800				   TEMPORARY_OFFSET SET	0
      5  1800					      SUBROUTINE
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$70,$40,$e0,$40,$00,$00,$00,$a0,$80,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     12  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848				   TEMPORARY_VAR SET	Overlay
      4  1848				   TEMPORARY_OFFSET SET	0
      5  1848					      SUBROUTINE
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$70,$10,$38,$10,$00,$00,$00,$28,$08,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     12  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890				   TEMPORARY_VAR SET	Overlay
      4  1890				   TEMPORARY_OFFSET SET	0
      5  1890					      SUBROUTINE
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
     12  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900				   TEMPORARY_VAR SET	Overlay
      4  1900				   TEMPORARY_OFFSET SET	0
      5  1900					      SUBROUTINE
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$38,$20,$70,$20,$00,$00,$00,$50,$40,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     12  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948				   TEMPORARY_VAR SET	Overlay
      4  1948				   TEMPORARY_OFFSET SET	0
      5  1948					      SUBROUTINE
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     12  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990				   TEMPORARY_VAR SET	Overlay
      4  1990				   TEMPORARY_OFFSET SET	0
      5  1990					      SUBROUTINE
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
     12  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00				   TEMPORARY_VAR SET	Overlay
      4  1a00				   TEMPORARY_OFFSET SET	0
      5  1a00					      SUBROUTINE
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     12  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48				   TEMPORARY_VAR SET	Overlay
      4  1a48				   TEMPORARY_OFFSET SET	0
      5  1a48					      SUBROUTINE
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     12  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90				   TEMPORARY_VAR SET	Overlay
      4  1a90				   TEMPORARY_OFFSET SET	0
      5  1a90					      SUBROUTINE
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
     12  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00				   TEMPORARY_VAR SET	Overlay
      4  1b00				   TEMPORARY_OFFSET SET	0
      5  1b00					      SUBROUTINE
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     12  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48				   TEMPORARY_VAR SET	Overlay
      4  1b48				   TEMPORARY_OFFSET SET	0
      5  1b48					      SUBROUTINE
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     12  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90				   TEMPORARY_VAR SET	Overlay
      4  1b90				   TEMPORARY_OFFSET SET	0
      5  1b90					      SUBROUTINE
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
     12  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00				   TEMPORARY_VAR SET	Overlay
      4  1c00				   TEMPORARY_OFFSET SET	0
      5  1c00					      SUBROUTINE
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     12  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48				   TEMPORARY_VAR SET	Overlay
      4  1c48				   TEMPORARY_OFFSET SET	0
      5  1c48					      SUBROUTINE
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     12  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90				   TEMPORARY_VAR SET	Overlay
      4  1c90				   TEMPORARY_OFFSET SET	0
      5  1c90					      SUBROUTINE
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
     12  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00				   TEMPORARY_VAR SET	Overlay
      4  1d00				   TEMPORARY_OFFSET SET	0
      5  1d00					      SUBROUTINE
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     12  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48				   TEMPORARY_VAR SET	Overlay
      4  1d48				   TEMPORARY_OFFSET SET	0
      5  1d48					      SUBROUTINE
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     12  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90				   TEMPORARY_VAR SET	Overlay
      4  1d90				   TEMPORARY_OFFSET SET	0
      5  1d90					      SUBROUTINE
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
     12  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00				   TEMPORARY_VAR SET	Overlay
      4  1e00				   TEMPORARY_OFFSET SET	0
      5  1e00					      SUBROUTINE
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     12  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48				   TEMPORARY_VAR SET	Overlay
      4  1e48				   TEMPORARY_OFFSET SET	0
      5  1e48					      SUBROUTINE
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     12  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90				   TEMPORARY_VAR SET	Overlay
      4  1e90				   TEMPORARY_OFFSET SET	0
      5  1e90					      SUBROUTINE
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
     12  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00				   TEMPORARY_VAR SET	Overlay
      4  1f00				   TEMPORARY_OFFSET SET	0
      5  1f00					      SUBROUTINE
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     12  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48				   TEMPORARY_VAR SET	Overlay
      4  1f48				   TEMPORARY_OFFSET SET	0
      5  1f48					      SUBROUTINE
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     12  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90				   TEMPORARY_VAR SET	Overlay
      4  1f90				   TEMPORARY_OFFSET SET	0
      5  1f90					      SUBROUTINE
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  27d8 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     12  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000				   TEMPORARY_VAR SET	Overlay
      4  2000				   TEMPORARY_OFFSET SET	0
      5  2000					      SUBROUTINE
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     12  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048				   TEMPORARY_VAR SET	Overlay
      4  2048				   TEMPORARY_OFFSET SET	0
      5  2048					      SUBROUTINE
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     12  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090				   TEMPORARY_VAR SET	Overlay
      4  2090				   TEMPORARY_OFFSET SET	0
      5  2090					      SUBROUTINE
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
     12  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100				   TEMPORARY_VAR SET	Overlay
      4  2100				   TEMPORARY_OFFSET SET	0
      5  2100					      SUBROUTINE
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     12  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148				   TEMPORARY_VAR SET	Overlay
      4  2148				   TEMPORARY_OFFSET SET	0
      5  2148					      SUBROUTINE
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$70,$40,$e0,$40,$e0,$e0,$f0,$50,$70,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     12  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190				   TEMPORARY_VAR SET	Overlay
      4  2190				   TEMPORARY_OFFSET SET	0
      5  2190					      SUBROUTINE
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$70,$10,$38,$10,$38,$38,$7c,$54,$74,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
     12  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200				   TEMPORARY_VAR SET	Overlay
      4  2200				   TEMPORARY_OFFSET SET	0
      5  2200					      SUBROUTINE
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$01,$01,$03,$02,$03,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     12  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248				   TEMPORARY_VAR SET	Overlay
      4  2248				   TEMPORARY_OFFSET SET	0
      5  2248					      SUBROUTINE
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$38,$20,$70,$20,$70,$70,$f8,$a8,$b8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     12  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290				   TEMPORARY_VAR SET	Overlay
      4  2290				   TEMPORARY_OFFSET SET	0
      5  2290					      SUBROUTINE
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
     12  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300				   TEMPORARY_VAR SET	Overlay
      4  2300				   TEMPORARY_OFFSET SET	0
      5  2300					      SUBROUTINE
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     12  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348				   TEMPORARY_VAR SET	Overlay
      4  2348				   TEMPORARY_OFFSET SET	0
      5  2348					      SUBROUTINE
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     12  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390				   TEMPORARY_VAR SET	Overlay
      4  2390				   TEMPORARY_OFFSET SET	0
      5  2390					      SUBROUTINE
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
     12  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400				   TEMPORARY_VAR SET	Overlay
      4  2400				   TEMPORARY_OFFSET SET	0
      5  2400					      SUBROUTINE
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     12  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448				   TEMPORARY_VAR SET	Overlay
      4  2448				   TEMPORARY_OFFSET SET	0
      5  2448					      SUBROUTINE
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     12  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490				   TEMPORARY_VAR SET	Overlay
      4  2490				   TEMPORARY_OFFSET SET	0
      5  2490					      SUBROUTINE
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
     12  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500				   TEMPORARY_VAR SET	Overlay
      4  2500				   TEMPORARY_OFFSET SET	0
      5  2500					      SUBROUTINE
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     12  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548				   TEMPORARY_VAR SET	Overlay
      4  2548				   TEMPORARY_OFFSET SET	0
      5  2548					      SUBROUTINE
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     12  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590				   TEMPORARY_VAR SET	Overlay
      4  2590				   TEMPORARY_OFFSET SET	0
      5  2590					      SUBROUTINE
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$70,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
     12  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600				   TEMPORARY_VAR SET	Overlay
      4  2600				   TEMPORARY_OFFSET SET	0
      5  2600					      SUBROUTINE
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$01,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     12  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648				   TEMPORARY_VAR SET	Overlay
      4  2648				   TEMPORARY_OFFSET SET	0
      5  2648					      SUBROUTINE
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$38,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     12  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690				   TEMPORARY_VAR SET	Overlay
      4  2690				   TEMPORARY_OFFSET SET	0
      5  2690					      SUBROUTINE
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
     12  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700				   TEMPORARY_VAR SET	Overlay
      4  2700				   TEMPORARY_OFFSET SET	0
      5  2700					      SUBROUTINE
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     12  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748				   TEMPORARY_VAR SET	Overlay
      4  2748				   TEMPORARY_OFFSET SET	0
      5  2748					      SUBROUTINE
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     12  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790				   TEMPORARY_VAR SET	Overlay
      4  2790				   TEMPORARY_OFFSET SET	0
      5  2790					      SUBROUTINE
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  2fd8 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     12  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800				   TEMPORARY_VAR SET	Overlay
      4  2800				   TEMPORARY_OFFSET SET	0
      5  2800					      SUBROUTINE
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     12  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848				   TEMPORARY_VAR SET	Overlay
      4  2848				   TEMPORARY_OFFSET SET	0
      5  2848					      SUBROUTINE
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     12  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890				   TEMPORARY_VAR SET	Overlay
      4  2890				   TEMPORARY_OFFSET SET	0
      5  2890					      SUBROUTINE
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
     12  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900				   TEMPORARY_VAR SET	Overlay
      4  2900				   TEMPORARY_OFFSET SET	0
      5  2900					      SUBROUTINE
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     12  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948				   TEMPORARY_VAR SET	Overlay
      4  2948				   TEMPORARY_OFFSET SET	0
      5  2948					      SUBROUTINE
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     12  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990				   TEMPORARY_VAR SET	Overlay
      4  2990				   TEMPORARY_OFFSET SET	0
      5  2990					      SUBROUTINE
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
     12  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00				   TEMPORARY_VAR SET	Overlay
      4  2a00				   TEMPORARY_OFFSET SET	0
      5  2a00					      SUBROUTINE
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     12  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48				   TEMPORARY_VAR SET	Overlay
      4  2a48				   TEMPORARY_OFFSET SET	0
      5  2a48					      SUBROUTINE
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     12  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90				   TEMPORARY_VAR SET	Overlay
      4  2a90				   TEMPORARY_OFFSET SET	0
      5  2a90					      SUBROUTINE
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$70,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
     12  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00				   TEMPORARY_VAR SET	Overlay
      4  2b00				   TEMPORARY_OFFSET SET	0
      5  2b00					      SUBROUTINE
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$70,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     12  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48				   TEMPORARY_VAR SET	Overlay
      4  2b48				   TEMPORARY_OFFSET SET	0
      5  2b48					      SUBROUTINE
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     12  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90				   TEMPORARY_VAR SET	Overlay
      4  2b90				   TEMPORARY_OFFSET SET	0
      5  2b90					      SUBROUTINE
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$38,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
     12  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00				   TEMPORARY_VAR SET	Overlay
      4  2c00				   TEMPORARY_OFFSET SET	0
      5  2c00					      SUBROUTINE
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     12  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48				   TEMPORARY_VAR SET	Overlay
      4  2c48				   TEMPORARY_OFFSET SET	0
      5  2c48					      SUBROUTINE
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     12  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90				   TEMPORARY_VAR SET	Overlay
      4  2c90				   TEMPORARY_OFFSET SET	0
      5  2c90					      SUBROUTINE
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
     12  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00				   TEMPORARY_VAR SET	Overlay
      4  2d00				   TEMPORARY_OFFSET SET	0
      5  2d00					      SUBROUTINE
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     12  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48				   TEMPORARY_VAR SET	Overlay
      4  2d48				   TEMPORARY_OFFSET SET	0
      5  2d48					      SUBROUTINE
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     12  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90				   TEMPORARY_VAR SET	Overlay
      4  2d90				   TEMPORARY_OFFSET SET	0
      5  2d90					      SUBROUTINE
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
     12  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00				   TEMPORARY_VAR SET	Overlay
      4  2e00				   TEMPORARY_OFFSET SET	0
      5  2e00					      SUBROUTINE
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     12  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48				   TEMPORARY_VAR SET	Overlay
      4  2e48				   TEMPORARY_OFFSET SET	0
      5  2e48					      SUBROUTINE
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     12  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90				   TEMPORARY_VAR SET	Overlay
      4  2e90				   TEMPORARY_OFFSET SET	0
      5  2e90					      SUBROUTINE
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
     12  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00				   TEMPORARY_VAR SET	Overlay
      4  2f00				   TEMPORARY_OFFSET SET	0
      5  2f00					      SUBROUTINE
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     12  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48				   TEMPORARY_VAR SET	Overlay
      4  2f48				   TEMPORARY_OFFSET SET	0
      5  2f48					      SUBROUTINE
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     12  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90				   TEMPORARY_VAR SET	Overlay
      4  2f90				   TEMPORARY_OFFSET SET	0
      5  2f90					      SUBROUTINE
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
    107  2fd8							;    NEWBANK PIECES_4
    108  2fd8
    109  2fd8							;    CHECK_BANK_SIZE "PIECES_4 (2K)"
    110  2fd8
    111  2fd8							;    NEWBANK PIECES_5
    112  2fd8
    113  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm"
    114  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm"
    115  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm"
    116  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm"
    117  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm"
    118  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm"
    119  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm"
    120  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm"
    121  2fd8
    122  2fd8
    123  2fd8				  -	      if	0
    124  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    125  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    126  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    127  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    128  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    129  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    130  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    131  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    132  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    133  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    134  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    135  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    136  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    137  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    138  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    139  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    140  2fd8					      endif
    141  2fd8							;    CHECK_BANK_SIZE "PIECES_5 (2K)"
    142  2fd8
    143  2fd8				  -	      if	0
    144  2fd8				  -	      NEWBANK	PIECES_6
    145  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    146  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    147  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    148  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    149  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    150  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    151  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    152  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    153  2fd8				  -
    154  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    155  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    156  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    157  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    158  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    159  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    160  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    161  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    162  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    163  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    164  2fd8				  -
    165  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    166  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    167  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    168  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    169  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    170  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    171  2fd8				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    172  2fd8				  -
    173  2fd8				  -
    174  2fd8				  -	      NEWBANK	PIECES_7
    175  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    176  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    177  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    178  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    179  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    180  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    181  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    182  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    183  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    184  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    185  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    186  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    187  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    188  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    189  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    190  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    191  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    192  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    193  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    194  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    195  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    196  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    197  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    198  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    199  2fd8				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    200  2fd8				  -
    201  2fd8				  -
    202  2fd8				  -	      NEWBANK	PIECES_8
    203  2fd8				  -
    204  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    205  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    206  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    207  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    208  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    209  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    210  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    211  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    212  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    213  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    214  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    215  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    216  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    217  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    218  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    219  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    220  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    221  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    222  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    223  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    224  2fd8				  -
    225  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    226  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    227  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    228  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    229  2fd8				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    230  2fd8				  -
    231  2fd8					      endif
    232  2fd8
    233  2fd8							;    NEWBANK PIECES_9
    234  2fd8
    235  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    236  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    237  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    238  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    239  2fd8							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    240  2fd8
    241  2fd8				  -	      if	0
    242  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    243  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    244  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    245  2fd8					      endif
    246  2fd8
    247  2fd8							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    248  2fd8
    249  2fd8				  -	      if	0
    250  2fd8				  -
    251  2fd8				  -
    252  2fd8				  -
    253  2fd8				  -
    254  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    255  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    256  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    257  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    258  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    259  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    260  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    261  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    262  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    263  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    264  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    265  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    266  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    267  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    268  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    269  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    270  2fd8				  -
    271  2fd8				  -
    272  2fd8					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     38  2fd8
     39  2fd8							;    NEWBANK PIECE_VECTORS
     40  2fd8							;    include "piece_vectors.asm"
     41  2fd8							;    CHECK_BANK_SIZE "PIECE_VECTORS (2K)"
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 2
      0  2fd8					      include	"BANK_StateMachine.asm"
      0  2fd8					      NEWBANK	STATEMACHINE
      1  36d8 ????				      SEG	STATEMACHINE
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   STATEMACHINE SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	STATEMACHINE
      2  3000
      3  3000
      4  3000							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
      5  3000
      6  3000		       00 09	   PLAYER     =	RAMBANK_PLY
      7  3000		       00 0a	   OPPONENT   =	PLAYER + 1
      8  3000
      9  3000		       00 10	   CURSOR_MOVE_SPEED =	16
     10  3000		       00 14	   CAP_SPEED  =	20
     11  3000		       00 28	   HOLD_DELAY =	40
     12  3000
     13  3000
     14  3000							;---------------------------------------------------------------------------------------------------
     15  3000
     16  3000				   P	      SET	0
     17  3000					      MAC	ain
     18  3000				   AI_{1}     SET	P
     19  3000				   P	      SET	P+1
     20  3000					      ENDM
     21  3000
     22  3000					      MAC	lo
     23  3000					      .byte	<ai{1}
     24  3000					      ENDM
     25  3000
     26  3000					      MAC	hi
     27  3000					      .byte	>ai{1}
     28  3000					      ENDM
     29  3000
     30  3000					      MAC	bk
     31  3000					      .byte	BANK_ai{1}
     32  3000					      ENDM
     33  3000
     34  3000
     35  3000		       00 28	   ONCEPERFRAME =	40
     36  3000
     37  3000					      MAC	tabdef
     38  3000
     39  3000					      {1}	BeginSelectMovePhase
     40  3000					      {1}	SelectStartSquare
     41  3000					      {1}	StartSquareSelected
     42  3000					      {1}	DrawMoves
     43  3000					      {1}	ShowMoveCaptures
     44  3000					      {1}	SlowFlash
     45  3000					      {1}	UnDrawTargetSquares
     46  3000					      {1}	SelectDestinationSquare
     47  3000					      {1}	Quiescent
     48  3000					      {1}	ReselectDebounce
     49  3000					      {1}	StartMoveGen
     50  3000					      {1}	StepMoveGen
     51  3000					      {1}	LookForCheck
     52  3000					      {1}	StartClearBoard
     53  3000					      {1}	ClearEachRow
     54  3000					      {1}	DrawEntireBoard
     55  3000					      {1}	DrawPart2
     56  3000					      {1}	DrawPart3
     57  3000					      {1}	FlipBuffers
     58  3000					      {1}	GenerateMoves
     59  3000					      {1}	ComputerMove
     60  3000					      {1}	PrepForPhysicalMove
     61  3000					      {1}	WriteStartPieceBlank
     62  3000					      {1}	MarchToTargetA
     63  3000					      {1}	MarchB
     64  3000					      {1}	MarchToTargetB
     65  3000					      {1}	MarchB2
     66  3000					      {1}	FinalFlash
     67  3000					      {1}	SpecialMoveFixup
     68  3000					      {1}	InCheckBackup
     69  3000					      {1}	InCheckDelay
     70  3000					      {1}	PromotePawnStart
     71  3000					      {1}	RollPromotionPiece
     72  3000					      {1}	ChoosePromotePiece
     73  3000					      {1}	ChooseDebounce
     74  3000
     75  3000					      ENDM		; {1} = macro to use
     76  3000
      0  3000					      TABDEF	AIN
      1  3000
      0  3000					      AIN	BeginSelectMovePhase
      1  3000				   AI_BeginSelectMovePhase SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SelectStartSquare
      1  3000				   AI_SelectStartSquare SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StartSquareSelected
      1  3000				   AI_StartSquareSelected SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawMoves
      1  3000				   AI_DrawMoves SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ShowMoveCaptures
      1  3000				   AI_ShowMoveCaptures SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SlowFlash
      1  3000				   AI_SlowFlash SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	UnDrawTargetSquares
      1  3000				   AI_UnDrawTargetSquares SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SelectDestinationSquare
      1  3000				   AI_SelectDestinationSquare SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	Quiescent
      1  3000				   AI_Quiescent SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ReselectDebounce
      1  3000				   AI_ReselectDebounce SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StartMoveGen
      1  3000				   AI_StartMoveGen SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StepMoveGen
      1  3000				   AI_StepMoveGen SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	LookForCheck
      1  3000				   AI_LookForCheck SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StartClearBoard
      1  3000				   AI_StartClearBoard SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ClearEachRow
      1  3000				   AI_ClearEachRow SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawEntireBoard
      1  3000				   AI_DrawEntireBoard SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawPart2
      1  3000				   AI_DrawPart2 SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawPart3
      1  3000				   AI_DrawPart3 SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	FlipBuffers
      1  3000				   AI_FlipBuffers SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	GenerateMoves
      1  3000				   AI_GenerateMoves SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ComputerMove
      1  3000				   AI_ComputerMove SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	PrepForPhysicalMove
      1  3000				   AI_PrepForPhysicalMove SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	WriteStartPieceBlank
      1  3000				   AI_WriteStartPieceBlank SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchToTargetA
      1  3000				   AI_MarchToTargetA SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchB
      1  3000				   AI_MarchB  SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchToTargetB
      1  3000				   AI_MarchToTargetB SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchB2
      1  3000				   AI_MarchB2 SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	FinalFlash
      1  3000				   AI_FinalFlash SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SpecialMoveFixup
      1  3000				   AI_SpecialMoveFixup SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	InCheckBackup
      1  3000				   AI_InCheckBackup SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	InCheckDelay
      1  3000				   AI_InCheckDelay SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	PromotePawnStart
      1  3000				   AI_PromotePawnStart SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	RollPromotionPiece
      1  3000				   AI_RollPromotionPiece SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ChoosePromotePiece
      1  3000				   AI_ChoosePromotePiece SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ChooseDebounce
      1  3000				   AI_ChooseDebounce SET	P
      2  3000				   P	      SET	P+1
     37  3000
     78  3000
      0  3000					      DEF	AiVectorLO
      1  3000				   BANK_AiVectorLO SET	_CURRENT_BANK
      2  3000				   AiVectorLO
      3  3000				   TEMPORARY_VAR SET	Overlay
      4  3000				   TEMPORARY_OFFSET SET	0
      5  3000					      SUBROUTINE
      0  3000					      TABDEF	LO
      1  3000
      0  3000					      LO	BeginSelectMovePhase
      1  3000		       e0		      .byte.b	<aiBeginSelectMovePhase
      0  3001					      LO	SelectStartSquare
      1  3001		       f5		      .byte.b	<aiSelectStartSquare
      0  3002					      LO	StartSquareSelected
      1  3002		       53		      .byte.b	<aiStartSquareSelected
      0  3003					      LO	DrawMoves
      1  3003		       6e		      .byte.b	<aiDrawMoves
      0  3004					      LO	ShowMoveCaptures
      1  3004		       19		      .byte.b	<aiShowMoveCaptures
      0  3005					      LO	SlowFlash
      1  3005		       37		      .byte.b	<aiSlowFlash
      0  3006					      LO	UnDrawTargetSquares
      1  3006		       f7		      .byte.b	<aiUnDrawTargetSquares
      0  3007					      LO	SelectDestinationSquare
      1  3007		       9e		      .byte.b	<aiSelectDestinationSquare
      0  3008					      LO	Quiescent
      1  3008		       ea		      .byte.b	<aiQuiescent
      0  3009					      LO	ReselectDebounce
      1  3009		       e1		      .byte.b	<aiReselectDebounce
      0  300a					      LO	StartMoveGen
      1  300a		       7b		      .byte.b	<aiStartMoveGen
      0  300b					      LO	StepMoveGen
      1  300b		       8d		      .byte.b	<aiStepMoveGen
      0  300c					      LO	LookForCheck
      1  300c		       9f		      .byte.b	<aiLookForCheck
      0  300d					      LO	StartClearBoard
      1  300d		       41		      .byte.b	<aiStartClearBoard
      0  300e					      LO	ClearEachRow
      1  300e		       4e		      .byte.b	<aiClearEachRow
      0  300f					      LO	DrawEntireBoard
      1  300f		       b0		      .byte.b	<aiDrawEntireBoard
      0  3010					      LO	DrawPart2
      1  3010		       8f		      .byte.b	<aiDrawPart2
      0  3011					      LO	DrawPart3
      1  3011		       92		      .byte.b	<aiDrawPart3
      0  3012					      LO	FlipBuffers
      1  3012		       e4		      .byte.b	<aiFlipBuffers
      0  3013					      LO	GenerateMoves
      1  3013		       35		      .byte.b	<aiGenerateMoves
      0  3014					      LO	ComputerMove
      1  3014		       26		      .byte.b	<aiComputerMove
      0  3015					      LO	PrepForPhysicalMove
      1  3015		       60		      .byte.b	<aiPrepForPhysicalMove
      0  3016					      LO	WriteStartPieceBlank
      1  3016		       71		      .byte.b	<aiWriteStartPieceBlank
      0  3017					      LO	MarchToTargetA
      1  3017		       59		      .byte.b	<aiMarchToTargetA
      0  3018					      LO	MarchB
      1  3018		       a4		      .byte.b	<aiMarchB
      0  3019					      LO	MarchToTargetB
      1  3019		       1e		      .byte.b	<aiMarchToTargetB
      0  301a					      LO	MarchB2
      1  301a		       c8		      .byte.b	<aiMarchB2
      0  301b					      LO	FinalFlash
      1  301b		       b4		      .byte.b	<aiFinalFlash
      0  301c					      LO	SpecialMoveFixup
      1  301c		       42		      .byte.b	<aiSpecialMoveFixup
      0  301d					      LO	InCheckBackup
      1  301d		       c5		      .byte.b	<aiInCheckBackup
      0  301e					      LO	InCheckDelay
      1  301e		       d3		      .byte.b	<aiInCheckDelay
      0  301f					      LO	PromotePawnStart
      1  301f		       0a		      .byte.b	<aiPromotePawnStart
      0  3020					      LO	RollPromotionPiece
      1  3020		       2a		      .byte.b	<aiRollPromotionPiece
      0  3021					      LO	ChoosePromotePiece
      1  3021		       70		      .byte.b	<aiChoosePromotePiece
      0  3022					      LO	ChooseDebounce
      1  3022		       db		      .byte.b	<aiChooseDebounce
     37  3023
     81  3023
      0  3023					      DEF	AiVectorHI
      1  3023				   BANK_AiVectorHI SET	_CURRENT_BANK
      2  3023				   AiVectorHI
      3  3023				   TEMPORARY_VAR SET	Overlay
      4  3023				   TEMPORARY_OFFSET SET	0
      5  3023					      SUBROUTINE
      0  3023					      TABDEF	HI
      1  3023
      0  3023					      HI	BeginSelectMovePhase
      1  3023		       f0		      .byte.b	>aiBeginSelectMovePhase
      0  3024					      HI	SelectStartSquare
      1  3024		       f0		      .byte.b	>aiSelectStartSquare
      0  3025					      HI	StartSquareSelected
      1  3025		       f1		      .byte.b	>aiStartSquareSelected
      0  3026					      HI	DrawMoves
      1  3026		       f1		      .byte.b	>aiDrawMoves
      0  3027					      HI	ShowMoveCaptures
      1  3027		       f2		      .byte.b	>aiShowMoveCaptures
      0  3028					      HI	SlowFlash
      1  3028		       f2		      .byte.b	>aiSlowFlash
      0  3029					      HI	UnDrawTargetSquares
      1  3029		       f1		      .byte.b	>aiUnDrawTargetSquares
      0  302a					      HI	SelectDestinationSquare
      1  302a		       f2		      .byte.b	>aiSelectDestinationSquare
      0  302b					      HI	Quiescent
      1  302b		       f2		      .byte.b	>aiQuiescent
      0  302c					      HI	ReselectDebounce
      1  302c		       f2		      .byte.b	>aiReselectDebounce
      0  302d					      HI	StartMoveGen
      1  302d		       f0		      .byte.b	>aiStartMoveGen
      0  302e					      HI	StepMoveGen
      1  302e		       f0		      .byte.b	>aiStepMoveGen
      0  302f					      HI	LookForCheck
      1  302f		       f0		      .byte.b	>aiLookForCheck
      0  3030					      HI	StartClearBoard
      1  3030		       f0		      .byte.b	>aiStartClearBoard
      0  3031					      HI	ClearEachRow
      1  3031		       f0		      .byte.b	>aiClearEachRow
      0  3032					      HI	DrawEntireBoard
      1  3032		       f8		      .byte.b	>aiDrawEntireBoard
      0  3033					      HI	DrawPart2
      1  3033		       f0		      .byte.b	>aiDrawPart2
      0  3034					      HI	DrawPart3
      1  3034		       f0		      .byte.b	>aiDrawPart3
      0  3035					      HI	FlipBuffers
      1  3035		       f8		      .byte.b	>aiFlipBuffers
      0  3036					      HI	GenerateMoves
      1  3036		       f1		      .byte.b	>aiGenerateMoves
      0  3037					      HI	ComputerMove
      1  3037		       f9		      .byte.b	>aiComputerMove
      0  3038					      HI	PrepForPhysicalMove
      1  3038		       f0		      .byte.b	>aiPrepForPhysicalMove
      0  3039					      HI	WriteStartPieceBlank
      1  3039		       f0		      .byte.b	>aiWriteStartPieceBlank
      0  303a					      HI	MarchToTargetA
      1  303a		       f0		      .byte.b	>aiMarchToTargetA
      0  303b					      HI	MarchB
      1  303b		       f0		      .byte.b	>aiMarchB
      0  303c					      HI	MarchToTargetB
      1  303c		       f1		      .byte.b	>aiMarchToTargetB
      0  303d					      HI	MarchB2
      1  303d		       f0		      .byte.b	>aiMarchB2
      0  303e					      HI	FinalFlash
      1  303e		       f0		      .byte.b	>aiFinalFlash
      0  303f					      HI	SpecialMoveFixup
      1  303f		       f9		      .byte.b	>aiSpecialMoveFixup
      0  3040					      HI	InCheckBackup
      1  3040		       f0		      .byte.b	>aiInCheckBackup
      0  3041					      HI	InCheckDelay
      1  3041		       f0		      .byte.b	>aiInCheckDelay
      0  3042					      HI	PromotePawnStart
      1  3042		       f3		      .byte.b	>aiPromotePawnStart
      0  3043					      HI	RollPromotionPiece
      1  3043		       f3		      .byte.b	>aiRollPromotionPiece
      0  3044					      HI	ChoosePromotePiece
      1  3044		       f3		      .byte.b	>aiChoosePromotePiece
      0  3045					      HI	ChooseDebounce
      1  3045		       f3		      .byte.b	>aiChooseDebounce
     37  3046
     84  3046
      0  3046					      DEF	AiVectorBANK
      1  3046				   BANK_AiVectorBANK SET	_CURRENT_BANK
      2  3046				   AiVectorBANK
      3  3046				   TEMPORARY_VAR SET	Overlay
      4  3046				   TEMPORARY_OFFSET SET	0
      5  3046					      SUBROUTINE
      0  3046					      TABDEF	BK
      1  3046
      0  3046					      BK	BeginSelectMovePhase
      1  3046		       06		      .byte.b	BANK_aiBeginSelectMovePhase
      0  3047					      BK	SelectStartSquare
      1  3047		       06		      .byte.b	BANK_aiSelectStartSquare
      0  3048					      BK	StartSquareSelected
      1  3048		       06		      .byte.b	BANK_aiStartSquareSelected
      0  3049					      BK	DrawMoves
      1  3049		       06		      .byte.b	BANK_aiDrawMoves
      0  304a					      BK	ShowMoveCaptures
      1  304a		       06		      .byte.b	BANK_aiShowMoveCaptures
      0  304b					      BK	SlowFlash
      1  304b		       06		      .byte.b	BANK_aiSlowFlash
      0  304c					      BK	UnDrawTargetSquares
      1  304c		       06		      .byte.b	BANK_aiUnDrawTargetSquares
      0  304d					      BK	SelectDestinationSquare
      1  304d		       06		      .byte.b	BANK_aiSelectDestinationSquare
      0  304e					      BK	Quiescent
      1  304e		       06		      .byte.b	BANK_aiQuiescent
      0  304f					      BK	ReselectDebounce
      1  304f		       06		      .byte.b	BANK_aiReselectDebounce
      0  3050					      BK	StartMoveGen
      1  3050		       06		      .byte.b	BANK_aiStartMoveGen
      0  3051					      BK	StepMoveGen
      1  3051		       06		      .byte.b	BANK_aiStepMoveGen
      0  3052					      BK	LookForCheck
      1  3052		       06		      .byte.b	BANK_aiLookForCheck
      0  3053					      BK	StartClearBoard
      1  3053		       00		      .byte.b	BANK_aiStartClearBoard
      0  3054					      BK	ClearEachRow
      1  3054		       00		      .byte.b	BANK_aiClearEachRow
      0  3055					      BK	DrawEntireBoard
      1  3055		       0f		      .byte.b	BANK_aiDrawEntireBoard
      0  3056					      BK	DrawPart2
      1  3056		       00		      .byte.b	BANK_aiDrawPart2
      0  3057					      BK	DrawPart3
      1  3057		       00		      .byte.b	BANK_aiDrawPart3
      0  3058					      BK	FlipBuffers
      1  3058		       0f		      .byte.b	BANK_aiFlipBuffers
      0  3059					      BK	GenerateMoves
      1  3059		       09		      .byte.b	BANK_aiGenerateMoves
      0  305a					      BK	ComputerMove
      1  305a		       0f		      .byte.b	BANK_aiComputerMove
      0  305b					      BK	PrepForPhysicalMove
      1  305b		       00		      .byte.b	BANK_aiPrepForPhysicalMove
      0  305c					      BK	WriteStartPieceBlank
      1  305c		       00		      .byte.b	BANK_aiWriteStartPieceBlank
      0  305d					      BK	MarchToTargetA
      1  305d		       09		      .byte.b	BANK_aiMarchToTargetA
      0  305e					      BK	MarchB
      1  305e		       00		      .byte.b	BANK_aiMarchB
      0  305f					      BK	MarchToTargetB
      1  305f		       09		      .byte.b	BANK_aiMarchToTargetB
      0  3060					      BK	MarchB2
      1  3060		       09		      .byte.b	BANK_aiMarchB2
      0  3061					      BK	FinalFlash
      1  3061		       00		      .byte.b	BANK_aiFinalFlash
      0  3062					      BK	SpecialMoveFixup
      1  3062		       0f		      .byte.b	BANK_aiSpecialMoveFixup
      0  3063					      BK	InCheckBackup
      1  3063		       06		      .byte.b	BANK_aiInCheckBackup
      0  3064					      BK	InCheckDelay
      1  3064		       06		      .byte.b	BANK_aiInCheckDelay
      0  3065					      BK	PromotePawnStart
      1  3065		       06		      .byte.b	BANK_aiPromotePawnStart
      0  3066					      BK	RollPromotionPiece
      1  3066		       06		      .byte.b	BANK_aiRollPromotionPiece
      0  3067					      BK	ChoosePromotePiece
      1  3067		       06		      .byte.b	BANK_aiChoosePromotePiece
      0  3068					      BK	ChooseDebounce
      1  3068		       06		      .byte.b	BANK_aiChooseDebounce
     37  3069
     87  3069
     88  3069
     89  3069							;---------------------------------------------------------------------------------------------------
     90  3069
      0  3069					      DEF	AiSetupVectors
      1  3069				   BANK_AiSetupVectors SET	_CURRENT_BANK
      2  3069				   AiSetupVectors
      3  3069				   TEMPORARY_VAR SET	Overlay
      4  3069				   TEMPORARY_OFFSET SET	0
      5  3069					      SUBROUTINE
     92  3069					      SUBROUTINE
     93  3069
     94  3069							; State machine vector setup - points to current routine to execute
     95  3069
     96  3069		       a6 8c		      ldx	aiState
     97  306b		       bd 00 f0 	      lda	AiVectorLO,x
     98  306e		       85 e4		      sta	__ptr
     99  3070		       bd 23 f0 	      lda	AiVectorHI,x
    100  3073		       85 e5		      sta	__ptr+1
    101  3075
    102  3075		       bd 46 f0 	      lda	AiVectorBANK,x
    103  3078		       85 8b		      sta	savedBank
    104  307a
    105  307a		       60		      rts
    106  307b
    107  307b
    108  307b							;---------------------------------------------------------------------------------------------------
    109  307b
      0  307b					      DEF	aiStartMoveGen
      1  307b				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  307b				   aiStartMoveGen
      3  307b				   TEMPORARY_VAR SET	Overlay
      4  307b				   TEMPORARY_OFFSET SET	0
      5  307b					      SUBROUTINE
    111  307b					      SUBROUTINE
    112  307b
    113  307b							; To assist with castling, generate the moves for the opponent, giving us effectively
    114  307b							; a list of squares that are being attacked. The castling can't happen if the king is
    115  307b							; in check or if the squares it would have to move over are in check
    116  307b
    117  307b							; we don't need to worry about this if K has moved, or relevant R has moved or if
    118  307b							; the squares between are occupied. We can tell THAT by examining the movelist to see
    119  307b							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    120  307b
    121  307b		       a9 0a		      lda	#OPPONENT
    122  307d		       85 95		      sta	currentPly
    123  307f		       20 f0 f8 	      jsr	InitialiseMoveGeneration
    124  3082
    125  3082		       a5 97		      lda	sideToMove
    126  3084		       49 80		      eor	#128
    127  3086		       85 97		      sta	sideToMove	; for movegen to know
    128  3088
      0  3088					      PHASE	AI_StepMoveGen
      1  3088		       a9 0b		      lda	#AI_StepMoveGen
      2  308a		       85 8c		      sta	aiState
    130  308c		       60		      rts
    131  308d
    132  308d
    133  308d							;---------------------------------------------------------------------------------------------------
    134  308d
      0  308d					      DEF	aiStepMoveGen
      1  308d				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  308d				   aiStepMoveGen
      3  308d				   TEMPORARY_VAR SET	Overlay
      4  308d				   TEMPORARY_OFFSET SET	0
      5  308d					      SUBROUTINE
    136  308d					      SUBROUTINE
    137  308d
    138  308d							; Because we're (possibly) running with the screen on, processing time is very short and
    139  308d							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    140  308d							; this happens over multiple frames.
    141  308d
    142  308d
    143  308d		       20 fc f8 	      jsr	GenerateOneMove
    144  3090		       a5 96		      lda	piecelistIndex
    145  3092		       10 0a		      bpl	.wait	; not finished yet
    146  3094
    147  3094		       a5 97		      lda	sideToMove
    148  3096		       49 80		      eor	#128
    149  3098		       85 97		      sta	sideToMove
    150  309a
      0  309a					      PHASE	AI_LookForCheck
      1  309a		       a9 0c		      lda	#AI_LookForCheck
      2  309c		       85 8c		      sta	aiState
    152  309e		       60	   .wait      rts
    153  309f
    154  309f
    155  309f							;---------------------------------------------------------------------------------------------------
    156  309f
      0  309f					      DEF	aiLookForCheck
      1  309f				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  309f				   aiLookForCheck
      3  309f				   TEMPORARY_VAR SET	Overlay
      4  309f				   TEMPORARY_OFFSET SET	0
      5  309f					      SUBROUTINE
    158  309f					      SUBROUTINE
    159  309f
    160  309f							; now we've finished generating the opponent moves
    161  309f							; See if the square our king is on is an attacked square (that is, it appears as a TO
    162  309f							; square in the opponent's movelist)
    163  309f
    164  309f		       a9 09		      lda	#PLAYER
    165  30a1		       85 95		      sta	currentPly
    166  30a3		       20 17 fc 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    167  30a6
    168  30a6		       e6 95		      inc	currentPly
    169  30a8		       20 08 fd 	      jsr	SAFE_IsSquareUnderAttack
    170  30ab		       c6 95		      dec	currentPly
    171  30ad		       90 11		      bcc	.exit
    172  30af
    173  30af							; in check!
    174  30af
    175  30af		       a9 40		      lda	#$40
    176  30b1		       85 49		      sta	COLUBK
    177  30b3
    178  30b3		       a9 32		      lda	#50
    179  30b5		       85 89		      sta	mdelay
    180  30b7
    181  30b7		       a9 08		      lda	#8
    182  30b9		       85 84		      sta	drawCount	; row #
    183  30bb
      0  30bb					      PHASE	AI_InCheckBackup
      1  30bb		       a9 1d		      lda	#AI_InCheckBackup
      2  30bd		       85 8c		      sta	aiState
    185  30bf		       60		      rts
    186  30c0
      0  30c0				   .exit      PHASE	AI_BeginSelectMovePhase
      1  30c0		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  30c2		       85 8c		      sta	aiState
    188  30c4		       60		      rts
    189  30c5
    190  30c5
    191  30c5							;---------------------------------------------------------------------------------------------------
    192  30c5
      0  30c5					      DEF	aiInCheckBackup
      1  30c5				   BANK_aiInCheckBackup SET	_CURRENT_BANK
      2  30c5				   aiInCheckBackup
      3  30c5				   TEMPORARY_VAR SET	Overlay
      4  30c5				   TEMPORARY_OFFSET SET	0
      5  30c5					      SUBROUTINE
    194  30c5					      SUBROUTINE
    195  30c5
    196  30c5							; We're about to draw some large text on the screen
    197  30c5							; Make a backup copy of all of the row bitmaps, so that we can restore once text is done
    198  30c5
    199  30c5		       c6 84		      dec	drawCount
    200  30c7		       30 05		      bmi	.exit	; done all rows
    201  30c9		       a4 84		      ldy	drawCount
    202  30cb		       4c fe fc 	      jmp	SAFE_BackupBitmaps
    203  30ce
      0  30ce				   .exit      PHASE	AI_InCheckDelay
      1  30ce		       a9 1e		      lda	#AI_InCheckDelay
      2  30d0		       85 8c		      sta	aiState
    205  30d2		       60		      rts
    206  30d3
    207  30d3
    208  30d3							;---------------------------------------------------------------------------------------------------
    209  30d3
      0  30d3					      DEF	aiInCheckDelay
      1  30d3				   BANK_aiInCheckDelay SET	_CURRENT_BANK
      2  30d3				   aiInCheckDelay
      3  30d3				   TEMPORARY_VAR SET	Overlay
      4  30d3				   TEMPORARY_OFFSET SET	0
      5  30d3					      SUBROUTINE
    211  30d3					      SUBROUTINE
    212  30d3
    213  30d3		       c6 89		      dec	mdelay
    214  30d5		       d0 08		      bne	.exit
    215  30d7
    216  30d7		       a9 00		      lda	#0
    217  30d9		       85 49		      sta	COLUBK
    218  30db
      0  30db					      PHASE	AI_BeginSelectMovePhase
      1  30db		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  30dd		       85 8c		      sta	aiState
    220  30df		       60	   .exit      rts
    221  30e0
    222  30e0
    223  30e0							;---------------------------------------------------------------------------------------------------
    224  30e0
      0  30e0					      DEF	aiBeginSelectMovePhase
      1  30e0				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  30e0				   aiBeginSelectMovePhase
      3  30e0				   TEMPORARY_VAR SET	Overlay
      4  30e0				   TEMPORARY_OFFSET SET	0
      5  30e0					      SUBROUTINE
    226  30e0					      SUBROUTINE
    227  30e0
    228  30e0
    229  30e0		       a9 38		      lda	#$38
    230  30e2		       85 88		      sta	cursorX12
    231  30e4
    232  30e4		       a9 00		      lda	#0
    233  30e6		       85 89		      sta	mdelay	;?
    234  30e8		       85 8f		      sta	aiFlashPhase	;?
    235  30ea
    236  30ea		       a9 ff		      lda	#-1
    237  30ec		       85 85		      sta	fromX12
    238  30ee		       85 86		      sta	toX12
    239  30f0
      0  30f0					      PHASE	AI_SelectStartSquare
      1  30f0		       a9 01		      lda	#AI_SelectStartSquare
      2  30f2		       85 8c		      sta	aiState
    241  30f4		       60		      rts
    242  30f5
    243  30f5							;---------------------------------------------------------------------------------------------------
    244  30f5
      0  30f5					      DEF	aiSelectStartSquare
      1  30f5				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  30f5				   aiSelectStartSquare
      3  30f5				   TEMPORARY_VAR SET	Overlay
      4  30f5				   TEMPORARY_OFFSET SET	0
      5  30f5					      SUBROUTINE
    246  30f5					      SUBROUTINE
    247  30f5
    248  30f5		       20 5c f2 	      jsr	moveCursor
    249  30f8		       20 45 fc 	      jsr	SAFE_IsValidMoveFromSquare
    250  30fb
    251  30fb		       c6 8a		      dec	ccur	; pulse colour for valid squares
    252  30fd		       20 20 f1 	      jsr	setCursorColours
    253  3100
    254  3100		       98		      tya
    255  3101		       05 4c		      ora	INPT4
    256  3103		       30 04		      bmi	.exit	; illegal square or no button press
    257  3105
      0  3105					      PHASE	AI_StartSquareSelected
      1  3105		       a9 02		      lda	#AI_StartSquareSelected
      2  3107		       85 8c		      sta	aiState
    259  3109
    260  3109		       60	   .exit      rts
    261  310a
    262  310a							;---------------------------------------------------------------------------------------------------
    263  310a
      0  310a					      DEF	setCursorPriority
      1  310a				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  310a				   setCursorPriority
      3  310a				   TEMPORARY_VAR SET	Overlay
      4  310a				   TEMPORARY_OFFSET SET	0
      5  310a					      SUBROUTINE
    265  310a					      SUBROUTINE
    266  310a
    267  310a		       98		      tya
    268  310b		       48		      pha
    269  310c
    270  310c		       a2 04		      ldx	#%100
    271  310e
    272  310e		       a4 88		      ldy	cursorX12
    273  3110		       30 09		      bmi	.under
    274  3112		       20 2d fc 	      jsr	GetBoard
    275  3115		       c9 00		      cmp	#0
    276  3117		       d0 02		      bne	.under
    277  3119		       a2 00		      ldx	#0
    278  311b		       86 4a	   .under     stx	CTRLPF	; UNDER
    279  311d
    280  311d		       68		      pla
    281  311e		       a8		      tay
    282  311f		       60		      rts
    283  3120
    284  3120							;---------------------------------------------------------------------------------------------------
    285  3120
      0  3120					      DEF	setCursorColours
      1  3120				   BANK_setCursorColours SET	_CURRENT_BANK
      2  3120				   setCursorColours
      3  3120				   TEMPORARY_VAR SET	Overlay
      4  3120				   TEMPORARY_OFFSET SET	0
      5  3120					      SUBROUTINE
    287  3120					      SUBROUTINE
    288  3120
    289  3120							; pass y=-1 if move is NOT in the movelist
    290  3120							; preserve y
    291  3120
    292  3120		       a9 44		      lda	#$44
    293  3122
    294  3122		       c0 ff		      cpy	#-1
    295  3124		       f0 0a		      beq	.writeCursorCol	; NOT in the movelist
    296  3126
    297  3126		       a5 8a		      lda	ccur
    298  3128		       4a		      lsr
    299  3129		       4a		      lsr
    300  312a		       4a		      lsr
    301  312b		       29 03		      and	#3
    302  312d		       18		      clc
    303  312e		       69 c0		      adc	#$C0	;COLOUR_LINE_1
    304  3130
    305  3130		       85 46	   .writeCursorCol sta	COLUP0
    306  3132		       60		      rts
    307  3133
    308  3133
    309  3133							;---------------------------------------------------------------------------------------------------
    310  3133
    311  3133							;	    RLDU RLD  RL U RL	R DU R D  R  U R     LDU  LD   L U  L	  DU   D     U
    312  3133							;	    0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    313  3133
      0  3133					      ALLOCATE	JoyCombined, 16
      0  3133					      OPTIONAL_PAGEBREAK	"Table", 16
     12  3133					      LIST	ON
      0  3133					      DEF	JoyCombined
      1  3133				   BANK_JoyCombined SET	_CURRENT_BANK
      2  3133				   JoyCombined
      3  3133				   TEMPORARY_VAR SET	Overlay
      4  3133				   TEMPORARY_OFFSET SET	0
      5  3133					      SUBROUTINE
    315  3133		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1, -1, 0
    316  3143
      0  3143					      ALLOCATE	JoyMoveCursor, 16
      0  3143					      OPTIONAL_PAGEBREAK	"Table", 16
     12  3143					      LIST	ON
      0  3143					      DEF	JoyMoveCursor
      1  3143				   BANK_JoyMoveCursor SET	_CURRENT_BANK
      2  3143				   JoyMoveCursor
      3  3143				   TEMPORARY_VAR SET	Overlay
      4  3143				   TEMPORARY_OFFSET SET	0
      5  3143					      SUBROUTINE
    318  3143		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, -9, 11, 1, 0, -11, 9, -1, 0, -10, 10, 0
    319  3153
    320  3153
    321  3153							;---------------------------------------------------------------------------------------------------
    322  3153
      0  3153					      DEF	aiStartSquareSelected
      1  3153				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  3153				   aiStartSquareSelected
      3  3153				   TEMPORARY_VAR SET	Overlay
      4  3153				   TEMPORARY_OFFSET SET	0
      5  3153					      SUBROUTINE
    324  3153					      SUBROUTINE
    325  3153
    326  3153							; Mark all the valid moves for the selected piece on the board
    327  3153							; and then start pulsing the piece
    328  3153							; AND start choosing for selection of TO square
    329  3153
    330  3153							; Iterate the movelist and for all from squares which = drawPieceNumber
    331  3153							; then draw a BLANK at that square
    332  3153							; do 1 by one, when none found then increment state
    333  3153
    334  3153		       a5 88		      lda	cursorX12
    335  3155		       85 80		      sta	squareToDraw
    336  3157
    337  3157		       a9 0a		      lda	#10
    338  3159		       85 8d		      sta	aiFlashDelay
    339  315b
    340  315b		       a9 00		      lda	#0
    341  315d		       85 86		      sta	toX12	;aiToSquareX12
    342  315f		       85 8f		      sta	aiFlashPhase	; for debounce exit timing
    343  3161
    344  3161		       a9 ff		      lda	#-1
    345  3163		       85 8e		      sta	aiMoveIndex
    346  3165
    347  3165		       a9 28		      lda	#HOLD_DELAY
    348  3167		       85 89		      sta	mdelay	; hold-down delay before moves are shown
    349  3169
      0  3169					      PHASE	AI_DrawMoves
      1  3169		       a9 03		      lda	#AI_DrawMoves
      2  316b		       85 8c		      sta	aiState
    351  316d		       60		      rts
    352  316e
    353  316e
    354  316e							;---------------------------------------------------------------------------------------------------
    355  316e
      0  316e					      DEF	aiDrawMoves
      1  316e				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  316e				   aiDrawMoves
      3  316e				   TEMPORARY_VAR SET	Overlay
      4  316e				   TEMPORARY_OFFSET SET	0
      5  316e					      SUBROUTINE
    357  316e					      SUBROUTINE
    358  316e
    359  316e		       c6 8a		      dec	ccur
    360  3170		       20 20 f1 	      jsr	setCursorColours
    361  3173
    362  3173		       c6 89		      dec	mdelay
    363  3175		       d0 21		      bne	.exit
    364  3177		       a9 01		      lda	#1	; larger number will slow the draw of available moves
    365  3179		       85 89		      sta	mdelay	; once triggered, runs always
    366  317b
    367  317b		       a5 8e		      lda	aiMoveIndex
    368  317d		       10 05		      bpl	.valid
    369  317f		       20 ce fc 	      jsr	SAFE_getMoveIndex
    370  3182		       85 8e		      sta	aiMoveIndex
    371  3184				   .valid
    372  3184
    373  3184		       20 a5 f1 	      jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    374  3187		       a5 8e		      lda	aiMoveIndex
    375  3189		       10 19		      bpl	.unsure	; still drawing in this phase
    376  318b
    377  318b		       a9 14		      lda	#CAP_SPEED
    378  318d		       85 89		      sta	mdelay
    379  318f
    380  318f		       a9 00		      lda	#0
    381  3191		       85 8f		      sta	aiFlashPhase	; controls odd/even exit of flashing
    382  3193
      0  3193					      PHASE	AI_ShowMoveCaptures
      1  3193		       a9 04		      lda	#AI_ShowMoveCaptures
      2  3195		       85 8c		      sta	aiState
    384  3197		       60		      rts
    385  3198
    386  3198				   .exit
    387  3198
    388  3198							; Initial piece selection has happened, but the button hasn't been released yet
    389  3198							; AND we're still in the waiting phase to see if the button was held long enough for move show
    390  3198
    391  3198		       a5 4c		      lda	INPT4
    392  319a		       10 08		      bpl	.unsure	; button still pressed, so still unsure what to do
    393  319c
    394  319c							; Aha! Button released, so we know the selected piece and can start flashing it
    395  319c							; and allowing movement of the selector to a destination square...
    396  319c
    397  319c		       a9 18		      lda	#6*4
    398  319e		       85 8a		      sta	ccur	; bright green square for selection
    399  31a0
      0  31a0					      PHASE	AI_SelectDestinationSquare
      1  31a0		       a9 07		      lda	#AI_SelectDestinationSquare
      2  31a2		       85 8c		      sta	aiState
    401  31a4
    402  31a4		       60	   .unsure    rts
    403  31a5
    404  31a5
    405  31a5							;---------------------------------------------------------------------------------------------------
    406  31a5
      0  31a5					      DEF	SAFE_showMoveOptions
      1  31a5				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  31a5				   SAFE_showMoveOptions
      3  31a5				   TEMPORARY_VAR SET	Overlay
      4  31a5				   TEMPORARY_OFFSET SET	0
      5  31a5					      SUBROUTINE
    408  31a5					      SUBROUTINE
    409  31a5
      0  31a5					      VAR	__saveIdx, 1
      1  31a5				   __saveIdx  SET	TEMPORARY_VAR
      2  31a5				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  31a5
      4  31a5				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  31a5				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  31a5				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  31a5					      ENDIF
      8  31a5				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  31a5				  -	      ECHO	"Temporary Variable", __saveIdx, "overflow!"
     10  31a5				  -	      ERR
     11  31a5					      ENDIF
     12  31a5					      LIST	ON
      0  31a5					      VAR	__piece, 1
      1  31a5				   __piece    SET	TEMPORARY_VAR
      2  31a5				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  31a5
      4  31a5				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  31a5				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  31a5				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  31a5					      ENDIF
      8  31a5				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  31a5				  -	      ECHO	"Temporary Variable", __piece, "overflow!"
     10  31a5				  -	      ERR
     11  31a5					      ENDIF
     12  31a5					      LIST	ON
    412  31a5
    413  31a5							; place a marker on the board for any square matching the piece
    414  31a5							; EXCEPT for squares which are occupied (we'll flash those later)
    415  31a5
    416  31a5		       a6 8e	   .next      ldx	aiMoveIndex
    417  31a7		       86 9c		      stx	__saveIdx
    418  31a9		       30 47		      bmi	.skip
    419  31ab
    420  31ab		       ad 84 02 	      lda	INTIM
    421  31ae		       c9 05		      cmp	#5
    422  31b0		       90 40		      bcc	.skip
    423  31b2
    424  31b2		       c6 8e		      dec	aiMoveIndex
    425  31b4
    426  31b4		       20 20 fd 	      jsr	GetMoveFrom
    427  31b7		       c5 85		      cmp	fromX12
    428  31b9		       d0 ea		      bne	.next
    429  31bb
    430  31bb		       20 2c fd 	      jsr	GetMoveTo
    431  31be		       85 80		      sta	squareToDraw
    432  31c0
    433  31c0		       20 38 fd 	      jsr	GetMovePiece
    434  31c3		       85 9d		      sta	__piece
    435  31c5
    436  31c5							; If it's a pawn promote (duplicate "to" AND piece different (TODO) then skip others)
    437  31c5
    438  31c5		       ca	   .sk	      dex
    439  31c6		       30 16		      bmi	.prom
    440  31c8		       20 2c fd 	      jsr	GetMoveTo
    441  31cb		       c5 80		      cmp	squareToDraw
    442  31cd		       d0 0f		      bne	.prom
    443  31cf		       20 38 fd 	      jsr	GetMovePiece
    444  31d2		       45 9d		      eor	__piece
    445  31d4		       29 0f		      and	#PIECE_MASK
    446  31d6		       f0 06		      beq	.prom	; same piece type so not a promote
    447  31d8
    448  31d8		       c6 8e		      dec	aiMoveIndex
    449  31da		       c6 8e		      dec	aiMoveIndex
    450  31dc		       c6 8e		      dec	aiMoveIndex
    451  31de				   .prom
    452  31de
    453  31de		       a4 80		      ldy	squareToDraw
    454  31e0		       20 2d fc 	      jsr	GetBoard
    455  31e3		       29 0f		      and	#PIECE_MASK
    456  31e5		       d0 be		      bne	.next	; don't draw dots on captures - they are flashed later
    457  31e7
    458  31e7
    459  31e7		       ad 84 02 	      lda	INTIM
    460  31ea		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    461  31ec		       90 04		      bcc	.skip
    462  31ee
    463  31ee							;lda aiMoveIndex
    464  31ee							;sta __saveIdx
    465  31ee
    466  31ee		       20 e4 fc 	      jsr	markerDraw
    467  31f1		       60		      rts
    468  31f2
    469  31f2		       a5 9c	   .skip      lda	__saveIdx
    470  31f4		       85 8e		      sta	aiMoveIndex
    471  31f6		       60		      rts
    472  31f7
    473  31f7
    474  31f7							;---------------------------------------------------------------------------------------------------
    475  31f7
      0  31f7					      DEF	aiUnDrawTargetSquares
      1  31f7				   BANK_aiUnDrawTargetSquares SET	_CURRENT_BANK
      2  31f7				   aiUnDrawTargetSquares
      3  31f7				   TEMPORARY_VAR SET	Overlay
      4  31f7				   TEMPORARY_OFFSET SET	0
      5  31f7					      SUBROUTINE
    477  31f7					      SUBROUTINE
    478  31f7
    479  31f7		       c6 8a		      dec	ccur
    480  31f9		       20 20 f1 	      jsr	setCursorColours
    481  31fc
    482  31fc		       c6 89		      dec	mdelay
    483  31fe		       d0 18		      bne	.exit
    484  3200		       a9 01		      lda	#1
    485  3202		       85 89		      sta	mdelay	; once triggered, runs always
    486  3204
    487  3204		       a5 8e		      lda	aiMoveIndex
    488  3206		       10 05		      bpl	.valid
    489  3208		       20 ce fc 	      jsr	SAFE_getMoveIndex
    490  320b		       85 8e		      sta	aiMoveIndex
    491  320d				   .valid
    492  320d
    493  320d		       20 a5 f1 	      jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    494  3210		       a5 8e		      lda	aiMoveIndex
    495  3212		       10 04		      bpl	.exit	; still drawing in this phase
    496  3214
      0  3214					      PHASE	AI_SelectStartSquare
      1  3214		       a9 01		      lda	#AI_SelectStartSquare
      2  3216		       85 8c		      sta	aiState
    498  3218
    499  3218		       60	   .exit      rts
    500  3219
    501  3219
    502  3219							;---------------------------------------------------------------------------------------------------
    503  3219
    504  3219
      0  3219					      DEF	aiShowMoveCaptures
      1  3219				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  3219				   aiShowMoveCaptures
      3  3219				   TEMPORARY_VAR SET	Overlay
      4  3219				   TEMPORARY_OFFSET SET	0
      5  3219					      SUBROUTINE
    506  3219					      SUBROUTINE
    507  3219
    508  3219							; draw/undraw ALL captured pieces
    509  3219							; we should do this an even number of times so that pieces don't disappEOR
    510  3219
    511  3219		       c6 8a		      dec	ccur
    512  321b		       20 20 f1 	      jsr	setCursorColours
    513  321e
    514  321e		       c6 89		      dec	mdelay	; flash speed UNVARYING despite draw happening
    515  3220
    516  3220		       a5 8e		      lda	aiMoveIndex
    517  3222		       10 05		      bpl	.valid	; guaranteed -1 on 1st call
    518  3224		       20 ce fc 	      jsr	SAFE_getMoveIndex
    519  3227		       85 8e		      sta	aiMoveIndex
    520  3229				   .valid
    521  3229
    522  3229		       20 14 fd 	      jsr	SAFE_showMoveCaptures
    523  322c		       a5 8e		      lda	aiMoveIndex
    524  322e		       10 06		      bpl	.exit
    525  3230
    526  3230		       e6 8f		      inc	aiFlashPhase
    527  3232
      0  3232					      PHASE	AI_SlowFlash
      1  3232		       a9 05		      lda	#AI_SlowFlash
      2  3234		       85 8c		      sta	aiState
    529  3236
    530  3236		       60	   .exit      rts
    531  3237
    532  3237
    533  3237							;---------------------------------------------------------------------------------------------------
    534  3237
      0  3237					      DEF	aiSlowFlash
      1  3237				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  3237				   aiSlowFlash
      3  3237				   TEMPORARY_VAR SET	Overlay
      4  3237				   TEMPORARY_OFFSET SET	0
      5  3237					      SUBROUTINE
    536  3237					      SUBROUTINE
    537  3237
    538  3237							; Joystick button is held down, so we're displaying the available moves
    539  3237							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    540  3237
    541  3237		       c6 8a		      dec	ccur
    542  3239		       20 20 f1 	      jsr	setCursorColours
    543  323c
    544  323c		       a5 8f		      lda	aiFlashPhase
    545  323e		       29 01		      and	#1
    546  3240		       d0 04		      bne	.notEven	; only exit after even # EOR-draws
    547  3242
    548  3242		       a5 4c		      lda	INPT4
    549  3244		       30 0d		      bmi	.butpress	; exit on button release
    550  3246
    551  3246				   .notEven
    552  3246
    553  3246							; Wait for delay to expire then back and flash 'em again
    554  3246
    555  3246		       c6 89		      dec	mdelay
    556  3248		       10 08		      bpl	.slowWait
    557  324a
    558  324a		       a9 14		      lda	#CAP_SPEED
    559  324c		       85 89		      sta	mdelay
    560  324e
      0  324e					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  324e		       a9 04		      lda	#AI_ShowMoveCaptures
      2  3250		       85 8c		      sta	aiState
    562  3252
    563  3252		       60	   .slowWait  rts
    564  3253
    565  3253
    566  3253		       a9 01	   .butpress  lda	#1
    567  3255		       85 89		      sta	mdelay
    568  3257
      0  3257					      PHASE	AI_UnDrawTargetSquares
      1  3257		       a9 06		      lda	#AI_UnDrawTargetSquares
      2  3259		       85 8c		      sta	aiState
    570  325b		       60		      rts
    571  325c
    572  325c
    573  325c							;---------------------------------------------------------------------------------------------------
    574  325c
      0  325c					      DEF	moveCursor
      1  325c				   BANK_moveCursor SET	_CURRENT_BANK
      2  325c				   moveCursor
      3  325c				   TEMPORARY_VAR SET	Overlay
      4  325c				   TEMPORARY_OFFSET SET	0
      5  325c					      SUBROUTINE
    576  325c					      SUBROUTINE
    577  325c
      0  325c					      VAR	__newCursor, 1
      1  325c				   __newCursor SET	TEMPORARY_VAR
      2  325c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  325c
      4  325c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  325c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  325c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  325c					      ENDIF
      8  325c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  325c				  -	      ECHO	"Temporary Variable", __newCursor, "overflow!"
     10  325c				  -	      ERR
     11  325c					      ENDIF
     12  325c					      LIST	ON
    579  325c
    580  325c							; Part (a) move cursor around the board waiting for joystick press
    581  325c
    582  325c
    583  325c		       ad 80 02 	      lda	SWCHA
    584  325f		       4a		      lsr
    585  3260		       4a		      lsr
    586  3261		       4a		      lsr
    587  3262		       4a		      lsr
    588  3263		       a8		      tay
    589  3264
    590  3264		       c9 0f		      cmp	#15
    591  3266		       f0 20		      beq	.cursor	; nothing pressed - skip delays
    592  3268
    593  3268		       c6 89		      dec	mdelay
    594  326a		       10 23		      bpl	.delaym
    595  326c
    596  326c		       18		      clc
    597  326d		       a5 88		      lda	cursorX12
    598  326f		       79 43 f1 	      adc	JoyMoveCursor,y
    599  3272		       85 9c		      sta	__newCursor
    600  3274		       a8		      tay
    601  3275		       20 21 fc 	      jsr	GetValid
    602  3278		       c9 ff		      cmp	#-1
    603  327a		       f0 04		      beq	.invalid
    604  327c		       a5 9c		      lda	__newCursor
    605  327e		       85 88		      sta	cursorX12
    606  3280				   .invalid
    607  3280
    608  3280		       a9 10		      lda	#CURSOR_MOVE_SPEED
    609  3282		       85 89		      sta	mdelay
    610  3284		       20 0a f1 	      jsr	setCursorPriority
    611  3287		       60		      rts
    612  3288
    613  3288
    614  3288		       a9 00	   .cursor    lda	#0
    615  328a		       85 89		      sta	mdelay
    616  328c		       20 0a f1 	      jsr	setCursorPriority
    617  328f
    618  328f		       60	   .delaym    rts
    619  3290
    620  3290
    621  3290							;---------------------------------------------------------------------------------------------------
    622  3290
      0  3290					      DEF	FlashPiece
      1  3290				   BANK_FlashPiece SET	_CURRENT_BANK
      2  3290				   FlashPiece
      3  3290				   TEMPORARY_VAR SET	Overlay
      4  3290				   TEMPORARY_OFFSET SET	0
      5  3290					      SUBROUTINE
    624  3290					      SUBROUTINE
    625  3290
    626  3290							; Flash the selected piece
    627  3290
    628  3290		       c6 8d		      dec	aiFlashDelay
    629  3292		       d0 09		      bne	.exit	; don't flash
    630  3294		       a9 14		      lda	#CAP_SPEED
    631  3296		       85 8d		      sta	aiFlashDelay
    632  3298
    633  3298		       e6 8f		      inc	aiFlashPhase
    634  329a
    635  329a		       20 92 fc 	      jsr	CopySinglePiece
    636  329d
    637  329d		       60	   .exit      rts
    638  329e
    639  329e
    640  329e							;---------------------------------------------------------------------------------------------------
    641  329e
      0  329e					      DEF	aiSelectDestinationSquare
      1  329e				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  329e				   aiSelectDestinationSquare
      3  329e				   TEMPORARY_VAR SET	Overlay
      4  329e				   TEMPORARY_OFFSET SET	0
      5  329e					      SUBROUTINE
    643  329e					      SUBROUTINE
    644  329e
    645  329e							; Piece is selected and now we're looking for a button press on a destination square
    646  329e							; we flash the piece on-and-off while we're doing that
    647  329e
    648  329e		       20 90 f2 	      jsr	FlashPiece
    649  32a1
    650  32a1		       ad 84 02 	      lda	INTIM
    651  32a4		       c9 14		      cmp	#20
    652  32a6		       90 38		      bcc	.noButton
    653  32a8
    654  32a8		       20 5c f2 	      jsr	moveCursor
    655  32ab
    656  32ab		       a4 88		      ldy	cursorX12
    657  32ad		       84 86		      sty	toX12
    658  32af
    659  32af		       20 56 fc 	      jsr	GetPiece
    660  32b2		       20 20 f1 	      jsr	setCursorColours
    661  32b5
    662  32b5
    663  32b5							; y = valid square
    664  32b5
    665  32b5		       a5 4c		      lda	INPT4
    666  32b7		       30 27		      bmi	.noButton
    667  32b9
    668  32b9		       a5 86		      lda	toX12
    669  32bb		       c5 85		      cmp	fromX12
    670  32bd		       f0 0d		      beq	.cancel
    671  32bf
    672  32bf		       c0 ff		      cpy	#-1
    673  32c1		       f0 1d		      beq	.noButton	; not a valid square
    674  32c3
    675  32c3		       a5 8f		      lda	aiFlashPhase
    676  32c5		       29 01		      and	#1
    677  32c7		       f0 13		      beq	.done
    678  32c9		       85 8d		      sta	aiFlashDelay	; EOR-phase incorrect - force quick fix to allow next-frame button detect
    679  32cb		       60		      rts
    680  32cc
    681  32cc				   .cancel
    682  32cc
    683  32cc		       a5 8f		      lda	aiFlashPhase
    684  32ce		       29 01		      and	#1
    685  32d0		       f0 05		      beq	.doCancel
    686  32d2
    687  32d2							; EOR-phase incorrect - force quick fix to allow next-frame button detect
    688  32d2
    689  32d2		       a9 01		      lda	#1
    690  32d4		       85 8d		      sta	aiFlashDelay
    691  32d6		       60		      rts
    692  32d7
    693  32d7
      0  32d7				   .doCancel  PHASE	AI_ReselectDebounce
      1  32d7		       a9 09		      lda	#AI_ReselectDebounce
      2  32d9		       85 8c		      sta	aiState
    695  32db		       60		      rts
    696  32dc
      0  32dc				   .done      PHASE	AI_Quiescent	; destination selected!
      1  32dc		       a9 08		      lda	#AI_Quiescent
      2  32de		       85 8c		      sta	aiState
    698  32e0		       60	   .noButton  rts
    699  32e1
    700  32e1
    701  32e1							;---------------------------------------------------------------------------------------------------
    702  32e1
      0  32e1					      DEF	aiReselectDebounce
      1  32e1				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  32e1				   aiReselectDebounce
      3  32e1				   TEMPORARY_VAR SET	Overlay
      4  32e1				   TEMPORARY_OFFSET SET	0
      5  32e1					      SUBROUTINE
    704  32e1					      SUBROUTINE
    705  32e1
    706  32e1							; We've just cancelled the move. Wait for the button to be released
    707  32e1							; and then go back to selecting a piece to move
    708  32e1
    709  32e1		       a5 4c		      lda	INPT4
    710  32e3		       10 04		      bpl	.exit	; button still pressed, so wait
    711  32e5
      0  32e5					      PHASE	AI_SelectStartSquare
      1  32e5		       a9 01		      lda	#AI_SelectStartSquare
      2  32e7		       85 8c		      sta	aiState
    713  32e9		       60	   .exit      rts
    714  32ea
    715  32ea
    716  32ea							;---------------------------------------------------------------------------------------------------
    717  32ea
      0  32ea					      DEF	aiQuiescent
      1  32ea				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  32ea				   aiQuiescent
      3  32ea				   TEMPORARY_VAR SET	Overlay
      4  32ea				   TEMPORARY_OFFSET SET	0
      5  32ea					      SUBROUTINE
    719  32ea					      SUBROUTINE
    720  32ea
    721  32ea							; Move has been selected
    722  32ea
    723  32ea		       a9 ff		      lda	#-1
    724  32ec		       85 88		      sta	cursorX12
    725  32ee
    726  32ee		       a5 85		      lda	fromX12
    727  32f0		       85 87		      sta	originX12
    728  32f2		       20 56 fc 	      jsr	GetPiece	; from the movelist
    729  32f5
    730  32f5		       a4 85		      ldy	fromX12
    731  32f7		       20 2d fc 	      jsr	GetBoard	; get the piece from the board itself
    732  32fa
    733  32fa		       45 98		      eor	fromPiece
    734  32fc		       29 0f		      and	#PIECE_MASK	; if not the same piece board/movelist...
    735  32fe		       d0 05		      bne	.promote	; promote a pawn
    736  3300
      0  3300					      PHASE	AI_PrepForPhysicalMove
      1  3300		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  3302		       85 8c		      sta	aiState
    738  3304		       60		      rts
    739  3305
      0  3305				   .promote   PHASE	AI_PromotePawnStart
      1  3305		       a9 1f		      lda	#AI_PromotePawnStart
      2  3307		       85 8c		      sta	aiState
    741  3309		       60		      rts
    742  330a
    743  330a
    744  330a							;---------------------------------------------------------------------------------------------------
    745  330a
      0  330a					      DEF	aiPromotePawnStart
      1  330a				   BANK_aiPromotePawnStart SET	_CURRENT_BANK
      2  330a				   aiPromotePawnStart
      3  330a				   TEMPORARY_VAR SET	Overlay
      4  330a				   TEMPORARY_OFFSET SET	0
      5  330a					      SUBROUTINE
    747  330a					      SUBROUTINE
    748  330a
    749  330a		       ad 84 02 	      lda	INTIM
    750  330d		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    751  330f		       90 18		      bcc	.exit
    752  3311
    753  3311		       a9 00		      lda	#0
    754  3313		       85 8f		      sta	aiFlashPhase
    755  3315		       85 8d		      sta	aiFlashDelay
    756  3317
    757  3317		       a4 86		      ldy	toX12
    758  3319		       84 80		      sty	squareToDraw
    759  331b
    760  331b		       20 2d fc 	      jsr	GetBoard
    761  331e		       29 0f		      and	#PIECE_MASK
    762  3320		       f0 03		      beq	.empty
    763  3322
    764  3322		       20 92 fc 	      jsr	CopySinglePiece	; remove any capturable piece for display purposes
    765  3325
      0  3325				   .empty     PHASE	AI_RollPromotionPiece
      1  3325		       a9 20		      lda	#AI_RollPromotionPiece
      2  3327		       85 8c		      sta	aiState
    767  3329		       60	   .exit      rts
    768  332a
    769  332a
    770  332a							;---------------------------------------------------------------------------------------------------
    771  332a
      0  332a					      DEF	aiRollPromotionPiece
      1  332a				   BANK_aiRollPromotionPiece SET	_CURRENT_BANK
      2  332a				   aiRollPromotionPiece
      3  332a				   TEMPORARY_VAR SET	Overlay
      4  332a				   TEMPORARY_OFFSET SET	0
      5  332a					      SUBROUTINE
    773  332a					      SUBROUTINE
    774  332a
    775  332a							; Flash the '?' and wait for an UDLR move
    776  332a
    777  332a		       ad 84 02 	      lda	INTIM
    778  332d		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    779  332f		       90 28		      bcc	.exit
    780  3331
    781  3331		       ad 80 02 	      lda	SWCHA
    782  3334		       29 f0		      and	#$F0
    783  3336		       c9 f0		      cmp	#$F0
    784  3338		       f0 0a		      beq	.nojoy
    785  333a
    786  333a		       a9 00		      lda	#0
    787  333c		       85 8d		      sta	aiFlashDelay
    788  333e
    789  333e		       a5 8f		      lda	aiFlashPhase
    790  3340		       29 01		      and	#1
    791  3342		       f0 16		      beq	.even
    792  3344
    793  3344		       c6 8d	   .nojoy     dec	aiFlashDelay
    794  3346		       10 11		      bpl	.exit
    795  3348
    796  3348		       a9 0a		      lda	#10
    797  334a		       85 8d		      sta	aiFlashDelay
    798  334c
    799  334c		       a2 20		      ldx	#INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0
    800  334e		       a5 97		      lda	sideToMove
    801  3350		       10 02		      bpl	.wtm
    802  3352		       a2 68		      ldx	#INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_0
    803  3354				   .wtm
    804  3354		       20 f0 fc 	      jsr	showPromoteOptions
    805  3357
    806  3357		       e6 8f		      inc	aiFlashPhase
    807  3359
    808  3359		       60	   .exit      rts
    809  335a
    810  335a
    811  335a		       a9 03	   .even      lda	#3	; QUEEN
    812  335c		       85 98		      sta	fromPiece	; cycles as index to NBRQ
    813  335e
    814  335e		       e6 8f		      inc	aiFlashPhase
    815  3360
    816  3360
    817  3360		       a2 14		      ldx	#INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0	;TODO: fix for colour
    818  3362		       a5 97		      lda	sideToMove
    819  3364		       10 02		      bpl	.whiteToMove
    820  3366		       a2 5c		      ldx	#INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    821  3368				   .whiteToMove
    822  3368
    823  3368		       20 f0 fc 	      jsr	showPromoteOptions
    824  336b
      0  336b					      PHASE	AI_ChooseDebounce
      1  336b		       a9 22		      lda	#AI_ChooseDebounce
      2  336d		       85 8c		      sta	aiState
    826  336f		       60		      rts
    827  3370
    828  3370
    829  3370							;---------------------------------------------------------------------------------------------------
    830  3370
      0  3370					      DEF	aiChoosePromotePiece
      1  3370				   BANK_aiChoosePromotePiece SET	_CURRENT_BANK
      2  3370				   aiChoosePromotePiece
      3  3370				   TEMPORARY_VAR SET	Overlay
      4  3370				   TEMPORARY_OFFSET SET	0
      5  3370					      SUBROUTINE
    832  3370					      SUBROUTINE
    833  3370
    834  3370							; Question-mark phase has exited via joystick direction
    835  3370							; Now we cycle through the selectable pieces
    836  3370
    837  3370		       ad 84 02 	      lda	INTIM
    838  3373		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    839  3375		       90 40		      bcc	.exit
    840  3377
    841  3377		       a5 4c		      lda	INPT4
    842  3379		       30 0a		      bmi	.nobut	; no press
    843  337b
    844  337b							; button pressed but make sure phase is correct for exit
    845  337b
    846  337b		       a9 00		      lda	#0
    847  337d		       85 8d		      sta	aiFlashDelay
    848  337f
    849  337f		       a5 8f		      lda	aiFlashPhase
    850  3381		       29 01		      and	#1
    851  3383		       f0 33		      beq	.chosen	; button pressed --> selection made
    852  3385
    853  3385				   .nobut
    854  3385		       ad 80 02 	      lda	SWCHA
    855  3388		       29 f0		      and	#$F0
    856  338a		       c9 f0		      cmp	#$F0
    857  338c		       f0 17		      beq	.odd	; no direction pressed
    858  338e
    859  338e		       4a		      lsr
    860  338f		       4a		      lsr
    861  3390		       4a		      lsr
    862  3391		       4a		      lsr
    863  3392		       a8		      tay
    864  3393
    865  3393							; joystick but make sure phase is correct
    866  3393
    867  3393		       a5 8f		      lda	aiFlashPhase
    868  3395		       4a		      lsr
    869  3396		       b0 0d		      bcs	.odd	; must wait until piece undrawn
    870  3398
    871  3398							; cycle to the next promotable piece (N/B/R/Q)
    872  3398							; TODO; use joy table for mod instead of just incrementing all the time
    873  3398
    874  3398							;clc
    875  3398		       a5 98		      lda	fromPiece
    876  339a		       79 33 f1 	      adc	JoyCombined,y
    877  339d		       29 03		      and	#3
    878  339f		       85 98		      sta	fromPiece
    879  33a1
      0  33a1					      PHASE	AI_ChooseDebounce	; wait for release
      1  33a1		       a9 22		      lda	#AI_ChooseDebounce
      2  33a3		       85 8c		      sta	aiState
    881  33a5
    882  33a5		       c6 8d	   .odd       dec	aiFlashDelay
    883  33a7		       10 0e		      bpl	.exit
    884  33a9
    885  33a9		       a9 0a	   .force     lda	#10
    886  33ab		       85 8d		      sta	aiFlashDelay
    887  33ad
    888  33ad		       e6 8f		      inc	aiFlashPhase
    889  33af
    890  33af		       a4 98		      ldy	fromPiece
    891  33b1		       be d3 f3 	      ldx	promotePiece,y
    892  33b4		       20 f0 fc 	      jsr	showPromoteOptions
    893  33b7
    894  33b7		       60	   .exit      rts
    895  33b8
    896  33b8
    897  33b8				   .chosen
    898  33b8		       a5 98		      lda	fromPiece
    899  33ba		       29 0f		      and	#PIECE_MASK
    900  33bc		       aa		      tax
    901  33bd
    902  33bd		       bd d7 f3 	      lda	promoteType,x
    903  33c0		       85 98		      sta	fromPiece
    904  33c2
    905  33c2		       a4 86		      ldy	toX12
    906  33c4		       20 2d fc 	      jsr	GetBoard
    907  33c7		       29 0f		      and	#PIECE_MASK
    908  33c9		       f0 03		      beq	.nothing
    909  33cb
    910  33cb		       20 92 fc 	      jsr	CopySinglePiece	; put back whatever was there to start
    911  33ce
      0  33ce				   .nothing   PHASE	AI_PrepForPhysicalMove
      1  33ce		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  33d0		       85 8c		      sta	aiState
    913  33d2		       60		      rts
    914  33d3
      0  33d3					      ALLOCATE	promotePiece, 4
      0  33d3					      OPTIONAL_PAGEBREAK	"Table", 4
     12  33d3					      LIST	ON
      0  33d3					      DEF	promotePiece
      1  33d3				   BANK_promotePiece SET	_CURRENT_BANK
      2  33d3				   promotePiece
      3  33d3				   TEMPORARY_VAR SET	Overlay
      4  33d3				   TEMPORARY_OFFSET SET	0
      5  33d3					      SUBROUTINE
    916  33d3		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    917  33d4		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    918  33d5		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    919  33d6		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    920  33d7
      0  33d7					      ALLOCATE	promoteType,4
      0  33d7					      OPTIONAL_PAGEBREAK	"Table", 4
     12  33d7					      LIST	ON
      0  33d7					      DEF	promoteType
      1  33d7				   BANK_promoteType SET	_CURRENT_BANK
      2  33d7				   promoteType
      3  33d7				   TEMPORARY_VAR SET	Overlay
      4  33d7				   TEMPORARY_OFFSET SET	0
      5  33d7					      SUBROUTINE
    922  33d7		       03 04 05 06	      .byte.b	KNIGHT, BISHOP, ROOK, QUEEN
    923  33db
    924  33db
    925  33db							;---------------------------------------------------------------------------------------------------
    926  33db
      0  33db					      DEF	aiChooseDebounce
      1  33db				   BANK_aiChooseDebounce SET	_CURRENT_BANK
      2  33db				   aiChooseDebounce
      3  33db				   TEMPORARY_VAR SET	Overlay
      4  33db				   TEMPORARY_OFFSET SET	0
      5  33db					      SUBROUTINE
    928  33db					      SUBROUTINE
    929  33db
    930  33db							; We've changed promotion piece, but wait for joystick to be released
    931  33db
    932  33db		       ad 80 02 	      lda	SWCHA
    933  33de		       29 f0		      and	#$F0
    934  33e0		       c9 f0		      cmp	#$F0
    935  33e2		       d0 08		      bne	.exit	; wait while joystick still pressed
    936  33e4
    937  33e4		       a9 01		      lda	#1
    938  33e6		       85 8d		      sta	aiFlashDelay
    939  33e8
      0  33e8					      PHASE	AI_ChoosePromotePiece
      1  33e8		       a9 21		      lda	#AI_ChoosePromotePiece
      2  33ea		       85 8c		      sta	aiState
    941  33ec		       60	   .exit      rts
    942  33ed
    943  33ed
    944  33ed							;---------------------------------------------------------------------------------------------------
    945  33ed
    946  3400		       00 00 00 00*	      align	256
      0  3400					      DEF	PositionSprites
      1  3400				   BANK_PositionSprites SET	_CURRENT_BANK
      2  3400				   PositionSprites
      3  3400				   TEMPORARY_VAR SET	Overlay
      4  3400				   TEMPORARY_OFFSET SET	0
      5  3400					      SUBROUTINE
    948  3400					      SUBROUTINE
    949  3400
    950  3400		       a5 88		      lda	cursorX12
    951  3402		       38		      sec
    952  3403		       e9 0a	   .sub10     sbc	#10
    953  3405		       b0 fc		      bcs	.sub10
    954  3407		       69 08		      adc	#8
    955  3409		       a8		      tay
    956  340a
    957  340a		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    958  340c
    959  340c		       b9 30 f4 	      lda	colToPixel,y
    960  340f
    961  340f		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    962  3410		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    963  3412		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    964  3414
    965  3414		       a8		      tay
    966  3415		       b9 30 f3 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    967  3418		       85 60		      sta	HMP0
    968  341a		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    969  341c
    970  341c		       85 42		      sta	WSYNC
    971  341e		       85 6a		      sta	HMOVE
    972  3420
    973  3420		       60		      rts
    974  3421
    975  3421							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    976  3421							; fine adjustment value. This table is on a page boundary to guarantee the processor
    977  3421							; will cross a page boundary and waste a cycle in order to be at the precise position
    978  3421							; for a RESP0,x write
    979  3421
    980  3421				   fineAdjustBegin
    981  3421
    982  3421		       70		      DC.B	%01110000	; Left 7
    983  3422		       60		      DC.B	%01100000	; Left 6
    984  3423		       50		      DC.B	%01010000	; Left 5
    985  3424		       40		      DC.B	%01000000	; Left 4
    986  3425		       30		      DC.B	%00110000	; Left 3
    987  3426		       20		      DC.B	%00100000	; Left 2
    988  3427		       10		      DC.B	%00010000	; Left 1
    989  3428		       00		      DC.B	%00000000	; No movement.
    990  3429		       f0		      DC.B	%11110000	; Right 1
    991  342a		       e0		      DC.B	%11100000	; Right 2
    992  342b		       d0		      DC.B	%11010000	; Right 3
    993  342c		       c0		      DC.B	%11000000	; Right 4
    994  342d		       b0		      DC.B	%10110000	; Right 5
    995  342e		       a0		      DC.B	%10100000	; Right 6
    996  342f		       90		      DC.B	%10010000	; Right 7
    997  3430
    998  3430		       f3 30	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    999  3430
   1000  3430
      0  3430					      ALLOCATE	colToPixel, 8
      0  3430					      OPTIONAL_PAGEBREAK	"Table", 8
     12  3430					      LIST	ON
      0  3430					      DEF	colToPixel
      1  3430				   BANK_colToPixel SET	_CURRENT_BANK
      2  3430				   colToPixel
      3  3430				   TEMPORARY_VAR SET	Overlay
      4  3430				   TEMPORARY_OFFSET SET	0
      5  3430					      SUBROUTINE
   1002  3430		       00 14 28 3c*	      .byte.b	0,20,40,60,80,100,120,140
   1003  3438
   1004  3438							;---------------------------------------------------------------------------------------------------
   1005  3438
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  3438					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3438					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     12  3438					      LIST	ON
      0  3438					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3438				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3438				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3438				   TEMPORARY_VAR SET	Overlay
      4  3438				   TEMPORARY_OFFSET SET	0
      5  3438					      SUBROUTINE
      3  3438		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3450		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3468		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  3480					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3480					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     12  3480					      LIST	ON
      0  3480					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3480				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3480				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3480				   TEMPORARY_VAR SET	Overlay
      4  3480				   TEMPORARY_OFFSET SET	0
      5  3480					      SUBROUTINE
      3  3480		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3498		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  34b0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  34c8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  34c8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     12  3500					      LIST	ON
      0  3500					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3500				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3500				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3500				   TEMPORARY_VAR SET	Overlay
      4  3500				   TEMPORARY_OFFSET SET	0
      5  3500					      SUBROUTINE
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  3548					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
     12  3548					      LIST	ON
      0  3548					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3548				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3548				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3548				   TEMPORARY_VAR SET	Overlay
      4  3548				   TEMPORARY_OFFSET SET	0
      5  3548					      SUBROUTINE
      3  3548		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  3590					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     12  3590					      LIST	ON
      0  3590					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3590				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3590				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3590				   TEMPORARY_VAR SET	Overlay
      4  3590				   TEMPORARY_OFFSET SET	0
      5  3590					      SUBROUTINE
      3  3590		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  35a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  35d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     12  3600					      LIST	ON
      0  3600					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3600				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3600				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3600				   TEMPORARY_VAR SET	Overlay
      4  3600				   TEMPORARY_OFFSET SET	0
      5  3600					      SUBROUTINE
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  3630		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  3648					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
     12  3648					      LIST	ON
      0  3648					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3648				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3648				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3648				   TEMPORARY_VAR SET	Overlay
      4  3648				   TEMPORARY_OFFSET SET	0
      5  3648					      SUBROUTINE
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  3690					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     12  3690					      LIST	ON
      0  3690					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3690				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3690				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3690				   TEMPORARY_VAR SET	Overlay
      4  3690				   TEMPORARY_OFFSET SET	0
      5  3690					      SUBROUTINE
      3  3690		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
   1014  36d8
   1015  36d8							;---------------------------------------------------------------------------------------------------
   1016  36d8
      0  36d8					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  36d8		       06 d8	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $6d8 , FREE= $128
      2  36d8					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  36d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  36d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  36d8				  -	      ERR
      6  36d8					      endif
   1018  36d8
   1019  36d8
   1020  36d8							;---------------------------------------------------------------------------------------------------
   1021  36d8
   1022  36d8							; EOF
------- FILE ./chess.asm
------- FILE BANK_TEXT_OVERLAYS.asm LEVEL 2 PASS 2
      0  36d8					      include	"BANK_TEXT_OVERLAYS.asm"
      0  36d8					      NEWBANK	TEXT_OVERLAYS
      1  3802 ????				      SEG	TEXT_OVERLAYS
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   TEXT_OVERLAYS SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	TEXT_OVERLAYS
      2  3800
      3  3800
      4  3800
      5  3800
      6  3800				   sample
      7  3800		       48 aa		      .byte.b	72,%10101010
      8  3802
      9  3802
     10  3802
     11  3802							;EOF
------- FILE ./chess.asm
    464  3802
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  3802					      include	"titleScreen.asm"
      0  3802					      NEWBANK	TITLESCREEN
      1  47c0 ????				      SEG	TITLESCREEN
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   TITLESCREEN SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	TITLESCREEN
      2  4000
      3  4000				   OverscanTime2
      4  4000		       1a 1a		      .byte.b	26, 26
      5  4002		       20 20		      .byte.b	32, 32
      6  4004
      7  4004				   colvec
      8  4004		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  4008
     10  4008
     11  4008		       32 32	   VBlankTime .byte.b	50,50
     12  400a
      0  400a					      DEF	TitleScreen
      1  400a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  400a				   TitleScreen
      3  400a				   TEMPORARY_VAR SET	Overlay
      4  400a				   TEMPORARY_OFFSET SET	0
      5  400a					      SUBROUTINE
     14  400a					      SUBROUTINE
     15  400a
      0  400a					      VAR	__colour_table, 2
      1  400a				   __colour_table SET	TEMPORARY_VAR
      2  400a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  400a
      4  400a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  400a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  400a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  400a					      ENDIF
      8  400a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  400a				  -	      ECHO	"Temporary Variable", __colour_table, "overflow!"
     10  400a				  -	      ERR
     11  400a					      ENDIF
     12  400a					      LIST	ON
     17  400a
     18  400a							; Start of new frame
     19  400a
     20  400a							; Start of vertical blank processing
     21  400a
     22  400a				   TitleSequence
     23  400a
     24  400a		       a9 00		      lda	#%00000000
     25  400c		       85 4a		      sta	CTRLPF
     26  400e		       85 49		      sta	COLUBK
     27  4010
     28  4010		       a2 00		      ldx	#0	;Platform
     29  4012		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     30  4014		       85 9c		      sta	__colour_table
     31  4016		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     32  4018		       85 9d		      sta	__colour_table+1
     33  401a
     34  401a							;		  sta rndHi
     35  401a							;		  sta rnd
     36  401a
     37  401a
     38  401a				  -	      if	0
     39  401a				  -	      lda	#0
     40  401a				  -	      sta	digit
     41  401a				  -	      lda	#$10
     42  401a				  -	      sta	digit+1
     43  401a				  -	      lda	#$20
     44  401a				  -	      sta	digit+2
     45  401a					      endif
     46  401a
     47  401a
     48  401a
     49  401a
      0  401a					      RESYNC
      1  401a
      2  401a		       a9 02		      lda	#%10
      3  401c		       85 41		      sta	VBLANK
      4  401e
      5  401e		       a2 08		      ldx	#8
      6  4020				   .loopResync
      0  4020					      VERTICAL_SYNC
      1  4020		       a9 0e		      lda	#%1110
      2  4022		       85 42	   .VSLP1     sta	WSYNC
      3  4024		       85 40		      sta	VSYNC
      4  4026		       4a		      lsr
      5  4027		       d0 f9		      bne	.VSLP1
      8  4029
      9  4029		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  402b		       a5 9b		      lda	Platform
     11  402d		       49 02		      eor	#PAL_50
     12  402f		       d0 02		      bne	.ntsc
     13  4031		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  4033				   .ntsc
     15  4033				   .loopWait
     16  4033		       85 42		      sta	WSYNC
     17  4035		       85 42		      sta	WSYNC
     18  4037		       88		      dey
     19  4038		       d0 f9		      bne	.loopWait
     20  403a		       ca		      dex
     21  403b		       d0 e3		      bne	.loopResync
     51  403d
     52  403d				   RestartFrame0
     53  403d
     54  403d				  -	      if	0
     55  403d				  -	      ldx	#2
     56  403d				  -rollcols   clc
     57  403d				  -	      lda	digit+2
     58  403d				  -	      adc	#$10
     59  403d				  -	      sta	digit+2
     60  403d				  -	      bcc	finxc
     61  403d				  -	      dex
     62  403d				  -	      bpl	rollcols
     63  403d				  -finxc
     64  403d					      endif
     65  403d
      0  403d					      DEF	RestartFrame
      1  403d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  403d				   RestartFrame
      3  403d				   TEMPORARY_VAR SET	Overlay
      4  403d				   TEMPORARY_OFFSET SET	0
      5  403d					      SUBROUTINE
     67  403d		       a9 00		      LDA	#0
     68  403f		       a9 0e		      lda	#%1110	; VSYNC ON
     69  4041		       85 42	   .loopVSync2 sta	WSYNC
     70  4043		       85 40		      sta	VSYNC
     71  4045		       4a		      lsr
     72  4046		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     73  4048
     74  4048							;------------------------------------------------------------------
     75  4048
     76  4048		       a6 9b		      ldx	Platform
     77  404a		       bc 08 f0 	      ldy	VBlankTime,x
     78  404d		       8c 96 02 	      sty	TIM64T
     79  4050
     80  4050
     81  4050				  -	      if	0
     82  4050				  -	      lda	SWCHB
     83  4050				  -	      rol
     84  4050				  -	      rol
     85  4050				  -	      rol
     86  4050				  -	      and	#%11
     87  4050				  -	      eor	#PAL
     88  4050				  -	      cmp	Platform
     89  4050				  -	      beq	platOK
     90  4050				  -	      sta	Platform
     91  4050				  -	      jmp	TitleSequence
     92  4050				  -platOK
     93  4050					      endif
     94  4050
     95  4050		       e6 81	   k2	      inc	rnd
     96  4052		       f0 fc		      beq	k2
     97  4054
     98  4054
     99  4054		       85 42	   VerticalBlank sta	WSYNC
    100  4056		       ad 84 02 	      lda	INTIM
    101  4059		       d0 f9		      bne	VerticalBlank
    102  405b		       85 41		      sta	VBLANK
    103  405d
    104  405d							;sta COLUBK
    105  405d
    106  405d							;------------------------------------------------------------------
    107  405d
    108  405d							; Do X scanlines of color-changing (our picture)
    109  405d
    110  405d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    111  405f		       a2 03	   SokoLogo   ldx	#3
    112  4061		       b1 9c	   triplet    lda	(__colour_table),y
    113  4063							;    eor digit-1,x
    114  4063		       85 42		      sta	WSYNC
    115  4065		       85 48		      sta	COLUPF	; 3
    116  4067
    117  4067		       b9 b0 f2 	      lda	COL_0,y	; 5
    118  406a		       85 4d		      sta	PF0	; 3   @11
    119  406c		       b9 88 f3 	      lda	COL_1,y	; 5
    120  406f		       85 4e		      sta	PF1	; 3   @19
    121  4071		       b9 60 f4 	      lda	COL_2,y	; 5
    122  4074		       85 4f		      sta	PF2	; 3   @27
    123  4076
    124  4076		       b9 38 f5 	      lda	COL_3,y	; 5
    125  4079		       85 4d		      sta	PF0	; 3   @35
      0  407b					      SLEEP	2	; @37
      1  407b				   .CYCLES    SET	2
      2  407b
      3  407b				  -	      IF	.CYCLES < 2
      4  407b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  407b				  -	      ERR
      6  407b					      ENDIF
      7  407b
      8  407b				  -	      IF	.CYCLES & 1
      9  407b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  407b				  -	      nop	0
     11  407b				  -	      ELSE
     12  407b				  -	      bit	VSYNC
     13  407b				  -	      ENDIF
     14  407b				  -.CYCLES    SET	.CYCLES - 3
     15  407b					      ENDIF
     16  407b
     17  407b					      REPEAT	.CYCLES / 2
     18  407b		       ea		      nop
     19  407c					      REPEND
    127  407c		       b9 10 f6 	      lda	COL_4,y	; 5
    128  407f		       85 4e		      sta	PF1	; 3   @45
      0  4081					      SLEEP	3	; @45
      1  4081				   .CYCLES    SET	3
      2  4081
      3  4081				  -	      IF	.CYCLES < 2
      4  4081				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4081				  -	      ERR
      6  4081					      ENDIF
      7  4081
      8  4081					      IF	.CYCLES & 1
      9  4081					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4081		       04 00		      nop	0
     11  4083				  -	      ELSE
     12  4083				  -	      bit	VSYNC
     13  4083					      ENDIF
     14  4083				   .CYCLES    SET	.CYCLES - 3
     15  4083					      ENDIF
     16  4083
     17  4083				  -	      REPEAT	.CYCLES / 2
     18  4083				  -	      nop
     19  4083					      REPEND
    130  4083		       b9 e8 f6 	      lda	COL_5,y	; 5
    131  4086		       85 4f		      sta	PF2	; 3
    132  4088
    133  4088		       88		      dey		; 2
    134  4089		       ca		      dex		; 2
    135  408a		       d0 d5		      bne	triplet	; 2(3)
    136  408c
    137  408c		       c0 ff		      cpy	#-1	; 2
    138  408e		       d0 cf		      bne	SokoLogo	; 2(3)
    139  4090
    140  4090							;lda #0
    141  4090							;sta PF0
    142  4090							;sta PF1
    143  4090							;sta PF2
    144  4090
    145  4090		       a6 9b		      ldx	Platform
    146  4092		       bd 00 f0 	      lda	OverscanTime2,x
    147  4095		       8d 96 02 	      sta	TIM64T
    148  4098
    149  4098				  -	      if	0
    150  4098				  -	      sta	WSYNC
    151  4098				  -	      sta	WSYNC
    152  4098				  -	      sta	WSYNC
    153  4098				  -	      sta	WSYNC
    154  4098				  -	      sta	WSYNC
    155  4098				  -	      SLEEP	8
    156  4098				  -	      jsr	SokoScreen
    157  4098				  -
    158  4098				  -	      lda	#0
    159  4098				  -	      sta	BoardScrollX
    160  4098				  -	      sta	BoardScrollY
    161  4098					      endif
    162  4098
    163  4098							;		ldy #63
    164  4098							;bot2		 sta WSYNC
    165  4098							;		dey
    166  4098							;		bpl bot2
    167  4098
    168  4098							;--------------------------------------------------------------------------
    169  4098
    170  4098		       a9 00		      lda	#0
    171  409a		       85 4d		      sta	PF0
    172  409c		       85 4e		      sta	PF1
    173  409e		       85 4f		      sta	PF2
    174  40a0
    175  40a0
      0  40a0					      NEXT_RANDOM
      1  40a0		       a5 81		      lda	rnd
      2  40a2		       4a		      lsr
      3  40a3		       90 02		      bcc	.skipEOR
      4  40a5		       49 fe		      eor	#RND_EOR_VAL
      5  40a7		       85 81	   .skipEOR   sta	rnd
    177  40a9
    178  40a9							; D1 VBLANK turns off beam
    179  40a9							; It needs to be turned on 37 scanlines later
    180  40a9
    181  40a9				   oscan
    182  40a9		       ad 84 02 	      lda	INTIM
    183  40ac		       d0 fb		      bne	oscan
    184  40ae
    185  40ae		       a9 42		      lda	#%01000010	; bit6 is not required
    186  40b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    187  40b2
    188  40b2				  -	      if	0
    189  40b2				  -	      inc	rnd
    190  40b2				  -	      bne	rdd
    191  40b2				  -	      inc	rndHi
    192  40b2				  -rdd
    193  40b2				  -
    194  40b2				  -	      dec	digitick
    195  40b2				  -	      bpl	ret2
    196  40b2				  -	      lda	#40
    197  40b2				  -	      sta	digitick
    198  40b2				  -
    199  40b2				  -	      jsr	Random
    200  40b2				  -	      and	#3
    201  40b2				  -	      beq	ret2
    202  40b2				  -	      tax
    203  40b2				  -	      jsr	Random
    204  40b2				  -	      and	#$F0
    205  40b2				  -	      sta	digit-1,x
    206  40b2				  -	      jmp	RestartFrame0
    207  40b2				  -
    208  40b2				  -ret2
    209  40b2					      endif
    210  40b2
    211  40b2
    212  40b2		       a5 4c		      lda	INPT4
    213  40b4		       10 03		      bpl	ret
    214  40b6
    215  40b6		       4c 3d f0 	      jmp	RestartFrame
    216  40b9
    217  40b9				   ret
    218  40b9		       60		      rts
    219  40ba
    220  40ba
    221  40ba
    222  40ba					      MAC	lumtable
    223  40ba							; {4} MIN LUM 1
    224  40ba							; {5} MIN LUM 2
    225  40ba							; {6} MIN LUM 3
    226  40ba
    227  40ba				   .LUM1      SET	{4}*256
    228  40ba				   .LUM2      SET	{5}*256
    229  40ba				   .LUM3      SET	{6}*256
    230  40ba
    231  40ba				   .STEP1     =	(256*({7}-{4}))/72
    232  40ba				   .STEP2     =	(256*({8}-{5}))/72
    233  40ba				   .STEP3     =	(256*({9}-{6}))/72
    234  40ba
    235  40ba					      REPEAT	72
    236  40ba					      .byte	{1}+(.LUM1/256)
    237  40ba					      .byte	{2}+(.LUM2/256)
    238  40ba					      .byte	{3}+(.LUM3/256)
    239  40ba
    240  40ba							;    ECHO {1}+(.LUM1/256)
    241  40ba							;    ECHO {2}+(.LUM1/256)
    242  40ba							;    ECHO {3}+(.LUM1/256)
    243  40ba
    244  40ba				   .LUM1      SET	.LUM1 + .STEP1
    245  40ba				   .LUM2      SET	.LUM2 + .STEP2
    246  40ba				   .LUM3      SET	.LUM3 + .STEP3
    247  40ba					      REPEND
    248  40ba					      ENDM		;{1}{2}{3} base colours
    249  40ba
    250  40ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    251  40ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    252  40ba
    253  4100		       00 00 00 00*	      align	256
    254  4100							;    ECHO "NTSC LUMS"
    255  4100				   colr_ntsc2
      0  4100					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  4100
      2  4100
      3  4100
      4  4100
      5  4100				   .LUM1      SET	$4*256
      6  4100				   .LUM2      SET	$6*256
      7  4100				   .LUM3      SET	$8*256
      8  4100
      9  4100		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  4100		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  4100		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  4100
     13  4100					      REPEAT	72
     14  4100		       44		      .byte.b	$40+(.LUM1/256)
     15  4101		       26		      .byte.b	$20+(.LUM2/256)
     16  4102		       98		      .byte.b	$90+(.LUM3/256)
     17  4103
     18  4103
     19  4103
     20  4103
     21  4103
     22  4103				   .LUM1      SET	.LUM1 + .STEP1
     23  4103				   .LUM2      SET	.LUM2 + .STEP2
     24  4103				   .LUM3      SET	.LUM3 + .STEP3
     13  4103					      REPEND
     14  4103		       44		      .byte.b	$40+(.LUM1/256)
     15  4104		       26		      .byte.b	$20+(.LUM2/256)
     16  4105		       98		      .byte.b	$90+(.LUM3/256)
     17  4106
     18  4106
     19  4106
     20  4106
     21  4106
     22  4106				   .LUM1      SET	.LUM1 + .STEP1
     23  4106				   .LUM2      SET	.LUM2 + .STEP2
     24  4106				   .LUM3      SET	.LUM3 + .STEP3
     13  4106					      REPEND
     14  4106		       44		      .byte.b	$40+(.LUM1/256)
     15  4107		       26		      .byte.b	$20+(.LUM2/256)
     16  4108		       98		      .byte.b	$90+(.LUM3/256)
     17  4109
     18  4109
     19  4109
     20  4109
     21  4109
     22  4109				   .LUM1      SET	.LUM1 + .STEP1
     23  4109				   .LUM2      SET	.LUM2 + .STEP2
     24  4109				   .LUM3      SET	.LUM3 + .STEP3
     13  4109					      REPEND
     14  4109		       44		      .byte.b	$40+(.LUM1/256)
     15  410a		       26		      .byte.b	$20+(.LUM2/256)
     16  410b		       98		      .byte.b	$90+(.LUM3/256)
     17  410c
     18  410c
     19  410c
     20  410c
     21  410c
     22  410c				   .LUM1      SET	.LUM1 + .STEP1
     23  410c				   .LUM2      SET	.LUM2 + .STEP2
     24  410c				   .LUM3      SET	.LUM3 + .STEP3
     13  410c					      REPEND
     14  410c		       44		      .byte.b	$40+(.LUM1/256)
     15  410d		       26		      .byte.b	$20+(.LUM2/256)
     16  410e		       98		      .byte.b	$90+(.LUM3/256)
     17  410f
     18  410f
     19  410f
     20  410f
     21  410f
     22  410f				   .LUM1      SET	.LUM1 + .STEP1
     23  410f				   .LUM2      SET	.LUM2 + .STEP2
     24  410f				   .LUM3      SET	.LUM3 + .STEP3
     13  410f					      REPEND
     14  410f		       44		      .byte.b	$40+(.LUM1/256)
     15  4110		       26		      .byte.b	$20+(.LUM2/256)
     16  4111		       98		      .byte.b	$90+(.LUM3/256)
     17  4112
     18  4112
     19  4112
     20  4112
     21  4112
     22  4112				   .LUM1      SET	.LUM1 + .STEP1
     23  4112				   .LUM2      SET	.LUM2 + .STEP2
     24  4112				   .LUM3      SET	.LUM3 + .STEP3
     13  4112					      REPEND
     14  4112		       44		      .byte.b	$40+(.LUM1/256)
     15  4113		       26		      .byte.b	$20+(.LUM2/256)
     16  4114		       98		      .byte.b	$90+(.LUM3/256)
     17  4115
     18  4115
     19  4115
     20  4115
     21  4115
     22  4115				   .LUM1      SET	.LUM1 + .STEP1
     23  4115				   .LUM2      SET	.LUM2 + .STEP2
     24  4115				   .LUM3      SET	.LUM3 + .STEP3
     13  4115					      REPEND
     14  4115		       44		      .byte.b	$40+(.LUM1/256)
     15  4116		       26		      .byte.b	$20+(.LUM2/256)
     16  4117		       98		      .byte.b	$90+(.LUM3/256)
     17  4118
     18  4118
     19  4118
     20  4118
     21  4118
     22  4118				   .LUM1      SET	.LUM1 + .STEP1
     23  4118				   .LUM2      SET	.LUM2 + .STEP2
     24  4118				   .LUM3      SET	.LUM3 + .STEP3
     13  4118					      REPEND
     14  4118		       44		      .byte.b	$40+(.LUM1/256)
     15  4119		       26		      .byte.b	$20+(.LUM2/256)
     16  411a		       98		      .byte.b	$90+(.LUM3/256)
     17  411b
     18  411b
     19  411b
     20  411b
     21  411b
     22  411b				   .LUM1      SET	.LUM1 + .STEP1
     23  411b				   .LUM2      SET	.LUM2 + .STEP2
     24  411b				   .LUM3      SET	.LUM3 + .STEP3
     13  411b					      REPEND
     14  411b		       44		      .byte.b	$40+(.LUM1/256)
     15  411c		       26		      .byte.b	$20+(.LUM2/256)
     16  411d		       98		      .byte.b	$90+(.LUM3/256)
     17  411e
     18  411e
     19  411e
     20  411e
     21  411e
     22  411e				   .LUM1      SET	.LUM1 + .STEP1
     23  411e				   .LUM2      SET	.LUM2 + .STEP2
     24  411e				   .LUM3      SET	.LUM3 + .STEP3
     13  411e					      REPEND
     14  411e		       44		      .byte.b	$40+(.LUM1/256)
     15  411f		       26		      .byte.b	$20+(.LUM2/256)
     16  4120		       98		      .byte.b	$90+(.LUM3/256)
     17  4121
     18  4121
     19  4121
     20  4121
     21  4121
     22  4121				   .LUM1      SET	.LUM1 + .STEP1
     23  4121				   .LUM2      SET	.LUM2 + .STEP2
     24  4121				   .LUM3      SET	.LUM3 + .STEP3
     13  4121					      REPEND
     14  4121		       44		      .byte.b	$40+(.LUM1/256)
     15  4122		       26		      .byte.b	$20+(.LUM2/256)
     16  4123		       98		      .byte.b	$90+(.LUM3/256)
     17  4124
     18  4124
     19  4124
     20  4124
     21  4124
     22  4124				   .LUM1      SET	.LUM1 + .STEP1
     23  4124				   .LUM2      SET	.LUM2 + .STEP2
     24  4124				   .LUM3      SET	.LUM3 + .STEP3
     13  4124					      REPEND
     14  4124		       44		      .byte.b	$40+(.LUM1/256)
     15  4125		       26		      .byte.b	$20+(.LUM2/256)
     16  4126		       98		      .byte.b	$90+(.LUM3/256)
     17  4127
     18  4127
     19  4127
     20  4127
     21  4127
     22  4127				   .LUM1      SET	.LUM1 + .STEP1
     23  4127				   .LUM2      SET	.LUM2 + .STEP2
     24  4127				   .LUM3      SET	.LUM3 + .STEP3
     13  4127					      REPEND
     14  4127		       44		      .byte.b	$40+(.LUM1/256)
     15  4128		       26		      .byte.b	$20+(.LUM2/256)
     16  4129		       98		      .byte.b	$90+(.LUM3/256)
     17  412a
     18  412a
     19  412a
     20  412a
     21  412a
     22  412a				   .LUM1      SET	.LUM1 + .STEP1
     23  412a				   .LUM2      SET	.LUM2 + .STEP2
     24  412a				   .LUM3      SET	.LUM3 + .STEP3
     13  412a					      REPEND
     14  412a		       44		      .byte.b	$40+(.LUM1/256)
     15  412b		       26		      .byte.b	$20+(.LUM2/256)
     16  412c		       98		      .byte.b	$90+(.LUM3/256)
     17  412d
     18  412d
     19  412d
     20  412d
     21  412d
     22  412d				   .LUM1      SET	.LUM1 + .STEP1
     23  412d				   .LUM2      SET	.LUM2 + .STEP2
     24  412d				   .LUM3      SET	.LUM3 + .STEP3
     13  412d					      REPEND
     14  412d		       44		      .byte.b	$40+(.LUM1/256)
     15  412e		       26		      .byte.b	$20+(.LUM2/256)
     16  412f		       98		      .byte.b	$90+(.LUM3/256)
     17  4130
     18  4130
     19  4130
     20  4130
     21  4130
     22  4130				   .LUM1      SET	.LUM1 + .STEP1
     23  4130				   .LUM2      SET	.LUM2 + .STEP2
     24  4130				   .LUM3      SET	.LUM3 + .STEP3
     13  4130					      REPEND
     14  4130		       44		      .byte.b	$40+(.LUM1/256)
     15  4131		       26		      .byte.b	$20+(.LUM2/256)
     16  4132		       98		      .byte.b	$90+(.LUM3/256)
     17  4133
     18  4133
     19  4133
     20  4133
     21  4133
     22  4133				   .LUM1      SET	.LUM1 + .STEP1
     23  4133				   .LUM2      SET	.LUM2 + .STEP2
     24  4133				   .LUM3      SET	.LUM3 + .STEP3
     13  4133					      REPEND
     14  4133		       44		      .byte.b	$40+(.LUM1/256)
     15  4134		       26		      .byte.b	$20+(.LUM2/256)
     16  4135		       98		      .byte.b	$90+(.LUM3/256)
     17  4136
     18  4136
     19  4136
     20  4136
     21  4136
     22  4136				   .LUM1      SET	.LUM1 + .STEP1
     23  4136				   .LUM2      SET	.LUM2 + .STEP2
     24  4136				   .LUM3      SET	.LUM3 + .STEP3
     13  4136					      REPEND
     14  4136		       44		      .byte.b	$40+(.LUM1/256)
     15  4137		       26		      .byte.b	$20+(.LUM2/256)
     16  4138		       98		      .byte.b	$90+(.LUM3/256)
     17  4139
     18  4139
     19  4139
     20  4139
     21  4139
     22  4139				   .LUM1      SET	.LUM1 + .STEP1
     23  4139				   .LUM2      SET	.LUM2 + .STEP2
     24  4139				   .LUM3      SET	.LUM3 + .STEP3
     13  4139					      REPEND
     14  4139		       44		      .byte.b	$40+(.LUM1/256)
     15  413a		       26		      .byte.b	$20+(.LUM2/256)
     16  413b		       98		      .byte.b	$90+(.LUM3/256)
     17  413c
     18  413c
     19  413c
     20  413c
     21  413c
     22  413c				   .LUM1      SET	.LUM1 + .STEP1
     23  413c				   .LUM2      SET	.LUM2 + .STEP2
     24  413c				   .LUM3      SET	.LUM3 + .STEP3
     13  413c					      REPEND
     14  413c		       44		      .byte.b	$40+(.LUM1/256)
     15  413d		       26		      .byte.b	$20+(.LUM2/256)
     16  413e		       98		      .byte.b	$90+(.LUM3/256)
     17  413f
     18  413f
     19  413f
     20  413f
     21  413f
     22  413f				   .LUM1      SET	.LUM1 + .STEP1
     23  413f				   .LUM2      SET	.LUM2 + .STEP2
     24  413f				   .LUM3      SET	.LUM3 + .STEP3
     13  413f					      REPEND
     14  413f		       44		      .byte.b	$40+(.LUM1/256)
     15  4140		       26		      .byte.b	$20+(.LUM2/256)
     16  4141		       98		      .byte.b	$90+(.LUM3/256)
     17  4142
     18  4142
     19  4142
     20  4142
     21  4142
     22  4142				   .LUM1      SET	.LUM1 + .STEP1
     23  4142				   .LUM2      SET	.LUM2 + .STEP2
     24  4142				   .LUM3      SET	.LUM3 + .STEP3
     13  4142					      REPEND
     14  4142		       44		      .byte.b	$40+(.LUM1/256)
     15  4143		       26		      .byte.b	$20+(.LUM2/256)
     16  4144		       98		      .byte.b	$90+(.LUM3/256)
     17  4145
     18  4145
     19  4145
     20  4145
     21  4145
     22  4145				   .LUM1      SET	.LUM1 + .STEP1
     23  4145				   .LUM2      SET	.LUM2 + .STEP2
     24  4145				   .LUM3      SET	.LUM3 + .STEP3
     13  4145					      REPEND
     14  4145		       44		      .byte.b	$40+(.LUM1/256)
     15  4146		       26		      .byte.b	$20+(.LUM2/256)
     16  4147		       98		      .byte.b	$90+(.LUM3/256)
     17  4148
     18  4148
     19  4148
     20  4148
     21  4148
     22  4148				   .LUM1      SET	.LUM1 + .STEP1
     23  4148				   .LUM2      SET	.LUM2 + .STEP2
     24  4148				   .LUM3      SET	.LUM3 + .STEP3
     13  4148					      REPEND
     14  4148		       44		      .byte.b	$40+(.LUM1/256)
     15  4149		       26		      .byte.b	$20+(.LUM2/256)
     16  414a		       98		      .byte.b	$90+(.LUM3/256)
     17  414b
     18  414b
     19  414b
     20  414b
     21  414b
     22  414b				   .LUM1      SET	.LUM1 + .STEP1
     23  414b				   .LUM2      SET	.LUM2 + .STEP2
     24  414b				   .LUM3      SET	.LUM3 + .STEP3
     13  414b					      REPEND
     14  414b		       44		      .byte.b	$40+(.LUM1/256)
     15  414c		       26		      .byte.b	$20+(.LUM2/256)
     16  414d		       98		      .byte.b	$90+(.LUM3/256)
     17  414e
     18  414e
     19  414e
     20  414e
     21  414e
     22  414e				   .LUM1      SET	.LUM1 + .STEP1
     23  414e				   .LUM2      SET	.LUM2 + .STEP2
     24  414e				   .LUM3      SET	.LUM3 + .STEP3
     13  414e					      REPEND
     14  414e		       44		      .byte.b	$40+(.LUM1/256)
     15  414f		       26		      .byte.b	$20+(.LUM2/256)
     16  4150		       98		      .byte.b	$90+(.LUM3/256)
     17  4151
     18  4151
     19  4151
     20  4151
     21  4151
     22  4151				   .LUM1      SET	.LUM1 + .STEP1
     23  4151				   .LUM2      SET	.LUM2 + .STEP2
     24  4151				   .LUM3      SET	.LUM3 + .STEP3
     13  4151					      REPEND
     14  4151		       44		      .byte.b	$40+(.LUM1/256)
     15  4152		       26		      .byte.b	$20+(.LUM2/256)
     16  4153		       98		      .byte.b	$90+(.LUM3/256)
     17  4154
     18  4154
     19  4154
     20  4154
     21  4154
     22  4154				   .LUM1      SET	.LUM1 + .STEP1
     23  4154				   .LUM2      SET	.LUM2 + .STEP2
     24  4154				   .LUM3      SET	.LUM3 + .STEP3
     13  4154					      REPEND
     14  4154		       44		      .byte.b	$40+(.LUM1/256)
     15  4155		       26		      .byte.b	$20+(.LUM2/256)
     16  4156		       98		      .byte.b	$90+(.LUM3/256)
     17  4157
     18  4157
     19  4157
     20  4157
     21  4157
     22  4157				   .LUM1      SET	.LUM1 + .STEP1
     23  4157				   .LUM2      SET	.LUM2 + .STEP2
     24  4157				   .LUM3      SET	.LUM3 + .STEP3
     13  4157					      REPEND
     14  4157		       44		      .byte.b	$40+(.LUM1/256)
     15  4158		       26		      .byte.b	$20+(.LUM2/256)
     16  4159		       98		      .byte.b	$90+(.LUM3/256)
     17  415a
     18  415a
     19  415a
     20  415a
     21  415a
     22  415a				   .LUM1      SET	.LUM1 + .STEP1
     23  415a				   .LUM2      SET	.LUM2 + .STEP2
     24  415a				   .LUM3      SET	.LUM3 + .STEP3
     13  415a					      REPEND
     14  415a		       44		      .byte.b	$40+(.LUM1/256)
     15  415b		       26		      .byte.b	$20+(.LUM2/256)
     16  415c		       98		      .byte.b	$90+(.LUM3/256)
     17  415d
     18  415d
     19  415d
     20  415d
     21  415d
     22  415d				   .LUM1      SET	.LUM1 + .STEP1
     23  415d				   .LUM2      SET	.LUM2 + .STEP2
     24  415d				   .LUM3      SET	.LUM3 + .STEP3
     13  415d					      REPEND
     14  415d		       44		      .byte.b	$40+(.LUM1/256)
     15  415e		       26		      .byte.b	$20+(.LUM2/256)
     16  415f		       98		      .byte.b	$90+(.LUM3/256)
     17  4160
     18  4160
     19  4160
     20  4160
     21  4160
     22  4160				   .LUM1      SET	.LUM1 + .STEP1
     23  4160				   .LUM2      SET	.LUM2 + .STEP2
     24  4160				   .LUM3      SET	.LUM3 + .STEP3
     13  4160					      REPEND
     14  4160		       44		      .byte.b	$40+(.LUM1/256)
     15  4161		       26		      .byte.b	$20+(.LUM2/256)
     16  4162		       98		      .byte.b	$90+(.LUM3/256)
     17  4163
     18  4163
     19  4163
     20  4163
     21  4163
     22  4163				   .LUM1      SET	.LUM1 + .STEP1
     23  4163				   .LUM2      SET	.LUM2 + .STEP2
     24  4163				   .LUM3      SET	.LUM3 + .STEP3
     13  4163					      REPEND
     14  4163		       44		      .byte.b	$40+(.LUM1/256)
     15  4164		       26		      .byte.b	$20+(.LUM2/256)
     16  4165		       98		      .byte.b	$90+(.LUM3/256)
     17  4166
     18  4166
     19  4166
     20  4166
     21  4166
     22  4166				   .LUM1      SET	.LUM1 + .STEP1
     23  4166				   .LUM2      SET	.LUM2 + .STEP2
     24  4166				   .LUM3      SET	.LUM3 + .STEP3
     13  4166					      REPEND
     14  4166		       44		      .byte.b	$40+(.LUM1/256)
     15  4167		       26		      .byte.b	$20+(.LUM2/256)
     16  4168		       98		      .byte.b	$90+(.LUM3/256)
     17  4169
     18  4169
     19  4169
     20  4169
     21  4169
     22  4169				   .LUM1      SET	.LUM1 + .STEP1
     23  4169				   .LUM2      SET	.LUM2 + .STEP2
     24  4169				   .LUM3      SET	.LUM3 + .STEP3
     13  4169					      REPEND
     14  4169		       44		      .byte.b	$40+(.LUM1/256)
     15  416a		       26		      .byte.b	$20+(.LUM2/256)
     16  416b		       98		      .byte.b	$90+(.LUM3/256)
     17  416c
     18  416c
     19  416c
     20  416c
     21  416c
     22  416c				   .LUM1      SET	.LUM1 + .STEP1
     23  416c				   .LUM2      SET	.LUM2 + .STEP2
     24  416c				   .LUM3      SET	.LUM3 + .STEP3
     13  416c					      REPEND
     14  416c		       44		      .byte.b	$40+(.LUM1/256)
     15  416d		       26		      .byte.b	$20+(.LUM2/256)
     16  416e		       98		      .byte.b	$90+(.LUM3/256)
     17  416f
     18  416f
     19  416f
     20  416f
     21  416f
     22  416f				   .LUM1      SET	.LUM1 + .STEP1
     23  416f				   .LUM2      SET	.LUM2 + .STEP2
     24  416f				   .LUM3      SET	.LUM3 + .STEP3
     13  416f					      REPEND
     14  416f		       44		      .byte.b	$40+(.LUM1/256)
     15  4170		       26		      .byte.b	$20+(.LUM2/256)
     16  4171		       98		      .byte.b	$90+(.LUM3/256)
     17  4172
     18  4172
     19  4172
     20  4172
     21  4172
     22  4172				   .LUM1      SET	.LUM1 + .STEP1
     23  4172				   .LUM2      SET	.LUM2 + .STEP2
     24  4172				   .LUM3      SET	.LUM3 + .STEP3
     13  4172					      REPEND
     14  4172		       44		      .byte.b	$40+(.LUM1/256)
     15  4173		       26		      .byte.b	$20+(.LUM2/256)
     16  4174		       98		      .byte.b	$90+(.LUM3/256)
     17  4175
     18  4175
     19  4175
     20  4175
     21  4175
     22  4175				   .LUM1      SET	.LUM1 + .STEP1
     23  4175				   .LUM2      SET	.LUM2 + .STEP2
     24  4175				   .LUM3      SET	.LUM3 + .STEP3
     13  4175					      REPEND
     14  4175		       44		      .byte.b	$40+(.LUM1/256)
     15  4176		       26		      .byte.b	$20+(.LUM2/256)
     16  4177		       98		      .byte.b	$90+(.LUM3/256)
     17  4178
     18  4178
     19  4178
     20  4178
     21  4178
     22  4178				   .LUM1      SET	.LUM1 + .STEP1
     23  4178				   .LUM2      SET	.LUM2 + .STEP2
     24  4178				   .LUM3      SET	.LUM3 + .STEP3
     13  4178					      REPEND
     14  4178		       44		      .byte.b	$40+(.LUM1/256)
     15  4179		       26		      .byte.b	$20+(.LUM2/256)
     16  417a		       98		      .byte.b	$90+(.LUM3/256)
     17  417b
     18  417b
     19  417b
     20  417b
     21  417b
     22  417b				   .LUM1      SET	.LUM1 + .STEP1
     23  417b				   .LUM2      SET	.LUM2 + .STEP2
     24  417b				   .LUM3      SET	.LUM3 + .STEP3
     13  417b					      REPEND
     14  417b		       44		      .byte.b	$40+(.LUM1/256)
     15  417c		       26		      .byte.b	$20+(.LUM2/256)
     16  417d		       98		      .byte.b	$90+(.LUM3/256)
     17  417e
     18  417e
     19  417e
     20  417e
     21  417e
     22  417e				   .LUM1      SET	.LUM1 + .STEP1
     23  417e				   .LUM2      SET	.LUM2 + .STEP2
     24  417e				   .LUM3      SET	.LUM3 + .STEP3
     13  417e					      REPEND
     14  417e		       44		      .byte.b	$40+(.LUM1/256)
     15  417f		       26		      .byte.b	$20+(.LUM2/256)
     16  4180		       98		      .byte.b	$90+(.LUM3/256)
     17  4181
     18  4181
     19  4181
     20  4181
     21  4181
     22  4181				   .LUM1      SET	.LUM1 + .STEP1
     23  4181				   .LUM2      SET	.LUM2 + .STEP2
     24  4181				   .LUM3      SET	.LUM3 + .STEP3
     13  4181					      REPEND
     14  4181		       44		      .byte.b	$40+(.LUM1/256)
     15  4182		       26		      .byte.b	$20+(.LUM2/256)
     16  4183		       98		      .byte.b	$90+(.LUM3/256)
     17  4184
     18  4184
     19  4184
     20  4184
     21  4184
     22  4184				   .LUM1      SET	.LUM1 + .STEP1
     23  4184				   .LUM2      SET	.LUM2 + .STEP2
     24  4184				   .LUM3      SET	.LUM3 + .STEP3
     13  4184					      REPEND
     14  4184		       44		      .byte.b	$40+(.LUM1/256)
     15  4185		       26		      .byte.b	$20+(.LUM2/256)
     16  4186		       98		      .byte.b	$90+(.LUM3/256)
     17  4187
     18  4187
     19  4187
     20  4187
     21  4187
     22  4187				   .LUM1      SET	.LUM1 + .STEP1
     23  4187				   .LUM2      SET	.LUM2 + .STEP2
     24  4187				   .LUM3      SET	.LUM3 + .STEP3
     13  4187					      REPEND
     14  4187		       44		      .byte.b	$40+(.LUM1/256)
     15  4188		       26		      .byte.b	$20+(.LUM2/256)
     16  4189		       98		      .byte.b	$90+(.LUM3/256)
     17  418a
     18  418a
     19  418a
     20  418a
     21  418a
     22  418a				   .LUM1      SET	.LUM1 + .STEP1
     23  418a				   .LUM2      SET	.LUM2 + .STEP2
     24  418a				   .LUM3      SET	.LUM3 + .STEP3
     13  418a					      REPEND
     14  418a		       44		      .byte.b	$40+(.LUM1/256)
     15  418b		       26		      .byte.b	$20+(.LUM2/256)
     16  418c		       98		      .byte.b	$90+(.LUM3/256)
     17  418d
     18  418d
     19  418d
     20  418d
     21  418d
     22  418d				   .LUM1      SET	.LUM1 + .STEP1
     23  418d				   .LUM2      SET	.LUM2 + .STEP2
     24  418d				   .LUM3      SET	.LUM3 + .STEP3
     13  418d					      REPEND
     14  418d		       44		      .byte.b	$40+(.LUM1/256)
     15  418e		       26		      .byte.b	$20+(.LUM2/256)
     16  418f		       98		      .byte.b	$90+(.LUM3/256)
     17  4190
     18  4190
     19  4190
     20  4190
     21  4190
     22  4190				   .LUM1      SET	.LUM1 + .STEP1
     23  4190				   .LUM2      SET	.LUM2 + .STEP2
     24  4190				   .LUM3      SET	.LUM3 + .STEP3
     13  4190					      REPEND
     14  4190		       44		      .byte.b	$40+(.LUM1/256)
     15  4191		       26		      .byte.b	$20+(.LUM2/256)
     16  4192		       98		      .byte.b	$90+(.LUM3/256)
     17  4193
     18  4193
     19  4193
     20  4193
     21  4193
     22  4193				   .LUM1      SET	.LUM1 + .STEP1
     23  4193				   .LUM2      SET	.LUM2 + .STEP2
     24  4193				   .LUM3      SET	.LUM3 + .STEP3
     13  4193					      REPEND
     14  4193		       44		      .byte.b	$40+(.LUM1/256)
     15  4194		       26		      .byte.b	$20+(.LUM2/256)
     16  4195		       98		      .byte.b	$90+(.LUM3/256)
     17  4196
     18  4196
     19  4196
     20  4196
     21  4196
     22  4196				   .LUM1      SET	.LUM1 + .STEP1
     23  4196				   .LUM2      SET	.LUM2 + .STEP2
     24  4196				   .LUM3      SET	.LUM3 + .STEP3
     13  4196					      REPEND
     14  4196		       44		      .byte.b	$40+(.LUM1/256)
     15  4197		       26		      .byte.b	$20+(.LUM2/256)
     16  4198		       98		      .byte.b	$90+(.LUM3/256)
     17  4199
     18  4199
     19  4199
     20  4199
     21  4199
     22  4199				   .LUM1      SET	.LUM1 + .STEP1
     23  4199				   .LUM2      SET	.LUM2 + .STEP2
     24  4199				   .LUM3      SET	.LUM3 + .STEP3
     13  4199					      REPEND
     14  4199		       44		      .byte.b	$40+(.LUM1/256)
     15  419a		       26		      .byte.b	$20+(.LUM2/256)
     16  419b		       98		      .byte.b	$90+(.LUM3/256)
     17  419c
     18  419c
     19  419c
     20  419c
     21  419c
     22  419c				   .LUM1      SET	.LUM1 + .STEP1
     23  419c				   .LUM2      SET	.LUM2 + .STEP2
     24  419c				   .LUM3      SET	.LUM3 + .STEP3
     13  419c					      REPEND
     14  419c		       44		      .byte.b	$40+(.LUM1/256)
     15  419d		       26		      .byte.b	$20+(.LUM2/256)
     16  419e		       98		      .byte.b	$90+(.LUM3/256)
     17  419f
     18  419f
     19  419f
     20  419f
     21  419f
     22  419f				   .LUM1      SET	.LUM1 + .STEP1
     23  419f				   .LUM2      SET	.LUM2 + .STEP2
     24  419f				   .LUM3      SET	.LUM3 + .STEP3
     13  419f					      REPEND
     14  419f		       44		      .byte.b	$40+(.LUM1/256)
     15  41a0		       26		      .byte.b	$20+(.LUM2/256)
     16  41a1		       98		      .byte.b	$90+(.LUM3/256)
     17  41a2
     18  41a2
     19  41a2
     20  41a2
     21  41a2
     22  41a2				   .LUM1      SET	.LUM1 + .STEP1
     23  41a2				   .LUM2      SET	.LUM2 + .STEP2
     24  41a2				   .LUM3      SET	.LUM3 + .STEP3
     13  41a2					      REPEND
     14  41a2		       44		      .byte.b	$40+(.LUM1/256)
     15  41a3		       26		      .byte.b	$20+(.LUM2/256)
     16  41a4		       98		      .byte.b	$90+(.LUM3/256)
     17  41a5
     18  41a5
     19  41a5
     20  41a5
     21  41a5
     22  41a5				   .LUM1      SET	.LUM1 + .STEP1
     23  41a5				   .LUM2      SET	.LUM2 + .STEP2
     24  41a5				   .LUM3      SET	.LUM3 + .STEP3
     13  41a5					      REPEND
     14  41a5		       44		      .byte.b	$40+(.LUM1/256)
     15  41a6		       26		      .byte.b	$20+(.LUM2/256)
     16  41a7		       98		      .byte.b	$90+(.LUM3/256)
     17  41a8
     18  41a8
     19  41a8
     20  41a8
     21  41a8
     22  41a8				   .LUM1      SET	.LUM1 + .STEP1
     23  41a8				   .LUM2      SET	.LUM2 + .STEP2
     24  41a8				   .LUM3      SET	.LUM3 + .STEP3
     13  41a8					      REPEND
     14  41a8		       44		      .byte.b	$40+(.LUM1/256)
     15  41a9		       26		      .byte.b	$20+(.LUM2/256)
     16  41aa		       98		      .byte.b	$90+(.LUM3/256)
     17  41ab
     18  41ab
     19  41ab
     20  41ab
     21  41ab
     22  41ab				   .LUM1      SET	.LUM1 + .STEP1
     23  41ab				   .LUM2      SET	.LUM2 + .STEP2
     24  41ab				   .LUM3      SET	.LUM3 + .STEP3
     13  41ab					      REPEND
     14  41ab		       44		      .byte.b	$40+(.LUM1/256)
     15  41ac		       26		      .byte.b	$20+(.LUM2/256)
     16  41ad		       98		      .byte.b	$90+(.LUM3/256)
     17  41ae
     18  41ae
     19  41ae
     20  41ae
     21  41ae
     22  41ae				   .LUM1      SET	.LUM1 + .STEP1
     23  41ae				   .LUM2      SET	.LUM2 + .STEP2
     24  41ae				   .LUM3      SET	.LUM3 + .STEP3
     13  41ae					      REPEND
     14  41ae		       44		      .byte.b	$40+(.LUM1/256)
     15  41af		       26		      .byte.b	$20+(.LUM2/256)
     16  41b0		       98		      .byte.b	$90+(.LUM3/256)
     17  41b1
     18  41b1
     19  41b1
     20  41b1
     21  41b1
     22  41b1				   .LUM1      SET	.LUM1 + .STEP1
     23  41b1				   .LUM2      SET	.LUM2 + .STEP2
     24  41b1				   .LUM3      SET	.LUM3 + .STEP3
     13  41b1					      REPEND
     14  41b1		       44		      .byte.b	$40+(.LUM1/256)
     15  41b2		       26		      .byte.b	$20+(.LUM2/256)
     16  41b3		       98		      .byte.b	$90+(.LUM3/256)
     17  41b4
     18  41b4
     19  41b4
     20  41b4
     21  41b4
     22  41b4				   .LUM1      SET	.LUM1 + .STEP1
     23  41b4				   .LUM2      SET	.LUM2 + .STEP2
     24  41b4				   .LUM3      SET	.LUM3 + .STEP3
     13  41b4					      REPEND
     14  41b4		       44		      .byte.b	$40+(.LUM1/256)
     15  41b5		       26		      .byte.b	$20+(.LUM2/256)
     16  41b6		       98		      .byte.b	$90+(.LUM3/256)
     17  41b7
     18  41b7
     19  41b7
     20  41b7
     21  41b7
     22  41b7				   .LUM1      SET	.LUM1 + .STEP1
     23  41b7				   .LUM2      SET	.LUM2 + .STEP2
     24  41b7				   .LUM3      SET	.LUM3 + .STEP3
     13  41b7					      REPEND
     14  41b7		       44		      .byte.b	$40+(.LUM1/256)
     15  41b8		       26		      .byte.b	$20+(.LUM2/256)
     16  41b9		       98		      .byte.b	$90+(.LUM3/256)
     17  41ba
     18  41ba
     19  41ba
     20  41ba
     21  41ba
     22  41ba				   .LUM1      SET	.LUM1 + .STEP1
     23  41ba				   .LUM2      SET	.LUM2 + .STEP2
     24  41ba				   .LUM3      SET	.LUM3 + .STEP3
     13  41ba					      REPEND
     14  41ba		       44		      .byte.b	$40+(.LUM1/256)
     15  41bb		       26		      .byte.b	$20+(.LUM2/256)
     16  41bc		       98		      .byte.b	$90+(.LUM3/256)
     17  41bd
     18  41bd
     19  41bd
     20  41bd
     21  41bd
     22  41bd				   .LUM1      SET	.LUM1 + .STEP1
     23  41bd				   .LUM2      SET	.LUM2 + .STEP2
     24  41bd				   .LUM3      SET	.LUM3 + .STEP3
     13  41bd					      REPEND
     14  41bd		       44		      .byte.b	$40+(.LUM1/256)
     15  41be		       26		      .byte.b	$20+(.LUM2/256)
     16  41bf		       98		      .byte.b	$90+(.LUM3/256)
     17  41c0
     18  41c0
     19  41c0
     20  41c0
     21  41c0
     22  41c0				   .LUM1      SET	.LUM1 + .STEP1
     23  41c0				   .LUM2      SET	.LUM2 + .STEP2
     24  41c0				   .LUM3      SET	.LUM3 + .STEP3
     13  41c0					      REPEND
     14  41c0		       44		      .byte.b	$40+(.LUM1/256)
     15  41c1		       26		      .byte.b	$20+(.LUM2/256)
     16  41c2		       98		      .byte.b	$90+(.LUM3/256)
     17  41c3
     18  41c3
     19  41c3
     20  41c3
     21  41c3
     22  41c3				   .LUM1      SET	.LUM1 + .STEP1
     23  41c3				   .LUM2      SET	.LUM2 + .STEP2
     24  41c3				   .LUM3      SET	.LUM3 + .STEP3
     13  41c3					      REPEND
     14  41c3		       44		      .byte.b	$40+(.LUM1/256)
     15  41c4		       26		      .byte.b	$20+(.LUM2/256)
     16  41c5		       98		      .byte.b	$90+(.LUM3/256)
     17  41c6
     18  41c6
     19  41c6
     20  41c6
     21  41c6
     22  41c6				   .LUM1      SET	.LUM1 + .STEP1
     23  41c6				   .LUM2      SET	.LUM2 + .STEP2
     24  41c6				   .LUM3      SET	.LUM3 + .STEP3
     13  41c6					      REPEND
     14  41c6		       44		      .byte.b	$40+(.LUM1/256)
     15  41c7		       26		      .byte.b	$20+(.LUM2/256)
     16  41c8		       98		      .byte.b	$90+(.LUM3/256)
     17  41c9
     18  41c9
     19  41c9
     20  41c9
     21  41c9
     22  41c9				   .LUM1      SET	.LUM1 + .STEP1
     23  41c9				   .LUM2      SET	.LUM2 + .STEP2
     24  41c9				   .LUM3      SET	.LUM3 + .STEP3
     13  41c9					      REPEND
     14  41c9		       44		      .byte.b	$40+(.LUM1/256)
     15  41ca		       26		      .byte.b	$20+(.LUM2/256)
     16  41cb		       98		      .byte.b	$90+(.LUM3/256)
     17  41cc
     18  41cc
     19  41cc
     20  41cc
     21  41cc
     22  41cc				   .LUM1      SET	.LUM1 + .STEP1
     23  41cc				   .LUM2      SET	.LUM2 + .STEP2
     24  41cc				   .LUM3      SET	.LUM3 + .STEP3
     13  41cc					      REPEND
     14  41cc		       44		      .byte.b	$40+(.LUM1/256)
     15  41cd		       26		      .byte.b	$20+(.LUM2/256)
     16  41ce		       98		      .byte.b	$90+(.LUM3/256)
     17  41cf
     18  41cf
     19  41cf
     20  41cf
     21  41cf
     22  41cf				   .LUM1      SET	.LUM1 + .STEP1
     23  41cf				   .LUM2      SET	.LUM2 + .STEP2
     24  41cf				   .LUM3      SET	.LUM3 + .STEP3
     13  41cf					      REPEND
     14  41cf		       44		      .byte.b	$40+(.LUM1/256)
     15  41d0		       26		      .byte.b	$20+(.LUM2/256)
     16  41d1		       98		      .byte.b	$90+(.LUM3/256)
     17  41d2
     18  41d2
     19  41d2
     20  41d2
     21  41d2
     22  41d2				   .LUM1      SET	.LUM1 + .STEP1
     23  41d2				   .LUM2      SET	.LUM2 + .STEP2
     24  41d2				   .LUM3      SET	.LUM3 + .STEP3
     13  41d2					      REPEND
     14  41d2		       44		      .byte.b	$40+(.LUM1/256)
     15  41d3		       26		      .byte.b	$20+(.LUM2/256)
     16  41d4		       98		      .byte.b	$90+(.LUM3/256)
     17  41d5
     18  41d5
     19  41d5
     20  41d5
     21  41d5
     22  41d5				   .LUM1      SET	.LUM1 + .STEP1
     23  41d5				   .LUM2      SET	.LUM2 + .STEP2
     24  41d5				   .LUM3      SET	.LUM3 + .STEP3
     13  41d5					      REPEND
     14  41d5		       44		      .byte.b	$40+(.LUM1/256)
     15  41d6		       26		      .byte.b	$20+(.LUM2/256)
     16  41d7		       98		      .byte.b	$90+(.LUM3/256)
     17  41d8
     18  41d8
     19  41d8
     20  41d8
     21  41d8
     22  41d8				   .LUM1      SET	.LUM1 + .STEP1
     23  41d8				   .LUM2      SET	.LUM2 + .STEP2
     24  41d8				   .LUM3      SET	.LUM3 + .STEP3
     25  41d8					      REPEND
    257  41d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    258  41d8
    259  41d8							;    ECHO "PAL LUMS"
    260  41d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  41d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  41d8
      2  41d8
      3  41d8
      4  41d8
      5  41d8				   .LUM1      SET	$6*256
      6  41d8				   .LUM2      SET	$4*256
      7  41d8				   .LUM3      SET	$8*256
      8  41d8
      9  41d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  41d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  41d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  41d8
     13  41d8					      REPEAT	72
     14  41d8		       66		      .byte.b	$60+(.LUM1/256)
     15  41d9		       84		      .byte.b	$80+(.LUM2/256)
     16  41da		       18		      .byte.b	$10+(.LUM3/256)
     17  41db
     18  41db
     19  41db
     20  41db
     21  41db
     22  41db				   .LUM1      SET	.LUM1 + .STEP1
     23  41db				   .LUM2      SET	.LUM2 + .STEP2
     24  41db				   .LUM3      SET	.LUM3 + .STEP3
     13  41db					      REPEND
     14  41db		       66		      .byte.b	$60+(.LUM1/256)
     15  41dc		       84		      .byte.b	$80+(.LUM2/256)
     16  41dd		       18		      .byte.b	$10+(.LUM3/256)
     17  41de
     18  41de
     19  41de
     20  41de
     21  41de
     22  41de				   .LUM1      SET	.LUM1 + .STEP1
     23  41de				   .LUM2      SET	.LUM2 + .STEP2
     24  41de				   .LUM3      SET	.LUM3 + .STEP3
     13  41de					      REPEND
     14  41de		       66		      .byte.b	$60+(.LUM1/256)
     15  41df		       84		      .byte.b	$80+(.LUM2/256)
     16  41e0		       18		      .byte.b	$10+(.LUM3/256)
     17  41e1
     18  41e1
     19  41e1
     20  41e1
     21  41e1
     22  41e1				   .LUM1      SET	.LUM1 + .STEP1
     23  41e1				   .LUM2      SET	.LUM2 + .STEP2
     24  41e1				   .LUM3      SET	.LUM3 + .STEP3
     13  41e1					      REPEND
     14  41e1		       66		      .byte.b	$60+(.LUM1/256)
     15  41e2		       84		      .byte.b	$80+(.LUM2/256)
     16  41e3		       18		      .byte.b	$10+(.LUM3/256)
     17  41e4
     18  41e4
     19  41e4
     20  41e4
     21  41e4
     22  41e4				   .LUM1      SET	.LUM1 + .STEP1
     23  41e4				   .LUM2      SET	.LUM2 + .STEP2
     24  41e4				   .LUM3      SET	.LUM3 + .STEP3
     13  41e4					      REPEND
     14  41e4		       66		      .byte.b	$60+(.LUM1/256)
     15  41e5		       84		      .byte.b	$80+(.LUM2/256)
     16  41e6		       18		      .byte.b	$10+(.LUM3/256)
     17  41e7
     18  41e7
     19  41e7
     20  41e7
     21  41e7
     22  41e7				   .LUM1      SET	.LUM1 + .STEP1
     23  41e7				   .LUM2      SET	.LUM2 + .STEP2
     24  41e7				   .LUM3      SET	.LUM3 + .STEP3
     13  41e7					      REPEND
     14  41e7		       66		      .byte.b	$60+(.LUM1/256)
     15  41e8		       84		      .byte.b	$80+(.LUM2/256)
     16  41e9		       18		      .byte.b	$10+(.LUM3/256)
     17  41ea
     18  41ea
     19  41ea
     20  41ea
     21  41ea
     22  41ea				   .LUM1      SET	.LUM1 + .STEP1
     23  41ea				   .LUM2      SET	.LUM2 + .STEP2
     24  41ea				   .LUM3      SET	.LUM3 + .STEP3
     13  41ea					      REPEND
     14  41ea		       66		      .byte.b	$60+(.LUM1/256)
     15  41eb		       84		      .byte.b	$80+(.LUM2/256)
     16  41ec		       18		      .byte.b	$10+(.LUM3/256)
     17  41ed
     18  41ed
     19  41ed
     20  41ed
     21  41ed
     22  41ed				   .LUM1      SET	.LUM1 + .STEP1
     23  41ed				   .LUM2      SET	.LUM2 + .STEP2
     24  41ed				   .LUM3      SET	.LUM3 + .STEP3
     13  41ed					      REPEND
     14  41ed		       66		      .byte.b	$60+(.LUM1/256)
     15  41ee		       84		      .byte.b	$80+(.LUM2/256)
     16  41ef		       18		      .byte.b	$10+(.LUM3/256)
     17  41f0
     18  41f0
     19  41f0
     20  41f0
     21  41f0
     22  41f0				   .LUM1      SET	.LUM1 + .STEP1
     23  41f0				   .LUM2      SET	.LUM2 + .STEP2
     24  41f0				   .LUM3      SET	.LUM3 + .STEP3
     13  41f0					      REPEND
     14  41f0		       66		      .byte.b	$60+(.LUM1/256)
     15  41f1		       84		      .byte.b	$80+(.LUM2/256)
     16  41f2		       18		      .byte.b	$10+(.LUM3/256)
     17  41f3
     18  41f3
     19  41f3
     20  41f3
     21  41f3
     22  41f3				   .LUM1      SET	.LUM1 + .STEP1
     23  41f3				   .LUM2      SET	.LUM2 + .STEP2
     24  41f3				   .LUM3      SET	.LUM3 + .STEP3
     13  41f3					      REPEND
     14  41f3		       66		      .byte.b	$60+(.LUM1/256)
     15  41f4		       84		      .byte.b	$80+(.LUM2/256)
     16  41f5		       18		      .byte.b	$10+(.LUM3/256)
     17  41f6
     18  41f6
     19  41f6
     20  41f6
     21  41f6
     22  41f6				   .LUM1      SET	.LUM1 + .STEP1
     23  41f6				   .LUM2      SET	.LUM2 + .STEP2
     24  41f6				   .LUM3      SET	.LUM3 + .STEP3
     13  41f6					      REPEND
     14  41f6		       66		      .byte.b	$60+(.LUM1/256)
     15  41f7		       84		      .byte.b	$80+(.LUM2/256)
     16  41f8		       18		      .byte.b	$10+(.LUM3/256)
     17  41f9
     18  41f9
     19  41f9
     20  41f9
     21  41f9
     22  41f9				   .LUM1      SET	.LUM1 + .STEP1
     23  41f9				   .LUM2      SET	.LUM2 + .STEP2
     24  41f9				   .LUM3      SET	.LUM3 + .STEP3
     13  41f9					      REPEND
     14  41f9		       66		      .byte.b	$60+(.LUM1/256)
     15  41fa		       84		      .byte.b	$80+(.LUM2/256)
     16  41fb		       18		      .byte.b	$10+(.LUM3/256)
     17  41fc
     18  41fc
     19  41fc
     20  41fc
     21  41fc
     22  41fc				   .LUM1      SET	.LUM1 + .STEP1
     23  41fc				   .LUM2      SET	.LUM2 + .STEP2
     24  41fc				   .LUM3      SET	.LUM3 + .STEP3
     13  41fc					      REPEND
     14  41fc		       66		      .byte.b	$60+(.LUM1/256)
     15  41fd		       84		      .byte.b	$80+(.LUM2/256)
     16  41fe		       18		      .byte.b	$10+(.LUM3/256)
     17  41ff
     18  41ff
     19  41ff
     20  41ff
     21  41ff
     22  41ff				   .LUM1      SET	.LUM1 + .STEP1
     23  41ff				   .LUM2      SET	.LUM2 + .STEP2
     24  41ff				   .LUM3      SET	.LUM3 + .STEP3
     13  41ff					      REPEND
     14  41ff		       66		      .byte.b	$60+(.LUM1/256)
     15  4200		       84		      .byte.b	$80+(.LUM2/256)
     16  4201		       18		      .byte.b	$10+(.LUM3/256)
     17  4202
     18  4202
     19  4202
     20  4202
     21  4202
     22  4202				   .LUM1      SET	.LUM1 + .STEP1
     23  4202				   .LUM2      SET	.LUM2 + .STEP2
     24  4202				   .LUM3      SET	.LUM3 + .STEP3
     13  4202					      REPEND
     14  4202		       66		      .byte.b	$60+(.LUM1/256)
     15  4203		       84		      .byte.b	$80+(.LUM2/256)
     16  4204		       18		      .byte.b	$10+(.LUM3/256)
     17  4205
     18  4205
     19  4205
     20  4205
     21  4205
     22  4205				   .LUM1      SET	.LUM1 + .STEP1
     23  4205				   .LUM2      SET	.LUM2 + .STEP2
     24  4205				   .LUM3      SET	.LUM3 + .STEP3
     13  4205					      REPEND
     14  4205		       66		      .byte.b	$60+(.LUM1/256)
     15  4206		       84		      .byte.b	$80+(.LUM2/256)
     16  4207		       18		      .byte.b	$10+(.LUM3/256)
     17  4208
     18  4208
     19  4208
     20  4208
     21  4208
     22  4208				   .LUM1      SET	.LUM1 + .STEP1
     23  4208				   .LUM2      SET	.LUM2 + .STEP2
     24  4208				   .LUM3      SET	.LUM3 + .STEP3
     13  4208					      REPEND
     14  4208		       66		      .byte.b	$60+(.LUM1/256)
     15  4209		       84		      .byte.b	$80+(.LUM2/256)
     16  420a		       18		      .byte.b	$10+(.LUM3/256)
     17  420b
     18  420b
     19  420b
     20  420b
     21  420b
     22  420b				   .LUM1      SET	.LUM1 + .STEP1
     23  420b				   .LUM2      SET	.LUM2 + .STEP2
     24  420b				   .LUM3      SET	.LUM3 + .STEP3
     13  420b					      REPEND
     14  420b		       66		      .byte.b	$60+(.LUM1/256)
     15  420c		       84		      .byte.b	$80+(.LUM2/256)
     16  420d		       18		      .byte.b	$10+(.LUM3/256)
     17  420e
     18  420e
     19  420e
     20  420e
     21  420e
     22  420e				   .LUM1      SET	.LUM1 + .STEP1
     23  420e				   .LUM2      SET	.LUM2 + .STEP2
     24  420e				   .LUM3      SET	.LUM3 + .STEP3
     13  420e					      REPEND
     14  420e		       66		      .byte.b	$60+(.LUM1/256)
     15  420f		       84		      .byte.b	$80+(.LUM2/256)
     16  4210		       18		      .byte.b	$10+(.LUM3/256)
     17  4211
     18  4211
     19  4211
     20  4211
     21  4211
     22  4211				   .LUM1      SET	.LUM1 + .STEP1
     23  4211				   .LUM2      SET	.LUM2 + .STEP2
     24  4211				   .LUM3      SET	.LUM3 + .STEP3
     13  4211					      REPEND
     14  4211		       66		      .byte.b	$60+(.LUM1/256)
     15  4212		       84		      .byte.b	$80+(.LUM2/256)
     16  4213		       18		      .byte.b	$10+(.LUM3/256)
     17  4214
     18  4214
     19  4214
     20  4214
     21  4214
     22  4214				   .LUM1      SET	.LUM1 + .STEP1
     23  4214				   .LUM2      SET	.LUM2 + .STEP2
     24  4214				   .LUM3      SET	.LUM3 + .STEP3
     13  4214					      REPEND
     14  4214		       66		      .byte.b	$60+(.LUM1/256)
     15  4215		       84		      .byte.b	$80+(.LUM2/256)
     16  4216		       18		      .byte.b	$10+(.LUM3/256)
     17  4217
     18  4217
     19  4217
     20  4217
     21  4217
     22  4217				   .LUM1      SET	.LUM1 + .STEP1
     23  4217				   .LUM2      SET	.LUM2 + .STEP2
     24  4217				   .LUM3      SET	.LUM3 + .STEP3
     13  4217					      REPEND
     14  4217		       66		      .byte.b	$60+(.LUM1/256)
     15  4218		       84		      .byte.b	$80+(.LUM2/256)
     16  4219		       18		      .byte.b	$10+(.LUM3/256)
     17  421a
     18  421a
     19  421a
     20  421a
     21  421a
     22  421a				   .LUM1      SET	.LUM1 + .STEP1
     23  421a				   .LUM2      SET	.LUM2 + .STEP2
     24  421a				   .LUM3      SET	.LUM3 + .STEP3
     13  421a					      REPEND
     14  421a		       66		      .byte.b	$60+(.LUM1/256)
     15  421b		       84		      .byte.b	$80+(.LUM2/256)
     16  421c		       18		      .byte.b	$10+(.LUM3/256)
     17  421d
     18  421d
     19  421d
     20  421d
     21  421d
     22  421d				   .LUM1      SET	.LUM1 + .STEP1
     23  421d				   .LUM2      SET	.LUM2 + .STEP2
     24  421d				   .LUM3      SET	.LUM3 + .STEP3
     13  421d					      REPEND
     14  421d		       66		      .byte.b	$60+(.LUM1/256)
     15  421e		       84		      .byte.b	$80+(.LUM2/256)
     16  421f		       18		      .byte.b	$10+(.LUM3/256)
     17  4220
     18  4220
     19  4220
     20  4220
     21  4220
     22  4220				   .LUM1      SET	.LUM1 + .STEP1
     23  4220				   .LUM2      SET	.LUM2 + .STEP2
     24  4220				   .LUM3      SET	.LUM3 + .STEP3
     13  4220					      REPEND
     14  4220		       66		      .byte.b	$60+(.LUM1/256)
     15  4221		       84		      .byte.b	$80+(.LUM2/256)
     16  4222		       18		      .byte.b	$10+(.LUM3/256)
     17  4223
     18  4223
     19  4223
     20  4223
     21  4223
     22  4223				   .LUM1      SET	.LUM1 + .STEP1
     23  4223				   .LUM2      SET	.LUM2 + .STEP2
     24  4223				   .LUM3      SET	.LUM3 + .STEP3
     13  4223					      REPEND
     14  4223		       66		      .byte.b	$60+(.LUM1/256)
     15  4224		       84		      .byte.b	$80+(.LUM2/256)
     16  4225		       18		      .byte.b	$10+(.LUM3/256)
     17  4226
     18  4226
     19  4226
     20  4226
     21  4226
     22  4226				   .LUM1      SET	.LUM1 + .STEP1
     23  4226				   .LUM2      SET	.LUM2 + .STEP2
     24  4226				   .LUM3      SET	.LUM3 + .STEP3
     13  4226					      REPEND
     14  4226		       66		      .byte.b	$60+(.LUM1/256)
     15  4227		       84		      .byte.b	$80+(.LUM2/256)
     16  4228		       18		      .byte.b	$10+(.LUM3/256)
     17  4229
     18  4229
     19  4229
     20  4229
     21  4229
     22  4229				   .LUM1      SET	.LUM1 + .STEP1
     23  4229				   .LUM2      SET	.LUM2 + .STEP2
     24  4229				   .LUM3      SET	.LUM3 + .STEP3
     13  4229					      REPEND
     14  4229		       66		      .byte.b	$60+(.LUM1/256)
     15  422a		       84		      .byte.b	$80+(.LUM2/256)
     16  422b		       18		      .byte.b	$10+(.LUM3/256)
     17  422c
     18  422c
     19  422c
     20  422c
     21  422c
     22  422c				   .LUM1      SET	.LUM1 + .STEP1
     23  422c				   .LUM2      SET	.LUM2 + .STEP2
     24  422c				   .LUM3      SET	.LUM3 + .STEP3
     13  422c					      REPEND
     14  422c		       66		      .byte.b	$60+(.LUM1/256)
     15  422d		       84		      .byte.b	$80+(.LUM2/256)
     16  422e		       18		      .byte.b	$10+(.LUM3/256)
     17  422f
     18  422f
     19  422f
     20  422f
     21  422f
     22  422f				   .LUM1      SET	.LUM1 + .STEP1
     23  422f				   .LUM2      SET	.LUM2 + .STEP2
     24  422f				   .LUM3      SET	.LUM3 + .STEP3
     13  422f					      REPEND
     14  422f		       66		      .byte.b	$60+(.LUM1/256)
     15  4230		       84		      .byte.b	$80+(.LUM2/256)
     16  4231		       18		      .byte.b	$10+(.LUM3/256)
     17  4232
     18  4232
     19  4232
     20  4232
     21  4232
     22  4232				   .LUM1      SET	.LUM1 + .STEP1
     23  4232				   .LUM2      SET	.LUM2 + .STEP2
     24  4232				   .LUM3      SET	.LUM3 + .STEP3
     13  4232					      REPEND
     14  4232		       66		      .byte.b	$60+(.LUM1/256)
     15  4233		       84		      .byte.b	$80+(.LUM2/256)
     16  4234		       18		      .byte.b	$10+(.LUM3/256)
     17  4235
     18  4235
     19  4235
     20  4235
     21  4235
     22  4235				   .LUM1      SET	.LUM1 + .STEP1
     23  4235				   .LUM2      SET	.LUM2 + .STEP2
     24  4235				   .LUM3      SET	.LUM3 + .STEP3
     13  4235					      REPEND
     14  4235		       66		      .byte.b	$60+(.LUM1/256)
     15  4236		       84		      .byte.b	$80+(.LUM2/256)
     16  4237		       18		      .byte.b	$10+(.LUM3/256)
     17  4238
     18  4238
     19  4238
     20  4238
     21  4238
     22  4238				   .LUM1      SET	.LUM1 + .STEP1
     23  4238				   .LUM2      SET	.LUM2 + .STEP2
     24  4238				   .LUM3      SET	.LUM3 + .STEP3
     13  4238					      REPEND
     14  4238		       66		      .byte.b	$60+(.LUM1/256)
     15  4239		       84		      .byte.b	$80+(.LUM2/256)
     16  423a		       18		      .byte.b	$10+(.LUM3/256)
     17  423b
     18  423b
     19  423b
     20  423b
     21  423b
     22  423b				   .LUM1      SET	.LUM1 + .STEP1
     23  423b				   .LUM2      SET	.LUM2 + .STEP2
     24  423b				   .LUM3      SET	.LUM3 + .STEP3
     13  423b					      REPEND
     14  423b		       66		      .byte.b	$60+(.LUM1/256)
     15  423c		       84		      .byte.b	$80+(.LUM2/256)
     16  423d		       18		      .byte.b	$10+(.LUM3/256)
     17  423e
     18  423e
     19  423e
     20  423e
     21  423e
     22  423e				   .LUM1      SET	.LUM1 + .STEP1
     23  423e				   .LUM2      SET	.LUM2 + .STEP2
     24  423e				   .LUM3      SET	.LUM3 + .STEP3
     13  423e					      REPEND
     14  423e		       66		      .byte.b	$60+(.LUM1/256)
     15  423f		       84		      .byte.b	$80+(.LUM2/256)
     16  4240		       18		      .byte.b	$10+(.LUM3/256)
     17  4241
     18  4241
     19  4241
     20  4241
     21  4241
     22  4241				   .LUM1      SET	.LUM1 + .STEP1
     23  4241				   .LUM2      SET	.LUM2 + .STEP2
     24  4241				   .LUM3      SET	.LUM3 + .STEP3
     13  4241					      REPEND
     14  4241		       66		      .byte.b	$60+(.LUM1/256)
     15  4242		       84		      .byte.b	$80+(.LUM2/256)
     16  4243		       18		      .byte.b	$10+(.LUM3/256)
     17  4244
     18  4244
     19  4244
     20  4244
     21  4244
     22  4244				   .LUM1      SET	.LUM1 + .STEP1
     23  4244				   .LUM2      SET	.LUM2 + .STEP2
     24  4244				   .LUM3      SET	.LUM3 + .STEP3
     13  4244					      REPEND
     14  4244		       66		      .byte.b	$60+(.LUM1/256)
     15  4245		       84		      .byte.b	$80+(.LUM2/256)
     16  4246		       18		      .byte.b	$10+(.LUM3/256)
     17  4247
     18  4247
     19  4247
     20  4247
     21  4247
     22  4247				   .LUM1      SET	.LUM1 + .STEP1
     23  4247				   .LUM2      SET	.LUM2 + .STEP2
     24  4247				   .LUM3      SET	.LUM3 + .STEP3
     13  4247					      REPEND
     14  4247		       66		      .byte.b	$60+(.LUM1/256)
     15  4248		       84		      .byte.b	$80+(.LUM2/256)
     16  4249		       18		      .byte.b	$10+(.LUM3/256)
     17  424a
     18  424a
     19  424a
     20  424a
     21  424a
     22  424a				   .LUM1      SET	.LUM1 + .STEP1
     23  424a				   .LUM2      SET	.LUM2 + .STEP2
     24  424a				   .LUM3      SET	.LUM3 + .STEP3
     13  424a					      REPEND
     14  424a		       66		      .byte.b	$60+(.LUM1/256)
     15  424b		       84		      .byte.b	$80+(.LUM2/256)
     16  424c		       18		      .byte.b	$10+(.LUM3/256)
     17  424d
     18  424d
     19  424d
     20  424d
     21  424d
     22  424d				   .LUM1      SET	.LUM1 + .STEP1
     23  424d				   .LUM2      SET	.LUM2 + .STEP2
     24  424d				   .LUM3      SET	.LUM3 + .STEP3
     13  424d					      REPEND
     14  424d		       66		      .byte.b	$60+(.LUM1/256)
     15  424e		       84		      .byte.b	$80+(.LUM2/256)
     16  424f		       18		      .byte.b	$10+(.LUM3/256)
     17  4250
     18  4250
     19  4250
     20  4250
     21  4250
     22  4250				   .LUM1      SET	.LUM1 + .STEP1
     23  4250				   .LUM2      SET	.LUM2 + .STEP2
     24  4250				   .LUM3      SET	.LUM3 + .STEP3
     13  4250					      REPEND
     14  4250		       66		      .byte.b	$60+(.LUM1/256)
     15  4251		       84		      .byte.b	$80+(.LUM2/256)
     16  4252		       18		      .byte.b	$10+(.LUM3/256)
     17  4253
     18  4253
     19  4253
     20  4253
     21  4253
     22  4253				   .LUM1      SET	.LUM1 + .STEP1
     23  4253				   .LUM2      SET	.LUM2 + .STEP2
     24  4253				   .LUM3      SET	.LUM3 + .STEP3
     13  4253					      REPEND
     14  4253		       66		      .byte.b	$60+(.LUM1/256)
     15  4254		       84		      .byte.b	$80+(.LUM2/256)
     16  4255		       18		      .byte.b	$10+(.LUM3/256)
     17  4256
     18  4256
     19  4256
     20  4256
     21  4256
     22  4256				   .LUM1      SET	.LUM1 + .STEP1
     23  4256				   .LUM2      SET	.LUM2 + .STEP2
     24  4256				   .LUM3      SET	.LUM3 + .STEP3
     13  4256					      REPEND
     14  4256		       66		      .byte.b	$60+(.LUM1/256)
     15  4257		       84		      .byte.b	$80+(.LUM2/256)
     16  4258		       18		      .byte.b	$10+(.LUM3/256)
     17  4259
     18  4259
     19  4259
     20  4259
     21  4259
     22  4259				   .LUM1      SET	.LUM1 + .STEP1
     23  4259				   .LUM2      SET	.LUM2 + .STEP2
     24  4259				   .LUM3      SET	.LUM3 + .STEP3
     13  4259					      REPEND
     14  4259		       66		      .byte.b	$60+(.LUM1/256)
     15  425a		       84		      .byte.b	$80+(.LUM2/256)
     16  425b		       18		      .byte.b	$10+(.LUM3/256)
     17  425c
     18  425c
     19  425c
     20  425c
     21  425c
     22  425c				   .LUM1      SET	.LUM1 + .STEP1
     23  425c				   .LUM2      SET	.LUM2 + .STEP2
     24  425c				   .LUM3      SET	.LUM3 + .STEP3
     13  425c					      REPEND
     14  425c		       66		      .byte.b	$60+(.LUM1/256)
     15  425d		       84		      .byte.b	$80+(.LUM2/256)
     16  425e		       18		      .byte.b	$10+(.LUM3/256)
     17  425f
     18  425f
     19  425f
     20  425f
     21  425f
     22  425f				   .LUM1      SET	.LUM1 + .STEP1
     23  425f				   .LUM2      SET	.LUM2 + .STEP2
     24  425f				   .LUM3      SET	.LUM3 + .STEP3
     13  425f					      REPEND
     14  425f		       66		      .byte.b	$60+(.LUM1/256)
     15  4260		       84		      .byte.b	$80+(.LUM2/256)
     16  4261		       18		      .byte.b	$10+(.LUM3/256)
     17  4262
     18  4262
     19  4262
     20  4262
     21  4262
     22  4262				   .LUM1      SET	.LUM1 + .STEP1
     23  4262				   .LUM2      SET	.LUM2 + .STEP2
     24  4262				   .LUM3      SET	.LUM3 + .STEP3
     13  4262					      REPEND
     14  4262		       66		      .byte.b	$60+(.LUM1/256)
     15  4263		       84		      .byte.b	$80+(.LUM2/256)
     16  4264		       18		      .byte.b	$10+(.LUM3/256)
     17  4265
     18  4265
     19  4265
     20  4265
     21  4265
     22  4265				   .LUM1      SET	.LUM1 + .STEP1
     23  4265				   .LUM2      SET	.LUM2 + .STEP2
     24  4265				   .LUM3      SET	.LUM3 + .STEP3
     13  4265					      REPEND
     14  4265		       66		      .byte.b	$60+(.LUM1/256)
     15  4266		       84		      .byte.b	$80+(.LUM2/256)
     16  4267		       18		      .byte.b	$10+(.LUM3/256)
     17  4268
     18  4268
     19  4268
     20  4268
     21  4268
     22  4268				   .LUM1      SET	.LUM1 + .STEP1
     23  4268				   .LUM2      SET	.LUM2 + .STEP2
     24  4268				   .LUM3      SET	.LUM3 + .STEP3
     13  4268					      REPEND
     14  4268		       66		      .byte.b	$60+(.LUM1/256)
     15  4269		       84		      .byte.b	$80+(.LUM2/256)
     16  426a		       18		      .byte.b	$10+(.LUM3/256)
     17  426b
     18  426b
     19  426b
     20  426b
     21  426b
     22  426b				   .LUM1      SET	.LUM1 + .STEP1
     23  426b				   .LUM2      SET	.LUM2 + .STEP2
     24  426b				   .LUM3      SET	.LUM3 + .STEP3
     13  426b					      REPEND
     14  426b		       66		      .byte.b	$60+(.LUM1/256)
     15  426c		       84		      .byte.b	$80+(.LUM2/256)
     16  426d		       18		      .byte.b	$10+(.LUM3/256)
     17  426e
     18  426e
     19  426e
     20  426e
     21  426e
     22  426e				   .LUM1      SET	.LUM1 + .STEP1
     23  426e				   .LUM2      SET	.LUM2 + .STEP2
     24  426e				   .LUM3      SET	.LUM3 + .STEP3
     13  426e					      REPEND
     14  426e		       66		      .byte.b	$60+(.LUM1/256)
     15  426f		       84		      .byte.b	$80+(.LUM2/256)
     16  4270		       18		      .byte.b	$10+(.LUM3/256)
     17  4271
     18  4271
     19  4271
     20  4271
     21  4271
     22  4271				   .LUM1      SET	.LUM1 + .STEP1
     23  4271				   .LUM2      SET	.LUM2 + .STEP2
     24  4271				   .LUM3      SET	.LUM3 + .STEP3
     13  4271					      REPEND
     14  4271		       66		      .byte.b	$60+(.LUM1/256)
     15  4272		       84		      .byte.b	$80+(.LUM2/256)
     16  4273		       18		      .byte.b	$10+(.LUM3/256)
     17  4274
     18  4274
     19  4274
     20  4274
     21  4274
     22  4274				   .LUM1      SET	.LUM1 + .STEP1
     23  4274				   .LUM2      SET	.LUM2 + .STEP2
     24  4274				   .LUM3      SET	.LUM3 + .STEP3
     13  4274					      REPEND
     14  4274		       66		      .byte.b	$60+(.LUM1/256)
     15  4275		       84		      .byte.b	$80+(.LUM2/256)
     16  4276		       18		      .byte.b	$10+(.LUM3/256)
     17  4277
     18  4277
     19  4277
     20  4277
     21  4277
     22  4277				   .LUM1      SET	.LUM1 + .STEP1
     23  4277				   .LUM2      SET	.LUM2 + .STEP2
     24  4277				   .LUM3      SET	.LUM3 + .STEP3
     13  4277					      REPEND
     14  4277		       66		      .byte.b	$60+(.LUM1/256)
     15  4278		       84		      .byte.b	$80+(.LUM2/256)
     16  4279		       18		      .byte.b	$10+(.LUM3/256)
     17  427a
     18  427a
     19  427a
     20  427a
     21  427a
     22  427a				   .LUM1      SET	.LUM1 + .STEP1
     23  427a				   .LUM2      SET	.LUM2 + .STEP2
     24  427a				   .LUM3      SET	.LUM3 + .STEP3
     13  427a					      REPEND
     14  427a		       66		      .byte.b	$60+(.LUM1/256)
     15  427b		       84		      .byte.b	$80+(.LUM2/256)
     16  427c		       18		      .byte.b	$10+(.LUM3/256)
     17  427d
     18  427d
     19  427d
     20  427d
     21  427d
     22  427d				   .LUM1      SET	.LUM1 + .STEP1
     23  427d				   .LUM2      SET	.LUM2 + .STEP2
     24  427d				   .LUM3      SET	.LUM3 + .STEP3
     13  427d					      REPEND
     14  427d		       66		      .byte.b	$60+(.LUM1/256)
     15  427e		       84		      .byte.b	$80+(.LUM2/256)
     16  427f		       18		      .byte.b	$10+(.LUM3/256)
     17  4280
     18  4280
     19  4280
     20  4280
     21  4280
     22  4280				   .LUM1      SET	.LUM1 + .STEP1
     23  4280				   .LUM2      SET	.LUM2 + .STEP2
     24  4280				   .LUM3      SET	.LUM3 + .STEP3
     13  4280					      REPEND
     14  4280		       66		      .byte.b	$60+(.LUM1/256)
     15  4281		       84		      .byte.b	$80+(.LUM2/256)
     16  4282		       18		      .byte.b	$10+(.LUM3/256)
     17  4283
     18  4283
     19  4283
     20  4283
     21  4283
     22  4283				   .LUM1      SET	.LUM1 + .STEP1
     23  4283				   .LUM2      SET	.LUM2 + .STEP2
     24  4283				   .LUM3      SET	.LUM3 + .STEP3
     13  4283					      REPEND
     14  4283		       66		      .byte.b	$60+(.LUM1/256)
     15  4284		       84		      .byte.b	$80+(.LUM2/256)
     16  4285		       18		      .byte.b	$10+(.LUM3/256)
     17  4286
     18  4286
     19  4286
     20  4286
     21  4286
     22  4286				   .LUM1      SET	.LUM1 + .STEP1
     23  4286				   .LUM2      SET	.LUM2 + .STEP2
     24  4286				   .LUM3      SET	.LUM3 + .STEP3
     13  4286					      REPEND
     14  4286		       66		      .byte.b	$60+(.LUM1/256)
     15  4287		       84		      .byte.b	$80+(.LUM2/256)
     16  4288		       18		      .byte.b	$10+(.LUM3/256)
     17  4289
     18  4289
     19  4289
     20  4289
     21  4289
     22  4289				   .LUM1      SET	.LUM1 + .STEP1
     23  4289				   .LUM2      SET	.LUM2 + .STEP2
     24  4289				   .LUM3      SET	.LUM3 + .STEP3
     13  4289					      REPEND
     14  4289		       66		      .byte.b	$60+(.LUM1/256)
     15  428a		       84		      .byte.b	$80+(.LUM2/256)
     16  428b		       18		      .byte.b	$10+(.LUM3/256)
     17  428c
     18  428c
     19  428c
     20  428c
     21  428c
     22  428c				   .LUM1      SET	.LUM1 + .STEP1
     23  428c				   .LUM2      SET	.LUM2 + .STEP2
     24  428c				   .LUM3      SET	.LUM3 + .STEP3
     13  428c					      REPEND
     14  428c		       66		      .byte.b	$60+(.LUM1/256)
     15  428d		       84		      .byte.b	$80+(.LUM2/256)
     16  428e		       18		      .byte.b	$10+(.LUM3/256)
     17  428f
     18  428f
     19  428f
     20  428f
     21  428f
     22  428f				   .LUM1      SET	.LUM1 + .STEP1
     23  428f				   .LUM2      SET	.LUM2 + .STEP2
     24  428f				   .LUM3      SET	.LUM3 + .STEP3
     13  428f					      REPEND
     14  428f		       66		      .byte.b	$60+(.LUM1/256)
     15  4290		       84		      .byte.b	$80+(.LUM2/256)
     16  4291		       18		      .byte.b	$10+(.LUM3/256)
     17  4292
     18  4292
     19  4292
     20  4292
     21  4292
     22  4292				   .LUM1      SET	.LUM1 + .STEP1
     23  4292				   .LUM2      SET	.LUM2 + .STEP2
     24  4292				   .LUM3      SET	.LUM3 + .STEP3
     13  4292					      REPEND
     14  4292		       66		      .byte.b	$60+(.LUM1/256)
     15  4293		       84		      .byte.b	$80+(.LUM2/256)
     16  4294		       18		      .byte.b	$10+(.LUM3/256)
     17  4295
     18  4295
     19  4295
     20  4295
     21  4295
     22  4295				   .LUM1      SET	.LUM1 + .STEP1
     23  4295				   .LUM2      SET	.LUM2 + .STEP2
     24  4295				   .LUM3      SET	.LUM3 + .STEP3
     13  4295					      REPEND
     14  4295		       66		      .byte.b	$60+(.LUM1/256)
     15  4296		       84		      .byte.b	$80+(.LUM2/256)
     16  4297		       18		      .byte.b	$10+(.LUM3/256)
     17  4298
     18  4298
     19  4298
     20  4298
     21  4298
     22  4298				   .LUM1      SET	.LUM1 + .STEP1
     23  4298				   .LUM2      SET	.LUM2 + .STEP2
     24  4298				   .LUM3      SET	.LUM3 + .STEP3
     13  4298					      REPEND
     14  4298		       66		      .byte.b	$60+(.LUM1/256)
     15  4299		       84		      .byte.b	$80+(.LUM2/256)
     16  429a		       18		      .byte.b	$10+(.LUM3/256)
     17  429b
     18  429b
     19  429b
     20  429b
     21  429b
     22  429b				   .LUM1      SET	.LUM1 + .STEP1
     23  429b				   .LUM2      SET	.LUM2 + .STEP2
     24  429b				   .LUM3      SET	.LUM3 + .STEP3
     13  429b					      REPEND
     14  429b		       66		      .byte.b	$60+(.LUM1/256)
     15  429c		       84		      .byte.b	$80+(.LUM2/256)
     16  429d		       18		      .byte.b	$10+(.LUM3/256)
     17  429e
     18  429e
     19  429e
     20  429e
     21  429e
     22  429e				   .LUM1      SET	.LUM1 + .STEP1
     23  429e				   .LUM2      SET	.LUM2 + .STEP2
     24  429e				   .LUM3      SET	.LUM3 + .STEP3
     13  429e					      REPEND
     14  429e		       66		      .byte.b	$60+(.LUM1/256)
     15  429f		       84		      .byte.b	$80+(.LUM2/256)
     16  42a0		       18		      .byte.b	$10+(.LUM3/256)
     17  42a1
     18  42a1
     19  42a1
     20  42a1
     21  42a1
     22  42a1				   .LUM1      SET	.LUM1 + .STEP1
     23  42a1				   .LUM2      SET	.LUM2 + .STEP2
     24  42a1				   .LUM3      SET	.LUM3 + .STEP3
     13  42a1					      REPEND
     14  42a1		       66		      .byte.b	$60+(.LUM1/256)
     15  42a2		       84		      .byte.b	$80+(.LUM2/256)
     16  42a3		       18		      .byte.b	$10+(.LUM3/256)
     17  42a4
     18  42a4
     19  42a4
     20  42a4
     21  42a4
     22  42a4				   .LUM1      SET	.LUM1 + .STEP1
     23  42a4				   .LUM2      SET	.LUM2 + .STEP2
     24  42a4				   .LUM3      SET	.LUM3 + .STEP3
     13  42a4					      REPEND
     14  42a4		       66		      .byte.b	$60+(.LUM1/256)
     15  42a5		       84		      .byte.b	$80+(.LUM2/256)
     16  42a6		       18		      .byte.b	$10+(.LUM3/256)
     17  42a7
     18  42a7
     19  42a7
     20  42a7
     21  42a7
     22  42a7				   .LUM1      SET	.LUM1 + .STEP1
     23  42a7				   .LUM2      SET	.LUM2 + .STEP2
     24  42a7				   .LUM3      SET	.LUM3 + .STEP3
     13  42a7					      REPEND
     14  42a7		       66		      .byte.b	$60+(.LUM1/256)
     15  42a8		       84		      .byte.b	$80+(.LUM2/256)
     16  42a9		       18		      .byte.b	$10+(.LUM3/256)
     17  42aa
     18  42aa
     19  42aa
     20  42aa
     21  42aa
     22  42aa				   .LUM1      SET	.LUM1 + .STEP1
     23  42aa				   .LUM2      SET	.LUM2 + .STEP2
     24  42aa				   .LUM3      SET	.LUM3 + .STEP3
     13  42aa					      REPEND
     14  42aa		       66		      .byte.b	$60+(.LUM1/256)
     15  42ab		       84		      .byte.b	$80+(.LUM2/256)
     16  42ac		       18		      .byte.b	$10+(.LUM3/256)
     17  42ad
     18  42ad
     19  42ad
     20  42ad
     21  42ad
     22  42ad				   .LUM1      SET	.LUM1 + .STEP1
     23  42ad				   .LUM2      SET	.LUM2 + .STEP2
     24  42ad				   .LUM3      SET	.LUM3 + .STEP3
     13  42ad					      REPEND
     14  42ad		       66		      .byte.b	$60+(.LUM1/256)
     15  42ae		       84		      .byte.b	$80+(.LUM2/256)
     16  42af		       18		      .byte.b	$10+(.LUM3/256)
     17  42b0
     18  42b0
     19  42b0
     20  42b0
     21  42b0
     22  42b0				   .LUM1      SET	.LUM1 + .STEP1
     23  42b0				   .LUM2      SET	.LUM2 + .STEP2
     24  42b0				   .LUM3      SET	.LUM3 + .STEP3
     25  42b0					      REPEND
    262  42b0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    263  42b0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  42b0					      include	"titleData.asm"
      1  42b0				   COL_0
      2  42b0		       00		      .byte.b	0	;R (71)
      3  42b1		       00		      .byte.b	0	;G
      4  42b2		       00		      .byte.b	0	;B
      5  42b3		       40		      .byte.b	64	;R (70)
      6  42b4		       40		      .byte.b	64	;G
      7  42b5		       00		      .byte.b	0	;B
      8  42b6		       00		      .byte.b	0	;R (69)
      9  42b7		       00		      .byte.b	0	;G
     10  42b8		       00		      .byte.b	0	;B
     11  42b9		       00		      .byte.b	0	;R (68)
     12  42ba		       80		      .byte.b	128	;G
     13  42bb		       00		      .byte.b	0	;B
     14  42bc		       00		      .byte.b	0	;R (67)
     15  42bd		       20		      .byte.b	32	;G
     16  42be		       00		      .byte.b	0	;B
     17  42bf		       80		      .byte.b	128	;R (66)
     18  42c0		       80		      .byte.b	128	;G
     19  42c1		       00		      .byte.b	0	;B
     20  42c2		       c0		      .byte.b	192	;R (65)
     21  42c3		       c0		      .byte.b	192	;G
     22  42c4		       00		      .byte.b	0	;B
     23  42c5		       40		      .byte.b	64	;R (64)
     24  42c6		       c0		      .byte.b	192	;G
     25  42c7		       00		      .byte.b	0	;B
     26  42c8		       00		      .byte.b	0	;R (63)
     27  42c9		       a0		      .byte.b	160	;G
     28  42ca		       00		      .byte.b	0	;B
     29  42cb		       10		      .byte.b	16	;R (62)
     30  42cc		       70		      .byte.b	112	;G
     31  42cd		       00		      .byte.b	0	;B
     32  42ce		       00		      .byte.b	0	;R (61)
     33  42cf		       80		      .byte.b	128	;G
     34  42d0		       40		      .byte.b	64	;B
     35  42d1		       00		      .byte.b	0	;R (60)
     36  42d2		       c0		      .byte.b	192	;G
     37  42d3		       00		      .byte.b	0	;B
     38  42d4		       00		      .byte.b	0	;R (59)
     39  42d5		       c0		      .byte.b	192	;G
     40  42d6		       00		      .byte.b	0	;B
     41  42d7		       00		      .byte.b	0	;R (58)
     42  42d8		       40		      .byte.b	64	;G
     43  42d9		       00		      .byte.b	0	;B
     44  42da		       00		      .byte.b	0	;R (57)
     45  42db		       c0		      .byte.b	192	;G
     46  42dc		       00		      .byte.b	0	;B
     47  42dd		       00		      .byte.b	0	;R (56)
     48  42de		       60		      .byte.b	96	;G
     49  42df		       00		      .byte.b	0	;B
     50  42e0		       00		      .byte.b	0	;R (55)
     51  42e1		       80		      .byte.b	128	;G
     52  42e2		       00		      .byte.b	0	;B
     53  42e3		       00		      .byte.b	0	;R (54)
     54  42e4		       40		      .byte.b	64	;G
     55  42e5		       00		      .byte.b	0	;B
     56  42e6		       00		      .byte.b	0	;R (53)
     57  42e7		       80		      .byte.b	128	;G
     58  42e8		       00		      .byte.b	0	;B
     59  42e9		       00		      .byte.b	0	;R (52)
     60  42ea		       80		      .byte.b	128	;G
     61  42eb		       00		      .byte.b	0	;B
     62  42ec		       00		      .byte.b	0	;R (51)
     63  42ed		       10		      .byte.b	16	;G
     64  42ee		       00		      .byte.b	0	;B
     65  42ef		       00		      .byte.b	0	;R (50)
     66  42f0		       00		      .byte.b	0	;G
     67  42f1		       00		      .byte.b	0	;B
     68  42f2		       00		      .byte.b	0	;R (49)
     69  42f3		       00		      .byte.b	0	;G
     70  42f4		       00		      .byte.b	0	;B
     71  42f5		       00		      .byte.b	0	;R (48)
     72  42f6		       00		      .byte.b	0	;G
     73  42f7		       00		      .byte.b	0	;B
     74  42f8		       00		      .byte.b	0	;R (47)
     75  42f9		       00		      .byte.b	0	;G
     76  42fa		       00		      .byte.b	0	;B
     77  42fb		       00		      .byte.b	0	;R (46)
     78  42fc		       40		      .byte.b	64	;G
     79  42fd		       00		      .byte.b	0	;B
     80  42fe		       00		      .byte.b	0	;R (45)
     81  42ff		       00		      .byte.b	0	;G
     82  4300		       00		      .byte.b	0	;B
     83  4301		       00		      .byte.b	0	;R (44)
     84  4302		       00		      .byte.b	0	;G
     85  4303		       00		      .byte.b	0	;B
     86  4304		       00		      .byte.b	0	;R (43)
     87  4305		       00		      .byte.b	0	;G
     88  4306		       00		      .byte.b	0	;B
     89  4307		       00		      .byte.b	0	;R (42)
     90  4308		       40		      .byte.b	64	;G
     91  4309		       00		      .byte.b	0	;B
     92  430a		       00		      .byte.b	0	;R (41)
     93  430b		       00		      .byte.b	0	;G
     94  430c		       00		      .byte.b	0	;B
     95  430d		       00		      .byte.b	0	;R (40)
     96  430e		       00		      .byte.b	0	;G
     97  430f		       00		      .byte.b	0	;B
     98  4310		       00		      .byte.b	0	;R (39)
     99  4311		       20		      .byte.b	32	;G
    100  4312		       00		      .byte.b	0	;B
    101  4313		       00		      .byte.b	0	;R (38)
    102  4314		       00		      .byte.b	0	;G
    103  4315		       00		      .byte.b	0	;B
    104  4316		       00		      .byte.b	0	;R (37)
    105  4317		       10		      .byte.b	16	;G
    106  4318		       00		      .byte.b	0	;B
    107  4319		       00		      .byte.b	0	;R (36)
    108  431a		       00		      .byte.b	0	;G
    109  431b		       00		      .byte.b	0	;B
    110  431c		       00		      .byte.b	0	;R (35)
    111  431d		       40		      .byte.b	64	;G
    112  431e		       00		      .byte.b	0	;B
    113  431f		       00		      .byte.b	0	;R (34)
    114  4320		       20		      .byte.b	32	;G
    115  4321		       00		      .byte.b	0	;B
    116  4322		       00		      .byte.b	0	;R (33)
    117  4323		       00		      .byte.b	0	;G
    118  4324		       00		      .byte.b	0	;B
    119  4325		       00		      .byte.b	0	;R (32)
    120  4326		       00		      .byte.b	0	;G
    121  4327		       00		      .byte.b	0	;B
    122  4328		       00		      .byte.b	0	;R (31)
    123  4329		       20		      .byte.b	32	;G
    124  432a		       00		      .byte.b	0	;B
    125  432b		       00		      .byte.b	0	;R (30)
    126  432c		       00		      .byte.b	0	;G
    127  432d		       00		      .byte.b	0	;B
    128  432e		       00		      .byte.b	0	;R (29)
    129  432f		       80		      .byte.b	128	;G
    130  4330		       00		      .byte.b	0	;B
    131  4331		       00		      .byte.b	0	;R (28)
    132  4332		       00		      .byte.b	0	;G
    133  4333		       00		      .byte.b	0	;B
    134  4334		       00		      .byte.b	0	;R (27)
    135  4335		       20		      .byte.b	32	;G
    136  4336		       00		      .byte.b	0	;B
    137  4337		       00		      .byte.b	0	;R (26)
    138  4338		       00		      .byte.b	0	;G
    139  4339		       00		      .byte.b	0	;B
    140  433a		       00		      .byte.b	0	;R (25)
    141  433b		       00		      .byte.b	0	;G
    142  433c		       00		      .byte.b	0	;B
    143  433d		       00		      .byte.b	0	;R (24)
    144  433e		       20		      .byte.b	32	;G
    145  433f		       00		      .byte.b	0	;B
    146  4340		       00		      .byte.b	0	;R (23)
    147  4341		       00		      .byte.b	0	;G
    148  4342		       00		      .byte.b	0	;B
    149  4343		       00		      .byte.b	0	;R (22)
    150  4344		       00		      .byte.b	0	;G
    151  4345		       00		      .byte.b	0	;B
    152  4346		       00		      .byte.b	0	;R (21)
    153  4347		       20		      .byte.b	32	;G
    154  4348		       00		      .byte.b	0	;B
    155  4349		       00		      .byte.b	0	;R (20)
    156  434a		       00		      .byte.b	0	;G
    157  434b		       00		      .byte.b	0	;B
    158  434c		       00		      .byte.b	0	;R (19)
    159  434d		       00		      .byte.b	0	;G
    160  434e		       00		      .byte.b	0	;B
    161  434f		       00		      .byte.b	0	;R (18)
    162  4350		       00		      .byte.b	0	;G
    163  4351		       00		      .byte.b	0	;B
    164  4352		       00		      .byte.b	0	;R (17)
    165  4353		       80		      .byte.b	128	;G
    166  4354		       00		      .byte.b	0	;B
    167  4355		       00		      .byte.b	0	;R (16)
    168  4356		       00		      .byte.b	0	;G
    169  4357		       00		      .byte.b	0	;B
    170  4358		       00		      .byte.b	0	;R (15)
    171  4359		       10		      .byte.b	16	;G
    172  435a		       00		      .byte.b	0	;B
    173  435b		       00		      .byte.b	0	;R (14)
    174  435c		       00		      .byte.b	0	;G
    175  435d		       00		      .byte.b	0	;B
    176  435e		       00		      .byte.b	0	;R (13)
    177  435f		       00		      .byte.b	0	;G
    178  4360		       00		      .byte.b	0	;B
    179  4361		       00		      .byte.b	0	;R (12)
    180  4362		       80		      .byte.b	128	;G
    181  4363		       00		      .byte.b	0	;B
    182  4364		       00		      .byte.b	0	;R (11)
    183  4365		       00		      .byte.b	0	;G
    184  4366		       00		      .byte.b	0	;B
    185  4367		       00		      .byte.b	0	;R (10)
    186  4368		       00		      .byte.b	0	;G
    187  4369		       00		      .byte.b	0	;B
    188  436a		       00		      .byte.b	0	;R (9)
    189  436b		       80		      .byte.b	128	;G
    190  436c		       00		      .byte.b	0	;B
    191  436d		       00		      .byte.b	0	;R (8)
    192  436e		       00		      .byte.b	0	;G
    193  436f		       00		      .byte.b	0	;B
    194  4370		       00		      .byte.b	0	;R (7)
    195  4371		       20		      .byte.b	32	;G
    196  4372		       00		      .byte.b	0	;B
    197  4373		       00		      .byte.b	0	;R (6)
    198  4374		       00		      .byte.b	0	;G
    199  4375		       00		      .byte.b	0	;B
    200  4376		       00		      .byte.b	0	;R (5)
    201  4377		       10		      .byte.b	16	;G
    202  4378		       00		      .byte.b	0	;B
    203  4379		       00		      .byte.b	0	;R (4)
    204  437a		       00		      .byte.b	0	;G
    205  437b		       00		      .byte.b	0	;B
    206  437c		       00		      .byte.b	0	;R (3)
    207  437d		       00		      .byte.b	0	;G
    208  437e		       00		      .byte.b	0	;B
    209  437f		       00		      .byte.b	0	;R (2)
    210  4380		       40		      .byte.b	64	;G
    211  4381		       00		      .byte.b	0	;B
    212  4382		       00		      .byte.b	0	;R (1)
    213  4383		       00		      .byte.b	0	;G
    214  4384		       00		      .byte.b	0	;B
    215  4385		       00		      .byte.b	0	;R (0)
    216  4386		       00		      .byte.b	0	;G
    217  4387		       00		      .byte.b	0	;B
    218  4388				   COL_1
    219  4388		       80		      .byte.b	128	;R (71)
    220  4389		       80		      .byte.b	128	;G
    221  438a		       00		      .byte.b	0	;B
    222  438b		       10		      .byte.b	16	;R (70)
    223  438c		       14		      .byte.b	20	;G
    224  438d		       00		      .byte.b	0	;B
    225  438e		       00		      .byte.b	0	;R (69)
    226  438f		       41		      .byte.b	65	;G
    227  4390		       00		      .byte.b	0	;B
    228  4391		       00		      .byte.b	0	;R (68)
    229  4392		       08		      .byte.b	8	;G
    230  4393		       00		      .byte.b	0	;B
    231  4394		       20		      .byte.b	32	;R (67)
    232  4395		       20		      .byte.b	32	;G
    233  4396		       00		      .byte.b	0	;B
    234  4397		       63		      .byte.b	99	;R (66)
    235  4398		       6b		      .byte.b	107	;G
    236  4399		       00		      .byte.b	0	;B
    237  439a		       ff		      .byte.b	255	;R (65)
    238  439b		       f5		      .byte.b	245	;G
    239  439c		       00		      .byte.b	0	;B
    240  439d		       80		      .byte.b	128	;R (64)
    241  439e		       fb		      .byte.b	251	;G
    242  439f		       04		      .byte.b	4	;B
    243  43a0		       00		      .byte.b	0	;R (63)
    244  43a1		       b7		      .byte.b	183	;G
    245  43a2		       00		      .byte.b	0	;B
    246  43a3		       00		      .byte.b	0	;R (62)
    247  43a4		       b5		      .byte.b	181	;G
    248  43a5		       00		      .byte.b	0	;B
    249  43a6		       00		      .byte.b	0	;R (61)
    250  43a7		       ef		      .byte.b	239	;G
    251  43a8		       10		      .byte.b	16	;B
    252  43a9		       00		      .byte.b	0	;R (60)
    253  43aa		       bd		      .byte.b	189	;G
    254  43ab		       42		      .byte.b	66	;B
    255  43ac		       00		      .byte.b	0	;R (59)
    256  43ad		       77		      .byte.b	119	;G
    257  43ae		       00		      .byte.b	0	;B
    258  43af		       00		      .byte.b	0	;R (58)
    259  43b0		       ee		      .byte.b	238	;G
    260  43b1		       00		      .byte.b	0	;B
    261  43b2		       00		      .byte.b	0	;R (57)
    262  43b3		       9b		      .byte.b	155	;G
    263  43b4		       00		      .byte.b	0	;B
    264  43b5		       00		      .byte.b	0	;R (56)
    265  43b6		       f2		      .byte.b	242	;G
    266  43b7		       00		      .byte.b	0	;B
    267  43b8		       00		      .byte.b	0	;R (55)
    268  43b9		       40		      .byte.b	64	;G
    269  43ba		       00		      .byte.b	0	;B
    270  43bb		       00		      .byte.b	0	;R (54)
    271  43bc		       df		      .byte.b	223	;G
    272  43bd		       00		      .byte.b	0	;B
    273  43be		       10		      .byte.b	16	;R (53)
    274  43bf		       69		      .byte.b	105	;G
    275  43c0		       10		      .byte.b	16	;B
    276  43c1		       00		      .byte.b	0	;R (52)
    277  43c2		       4b		      .byte.b	75	;G
    278  43c3		       00		      .byte.b	0	;B
    279  43c4		       00		      .byte.b	0	;R (51)
    280  43c5		       b0		      .byte.b	176	;G
    281  43c6		       00		      .byte.b	0	;B
    282  43c7		       00		      .byte.b	0	;R (50)
    283  43c8		       a7		      .byte.b	167	;G
    284  43c9		       00		      .byte.b	0	;B
    285  43ca		       00		      .byte.b	0	;R (49)
    286  43cb		       7d		      .byte.b	125	;G
    287  43cc		       02		      .byte.b	2	;B
    288  43cd		       00		      .byte.b	0	;R (48)
    289  43ce		       db		      .byte.b	219	;G
    290  43cf		       20		      .byte.b	32	;B
    291  43d0		       00		      .byte.b	0	;R (47)
    292  43d1		       6d		      .byte.b	109	;G
    293  43d2		       00		      .byte.b	0	;B
    294  43d3		       00		      .byte.b	0	;R (46)
    295  43d4		       ea		      .byte.b	234	;G
    296  43d5		       00		      .byte.b	0	;B
    297  43d6		       00		      .byte.b	0	;R (45)
    298  43d7		       13		      .byte.b	19	;G
    299  43d8		       00		      .byte.b	0	;B
    300  43d9		       00		      .byte.b	0	;R (44)
    301  43da		       7e		      .byte.b	126	;G
    302  43db		       01		      .byte.b	1	;B
    303  43dc		       22		      .byte.b	34	;R (43)
    304  43dd		       77		      .byte.b	119	;G
    305  43de		       08		      .byte.b	8	;B
    306  43df		       04		      .byte.b	4	;R (42)
    307  43e0		       5f		      .byte.b	95	;G
    308  43e1		       00		      .byte.b	0	;B
    309  43e2		       00		      .byte.b	0	;R (41)
    310  43e3		       6f		      .byte.b	111	;G
    311  43e4		       00		      .byte.b	0	;B
    312  43e5		       00		      .byte.b	0	;R (40)
    313  43e6		       b5		      .byte.b	181	;G
    314  43e7		       00		      .byte.b	0	;B
    315  43e8		       00		      .byte.b	0	;R (39)
    316  43e9		       5b		      .byte.b	91	;G
    317  43ea		       00		      .byte.b	0	;B
    318  43eb		       00		      .byte.b	0	;R (38)
    319  43ec		       57		      .byte.b	87	;G
    320  43ed		       00		      .byte.b	0	;B
    321  43ee		       20		      .byte.b	32	;R (37)
    322  43ef		       4d		      .byte.b	77	;G
    323  43f0		       22		      .byte.b	34	;B
    324  43f1		       00		      .byte.b	0	;R (36)
    325  43f2		       55		      .byte.b	85	;G
    326  43f3		       00		      .byte.b	0	;B
    327  43f4		       01		      .byte.b	1	;R (35)
    328  43f5		       56		      .byte.b	86	;G
    329  43f6		       00		      .byte.b	0	;B
    330  43f7		       02		      .byte.b	2	;R (34)
    331  43f8		       57		      .byte.b	87	;G
    332  43f9		       00		      .byte.b	0	;B
    333  43fa		       00		      .byte.b	0	;R (33)
    334  43fb		       2a		      .byte.b	42	;G
    335  43fc		       01		      .byte.b	1	;B
    336  43fd		       01		      .byte.b	1	;R (32)
    337  43fe		       ab		      .byte.b	171	;G
    338  43ff		       00		      .byte.b	0	;B
    339  4400		       22		      .byte.b	34	;R (31)
    340  4401		       17		      .byte.b	23	;G
    341  4402		       20		      .byte.b	32	;B
    342  4403		       00		      .byte.b	0	;R (30)
    343  4404		       55		      .byte.b	85	;G
    344  4405		       02		      .byte.b	2	;B
    345  4406		       22		      .byte.b	34	;R (29)
    346  4407		       17		      .byte.b	23	;G
    347  4408		       20		      .byte.b	32	;B
    348  4409		       00		      .byte.b	0	;R (28)
    349  440a		       2b		      .byte.b	43	;G
    350  440b		       00		      .byte.b	0	;B
    351  440c		       00		      .byte.b	0	;R (27)
    352  440d		       95		      .byte.b	149	;G
    353  440e		       02		      .byte.b	2	;B
    354  440f		       00		      .byte.b	0	;R (26)
    355  4410		       17		      .byte.b	23	;G
    356  4411		       00		      .byte.b	0	;B
    357  4412		       00		      .byte.b	0	;R (25)
    358  4413		       2d		      .byte.b	45	;G
    359  4414		       00		      .byte.b	0	;B
    360  4415		       00		      .byte.b	0	;R (24)
    361  4416		       b4		      .byte.b	180	;G
    362  4417		       00		      .byte.b	0	;B
    363  4418		       00		      .byte.b	0	;R (23)
    364  4419		       0a		      .byte.b	10	;G
    365  441a		       00		      .byte.b	0	;B
    366  441b		       10		      .byte.b	16	;R (22)
    367  441c		       3c		      .byte.b	60	;G
    368  441d		       00		      .byte.b	0	;B
    369  441e		       10		      .byte.b	16	;R (21)
    370  441f		       98		      .byte.b	152	;G
    371  4420		       00		      .byte.b	0	;B
    372  4421		       10		      .byte.b	16	;R (20)
    373  4422		       1a		      .byte.b	26	;G
    374  4423		       00		      .byte.b	0	;B
    375  4424		       00		      .byte.b	0	;R (19)
    376  4425		       14		      .byte.b	20	;G
    377  4426		       00		      .byte.b	0	;B
    378  4427		       00		      .byte.b	0	;R (18)
    379  4428		       5a		      .byte.b	90	;G
    380  4429		       00		      .byte.b	0	;B
    381  442a		       00		      .byte.b	0	;R (17)
    382  442b		       09		      .byte.b	9	;G
    383  442c		       00		      .byte.b	0	;B
    384  442d		       08		      .byte.b	8	;R (16)
    385  442e		       1d		      .byte.b	29	;G
    386  442f		       00		      .byte.b	0	;B
    387  4430		       00		      .byte.b	0	;R (15)
    388  4431		       1a		      .byte.b	26	;G
    389  4432		       00		      .byte.b	0	;B
    390  4433		       20		      .byte.b	32	;R (14)
    391  4434		       ba		      .byte.b	186	;G
    392  4435		       00		      .byte.b	0	;B
    393  4436		       00		      .byte.b	0	;R (13)
    394  4437		       12		      .byte.b	18	;G
    395  4438		       00		      .byte.b	0	;B
    396  4439		       00		      .byte.b	0	;R (12)
    397  443a		       1a		      .byte.b	26	;G
    398  443b		       00		      .byte.b	0	;B
    399  443c		       00		      .byte.b	0	;R (11)
    400  443d		       2d		      .byte.b	45	;G
    401  443e		       10		      .byte.b	16	;B
    402  443f		       10		      .byte.b	16	;R (10)
    403  4440		       3b		      .byte.b	59	;G
    404  4441		       00		      .byte.b	0	;B
    405  4442		       24		      .byte.b	36	;R (9)
    406  4443		       39		      .byte.b	57	;G
    407  4444		       04		      .byte.b	4	;B
    408  4445		       20		      .byte.b	32	;R (8)
    409  4446		       35		      .byte.b	53	;G
    410  4447		       00		      .byte.b	0	;B
    411  4448		       00		      .byte.b	0	;R (7)
    412  4449		       3d		      .byte.b	61	;G
    413  444a		       00		      .byte.b	0	;B
    414  444b		       00		      .byte.b	0	;R (6)
    415  444c		       32		      .byte.b	50	;G
    416  444d		       00		      .byte.b	0	;B
    417  444e		       00		      .byte.b	0	;R (5)
    418  444f		       98		      .byte.b	152	;G
    419  4450		       00		      .byte.b	0	;B
    420  4451		       00		      .byte.b	0	;R (4)
    421  4452		       12		      .byte.b	18	;G
    422  4453		       00		      .byte.b	0	;B
    423  4454		       00		      .byte.b	0	;R (3)
    424  4455		       20		      .byte.b	32	;G
    425  4456		       00		      .byte.b	0	;B
    426  4457		       01		      .byte.b	1	;R (2)
    427  4458		       49		      .byte.b	73	;G
    428  4459		       00		      .byte.b	0	;B
    429  445a		       20		      .byte.b	32	;R (1)
    430  445b		       20		      .byte.b	32	;G
    431  445c		       00		      .byte.b	0	;B
    432  445d		       00		      .byte.b	0	;R (0)
    433  445e		       00		      .byte.b	0	;G
    434  445f		       00		      .byte.b	0	;B
    435  4460				   COL_2
    436  4460		       14		      .byte.b	20	;R (71)
    437  4461		       14		      .byte.b	20	;G
    438  4462		       00		      .byte.b	0	;B
    439  4463		       40		      .byte.b	64	;R (70)
    440  4464		       42		      .byte.b	66	;G
    441  4465		       00		      .byte.b	0	;B
    442  4466		       a8		      .byte.b	168	;R (69)
    443  4467		       a8		      .byte.b	168	;G
    444  4468		       00		      .byte.b	0	;B
    445  4469		       fd		      .byte.b	253	;R (68)
    446  446a		       1d		      .byte.b	29	;G
    447  446b		       00		      .byte.b	0	;B
    448  446c		       f0		      .byte.b	240	;R (67)
    449  446d		       44		      .byte.b	68	;G
    450  446e		       08		      .byte.b	8	;B
    451  446f		       ff		      .byte.b	255	;R (66)
    452  4470		       2f		      .byte.b	47	;G
    453  4471		       00		      .byte.b	0	;B
    454  4472		       ff		      .byte.b	255	;R (65)
    455  4473		       0e		      .byte.b	14	;G
    456  4474		       00		      .byte.b	0	;B
    457  4475		       f8		      .byte.b	248	;R (64)
    458  4476		       0f		      .byte.b	15	;G
    459  4477		       00		      .byte.b	0	;B
    460  4478		       f8		      .byte.b	248	;R (63)
    461  4479		       2e		      .byte.b	46	;G
    462  447a		       00		      .byte.b	0	;B
    463  447b		       f8		      .byte.b	248	;R (62)
    464  447c		       1e		      .byte.b	30	;G
    465  447d		       01		      .byte.b	1	;B
    466  447e		       74		      .byte.b	116	;R (61)
    467  447f		       23		      .byte.b	35	;G
    468  4480		       88		      .byte.b	136	;B
    469  4481		       fc		      .byte.b	252	;R (60)
    470  4482		       0f		      .byte.b	15	;G
    471  4483		       00		      .byte.b	0	;B
    472  4484		       f8		      .byte.b	248	;R (59)
    473  4485		       06		      .byte.b	6	;G
    474  4486		       01		      .byte.b	1	;B
    475  4487		       f8		      .byte.b	248	;R (58)
    476  4488		       8f		      .byte.b	143	;G
    477  4489		       00		      .byte.b	0	;B
    478  448a		       e8		      .byte.b	232	;R (57)
    479  448b		       0e		      .byte.b	14	;G
    480  448c		       10		      .byte.b	16	;B
    481  448d		       e0		      .byte.b	224	;R (56)
    482  448e		       97		      .byte.b	151	;G
    483  448f		       00		      .byte.b	0	;B
    484  4490		       f0		      .byte.b	240	;R (55)
    485  4491		       3a		      .byte.b	58	;G
    486  4492		       00		      .byte.b	0	;B
    487  4493		       e0		      .byte.b	224	;R (54)
    488  4494		       bb		      .byte.b	187	;G
    489  4495		       04		      .byte.b	4	;B
    490  4496		       e0		      .byte.b	224	;R (53)
    491  4497		       3e		      .byte.b	62	;G
    492  4498		       00		      .byte.b	0	;B
    493  4499		       c0		      .byte.b	192	;R (52)
    494  449a		       2a		      .byte.b	42	;G
    495  449b		       00		      .byte.b	0	;B
    496  449c		       80		      .byte.b	128	;R (51)
    497  449d		       3f		      .byte.b	63	;G
    498  449e		       40		      .byte.b	64	;B
    499  449f		       f5		      .byte.b	245	;R (50)
    500  44a0		       3f		      .byte.b	63	;G
    501  44a1		       00		      .byte.b	0	;B
    502  44a2		       e8		      .byte.b	232	;R (49)
    503  44a3		       7f		      .byte.b	127	;G
    504  44a4		       00		      .byte.b	0	;B
    505  44a5		       e0		      .byte.b	224	;R (48)
    506  44a6		       7a		      .byte.b	122	;G
    507  44a7		       04		      .byte.b	4	;B
    508  44a8		       c0		      .byte.b	192	;R (47)
    509  44a9		       5f		      .byte.b	95	;G
    510  44aa		       00		      .byte.b	0	;B
    511  44ab		       90		      .byte.b	144	;R (46)
    512  44ac		       dd		      .byte.b	221	;G
    513  44ad		       02		      .byte.b	2	;B
    514  44ae		       84		      .byte.b	132	;R (45)
    515  44af		       9f		      .byte.b	159	;G
    516  44b0		       00		      .byte.b	0	;B
    517  44b1		       c4		      .byte.b	196	;R (44)
    518  44b2		       cf		      .byte.b	207	;G
    519  44b3		       00		      .byte.b	0	;B
    520  44b4		       c5		      .byte.b	197	;R (43)
    521  44b5		       1f		      .byte.b	31	;G
    522  44b6		       00		      .byte.b	0	;B
    523  44b7		       d4		      .byte.b	212	;R (42)
    524  44b8		       9f		      .byte.b	159	;G
    525  44b9		       20		      .byte.b	32	;B
    526  44ba		       c8		      .byte.b	200	;R (41)
    527  44bb		       1e		      .byte.b	30	;G
    528  44bc		       01		      .byte.b	1	;B
    529  44bd		       c8		      .byte.b	200	;R (40)
    530  44be		       5f		      .byte.b	95	;G
    531  44bf		       00		      .byte.b	0	;B
    532  44c0		       cd		      .byte.b	205	;R (39)
    533  44c1		       5e		      .byte.b	94	;G
    534  44c2		       00		      .byte.b	0	;B
    535  44c3		       c7		      .byte.b	199	;R (38)
    536  44c4		       5b		      .byte.b	91	;G
    537  44c5		       00		      .byte.b	0	;B
    538  44c6		       8b		      .byte.b	139	;R (37)
    539  44c7		       1c		      .byte.b	28	;G
    540  44c8		       00		      .byte.b	0	;B
    541  44c9		       81		      .byte.b	129	;R (36)
    542  44ca		       9a		      .byte.b	154	;G
    543  44cb		       04		      .byte.b	4	;B
    544  44cc		       8e		      .byte.b	142	;R (35)
    545  44cd		       9d		      .byte.b	157	;G
    546  44ce		       00		      .byte.b	0	;B
    547  44cf		       2b		      .byte.b	43	;R (34)
    548  44d0		       36		      .byte.b	54	;G
    549  44d1		       00		      .byte.b	0	;B
    550  44d2		       3a		      .byte.b	58	;R (33)
    551  44d3		       0d		      .byte.b	13	;G
    552  44d4		       00		      .byte.b	0	;B
    553  44d5		       3e		      .byte.b	62	;R (32)
    554  44d6		       85		      .byte.b	133	;G
    555  44d7		       40		      .byte.b	64	;B
    556  44d8		       fa		      .byte.b	250	;R (31)
    557  44d9		       17		      .byte.b	23	;G
    558  44da		       00		      .byte.b	0	;B
    559  44db		       ff		      .byte.b	255	;R (30)
    560  44dc		       03		      .byte.b	3	;G
    561  44dd		       00		      .byte.b	0	;B
    562  44de		       fc		      .byte.b	252	;R (29)
    563  44df		       93		      .byte.b	147	;G
    564  44e0		       00		      .byte.b	0	;B
    565  44e1		       f7		      .byte.b	247	;R (28)
    566  44e2		       81		      .byte.b	129	;G
    567  44e3		       08		      .byte.b	8	;B
    568  44e4		       ff		      .byte.b	255	;R (27)
    569  44e5		       03		      .byte.b	3	;G
    570  44e6		       00		      .byte.b	0	;B
    571  44e7		       fe		      .byte.b	254	;R (26)
    572  44e8		       2b		      .byte.b	43	;G
    573  44e9		       00		      .byte.b	0	;B
    574  44ea		       fe		      .byte.b	254	;R (25)
    575  44eb		       0a		      .byte.b	10	;G
    576  44ec		       00		      .byte.b	0	;B
    577  44ed		       fc		      .byte.b	252	;R (24)
    578  44ee		       4f		      .byte.b	79	;G
    579  44ef		       00		      .byte.b	0	;B
    580  44f0		       fc		      .byte.b	252	;R (23)
    581  44f1		       55		      .byte.b	85	;G
    582  44f2		       00		      .byte.b	0	;B
    583  44f3		       f8		      .byte.b	248	;R (22)
    584  44f4		       45		      .byte.b	69	;G
    585  44f5		       00		      .byte.b	0	;B
    586  44f6		       e8		      .byte.b	232	;R (21)
    587  44f7		       05		      .byte.b	5	;G
    588  44f8		       10		      .byte.b	16	;B
    589  44f9		       f8		      .byte.b	248	;R (20)
    590  44fa		       5b		      .byte.b	91	;G
    591  44fb		       00		      .byte.b	0	;B
    592  44fc		       f8		      .byte.b	248	;R (19)
    593  44fd		       1d		      .byte.b	29	;G
    594  44fe		       00		      .byte.b	0	;B
    595  44ff		       f0		      .byte.b	240	;R (18)
    596  4500		       55		      .byte.b	85	;G
    597  4501		       00		      .byte.b	0	;B
    598  4502		       f0		      .byte.b	240	;R (17)
    599  4503		       16		      .byte.b	22	;G
    600  4504		       00		      .byte.b	0	;B
    601  4505		       f0		      .byte.b	240	;R (16)
    602  4506		       b2		      .byte.b	178	;G
    603  4507		       00		      .byte.b	0	;B
    604  4508		       e0		      .byte.b	224	;R (15)
    605  4509		       0e		      .byte.b	14	;G
    606  450a		       10		      .byte.b	16	;B
    607  450b		       f0		      .byte.b	240	;R (14)
    608  450c		       93		      .byte.b	147	;G
    609  450d		       00		      .byte.b	0	;B
    610  450e		       e0		      .byte.b	224	;R (13)
    611  450f		       25		      .byte.b	37	;G
    612  4510		       00		      .byte.b	0	;B
    613  4511		       c0		      .byte.b	192	;R (12)
    614  4512		       e5		      .byte.b	229	;G
    615  4513		       00		      .byte.b	0	;B
    616  4514		       80		      .byte.b	128	;R (11)
    617  4515		       0e		      .byte.b	14	;G
    618  4516		       00		      .byte.b	0	;B
    619  4517		       c0		      .byte.b	192	;R (10)
    620  4518		       ca		      .byte.b	202	;G
    621  4519		       00		      .byte.b	0	;B
    622  451a		       84		      .byte.b	132	;R (9)
    623  451b		       8e		      .byte.b	142	;G
    624  451c		       00		      .byte.b	0	;B
    625  451d		       00		      .byte.b	0	;R (8)
    626  451e		       8e		      .byte.b	142	;G
    627  451f		       00		      .byte.b	0	;B
    628  4520		       00		      .byte.b	0	;R (7)
    629  4521		       15		      .byte.b	21	;G
    630  4522		       00		      .byte.b	0	;B
    631  4523		       00		      .byte.b	0	;R (6)
    632  4524		       14		      .byte.b	20	;G
    633  4525		       00		      .byte.b	0	;B
    634  4526		       00		      .byte.b	0	;R (5)
    635  4527		       14		      .byte.b	20	;G
    636  4528		       00		      .byte.b	0	;B
    637  4529		       00		      .byte.b	0	;R (4)
    638  452a		       0a		      .byte.b	10	;G
    639  452b		       00		      .byte.b	0	;B
    640  452c		       00		      .byte.b	0	;R (3)
    641  452d		       10		      .byte.b	16	;G
    642  452e		       00		      .byte.b	0	;B
    643  452f		       08		      .byte.b	8	;R (2)
    644  4530		       88		      .byte.b	136	;G
    645  4531		       00		      .byte.b	0	;B
    646  4532		       40		      .byte.b	64	;R (1)
    647  4533		       42		      .byte.b	66	;G
    648  4534		       00		      .byte.b	0	;B
    649  4535		       00		      .byte.b	0	;R (0)
    650  4536		       00		      .byte.b	0	;G
    651  4537		       00		      .byte.b	0	;B
    652  4538				   COL_3
    653  4538		       90		      .byte.b	144	;R (71)
    654  4539		       90		      .byte.b	144	;G
    655  453a		       00		      .byte.b	0	;B
    656  453b		       40		      .byte.b	64	;R (70)
    657  453c		       40		      .byte.b	64	;G
    658  453d		       00		      .byte.b	0	;B
    659  453e		       b0		      .byte.b	176	;R (69)
    660  453f		       b0		      .byte.b	176	;G
    661  4540		       00		      .byte.b	0	;B
    662  4541		       d0		      .byte.b	208	;R (68)
    663  4542		       00		      .byte.b	0	;G
    664  4543		       20		      .byte.b	32	;B
    665  4544		       f0		      .byte.b	240	;R (67)
    666  4545		       00		      .byte.b	0	;G
    667  4546		       00		      .byte.b	0	;B
    668  4547		       f0		      .byte.b	240	;R (66)
    669  4548		       d0		      .byte.b	208	;G
    670  4549		       00		      .byte.b	0	;B
    671  454a		       f0		      .byte.b	240	;R (65)
    672  454b		       00		      .byte.b	0	;G
    673  454c		       00		      .byte.b	0	;B
    674  454d		       f0		      .byte.b	240	;R (64)
    675  454e		       00		      .byte.b	0	;G
    676  454f		       00		      .byte.b	0	;B
    677  4550		       f0		      .byte.b	240	;R (63)
    678  4551		       50		      .byte.b	80	;G
    679  4552		       00		      .byte.b	0	;B
    680  4553		       f0		      .byte.b	240	;R (62)
    681  4554		       00		      .byte.b	0	;G
    682  4555		       00		      .byte.b	0	;B
    683  4556		       f0		      .byte.b	240	;R (61)
    684  4557		       a0		      .byte.b	160	;G
    685  4558		       00		      .byte.b	0	;B
    686  4559		       f0		      .byte.b	240	;R (60)
    687  455a		       00		      .byte.b	0	;G
    688  455b		       00		      .byte.b	0	;B
    689  455c		       f0		      .byte.b	240	;R (59)
    690  455d		       d0		      .byte.b	208	;G
    691  455e		       00		      .byte.b	0	;B
    692  455f		       f0		      .byte.b	240	;R (58)
    693  4560		       c0		      .byte.b	192	;G
    694  4561		       00		      .byte.b	0	;B
    695  4562		       f0		      .byte.b	240	;R (57)
    696  4563		       90		      .byte.b	144	;G
    697  4564		       00		      .byte.b	0	;B
    698  4565		       f0		      .byte.b	240	;R (56)
    699  4566		       80		      .byte.b	128	;G
    700  4567		       00		      .byte.b	0	;B
    701  4568		       f0		      .byte.b	240	;R (55)
    702  4569		       40		      .byte.b	64	;G
    703  456a		       00		      .byte.b	0	;B
    704  456b		       70		      .byte.b	112	;R (54)
    705  456c		       00		      .byte.b	0	;G
    706  456d		       80		      .byte.b	128	;B
    707  456e		       d0		      .byte.b	208	;R (53)
    708  456f		       00		      .byte.b	0	;G
    709  4570		       20		      .byte.b	32	;B
    710  4571		       f0		      .byte.b	240	;R (52)
    711  4572		       80		      .byte.b	128	;G
    712  4573		       00		      .byte.b	0	;B
    713  4574		       f0		      .byte.b	240	;R (51)
    714  4575		       00		      .byte.b	0	;G
    715  4576		       00		      .byte.b	0	;B
    716  4577		       f0		      .byte.b	240	;R (50)
    717  4578		       a0		      .byte.b	160	;G
    718  4579		       00		      .byte.b	0	;B
    719  457a		       f0		      .byte.b	240	;R (49)
    720  457b		       80		      .byte.b	128	;G
    721  457c		       00		      .byte.b	0	;B
    722  457d		       f0		      .byte.b	240	;R (48)
    723  457e		       40		      .byte.b	64	;G
    724  457f		       00		      .byte.b	0	;B
    725  4580		       f0		      .byte.b	240	;R (47)
    726  4581		       20		      .byte.b	32	;G
    727  4582		       00		      .byte.b	0	;B
    728  4583		       f0		      .byte.b	240	;R (46)
    729  4584		       00		      .byte.b	0	;G
    730  4585		       00		      .byte.b	0	;B
    731  4586		       f0		      .byte.b	240	;R (45)
    732  4587		       80		      .byte.b	128	;G
    733  4588		       00		      .byte.b	0	;B
    734  4589		       f0		      .byte.b	240	;R (44)
    735  458a		       00		      .byte.b	0	;G
    736  458b		       00		      .byte.b	0	;B
    737  458c		       f0		      .byte.b	240	;R (43)
    738  458d		       40		      .byte.b	64	;G
    739  458e		       00		      .byte.b	0	;B
    740  458f		       f0		      .byte.b	240	;R (42)
    741  4590		       00		      .byte.b	0	;G
    742  4591		       00		      .byte.b	0	;B
    743  4592		       f0		      .byte.b	240	;R (41)
    744  4593		       20		      .byte.b	32	;G
    745  4594		       00		      .byte.b	0	;B
    746  4595		       f0		      .byte.b	240	;R (40)
    747  4596		       20		      .byte.b	32	;G
    748  4597		       00		      .byte.b	0	;B
    749  4598		       f0		      .byte.b	240	;R (39)
    750  4599		       50		      .byte.b	80	;G
    751  459a		       00		      .byte.b	0	;B
    752  459b		       f0		      .byte.b	240	;R (38)
    753  459c		       10		      .byte.b	16	;G
    754  459d		       00		      .byte.b	0	;B
    755  459e		       70		      .byte.b	112	;R (37)
    756  459f		       80		      .byte.b	128	;G
    757  45a0		       80		      .byte.b	128	;B
    758  45a1		       f0		      .byte.b	240	;R (36)
    759  45a2		       50		      .byte.b	80	;G
    760  45a3		       00		      .byte.b	0	;B
    761  45a4		       f0		      .byte.b	240	;R (35)
    762  45a5		       00		      .byte.b	0	;G
    763  45a6		       00		      .byte.b	0	;B
    764  45a7		       f0		      .byte.b	240	;R (34)
    765  45a8		       40		      .byte.b	64	;G
    766  45a9		       00		      .byte.b	0	;B
    767  45aa		       f0		      .byte.b	240	;R (33)
    768  45ab		       10		      .byte.b	16	;G
    769  45ac		       00		      .byte.b	0	;B
    770  45ad		       f0		      .byte.b	240	;R (32)
    771  45ae		       b0		      .byte.b	176	;G
    772  45af		       00		      .byte.b	0	;B
    773  45b0		       e0		      .byte.b	224	;R (31)
    774  45b1		       00		      .byte.b	0	;G
    775  45b2		       10		      .byte.b	16	;B
    776  45b3		       e0		      .byte.b	224	;R (30)
    777  45b4		       40		      .byte.b	64	;G
    778  45b5		       00		      .byte.b	0	;B
    779  45b6		       e0		      .byte.b	224	;R (29)
    780  45b7		       20		      .byte.b	32	;G
    781  45b8		       00		      .byte.b	0	;B
    782  45b9		       c0		      .byte.b	192	;R (28)
    783  45ba		       00		      .byte.b	0	;G
    784  45bb		       00		      .byte.b	0	;B
    785  45bc		       c0		      .byte.b	192	;R (27)
    786  45bd		       10		      .byte.b	16	;G
    787  45be		       00		      .byte.b	0	;B
    788  45bf		       c0		      .byte.b	192	;R (26)
    789  45c0		       40		      .byte.b	64	;G
    790  45c1		       10		      .byte.b	16	;B
    791  45c2		       90		      .byte.b	144	;R (25)
    792  45c3		       00		      .byte.b	0	;G
    793  45c4		       00		      .byte.b	0	;B
    794  45c5		       f0		      .byte.b	240	;R (24)
    795  45c6		       60		      .byte.b	96	;G
    796  45c7		       00		      .byte.b	0	;B
    797  45c8		       f0		      .byte.b	240	;R (23)
    798  45c9		       00		      .byte.b	0	;G
    799  45ca		       00		      .byte.b	0	;B
    800  45cb		       f0		      .byte.b	240	;R (22)
    801  45cc		       40		      .byte.b	64	;G
    802  45cd		       00		      .byte.b	0	;B
    803  45ce		       f0		      .byte.b	240	;R (21)
    804  45cf		       10		      .byte.b	16	;G
    805  45d0		       00		      .byte.b	0	;B
    806  45d1		       f0		      .byte.b	240	;R (20)
    807  45d2		       00		      .byte.b	0	;G
    808  45d3		       00		      .byte.b	0	;B
    809  45d4		       f0		      .byte.b	240	;R (19)
    810  45d5		       60		      .byte.b	96	;G
    811  45d6		       00		      .byte.b	0	;B
    812  45d7		       f0		      .byte.b	240	;R (18)
    813  45d8		       20		      .byte.b	32	;G
    814  45d9		       00		      .byte.b	0	;B
    815  45da		       f0		      .byte.b	240	;R (17)
    816  45db		       50		      .byte.b	80	;G
    817  45dc		       00		      .byte.b	0	;B
    818  45dd		       f0		      .byte.b	240	;R (16)
    819  45de		       40		      .byte.b	64	;G
    820  45df		       00		      .byte.b	0	;B
    821  45e0		       f0		      .byte.b	240	;R (15)
    822  45e1		       80		      .byte.b	128	;G
    823  45e2		       00		      .byte.b	0	;B
    824  45e3		       f0		      .byte.b	240	;R (14)
    825  45e4		       40		      .byte.b	64	;G
    826  45e5		       00		      .byte.b	0	;B
    827  45e6		       f0		      .byte.b	240	;R (13)
    828  45e7		       00		      .byte.b	0	;G
    829  45e8		       00		      .byte.b	0	;B
    830  45e9		       f0		      .byte.b	240	;R (12)
    831  45ea		       10		      .byte.b	16	;G
    832  45eb		       00		      .byte.b	0	;B
    833  45ec		       f0		      .byte.b	240	;R (11)
    834  45ed		       50		      .byte.b	80	;G
    835  45ee		       00		      .byte.b	0	;B
    836  45ef		       f0		      .byte.b	240	;R (10)
    837  45f0		       00		      .byte.b	0	;G
    838  45f1		       00		      .byte.b	0	;B
    839  45f2		       f0		      .byte.b	240	;R (9)
    840  45f3		       b0		      .byte.b	176	;G
    841  45f4		       00		      .byte.b	0	;B
    842  45f5		       f0		      .byte.b	240	;R (8)
    843  45f6		       90		      .byte.b	144	;G
    844  45f7		       00		      .byte.b	0	;B
    845  45f8		       e0		      .byte.b	224	;R (7)
    846  45f9		       e0		      .byte.b	224	;G
    847  45fa		       00		      .byte.b	0	;B
    848  45fb		       f0		      .byte.b	240	;R (6)
    849  45fc		       d0		      .byte.b	208	;G
    850  45fd		       00		      .byte.b	0	;B
    851  45fe		       60		      .byte.b	96	;R (5)
    852  45ff		       00		      .byte.b	0	;G
    853  4600		       00		      .byte.b	0	;B
    854  4601		       60		      .byte.b	96	;R (4)
    855  4602		       40		      .byte.b	64	;G
    856  4603		       00		      .byte.b	0	;B
    857  4604		       40		      .byte.b	64	;R (3)
    858  4605		       50		      .byte.b	80	;G
    859  4606		       00		      .byte.b	0	;B
    860  4607		       00		      .byte.b	0	;R (2)
    861  4608		       00		      .byte.b	0	;G
    862  4609		       00		      .byte.b	0	;B
    863  460a		       00		      .byte.b	0	;R (1)
    864  460b		       80		      .byte.b	128	;G
    865  460c		       00		      .byte.b	0	;B
    866  460d		       00		      .byte.b	0	;R (0)
    867  460e		       00		      .byte.b	0	;G
    868  460f		       00		      .byte.b	0	;B
    869  4610				   COL_4
    870  4610		       25		      .byte.b	37	;R (71)
    871  4611		       25		      .byte.b	37	;G
    872  4612		       00		      .byte.b	0	;B
    873  4613		       48		      .byte.b	72	;R (70)
    874  4614		       48		      .byte.b	72	;G
    875  4615		       00		      .byte.b	0	;B
    876  4616		       25		      .byte.b	37	;R (69)
    877  4617		       25		      .byte.b	37	;G
    878  4618		       88		      .byte.b	136	;B
    879  4619		       ff		      .byte.b	255	;R (68)
    880  461a		       00		      .byte.b	0	;G
    881  461b		       00		      .byte.b	0	;B
    882  461c		       ff		      .byte.b	255	;R (67)
    883  461d		       04		      .byte.b	4	;G
    884  461e		       00		      .byte.b	0	;B
    885  461f		       ef		      .byte.b	239	;R (66)
    886  4620		       40		      .byte.b	64	;G
    887  4621		       10		      .byte.b	16	;B
    888  4622		       ff		      .byte.b	255	;R (65)
    889  4623		       00		      .byte.b	0	;G
    890  4624		       00		      .byte.b	0	;B
    891  4625		       ff		      .byte.b	255	;R (64)
    892  4626		       02		      .byte.b	2	;G
    893  4627		       00		      .byte.b	0	;B
    894  4628		       ff		      .byte.b	255	;R (63)
    895  4629		       20		      .byte.b	32	;G
    896  462a		       00		      .byte.b	0	;B
    897  462b		       ff		      .byte.b	255	;R (62)
    898  462c		       a5		      .byte.b	165	;G
    899  462d		       00		      .byte.b	0	;B
    900  462e		       ff		      .byte.b	255	;R (61)
    901  462f		       09		      .byte.b	9	;G
    902  4630		       00		      .byte.b	0	;B
    903  4631		       ff		      .byte.b	255	;R (60)
    904  4632		       00		      .byte.b	0	;G
    905  4633		       00		      .byte.b	0	;B
    906  4634		       7f		      .byte.b	127	;R (59)
    907  4635		       42		      .byte.b	66	;G
    908  4636		       80		      .byte.b	128	;B
    909  4637		       ff		      .byte.b	255	;R (58)
    910  4638		       88		      .byte.b	136	;G
    911  4639		       00		      .byte.b	0	;B
    912  463a		       ff		      .byte.b	255	;R (57)
    913  463b		       40		      .byte.b	64	;G
    914  463c		       00		      .byte.b	0	;B
    915  463d		       ff		      .byte.b	255	;R (56)
    916  463e		       09		      .byte.b	9	;G
    917  463f		       00		      .byte.b	0	;B
    918  4640		       7f		      .byte.b	127	;R (55)
    919  4641		       01		      .byte.b	1	;G
    920  4642		       80		      .byte.b	128	;B
    921  4643		       ff		      .byte.b	255	;R (54)
    922  4644		       91		      .byte.b	145	;G
    923  4645		       00		      .byte.b	0	;B
    924  4646		       fe		      .byte.b	254	;R (53)
    925  4647		       81		      .byte.b	129	;G
    926  4648		       00		      .byte.b	0	;B
    927  4649		       fe		      .byte.b	254	;R (52)
    928  464a		       20		      .byte.b	32	;G
    929  464b		       00		      .byte.b	0	;B
    930  464c		       ff		      .byte.b	255	;R (51)
    931  464d		       03		      .byte.b	3	;G
    932  464e		       00		      .byte.b	0	;B
    933  464f		       ff		      .byte.b	255	;R (50)
    934  4650		       83		      .byte.b	131	;G
    935  4651		       00		      .byte.b	0	;B
    936  4652		       fe		      .byte.b	254	;R (49)
    937  4653		       90		      .byte.b	144	;G
    938  4654		       00		      .byte.b	0	;B
    939  4655		       fe		      .byte.b	254	;R (48)
    940  4656		       83		      .byte.b	131	;G
    941  4657		       00		      .byte.b	0	;B
    942  4658		       7e		      .byte.b	126	;R (47)
    943  4659		       12		      .byte.b	18	;G
    944  465a		       80		      .byte.b	128	;B
    945  465b		       fc		      .byte.b	252	;R (46)
    946  465c		       00		      .byte.b	0	;G
    947  465d		       00		      .byte.b	0	;B
    948  465e		       fe		      .byte.b	254	;R (45)
    949  465f		       07		      .byte.b	7	;G
    950  4660		       00		      .byte.b	0	;B
    951  4661		       ef		      .byte.b	239	;R (44)
    952  4662		       03		      .byte.b	3	;G
    953  4663		       10		      .byte.b	16	;B
    954  4664		       ff		      .byte.b	255	;R (43)
    955  4665		       40		      .byte.b	64	;G
    956  4666		       00		      .byte.b	0	;B
    957  4667		       ff		      .byte.b	255	;R (42)
    958  4668		       01		      .byte.b	1	;G
    959  4669		       00		      .byte.b	0	;B
    960  466a		       ff		      .byte.b	255	;R (41)
    961  466b		       01		      .byte.b	1	;G
    962  466c		       00		      .byte.b	0	;B
    963  466d		       bf		      .byte.b	191	;R (40)
    964  466e		       01		      .byte.b	1	;G
    965  466f		       40		      .byte.b	64	;B
    966  4670		       f7		      .byte.b	247	;R (39)
    967  4671		       80		      .byte.b	128	;G
    968  4672		       08		      .byte.b	8	;B
    969  4673		       ff		      .byte.b	255	;R (38)
    970  4674		       40		      .byte.b	64	;G
    971  4675		       00		      .byte.b	0	;B
    972  4676		       ff		      .byte.b	255	;R (37)
    973  4677		       00		      .byte.b	0	;G
    974  4678		       00		      .byte.b	0	;B
    975  4679		       ff		      .byte.b	255	;R (36)
    976  467a		       40		      .byte.b	64	;G
    977  467b		       00		      .byte.b	0	;B
    978  467c		       ff		      .byte.b	255	;R (35)
    979  467d		       a1		      .byte.b	161	;G
    980  467e		       00		      .byte.b	0	;B
    981  467f		       7f		      .byte.b	127	;R (34)
    982  4680		       05		      .byte.b	5	;G
    983  4681		       80		      .byte.b	128	;B
    984  4682		       ff		      .byte.b	255	;R (33)
    985  4683		       21		      .byte.b	33	;G
    986  4684		       00		      .byte.b	0	;B
    987  4685		       bf		      .byte.b	191	;R (32)
    988  4686		       40		      .byte.b	64	;G
    989  4687		       40		      .byte.b	64	;B
    990  4688		       ff		      .byte.b	255	;R (31)
    991  4689		       61		      .byte.b	97	;G
    992  468a		       00		      .byte.b	0	;B
    993  468b		       7f		      .byte.b	127	;R (30)
    994  468c		       81		      .byte.b	129	;G
    995  468d		       80		      .byte.b	128	;B
    996  468e		       f7		      .byte.b	247	;R (29)
    997  468f		       60		      .byte.b	96	;G
    998  4690		       08		      .byte.b	8	;B
    999  4691		       ff		      .byte.b	255	;R (28)
   1000  4692		       81		      .byte.b	129	;G
   1001  4693		       00		      .byte.b	0	;B
   1002  4694		       ef		      .byte.b	239	;R (27)
   1003  4695		       40		      .byte.b	64	;G
   1004  4696		       10		      .byte.b	16	;B
   1005  4697		       ff		      .byte.b	255	;R (26)
   1006  4698		       60		      .byte.b	96	;G
   1007  4699		       00		      .byte.b	0	;B
   1008  469a		       ff		      .byte.b	255	;R (25)
   1009  469b		       18		      .byte.b	24	;G
   1010  469c		       00		      .byte.b	0	;B
   1011  469d		       ff		      .byte.b	255	;R (24)
   1012  469e		       20		      .byte.b	32	;G
   1013  469f		       00		      .byte.b	0	;B
   1014  46a0		       ff		      .byte.b	255	;R (23)
   1015  46a1		       8a		      .byte.b	138	;G
   1016  46a2		       00		      .byte.b	0	;B
   1017  46a3		       f7		      .byte.b	247	;R (22)
   1018  46a4		       10		      .byte.b	16	;G
   1019  46a5		       08		      .byte.b	8	;B
   1020  46a6		       ff		      .byte.b	255	;R (21)
   1021  46a7		       04		      .byte.b	4	;G
   1022  46a8		       00		      .byte.b	0	;B
   1023  46a9		       df		      .byte.b	223	;R (20)
   1024  46aa		       10		      .byte.b	16	;G
   1025  46ab		       20		      .byte.b	32	;B
   1026  46ac		       ff		      .byte.b	255	;R (19)
   1027  46ad		       90		      .byte.b	144	;G
   1028  46ae		       00		      .byte.b	0	;B
   1029  46af		       ff		      .byte.b	255	;R (18)
   1030  46b0		       12		      .byte.b	18	;G
   1031  46b1		       00		      .byte.b	0	;B
   1032  46b2		       ff		      .byte.b	255	;R (17)
   1033  46b3		       00		      .byte.b	0	;G
   1034  46b4		       00		      .byte.b	0	;B
   1035  46b5		       ff		      .byte.b	255	;R (16)
   1036  46b6		       45		      .byte.b	69	;G
   1037  46b7		       00		      .byte.b	0	;B
   1038  46b8		       ff		      .byte.b	255	;R (15)
   1039  46b9		       10		      .byte.b	16	;G
   1040  46ba		       00		      .byte.b	0	;B
   1041  46bb		       ff		      .byte.b	255	;R (14)
   1042  46bc		       23		      .byte.b	35	;G
   1043  46bd		       00		      .byte.b	0	;B
   1044  46be		       fc		      .byte.b	252	;R (13)
   1045  46bf		       12		      .byte.b	18	;G
   1046  46c0		       00		      .byte.b	0	;B
   1047  46c1		       fc		      .byte.b	252	;R (12)
   1048  46c2		       20		      .byte.b	32	;G
   1049  46c3		       00		      .byte.b	0	;B
   1050  46c4		       fe		      .byte.b	254	;R (11)
   1051  46c5		       46		      .byte.b	70	;G
   1052  46c6		       00		      .byte.b	0	;B
   1053  46c7		       f8		      .byte.b	248	;R (10)
   1054  46c8		       48		      .byte.b	72	;G
   1055  46c9		       00		      .byte.b	0	;B
   1056  46ca		       f0		      .byte.b	240	;R (9)
   1057  46cb		       04		      .byte.b	4	;G
   1058  46cc		       00		      .byte.b	0	;B
   1059  46cd		       e0		      .byte.b	224	;R (8)
   1060  46ce		       20		      .byte.b	32	;G
   1061  46cf		       00		      .byte.b	0	;B
   1062  46d0		       e0		      .byte.b	224	;R (7)
   1063  46d1		       29		      .byte.b	41	;G
   1064  46d2		       00		      .byte.b	0	;B
   1065  46d3		       e0		      .byte.b	224	;R (6)
   1066  46d4		       20		      .byte.b	32	;G
   1067  46d5		       00		      .byte.b	0	;B
   1068  46d6		       e0		      .byte.b	224	;R (5)
   1069  46d7		       84		      .byte.b	132	;G
   1070  46d8		       00		      .byte.b	0	;B
   1071  46d9		       60		      .byte.b	96	;R (4)
   1072  46da		       40		      .byte.b	64	;G
   1073  46db		       00		      .byte.b	0	;B
   1074  46dc		       00		      .byte.b	0	;R (3)
   1075  46dd		       88		      .byte.b	136	;G
   1076  46de		       00		      .byte.b	0	;B
   1077  46df		       00		      .byte.b	0	;R (2)
   1078  46e0		       11		      .byte.b	17	;G
   1079  46e1		       00		      .byte.b	0	;B
   1080  46e2		       24		      .byte.b	36	;R (1)
   1081  46e3		       24		      .byte.b	36	;G
   1082  46e4		       00		      .byte.b	0	;B
   1083  46e5		       00		      .byte.b	0	;R (0)
   1084  46e6		       00		      .byte.b	0	;G
   1085  46e7		       00		      .byte.b	0	;B
   1086  46e8				   COL_5
   1087  46e8		       02		      .byte.b	2	;R (71)
   1088  46e9		       12		      .byte.b	18	;G
   1089  46ea		       00		      .byte.b	0	;B
   1090  46eb		       00		      .byte.b	0	;R (70)
   1091  46ec		       00		      .byte.b	0	;G
   1092  46ed		       00		      .byte.b	0	;B
   1093  46ee		       00		      .byte.b	0	;R (69)
   1094  46ef		       02		      .byte.b	2	;G
   1095  46f0		       00		      .byte.b	0	;B
   1096  46f1		       03		      .byte.b	3	;R (68)
   1097  46f2		       12		      .byte.b	18	;G
   1098  46f3		       00		      .byte.b	0	;B
   1099  46f4		       0b		      .byte.b	11	;R (67)
   1100  46f5		       09		      .byte.b	9	;G
   1101  46f6		       00		      .byte.b	0	;B
   1102  46f7		       07		      .byte.b	7	;R (66)
   1103  46f8		       05		      .byte.b	5	;G
   1104  46f9		       00		      .byte.b	0	;B
   1105  46fa		       03		      .byte.b	3	;R (65)
   1106  46fb		       06		      .byte.b	6	;G
   1107  46fc		       00		      .byte.b	0	;B
   1108  46fd		       01		      .byte.b	1	;R (64)
   1109  46fe		       20		      .byte.b	32	;G
   1110  46ff		       00		      .byte.b	0	;B
   1111  4700		       03		      .byte.b	3	;R (63)
   1112  4701		       03		      .byte.b	3	;G
   1113  4702		       00		      .byte.b	0	;B
   1114  4703		       03		      .byte.b	3	;R (62)
   1115  4704		       0a		      .byte.b	10	;G
   1116  4705		       00		      .byte.b	0	;B
   1117  4706		       03		      .byte.b	3	;R (61)
   1118  4707		       02		      .byte.b	2	;G
   1119  4708		       00		      .byte.b	0	;B
   1120  4709		       03		      .byte.b	3	;R (60)
   1121  470a		       00		      .byte.b	0	;G
   1122  470b		       00		      .byte.b	0	;B
   1123  470c		       03		      .byte.b	3	;R (59)
   1124  470d		       0a		      .byte.b	10	;G
   1125  470e		       00		      .byte.b	0	;B
   1126  470f		       03		      .byte.b	3	;R (58)
   1127  4710		       02		      .byte.b	2	;G
   1128  4711		       00		      .byte.b	0	;B
   1129  4712		       01		      .byte.b	1	;R (57)
   1130  4713		       03		      .byte.b	3	;G
   1131  4714		       00		      .byte.b	0	;B
   1132  4715		       01		      .byte.b	1	;R (56)
   1133  4716		       01		      .byte.b	1	;G
   1134  4717		       00		      .byte.b	0	;B
   1135  4718		       00		      .byte.b	0	;R (55)
   1136  4719		       25		      .byte.b	37	;G
   1137  471a		       00		      .byte.b	0	;B
   1138  471b		       00		      .byte.b	0	;R (54)
   1139  471c		       00		      .byte.b	0	;G
   1140  471d		       00		      .byte.b	0	;B
   1141  471e		       00		      .byte.b	0	;R (53)
   1142  471f		       20		      .byte.b	32	;G
   1143  4720		       00		      .byte.b	0	;B
   1144  4721		       00		      .byte.b	0	;R (52)
   1145  4722		       08		      .byte.b	8	;G
   1146  4723		       00		      .byte.b	0	;B
   1147  4724		       00		      .byte.b	0	;R (51)
   1148  4725		       02		      .byte.b	2	;G
   1149  4726		       00		      .byte.b	0	;B
   1150  4727		       00		      .byte.b	0	;R (50)
   1151  4728		       40		      .byte.b	64	;G
   1152  4729		       00		      .byte.b	0	;B
   1153  472a		       00		      .byte.b	0	;R (49)
   1154  472b		       11		      .byte.b	17	;G
   1155  472c		       00		      .byte.b	0	;B
   1156  472d		       00		      .byte.b	0	;R (48)
   1157  472e		       00		      .byte.b	0	;G
   1158  472f		       00		      .byte.b	0	;B
   1159  4730		       00		      .byte.b	0	;R (47)
   1160  4731		       20		      .byte.b	32	;G
   1161  4732		       00		      .byte.b	0	;B
   1162  4733		       00		      .byte.b	0	;R (46)
   1163  4734		       08		      .byte.b	8	;G
   1164  4735		       00		      .byte.b	0	;B
   1165  4736		       00		      .byte.b	0	;R (45)
   1166  4737		       00		      .byte.b	0	;G
   1167  4738		       00		      .byte.b	0	;B
   1168  4739		       00		      .byte.b	0	;R (44)
   1169  473a		       24		      .byte.b	36	;G
   1170  473b		       00		      .byte.b	0	;B
   1171  473c		       00		      .byte.b	0	;R (43)
   1172  473d		       00		      .byte.b	0	;G
   1173  473e		       00		      .byte.b	0	;B
   1174  473f		       00		      .byte.b	0	;R (42)
   1175  4740		       04		      .byte.b	4	;G
   1176  4741		       00		      .byte.b	0	;B
   1177  4742		       00		      .byte.b	0	;R (41)
   1178  4743		       21		      .byte.b	33	;G
   1179  4744		       00		      .byte.b	0	;B
   1180  4745		       01		      .byte.b	1	;R (40)
   1181  4746		       01		      .byte.b	1	;G
   1182  4747		       00		      .byte.b	0	;B
   1183  4748		       01		      .byte.b	1	;R (39)
   1184  4749		       25		      .byte.b	37	;G
   1185  474a		       00		      .byte.b	0	;B
   1186  474b		       01		      .byte.b	1	;R (38)
   1187  474c		       01		      .byte.b	1	;G
   1188  474d		       00		      .byte.b	0	;B
   1189  474e		       03		      .byte.b	3	;R (37)
   1190  474f		       23		      .byte.b	35	;G
   1191  4750		       00		      .byte.b	0	;B
   1192  4751		       03		      .byte.b	3	;R (36)
   1193  4752		       13		      .byte.b	19	;G
   1194  4753		       00		      .byte.b	0	;B
   1195  4754		       01		      .byte.b	1	;R (35)
   1196  4755		       02		      .byte.b	2	;G
   1197  4756		       00		      .byte.b	0	;B
   1198  4757		       01		      .byte.b	1	;R (34)
   1199  4758		       10		      .byte.b	16	;G
   1200  4759		       00		      .byte.b	0	;B
   1201  475a		       03		      .byte.b	3	;R (33)
   1202  475b		       02		      .byte.b	2	;G
   1203  475c		       00		      .byte.b	0	;B
   1204  475d		       01		      .byte.b	1	;R (32)
   1205  475e		       08		      .byte.b	8	;G
   1206  475f		       00		      .byte.b	0	;B
   1207  4760		       03		      .byte.b	3	;R (31)
   1208  4761		       20		      .byte.b	32	;G
   1209  4762		       00		      .byte.b	0	;B
   1210  4763		       03		      .byte.b	3	;R (30)
   1211  4764		       00		      .byte.b	0	;G
   1212  4765		       00		      .byte.b	0	;B
   1213  4766		       03		      .byte.b	3	;R (29)
   1214  4767		       10		      .byte.b	16	;G
   1215  4768		       00		      .byte.b	0	;B
   1216  4769		       03		      .byte.b	3	;R (28)
   1217  476a		       00		      .byte.b	0	;G
   1218  476b		       00		      .byte.b	0	;B
   1219  476c		       07		      .byte.b	7	;R (27)
   1220  476d		       0e		      .byte.b	14	;G
   1221  476e		       00		      .byte.b	0	;B
   1222  476f		       03		      .byte.b	3	;R (26)
   1223  4770		       41		      .byte.b	65	;G
   1224  4771		       00		      .byte.b	0	;B
   1225  4772		       07		      .byte.b	7	;R (25)
   1226  4773		       04		      .byte.b	4	;G
   1227  4774		       00		      .byte.b	0	;B
   1228  4775		       03		      .byte.b	3	;R (24)
   1229  4776		       21		      .byte.b	33	;G
   1230  4777		       00		      .byte.b	0	;B
   1231  4778		       03		      .byte.b	3	;R (23)
   1232  4779		       04		      .byte.b	4	;G
   1233  477a		       00		      .byte.b	0	;B
   1234  477b		       03		      .byte.b	3	;R (22)
   1235  477c		       02		      .byte.b	2	;G
   1236  477d		       00		      .byte.b	0	;B
   1237  477e		       03		      .byte.b	3	;R (21)
   1238  477f		       26		      .byte.b	38	;G
   1239  4780		       00		      .byte.b	0	;B
   1240  4781		       01		      .byte.b	1	;R (20)
   1241  4782		       01		      .byte.b	1	;G
   1242  4783		       00		      .byte.b	0	;B
   1243  4784		       00		      .byte.b	0	;R (19)
   1244  4785		       21		      .byte.b	33	;G
   1245  4786		       00		      .byte.b	0	;B
   1246  4787		       01		      .byte.b	1	;R (18)
   1247  4788		       09		      .byte.b	9	;G
   1248  4789		       00		      .byte.b	0	;B
   1249  478a		       23		      .byte.b	35	;R (17)
   1250  478b		       22		      .byte.b	34	;G
   1251  478c		       00		      .byte.b	0	;B
   1252  478d		       01		      .byte.b	1	;R (16)
   1253  478e		       01		      .byte.b	1	;G
   1254  478f		       00		      .byte.b	0	;B
   1255  4790		       00		      .byte.b	0	;R (15)
   1256  4791		       29		      .byte.b	41	;G
   1257  4792		       00		      .byte.b	0	;B
   1258  4793		       00		      .byte.b	0	;R (14)
   1259  4794		       00		      .byte.b	0	;G
   1260  4795		       00		      .byte.b	0	;B
   1261  4796		       00		      .byte.b	0	;R (13)
   1262  4797		       04		      .byte.b	4	;G
   1263  4798		       00		      .byte.b	0	;B
   1264  4799		       00		      .byte.b	0	;R (12)
   1265  479a		       20		      .byte.b	32	;G
   1266  479b		       00		      .byte.b	0	;B
   1267  479c		       10		      .byte.b	16	;R (11)
   1268  479d		       12		      .byte.b	18	;G
   1269  479e		       00		      .byte.b	0	;B
   1270  479f		       00		      .byte.b	0	;R (10)
   1271  47a0		       00		      .byte.b	0	;G
   1272  47a1		       00		      .byte.b	0	;B
   1273  47a2		       00		      .byte.b	0	;R (9)
   1274  47a3		       21		      .byte.b	33	;G
   1275  47a4		       00		      .byte.b	0	;B
   1276  47a5		       00		      .byte.b	0	;R (8)
   1277  47a6		       08		      .byte.b	8	;G
   1278  47a7		       00		      .byte.b	0	;B
   1279  47a8		       00		      .byte.b	0	;R (7)
   1280  47a9		       20		      .byte.b	32	;G
   1281  47aa		       00		      .byte.b	0	;B
   1282  47ab		       00		      .byte.b	0	;R (6)
   1283  47ac		       04		      .byte.b	4	;G
   1284  47ad		       00		      .byte.b	0	;B
   1285  47ae		       20		      .byte.b	32	;R (5)
   1286  47af		       20		      .byte.b	32	;G
   1287  47b0		       00		      .byte.b	0	;B
   1288  47b1		       00		      .byte.b	0	;R (4)
   1289  47b2		       09		      .byte.b	9	;G
   1290  47b3		       00		      .byte.b	0	;B
   1291  47b4		       00		      .byte.b	0	;R (3)
   1292  47b5		       00		      .byte.b	0	;G
   1293  47b6		       00		      .byte.b	0	;B
   1294  47b7		       00		      .byte.b	0	;R (2)
   1295  47b8		       48		      .byte.b	72	;G
   1296  47b9		       00		      .byte.b	0	;B
   1297  47ba		       02		      .byte.b	2	;R (1)
   1298  47bb		       02		      .byte.b	2	;G
   1299  47bc		       00		      .byte.b	0	;B
   1300  47bd		       00		      .byte.b	0	;R (0)
   1301  47be		       00		      .byte.b	0	;G
   1302  47bf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    265  47c0							;    include "pizza.asm"
    266  47c0
      0  47c0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  47c0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  47c0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  47c0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  47c0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  47c0				  -	      ERR
      6  47c0					      endif
------- FILE ./chess.asm
------- FILE BANK_RECON.asm LEVEL 2 PASS 2
      0  47c0					      include	"BANK_RECON.asm"
      0  47c0					      NEWBANK	RECON
      1  4f90 ????				      SEG	RECON
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   RECON      SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	RECON
      2  4800
      3  4800							;---------------------------------------------------------------------------------------------------
      4  4800
      0  4800					      DEF	UNSAFE_showMoveCaptures
      1  4800				   BANK_UNSAFE_showMoveCaptures SET	_CURRENT_BANK
      2  4800				   UNSAFE_showMoveCaptures
      3  4800				   TEMPORARY_VAR SET	Overlay
      4  4800				   TEMPORARY_OFFSET SET	0
      5  4800					      SUBROUTINE
      6  4800					      SUBROUTINE
      7  4800
      0  4800					      VAR	__toSquareX12, 1
      1  4800				   __toSquareX12 SET	TEMPORARY_VAR
      2  4800				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4800
      4  4800				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4800				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4800				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4800					      ENDIF
      8  4800				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4800				  -	      ECHO	"Temporary Variable", __toSquareX12, "overflow!"
     10  4800				  -	      ERR
     11  4800					      ENDIF
     12  4800					      LIST	ON
      0  4800					      VAR	__fromPiece, 1
      1  4800				   __fromPiece SET	TEMPORARY_VAR
      2  4800				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4800
      4  4800				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4800				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4800				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4800					      ENDIF
      8  4800				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4800				  -	      ECHO	"Temporary Variable", __fromPiece, "overflow!"
     10  4800				  -	      ERR
     11  4800					      ENDIF
     12  4800					      LIST	ON
      0  4800					      VAR	__aiMoveIndex, 1
      1  4800				   __aiMoveIndex SET	TEMPORARY_VAR
      2  4800				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4800
      4  4800				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4800				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4800				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4800					      ENDIF
      8  4800				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4800				  -	      ECHO	"Temporary Variable", __aiMoveIndex, "overflow!"
     10  4800				  -	      ERR
     11  4800					      ENDIF
     12  4800					      LIST	ON
     11  4800
     12  4800							; place a marker on the board for any square matching the piece
     13  4800							; EXCEPT for squares which are occupied (we'll flash those later)
     14  4800							; x = movelist item # being checked
     15  4800
     16  4800		       a5 8b		      lda	savedBank
     17  4802		       48		      pha
     18  4803
     19  4803		       a9 09		      lda	#BANK_UNSAFE_showMoveCaptures
     20  4805		       85 8b		      sta	savedBank
     21  4807
     22  4807
     23  4807		       a6 8e	   .next      ldx	aiMoveIndex
     24  4809		       86 9e		      stx	__aiMoveIndex
     25  480b		       30 41		      bmi	.skip	; no moves in list
     26  480d
     27  480d		       ad 84 02 	      lda	INTIM
     28  4810		       c9 14		      cmp	#20
     29  4812		       90 3a		      bcc	.skip
     30  4814
     31  4814		       c6 8e		      dec	aiMoveIndex
     32  4816
     33  4816		       20 20 fd 	      jsr	GetMoveFrom
     34  4819		       c5 85		      cmp	fromX12
     35  481b		       d0 ea		      bne	.next
     36  481d
     37  481d
     38  481d		       20 2c fd 	      jsr	GetMoveTo
     39  4820		       85 9c		      sta	__toSquareX12
     40  4822		       a8		      tay
     41  4823		       20 2d fc 	      jsr	GetBoard
     42  4826		       29 0f		      and	#PIECE_MASK
     43  4828		       f0 dd		      beq	.next
     44  482a
     45  482a							; There's something on the board at destination, so it's a capture
     46  482a							; Let's see if we are doing a pawn promote...
     47  482a
     48  482a		       a4 85		      ldy	fromX12
     49  482c		       20 2d fc 	      jsr	GetBoard
     50  482f		       85 9d		      sta	__fromPiece
     51  4831
     52  4831		       20 38 fd 	      jsr	GetMovePiece
     53  4834		       45 9d		      eor	__fromPiece
     54  4836		       29 0f		      and	#PIECE_MASK
     55  4838		       f0 06		      beq	.legit	; from == to, so not a promote
     56  483a
     57  483a							; Have detected a promotion duplicate - skip all 3 of them
     58  483a
     59  483a		       c6 8e		      dec	aiMoveIndex	; skip "KBRQ" promotes
     60  483c		       c6 8e		      dec	aiMoveIndex
     61  483e		       c6 8e		      dec	aiMoveIndex
     62  4840
     63  4840				   .legit
     64  4840
      0  4840					      TIMECHECK	COPYSINGLEPIECE, restoreIndex	; not enough time to draw
      1  4840		       ad 84 02 	      lda	INTIM
      2  4843		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
      3  4845		       90 0b		      bcc	restoreIndex
     66  4847
     67  4847		       a5 9c		      lda	__toSquareX12
     68  4849		       85 80		      sta	squareToDraw
     69  484b
     70  484b		       20 92 fc 	      jsr	CopySinglePiece
     71  484e
     72  484e		       68	   .skip      pla
     73  484f		       85 8b		      sta	savedBank
     74  4851		       60		      rts
     75  4852
     76  4852		       a5 9e	   restoreIndex lda	__aiMoveIndex
     77  4854		       85 8e		      sta	aiMoveIndex
     78  4856		       4c 4e f0 	      jmp	.skip
     79  4859
     80  4859
     81  4859							;---------------------------------------------------------------------------------------------------
     82  4859
      0  4859					      DEF	aiMarchToTargetA
      1  4859				   BANK_aiMarchToTargetA SET	_CURRENT_BANK
      2  4859				   aiMarchToTargetA
      3  4859				   TEMPORARY_VAR SET	Overlay
      4  4859				   TEMPORARY_OFFSET SET	0
      5  4859					      SUBROUTINE
     84  4859					      SUBROUTINE
     85  4859
      0  4859					      VAR	__fromRow, 1
      1  4859				   __fromRow  SET	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __fromRow, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
      0  4859					      VAR	__boardIndex, 1
      1  4859				   __boardIndex SET	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __boardIndex, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
      0  4859					      VAR	__fromCol, 1
      1  4859				   __fromCol  SET	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __fromCol, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
      0  4859					      VAR	__toCol, 1
      1  4859				   __toCol    SET	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __toCol, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
     90  4859
     91  4859
     92  4859							; Now we calculate move to new square
     93  4859
     94  4859		       a5 85		      lda	fromX12
     95  485b		       c5 86		      cmp	toX12
     96  485d		       f0 68		      beq	.unmovedx
     97  485f		       85 83		      sta	lastSquareX12
     98  4861
     99  4861		       38		      sec
    100  4862		       a2 fd		      ldx	#-3
    101  4864		       e9 0a	   .sub10     sbc	#10
    102  4866		       e8		      inx
    103  4867		       b0 fb		      bcs	.sub10
    104  4869		       69 08		      adc	#8
    105  486b		       85 9e		      sta	__fromCol
    106  486d		       86 9c		      stx	__fromRow
    107  486f
    108  486f		       a5 86		      lda	toX12
    109  4871		       38		      sec
    110  4872		       a2 fd		      ldx	#-3
    111  4874		       e9 0a	   .sub10b    sbc	#10
    112  4876		       e8		      inx
    113  4877		       b0 fb		      bcs	.sub10b
    114  4879		       69 08		      adc	#8
    115  487b		       85 9f		      sta	__toCol
    116  487d
    117  487d
    118  487d		       e4 9c		      cpx	__fromRow
    119  487f		       f0 13		      beq	.rowDone
    120  4881
    121  4881		       b0 0a		      bcs	.incRow
    122  4883
    123  4883		       38		      sec
    124  4884		       a5 85		      lda	fromX12
    125  4886		       e9 0a		      sbc	#10
    126  4888		       85 85		      sta	fromX12
    127  488a		       4c 94 f0 	      jmp	.rowDone
    128  488d
    129  488d		       18	   .incRow    clc
    130  488e		       a5 85		      lda	fromX12
    131  4890		       69 0a		      adc	#10
    132  4892		       85 85		      sta	fromX12
    133  4894
    134  4894				   .rowDone
    135  4894
    136  4894		       a5 9f		      lda	__toCol
    137  4896		       c5 9e		      cmp	__fromCol
    138  4898		       f0 09		      beq	.colDone
    139  489a
    140  489a		       b0 05		      bcs	.incCol
    141  489c
    142  489c		       c6 85		      dec	fromX12
    143  489e		       4c a3 f0 	      jmp	.colDone
    144  48a1
    145  48a1		       e6 85	   .incCol    inc	fromX12
    146  48a3				   .colDone
    147  48a3
    148  48a3
    149  48a3
    150  48a3
    151  48a3							; erase object in new sqare --> blank
    152  48a3
    153  48a3		       a4 85		      ldy	fromX12
    154  48a5		       84 80		      sty	squareToDraw
    155  48a7
    156  48a7		       20 2d fc 	      jsr	GetBoard
    157  48aa		       c9 00		      cmp	#0
    158  48ac		       f0 03		      beq	.skipbl
    159  48ae		       20 92 fc 	      jsr	CopySinglePiece	; erase next square along --> blank
    160  48b1
    161  48b1				   .skipbl
    162  48b1		       a4 85		      ldy	fromX12
    163  48b3		       84 9d		      sty	__boardIndex
    164  48b5
    165  48b5		       20 2d fc 	      jsr	GetBoard
    166  48b8		       85 99		      sta	lastPiece	; what we are overwriting
    167  48ba		       a5 98		      lda	fromPiece
    168  48bc							;ora #FLAG_MOVED		 ; prevents usage in castling for K/R
    169  48bc		       29 df		      and	#~FLAG_ENPASSANT
    170  48be		       a4 9d		      ldy	__boardIndex
    171  48c0		       20 39 fc 	      jsr	PutBoard
    172  48c3
      0  48c3					      PHASE	AI_MarchB
      1  48c3		       a9 18		      lda	#AI_MarchB
      2  48c5		       85 8c		      sta	aiState
    174  48c7
    175  48c7				   .unmovedx
    176  48c7		       60		      rts
    177  48c8
    178  48c8
    179  48c8							;---------------------------------------------------------------------------------------------------
    180  48c8
      0  48c8					      DEF	aiMarchB2
      1  48c8				   BANK_aiMarchB2 SET	_CURRENT_BANK
      2  48c8				   aiMarchB2
      3  48c8				   TEMPORARY_VAR SET	Overlay
      4  48c8				   TEMPORARY_OFFSET SET	0
      5  48c8					      SUBROUTINE
    182  48c8					      SUBROUTINE
    183  48c8
    184  48c8		       a4 83		      ldy	lastSquareX12
    185  48ca		       84 80		      sty	squareToDraw
    186  48cc
    187  48cc		       20 2d fc 	      jsr	GetBoard
    188  48cf		       c9 00		      cmp	#0
    189  48d1		       f0 03		      beq	.skipbl2
    190  48d3
    191  48d3		       20 92 fc 	      jsr	CopySinglePiece	; draw previous piece back in old position
    192  48d6				   .skipbl2
    193  48d6
    194  48d6		       a5 85		      lda	fromX12
    195  48d8		       c5 86		      cmp	toX12
    196  48da		       f0 09		      beq	xhalt
    197  48dc
    198  48dc		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    199  48de		       85 82		      sta	drawDelay
      0  48e0					      PHASE	AI_MarchToTargetA
      1  48e0		       a9 17		      lda	#AI_MarchToTargetA
      2  48e2		       85 8c		      sta	aiState
    201  48e4
    202  48e4		       60		      rts
    203  48e5
    204  48e5				   xhalt
    205  48e5
    206  48e5		       20 f5 f0 	      jsr	FinaliseMove
    207  48e8
    208  48e8		       a9 04		      lda	#4	; on/off count
    209  48ea		       85 84		      sta	drawCount	; flashing for piece about to move
    210  48ec		       a9 00		      lda	#0
    211  48ee		       85 82		      sta	drawDelay
    212  48f0
      0  48f0					      PHASE	AI_FinalFlash
      1  48f0		       a9 1b		      lda	#AI_FinalFlash
      2  48f2		       85 8c		      sta	aiState
    214  48f4		       60		      rts
    215  48f5
    216  48f5
    217  48f5							;---------------------------------------------------------------------------------------------------
    218  48f5
      0  48f5					      DEF	FinaliseMove
      1  48f5				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  48f5				   FinaliseMove
      3  48f5				   TEMPORARY_VAR SET	Overlay
      4  48f5				   TEMPORARY_OFFSET SET	0
      5  48f5					      SUBROUTINE
    220  48f5					      SUBROUTINE
    221  48f5
    222  48f5							; Now the visible movement on the board has happened, fix up the pointers to the pieces
    223  48f5							; for both sides.
    224  48f5
    225  48f5		       a9 09		      lda	#BANK_FinaliseMove
    226  48f7		       85 8b		      sta	savedBank
    227  48f9
    228  48f9		       a5 97		      lda	sideToMove
    229  48fb		       0a		      asl
    230  48fc		       a9 09		      lda	#RAMBANK_PLY
    231  48fe		       69 00		      adc	#0
    232  4900		       20 da fc 	      jsr	GoFixPieceList
    233  4903
    234  4903		       a5 86		      lda	toX12
    235  4905		       85 85		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
    236  4907		       85 87		      sta	originX12
    237  4909
    238  4909		       a9 00		      lda	#0
    239  490b		       85 86		      sta	toX12	; --> deleted (square=0)
    240  490d
    241  490d		       a5 99		      lda	lastPiece
    242  490f		       f0 0c		      beq	.notake
    243  4911
    244  4911		       a5 97		      lda	sideToMove
    245  4913		       49 80		      eor	#128
    246  4915		       0a		      asl
    247  4916		       a9 09		      lda	#RAMBANK_PLY
    248  4918		       69 00		      adc	#0
    249  491a		       20 da fc 	      jsr	GoFixPieceList	; REMOVE any captured object
    250  491d
    251  491d		       60	   .notake    rts
    252  491e
    253  491e
    254  491e							;---------------------------------------------------------------------------------------------------
    255  491e
      0  491e					      DEF	aiMarchToTargetB
      1  491e				   BANK_aiMarchToTargetB SET	_CURRENT_BANK
      2  491e				   aiMarchToTargetB
      3  491e				   TEMPORARY_VAR SET	Overlay
      4  491e				   TEMPORARY_OFFSET SET	0
      5  491e					      SUBROUTINE
    257  491e					      SUBROUTINE
    258  491e
    259  491e							; now we want to undraw the piece in the old square
    260  491e
    261  491e		       a5 83		      lda	lastSquareX12
    262  4920		       85 80		      sta	squareToDraw
    263  4922
    264  4922		       20 92 fc 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    265  4925
    266  4925		       a4 83		      ldy	lastSquareX12
    267  4927		       a5 9a		      lda	previousPiece
    268  4929		       20 39 fc 	      jsr	PutBoard
    269  492c
    270  492c		       a5 99		      lda	lastPiece
    271  492e		       85 9a		      sta	previousPiece
    272  4930
      0  4930					      PHASE	AI_MarchB2
      1  4930		       a9 1a		      lda	#AI_MarchB2
      2  4932		       85 8c		      sta	aiState
    274  4934		       60		      rts
    275  4935
    276  4935
    277  4935							;---------------------------------------------------------------------------------------------------
    278  4935
      0  4935					      DEF	aiGenerateMoves
      1  4935				   BANK_aiGenerateMoves SET	_CURRENT_BANK
      2  4935				   aiGenerateMoves
      3  4935				   TEMPORARY_VAR SET	Overlay
      4  4935				   TEMPORARY_OFFSET SET	0
      5  4935					      SUBROUTINE
    280  4935					      SUBROUTINE
    281  4935
    282  4935		       20 fc f8 	      jsr	GenerateOneMove
    283  4938		       a5 96		      lda	piecelistIndex
    284  493a		       10 0d		      bpl	.wait
    285  493c
    286  493c							;lda currentPly
    287  493c							;sta SET_BANK_RAM
    288  493c							;jsr alphaBeta
    289  493c
    290  493c				  -	      if	PVSP
    291  493c				  -	      jmp	.player	;tmp
    292  493c					      endif
    293  493c
    294  493c		       a6 97		      ldx	sideToMove
    295  493e		       10 05		      bpl	.player
    296  4940
    297  4940
      0  4940				   .computer  PHASE	AI_ComputerMove	; computer select move
      1  4940		       a9 14		      lda	#AI_ComputerMove
      2  4942		       85 8c		      sta	aiState
    299  4944		       60		      rts
    300  4945
    301  4945
      0  4945				   .player    PHASE	AI_StartMoveGen
      1  4945		       a9 0a		      lda	#AI_StartMoveGen
      2  4947		       85 8c		      sta	aiState
    303  4949		       60	   .wait      rts
    304  494a
    305  494a
    306  494a							;---------------------------------------------------------------------------------------------------
    307  494a
      0  494a					      DEF	CopySetupForMarker
      1  494a				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  494a				   CopySetupForMarker
      3  494a				   TEMPORARY_VAR SET	Overlay
      4  494a				   TEMPORARY_OFFSET SET	0
      5  494a					      SUBROUTINE
    309  494a					      SUBROUTINE
    310  494a
      0  494a					      VAR	__pieceColour, 1
      1  494a				   __pieceColour SET	TEMPORARY_VAR
      2  494a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  494a
      4  494a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  494a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  494a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  494a					      ENDIF
      8  494a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  494a				  -	      ECHO	"Temporary Variable", __pieceColour, "overflow!"
     10  494a				  -	      ERR
     11  494a					      ENDIF
     12  494a					      LIST	ON
      0  494a					      VAR	__oddeven, 1
      1  494a				   __oddeven  SET	TEMPORARY_VAR
      2  494a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  494a
      4  494a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  494a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  494a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  494a					      ENDIF
      8  494a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  494a				  -	      ECHO	"Temporary Variable", __oddeven, "overflow!"
     10  494a				  -	      ERR
     11  494a					      ENDIF
     12  494a					      LIST	ON
      0  494a					      VAR	__pmcol, 1
      1  494a				   __pmcol    SET	TEMPORARY_VAR
      2  494a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  494a
      4  494a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  494a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  494a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  494a					      ENDIF
      8  494a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  494a				  -	      ECHO	"Temporary Variable", __pmcol, "overflow!"
     10  494a				  -	      ERR
     11  494a					      ENDIF
     12  494a					      LIST	ON
    314  494a
    315  494a		       a5 80		      lda	squareToDraw
    316  494c		       38		      sec
    317  494d		       a0 0a		      ldy	#10
    318  494f		       e9 0a	   .sub10     sbc	#10
    319  4951		       88		      dey
    320  4952		       b0 fb		      bcs	.sub10
    321  4954		       84 9d		      sty	__oddeven
    322  4956		       69 08		      adc	#8
    323  4958		       85 9e		      sta	__pmcol
    324  495a		       65 9d		      adc	__oddeven
    325  495c
    326  495c		       29 01		      and	#1
    327  495e		       49 01		      eor	#1
    328  4960		       f0 02		      beq	.white
    329  4962		       a9 24		      lda	#36
    330  4964				   .white
    331  4964		       85 9c		      sta	__pieceColour	; actually SQUARE black/white
    332  4966
    333  4966		       8a		      txa
    334  4967		       18		      clc
    335  4968		       65 9c		      adc	__pieceColour
    336  496a		       85 9c		      sta	__pieceColour
    337  496c
    338  496c		       a5 9e		      lda	__pmcol
    339  496e		       29 03		      and	#3
    340  4970
    341  4970		       18		      clc
    342  4971		       65 9c		      adc	__pieceColour
    343  4973		       a8		      tay
    344  4974		       60		      rts
    345  4975
    346  4975							;---------------------------------------------------------------------------------------------------
    347  4975
      0  4975					      DEF	CopySetup
      1  4975				   BANK_CopySetup SET	_CURRENT_BANK
      2  4975				   CopySetup
      3  4975				   TEMPORARY_VAR SET	Overlay
      4  4975				   TEMPORARY_OFFSET SET	0
      5  4975					      SUBROUTINE
    349  4975					      SUBROUTINE
    350  4975
      0  4975					      VAR	__tmp, 1
      1  4975				   __tmp      SET	TEMPORARY_VAR
      2  4975				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4975
      4  4975				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4975				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4975				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4975					      ENDIF
      8  4975				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4975				  -	      ECHO	"Temporary Variable", __tmp, "overflow!"
     10  4975				  -	      ERR
     11  4975					      ENDIF
     12  4975					      LIST	ON
      0  4975					      VAR	__shiftx, 1
      1  4975				   __shiftx   SET	TEMPORARY_VAR
      2  4975				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4975
      4  4975				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4975				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4975				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4975					      ENDIF
      8  4975				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4975				  -	      ECHO	"Temporary Variable", __shiftx, "overflow!"
     10  4975				  -	      ERR
     11  4975					      ENDIF
     12  4975					      LIST	ON
    353  4975
    354  4975		       a5 8b		      lda	savedBank
    355  4977		       48		      pha
    356  4978		       a9 09		      lda	#BANK_CopySetup
    357  497a		       85 8b		      sta	savedBank
    358  497c
    359  497c							; figure colouration of square
    360  497c
    361  497c		       a5 80		      lda	squareToDraw
    362  497e		       a2 0a		      ldx	#10
    363  4980		       38		      sec
    364  4981		       e9 0a	   .sub10     sbc	#10
    365  4983		       ca		      dex
    366  4984		       b0 fb		      bcs	.sub10
    367  4986		       69 08		      adc	#8
    368  4988		       85 9d		      sta	__shiftx
    369  498a		       86 9c		      stx	__tmp
    370  498c		       65 9c		      adc	__tmp
    371  498e
    372  498e
    373  498e		       29 01		      and	#1
    374  4990		       49 01		      eor	#1
    375  4992		       f0 02		      beq	.white
    376  4994		       a9 24		      lda	#36
    377  4996		       85 9c	   .white     sta	__pieceColour	; actually SQUARE black/white
    378  4998
    379  4998							; PieceColour = 0 for white square, 36 for black square
    380  4998
    381  4998							;lda #RAMBANK_MOVES_RAM
    382  4998							;sta SET_BANK_RAM
    383  4998
    384  4998		       a4 80		      ldy	squareToDraw
    385  499a		       20 2d fc 	      jsr	GetBoard	;lda Board,x
    386  499d		       0a		      asl
    387  499e		       90 02		      bcc	.blackAdjust
    388  49a0		       09 10		      ora	#16
    389  49a2		       4a	   .blackAdjust lsr
    390  49a3		       29 0f		      and	#%1111
    391  49a5		       aa		      tax
    392  49a6
    393  49a6		       a5 9d		      lda	__shiftx
    394  49a8		       29 03		      and	#3	; shift position in P
    395  49aa
    396  49aa		       18		      clc
    397  49ab		       7d b6 f1 	      adc	PieceToShape,x
    398  49ae		       18		      clc
    399  49af		       65 9c		      adc	__pieceColour
    400  49b1		       a8		      tay
    401  49b2
    402  49b2		       68		      pla
    403  49b3		       85 8b		      sta	savedBank
    404  49b5		       60		      rts
    405  49b6
    406  49b6				   PieceToShape
    407  49b6
    408  49b6		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    409  49b7		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    410  49b8		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    411  49b9		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    412  49ba		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    413  49bb		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    414  49bc		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    415  49bd		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    416  49be
    417  49be		       48		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    418  49bf		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    419  49c0		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    420  49c1		       50		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    421  49c2		       54		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    422  49c3		       58		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    423  49c4		       5c		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    424  49c5		       60		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    425  49c6
    426  49c6							;---------------------------------------------------------------------------------------------------
    427  49c6
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  49c6					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  49c6					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     12  4a00					      LIST	ON
      0  4a00					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  4a00				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4a00				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  4a00				   TEMPORARY_VAR SET	Overlay
      4  4a00				   TEMPORARY_OFFSET SET	0
      5  4a00					      SUBROUTINE
      3  4a00		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  4a18		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4a48					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  4a48					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     12  4a48					      LIST	ON
      0  4a48					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  4a48				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4a48				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  4a48				   TEMPORARY_VAR SET	Overlay
      4  4a48				   TEMPORARY_OFFSET SET	0
      5  4a48					      SUBROUTINE
      3  4a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4a60		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  4a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4a90					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  4a90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     12  4a90					      LIST	ON
      0  4a90					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  4a90				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4a90				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  4a90				   TEMPORARY_VAR SET	Overlay
      4  4a90				   TEMPORARY_OFFSET SET	0
      5  4a90					      SUBROUTINE
      3  4a90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4aa8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4ac0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4ad8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  4ad8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
     12  4b00					      LIST	ON
      0  4b00					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  4b00				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4b00				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  4b00				   TEMPORARY_VAR SET	Overlay
      4  4b00				   TEMPORARY_OFFSET SET	0
      5  4b00					      SUBROUTINE
      3  4b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4b18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4b30		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  4b48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  4b48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     12  4b48					      LIST	ON
      0  4b48					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  4b48				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4b48				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  4b48				   TEMPORARY_VAR SET	Overlay
      4  4b48				   TEMPORARY_OFFSET SET	0
      5  4b48					      SUBROUTINE
      3  4b48		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  4b60		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4b78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4b90					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  4b90					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     12  4b90					      LIST	ON
      0  4b90					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  4b90				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4b90				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  4b90				   TEMPORARY_VAR SET	Overlay
      4  4b90				   TEMPORARY_OFFSET SET	0
      5  4b90					      SUBROUTINE
      3  4b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4ba8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  4bc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4bd8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  4bd8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
     12  4c00					      LIST	ON
      0  4c00					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  4c00				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4c00				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  4c00				   TEMPORARY_VAR SET	Overlay
      4  4c00				   TEMPORARY_OFFSET SET	0
      5  4c00					      SUBROUTINE
      3  4c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4c18		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  4c30		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4c48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  4c48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     12  4c48					      LIST	ON
      0  4c48					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  4c48				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4c48				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  4c48				   TEMPORARY_VAR SET	Overlay
      4  4c48				   TEMPORARY_OFFSET SET	0
      5  4c48					      SUBROUTINE
      3  4c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4c78		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  4c90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  4c90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     12  4c90					      LIST	ON
      0  4c90					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  4c90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4c90				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  4c90				   TEMPORARY_VAR SET	Overlay
      4  4c90				   TEMPORARY_OFFSET SET	0
      5  4c90					      SUBROUTINE
      3  4c90		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4ca8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4cd8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  4cd8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
     12  4d00					      LIST	ON
      0  4d00					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  4d00				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4d00				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  4d00				   TEMPORARY_VAR SET	Overlay
      4  4d00				   TEMPORARY_OFFSET SET	0
      5  4d00					      SUBROUTINE
      3  4d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4d18		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4d48					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  4d48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     12  4d48					      LIST	ON
      0  4d48					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  4d48				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4d48				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  4d48				   TEMPORARY_VAR SET	Overlay
      4  4d48				   TEMPORARY_OFFSET SET	0
      5  4d48					      SUBROUTINE
      3  4d48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4d60		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4d78		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4d90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  4d90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     12  4d90					      LIST	ON
      0  4d90					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  4d90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4d90				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  4d90				   TEMPORARY_VAR SET	Overlay
      4  4d90				   TEMPORARY_OFFSET SET	0
      5  4d90					      SUBROUTINE
      3  4d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4da8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4dc0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  4dd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  4dd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
     12  4e00					      LIST	ON
      0  4e00					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  4e00				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4e00				   BLACK_KING_on_BLACK_SQUARE_0
      3  4e00				   TEMPORARY_VAR SET	Overlay
      4  4e00				   TEMPORARY_OFFSET SET	0
      5  4e00					      SUBROUTINE
      3  4e00		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$70,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  4e18		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  4e30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4e48					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  4e48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     12  4e48					      LIST	ON
      0  4e48					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  4e48				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4e48				   BLACK_KING_on_BLACK_SQUARE_1
      3  4e48				   TEMPORARY_VAR SET	Overlay
      4  4e48				   TEMPORARY_OFFSET SET	0
      5  4e48					      SUBROUTINE
      3  4e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4e60		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$70,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  4e78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4e90					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  4e90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     12  4e90					      LIST	ON
      0  4e90					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  4e90				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4e90				   BLACK_KING_on_BLACK_SQUARE_2
      3  4e90				   TEMPORARY_VAR SET	Overlay
      4  4e90				   TEMPORARY_OFFSET SET	0
      5  4e90					      SUBROUTINE
      3  4e90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4ea8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  4ec0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4ed8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  4ed8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
     12  4f00					      LIST	ON
      0  4f00					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  4f00				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4f00				   BLACK_KING_on_BLACK_SQUARE_3
      3  4f00				   TEMPORARY_VAR SET	Overlay
      4  4f00				   TEMPORARY_OFFSET SET	0
      5  4f00					      SUBROUTINE
      3  4f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4f18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4f30		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$38,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE BANK_RECON.asm
    444  4f48
    445  4f48
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  4f48					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  4f48					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     12  4f48					      LIST	ON
      0  4f48					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  4f48				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  4f48				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  4f48				   TEMPORARY_VAR SET	Overlay
      4  4f48				   TEMPORARY_OFFSET SET	0
      5  4f48					      SUBROUTINE
      3  4f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4f60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4f78		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
    447  4f90
      0  4f90					      CHECK_BANK_SIZE	"BANK_RECON"
      1  4f90		       07 90	   .TEMP      =	* - BANK_START
 BANK_RECON (2K) SIZE =  $790 , FREE= $70
      2  4f90					      ECHO	"BANK_RECON", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4f90				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4f90				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4f90				  -	      ERR
      6  4f90					      endif
    449  4f90
    450  4f90							; EOF
------- FILE ./chess.asm
    467  4f90
    468  4f90							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  4f90					      include	"Handler_BANK1.asm"
      1  4f90							; Copyright (C)2020 Andrew Davie
      2  4f90
      3  4f90							;---------------------------------------------------------------------------------------------------
      4  4f90
      0  4f90					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  4f90
      2  4f90
      3  4f90
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  5690 ????				      SEG	MOVES
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   MOVES      SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	MOVES
      7  5000
      8  5000							; Board is a 10 x 12 object which simplifies the generation of moves
      9  5000							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     10  5000							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     11  5000							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     12  5000
     13  5000							;     X12 numbering
     14  5000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     15  5000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     16  5000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     17  5000							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     18  5000							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     19  5000							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     20  5000							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     21  5000							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     22  5000							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     23  5000							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     24  5000							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     25  5000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     26  5000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     27  5000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     28  5000							;	0   1	2   3	4   5	6   7	8   9
     29  5000							;		A   B	C   D	E   F	G   H
     30  5000
     31  5000							;     HEX X12
     32  5000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     33  5000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     34  5000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     35  5000							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     36  5000							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     37  5000							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     38  5000							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     39  5000							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     40  5000							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     41  5000							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     42  5000							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     43  5000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     44  5000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     45  5000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     46  5000							;	0   1	2   3	4   5	6   7	8   9
     47  5000							;		A   B	C   D	E   F	G   H
     48  5000
     49  5000
     50  5000							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     51  5000							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     52  5000							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     53  5000							; be re-used for something else - we just need to guarantee there are 21 of them there
     54  5000
      0  5000					      ALLOCATE	Valid, 120 + 80 + 21
      0  5000					      OPTIONAL_PAGEBREAK	"Table", 120 + 80 + 21
     12  5000					      LIST	ON
      0  5000					      DEF	Valid
      1  5000				   BANK_Valid SET	_CURRENT_BANK
      2  5000				   Valid
      3  5000				   TEMPORARY_VAR SET	Overlay
      4  5000				   TEMPORARY_OFFSET SET	0
      5  5000					      SUBROUTINE
     56  5000		       00 00 00 00*	      ds	21	; so indexing of "ValidSquare-21,x" won't fail
     57  5015
     58  5015							; Note, we will never index INTO the above bytes - x will always be >= 22
     59  5015							; We just need to make sure that the actual indexing will not have an address before
     60  5015							; the index of outside the page.
     61  5015
      0  5015					      DEF	ValidSquare
      1  5015				   BANK_ValidSquare SET	_CURRENT_BANK
      2  5015				   ValidSquare
      3  5015				   TEMPORARY_VAR SET	Overlay
      4  5015				   TEMPORARY_OFFSET SET	0
      5  5015					      SUBROUTINE
     63  5015
     64  5015
     65  5015							; Use this table to
     66  5015							;   a) Determine if a square is valid (-1 = NO)
     67  5015							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     68  5015							;	if a white pawn on square "x" can move "up" the board.
     69  5015
     70  5015		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     71  501f		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     72  5029		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     73  5033		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     74  503d		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     75  5047		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     76  5051		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     77  505b		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     78  5065		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     79  506f		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     80  5079
      0  5079					      DEF	Board
      1  5079				   BANK_Board SET	_CURRENT_BANK
      2  5079				   Board
      3  5079				   TEMPORARY_VAR SET	Overlay
      4  5079				   TEMPORARY_OFFSET SET	0
      5  5079					      SUBROUTINE
     82  5079
     83  5079							; A 10X10... we should never write using invalid square
     84  5079							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     85  5079							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     86  5079
     87  5079		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     88  5083		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     89  508d
     90  508d					      REPEAT	8
     91  508d		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  508d					      REPEND
     91  5097		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  5097					      REPEND
     91  50a1		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  50a1					      REPEND
     91  50ab		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  50ab					      REPEND
     91  50b5		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  50b5					      REPEND
     91  50bf		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  50bf					      REPEND
     91  50c9		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     90  50c9					      REPEND
     91  50d3		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     92  50dd					      REPEND
     93  50dd
     94  50dd							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     95  50dd
     96  50dd							; PARANOIA... following not used, but there in case above violated
     97  50dd							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
     98  50dd							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
     99  50dd
    100  50dd							;---------------------------------------------------------------------------------------------------
    101  50dd
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  50dd					      include	"Handler_QUEEN.asm"
      1  50dd							; Copyright (C)2020 Andrew Davie
      2  50dd
      3  50dd							;---------------------------------------------------------------------------------------------------
      4  50dd							; QUEEN
      5  50dd							;---------------------------------------------------------------------------------------------------
      6  50dd
      0  50dd					      DEF	Handle_QUEEN
      1  50dd				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  50dd				   Handle_QUEEN
      3  50dd				   TEMPORARY_VAR SET	Overlay
      4  50dd				   TEMPORARY_OFFSET SET	0
      5  50dd					      SUBROUTINE
      8  50dd					      SUBROUTINE
      9  50dd
     10  50dd							; Pass...
     11  50dd							; x = currentSquare (square the piece is on)
     12  50dd							; currentPiece (with flags/colour attached)
     13  50dd
      0  50dd					      MOVE_TOWARDS	_DOWN+_LEFT
      1  50dd					      SUBROUTINE
      2  50dd
      3  50dd
      4  50dd
      5  50dd		       a6 93		      ldx	currentSquare
      6  50df		       d0 03		      bne	.project
      7  50e1
      8  50e1		       20 69 fb    .empty     jsr	AddMove
      9  50e4		       bc 0a f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
     10  50e7		       30 0c		      bmi	.invalid
     11  50e9		       b9 79 f0 	      lda	Board,y
     12  50ec		       f0 f3		      beq	.empty
     13  50ee		       45 92		      eor	currentPiece
     14  50f0		       10 03		      bpl	.invalid
     15  50f2		       20 69 fb 	      jsr	AddMove
     16  50f5
     17  50f5				   .invalid
      0  50f5					      MOVE_TOWARDS	_DOWN
      1  50f5					      SUBROUTINE
      2  50f5
      3  50f5
      4  50f5
      5  50f5		       a6 93		      ldx	currentSquare
      6  50f7		       d0 03		      bne	.project
      7  50f9
      8  50f9		       20 69 fb    .empty     jsr	AddMove
      9  50fc		       bc 0b f0    .project   ldy	ValidSquare+_DOWN,x
     10  50ff		       30 0c		      bmi	.invalid
     11  5101		       b9 79 f0 	      lda	Board,y
     12  5104		       f0 f3		      beq	.empty
     13  5106		       45 92		      eor	currentPiece
     14  5108		       10 03		      bpl	.invalid
     15  510a		       20 69 fb 	      jsr	AddMove
     16  510d
     17  510d				   .invalid
      0  510d					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  510d					      SUBROUTINE
      2  510d
      3  510d
      4  510d
      5  510d		       a6 93		      ldx	currentSquare
      6  510f		       d0 03		      bne	.project
      7  5111
      8  5111		       20 69 fb    .empty     jsr	AddMove
      9  5114		       bc 0c f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
     10  5117		       30 0c		      bmi	.invalid
     11  5119		       b9 79 f0 	      lda	Board,y
     12  511c		       f0 f3		      beq	.empty
     13  511e		       45 92		      eor	currentPiece
     14  5120		       10 03		      bpl	.invalid
     15  5122		       20 69 fb 	      jsr	AddMove
     16  5125
     17  5125				   .invalid
      0  5125					      MOVE_TOWARDS	_RIGHT
      1  5125					      SUBROUTINE
      2  5125
      3  5125
      4  5125
      5  5125		       a6 93		      ldx	currentSquare
      6  5127		       d0 03		      bne	.project
      7  5129
      8  5129		       20 69 fb    .empty     jsr	AddMove
      9  512c		       bc 16 f0    .project   ldy	ValidSquare+_RIGHT,x
     10  512f		       30 0c		      bmi	.invalid
     11  5131		       b9 79 f0 	      lda	Board,y
     12  5134		       f0 f3		      beq	.empty
     13  5136		       45 92		      eor	currentPiece
     14  5138		       10 03		      bpl	.invalid
     15  513a		       20 69 fb 	      jsr	AddMove
     16  513d
     17  513d				   .invalid
      0  513d					      MOVE_TOWARDS	_UP+_RIGHT
      1  513d					      SUBROUTINE
      2  513d
      3  513d
      4  513d
      5  513d		       a6 93		      ldx	currentSquare
      6  513f		       d0 03		      bne	.project
      7  5141
      8  5141		       20 69 fb    .empty     jsr	AddMove
      9  5144		       bc 20 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
     10  5147		       30 0c		      bmi	.invalid
     11  5149		       b9 79 f0 	      lda	Board,y
     12  514c		       f0 f3		      beq	.empty
     13  514e		       45 92		      eor	currentPiece
     14  5150		       10 03		      bpl	.invalid
     15  5152		       20 69 fb 	      jsr	AddMove
     16  5155
     17  5155				   .invalid
      0  5155					      MOVE_TOWARDS	_UP
      1  5155					      SUBROUTINE
      2  5155
      3  5155
      4  5155
      5  5155		       a6 93		      ldx	currentSquare
      6  5157		       d0 03		      bne	.project
      7  5159
      8  5159		       20 69 fb    .empty     jsr	AddMove
      9  515c		       bc 1f f0    .project   ldy	ValidSquare+_UP,x
     10  515f		       30 0c		      bmi	.invalid
     11  5161		       b9 79 f0 	      lda	Board,y
     12  5164		       f0 f3		      beq	.empty
     13  5166		       45 92		      eor	currentPiece
     14  5168		       10 03		      bpl	.invalid
     15  516a		       20 69 fb 	      jsr	AddMove
     16  516d
     17  516d				   .invalid
      0  516d					      MOVE_TOWARDS	_UP+_LEFT
      1  516d					      SUBROUTINE
      2  516d
      3  516d
      4  516d
      5  516d		       a6 93		      ldx	currentSquare
      6  516f		       d0 03		      bne	.project
      7  5171
      8  5171		       20 69 fb    .empty     jsr	AddMove
      9  5174		       bc 1e f0    .project   ldy	ValidSquare+_UP+_LEFT,x
     10  5177		       30 0c		      bmi	.invalid
     11  5179		       b9 79 f0 	      lda	Board,y
     12  517c		       f0 f3		      beq	.empty
     13  517e		       45 92		      eor	currentPiece
     14  5180		       10 03		      bpl	.invalid
     15  5182		       20 69 fb 	      jsr	AddMove
     16  5185
     17  5185				   .invalid
      0  5185					      MOVE_TOWARDS	_LEFT
      1  5185					      SUBROUTINE
      2  5185
      3  5185
      4  5185
      5  5185		       a6 93		      ldx	currentSquare
      6  5187		       d0 03		      bne	.project
      7  5189
      8  5189		       20 69 fb    .empty     jsr	AddMove
      9  518c		       bc 14 f0    .project   ldy	ValidSquare+_LEFT,x
     10  518f		       30 0c		      bmi	.invalid
     11  5191		       b9 79 f0 	      lda	Board,y
     12  5194		       f0 f3		      beq	.empty
     13  5196		       45 92		      eor	currentPiece
     14  5198		       10 03		      bpl	.invalid
     15  519a		       20 69 fb 	      jsr	AddMove
     16  519d
     17  519d				   .invalid
     22  519d
     23  519d		       4c c9 f9 	      jmp	MoveReturn
     24  51a0
     25  51a0							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  51a0					      include	"Handler_BISHOP.asm"
      1  51a0							; Copyright (C)2020 Andrew Davie
      2  51a0
      3  51a0							;---------------------------------------------------------------------------------------------------
      4  51a0							; BISHOP
      5  51a0							;---------------------------------------------------------------------------------------------------
      6  51a0
      0  51a0					      DEF	Handle_BISHOP
      1  51a0				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  51a0				   Handle_BISHOP
      3  51a0				   TEMPORARY_VAR SET	Overlay
      4  51a0				   TEMPORARY_OFFSET SET	0
      5  51a0					      SUBROUTINE
      8  51a0					      SUBROUTINE
      9  51a0
     10  51a0							; x = currentSquare (square the piece is on)
     11  51a0							; currentPiece (with flags/colour attached)
     12  51a0
      0  51a0					      MOVE_TOWARDS	_DOWN+_LEFT
      1  51a0					      SUBROUTINE
      2  51a0
      3  51a0
      4  51a0
      5  51a0		       a6 93		      ldx	currentSquare
      6  51a2		       d0 03		      bne	.project
      7  51a4
      8  51a4		       20 69 fb    .empty     jsr	AddMove
      9  51a7		       bc 0a f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
     10  51aa		       30 0c		      bmi	.invalid
     11  51ac		       b9 79 f0 	      lda	Board,y
     12  51af		       f0 f3		      beq	.empty
     13  51b1		       45 92		      eor	currentPiece
     14  51b3		       10 03		      bpl	.invalid
     15  51b5		       20 69 fb 	      jsr	AddMove
     16  51b8
     17  51b8				   .invalid
      0  51b8					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  51b8					      SUBROUTINE
      2  51b8
      3  51b8
      4  51b8
      5  51b8		       a6 93		      ldx	currentSquare
      6  51ba		       d0 03		      bne	.project
      7  51bc
      8  51bc		       20 69 fb    .empty     jsr	AddMove
      9  51bf		       bc 0c f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
     10  51c2		       30 0c		      bmi	.invalid
     11  51c4		       b9 79 f0 	      lda	Board,y
     12  51c7		       f0 f3		      beq	.empty
     13  51c9		       45 92		      eor	currentPiece
     14  51cb		       10 03		      bpl	.invalid
     15  51cd		       20 69 fb 	      jsr	AddMove
     16  51d0
     17  51d0				   .invalid
      0  51d0					      MOVE_TOWARDS	_UP+_LEFT
      1  51d0					      SUBROUTINE
      2  51d0
      3  51d0
      4  51d0
      5  51d0		       a6 93		      ldx	currentSquare
      6  51d2		       d0 03		      bne	.project
      7  51d4
      8  51d4		       20 69 fb    .empty     jsr	AddMove
      9  51d7		       bc 1e f0    .project   ldy	ValidSquare+_UP+_LEFT,x
     10  51da		       30 0c		      bmi	.invalid
     11  51dc		       b9 79 f0 	      lda	Board,y
     12  51df		       f0 f3		      beq	.empty
     13  51e1		       45 92		      eor	currentPiece
     14  51e3		       10 03		      bpl	.invalid
     15  51e5		       20 69 fb 	      jsr	AddMove
     16  51e8
     17  51e8				   .invalid
      0  51e8					      MOVE_TOWARDS	_UP+_RIGHT
      1  51e8					      SUBROUTINE
      2  51e8
      3  51e8
      4  51e8
      5  51e8		       a6 93		      ldx	currentSquare
      6  51ea		       d0 03		      bne	.project
      7  51ec
      8  51ec		       20 69 fb    .empty     jsr	AddMove
      9  51ef		       bc 20 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
     10  51f2		       30 0c		      bmi	.invalid
     11  51f4		       b9 79 f0 	      lda	Board,y
     12  51f7		       f0 f3		      beq	.empty
     13  51f9		       45 92		      eor	currentPiece
     14  51fb		       10 03		      bpl	.invalid
     15  51fd		       20 69 fb 	      jsr	AddMove
     16  5200
     17  5200				   .invalid
     17  5200
     18  5200		       4c c9 f9 	      jmp	MoveReturn
     19  5203
     20  5203							;---------------------------------------------------------------------------------------------------
     21  5203							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  5203					      include	"Handler_ROOK.asm"
      1  5203							; Copyright (C)2020 Andrew Davie
      2  5203							; Rook move handler
      3  5203
      4  5203							;---------------------------------------------------------------------------------------------------
      5  5203							; ROOK
      6  5203							;---------------------------------------------------------------------------------------------------
      7  5203
      0  5203					      DEF	Handle_ROOK
      1  5203				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  5203				   Handle_ROOK
      3  5203				   TEMPORARY_VAR SET	Overlay
      4  5203				   TEMPORARY_OFFSET SET	0
      5  5203					      SUBROUTINE
      9  5203					      SUBROUTINE
     10  5203
     11  5203							; Pass...
     12  5203							; x = currentSquare (square the piece is on)
     13  5203							; currentPiece (with flags/colour attached)
     14  5203
      0  5203					      MOVE_TOWARDS	_DOWN
      1  5203					      SUBROUTINE
      2  5203
      3  5203
      4  5203
      5  5203		       a6 93		      ldx	currentSquare
      6  5205		       d0 03		      bne	.project
      7  5207
      8  5207		       20 69 fb    .empty     jsr	AddMove
      9  520a		       bc 0b f0    .project   ldy	ValidSquare+_DOWN,x
     10  520d		       30 0c		      bmi	.invalid
     11  520f		       b9 79 f0 	      lda	Board,y
     12  5212		       f0 f3		      beq	.empty
     13  5214		       45 92		      eor	currentPiece
     14  5216		       10 03		      bpl	.invalid
     15  5218		       20 69 fb 	      jsr	AddMove
     16  521b
     17  521b				   .invalid
      0  521b					      MOVE_TOWARDS	_RIGHT
      1  521b					      SUBROUTINE
      2  521b
      3  521b
      4  521b
      5  521b		       a6 93		      ldx	currentSquare
      6  521d		       d0 03		      bne	.project
      7  521f
      8  521f		       20 69 fb    .empty     jsr	AddMove
      9  5222		       bc 16 f0    .project   ldy	ValidSquare+_RIGHT,x
     10  5225		       30 0c		      bmi	.invalid
     11  5227		       b9 79 f0 	      lda	Board,y
     12  522a		       f0 f3		      beq	.empty
     13  522c		       45 92		      eor	currentPiece
     14  522e		       10 03		      bpl	.invalid
     15  5230		       20 69 fb 	      jsr	AddMove
     16  5233
     17  5233				   .invalid
      0  5233					      MOVE_TOWARDS	_UP
      1  5233					      SUBROUTINE
      2  5233
      3  5233
      4  5233
      5  5233		       a6 93		      ldx	currentSquare
      6  5235		       d0 03		      bne	.project
      7  5237
      8  5237		       20 69 fb    .empty     jsr	AddMove
      9  523a		       bc 1f f0    .project   ldy	ValidSquare+_UP,x
     10  523d		       30 0c		      bmi	.invalid
     11  523f		       b9 79 f0 	      lda	Board,y
     12  5242		       f0 f3		      beq	.empty
     13  5244		       45 92		      eor	currentPiece
     14  5246		       10 03		      bpl	.invalid
     15  5248		       20 69 fb 	      jsr	AddMove
     16  524b
     17  524b				   .invalid
      0  524b					      MOVE_TOWARDS	_LEFT
      1  524b					      SUBROUTINE
      2  524b
      3  524b
      4  524b
      5  524b		       a6 93		      ldx	currentSquare
      6  524d		       d0 03		      bne	.project
      7  524f
      8  524f		       20 69 fb    .empty     jsr	AddMove
      9  5252		       bc 14 f0    .project   ldy	ValidSquare+_LEFT,x
     10  5255		       30 0c		      bmi	.invalid
     11  5257		       b9 79 f0 	      lda	Board,y
     12  525a		       f0 f3		      beq	.empty
     13  525c		       45 92		      eor	currentPiece
     14  525e		       10 03		      bpl	.invalid
     15  5260		       20 69 fb 	      jsr	AddMove
     16  5263
     17  5263				   .invalid
     19  5263
     20  5263		       4c c9 f9 	      jmp	MoveReturn
     21  5266
     22  5266							;---------------------------------------------------------------------------------------------------
     23  5266							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  5266					      include	"Handler_KING.asm"
      1  5266							; Copyright (C)2020 Andrew Davie
      2  5266
      3  5266							;---------------------------------------------------------------------------------------------------
      4  5266							; KING
      5  5266							; This is the move handler for a KING
      6  5266							; "Check" is detected in the next ply of the search.
      7  5266
      8  5266
      9  5266							;---------------------------------------------------------------------------------------------------
     10  5266
     11  5266							; MACRO - Castling
     12  5266
     13  5266		       00 03	   KINGSIDE   =	3
     14  5266		       ff ff ff fc QUEENSIDE  =	-4
     15  5266
     16  5266					      MAC	castle
     17  5266							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  5266
     19  5266					      ldx	currentSquare
     20  5266					      lda	Board+{1},x	; kingside/queenside R position
     21  5266					      and	#PIECE_MASK|FLAG_MOVED
     22  5266					      cmp	#ROOK
     23  5266					      bne	.noCastle	; not a R that hasn't moved
     24  5266
     25  5266							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  5266							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  5266
     28  5266					      IF	{1} = QUEENSIDE
     29  5266					      lda	Board-3,x	; nothing in N pos
     30  5266					      bne	.noCastle
     31  5266					      lda	Board-2,x	; nothing in B pos
     32  5266					      bne	.noCastle
     33  5266					      lda	Board-1,x	; nothing in Q pos
     34  5266					      bne	.noCastle
     35  5266
     36  5266					      ENDIF
     37  5266
     38  5266					      IF	{1} = KINGSIDE
     39  5266					      lda	Board+2,x	; check N pos
     40  5266					      bne	.noCastle
     41  5266					      lda	Board+1,x	; check B pos
     42  5266					      bne	.noCastle
     43  5266					      ENDIF
     44  5266
     45  5266							; appropriate N/B/(Q) squares are vacant so we proceed...
     46  5266
     47  5266							; FINALLY -- king can castle
     48  5266							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     49  5266							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     50  5266							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     51  5266
     52  5266					      lda	currentPiece
     53  5266					      ora	#FLAG_CASTLE	; flag it's a castling move
     54  5266					      sta	currentPiece
     55  5266
     56  5266					      IF	{1} = KINGSIDE
     57  5266					      ldy	ValidSquare+2,x
     58  5266					      ENDIF
     59  5266
     60  5266					      IF	{1} = QUEENSIDE
     61  5266					      ldy	ValidSquare-2,x
     62  5266					      ENDIF
     63  5266
     64  5266					      jsr	AddMove	; 57
     65  5266
     66  5266				   .noCastle
     67  5266					      ENDM
     68  5266
     69  5266
     70  5266							;---------------------------------------------------------------------------------------------------
     71  5266
      0  5266					      DEF	Handle_KING
      1  5266				   BANK_Handle_KING SET	_CURRENT_BANK
      2  5266				   Handle_KING
      3  5266				   TEMPORARY_VAR SET	Overlay
      4  5266				   TEMPORARY_OFFSET SET	0
      5  5266					      SUBROUTINE
     73  5266					      SUBROUTINE
     74  5266
     75  5266							; x = currentSquare (square the KING is on)
     76  5266							; currentPiece (KING of course, but with flags/colour attached)
     77  5266
      0  5266					      MOVE_TO	_DOWN+_LEFT
      1  5266					      SUBROUTINE
      2  5266		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  5269		       30 0c		      bmi	.invalid
      4  526b		       b9 79 f0 	      lda	Board,y
      5  526e		       f0 04		      beq	.squareEmpty
      6  5270		       45 92		      eor	currentPiece
      7  5272		       10 03		      bpl	.invalid
      8  5274		       20 69 fb    .squareEmpty jsr	AddMove
      9  5277				   .invalid
      0  5277					      MOVE_TO_X	_DOWN
      1  5277		       a6 93		      ldx	currentSquare
      0  5279					      MOVE_TO	_DOWN
      1  5279					      SUBROUTINE
      2  5279		       bc 0b f0 	      ldy	ValidSquare+_DOWN,x
      3  527c		       30 0c		      bmi	.invalid
      4  527e		       b9 79 f0 	      lda	Board,y
      5  5281		       f0 04		      beq	.squareEmpty
      6  5283		       45 92		      eor	currentPiece
      7  5285		       10 03		      bpl	.invalid
      8  5287		       20 69 fb    .squareEmpty jsr	AddMove
      9  528a				   .invalid
      0  528a					      MOVE_TO_X	_DOWN+_RIGHT
      1  528a		       a6 93		      ldx	currentSquare
      0  528c					      MOVE_TO	_DOWN+_RIGHT
      1  528c					      SUBROUTINE
      2  528c		       bc 0c f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  528f		       30 0c		      bmi	.invalid
      4  5291		       b9 79 f0 	      lda	Board,y
      5  5294		       f0 04		      beq	.squareEmpty
      6  5296		       45 92		      eor	currentPiece
      7  5298		       10 03		      bpl	.invalid
      8  529a		       20 69 fb    .squareEmpty jsr	AddMove
      9  529d				   .invalid
      0  529d					      MOVE_TO_X	_RIGHT
      1  529d		       a6 93		      ldx	currentSquare
      0  529f					      MOVE_TO	_RIGHT
      1  529f					      SUBROUTINE
      2  529f		       bc 16 f0 	      ldy	ValidSquare+_RIGHT,x
      3  52a2		       30 0c		      bmi	.invalid
      4  52a4		       b9 79 f0 	      lda	Board,y
      5  52a7		       f0 04		      beq	.squareEmpty
      6  52a9		       45 92		      eor	currentPiece
      7  52ab		       10 03		      bpl	.invalid
      8  52ad		       20 69 fb    .squareEmpty jsr	AddMove
      9  52b0				   .invalid
      0  52b0					      MOVE_TO_X	_UP+_RIGHT
      1  52b0		       a6 93		      ldx	currentSquare
      0  52b2					      MOVE_TO	_UP+_RIGHT
      1  52b2					      SUBROUTINE
      2  52b2		       bc 20 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  52b5		       30 0c		      bmi	.invalid
      4  52b7		       b9 79 f0 	      lda	Board,y
      5  52ba		       f0 04		      beq	.squareEmpty
      6  52bc		       45 92		      eor	currentPiece
      7  52be		       10 03		      bpl	.invalid
      8  52c0		       20 69 fb    .squareEmpty jsr	AddMove
      9  52c3				   .invalid
      0  52c3					      MOVE_TO_X	_UP
      1  52c3		       a6 93		      ldx	currentSquare
      0  52c5					      MOVE_TO	_UP
      1  52c5					      SUBROUTINE
      2  52c5		       bc 1f f0 	      ldy	ValidSquare+_UP,x
      3  52c8		       30 0c		      bmi	.invalid
      4  52ca		       b9 79 f0 	      lda	Board,y
      5  52cd		       f0 04		      beq	.squareEmpty
      6  52cf		       45 92		      eor	currentPiece
      7  52d1		       10 03		      bpl	.invalid
      8  52d3		       20 69 fb    .squareEmpty jsr	AddMove
      9  52d6				   .invalid
      0  52d6					      MOVE_TO_X	_UP+_LEFT
      1  52d6		       a6 93		      ldx	currentSquare
      0  52d8					      MOVE_TO	_UP+_LEFT
      1  52d8					      SUBROUTINE
      2  52d8		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  52db		       30 0c		      bmi	.invalid
      4  52dd		       b9 79 f0 	      lda	Board,y
      5  52e0		       f0 04		      beq	.squareEmpty
      6  52e2		       45 92		      eor	currentPiece
      7  52e4		       10 03		      bpl	.invalid
      8  52e6		       20 69 fb    .squareEmpty jsr	AddMove
      9  52e9				   .invalid
      0  52e9					      MOVE_TO_X	_LEFT
      1  52e9		       a6 93		      ldx	currentSquare
      0  52eb					      MOVE_TO	_LEFT
      1  52eb					      SUBROUTINE
      2  52eb		       bc 14 f0 	      ldy	ValidSquare+_LEFT,x
      3  52ee		       30 0c		      bmi	.invalid
      4  52f0		       b9 79 f0 	      lda	Board,y
      5  52f3		       f0 04		      beq	.squareEmpty
      6  52f5		       45 92		      eor	currentPiece
      7  52f7		       10 03		      bpl	.invalid
      8  52f9		       20 69 fb    .squareEmpty jsr	AddMove
      9  52fc				   .invalid
     86  52fc
     87  52fc		       24 92		      bit	currentPiece
     88  52fe		       70 47		      bvs	.exit	; king has moved, so no castling
     89  5300
      0  5300					      CASTLE	KINGSIDE
      1  5300
      2  5300
      3  5300		       a6 93		      ldx	currentSquare
      4  5302		       bd 7c f0 	      lda	Board+KINGSIDE,x
      5  5305		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5307		       c9 05		      cmp	#ROOK
      7  5309		       d0 16		      bne	.noCastle
      8  530b
      9  530b
     10  530b
     11  530b
     12  530b				  -	      IF	KINGSIDE = QUEENSIDE
     13  530b				  -	      lda	Board-3,x
     14  530b				  -	      bne	.noCastle
     15  530b				  -	      lda	Board-2,x
     16  530b				  -	      bne	.noCastle
     17  530b				  -	      lda	Board-1,x
     18  530b				  -	      bne	.noCastle
     19  530b				  -
     20  530b					      ENDIF
     21  530b
     22  530b					      IF	KINGSIDE = KINGSIDE
     23  530b		       bd 7b f0 	      lda	Board+2,x
     24  530e		       d0 11		      bne	.noCastle
     25  5310		       bd 7a f0 	      lda	Board+1,x
     26  5313		       d0 0c		      bne	.noCastle
     27  5315					      ENDIF
     28  5315
     29  5315
     30  5315
     31  5315
     32  5315
     33  5315
     34  5315
     35  5315
     36  5315		       a5 92		      lda	currentPiece
     37  5317		       09 10		      ora	#FLAG_CASTLE
     38  5319		       85 92		      sta	currentPiece
     39  531b
     40  531b					      IF	KINGSIDE = KINGSIDE
     41  531b		       bc 17 f0 	      ldy	ValidSquare+2,x
     42  531e					      ENDIF
     43  531e
     44  531e				  -	      IF	KINGSIDE = QUEENSIDE
     45  531e				  -	      ldy	ValidSquare-2,x
     46  531e					      ENDIF
     47  531e
     48  531e		       20 69 fb 	      jsr	AddMove
     49  5321
     50  5321				   .noCastle
      0  5321					      CASTLE	QUEENSIDE
      1  5321
      2  5321
      3  5321		       a6 93		      ldx	currentSquare
      4  5323		       bd 75 f0 	      lda	Board+QUEENSIDE,x
      5  5326		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5328		       c9 05		      cmp	#ROOK
      7  532a		       d0 1b		      bne	.noCastle
      8  532c
      9  532c
     10  532c
     11  532c
     12  532c					      IF	QUEENSIDE = QUEENSIDE
     13  532c		       bd 76 f0 	      lda	Board-3,x
     14  532f		       d0 16		      bne	.noCastle
     15  5331		       bd 77 f0 	      lda	Board-2,x
     16  5334		       d0 11		      bne	.noCastle
     17  5336		       bd 78 f0 	      lda	Board-1,x
     18  5339		       d0 0c		      bne	.noCastle
     19  533b
     20  533b					      ENDIF
     21  533b
     22  533b				  -	      IF	QUEENSIDE = KINGSIDE
     23  533b				  -	      lda	Board+2,x
     24  533b				  -	      bne	.noCastle
     25  533b				  -	      lda	Board+1,x
     26  533b				  -	      bne	.noCastle
     27  533b					      ENDIF
     28  533b
     29  533b
     30  533b
     31  533b
     32  533b
     33  533b
     34  533b
     35  533b
     36  533b		       a5 92		      lda	currentPiece
     37  533d		       09 10		      ora	#FLAG_CASTLE
     38  533f		       85 92		      sta	currentPiece
     39  5341
     40  5341				  -	      IF	QUEENSIDE = KINGSIDE
     41  5341				  -	      ldy	ValidSquare+2,x
     42  5341					      ENDIF
     43  5341
     44  5341					      IF	QUEENSIDE = QUEENSIDE
     45  5341		       bc 13 f0 	      ldy	ValidSquare-2,x
     46  5344					      ENDIF
     47  5344
     48  5344		       20 69 fb 	      jsr	AddMove
     49  5347
     50  5347				   .noCastle
     92  5347
     93  5347		       4c c9 f9    .exit      jmp	MoveReturn
     94  534a
     95  534a							;---------------------------------------------------------------------------------------------------
     96  534a							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  534a					      include	"Handler_KNIGHT.asm"
      1  534a							; Copyright (C)2020 Andrew Davie
      2  534a							; Knight move handler
      3  534a
      4  534a							;---------------------------------------------------------------------------------------------------
      5  534a							; KNIGHT
      6  534a							;---------------------------------------------------------------------------------------------------
      7  534a
      0  534a					      DEF	Handle_KNIGHT
      1  534a				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  534a				   Handle_KNIGHT
      3  534a				   TEMPORARY_VAR SET	Overlay
      4  534a				   TEMPORARY_OFFSET SET	0
      5  534a					      SUBROUTINE
      9  534a					      SUBROUTINE
     10  534a
     11  534a							; x = currentSquare (square the piece is on)
     12  534a							; currentPiece (with flags/colour attached)
     13  534a
      0  534a					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  534a					      SUBROUTINE
      2  534a		       bc 00 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  534d		       30 0c		      bmi	.invalid
      4  534f		       b9 79 f0 	      lda	Board,y
      5  5352		       f0 04		      beq	.squareEmpty
      6  5354		       45 92		      eor	currentPiece
      7  5356		       10 03		      bpl	.invalid
      8  5358		       20 69 fb    .squareEmpty jsr	AddMove
      9  535b				   .invalid
      0  535b					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  535b		       a6 93		      ldx	currentSquare
      0  535d					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  535d					      SUBROUTINE
      2  535d		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  5360		       30 0c		      bmi	.invalid
      4  5362		       b9 79 f0 	      lda	Board,y
      5  5365		       f0 04		      beq	.squareEmpty
      6  5367		       45 92		      eor	currentPiece
      7  5369		       10 03		      bpl	.invalid
      8  536b		       20 69 fb    .squareEmpty jsr	AddMove
      9  536e				   .invalid
      0  536e					      MOVE_TO_X	_UP+_UP+_LEFT
      1  536e		       a6 93		      ldx	currentSquare
      0  5370					      MOVE_TO	_UP+_UP+_LEFT
      1  5370					      SUBROUTINE
      2  5370		       bc 28 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  5373		       30 0c		      bmi	.invalid
      4  5375		       b9 79 f0 	      lda	Board,y
      5  5378		       f0 04		      beq	.squareEmpty
      6  537a		       45 92		      eor	currentPiece
      7  537c		       10 03		      bpl	.invalid
      8  537e		       20 69 fb    .squareEmpty jsr	AddMove
      9  5381				   .invalid
      0  5381					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  5381		       a6 93		      ldx	currentSquare
      0  5383					      MOVE_TO	_UP+_UP+_RIGHT
      1  5383					      SUBROUTINE
      2  5383		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  5386		       30 0c		      bmi	.invalid
      4  5388		       b9 79 f0 	      lda	Board,y
      5  538b		       f0 04		      beq	.squareEmpty
      6  538d		       45 92		      eor	currentPiece
      7  538f		       10 03		      bpl	.invalid
      8  5391		       20 69 fb    .squareEmpty jsr	AddMove
      9  5394				   .invalid
     18  5394
      0  5394					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  5394		       a6 93		      ldx	currentSquare
      0  5396					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  5396					      SUBROUTINE
      2  5396		       bc 09 f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  5399		       30 0c		      bmi	.invalid
      4  539b		       b9 79 f0 	      lda	Board,y
      5  539e		       f0 04		      beq	.squareEmpty
      6  53a0		       45 92		      eor	currentPiece
      7  53a2		       10 03		      bpl	.invalid
      8  53a4		       20 69 fb    .squareEmpty jsr	AddMove
      9  53a7				   .invalid
      0  53a7					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  53a7		       a6 93		      ldx	currentSquare
      0  53a9					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  53a9					      SUBROUTINE
      2  53a9		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  53ac		       30 0c		      bmi	.invalid
      4  53ae		       b9 79 f0 	      lda	Board,y
      5  53b1		       f0 04		      beq	.squareEmpty
      6  53b3		       45 92		      eor	currentPiece
      7  53b5		       10 03		      bpl	.invalid
      8  53b7		       20 69 fb    .squareEmpty jsr	AddMove
      9  53ba				   .invalid
      0  53ba					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  53ba		       a6 93		      ldx	currentSquare
      0  53bc					      MOVE_TO	_UP+_LEFT+_LEFT
      1  53bc					      SUBROUTINE
      2  53bc		       bc 1d f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  53bf		       30 0c		      bmi	.invalid
      4  53c1		       b9 79 f0 	      lda	Board,y
      5  53c4		       f0 04		      beq	.squareEmpty
      6  53c6		       45 92		      eor	currentPiece
      7  53c8		       10 03		      bpl	.invalid
      8  53ca		       20 69 fb    .squareEmpty jsr	AddMove
      9  53cd				   .invalid
      0  53cd					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  53cd		       a6 93		      ldx	currentSquare
      0  53cf					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  53cf					      SUBROUTINE
      2  53cf		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  53d2		       30 0c		      bmi	.invalid
      4  53d4		       b9 79 f0 	      lda	Board,y
      5  53d7		       f0 04		      beq	.squareEmpty
      6  53d9		       45 92		      eor	currentPiece
      7  53db		       10 03		      bpl	.invalid
      8  53dd		       20 69 fb    .squareEmpty jsr	AddMove
      9  53e0				   .invalid
     23  53e0
     24  53e0		       4c c9 f9 	      jmp	MoveReturn
     25  53e3
     26  53e3							; EOF
------- FILE Handler_BANK1.asm
    107  53e3
    108  53e3
    109  53e3							;---------------------------------------------------------------------------------------------------
    110  53e3
      0  53e3					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  53e3
      2  53e3
      3  53e3		       03 e3	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3e3 , FREE= $1d
      4  53e3					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  53e3				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  53e3				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  53e3				  -	      ERR
      8  53e3					      endif
    112  53e3
    113  53e3
    114  53e3							; There is space here (1K) for use as ROM
    115  53e3							; but NOT when the above bank is switched in as RAM, of course!
    116  53e3
    117  53e3
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  53e3					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  53e3					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_0", 72
     12  5400					      LIST	ON
      0  5400					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_0
      1  5400				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  5400				   WHITE_PROMOTE_on_BLACK_SQUARE_0
      3  5400				   TEMPORARY_VAR SET	Overlay
      4  5400				   TEMPORARY_OFFSET SET	0
      5  5400					      SUBROUTINE
      3  5400		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  5418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  5448					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  5448					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_1", 72
     12  5448					      LIST	ON
      0  5448					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_1
      1  5448				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  5448				   WHITE_PROMOTE_on_BLACK_SQUARE_1
      3  5448				   TEMPORARY_VAR SET	Overlay
      4  5448				   TEMPORARY_OFFSET SET	0
      5  5448					      SUBROUTINE
      3  5448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5460		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  5478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  5490					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  5490					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_2", 72
     12  5490					      LIST	ON
      0  5490					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_2
      1  5490				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  5490				   WHITE_PROMOTE_on_BLACK_SQUARE_2
      3  5490				   TEMPORARY_VAR SET	Overlay
      4  5490				   TEMPORARY_OFFSET SET	0
      5  5490					      SUBROUTINE
      3  5490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  54a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  54c0		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  54d8					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  54d8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_3", 72
     12  5500					      LIST	ON
      0  5500					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_3
      1  5500				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  5500				   WHITE_PROMOTE_on_BLACK_SQUARE_3
      3  5500				   TEMPORARY_VAR SET	Overlay
      4  5500				   TEMPORARY_OFFSET SET	0
      5  5500					      SUBROUTINE
      3  5500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5530		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  5548					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  5548					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_0", 72
     12  5548					      LIST	ON
      0  5548					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_0
      1  5548				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  5548				   WHITE_PROMOTE_on_WHITE_SQUARE_0
      3  5548				   TEMPORARY_VAR SET	Overlay
      4  5548				   TEMPORARY_OFFSET SET	0
      5  5548					      SUBROUTINE
      3  5548		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  5590					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  5590					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_1", 72
     12  5590					      LIST	ON
      0  5590					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_1
      1  5590				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  5590				   WHITE_PROMOTE_on_WHITE_SQUARE_1
      3  5590				   TEMPORARY_VAR SET	Overlay
      4  5590				   TEMPORARY_OFFSET SET	0
      5  5590					      SUBROUTINE
      3  5590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  55a8		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  55c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  55d8					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  55d8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_2", 72
     12  5600					      LIST	ON
      0  5600					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_2
      1  5600				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  5600				   WHITE_PROMOTE_on_WHITE_SQUARE_2
      3  5600				   TEMPORARY_VAR SET	Overlay
      4  5600				   TEMPORARY_OFFSET SET	0
      5  5600					      SUBROUTINE
      3  5600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5630		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  5648					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  5648					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_3", 72
     12  5648					      LIST	ON
      0  5648					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_3
      1  5648				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  5648				   WHITE_PROMOTE_on_WHITE_SQUARE_3
      3  5648				   TEMPORARY_VAR SET	Overlay
      4  5648				   TEMPORARY_OFFSET SET	0
      5  5648					      SUBROUTINE
      3  5648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5678		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
    126  5690
    127  5690							;---------------------------------------------------------------------------------------------------
    128  5690
      0  5690					      CHECK_BANK_SIZE	"HANDLER_BANK_1 -- full 2K"
      1  5690		       06 90	   .TEMP      =	* - BANK_START
 HANDLER_BANK_1 -- full 2K (2K) SIZE =  $690 , FREE= $170
      2  5690					      ECHO	"HANDLER_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  5690				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  5690				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  5690				  -	      ERR
      6  5690					      endif
    130  5690
    131  5690							;---------------------------------------------------------------------------------------------------
    132  5690							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 2
      0  5690					      include	"ply.asm"
      1  5690							; Copyright (C)2020 Andrew Davie
      2  5690							; andrew@taswegian.com
      3  5690
      4  5690
      5  5690							;---------------------------------------------------------------------------------------------------
      6  5690							; Define the RAM banks
      7  5690							; A "PLY" bank represents all the data required on any single ply of the search tree.
      8  5690							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      9  5690							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
     10  5690							; they act as independant switchable banks usable for data on each ply during the search.
     11  5690							; A ply will hold the move list for that position
     12  5690
     13  5690
     14  5690		       00 06	   MAX_PLY    =	6
      0  5690					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  5690
      2  5690
      3  5690
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     18 U3800					      REPEND
     19 U3800
     20 U3800
     21 U3800							;---------------------------------------------------------------------------------------------------
     22 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     23 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  5bc3 ????				      SEG	BANK_PLY
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   BANK_PLY   SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	BANK_PLY
     25  5800
     26  5800							;---------------------------------------------------------------------------------------------------
     27  5800							; The piece-lists
     28  5800							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     29  5800							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     30  5800							; but this needs to be initialised programatically on new game.
     31  5800
     32  5800							; We have TWO piecelists, in different banks
     33  5800							; WHITE pieces in bank BANK_PLY
     34  5800							; BLACK pieces in bank BANK_PLY+1
     35  5800
     36  5800
     37  5800		       7f ff	   INFINITY   =	32767
     38  5800
     39  5800
      0  5800					      VARIABLE	SortedPieceList, 16	; indexes into PieceSquare, etc. NEG = no piece
      0  5800					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5800					      LIST	ON
      2  5800		       00 00 00 00*SortedPieceList ds	16
      0  5810					      VARIABLE	PieceSquare, 16
      0  5810					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5810					      LIST	ON
      2  5810		       00 00 00 00*PieceSquare ds	16
      0  5820					      VARIABLE	PieceType, 16
      0  5820					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5820					      LIST	ON
      2  5820		       00 00 00 00*PieceType  ds	16
      0  5830					      VARIABLE	PieceMaterialValueLO, 16
      0  5830					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5830					      LIST	ON
      2  5830		       00 00 00 00*PieceMaterialValueLO ds	16
      0  5840					      VARIABLE	PieceMaterialValueHI, 16
      0  5840					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5840					      LIST	ON
      2  5840		       00 00 00 00*PieceMaterialValueHI ds	16
      0  5850					      VARIABLE	PiecePositionValueLO, 16
      0  5850					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5850					      LIST	ON
      2  5850		       00 00 00 00*PiecePositionValueLO ds	16
      0  5860					      VARIABLE	PiecePositionValueHI, 16
      0  5860					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5860					      LIST	ON
      2  5860		       00 00 00 00*PiecePositionValueHI ds	16
      0  5870					      VARIABLE	PieceListPtr, 1
      0  5870					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  5870					      LIST	ON
      2  5870		       00	   PieceListPtr ds	1
      0  5871					      VARIABLE	plyValue, 2	; 16-bit signed score value from alphabeta
      0  5871					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  5871					      LIST	ON
      2  5871		       00 00	   plyValue   ds	2
      0  5873					      VARIABLE	bestMove, 1	; index of move (-1 = none)
      0  5873					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  5873					      LIST	ON
      2  5873		       00	   bestMove   ds	1
      0  5874					      VARIABLE	SavedEvaluation, 2	; THIS node's evaluation - used for reverting moves!
      0  5874					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  5874					      LIST	ON
      2  5874		       00 00	   SavedEvaluation ds	2
     51  5876
     52  5876
     53  5876							;---------------------------------------------------------------------------------------------------
     54  5876
     55  5876		       00 78	   MAX_MOVES  =	120
     56  5876
      0  5876					      VARIABLE	MoveFrom, MAX_MOVES
      0  5876					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     12  5876					      LIST	ON
      2  5876		       00 00 00 00*MoveFrom   ds	MAX_MOVES
      0  58ee					      VARIABLE	MoveTo, MAX_MOVES
      0  58ee					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     12  5900					      LIST	ON
      2  5900		       00 00 00 00*MoveTo     ds	MAX_MOVES
      0  5978					      VARIABLE	MovePiece, MAX_MOVES
      0  5978					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     12  5978					      LIST	ON
      2  5978		       00 00 00 00*MovePiece  ds	MAX_MOVES
     60  59f0
     61  59f0
     62  59f0							;---------------------------------------------------------------------------------------------------
     63  59f0
     64  59f0							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
     65  59f0							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
     66  59f0
      0  59f0					      VARIABLE	enPassantSquare, 1
      0  59f0					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59f0					      LIST	ON
      2  59f0		       00	   enPassantSquare ds	1
     68  59f1
     69  59f1
     70  59f1							;---------------------------------------------------------------------------------------------------
     71  59f1							; Move tables hold piece moves for this current ply
     72  59f1
      0  59f1					      VARIABLE	moveIndex, 1	; points to first available 'slot' for move storage
      0  59f1					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59f1					      LIST	ON
      2  59f1		       00	   moveIndex  ds	1
     74  59f2
     75  59f2
     76  59f2							;---------------------------------------------------------------------------------------------------
     77  59f2
     78  59f2
     79  59f2				  -	      if	0
     80  59f2				  -			; reverting a move
     81  59f2				  -			; from/to/piece/toOriginal
     82  59f2				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     83  59f2				  -			; en-passant
     84  59f2				  -
     85  59f2				  -from/to/piece
     86  59f2				  -
     87  59f2				  -
     88  59f2				  -from       =	piece
     89  59f2				  -to	      =	originalPiece
     90  59f2				  -from2      =	piece2
     91  59f2				  -to2	      =	originalPiece2
     92  59f2				  -
     93  59f2				  -
     94  59f2				  -
     95  59f2				  -so,	      normal	move (N)
     96  59f2				  -
     97  59f2				  -B1	      =	knight
     98  59f2				  -C3	      =	blank
     99  59f2				  -null/null
    100  59f2				  -
    101  59f2				  -pawn       promot	with capture
    102  59f2				  -A7	      =	WP
    103  59f2				  -B8	      =	BLACK_ROOK
    104  59f2				  -
    105  59f2				  -
    106  59f2				  -castle
    107  59f2				  -E1	      =	king
    108  59f2				  -G1	      =	blank
    109  59f2				  -H1	      =	rook
    110  59f2				  -F1	      =	blank
    111  59f2				  -
    112  59f2				  -
    113  59f2				  -en-passant
    114  59f2				  -B4	      =	P
    115  59f2				  -A3	      =	blank
    116  59f2				  -A4	      =	P
    117  59f2				  -A3	      =	blank
    118  59f2				  -
    119  59f2				  -FROM
    120  59f2				  -TO
    121  59f2				  -CAPTURED_PIECE
    122  59f2				  -ORIG_PIECE
    123  59f2				  -FROM2
    124  59f2				  -TO2
    125  59f2				  -PIECE2
    126  59f2				  -
    127  59f2				  -board[FROM] =	ORIG_PIECE
    128  59f2				  -board[TO]  =	CAPTURED_PIECE
    129  59f2				  -
    130  59f2				  -value      =	-new_piece + orig_piece - captured_piece
    131  59f2				  -
    132  59f2				  -
    133  59f2					      endif
    134  59f2
    135  59f2
    136  59f2
    137  59f2							;---------------------------------------------------------------------------------------------------
    138  59f2
      0  59f2					      DEF	InitPieceLists
      1  59f2				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  59f2				   InitPieceLists
      3  59f2				   TEMPORARY_VAR SET	Overlay
      4  59f2				   TEMPORARY_OFFSET SET	0
      5  59f2					      SUBROUTINE
    140  59f2					      SUBROUTINE
    141  59f2
    142  59f2		       a9 ff		      lda	#-1
    143  59f4		       8d 70 f4 	      sta	PieceListPtr+RAM_WRITE
    144  59f7
    145  59f7		       a2 0f		      ldx	#15
    146  59f9		       a9 00		      lda	#0
    147  59fb		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    148  59fe		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    149  5a01		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    150  5a04		       ca		      dex
    151  5a05		       10 f4		      bpl	.clearLists
    152  5a07
    153  5a07
    154  5a07							; TODO: move the following as they're called 2x due to double-call of InitPiecLists
    155  5a07
    156  5a07		       85 90		      sta	Evaluation
    157  5a09		       85 91		      sta	Evaluation+1	; tracks CURRENT value of everything (signed 16-bit)
    158  5a0b
    159  5a0b
    160  5a0b							; General inits that are moved out of FIXED....
    161  5a0b
    162  5a0b		       a9 07		      lda	#%111	; 111= quad
    163  5a0d		       85 44		      sta	NUSIZ0
    164  5a0f		       85 45		      sta	NUSIZ1	; quad-width
    165  5a11
    166  5a11		       a9 04		      lda	#%00000100
    167  5a13		       85 4a		      sta	CTRLPF
    168  5a15		       a9 00		      lda	#BACKGCOL
    169  5a17		       85 49		      sta	COLUBK
    170  5a19
      0  5a19					      PHASE	AI_StartClearBoard
      1  5a19		       a9 0d		      lda	#AI_StartClearBoard
      2  5a1b		       85 8c		      sta	aiState
    172  5a1d		       60		      rts
    173  5a1e
    174  5a1e
    175  5a1e							;---------------------------------------------------------------------------------------------------
    176  5a1e
    177  5a1e					      if	ASSERTS
    178  5a1e
      0  5a1e					      DEF	checkPiecesBank
      1  5a1e				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  5a1e				   checkPiecesBank
      3  5a1e				   TEMPORARY_VAR SET	Overlay
      4  5a1e				   TEMPORARY_OFFSET SET	0
      5  5a1e					      SUBROUTINE
    180  5a1e					      SUBROUTINE
    181  5a1e
      0  5a1e					      VAR	__x, 1
      1  5a1e				   __x	      SET	TEMPORARY_VAR
      2  5a1e				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  5a1e
      4  5a1e				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  5a1e				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  5a1e				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  5a1e					      ENDIF
      8  5a1e				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  5a1e				  -	      ECHO	"Temporary Variable", __x, "overflow!"
     10  5a1e				  -	      ERR
     11  5a1e					      ENDIF
     12  5a1e					      LIST	ON
      0  5a1e					      VAR	__bank, 1
      1  5a1e				   __bank     SET	TEMPORARY_VAR
      2  5a1e				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  5a1e
      4  5a1e				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  5a1e				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  5a1e				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  5a1e					      ENDIF
      8  5a1e				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  5a1e				  -	      ECHO	"Temporary Variable", __bank, "overflow!"
     10  5a1e				  -	      ERR
     11  5a1e					      ENDIF
     12  5a1e					      LIST	ON
    184  5a1e
    185  5a1e							; odd usage - switches between concurrent bank code
    186  5a1e
    187  5a1e		       a2 0f		      ldx	#15
    188  5a20		       a5 9d	   .check     lda	__bank
    189  5a22		       85 3e		      sta	SET_BANK_RAM
    190  5a24		       bc 10 f0 	      ldy	PieceSquare,x
    191  5a27		       f0 0d		      beq	.nonehere
    192  5a29
    193  5a29		       86 9c		      stx	__x
    194  5a2b
    195  5a2b		       20 2d fc 	      jsr	GetBoard
    196  5a2e		       f0 fe	   .fail      beq	.fail
    197  5a30		       c9 ff		      cmp	#-1
    198  5a32		       f0 fe	   .fail2     beq	.fail2
    199  5a34
    200  5a34		       a6 9c		      ldx	__x
    201  5a36
    202  5a36		       ca	   .nonehere  dex
    203  5a37		       10 e7		      bpl	.check
    204  5a39		       60		      rts
    205  5a3a
    206  5a3a					      endif
    207  5a3a
    208  5a3a
    209  5a3a							;---------------------------------------------------------------------------------------------------
    210  5a3a
    211  5a3a					      if	ASSERTS
    212  5a3a
      0  5a3a					      DEF	DIAGNOSTIC_checkPieces
      1  5a3a				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  5a3a				   DIAGNOSTIC_checkPieces
      3  5a3a				   TEMPORARY_VAR SET	Overlay
      4  5a3a				   TEMPORARY_OFFSET SET	0
      5  5a3a					      SUBROUTINE
    214  5a3a					      SUBROUTINE
    215  5a3a
    216  5a3a							; SAFE call
    217  5a3a							; DIAGNOSTIC ONLY
    218  5a3a							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    219  5a3a
    220  5a3a		       a9 09		      lda	#RAMBANK_PLY
    221  5a3c		       85 9d		      sta	__bank
    222  5a3e		       20 1e f2 	      jsr	checkPiecesBank
    223  5a41		       e6 9d		      inc	__bank
    224  5a43		       20 1e f2 	      jsr	checkPiecesBank
    225  5a46		       60		      rts
    226  5a47
    227  5a47					      endif
    228  5a47
    229  5a47
    230  5a47							;---------------------------------------------------------------------------------------------------
    231  5a47
    232  5a47				   InitPieceList
    233  5a47
------- FILE setup_board.asm LEVEL 3 PASS 2
      0  5a47					      include	"setup_board.asm"
      1  5a47					      if	!TEST_POSITION
      2  5a47
      3  5a47		       06 19		      .byte.b	WHITE|Q, 25
      4  5a49		       04 18		      .byte.b	WHITE|B, 24
      5  5a4b		       04 1b		      .byte.b	WHITE|B, 27
      6  5a4d		       05 16		      .byte.b	WHITE|R, 22
      7  5a4f		       05 1d		      .byte.b	WHITE|R, 29
      8  5a51		       03 17		      .byte.b	WHITE|N, 23
      9  5a53		       03 1c		      .byte.b	WHITE|N, 28
     10  5a55
     11  5a55		       01 23		      .byte.b	WHITE|WP, 35
     12  5a57		       01 24		      .byte.b	WHITE|WP, 36
     13  5a59		       01 22		      .byte.b	WHITE|WP, 34
     14  5a5b		       01 25		      .byte.b	WHITE|WP, 37
     15  5a5d		       01 21		      .byte.b	WHITE|WP, 33
     16  5a5f		       01 26		      .byte.b	WHITE|WP, 38
     17  5a61		       01 20		      .byte.b	WHITE|WP, 32
     18  5a63		       01 27		      .byte.b	WHITE|WP, 39
     19  5a65
     20  5a65		       07 1a		      .byte.b	WHITE|K, 26
     21  5a67
     22  5a67		       86 5f		      .byte.b	BLACK|Q, 95
     23  5a69		       84 5e		      .byte.b	BLACK|B, 94
     24  5a6b		       84 61		      .byte.b	BLACK|B, 97
     25  5a6d		       85 5c		      .byte.b	BLACK|R, 92
     26  5a6f		       85 63		      .byte.b	BLACK|R, 99
     27  5a71		       83 5d		      .byte.b	BLACK|N, 93
     28  5a73		       83 62		      .byte.b	BLACK|N, 98
     29  5a75
     30  5a75		       82 55		      .byte.b	BLACK|BP, 85
     31  5a77		       82 56		      .byte.b	BLACK|BP, 86
     32  5a79		       82 54		      .byte.b	BLACK|BP, 84
     33  5a7b		       82 57		      .byte.b	BLACK|BP, 87
     34  5a7d		       82 53		      .byte.b	BLACK|BP, 83
     35  5a7f		       82 58		      .byte.b	BLACK|BP, 88
     36  5a81		       82 52		      .byte.b	BLACK|BP, 82
     37  5a83		       82 59		      .byte.b	BLACK|BP, 89
     38  5a85
     39  5a85		       87 60		      .byte.b	BLACK|K, 96
     40  5a87
     41  5a87		       00		      .byte.b	0	;end
     42  5a88
     43  5a88				  -	      else		; test position...
     44  5a88				  -
     45  5a88				  -	      .byte	WHITE|WP, 57
     46  5a88				  -			;.byte BLACK|BP, 88
     47  5a88				  -	      .byte	BLACK|BP, 86
     48  5a88				  -
     49  5a88				  -
     50  5a88				  -	      .byte	0	;end
     51  5a88				  -
     52  5a88					      endif
------- FILE ply.asm
    235  5a88
    236  5a88
    237  5a88							;---------------------------------------------------------------------------------------------------
    238  5a88
      0  5a88					      DEF	NewPlyInitialise
      1  5a88				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  5a88				   NewPlyInitialise
      3  5a88				   TEMPORARY_VAR SET	Overlay
      4  5a88				   TEMPORARY_OFFSET SET	0
      5  5a88					      SUBROUTINE
    240  5a88					      SUBROUTINE
    241  5a88
    242  5a88							; This MUST be called at the start of a new ply
    243  5a88							; It initialises the movelist to empty
    244  5a88
    245  5a88		       a2 ff		      ldx	#-1
    246  5a8a		       8e f1 f5 	      stx	moveIndex+RAM_WRITE	; no valid moves
    247  5a8d		       8d 73 f4 	      sta	bestMove+RAM_WRITE
    248  5a90
    249  5a90		       a5 94		      lda	enPassantPawn	; flag/square from last actual move made
    250  5a92		       8d f0 f5 	      sta	enPassantSquare+RAM_WRITE	; used for backtracking, to reset the flag
    251  5a95
    252  5a95							; The evaluation of the current position is a signed 16-bit number
    253  5a95							; +ve is good for the current side.
    254  5a95							; This is used during the alpha-beta search for finding best position
    255  5a95							; Note, this is not the same as the 'Evaluation' which is the current value at ply -- it is the
    256  5a95							; alphabeta best/worst value of the node!!
    257  5a95
    258  5a95		       a9 01		      lda	#<(-INFINITY)
    259  5a97		       8d 71 f4 	      sta	plyValue+RAM_WRITE
    260  5a9a		       a9 80		      lda	#>(-INFINITY)
    261  5a9c		       8d 72 f4 	      sta	plyValue+RAM_WRITE+1
    262  5a9f
    263  5a9f							; The value of the material (signed, 16-bit) is restored to the saved value at the reversion
    264  5a9f							; of a move. It's quicker to restore than to re-sum. So we save the current evaluation at the
    265  5a9f							; start of each new ply.
    266  5a9f
    267  5a9f		       a5 90		      lda	Evaluation
    268  5aa1		       8d 74 f4 	      sta	SavedEvaluation+RAM_WRITE
    269  5aa4		       a5 91		      lda	Evaluation+1
    270  5aa6		       8d 75 f4 	      sta	SavedEvaluation+RAM_WRITE+1
    271  5aa9
    272  5aa9		       a9 0f		      lda	#15
    273  5aab		       85 96		      sta	piecelistIndex	; move traversing
    274  5aad
    275  5aad		       60		      rts
    276  5aae
    277  5aae
    278  5aae							;---------------------------------------------------------------------------------------------------
    279  5aae
    280  5aae					      SUBROUTINE
    281  5aae
    282  5aae		       86 96	   GenerateNextPiece stx	piecelistIndex
    283  5ab0		       85 93		      sta	currentSquare
    284  5ab2		       20 a6 f9 	      jsr	MoveForSinglePiece
    285  5ab5
    286  5ab5		       c6 96		      dec	piecelistIndex
    287  5ab7		       30 1e		      bmi	.exit
    288  5ab9
      0  5ab9					      DEF	GenerateMovesForNextPiece
      1  5ab9				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  5ab9				   GenerateMovesForNextPiece
      3  5ab9				   TEMPORARY_VAR SET	Overlay
      4  5ab9				   TEMPORARY_OFFSET SET	0
      5  5ab9					      SUBROUTINE
    290  5ab9
    291  5ab9		       ad 84 02 	      lda	INTIM
    292  5abc		       c9 16		      cmp	#22
    293  5abe		       90 17		      bcc	.exit
    294  5ac0
    295  5ac0		       a5 97		      lda	sideToMove
    296  5ac2		       0a		      asl
    297  5ac3		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    298  5ac5		       69 00		      adc	#0
    299  5ac7		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    300  5ac9
    301  5ac9		       a6 96		      ldx	piecelistIndex
    302  5acb		       30 fe	   kk	      bmi	kk
    303  5acd		       bd 10 f0    .next      lda	PieceSquare,x
    304  5ad0		       d0 dc		      bne	GenerateNextPiece
    305  5ad2		       ca		      dex
    306  5ad3		       10 f8		      bpl	.next
    307  5ad5
    308  5ad5		       86 96		      stx	piecelistIndex
    309  5ad7		       60	   .exit      rts
    310  5ad8
    311  5ad8
    312  5ad8
    313  5ad8							;---------------------------------------------------------------------------------------------------
    314  5ad8
      0  5ad8					      DEF	FixPieceList
      1  5ad8				   BANK_FixPieceList SET	_CURRENT_BANK
      2  5ad8				   FixPieceList
      3  5ad8				   TEMPORARY_VAR SET	Overlay
      4  5ad8				   TEMPORARY_OFFSET SET	0
      5  5ad8					      SUBROUTINE
    316  5ad8					      SUBROUTINE
    317  5ad8
    318  5ad8							; originX12	      X12 square piece moved from
    319  5ad8							; toX12	      X12 square piece moved to (0 to erase piece from list)
    320  5ad8
    321  5ad8							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    322  5ad8							; Eventually this will have to be more sophisticated when moves (like castling) involve
    323  5ad8							; more than one piece.
    324  5ad8
    325  5ad8							; TODO: this is slow and should use a pointer to pieces instead
    326  5ad8
    327  5ad8
    328  5ad8		       a2 0f		      ldx	#15
    329  5ada		       a5 87		      lda	originX12
    330  5adc		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    331  5adf		       f0 04		      beq	.adjustPiece
    332  5ae1		       ca		      dex
    333  5ae2		       10 f8		      bpl	.pieceCheck
    334  5ae4		       60		      rts
    335  5ae5
    336  5ae5		       a5 86	   .adjustPiece lda	toX12
    337  5ae7		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    338  5aea		       60		      rts
    339  5aeb
    340  5aeb
    341  5aeb							;---------------------------------------------------------------------------------------------------
    342  5aeb
      0  5aeb					      DEF	alphaBeta
      1  5aeb				   BANK_alphaBeta SET	_CURRENT_BANK
      2  5aeb				   alphaBeta
      3  5aeb				   TEMPORARY_VAR SET	Overlay
      4  5aeb				   TEMPORARY_OFFSET SET	0
      5  5aeb					      SUBROUTINE
    344  5aeb					      SUBROUTINE
    345  5aeb
    346  5aeb
    347  5aeb				  -	      if	0
    348  5aeb				  -
    349  5aeb				  -1.	      create	movelist
    350  5aeb				  -2.	      init	score
    351  5aeb				  -
    352  5aeb				  -
    353  5aeb				  -
    354  5aeb				  -
    355  5aeb				  -
    356  5aeb				  -
    357  5aeb				  -
    358  5aeb					      endif
    359  5aeb
    360  5aeb
    361  5aeb
    362  5aeb
    363  5aeb		       60		      rts
    364  5aec
    365  5aec		       e6 95		      inc	currentPly
    366  5aee		       a5 95		      lda	currentPly
    367  5af0
    368  5af0		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    369  5af2		       f0 2f		      beq	.bottomOut	; at a leaf node of the search?
    370  5af4		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    371  5af6
    372  5af6		       a5 97		      lda	sideToMove
    373  5af8		       49 80		      eor	#128
    374  5afa		       85 97		      sta	sideToMove
    375  5afc
    376  5afc		       20 88 f2 	      jsr	NewPlyInitialise
    377  5aff
    378  5aff		       a5 95		      lda	currentPly
    379  5b01		       85 3e		      sta	SET_BANK_RAM
    380  5b03
    381  5b03		       a9 0f		      lda	#15
    382  5b05		       85 96		      sta	piecelistIndex
    383  5b07		       20 b9 f2    iterPieces jsr	GenerateMovesForNextPiece
    384  5b0a		       a5 96		      lda	piecelistIndex
    385  5b0c		       10 f9		      bpl	iterPieces
    386  5b0e
    387  5b0e							; Perform a recursive search
    388  5b0e							; simulate alpha-beta cull to just 7 moves per node
    389  5b0e
    390  5b0e					      REPEAT	7
    391  5b0e							;jsr PhysicallyMovePiece
    392  5b0e							;jsr FinaliseMove
    393  5b0e		       20 eb f2 	      jsr	alphaBeta
    390  5b0e					      REPEND
    391  5b11							;jsr PhysicallyMovePiece
    392  5b11							;jsr FinaliseMove
    393  5b11		       20 eb f2 	      jsr	alphaBeta
    390  5b11					      REPEND
    391  5b14							;jsr PhysicallyMovePiece
    392  5b14							;jsr FinaliseMove
    393  5b14		       20 eb f2 	      jsr	alphaBeta
    390  5b14					      REPEND
    391  5b17							;jsr PhysicallyMovePiece
    392  5b17							;jsr FinaliseMove
    393  5b17		       20 eb f2 	      jsr	alphaBeta
    390  5b17					      REPEND
    391  5b1a							;jsr PhysicallyMovePiece
    392  5b1a							;jsr FinaliseMove
    393  5b1a		       20 eb f2 	      jsr	alphaBeta
    390  5b1a					      REPEND
    391  5b1d							;jsr PhysicallyMovePiece
    392  5b1d							;jsr FinaliseMove
    393  5b1d		       20 eb f2 	      jsr	alphaBeta
    390  5b1d					      REPEND
    391  5b20							;jsr PhysicallyMovePiece
    392  5b20							;jsr FinaliseMove
    393  5b20		       20 eb f2 	      jsr	alphaBeta
    394  5b23					      REPEND
    395  5b23
    396  5b23				   .bottomOut
    397  5b23
    398  5b23							; TODO: evaluate board position
    399  5b23							; reverse move to previous position
    400  5b23							; check the results, update scores and move pointers
    401  5b23							; and return vars to expected
    402  5b23
    403  5b23		       a5 97		      lda	sideToMove
    404  5b25		       49 80		      eor	#128
    405  5b27		       85 97		      sta	sideToMove
    406  5b29
    407  5b29		       c6 95		      dec	currentPly
    408  5b2b		       a5 95		      lda	currentPly
    409  5b2d		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    410  5b2f
    411  5b2f		       60		      rts
    412  5b30
    413  5b30							;---------------------------------------------------------------------------------------------------
    414  5b30
      0  5b30					      DEF	RevertMove
      1  5b30				   BANK_RevertMove SET	_CURRENT_BANK
      2  5b30				   RevertMove
      3  5b30				   TEMPORARY_VAR SET	Overlay
      4  5b30				   TEMPORARY_OFFSET SET	0
      5  5b30					      SUBROUTINE
    416  5b30					      SUBROUTINE
    417  5b30
    418  5b30							; backtrack after a move, restoring things to the way they were
    419  5b30
    420  5b30
    421  5b30							; piecelist
    422  5b30							; piece1, piece2
    423  5b30							; board
    424  5b30							; enpassantpawn
    425  5b30							; materialvalue
    426  5b30							; positionvalue
    427  5b30							; score?
    428  5b30
    429  5b30
    430  5b30							; restore the board evaluation to what it was at the start of this ply
    431  5b30
    432  5b30		       ad 74 f0 	      lda	SavedEvaluation
    433  5b33		       85 90		      sta	Evaluation
    434  5b35		       ad 75 f0 	      lda	SavedEvaluation+1
    435  5b38		       85 91		      sta	Evaluation+1
    436  5b3a
    437  5b3a		       60		      rts
    438  5b3b
    439  5b3b
    440  5b3b							;---------------------------------------------------------------------------------------------------
    441  5b3b
      0  5b3b					      DEF	MoveViaListAtPly
      1  5b3b				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  5b3b				   MoveViaListAtPly
      3  5b3b				   TEMPORARY_VAR SET	Overlay
      4  5b3b				   TEMPORARY_OFFSET SET	0
      5  5b3b					      SUBROUTINE
    443  5b3b					      SUBROUTINE
    444  5b3b
    445  5b3b		       ac f1 f1 	      ldy	moveIndex
    446  5b3e		       30 27		      bmi	.exit	; no valid moves (stalemate if not in check)
    447  5b40
      0  5b40					      NEXT_RANDOM
      1  5b40		       a5 81		      lda	rnd
      2  5b42		       4a		      lsr
      3  5b43		       90 02		      bcc	.skipEOR
      4  5b45		       49 fe		      eor	#RND_EOR_VAL
      5  5b47		       85 81	   .skipEOR   sta	rnd
    449  5b49
    450  5b49							; int(random * # moves) --> a random move #
    451  5b49
    452  5b49		       a9 00		      lda	#0
    453  5b4b		       aa		      tax		; selected move
    454  5b4c		       18		      clc
    455  5b4d		       65 81	   .mulxcc    adc	rnd
    456  5b4f		       90 02		      bcc	.mulx
    457  5b51		       18		      clc
    458  5b52		       e8		      inx
    459  5b53		       88	   .mulx      dey
    460  5b54		       10 f7		      bpl	.mulxcc
    461  5b56
    462  5b56							;    IF ASSERTS
    463  5b56							;    ; Catch illgal move/index
    464  5b56							;		      cpx moveIndex
    465  5b56							;		      beq .ok
    466  5b56							;.whoops	      bcs .whoops
    467  5b56							;.ok
    468  5b56							;    ENDIF
    469  5b56
    470  5b56		       bd 76 f0 	      lda	MoveFrom,x
    471  5b59		       85 85		      sta	fromX12
    472  5b5b		       85 87		      sta	originX12
    473  5b5d
    474  5b5d		       bd 00 f1 	      lda	MoveTo,x
    475  5b60		       85 86		      sta	toX12
    476  5b62
    477  5b62		       bd 78 f1 	      lda	MovePiece,x
    478  5b65							;ora #FLAG_MOVED		 ; prevents usage in castling (for K/R)
    479  5b65		       85 98		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    480  5b67
    481  5b67		       60	   .exit      rts
    482  5b68
    483  5b68
    484  5b68							;---------------------------------------------------------------------------------------------------
    485  5b68
      0  5b68					      DEF	CheckMoveListFromSquare
      1  5b68				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  5b68				   CheckMoveListFromSquare
      3  5b68				   TEMPORARY_VAR SET	Overlay
      4  5b68				   TEMPORARY_OFFSET SET	0
      5  5b68					      SUBROUTINE
    487  5b68					      SUBROUTINE
    488  5b68
    489  5b68							; X12 in A
    490  5b68							; y = -1 on return if NOT FOUND
    491  5b68
    492  5b68		       ac f1 f1 	      ldy	moveIndex
    493  5b6b		       30 08		      bmi	.exit
    494  5b6d
    495  5b6d		       d9 76 f0    .scan      cmp	MoveFrom,y
    496  5b70		       f0 04		      beq	.scanned
    497  5b72		       88		      dey
    498  5b73		       10 f8		      bpl	.scan
    499  5b75		       60	   .exit      rts
    500  5b76
    501  5b76		       b9 78 f1    .scanned   lda	MovePiece,y
    502  5b79		       85 98		      sta	fromPiece
    503  5b7b		       60		      rts
    504  5b7c
    505  5b7c
    506  5b7c							;---------------------------------------------------------------------------------------------------
    507  5b7c
      0  5b7c					      DEF	IsSquareUnderAttack
      1  5b7c				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  5b7c				   IsSquareUnderAttack
      3  5b7c				   TEMPORARY_VAR SET	Overlay
      4  5b7c				   TEMPORARY_OFFSET SET	0
      5  5b7c					      SUBROUTINE
    509  5b7c					      SUBROUTINE
    510  5b7c
    511  5b7c							; Scan the movelist to find if given square is under attack
    512  5b7c
    513  5b7c							; Pass:	 A = X12 square to check
    514  5b7c							; Return:	 CC = no
    515  5b7c
    516  5b7c		       ac f1 f1 	      ldy	moveIndex
    517  5b7f		       30 08		      bmi	.exit
    518  5b81		       d9 00 f1    .scan      cmp	MoveTo,y
    519  5b84		       f0 04		      beq	.found	; YES!
    520  5b86		       88		      dey
    521  5b87		       10 f8		      bpl	.scan
    522  5b89
    523  5b89		       18	   .exit      clc
    524  5b8a		       60	   .found     rts
    525  5b8b
    526  5b8b
    527  5b8b							;---------------------------------------------------------------------------------------------------
    528  5b8b
      0  5b8b					      DEF	GetKingSquare
      1  5b8b				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  5b8b				   GetKingSquare
      3  5b8b				   TEMPORARY_VAR SET	Overlay
      4  5b8b				   TEMPORARY_OFFSET SET	0
      5  5b8b					      SUBROUTINE
    530  5b8b					      SUBROUTINE
    531  5b8b
    532  5b8b							; Return:	 a = square king is on (or -1)
    533  5b8b							;		 x = piece type
    534  5b8b
    535  5b8b		       ac 70 f0 	      ldy	PieceListPtr
    536  5b8e		       30 0c		      bmi	.exit	; no pieces?!
    537  5b90		       b9 20 f0    .find      lda	PieceType,y
    538  5b93		       29 0f		      and	#PIECE_MASK
    539  5b95		       c9 07		      cmp	#KING
    540  5b97		       f0 06		      beq	.found
    541  5b99		       88		      dey
    542  5b9a		       10 f4		      bpl	.find
    543  5b9c
    544  5b9c		       a9 ff	   .exit      lda	#-1	; not found/no king square
    545  5b9e		       60		      rts
    546  5b9f
    547  5b9f		       b9 10 f0    .found     lda	PieceSquare,y
    548  5ba2		       be 20 f0 	      ldx	PieceType,y
    549  5ba5		       60		      rts
    550  5ba6
    551  5ba6
    552  5ba6							;---------------------------------------------------------------------------------------------------
    553  5ba6
      0  5ba6					      DEF	GetPieceGivenFromToSquares
      1  5ba6				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  5ba6				   GetPieceGivenFromToSquares
      3  5ba6				   TEMPORARY_VAR SET	Overlay
      4  5ba6				   TEMPORARY_OFFSET SET	0
      5  5ba6					      SUBROUTINE
    555  5ba6					      SUBROUTINE
    556  5ba6
    557  5ba6							; returns piece in A+fromPiece
    558  5ba6							; or Y=-1 if not found
    559  5ba6
    560  5ba6							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    561  5ba6							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    562  5ba6							; This fixes the move with/without castle flag
    563  5ba6
    564  5ba6		       ac f1 f1 	      ldy	moveIndex
    565  5ba9		       30 11		      bmi	.fail	; shouldn't happen
    566  5bab		       a5 85	   .scan      lda	fromX12
    567  5bad		       d9 76 f0 	      cmp	MoveFrom,y
    568  5bb0		       d0 07		      bne	.next
    569  5bb2		       a5 86		      lda	toX12
    570  5bb4		       d9 00 f1 	      cmp	MoveTo,y
    571  5bb7		       f0 04		      beq	.found
    572  5bb9		       88	   .next      dey
    573  5bba		       10 ef		      bpl	.scan
    574  5bbc		       60	   .fail      rts
    575  5bbd
    576  5bbd		       b9 78 f1    .found     lda	MovePiece,y
    577  5bc0		       85 98		      sta	fromPiece
    578  5bc2		       60		      rts
    579  5bc3
    580  5bc3
    581  5bc3
    582  5bc3							;---------------------------------------------------------------------------------------------------
    583  5bc3
    584  5bc3				  -	      if	0
    585  5bc3				  -	      DEF	CheckMoveListToSquare
    586  5bc3				  -	      SUBROUTINE
    587  5bc3				  -
    588  5bc3				  -			; y = -1 on return if NOT FOUND
    589  5bc3				  -
    590  5bc3				  -	      ldy	moveIndex
    591  5bc3				  -	      bmi	.exit
    592  5bc3				  -.scan      lda	toX12
    593  5bc3				  -	      cmp	MoveTo,y
    594  5bc3				  -	      bne	.xscanned
    595  5bc3				  -	      lda	MoveFrom,y
    596  5bc3				  -	      cmp	fromX12
    597  5bc3				  -	      beq	.exit
    598  5bc3				  -.xscanned  dey
    599  5bc3				  -	      bpl	.scan
    600  5bc3				  -
    601  5bc3				  -.exit      rts
    602  5bc3					      endif
    603  5bc3
    604  5bc3							;---------------------------------------------------------------------------------------------------
    605  5bc3
      0  5bc3					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  5bc3
      2  5bc3
      3  5bc3		       03 c3	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3c3 , FREE= $3d
      4  5bc3					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  5bc3				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  5bc3				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  5bc3				  -	      ERR
      8  5bc3					      endif
    607  5bc3
    608  5bc3							;---------------------------------------------------------------------------------------------------
    609  5bc3
    610  5bc3							; There is space here (1K) for use as ROM
    611  5bc3							; but NOT when the above bank is switched in as RAM, of course!
    612  5bc3
    613  5bc3
    614  5bc3
    615  5bc3
    616  5bc3							;---------------------------------------------------------------------------------------------------
    617  5bc3							; EOF
------- FILE ./chess.asm
------- FILE BANK_EVAL.asm LEVEL 2 PASS 2
      0  5bc3					      include	"BANK_EVAL.asm"
      0  5bc3					      NEWBANK	EVAL
      1  67c8 ????				      SEG	EVAL
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   EVAL       SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	EVAL
      2  6000
      3  6000
      4  6000							; see https://www.chessprogramming.org/Simplified_Evaluation_Function
      5  6000
      6  6000
      7  6000		       00 64	   VALUE_P    =	100
      8  6000		       01 40	   VALUE_N    =	320
      9  6000		       01 4a	   VALUE_B    =	330
     10  6000		       01 f4	   VALUE_R    =	500
     11  6000		       03 84	   VALUE_Q    =	900
     12  6000		       4e 20	   VALUE_K    =	20000
     13  6000
     14  6000
     15  6000					      MAC	vequ
     16  6000				   VALUE_{1}  =	{2}
     17  6000					      ENDM
     18  6000
     19  6000					      MAC	lobyte
     20  6000					      .byte	<{2}
     21  6000					      ENDM
     22  6000
     23  6000					      MAC	hibyte
     24  6000					      .byte	>{2}
     25  6000					      ENDM
     26  6000
     27  6000
     28  6000					      MAC	valuetable
     29  6000					      {1}	BLANK, 0
     30  6000					      {1}	PAWN, 100	; white
     31  6000					      {1}	PAWN, 100	; black
     32  6000					      {1}	KNIGHT, 320
     33  6000					      {1}	BISHOP, 330
     34  6000					      {1}	ROOK, 500
     35  6000					      {1}	QUEEN, 900
     36  6000					      {1}	KING, 20000
     37  6000					      ENDM
     38  6000
     39  6000
      0  6000					      VALUETABLE	VEQU
      0  6000					      VEQU	BLANK, 0
      1  6000		       00 00	   VALUE_BLANK =	0
      0  6000					      VEQU	PAWN, 100
      1  6000		       00 64	   VALUE_PAWN =	100
      0  6000					      VEQU	PAWN, 100
      1  6000		       00 64	   VALUE_PAWN =	100
      0  6000					      VEQU	KNIGHT, 320
      1  6000		       01 40	   VALUE_KNIGHT =	320
      0  6000					      VEQU	BISHOP, 330
      1  6000		       01 4a	   VALUE_BISHOP =	330
      0  6000					      VEQU	ROOK, 500
      1  6000		       01 f4	   VALUE_ROOK =	500
      0  6000					      VEQU	QUEEN, 900
      1  6000		       03 84	   VALUE_QUEEN =	900
      0  6000					      VEQU	KING, 20000
      1  6000		       4e 20	   VALUE_KING =	20000
     41  6000
      0  6000					      DEF	PieceValueLO
      1  6000				   BANK_PieceValueLO SET	_CURRENT_BANK
      2  6000				   PieceValueLO
      3  6000				   TEMPORARY_VAR SET	Overlay
      4  6000				   TEMPORARY_OFFSET SET	0
      5  6000					      SUBROUTINE
      0  6000					      VALUETABLE	LOBYTE
      0  6000					      LOBYTE	BLANK, 0
      1  6000		       00		      .byte.b	<0
      0  6001					      LOBYTE	PAWN, 100
      1  6001		       64		      .byte.b	<100
      0  6002					      LOBYTE	PAWN, 100
      1  6002		       64		      .byte.b	<100
      0  6003					      LOBYTE	KNIGHT, 320
      1  6003		       40		      .byte.b	<320
      0  6004					      LOBYTE	BISHOP, 330
      1  6004		       4a		      .byte.b	<330
      0  6005					      LOBYTE	ROOK, 500
      1  6005		       f4		      .byte.b	<500
      0  6006					      LOBYTE	QUEEN, 900
      1  6006		       84		      .byte.b	<900
      0  6007					      LOBYTE	KING, 20000
      1  6007		       20		      .byte.b	<20000
     44  6008
      0  6008					      DEF	PieceValueHI
      1  6008				   BANK_PieceValueHI SET	_CURRENT_BANK
      2  6008				   PieceValueHI
      3  6008				   TEMPORARY_VAR SET	Overlay
      4  6008				   TEMPORARY_OFFSET SET	0
      5  6008					      SUBROUTINE
      0  6008					      VALUETABLE	HIBYTE
      0  6008					      HIBYTE	BLANK, 0
      1  6008		       00		      .byte.b	>0
      0  6009					      HIBYTE	PAWN, 100
      1  6009		       00		      .byte.b	>100
      0  600a					      HIBYTE	PAWN, 100
      1  600a		       00		      .byte.b	>100
      0  600b					      HIBYTE	KNIGHT, 320
      1  600b		       01		      .byte.b	>320
      0  600c					      HIBYTE	BISHOP, 330
      1  600c		       01		      .byte.b	>330
      0  600d					      HIBYTE	ROOK, 500
      1  600d		       01		      .byte.b	>500
      0  600e					      HIBYTE	QUEEN, 900
      1  600e		       03		      .byte.b	>900
      0  600f					      HIBYTE	KING, 20000
      1  600f		       4e		      .byte.b	>20000
     47  6010
     48  6010
     49  6010							;---------------------------------------------------------------------------------------------------
     50  6010
      0  6010					      DEF	AddPieceMaterialValue
      1  6010				   BANK_AddPieceMaterialValue SET	_CURRENT_BANK
      2  6010				   AddPieceMaterialValue
      3  6010				   TEMPORARY_VAR SET	Overlay
      4  6010				   TEMPORARY_OFFSET SET	0
      5  6010					      SUBROUTINE
     52  6010					      SUBROUTINE
     53  6010
     54  6010							; Adjust the material score based on the piece
     55  6010							; to REMOVE a piece, negate the piece colour!
     56  6010							; y = piece type
     57  6010							; carry C = white, S = black
     58  6010
      0  6010					      VAR	__temp2,2
      1  6010				   __temp2    SET	TEMPORARY_VAR
      2  6010				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  6010
      4  6010				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6010				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6010				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6010					      ENDIF
      8  6010				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6010				  -	      ECHO	"Temporary Variable", __temp2, "overflow!"
     10  6010				  -	      ERR
     11  6010					      ENDIF
     12  6010					      LIST	ON
     60  6010
     61  6010		       b0 0f		      bcs	.black
     62  6012
     63  6012
     64  6012		       b9 00 f0 	      lda	PieceValueLO,y
     65  6015		       65 90		      adc	Evaluation
     66  6017		       85 90		      sta	Evaluation
     67  6019		       b9 08 f0 	      lda	PieceValueHI,y
     68  601c		       65 91		      adc	Evaluation+1
     69  601e		       85 91		      sta	Evaluation+1
     70  6020		       60		      rts
     71  6021
     72  6021		       a5 90	   .black     lda	Evaluation
     73  6023		       f9 00 f0 	      sbc	PieceValueLO,y
     74  6026		       85 90		      sta	Evaluation
     75  6028		       a5 91		      lda	Evaluation+1
     76  602a		       f9 08 f0 	      sbc	PieceValueHI,y
     77  602d		       85 91		      sta	Evaluation+1
     78  602f		       60		      rts
     79  6030
     80  6030
     81  6030							;---------------------------------------------------------------------------------------------------
     82  6030
      0  6030					      DEF	AddPiecePositionValue
      1  6030				   BANK_AddPiecePositionValue SET	_CURRENT_BANK
      2  6030				   AddPiecePositionValue
      3  6030				   TEMPORARY_VAR SET	Overlay
      4  6030				   TEMPORARY_OFFSET SET	0
      5  6030					      SUBROUTINE
     84  6030					      SUBROUTINE
     85  6030
      0  6030					      VAR	__pval, 2
      1  6030				   __pval     SET	TEMPORARY_VAR
      2  6030				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  6030
      4  6030				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6030				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6030				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6030					      ENDIF
      8  6030				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6030				  -	      ECHO	"Temporary Variable", __pval, "overflow!"
     10  6030				  -	      ERR
     11  6030					      ENDIF
     12  6030					      LIST	ON
     87  6030
     88  6030							; y = square
     89  6030							; a = piece type (+flags)
     90  6030
     91  6030		       c9 80		      cmp	#128	; black = CS
     92  6032		       29 0f		      and	#PIECE_MASK
     93  6034		       aa		      tax
     94  6035
     95  6035		       bd cb f0 	      lda	PosValVecLO,x
     96  6038		       85 9c		      sta	__pval
     97  603a		       bd d3 f0 	      lda	PosValVecHI,x
     98  603d		       85 9d		      sta	__pval+1
     99  603f
    100  603f		       b0 12		      bcs	.black
    101  6041
    102  6041		       98		      tya
    103  6042		       0a		      asl
    104  6043		       a8		      tay		; 16 bit values
    105  6044
    106  6044		       18		      clc
    107  6045		       a5 90		      lda	Evaluation
    108  6047		       71 9c		      adc	(__pval),y
    109  6049		       85 90		      sta	Evaluation
    110  604b		       c8		      iny
    111  604c		       a5 91		      lda	Evaluation+1
    112  604e		       71 9c		      adc	(__pval),y
    113  6050		       85 91		      sta	Evaluation+1
    114  6052		       60		      rts
    115  6053
    116  6053				   .black
    117  6053
    118  6053		       98		      tya
    119  6054		       aa		      tax
    120  6055		       bc 67 f0 	      ldy	FlipSquareIndex,x	; flip the index so we can use the same tables
    121  6058
    122  6058		       38		      sec
    123  6059		       a5 90		      lda	Evaluation
    124  605b		       f1 9c		      sbc	(__pval),y
    125  605d		       85 90		      sta	Evaluation
    126  605f		       c8		      iny
    127  6060		       a5 91		      lda	Evaluation+1
    128  6062		       f1 9c		      sbc	(__pval),y
    129  6064		       85 91		      sta	Evaluation+1
    130  6066		       60		      rts
    131  6067
    132  6067
    133  6067							;---------------------------------------------------------------------------------------------------
    134  6067
    135  6067
      0  6067					      ALLOCATE	FlipSquareIndex, 100
      0  6067					      OPTIONAL_PAGEBREAK	"Table", 100
     12  6067					      LIST	ON
      0  6067					      DEF	FlipSquareIndex
      1  6067				   BANK_FlipSquareIndex SET	_CURRENT_BANK
      2  6067				   FlipSquareIndex
      3  6067				   TEMPORARY_VAR SET	Overlay
      4  6067				   TEMPORARY_OFFSET SET	0
      5  6067					      SUBROUTINE
    137  6067
    138  6067		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0
    139  6071		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0
    140  607b
    141  607b				   .SQBASE    SET	90
    142  607b					      REPEAT	8
    143  607b		       00 00		      .byte.b	0,0
    144  607b				   .SQX       SET	2
    145  607d					      REPEAT	8
    146  607d		       b8		      .byte.b	(.SQBASE+.SQX)*2
    147  607d				   .SQX       SET	.SQX + 1
    145  607d					      REPEND
    146  607e		       ba		      .byte.b	(.SQBASE+.SQX)*2
    147  607e				   .SQX       SET	.SQX + 1
    145  607e					      REPEND
    146  607f		       bc		      .byte.b	(.SQBASE+.SQX)*2
    147  607f				   .SQX       SET	.SQX + 1
    145  607f					      REPEND
    146  6080		       be		      .byte.b	(.SQBASE+.SQX)*2
    147  6080				   .SQX       SET	.SQX + 1
    145  6080					      REPEND
    146  6081		       c0		      .byte.b	(.SQBASE+.SQX)*2
    147  6081				   .SQX       SET	.SQX + 1
    145  6081					      REPEND
    146  6082		       c2		      .byte.b	(.SQBASE+.SQX)*2
    147  6082				   .SQX       SET	.SQX + 1
    145  6082					      REPEND
    146  6083		       c4		      .byte.b	(.SQBASE+.SQX)*2
    147  6083				   .SQX       SET	.SQX + 1
    145  6083					      REPEND
    146  6084		       c6		      .byte.b	(.SQBASE+.SQX)*2
    147  6084				   .SQX       SET	.SQX + 1
    148  6085					      REPEND
    149  6085				   .SQBASE    SET	.SQBASE - 10
    142  6085					      REPEND
    143  6085		       00 00		      .byte.b	0,0
    144  6085				   .SQX       SET	2
    145  6087					      REPEAT	8
    146  6087		       a4		      .byte.b	(.SQBASE+.SQX)*2
    147  6087				   .SQX       SET	.SQX + 1
    145  6087					      REPEND
    146  6088		       a6		      .byte.b	(.SQBASE+.SQX)*2
    147  6088				   .SQX       SET	.SQX + 1
    145  6088					      REPEND
    146  6089		       a8		      .byte.b	(.SQBASE+.SQX)*2
    147  6089				   .SQX       SET	.SQX + 1
    145  6089					      REPEND
    146  608a		       aa		      .byte.b	(.SQBASE+.SQX)*2
    147  608a				   .SQX       SET	.SQX + 1
    145  608a					      REPEND
    146  608b		       ac		      .byte.b	(.SQBASE+.SQX)*2
    147  608b				   .SQX       SET	.SQX + 1
    145  608b					      REPEND
    146  608c		       ae		      .byte.b	(.SQBASE+.SQX)*2
    147  608c				   .SQX       SET	.SQX + 1
    145  608c					      REPEND
    146  608d		       b0		      .byte.b	(.SQBASE+.SQX)*2
    147  608d				   .SQX       SET	.SQX + 1
    145  608d					      REPEND
    146  608e		       b2		      .byte.b	(.SQBASE+.SQX)*2
    147  608e				   .SQX       SET	.SQX + 1
    148  608f					      REPEND
    149  608f				   .SQBASE    SET	.SQBASE - 10
    142  608f					      REPEND
    143  608f		       00 00		      .byte.b	0,0
    144  608f				   .SQX       SET	2
    145  6091					      REPEAT	8
    146  6091		       90		      .byte.b	(.SQBASE+.SQX)*2
    147  6091				   .SQX       SET	.SQX + 1
    145  6091					      REPEND
    146  6092		       92		      .byte.b	(.SQBASE+.SQX)*2
    147  6092				   .SQX       SET	.SQX + 1
    145  6092					      REPEND
    146  6093		       94		      .byte.b	(.SQBASE+.SQX)*2
    147  6093				   .SQX       SET	.SQX + 1
    145  6093					      REPEND
    146  6094		       96		      .byte.b	(.SQBASE+.SQX)*2
    147  6094				   .SQX       SET	.SQX + 1
    145  6094					      REPEND
    146  6095		       98		      .byte.b	(.SQBASE+.SQX)*2
    147  6095				   .SQX       SET	.SQX + 1
    145  6095					      REPEND
    146  6096		       9a		      .byte.b	(.SQBASE+.SQX)*2
    147  6096				   .SQX       SET	.SQX + 1
    145  6096					      REPEND
    146  6097		       9c		      .byte.b	(.SQBASE+.SQX)*2
    147  6097				   .SQX       SET	.SQX + 1
    145  6097					      REPEND
    146  6098		       9e		      .byte.b	(.SQBASE+.SQX)*2
    147  6098				   .SQX       SET	.SQX + 1
    148  6099					      REPEND
    149  6099				   .SQBASE    SET	.SQBASE - 10
    142  6099					      REPEND
    143  6099		       00 00		      .byte.b	0,0
    144  6099				   .SQX       SET	2
    145  609b					      REPEAT	8
    146  609b		       7c		      .byte.b	(.SQBASE+.SQX)*2
    147  609b				   .SQX       SET	.SQX + 1
    145  609b					      REPEND
    146  609c		       7e		      .byte.b	(.SQBASE+.SQX)*2
    147  609c				   .SQX       SET	.SQX + 1
    145  609c					      REPEND
    146  609d		       80		      .byte.b	(.SQBASE+.SQX)*2
    147  609d				   .SQX       SET	.SQX + 1
    145  609d					      REPEND
    146  609e		       82		      .byte.b	(.SQBASE+.SQX)*2
    147  609e				   .SQX       SET	.SQX + 1
    145  609e					      REPEND
    146  609f		       84		      .byte.b	(.SQBASE+.SQX)*2
    147  609f				   .SQX       SET	.SQX + 1
    145  609f					      REPEND
    146  60a0		       86		      .byte.b	(.SQBASE+.SQX)*2
    147  60a0				   .SQX       SET	.SQX + 1
    145  60a0					      REPEND
    146  60a1		       88		      .byte.b	(.SQBASE+.SQX)*2
    147  60a1				   .SQX       SET	.SQX + 1
    145  60a1					      REPEND
    146  60a2		       8a		      .byte.b	(.SQBASE+.SQX)*2
    147  60a2				   .SQX       SET	.SQX + 1
    148  60a3					      REPEND
    149  60a3				   .SQBASE    SET	.SQBASE - 10
    142  60a3					      REPEND
    143  60a3		       00 00		      .byte.b	0,0
    144  60a3				   .SQX       SET	2
    145  60a5					      REPEAT	8
    146  60a5		       68		      .byte.b	(.SQBASE+.SQX)*2
    147  60a5				   .SQX       SET	.SQX + 1
    145  60a5					      REPEND
    146  60a6		       6a		      .byte.b	(.SQBASE+.SQX)*2
    147  60a6				   .SQX       SET	.SQX + 1
    145  60a6					      REPEND
    146  60a7		       6c		      .byte.b	(.SQBASE+.SQX)*2
    147  60a7				   .SQX       SET	.SQX + 1
    145  60a7					      REPEND
    146  60a8		       6e		      .byte.b	(.SQBASE+.SQX)*2
    147  60a8				   .SQX       SET	.SQX + 1
    145  60a8					      REPEND
    146  60a9		       70		      .byte.b	(.SQBASE+.SQX)*2
    147  60a9				   .SQX       SET	.SQX + 1
    145  60a9					      REPEND
    146  60aa		       72		      .byte.b	(.SQBASE+.SQX)*2
    147  60aa				   .SQX       SET	.SQX + 1
    145  60aa					      REPEND
    146  60ab		       74		      .byte.b	(.SQBASE+.SQX)*2
    147  60ab				   .SQX       SET	.SQX + 1
    145  60ab					      REPEND
    146  60ac		       76		      .byte.b	(.SQBASE+.SQX)*2
    147  60ac				   .SQX       SET	.SQX + 1
    148  60ad					      REPEND
    149  60ad				   .SQBASE    SET	.SQBASE - 10
    142  60ad					      REPEND
    143  60ad		       00 00		      .byte.b	0,0
    144  60ad				   .SQX       SET	2
    145  60af					      REPEAT	8
    146  60af		       54		      .byte.b	(.SQBASE+.SQX)*2
    147  60af				   .SQX       SET	.SQX + 1
    145  60af					      REPEND
    146  60b0		       56		      .byte.b	(.SQBASE+.SQX)*2
    147  60b0				   .SQX       SET	.SQX + 1
    145  60b0					      REPEND
    146  60b1		       58		      .byte.b	(.SQBASE+.SQX)*2
    147  60b1				   .SQX       SET	.SQX + 1
    145  60b1					      REPEND
    146  60b2		       5a		      .byte.b	(.SQBASE+.SQX)*2
    147  60b2				   .SQX       SET	.SQX + 1
    145  60b2					      REPEND
    146  60b3		       5c		      .byte.b	(.SQBASE+.SQX)*2
    147  60b3				   .SQX       SET	.SQX + 1
    145  60b3					      REPEND
    146  60b4		       5e		      .byte.b	(.SQBASE+.SQX)*2
    147  60b4				   .SQX       SET	.SQX + 1
    145  60b4					      REPEND
    146  60b5		       60		      .byte.b	(.SQBASE+.SQX)*2
    147  60b5				   .SQX       SET	.SQX + 1
    145  60b5					      REPEND
    146  60b6		       62		      .byte.b	(.SQBASE+.SQX)*2
    147  60b6				   .SQX       SET	.SQX + 1
    148  60b7					      REPEND
    149  60b7				   .SQBASE    SET	.SQBASE - 10
    142  60b7					      REPEND
    143  60b7		       00 00		      .byte.b	0,0
    144  60b7				   .SQX       SET	2
    145  60b9					      REPEAT	8
    146  60b9		       40		      .byte.b	(.SQBASE+.SQX)*2
    147  60b9				   .SQX       SET	.SQX + 1
    145  60b9					      REPEND
    146  60ba		       42		      .byte.b	(.SQBASE+.SQX)*2
    147  60ba				   .SQX       SET	.SQX + 1
    145  60ba					      REPEND
    146  60bb		       44		      .byte.b	(.SQBASE+.SQX)*2
    147  60bb				   .SQX       SET	.SQX + 1
    145  60bb					      REPEND
    146  60bc		       46		      .byte.b	(.SQBASE+.SQX)*2
    147  60bc				   .SQX       SET	.SQX + 1
    145  60bc					      REPEND
    146  60bd		       48		      .byte.b	(.SQBASE+.SQX)*2
    147  60bd				   .SQX       SET	.SQX + 1
    145  60bd					      REPEND
    146  60be		       4a		      .byte.b	(.SQBASE+.SQX)*2
    147  60be				   .SQX       SET	.SQX + 1
    145  60be					      REPEND
    146  60bf		       4c		      .byte.b	(.SQBASE+.SQX)*2
    147  60bf				   .SQX       SET	.SQX + 1
    145  60bf					      REPEND
    146  60c0		       4e		      .byte.b	(.SQBASE+.SQX)*2
    147  60c0				   .SQX       SET	.SQX + 1
    148  60c1					      REPEND
    149  60c1				   .SQBASE    SET	.SQBASE - 10
    142  60c1					      REPEND
    143  60c1		       00 00		      .byte.b	0,0
    144  60c1				   .SQX       SET	2
    145  60c3					      REPEAT	8
    146  60c3		       2c		      .byte.b	(.SQBASE+.SQX)*2
    147  60c3				   .SQX       SET	.SQX + 1
    145  60c3					      REPEND
    146  60c4		       2e		      .byte.b	(.SQBASE+.SQX)*2
    147  60c4				   .SQX       SET	.SQX + 1
    145  60c4					      REPEND
    146  60c5		       30		      .byte.b	(.SQBASE+.SQX)*2
    147  60c5				   .SQX       SET	.SQX + 1
    145  60c5					      REPEND
    146  60c6		       32		      .byte.b	(.SQBASE+.SQX)*2
    147  60c6				   .SQX       SET	.SQX + 1
    145  60c6					      REPEND
    146  60c7		       34		      .byte.b	(.SQBASE+.SQX)*2
    147  60c7				   .SQX       SET	.SQX + 1
    145  60c7					      REPEND
    146  60c8		       36		      .byte.b	(.SQBASE+.SQX)*2
    147  60c8				   .SQX       SET	.SQX + 1
    145  60c8					      REPEND
    146  60c9		       38		      .byte.b	(.SQBASE+.SQX)*2
    147  60c9				   .SQX       SET	.SQX + 1
    145  60c9					      REPEND
    146  60ca		       3a		      .byte.b	(.SQBASE+.SQX)*2
    147  60ca				   .SQX       SET	.SQX + 1
    148  60cb					      REPEND
    149  60cb				   .SQBASE    SET	.SQBASE - 10
    150  60cb					      REPEND
    151  60cb
    152  60cb
    153  60cb							;---------------------------------------------------------------------------------------------------
    154  60cb							; Vectors to the position value tables for each piece
    155  60cb
    156  60cb					      MAC	posval
    157  60cb					      .byte	0
    158  60cb					      .byte	{1}PositionalValue_PAWN
    159  60cb					      .byte	{1}PositionalValue_PAWN
    160  60cb					      .byte	{1}PositionalValue_KNIGHT
    161  60cb					      .byte	{1}PositionalValue_BISHOP
    162  60cb					      .byte	{1}PositionalValue_ROOK
    163  60cb					      .byte	{1}PositionalValue_QUEEN
    164  60cb					      .byte	{1}PositionalValue_KING_MIDGAME
    165  60cb					      ENDM
    166  60cb
      0  60cb					      ALLOCATE	PosValVecLO, 8
      0  60cb					      OPTIONAL_PAGEBREAK	"Table", 8
     12  60cb					      LIST	ON
      0  60cb					      DEF	PosValVecLO
      1  60cb				   BANK_PosValVecLO SET	_CURRENT_BANK
      2  60cb				   PosValVecLO
      3  60cb				   TEMPORARY_VAR SET	Overlay
      4  60cb				   TEMPORARY_OFFSET SET	0
      5  60cb					      SUBROUTINE
      0  60cb					      POSVAL	<
      1  60cb		       00		      .byte.b	0
      2  60cc		       00		      .byte.b	<PositionalValue_PAWN
      3  60cd		       00		      .byte.b	<PositionalValue_PAWN
      4  60ce		       00		      .byte.b	<PositionalValue_KNIGHT
      5  60cf		       00		      .byte.b	<PositionalValue_BISHOP
      6  60d0		       00		      .byte.b	<PositionalValue_ROOK
      7  60d1		       00		      .byte.b	<PositionalValue_QUEEN
      8  60d2		       00		      .byte.b	<PositionalValue_KING_MIDGAME
      0  60d3					      ALLOCATE	PosValVecHI, 8
      0  60d3					      OPTIONAL_PAGEBREAK	"Table", 8
     12  60d3					      LIST	ON
      0  60d3					      DEF	PosValVecHI
      1  60d3				   BANK_PosValVecHI SET	_CURRENT_BANK
      2  60d3				   PosValVecHI
      3  60d3				   TEMPORARY_VAR SET	Overlay
      4  60d3				   TEMPORARY_OFFSET SET	0
      5  60d3					      SUBROUTINE
      0  60d3					      POSVAL	>
      1  60d3		       00		      .byte.b	0
      2  60d4		       f1		      .byte.b	>PositionalValue_PAWN
      3  60d5		       f1		      .byte.b	>PositionalValue_PAWN
      4  60d6		       f2		      .byte.b	>PositionalValue_KNIGHT
      5  60d7		       f3		      .byte.b	>PositionalValue_BISHOP
      6  60d8		       f4		      .byte.b	>PositionalValue_ROOK
      7  60d9		       f5		      .byte.b	>PositionalValue_QUEEN
      8  60da		       f6		      .byte.b	>PositionalValue_KING_MIDGAME
    171  60db
    172  60db
    173  60db							;---------------------------------------------------------------------------------------------------
    174  60db
      0  60db					      ALLOCATE	PositionalValue_PAWN, 200
      0  60db					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6100					      LIST	ON
      0  6100					      DEF	PositionalValue_PAWN
      1  6100				   BANK_PositionalValue_PAWN SET	_CURRENT_BANK
      2  6100				   PositionalValue_PAWN
      3  6100				   TEMPORARY_VAR SET	Overlay
      4  6100				   TEMPORARY_OFFSET SET	0
      5  6100					      SUBROUTINE
    176  6100
    177  6100		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    178  6114		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    179  6128
    180  6128		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 0, 0, 0, 0, 0	; 20-29
    181  613c		       00 00 00 00*	      .word.w	0,0, 5, 10, 10,-20,-20, 10, 10, 5	; 30-
    182  6150		       00 00 00 00*	      .word.w	0,0, 5, -5,-10, 0, 0,-10, -5, 5	; 40-
    183  6164		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 20, 20, 0, 0, 0	; 50-
    184  6178		       00 00 00 00*	      .word.w	0,0, 5, 5, 10, 25, 25, 10, 5, 5	; 60-
    185  618c		       00 00 00 00*	      .word.w	0,0, 10, 10, 20, 30, 30, 20, 10, 10	; 70-
    186  61a0		       00 00 00 00*	      .word.w	0,0, 50, 50, 50, 50, 50, 50, 50, 50	; 80-
    187  61b4		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 0, 0, 0, 0, 0	; 90-
    188  61c8
    189  61c8
    190  61c8							;---------------------------------------------------------------------------------------------------
    191  61c8
      0  61c8					      ALLOCATE	PositionalValue_KNIGHT, 200
      0  61c8					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6200					      LIST	ON
      0  6200					      DEF	PositionalValue_KNIGHT
      1  6200				   BANK_PositionalValue_KNIGHT SET	_CURRENT_BANK
      2  6200				   PositionalValue_KNIGHT
      3  6200				   TEMPORARY_VAR SET	Overlay
      4  6200				   TEMPORARY_OFFSET SET	0
      5  6200					      SUBROUTINE
    193  6200
    194  6200		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    195  6214		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    196  6228
    197  6228		       00 00 00 00*	      .word.w	0,0, -50,-40,-30,-30,-30,-30,-40,-50
    198  623c		       00 00 00 00*	      .word.w	0,0, -40,-20, 0, 5, 5, 0,-20,-40
    199  6250		       00 00 00 00*	      .word.w	0,0, -30, 5, 10, 15, 15, 10, 5,-30
    200  6264		       00 00 00 00*	      .word.w	0,0, -30, 0, 15, 20, 20, 15, 0,-30
    201  6278		       00 00 00 00*	      .word.w	0,0, -30, 5, 15, 20, 20, 15, 5,-30
    202  628c		       00 00 00 00*	      .word.w	0,0, -30, 0, 10, 15, 15, 10, 0,-30
    203  62a0		       00 00 00 00*	      .word.w	0,0, -40,-20, 0, 0, 0, 0,-20,-40
    204  62b4		       00 00 00 00*	      .word.w	0,0, -50,-40,-30,-30,-30,-30,-40,-50
    205  62c8
    206  62c8
    207  62c8							;---------------------------------------------------------------------------------------------------
    208  62c8
      0  62c8					      ALLOCATE	PositionalValue_BISHOP, 200
      0  62c8					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6300					      LIST	ON
      0  6300					      DEF	PositionalValue_BISHOP
      1  6300				   BANK_PositionalValue_BISHOP SET	_CURRENT_BANK
      2  6300				   PositionalValue_BISHOP
      3  6300				   TEMPORARY_VAR SET	Overlay
      4  6300				   TEMPORARY_OFFSET SET	0
      5  6300					      SUBROUTINE
    210  6300
    211  6300		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    212  6314		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    213  6328
    214  6328		       00 00 00 00*	      .word.w	0,0, -20,-10,-10,-10,-10,-10,-10,-20
    215  633c		       00 00 00 00*	      .word.w	0,0, -10, 5, 0, 0, 0, 0, 5,-10
    216  6350		       00 00 00 00*	      .word.w	0,0, -10, 10, 10, 10, 10, 10, 10,-10
    217  6364		       00 00 00 00*	      .word.w	0,0, -10, 0, 10, 10, 10, 10, 0,-10
    218  6378		       00 00 00 00*	      .word.w	0,0, -10, 5, 5, 10, 10, 5, 5,-10
    219  638c		       00 00 00 00*	      .word.w	0,0, -10, 0, 5, 10, 10, 5, 0,-10
    220  63a0		       00 00 00 00*	      .word.w	0,0, -10, 0, 0, 0, 0, 0, 0,-10
    221  63b4		       00 00 00 00*	      .word.w	0,0, -20,-10,-10,-10,-10,-10,-10,-20
    222  63c8
    223  63c8
    224  63c8							;---------------------------------------------------------------------------------------------------
    225  63c8
      0  63c8					      ALLOCATE	PositionalValue_ROOK, 200
      0  63c8					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6400					      LIST	ON
      0  6400					      DEF	PositionalValue_ROOK
      1  6400				   BANK_PositionalValue_ROOK SET	_CURRENT_BANK
      2  6400				   PositionalValue_ROOK
      3  6400				   TEMPORARY_VAR SET	Overlay
      4  6400				   TEMPORARY_OFFSET SET	0
      5  6400					      SUBROUTINE
    227  6400
    228  6400		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    229  6414		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    230  6428
    231  6428		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 5, 5, 0, 0, 0
    232  643c		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    233  6450		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    234  6464		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    235  6478		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    236  648c		       00 00 00 00*	      .word.w	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    237  64a0		       00 00 00 00*	      .word.w	0,0, 5, 10, 10, 10, 10, 10, 10, 5
    238  64b4		       00 00 00 00*	      .word.w	0,0, 0, 0, 0, 0, 0, 0, 0, 0
    239  64c8
    240  64c8
    241  64c8							;---------------------------------------------------------------------------------------------------
    242  64c8
      0  64c8					      ALLOCATE	PositionalValue_QUEEN, 200
      0  64c8					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6500					      LIST	ON
      0  6500					      DEF	PositionalValue_QUEEN
      1  6500				   BANK_PositionalValue_QUEEN SET	_CURRENT_BANK
      2  6500				   PositionalValue_QUEEN
      3  6500				   TEMPORARY_VAR SET	Overlay
      4  6500				   TEMPORARY_OFFSET SET	0
      5  6500					      SUBROUTINE
    244  6500
    245  6500		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    246  6514		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    247  6528
    248  6528		       00 00 00 00*	      .word.w	0,0, -20,-10,-10, -5, -5,-10,-10,-20
    249  653c		       00 00 00 00*	      .word.w	0,0, -10, 0, 5, 0, 0, 0, 0,-10
    250  6550		       00 00 00 00*	      .word.w	0,0, -10, 5, 5, 5, 5, 5, 0,-10
    251  6564		       00 00 00 00*	      .word.w	0,0, 0, 0, 5, 5, 5, 5, 0, -5
    252  6578		       00 00 00 00*	      .word.w	0,0, -5, 0, 5, 5, 5, 5, 0, -5
    253  658c		       00 00 00 00*	      .word.w	0,0, -10, 0, 5, 5, 5, 5, 0,-10
    254  65a0		       00 00 00 00*	      .word.w	0,0, -10, 0, 0, 0, 0, 0, 0,-10
    255  65b4		       00 00 00 00*	      .word.w	0,0, -20,-10,-10, -5, -5,-10,-10,-20
    256  65c8
    257  65c8
    258  65c8							;---------------------------------------------------------------------------------------------------
    259  65c8
      0  65c8					      ALLOCATE	PositionalValue_KING_MIDGAME, 200
      0  65c8					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6600					      LIST	ON
      0  6600					      DEF	PositionalValue_KING_MIDGAME
      1  6600				   BANK_PositionalValue_KING_MIDGAME SET	_CURRENT_BANK
      2  6600				   PositionalValue_KING_MIDGAME
      3  6600				   TEMPORARY_VAR SET	Overlay
      4  6600				   TEMPORARY_OFFSET SET	0
      5  6600					      SUBROUTINE
    261  6600
    262  6600		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    263  6614		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    264  6628
    265  6628		       00 00 00 00*	      .word.w	0,0, 20, 30, 10, 0, 0, 10, 30, 20
    266  663c		       00 00 00 00*	      .word.w	0,0, 20, 20, 0, 0, 0, 0, 20, 20
    267  6650		       00 00 00 00*	      .word.w	0,0, -10,-20,-20,-20,-20,-20,-20,-10
    268  6664		       00 00 00 00*	      .word.w	0,0, -20,-30,-30,-40,-40,-30,-30,-20
    269  6678		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    270  668c		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    271  66a0		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    272  66b4		       00 00 00 00*	      .word.w	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    273  66c8
    274  66c8
    275  66c8							;---------------------------------------------------------------------------------------------------
    276  66c8
      0  66c8					      ALLOCATE	PositionalValue_KING_ENDGAME, 200
      0  66c8					      OPTIONAL_PAGEBREAK	"Table", 200
     12  6700					      LIST	ON
      0  6700					      DEF	PositionalValue_KING_ENDGAME
      1  6700				   BANK_PositionalValue_KING_ENDGAME SET	_CURRENT_BANK
      2  6700				   PositionalValue_KING_ENDGAME
      3  6700				   TEMPORARY_VAR SET	Overlay
      4  6700				   TEMPORARY_OFFSET SET	0
      5  6700					      SUBROUTINE
    278  6700
    279  6700		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    280  6714		       00 00 00 00*	      .word.w	0,0,0,0,0,0,0,0,0,0
    281  6728
    282  6728		       00 00 00 00*	      .word.w	0,0, -50,-30,-30,-30,-30,-30,-30,-50
    283  673c		       00 00 00 00*	      .word.w	0,0, -30,-30, 0, 0, 0, 0,-30,-30
    284  6750		       00 00 00 00*	      .word.w	0,0, -30,-10, 20, 30, 30, 20,-10,-30
    285  6764		       00 00 00 00*	      .word.w	0,0, -30,-10, 30, 40, 40, 30,-10,-30
    286  6778		       00 00 00 00*	      .word.w	0,0, -30,-10, 30, 40, 40, 30,-10,-30
    287  678c		       00 00 00 00*	      .word.w	0,0, -30,-10, 20, 30, 30, 20,-10,-30
    288  67a0		       00 00 00 00*	      .word.w	0,0, -30,-20,-10, 0, 0,-10,-20,-30
    289  67b4		       00 00 00 00*	      .word.w	0,0, -50,-40,-30,-20,-20,-30,-40,-50
    290  67c8
    291  67c8
    292  67c8							;---------------------------------------------------------------------------------------------------
    293  67c8
    294  67c8
    295  67c8				  -	      if	0
    296  67c8				  -
    297  67c8				  -def	      quiesce(	alpha, beta ):
    298  67c8				  -	      stand_pat	= evaluate_board()
    299  67c8				  -	      if(	stand_pat >= beta ):
    300  67c8				  -	      return	beta
    301  67c8				  -	      if(	alpha < stand_pat ):
    302  67c8				  -	      alpha	= stand_pat
    303  67c8				  -
    304  67c8				  -	      for	move in board.legal_moves:
    305  67c8				  -	      if	board.is_capture(move):
    306  67c8				  -	      make_move(move)
    307  67c8				  -	      score	= -quiesce( -beta, -alpha )
    308  67c8				  -	      unmake_move()
    309  67c8				  -
    310  67c8				  -	      if(	score >= beta ):
    311  67c8				  -	      return	beta
    312  67c8				  -	      if(	score > alpha ):
    313  67c8				  -	      alpha	= score
    314  67c8				  -	      return	alpha
    315  67c8				  -
    316  67c8				  -def	      alphabeta(	alpha, beta, depthleft ):
    317  67c8				  -	      bestscore	= -9999
    318  67c8				  -	      if(	depthleft == 0 ):
    319  67c8				  -	      return	quiesce( alpha, beta )
    320  67c8				  -	      for	move in board.legal_moves:
    321  67c8				  -	      make_move(move)
    322  67c8				  -	      score	= -alphabeta( -beta, -alpha, depthleft - 1 )
    323  67c8				  -	      unmake_move()
    324  67c8				  -	      if(	score >= beta ):
    325  67c8				  -	      return	score
    326  67c8				  -	      if(	score > bestscore ):
    327  67c8				  -	      bestscore	= score
    328  67c8				  -	      if(	score > alpha ):
    329  67c8				  -	      alpha	= score
    330  67c8				  -	      return	bestscore
    331  67c8				  -
    332  67c8				  -import     chess.polyglot
    333  67c8				  -
    334  67c8				  -def	      selectmove(depth):
    335  67c8				  -	      try:
    336  67c8				  -	      move	= chess.polyglot.MemoryMappedReader("bookfish.bin").weighted_choice(board).move()
    337  67c8				  -	      movehistory.append(move)
    338  67c8				  -	      return	move
    339  67c8				  -	      except:
    340  67c8				  -	      bestMove	= chess.Move.null()
    341  67c8				  -	      bestValue	= -99999
    342  67c8				  -	      alpha	= -100000
    343  67c8				  -	      beta	= 100000
    344  67c8				  -	      for	move in board.legal_moves:
    345  67c8				  -	      make_move(move)
    346  67c8				  -	      boardValue	= -alphabeta(-beta, -alpha, depth-1)
    347  67c8				  -	      if	boardValue > bestValue:
    348  67c8				  -	      bestValue	= boardValue	;
    349  67c8				  -	      bestMove	= move
    350  67c8				  -	      if(	boardValue > alpha ):
    351  67c8				  -	      alpha	= boardValue
    352  67c8				  -	      unmake_move()
    353  67c8				  -	      movehistory.append(bestMove)
    354  67c8				  -	      return	bestMove
    355  67c8				  -
    356  67c8				  -
    357  67c8				  -def	      evaluate_board():
    358  67c8				  -
    359  67c8				  -	      if	board.is_checkmate():
    360  67c8				  -	      if	board.turn:
    361  67c8				  -	      return	-9999
    362  67c8				  -	      else:
    363  67c8				  -	      return	9999
    364  67c8				  -	      if	board.is_stalemate():
    365  67c8				  -	      return	0
    366  67c8				  -	      if	board.is_insufficient_material():
    367  67c8				  -	      return	0
    368  67c8				  -
    369  67c8				  -	      eval	= boardvalue
    370  67c8				  -	      if	board.turn:
    371  67c8				  -	      return	eval
    372  67c8				  -	      else:
    373  67c8				  -	      return	-eval
    374  67c8				  -
    375  67c8				  -
    376  67c8				  -
    377  67c8				  -piecetypes =	[chess.PAWN, chess.KNIGHT, chess.BISHOP, chess.ROOK, chess.QUEEN, chess.KING ]
    378  67c8				  -tables     =	[pawntable, knightstable, bishopstable, rookstable, queenstable, kingstable]
    379  67c8				  -piecevalues =	[100,320,330,500,900]
    380  67c8				  -
    381  67c8				  -def	      update_eval(mov,	side):
    382  67c8				  -	      global	boardvalue
    383  67c8				  -
    384  67c8				  -	      update	piecequares
    385  67c8				  -	      movingpiece	= board.piece_type_at(mov.from_square)
    386  67c8				  -	      if	side:
    387  67c8				  -	      boardvalue	= boardvalue - tables[movingpiece - 1][mov.from_square]
    388  67c8				  -	      update	castling
    389  67c8				  -	      if	(mov.from_square == chess.E1) and (mov.to_square == chess.G1):
    390  67c8				  -	      boardvalue	= boardvalue - rookstable[chess.H1]
    391  67c8				  -	      boardvalue	= boardvalue + rookstable[chess.F1]
    392  67c8				  -	      elif	(mov.from_square == chess.E1) and (mov.to_square == chess.C1):
    393  67c8				  -	      boardvalue	= boardvalue - rookstable[chess.A1]
    394  67c8				  -	      boardvalue	= boardvalue + rookstable[chess.D1]
    395  67c8				  -	      else:
    396  67c8				  -	      boardvalue	= boardvalue + tables[movingpiece - 1][mov.from_square]
    397  67c8				  -	      update	castling
    398  67c8				  -	      if	(mov.from_square == chess.E8) and (mov.to_square == chess.G8):
    399  67c8				  -	      boardvalue	= boardvalue + rookstable[chess.H8]
    400  67c8				  -	      boardvalue	= boardvalue - rookstable[chess.F8]
    401  67c8				  -	      elif	(mov.from_square == chess.E8) and (mov.to_square == chess.C8):
    402  67c8				  -	      boardvalue	= boardvalue + rookstable[chess.A8]
    403  67c8				  -	      boardvalue	= boardvalue - rookstable[chess.D8]
    404  67c8				  -
    405  67c8				  -	      if	side:
    406  67c8				  -	      boardvalue	= boardvalue + tables[movingpiece - 1][mov.to_square]
    407  67c8				  -	      else:
    408  67c8				  -	      boardvalue	= boardvalue - tables[movingpiece - 1][mov.to_square]
    409  67c8				  -
    410  67c8				  -
    411  67c8				  -	      update	material
    412  67c8				  -	      if	mov.drop != None:
    413  67c8				  -	      if	side:
    414  67c8				  -	      boardvalue	= boardvalue + piecevalues[mov.drop-1]
    415  67c8				  -	      else:
    416  67c8				  -	      boardvalue	= boardvalue - piecevalues[mov.drop-1]
    417  67c8				  -
    418  67c8				  -	      update	promotion
    419  67c8				  -	      if	mov.promotion != None:
    420  67c8				  -	      if	side:
    421  67c8				  -	      boardvalue	= boardvalue + piecevalues[mov.promotion-1] - piecevalues[movingpiece-1]
    422  67c8				  -	      boardvalue	= boardvalue - tables[movingpiece - 1][mov.to_square] \
    423  67c8				  -	      +	tables[mov.promotion - 1][mov.to_square]
    424  67c8				  -	      else:
    425  67c8				  -	      boardvalue	= boardvalue - piecevalues[mov.promotion-1] + piecevalues[movingpiece-1]
    426  67c8				  -	      boardvalue	= boardvalue + tables[movingpiece - 1][mov.to_square] \
    427  67c8				  -	      -	tables[mov.promotion - 1][mov.to_square]
    428  67c8				  -
    429  67c8				  -
    430  67c8				  -	      return	mov
    431  67c8				  -
    432  67c8				  -def	      make_move(mov):
    433  67c8				  -	      update_eval(mov,	board.turn)
    434  67c8				  -	      board.push(mov)
    435  67c8				  -
    436  67c8				  -	      return	mov
    437  67c8				  -
    438  67c8				  -def	      unmake_move():
    439  67c8				  -	      mov	= board.pop()
    440  67c8				  -	      update_eval(mov,	not board.turn)
    441  67c8				  -
    442  67c8				  -	      return	mov
    443  67c8				  -
    444  67c8				  -	      endif
    445  67c8				  -
    446  67c8				  -
    447  67c8				  -	      CHECK_BANK_SIZE	"BANK_EVAL"
    448  67c8				  -
    449  67c8				  -
    450  67c8				  -
    451  67c8				  -			; EOF
------- FILE ./chess.asm
    472  67c8
    473  67c8							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  67c8					      include	"BANK_FIXED.asm"
      1  67c8							; Chess
      2  67c8							; Copyright (c) 2019-2020 Andrew Davie
      3  67c8							; andrew@taswegian.com
      4  67c8
      5  67c8
      6  67c8							;---------------------------------------------------------------------------------------------------
      7  67c8							;#########################################  FIXED BANK  ############################################
      8  67c8							;---------------------------------------------------------------------------------------------------
      9  67c8
     10  67c8				   ORIGIN     SET	FIXED_BANK
     11  67c8
      0  67c8					      NEWBANK	THE_FIXED_BANK
      1  7d44 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800							;---------------------------------------------------------------------------------------------------
     16  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800				   Reset
      3  7800				   TEMPORARY_VAR SET	Overlay
      4  7800				   TEMPORARY_OFFSET SET	0
      5  7800					      SUBROUTINE
     18  7800					      SUBROUTINE
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 02		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;JSROM TitleScreen
     34  780e
     35  780e
     36  780e							; Move a copy of the row bank template to the first 8 banks of RAM
     37  780e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     38  780e
      0  780e					      JSROM_SAFE	SetupBanks
      1  780e
      2  780e
      3  780e
      4  780e		       a9 00		      lda	#BANK_SetupBanks
      5  7810		       85 8b		      sta	savedBank
      6  7812		       85 3f		      sta	SET_BANK
      7  7814		       20 13 f1 	      jsr	SetupBanks
     40  7817
     41  7817							; Patch the final row's "loop" to a RTS
     42  7817
     43  7817		       a2 07		      ldx	#7
     44  7819		       86 3e		      stx	SET_BANK_RAM
     45  781b		       a9 60		      lda	#$60	; "rts"
     46  781d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     47  7820
     48  7820
     49  7820		       a5 95		      lda	currentPly
     50  7822		       85 3e		      sta	SET_BANK_RAM
     51  7824		       20 88 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     52  7827
      0  7827					      JSROM	InitialisePieceSquares
      1  7827
      2  7827		       a9 0f		      lda	#BANK_InitialisePieceSquares
      3  7829		       85 3f		      sta	SET_BANK
      4  782b		       20 88 fb 	      jsr	InitialisePieceSquares
     54  782e
     55  782e		       a9 00		      lda	#WHITE
     56  7830		       85 97		      sta	sideToMove
     57  7832
     58  7832							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     59  7832
     60  7832							;---------------------------------------------------------------------------------------------------
     61  7832
     62  7832							;RESYNC
     63  7832				   .StartFrame
     64  7832
     65  7832
     66  7832							; START OF FRAME
     67  7832
     68  7832		       a9 0e		      lda	#%1110	; VSYNC ON
     69  7834		       85 42	   .loopVSync3 sta	WSYNC
     70  7836		       85 40		      sta	VSYNC
     71  7838		       4a		      lsr
     72  7839		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     73  783b
     74  783b		       a0 2f		      ldy	#TIME_PART_1
     75  783d		       8c 96 02 	      sty	TIM64T
     76  7840
     77  7840							; LOTS OF PROCESSING TIME - USE IT
     78  7840
     79  7840		       a2 00		      ldx	#0
     80  7842		       86 41		      stx	VBLANK
     81  7844
     82  7844
     83  7844					      IF	ASSERTS
     84  7844							;		      lda #$C2
     85  7844							;		      sta COLUBK		     ; colour timing band top of screen
     86  7844					      ENDIF
     87  7844
     88  7844		       20 9d f8 	      jsr	AiStateMachine
     89  7847
     90  7847							;jsr SAFE_PhasedProcessor
     91  7847
     92  7847					      IF	ASSERTS
     93  7847							;		      lda #0
     94  7847							;		      sta COLUBK		     ; end of timing band
     95  7847					      ENDIF
     96  7847
     97  7847					      if	ASSERTS
     98  7847							; Catch timer expired already
     99  7847		       2c 85 02 	      bit	TIMINT
    100  784a							;.whoops	      bmi .whoops
    101  784a					      endif
    102  784a
    103  784a
    104  784a		       2c 85 02    .wait      bit	TIMINT
    105  784d		       10 fb		      bpl	.wait
    106  784f
    107  784f
    108  784f
    109  784f							; START OF VISIBLE SCANLINES
    110  784f
    111  784f		       85 42		      sta	WSYNC
    112  7851
    113  7851		       20 9c f8 	      jsr	_rts
    114  7854		       20 9c f8 	      jsr	_rts
    115  7857		       20 9c f8 	      jsr	_rts
    116  785a		       20 9c f8 	      jsr	_rts
      0  785d					      SLEEP	3
      1  785d				   .CYCLES    SET	3
      2  785d
      3  785d				  -	      IF	.CYCLES < 2
      4  785d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  785d				  -	      ERR
      6  785d					      ENDIF
      7  785d
      8  785d					      IF	.CYCLES & 1
      9  785d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  785d		       04 00		      nop	0
     11  785f				  -	      ELSE
     12  785f				  -	      bit	VSYNC
     13  785f					      ENDIF
     14  785f				   .CYCLES    SET	.CYCLES - 3
     15  785f					      ENDIF
     16  785f
     17  785f				  -	      REPEAT	.CYCLES / 2
     18  785f				  -	      nop
     19  785f					      REPEND
    118  785f
    119  785f		       a2 00		      ldx	#0
    120  7861		       86 41		      stx	VBLANK
    121  7863
    122  7863		       86 3e		      stx	SET_BANK_RAM
    123  7865		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    124  7868
    125  7868
    126  7868
    127  7868
    128  7868		       a9 00		      lda	#0
    129  786a		       85 4d		      sta	PF0
    130  786c		       85 4e		      sta	PF1
    131  786e		       85 4f		      sta	PF2
    132  7870		       85 5b		      sta	GRP0
    133  7872		       85 5c		      sta	GRP1
    134  7874
    135  7874		       a9 42		      lda	#%01000010	; bit6 is not required
    136  7876		       85 41		      sta	VBLANK	; end of screen - enter blanking
    137  7878
    138  7878
    139  7878							; END OF VISIBLE SCREEN
    140  7878							; HERE'S SOME TIME TO DO STUFF
    141  7878
    142  7878		       a9 2e		      lda	#TIME_PART_2
    143  787a		       8d 96 02 	      sta	TIM64T
    144  787d
    145  787d		       20 9d f8 	      jsr	AiStateMachine
    146  7880
      0  7880					      JSROM	PositionSprites
      1  7880
      2  7880		       a9 06		      lda	#BANK_PositionSprites
      3  7882		       85 3f		      sta	SET_BANK
      4  7884		       20 00 f4 	      jsr	PositionSprites
    148  7887
    149  7887
    150  7887
    151  7887							; "draw" sprite shapes into row banks
    152  7887
    153  7887		       a2 07		      ldx	#7
    154  7889		       86 3e	   zapem      stx	SET_BANK_RAM
    155  788b		       20 a6 f2 	      jsr	WriteBlank
    156  788e		       ca		      dex
    157  788f		       10 f8		      bpl	zapem
    158  7891
    159  7891		       20 cf f2 	      jsr	WriteCursor
    160  7894
    161  7894
    162  7894		       2c 85 02    Waitforit  bit	TIMINT
    163  7897		       10 fb		      bpl	Waitforit
    164  7899
    165  7899		       4c 32 f8 	      jmp	.StartFrame
    166  789c
    167  789c
    168  789c		       60	   _rts       rts
    169  789d
    170  789d
    171  789d							;---------------------------------------------------------------------------------------------------
    172  789d
      0  789d					      DEF	AiStateMachine
      1  789d				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  789d				   AiStateMachine
      3  789d				   TEMPORARY_VAR SET	Overlay
      4  789d				   TEMPORARY_OFFSET SET	0
      5  789d					      SUBROUTINE
    174  789d					      SUBROUTINE
    175  789d
      0  789d					      JSROM	AiSetupVectors
      1  789d
      2  789d		       a9 06		      lda	#BANK_AiSetupVectors
      3  789f		       85 3f		      sta	SET_BANK
      4  78a1		       20 69 f0 	      jsr	AiSetupVectors
    177  78a4							;bcs .exit		      ; not enough time
    178  78a4		       85 3f		      sta	SET_BANK
    179  78a6		       6c e4 00 	      jmp	(__ptr)	; TODO: OR branch back to squeeze cycles
    180  78a9
    181  78a9		       60	   .exit      rts
    182  78aa
    183  78aa
    184  78aa							;---------------------------------------------------------------------------------------------------
    185  78aa
      0  78aa					      DEF	CallClear
      1  78aa				   BANK_CallClear SET	_CURRENT_BANK
      2  78aa				   CallClear
      3  78aa				   TEMPORARY_VAR SET	Overlay
      4  78aa				   TEMPORARY_OFFSET SET	0
      5  78aa					      SUBROUTINE
    187  78aa					      SUBROUTINE
    188  78aa
    189  78aa		       84 3e		      sty	SET_BANK_RAM
    190  78ac		       20 90 f1 	      jsr	ClearRowBitmap
    191  78af		       60		      rts
    192  78b0
    193  78b0							;---------------------------------------------------------------------------------------------------
    194  78b0
    195  78b0
      0  78b0					      DEF	aiDrawEntireBoard
      1  78b0				   BANK_aiDrawEntireBoard SET	_CURRENT_BANK
      2  78b0				   aiDrawEntireBoard
      3  78b0				   TEMPORARY_VAR SET	Overlay
      4  78b0				   TEMPORARY_OFFSET SET	0
      5  78b0					      SUBROUTINE
    197  78b0					      SUBROUTINE
    198  78b0
    199  78b0
    200  78b0		       ad 84 02 	      lda	INTIM
    201  78b3		       c9 2d		      cmp	#SPEEDOF_COPYSINGLEPIECE+4
    202  78b5		       90 2c		      bcc	.exit
    203  78b7
    204  78b7		       a9 08		      lda	#RAMBANK_MOVES_RAM
    205  78b9		       85 3e		      sta	SET_BANK_RAM
    206  78bb		       a4 80		      ldy	squareToDraw
    207  78bd		       b9 15 f0 	      lda	ValidSquare,y
    208  78c0		       30 1d		      bmi	.isablank2
    209  78c2
    210  78c2		       b9 79 f0 	      lda	Board,y
    211  78c5		       f0 13		      beq	.isablank
    212  78c7		       48		      pha
    213  78c8		       a9 00		      lda	#BLANK
    214  78ca		       99 79 f4 	      sta	Board+RAM_WRITE,y
    215  78cd
    216  78cd		       20 92 fc 	      jsr	CopySinglePiece
    217  78d0
    218  78d0		       a9 08		      lda	#RAMBANK_MOVES_RAM
    219  78d2		       85 3e		      sta	SET_BANK_RAM
    220  78d4
    221  78d4		       a4 80		      ldy	squareToDraw
    222  78d6		       68		      pla
    223  78d7		       99 79 f4 	      sta	Board+RAM_WRITE,y
    224  78da
      0  78da				   .isablank  PHASE	AI_DrawPart2
      1  78da		       a9 10		      lda	#AI_DrawPart2
      2  78dc		       85 8c		      sta	aiState
    226  78de		       60		      rts
    227  78df
      0  78df				   .isablank2 PHASE	AI_DrawPart3
      1  78df		       a9 11		      lda	#AI_DrawPart3
      2  78e1		       85 8c		      sta	aiState
    229  78e3		       60	   .exit      rts
    230  78e4
    231  78e4							;---------------------------------------------------------------------------------------------------
    232  78e4
      0  78e4					      DEF	aiFlipBuffers
      1  78e4				   BANK_aiFlipBuffers SET	_CURRENT_BANK
      2  78e4				   aiFlipBuffers
      3  78e4				   TEMPORARY_VAR SET	Overlay
      4  78e4				   TEMPORARY_OFFSET SET	0
      5  78e4					      SUBROUTINE
    234  78e4					      SUBROUTINE
    235  78e4
    236  78e4							; Initialise for a new move
    237  78e4
    238  78e4		       a5 95		      lda	currentPly
    239  78e6		       85 3e		      sta	SET_BANK_RAM
    240  78e8
    241  78e8		       20 88 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    242  78eb
      0  78eb					      PHASE	AI_GenerateMoves
      1  78eb		       a9 13		      lda	#AI_GenerateMoves
      2  78ed		       85 8c		      sta	aiState
    244  78ef		       60		      rts
    245  78f0
    246  78f0
    247  78f0							;---------------------------------------------------------------------------------------------------
    248  78f0
      0  78f0					      DEF	InitialiseMoveGeneration
      1  78f0				   BANK_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  78f0				   InitialiseMoveGeneration
      3  78f0				   TEMPORARY_VAR SET	Overlay
      4  78f0				   TEMPORARY_OFFSET SET	0
      5  78f0					      SUBROUTINE
    250  78f0					      SUBROUTINE
    251  78f0
    252  78f0		       a5 95		      lda	currentPly
    253  78f2		       85 3e		      sta	SET_BANK_RAM
    254  78f4
    255  78f4		       20 88 f2 	      jsr	NewPlyInitialise
    256  78f7
    257  78f7		       a5 8b		      lda	savedBank
    258  78f9		       85 3f		      sta	SET_BANK
    259  78fb		       60		      rts
    260  78fc
    261  78fc
    262  78fc							;---------------------------------------------------------------------------------------------------
    263  78fc
      0  78fc					      DEF	GenerateOneMove
      1  78fc				   BANK_GenerateOneMove SET	_CURRENT_BANK
      2  78fc				   GenerateOneMove
      3  78fc				   TEMPORARY_VAR SET	Overlay
      4  78fc				   TEMPORARY_OFFSET SET	0
      5  78fc					      SUBROUTINE
    265  78fc					      SUBROUTINE
    266  78fc
    267  78fc		       a5 95		      lda	currentPly
    268  78fe		       85 3e		      sta	SET_BANK_RAM
    269  7900		       20 b9 f2 	      jsr	GenerateMovesForNextPiece
    270  7903
    271  7903		       a5 8b		      lda	savedBank
    272  7905		       85 3f		      sta	SET_BANK
    273  7907		       60		      rts
    274  7908
    275  7908
    276  7908							;---------------------------------------------------------------------------------------------------
    277  7908
    278  7908							;TODO...
      0  7908					      DEF	SAFE_LookForCheck
      1  7908				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  7908				   SAFE_LookForCheck
      3  7908				   TEMPORARY_VAR SET	Overlay
      4  7908				   TEMPORARY_OFFSET SET	0
      5  7908					      SUBROUTINE
    280  7908					      SUBROUTINE
    281  7908
    282  7908		       a5 95		      lda	currentPly
    283  790a		       85 3e		      sta	SET_BANK_RAM
    284  790c
    285  790c		       ac f1 f1 	      ldy	moveIndex
    286  790f		       30 0f		      bmi	.failed
    287  7911
    288  7911		       be 00 f1    .scan      ldx	MoveTo,y
    289  7914		       bd 79 f0 	      lda	Board,x
    290  7917		       29 0f		      and	#PIECE_MASK
    291  7919		       c9 07		      cmp	#KING
    292  791b		       f0 04		      beq	.inCheck	; --> CS too
    293  791d		       88		      dey
    294  791e		       10 f1		      bpl	.scan
    295  7920
    296  7920		       18	   .failed    clc
    297  7921
    298  7921		       a5 8b	   .inCheck   lda	savedBank	; CS or CC
    299  7923		       85 3f		      sta	SET_BANK
    300  7925		       60		      rts
    301  7926
    302  7926
    303  7926							;---------------------------------------------------------------------------------------------------
    304  7926
      0  7926					      DEF	aiComputerMove
      1  7926				   BANK_aiComputerMove SET	_CURRENT_BANK
      2  7926				   aiComputerMove
      3  7926				   TEMPORARY_VAR SET	Overlay
      4  7926				   TEMPORARY_OFFSET SET	0
      5  7926					      SUBROUTINE
    306  7926					      SUBROUTINE
    307  7926
    308  7926							; Choose one of the moves
    309  7926
    310  7926		       a5 95		      lda	currentPly
    311  7928		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    312  792a
    313  792a		       a9 ff		      lda	#-1
    314  792c		       cd f1 f1 	      cmp	moveIndex
    315  792f		       f0 0f		      beq	.halted	; no valid moves
    316  7931
    317  7931							;sta fromX12
    318  7931		       85 87		      sta	originX12
    319  7933		       85 86		      sta	toX12
    320  7935
    321  7935		       a5 97		      lda	sideToMove
    322  7937		       10 03		      bpl	.notComputer
    323  7939
    324  7939		       20 3b f3 	      jsr	MoveViaListAtPly
    325  793c
      0  793c				   .notComputer PHASE	AI_PrepForPhysicalMove
      1  793c		       a9 15		      lda	#AI_PrepForPhysicalMove
      2  793e		       85 8c		      sta	aiState
    327  7940		       60	   .halted    rts
    328  7941
    329  7941
    330  7941							;---------------------------------------------------------------------------------------------------
    331  7941
      0  7941					      DEF	debug
      1  7941				   BANK_debug SET	_CURRENT_BANK
      2  7941				   debug
      3  7941				   TEMPORARY_VAR SET	Overlay
      4  7941				   TEMPORARY_OFFSET SET	0
      5  7941					      SUBROUTINE
    333  7941					      SUBROUTINE
    334  7941
    335  7941							; Use this to trap breakpoints in "unknown" banks. Just "jsr catch" from wherever you want
    336  7941							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    337  7941							; you wanted to see, without knowing the bank.
    338  7941
    339  7941		       60		      rts
    340  7942
    341  7942
    342  7942							;---------------------------------------------------------------------------------------------------
    343  7942
      0  7942					      DEF	aiSpecialMoveFixup
      1  7942				   BANK_aiSpecialMoveFixup SET	_CURRENT_BANK
      2  7942				   aiSpecialMoveFixup
      3  7942				   TEMPORARY_VAR SET	Overlay
      4  7942				   TEMPORARY_OFFSET SET	0
      5  7942					      SUBROUTINE
    345  7942					      SUBROUTINE
    346  7942
    347  7942		       ad 84 02 	      lda	INTIM
    348  7945		       c9 2d		      cmp	#SPEEDOF_COPYSINGLEPIECE+4
    349  7947		       90 5c		      bcc	.exit
    350  7949
      0  7949					      PHASE	AI_FlipBuffers
      1  7949		       a9 12		      lda	#AI_FlipBuffers
      2  794b		       85 8c		      sta	aiState
    352  794d
    353  794d							; Handle en-passant captures
    354  794d							; The (dual-use) FLAG_ENPASSANT will have been cleared if it was set for a home-rank move
    355  794d							; but if we're here and the flag is still set, then it's an actual en-passant CAPTURE and we
    356  794d							; need to do the appropriate things...
    357  794d
    358  794d
    359  794d							; {
    360  794d							; With en-passant flag, it is essentially dual-use.
    361  794d							; First, it marks if the move is *involved* somehow in an en-passant
    362  794d							; if the piece has MOVED already, then it's an en-passant capture
    363  794d							; if it has NOT moved, then it's a pawn leaving home rank, and sets the en-passant square
    364  794d
    365  794d		       a4 94		      ldy	enPassantPawn	; save from previous side move
    366  794f
    367  794f		       a2 00		      ldx	#0	; (probably) NO en-passant this time
    368  7951		       a5 98		      lda	fromPiece
    369  7953		       29 60		      and	#FLAG_ENPASSANT|FLAG_MOVED
    370  7955		       c9 20		      cmp	#FLAG_ENPASSANT
    371  7957		       d0 08		      bne	.noep	; HAS moved, or not en-passant
    372  7959
    373  7959		       a5 98		      lda	fromPiece
    374  795b		       29 df		      and	#~FLAG_ENPASSANT	; clear flag as it's been handled
    375  795d		       85 98		      sta	fromPiece
    376  795f
    377  795f		       a6 85		      ldx	fromX12	; this IS an en-passantable opening, so record the square
    378  7961		       86 94	   .noep      stx	enPassantPawn	; capturable square for en-passant move (or none)
    379  7963
    380  7963							; }
    381  7963
    382  7963
    383  7963							; {
    384  7963							; Check to see if we are doing an actual en-passant capture...
    385  7963
    386  7963		       a5 98		      lda	fromPiece
    387  7965		       29 20		      and	#FLAG_ENPASSANT
    388  7967		       f0 1d		      beq	.noEP	; not an en-passant, or it's enpassant by a MOVED piece
    389  7969
    390  7969							; Here we are the aggressor and we need to take the pawn 'en passant' fashion
    391  7969							; y = the square containing the pawn to capture (i.e., previous value of 'enPassantPawn')
    392  7969
    393  7969		       a5 97		      lda	sideToMove
    394  796b		       48		      pha
    395  796c		       49 80		      eor	#128
    396  796e		       85 97		      sta	sideToMove
    397  7970
    398  7970		       84 87		      sty	originX12
    399  7972		       84 80		      sty	squareToDraw
    400  7974		       20 92 fc 	      jsr	CopySinglePiece	; ERASE pawn being en-passant captured
    401  7977
    402  7977		       a5 97		      lda	sideToMove
    403  7979		       0a		      asl
    404  797a		       a9 09		      lda	#RAMBANK_PLY
    405  797c		       69 00		      adc	#0
    406  797e		       85 3e		      sta	SET_BANK_RAM
    407  7980
    408  7980		       20 d8 f2 	      jsr	FixPieceList	; REMOVE any captured object
    409  7983
    410  7983		       68		      pla
    411  7984		       85 97		      sta	sideToMove
    412  7986				   .noEP
    413  7986
    414  7986							; }
    415  7986
    416  7986
    417  7986
    418  7986
      0  7986					      JSROM_SAFE	CastleFixup
      1  7986
      2  7986
      3  7986
      4  7986		       a9 00		      lda	#BANK_CastleFixup
      5  7988		       85 8b		      sta	savedBank
      6  798a		       85 3f		      sta	SET_BANK
      7  798c		       20 d2 f0 	      jsr	CastleFixup
    420  798f
    421  798f
    422  798f
    423  798f							; Mark the piece as MOVED
    424  798f
    425  798f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    426  7991		       85 3e		      sta	SET_BANK_RAM
    427  7993		       a4 85		      ldy	fromX12	; final square
    428  7995		       b9 79 f0 	      lda	Board,y
    429  7998		       29 df		      and	#~FLAG_ENPASSANT
    430  799a		       09 40		      ora	#FLAG_MOVED
    431  799c		       99 79 f4 	      sta	Board+RAM_WRITE,y
    432  799f
    433  799f
    434  799f
    435  799f
    436  799f					      if	ASSERTS
    437  799f							;		      JSROM_SAFE DIAGNOSTIC_checkPieces
    438  799f					      endif
    439  799f
    440  799f
    441  799f		       a5 97		      lda	sideToMove
    442  79a1		       49 80		      eor	#128
    443  79a3		       85 97		      sta	sideToMove
    444  79a5
    445  79a5		       60	   .exit      rts
    446  79a6
    447  79a6
    448  79a6							;---------------------------------------------------------------------------------------------------
    449  79a6
      0  79a6					      DEF	MoveForSinglePiece
      1  79a6				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  79a6				   MoveForSinglePiece
      3  79a6				   TEMPORARY_VAR SET	Overlay
      4  79a6				   TEMPORARY_OFFSET SET	0
      5  79a6					      SUBROUTINE
    451  79a6					      SUBROUTINE
    452  79a6
    453  79a6
    454  79a6		       a9 08		      lda	#RAMBANK_MOVES_RAM
    455  79a8		       85 3e		      sta	SET_BANK_RAM
    456  79aa
    457  79aa		       a6 93		      ldx	currentSquare	; used in move handlers
    458  79ac		       bd 79 f0 	      lda	Board,x
    459  79af		       85 92		      sta	currentPiece
    460  79b1
    461  79b1					      IF	ASSERTS
    462  79b1					      SUBROUTINE
    463  79b1							; DEBUG: Make sure we're looking at correct colour
    464  79b1		       45 97		      eor	sideToMove
    465  79b3		       30 fe	   .lock      bmi	.lock
    466  79b5		       a5 92		      lda	currentPiece
    467  79b7					      ENDIF
    468  79b7
    469  79b7		       29 0f		      and	#PIECE_MASK
    470  79b9		       a8		      tay
    471  79ba
    472  79ba					      IF	ASSERTS
    473  79ba							; DEBUG: Make sure we have an actual piece, not an empty square
    474  79ba					      SUBROUTINE
    475  79ba		       f0 fe	   .lock      beq	.lock	; catch errors
    476  79bc					      ENDIF
    477  79bc
      0  79bc					      VAR	__vector, 2
      1  79bc				   __vector   SET	TEMPORARY_VAR
      2  79bc				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  79bc
      4  79bc				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  79bc				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  79bc				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  79bc					      ENDIF
      8  79bc				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  79bc				  -	      ECHO	"Temporary Variable", __vector, "overflow!"
     10  79bc				  -	      ERR
     11  79bc					      ENDIF
     12  79bc					      LIST	ON
    479  79bc
    480  79bc		       b9 ce f9 	      lda	HandlerVectorLO-1,y
    481  79bf		       85 9c		      sta	__vector
    482  79c1		       b9 d5 f9 	      lda	HandlerVectorHI-1,y
    483  79c4		       85 9d		      sta	__vector+1
    484  79c6		       6c 9c 00 	      jmp	(__vector)
    485  79c9
    486  79c9		       a5 95	   MoveReturn lda	currentPly
    487  79cb		       85 3e		      sta	SET_BANK_RAM
    488  79cd
    489  79cd		       60		      rts
    490  79ce
    491  79ce					      MAC	handlevec
    492  79ce					      .byte	{1}Handle_WHITE_PAWN	; 1
    493  79ce					      .byte	{1}Handle_BLACK_PAWN	; 2
    494  79ce					      .byte	{1}Handle_KNIGHT	; 3
    495  79ce					      .byte	{1}Handle_BISHOP	; 4
    496  79ce					      .byte	{1}Handle_ROOK	; 5
    497  79ce					      .byte	{1}Handle_QUEEN	; 6
    498  79ce					      .byte	{1}Handle_KING	; 7
    499  79ce					      ENDM
    500  79ce
    501  79ce
      0  79ce					      ALLOCATE	Handlers, 15
      0  79ce					      OPTIONAL_PAGEBREAK	"Table", 15
     12  79ce					      LIST	ON
      0  79ce					      DEF	Handlers
      1  79ce				   BANK_Handlers SET	_CURRENT_BANK
      2  79ce				   Handlers
      3  79ce				   TEMPORARY_VAR SET	Overlay
      4  79ce				   TEMPORARY_OFFSET SET	0
      5  79ce					      SUBROUTINE
    503  79ce
    504  79ce		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    505  79cf
      0  79cf				   HandlerVectorLO HANDLEVEC	<
      1  79cf		       08		      .byte.b	<Handle_WHITE_PAWN
      2  79d0		       ce		      .byte.b	<Handle_BLACK_PAWN
      3  79d1		       4a		      .byte.b	<Handle_KNIGHT
      4  79d2		       a0		      .byte.b	<Handle_BISHOP
      5  79d3		       03		      .byte.b	<Handle_ROOK
      6  79d4		       dd		      .byte.b	<Handle_QUEEN
      7  79d5		       66		      .byte.b	<Handle_KING
      0  79d6				   HandlerVectorHI HANDLEVEC	>
      1  79d6		       fa		      .byte.b	>Handle_WHITE_PAWN
      2  79d7		       fa		      .byte.b	>Handle_BLACK_PAWN
      3  79d8		       f3		      .byte.b	>Handle_KNIGHT
      4  79d9		       f1		      .byte.b	>Handle_BISHOP
      5  79da		       f2		      .byte.b	>Handle_ROOK
      6  79db		       f0		      .byte.b	>Handle_QUEEN
      7  79dc		       f2		      .byte.b	>Handle_KING
    508  79dd
    509  79dd							;---------------------------------------------------------------------------------------------------
    510  79dd
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  79dd					      include	"Handler_PAWN.asm"
      1  79dd							; Copyright (C)2020 Andrew Davie
      2  79dd							; Pawn move handlers
      3  79dd
      4  79dd							;---------------------------------------------------------------------------------------------------
      5  79dd							; WHITE PAWN
      6  79dd							;---------------------------------------------------------------------------------------------------
      7  79dd
      8  79dd		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  79dd		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  79dd
     11  79dd							;---------------------------------------------------------------------------------------------------
     12  79dd
     13  79dd					      MAC	en_passant
     14  79dd					      SUBROUTINE
     15  79dd							; {1} = _LEFT or _RIGHT
     16  79dd
     17  79dd					      ldx	currentSquare
     18  79dd					      ldy	ValidSquare+{1},x
     19  79dd					      cpy	enPassantPawn
     20  79dd					      bne	.invalid
     21  79dd					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     22  79dd					      lda	Board,y
     23  79dd					      bne	.invalid
     24  79dd					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     25  79dd				   .invalid
     26  79dd					      ENDM
     27  79dd
     28  79dd							;---------------------------------------------------------------------------------------------------
     29  79dd
     30  79dd					      MAC	promote_pawn
     31  79dd							;SUBROUTINE
     32  79dd
     33  79dd							;{1} = BLACK or WHITE
     34  79dd
     35  79dd					      VAR	__temp, 1
     36  79dd
     37  79dd					      lda	currentPiece
     38  79dd					      pha
     39  79dd
     40  79dd					      sty	__temp
     41  79dd					      lda	#{1}|QUEEN
     42  79dd					      sta	currentPiece
     43  79dd					      jsr	AddMove
     44  79dd
     45  79dd					      lda	#{1}|ROOK
     46  79dd					      sta	currentPiece
     47  79dd					      ldy	__temp
     48  79dd					      jsr	AddMove
     49  79dd
     50  79dd					      lda	#{1}|BISHOP
     51  79dd					      sta	currentPiece
     52  79dd					      ldy	__temp
     53  79dd					      jsr	AddMove
     54  79dd
     55  79dd					      lda	#{1}|KNIGHT
     56  79dd					      sta	currentPiece
     57  79dd					      ldy	__temp
     58  79dd					      jsr	AddMove
     59  79dd
     60  79dd					      pla
     61  79dd					      sta	currentPiece
     62  79dd					      ENDM
     63  79dd
     64  79dd							;---------------------------------------------------------------------------------------------------
     65  79dd
     66  79dd					      MAC	move_or_promote_pawn
     67  79dd							;SUBROUTINE
     68  79dd							; {1} = BLACK or WHITE
     69  79dd
     70  79dd					      IF	{1} = WHITE
     71  79dd					      cpy	#90	; last rank?
     72  79dd					      bcc	.standard
     73  79dd					      jsr	PromoteWhitePawn
     74  79dd					      jmp	.pMoved
     75  79dd					      ENDIF
     76  79dd
     77  79dd					      IF	{1} = BLACK
     78  79dd					      cpy	#30	; last rank?
     79  79dd					      bcs	.standard
     80  79dd					      jsr	PromoteBlackPawn
     81  79dd					      jmp	.pMoved
     82  79dd					      ENDIF
     83  79dd
     84  79dd				   .standard  jsr	AddMove	; add +1UP move
     85  79dd				   .pMoved
     86  79dd
     87  79dd					      ENDM
     88  79dd
     89  79dd							;---------------------------------------------------------------------------------------------------
     90  79dd
     91  79dd					      MAC	take
     92  79dd							;SUBROUTINE
     93  79dd							; {1} = capture square offset
     94  79dd
     95  79dd					      ldx	currentSquare
     96  79dd					      ldy	ValidSquare+{1},x
     97  79dd					      bmi	.invalid
     98  79dd					      lda	Board,y
     99  79dd					      beq	.invalid	; square empty
    100  79dd					      eor	currentPiece
    101  79dd					      bpl	.invalid	; same colour
    102  79dd
    103  79dd					      MOVE_OR_PROMOTE_PAWN	{2}
    104  79dd				   .invalid
    105  79dd					      ENDM
    106  79dd
    107  79dd							;---------------------------------------------------------------------------------------------------
    108  79dd
      0  79dd					      DEF	PromoteWhitePawn
      1  79dd				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  79dd				   PromoteWhitePawn
      3  79dd				   TEMPORARY_VAR SET	Overlay
      4  79dd				   TEMPORARY_OFFSET SET	0
      5  79dd					      SUBROUTINE
    110  79dd					      SUBROUTINE
    111  79dd
      0  79dd					      PROMOTE_PAWN	WHITE
      1  79dd
      2  79dd
      3  79dd
      4  79dd
      0  79dd					      VAR	__temp, 1
      1  79dd				   __temp     SET	TEMPORARY_VAR
      2  79dd				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  79dd
      4  79dd				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  79dd				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  79dd				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  79dd					      ENDIF
      8  79dd				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  79dd				  -	      ECHO	"Temporary Variable", __temp, "overflow!"
     10  79dd				  -	      ERR
     11  79dd					      ENDIF
     12  79dd					      LIST	ON
      6  79dd
      7  79dd		       a5 92		      lda	currentPiece
      8  79df		       48		      pha
      9  79e0
     10  79e0		       84 9c		      sty	__temp
     11  79e2		       a9 06		      lda	#WHITE|QUEEN
     12  79e4		       85 92		      sta	currentPiece
     13  79e6		       20 69 fb 	      jsr	AddMove
     14  79e9
     15  79e9		       a9 05		      lda	#WHITE|ROOK
     16  79eb		       85 92		      sta	currentPiece
     17  79ed		       a4 9c		      ldy	__temp
     18  79ef		       20 69 fb 	      jsr	AddMove
     19  79f2
     20  79f2		       a9 04		      lda	#WHITE|BISHOP
     21  79f4		       85 92		      sta	currentPiece
     22  79f6		       a4 9c		      ldy	__temp
     23  79f8		       20 69 fb 	      jsr	AddMove
     24  79fb
     25  79fb		       a9 03		      lda	#WHITE|KNIGHT
     26  79fd		       85 92		      sta	currentPiece
     27  79ff		       a4 9c		      ldy	__temp
     28  7a01		       20 69 fb 	      jsr	AddMove
     29  7a04
     30  7a04		       68		      pla
     31  7a05		       85 92		      sta	currentPiece
    113  7a07		       60		      rts
    114  7a08
    115  7a08							;---------------------------------------------------------------------------------------------------
    116  7a08
      0  7a08					      DEF	Handle_WHITE_PAWN
      1  7a08				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7a08				   Handle_WHITE_PAWN
      3  7a08				   TEMPORARY_VAR SET	Overlay
      4  7a08				   TEMPORARY_OFFSET SET	0
      5  7a08					      SUBROUTINE
    118  7a08					      SUBROUTINE
    119  7a08
    120  7a08		       bc 1f f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    121  7a0b		       b9 79 f0 	      lda	Board,y
    122  7a0e		       d0 24		      bne	.pMoved	; occupied
    123  7a10
    124  7a10							; we may need to promote the pawn
    125  7a10							; All possibilites (Q/R/B/N) are added as individual moves
    126  7a10
      0  7a10					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7a10
      2  7a10
      3  7a10
      4  7a10					      IF	WHITE = WHITE
      5  7a10		       c0 5a		      cpy	#90
      6  7a12		       90 06		      bcc	.standard
      7  7a14		       20 dd f9 	      jsr	PromoteWhitePawn
      8  7a17		       4c 1d fa 	      jmp	.pMoved
      9  7a1a					      ENDIF
     10  7a1a
     11  7a1a				  -	      IF	WHITE = BLACK
     12  7a1a				  -	      cpy	#30
     13  7a1a				  -	      bcs	.standard
     14  7a1a				  -	      jsr	PromoteBlackPawn
     15  7a1a				  -	      jmp	.pMoved
     16  7a1a					      ENDIF
     17  7a1a
     18  7a1a		       20 69 fb    .standard  jsr	AddMove
     19  7a1d				   .pMoved
     20  7a1d
    128  7a1d
    129  7a1d							; the +2 move off the home rank...
    130  7a1d
    131  7a1d		       a6 93		      ldx	currentSquare
    132  7a1f		       e0 28		      cpx	#WHITE_HOME_ROW
    133  7a21		       b0 11		      bcs	.pMoved	; pawn has moved so can't do +2
    134  7a23		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    135  7a26		       b9 79 f0 	      lda	Board,y
    136  7a29		       d0 09		      bne	.pMoved	; destination square occupied
    137  7a2b
    138  7a2b		       a5 92		      lda	currentPiece
    139  7a2d		       09 20		      ora	#FLAG_ENPASSANT
    140  7a2f		       85 92		      sta	currentPiece	; GENERATE en-passant opportunity
    141  7a31
    142  7a31		       20 69 fb 	      jsr	AddMove	; add the +2UP move off home row
    143  7a34
    144  7a34				   .pMoved
    145  7a34
    146  7a34							; regular captures...
    147  7a34
      0  7a34					      TAKE	_UP+_LEFT, WHITE
      1  7a34
      2  7a34
      3  7a34
      4  7a34		       a6 93		      ldx	currentSquare
      5  7a36		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT,x
      6  7a39		       30 16		      bmi	.invalid
      7  7a3b		       b9 79 f0 	      lda	Board,y
      8  7a3e		       f0 11		      beq	.invalid
      9  7a40		       45 92		      eor	currentPiece
     10  7a42		       10 0d		      bpl	.invalid
     11  7a44
      0  7a44					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7a44
      2  7a44
      3  7a44
      4  7a44					      IF	WHITE = WHITE
      5  7a44		       c0 5a		      cpy	#90
      6  7a46		       90 06		      bcc	.standard
      7  7a48		       20 dd f9 	      jsr	PromoteWhitePawn
      8  7a4b		       4c 51 fa 	      jmp	.pMoved
      9  7a4e					      ENDIF
     10  7a4e
     11  7a4e				  -	      IF	WHITE = BLACK
     12  7a4e				  -	      cpy	#30
     13  7a4e				  -	      bcs	.standard
     14  7a4e				  -	      jsr	PromoteBlackPawn
     15  7a4e				  -	      jmp	.pMoved
     16  7a4e					      ENDIF
     17  7a4e
     18  7a4e		       20 69 fb    .standard  jsr	AddMove
     19  7a51				   .pMoved
     20  7a51
     13  7a51				   .invalid
      0  7a51					      TAKE	_UP+_RIGHT, WHITE
      1  7a51
      2  7a51
      3  7a51
      4  7a51		       a6 93		      ldx	currentSquare
      5  7a53		       bc 20 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      6  7a56		       30 16		      bmi	.invalid
      7  7a58		       b9 79 f0 	      lda	Board,y
      8  7a5b		       f0 11		      beq	.invalid
      9  7a5d		       45 92		      eor	currentPiece
     10  7a5f		       10 0d		      bpl	.invalid
     11  7a61
      0  7a61					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7a61
      2  7a61
      3  7a61
      4  7a61					      IF	WHITE = WHITE
      5  7a61		       c0 5a		      cpy	#90
      6  7a63		       90 06		      bcc	.standard
      7  7a65		       20 dd f9 	      jsr	PromoteWhitePawn
      8  7a68		       4c 6e fa 	      jmp	.pMoved
      9  7a6b					      ENDIF
     10  7a6b
     11  7a6b				  -	      IF	WHITE = BLACK
     12  7a6b				  -	      cpy	#30
     13  7a6b				  -	      bcs	.standard
     14  7a6b				  -	      jsr	PromoteBlackPawn
     15  7a6b				  -	      jmp	.pMoved
     16  7a6b					      ENDIF
     17  7a6b
     18  7a6b		       20 69 fb    .standard  jsr	AddMove
     19  7a6e				   .pMoved
     20  7a6e
     13  7a6e				   .invalid
    150  7a6e
    151  7a6e
    152  7a6e							; en-passant captures...
    153  7a6e
    154  7a6e		       a5 94		      lda	enPassantPawn
    155  7a70		       f0 2e		      beq	.noEnPassant	; previous move (opponent) enpassant square?
    156  7a72
    157  7a72		       a5 92		      lda	currentPiece
    158  7a74		       09 20		      ora	#FLAG_ENPASSANT
    159  7a76		       85 92		      sta	currentPiece	; CONSUME en-passant opportunity
    160  7a78
      0  7a78					      EN_PASSANT	_LEFT, _UP
      1  7a78					      SUBROUTINE
      2  7a78
      3  7a78
      4  7a78		       a6 93		      ldx	currentSquare
      5  7a7a		       bc 14 f0 	      ldy	ValidSquare+_LEFT,x
      6  7a7d		       c4 94		      cpy	enPassantPawn
      7  7a7f		       d0 0b		      bne	.invalid
      8  7a81		       bc 1e f0 	      ldy	ValidSquare+_LEFT+_UP,x
      9  7a84		       b9 79 f0 	      lda	Board,y
     10  7a87		       d0 03		      bne	.invalid
     11  7a89		       20 69 fb 	      jsr	AddMove
     12  7a8c				   .invalid
      0  7a8c					      EN_PASSANT	_RIGHT, _UP
      1  7a8c					      SUBROUTINE
      2  7a8c
      3  7a8c
      4  7a8c		       a6 93		      ldx	currentSquare
      5  7a8e		       bc 16 f0 	      ldy	ValidSquare+_RIGHT,x
      6  7a91		       c4 94		      cpy	enPassantPawn
      7  7a93		       d0 0b		      bne	.invalid
      8  7a95		       bc 20 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      9  7a98		       b9 79 f0 	      lda	Board,y
     10  7a9b		       d0 03		      bne	.invalid
     11  7a9d		       20 69 fb 	      jsr	AddMove
     12  7aa0				   .invalid
    163  7aa0
    164  7aa0		       4c c9 f9    .noEnPassant jmp	MoveReturn
    165  7aa3
    166  7aa3
    167  7aa3							;---------------------------------------------------------------------------------------------------
    168  7aa3							; BLACK PAWN
    169  7aa3							;---------------------------------------------------------------------------------------------------
    170  7aa3
      0  7aa3					      DEF	PromoteBlackPawn
      1  7aa3				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7aa3				   PromoteBlackPawn
      3  7aa3				   TEMPORARY_VAR SET	Overlay
      4  7aa3				   TEMPORARY_OFFSET SET	0
      5  7aa3					      SUBROUTINE
    172  7aa3					      SUBROUTINE
    173  7aa3
      0  7aa3					      PROMOTE_PAWN	BLACK
      1  7aa3
      2  7aa3
      3  7aa3
      4  7aa3
      0  7aa3					      VAR	__temp, 1
      1  7aa3				   __temp     SET	TEMPORARY_VAR
      2  7aa3				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7aa3
      4  7aa3				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7aa3				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7aa3				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7aa3					      ENDIF
      8  7aa3				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7aa3				  -	      ECHO	"Temporary Variable", __temp, "overflow!"
     10  7aa3				  -	      ERR
     11  7aa3					      ENDIF
     12  7aa3					      LIST	ON
      6  7aa3
      7  7aa3		       a5 92		      lda	currentPiece
      8  7aa5		       48		      pha
      9  7aa6
     10  7aa6		       84 9c		      sty	__temp
     11  7aa8		       a9 86		      lda	#BLACK|QUEEN
     12  7aaa		       85 92		      sta	currentPiece
     13  7aac		       20 69 fb 	      jsr	AddMove
     14  7aaf
     15  7aaf		       a9 85		      lda	#BLACK|ROOK
     16  7ab1		       85 92		      sta	currentPiece
     17  7ab3		       a4 9c		      ldy	__temp
     18  7ab5		       20 69 fb 	      jsr	AddMove
     19  7ab8
     20  7ab8		       a9 84		      lda	#BLACK|BISHOP
     21  7aba		       85 92		      sta	currentPiece
     22  7abc		       a4 9c		      ldy	__temp
     23  7abe		       20 69 fb 	      jsr	AddMove
     24  7ac1
     25  7ac1		       a9 83		      lda	#BLACK|KNIGHT
     26  7ac3		       85 92		      sta	currentPiece
     27  7ac5		       a4 9c		      ldy	__temp
     28  7ac7		       20 69 fb 	      jsr	AddMove
     29  7aca
     30  7aca		       68		      pla
     31  7acb		       85 92		      sta	currentPiece
    175  7acd		       60		      rts
    176  7ace
      0  7ace					      DEF	Handle_BLACK_PAWN
      1  7ace				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7ace				   Handle_BLACK_PAWN
      3  7ace				   TEMPORARY_VAR SET	Overlay
      4  7ace				   TEMPORARY_OFFSET SET	0
      5  7ace					      SUBROUTINE
    178  7ace					      SUBROUTINE
    179  7ace
    180  7ace		       bc 0b f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    181  7ad1		       b9 79 f0 	      lda	Board,y
    182  7ad4		       d0 24		      bne	.pMoved	; occupied
    183  7ad6
    184  7ad6
    185  7ad6							; we may need to promote the pawn
    186  7ad6							; All possibilites (Q/R/B/N) are added as individual moves
    187  7ad6
      0  7ad6					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7ad6
      2  7ad6
      3  7ad6
      4  7ad6				  -	      IF	BLACK = WHITE
      5  7ad6				  -	      cpy	#90
      6  7ad6				  -	      bcc	.standard
      7  7ad6				  -	      jsr	PromoteWhitePawn
      8  7ad6				  -	      jmp	.pMoved
      9  7ad6					      ENDIF
     10  7ad6
     11  7ad6					      IF	BLACK = BLACK
     12  7ad6		       c0 1e		      cpy	#30
     13  7ad8		       b0 06		      bcs	.standard
     14  7ada		       20 a3 fa 	      jsr	PromoteBlackPawn
     15  7add		       4c e3 fa 	      jmp	.pMoved
     16  7ae0					      ENDIF
     17  7ae0
     18  7ae0		       20 69 fb    .standard  jsr	AddMove
     19  7ae3				   .pMoved
     20  7ae3
    189  7ae3
    190  7ae3							; the +2 move off the home rank...
    191  7ae3
    192  7ae3		       a6 93		      ldx	currentSquare
    193  7ae5		       e0 52		      cpx	#BLACK_HOME_ROW
    194  7ae7		       90 11		      bcc	.pMoved	; pawn has moved so can't do +2
    195  7ae9
    196  7ae9
    197  7ae9		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    198  7aec		       b9 79 f0 	      lda	Board,y
    199  7aef		       d0 09		      bne	.pMoved	; destination square occupied
    200  7af1
    201  7af1		       a5 92		      lda	currentPiece
    202  7af3		       09 20		      ora	#FLAG_ENPASSANT
    203  7af5		       85 92		      sta	currentPiece	; CAN en-passant
    204  7af7
    205  7af7		       20 69 fb 	      jsr	AddMove	; add the +2DOWN move off home row
    206  7afa
    207  7afa				   .pMoved
    208  7afa
    209  7afa							; regular captures... (with promotion)
    210  7afa
      0  7afa					      TAKE	_DOWN+_LEFT, BLACK
      1  7afa
      2  7afa
      3  7afa
      4  7afa		       a6 93		      ldx	currentSquare
      5  7afc		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      6  7aff		       30 16		      bmi	.invalid
      7  7b01		       b9 79 f0 	      lda	Board,y
      8  7b04		       f0 11		      beq	.invalid
      9  7b06		       45 92		      eor	currentPiece
     10  7b08		       10 0d		      bpl	.invalid
     11  7b0a
      0  7b0a					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7b0a
      2  7b0a
      3  7b0a
      4  7b0a				  -	      IF	BLACK = WHITE
      5  7b0a				  -	      cpy	#90
      6  7b0a				  -	      bcc	.standard
      7  7b0a				  -	      jsr	PromoteWhitePawn
      8  7b0a				  -	      jmp	.pMoved
      9  7b0a					      ENDIF
     10  7b0a
     11  7b0a					      IF	BLACK = BLACK
     12  7b0a		       c0 1e		      cpy	#30
     13  7b0c		       b0 06		      bcs	.standard
     14  7b0e		       20 a3 fa 	      jsr	PromoteBlackPawn
     15  7b11		       4c 17 fb 	      jmp	.pMoved
     16  7b14					      ENDIF
     17  7b14
     18  7b14		       20 69 fb    .standard  jsr	AddMove
     19  7b17				   .pMoved
     20  7b17
     13  7b17				   .invalid
      0  7b17					      TAKE	_DOWN+_RIGHT, BLACK
      1  7b17
      2  7b17
      3  7b17
      4  7b17		       a6 93		      ldx	currentSquare
      5  7b19		       bc 0c f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      6  7b1c		       30 16		      bmi	.invalid
      7  7b1e		       b9 79 f0 	      lda	Board,y
      8  7b21		       f0 11		      beq	.invalid
      9  7b23		       45 92		      eor	currentPiece
     10  7b25		       10 0d		      bpl	.invalid
     11  7b27
      0  7b27					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7b27
      2  7b27
      3  7b27
      4  7b27				  -	      IF	BLACK = WHITE
      5  7b27				  -	      cpy	#90
      6  7b27				  -	      bcc	.standard
      7  7b27				  -	      jsr	PromoteWhitePawn
      8  7b27				  -	      jmp	.pMoved
      9  7b27					      ENDIF
     10  7b27
     11  7b27					      IF	BLACK = BLACK
     12  7b27		       c0 1e		      cpy	#30
     13  7b29		       b0 06		      bcs	.standard
     14  7b2b		       20 a3 fa 	      jsr	PromoteBlackPawn
     15  7b2e		       4c 34 fb 	      jmp	.pMoved
     16  7b31					      ENDIF
     17  7b31
     18  7b31		       20 69 fb    .standard  jsr	AddMove
     19  7b34				   .pMoved
     20  7b34
     13  7b34				   .invalid
    213  7b34
    214  7b34							; en-passant captures...
    215  7b34
    216  7b34		       a5 94		      lda	enPassantPawn
    217  7b36		       f0 2e		      beq	.noEnPassant	; was last move en-passantable?
    218  7b38
    219  7b38		       a5 92		      lda	currentPiece
    220  7b3a		       09 20		      ora	#FLAG_ENPASSANT
    221  7b3c		       85 92		      sta	currentPiece	; any en-passant move added will have flag set
    222  7b3e
      0  7b3e					      EN_PASSANT	_LEFT, _DOWN
      1  7b3e					      SUBROUTINE
      2  7b3e
      3  7b3e
      4  7b3e		       a6 93		      ldx	currentSquare
      5  7b40		       bc 14 f0 	      ldy	ValidSquare+_LEFT,x
      6  7b43		       c4 94		      cpy	enPassantPawn
      7  7b45		       d0 0b		      bne	.invalid
      8  7b47		       bc 0a f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      9  7b4a		       b9 79 f0 	      lda	Board,y
     10  7b4d		       d0 03		      bne	.invalid
     11  7b4f		       20 69 fb 	      jsr	AddMove
     12  7b52				   .invalid
      0  7b52					      EN_PASSANT	_RIGHT, _DOWN
      1  7b52					      SUBROUTINE
      2  7b52
      3  7b52
      4  7b52		       a6 93		      ldx	currentSquare
      5  7b54		       bc 16 f0 	      ldy	ValidSquare+_RIGHT,x
      6  7b57		       c4 94		      cpy	enPassantPawn
      7  7b59		       d0 0b		      bne	.invalid
      8  7b5b		       bc 0c f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      9  7b5e		       b9 79 f0 	      lda	Board,y
     10  7b61		       d0 03		      bne	.invalid
     11  7b63		       20 69 fb 	      jsr	AddMove
     12  7b66				   .invalid
    225  7b66
    226  7b66				   .noEnPassant
    227  7b66		       4c c9 f9 	      jmp	MoveReturn
    228  7b69
    229  7b69							; EOF
------- FILE BANK_FIXED.asm
    512  7b69
    513  7b69							;---------------------------------------------------------------------------------------------------
    514  7b69
      0  7b69					      DEF	AddMove
      1  7b69				   BANK_AddMove SET	_CURRENT_BANK
      2  7b69				   AddMove
      3  7b69				   TEMPORARY_VAR SET	Overlay
      4  7b69				   TEMPORARY_OFFSET SET	0
      5  7b69					      SUBROUTINE
    516  7b69					      SUBROUTINE
    517  7b69							; =57 including call
    518  7b69
    519  7b69							; add square in y register to movelist as destination (X12 format)
    520  7b69							; currentPiece = piece moving
    521  7b69							; currentSquare = start square (X12)
    522  7b69							; ??do not modify y
    523  7b69
    524  7b69		       a5 95		      lda	currentPly	; 3
    525  7b6b		       85 3e		      sta	SET_BANK_RAM	; 3
    526  7b6d
    527  7b6d							; [y]		     to square (X12)
    528  7b6d							; currentSquare     from square (X12)
    529  7b6d							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    530  7b6d							; do not modify [Y]
    531  7b6d
    532  7b6d							; add a move to the movelist
    533  7b6d
    534  7b6d		       98		      tya		; 2
    535  7b6e
    536  7b6e		       ac f1 f1 	      ldy	moveIndex	; 3
    537  7b71		       c8		      iny		; 2
    538  7b72		       8c f1 f5 	      sty	moveIndex+RAM_WRITE	; 4
    539  7b75
    540  7b75		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    541  7b78		       aa		      tax		; 2   new square (for projections)
    542  7b79
    543  7b79		       a5 93		      lda	currentSquare	; 3
    544  7b7b		       99 76 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    545  7b7e		       a5 92		      lda	currentPiece	; 3
    546  7b80		       99 78 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    547  7b83
    548  7b83		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2	     ; TODO: NOT NEEDED IF FIXED BANK CALLED THIS
    549  7b85		       85 3e		      sta	SET_BANK_RAM	; 3
    550  7b87		       60		      rts		; 6
    551  7b88
    552  7b88
    553  7b88							;---------------------------------------------------------------------------------------------------
    554  7b88
      0  7b88					      DEF	InitialisePieceSquares
      1  7b88				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7b88				   InitialisePieceSquares
      3  7b88				   TEMPORARY_VAR SET	Overlay
      4  7b88				   TEMPORARY_OFFSET SET	0
      5  7b88					      SUBROUTINE
    556  7b88					      SUBROUTINE
    557  7b88
    558  7b88							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    559  7b88
    560  7b88		       a9 09		      lda	#RAMBANK_PLY
    561  7b8a		       85 3e		      sta	SET_BANK_RAM
    562  7b8c		       20 f2 f1 	      jsr	InitPieceLists	; for white
    563  7b8f		       a9 0a		      lda	#RAMBANK_PLY+1
    564  7b91		       85 3e		      sta	SET_BANK_RAM
    565  7b93		       20 f2 f1 	      jsr	InitPieceLists	; for black
    566  7b96
    567  7b96
    568  7b96
    569  7b96		       a9 00		      lda	#0
    570  7b98		       85 94		      sta	enPassantPawn	; no en-passant
    571  7b9a
    572  7b9a
    573  7b9a
    574  7b9a
    575  7b9a
    576  7b9a							; Now setup the board/piecelists
    577  7b9a
    578  7b9a		       a2 00		      ldx	#0
    579  7b9c				   .fillPieceLists
    580  7b9c
    581  7b9c		       a9 09		      lda	#RAMBANK_PLY
    582  7b9e		       85 3e		      sta	SET_BANK_RAM
    583  7ba0
    584  7ba0		       bd 47 f2 	      lda	InitPieceList,x	; colour/-1
    585  7ba3		       f0 71		      beq	.finish
    586  7ba5
    587  7ba5		       0a		      asl
    588  7ba6		       a9 09		      lda	#RAMBANK_PLY
    589  7ba8		       69 00		      adc	#0
    590  7baa		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    591  7bac
    592  7bac		       ac 70 f0 	      ldy	PieceListPtr	; init'd in InitPieceLists
    593  7baf		       c8		      iny
    594  7bb0
    595  7bb0		       bd 48 f2 	      lda	InitPieceList+1,x	; square
    596  7bb3		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    597  7bb6		       98		      tya
    598  7bb7		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    599  7bba
    600  7bba		       bd 47 f2 	      lda	InitPieceList,x	; piece type
    601  7bbd		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    602  7bc0		       48		      pha
    603  7bc1
    604  7bc1		       8c 70 f4 	      sty	PieceListPtr+RAM_WRITE
    605  7bc4
    606  7bc4
    607  7bc4		       bc 48 f2 	      ldy	InitPieceList+1,x	; square
    608  7bc7
    609  7bc7		       a9 08		      lda	#RAMBANK_MOVES_RAM
    610  7bc9		       85 3e		      sta	SET_BANK_RAM
    611  7bcb		       68		      pla
    612  7bcc		       99 79 f4 	      sta	Board+RAM_WRITE,y
    613  7bcf
    614  7bcf
    615  7bcf							; Add the material value of the piece to the evaluation
    616  7bcf
    617  7bcf		       c9 80		      cmp	#128	; CC=white, CS=black
    618  7bd1		       29 0f		      and	#PIECE_MASK
    619  7bd3		       a8		      tay
    620  7bd4
      0  7bd4					      JSROM	AddPieceMaterialValue
      1  7bd4
      2  7bd4		       a9 0c		      lda	#BANK_AddPieceMaterialValue
      3  7bd6		       85 3f		      sta	SET_BANK
      4  7bd8		       20 10 f0 	      jsr	AddPieceMaterialValue
    622  7bdb
    623  7bdb
    624  7bdb							;#region add positional value
    625  7bdb
    626  7bdb		       8a		      txa
    627  7bdc		       48		      pha
    628  7bdd
    629  7bdd		       a9 09		      lda	#RAMBANK_PLY
    630  7bdf		       85 3e		      sta	SET_BANK_RAM
    631  7be1
    632  7be1							; add the positional value of the piece to the evaluation
    633  7be1
    634  7be1		       bc 48 f2 	      ldy	InitPieceList+1,x	; square
    635  7be4		       bd 47 f2 	      lda	InitPieceList,x	; type
    636  7be7
    637  7be7		       a2 0c		      ldx	#BANK_AddPiecePositionValue
    638  7be9		       86 3f		      stx	SET_BANK
    639  7beb		       20 30 f0 	      jsr	AddPiecePositionValue
    640  7bee
    641  7bee		       68		      pla
    642  7bef		       aa		      tax
    643  7bf0							;#endregion
    644  7bf0
    645  7bf0
    646  7bf0							;#region store piece value
    647  7bf0
    648  7bf0							; Store the piece's value with the piece itself, so it doesn't have to
    649  7bf0							; be looked-up everytime it's added/removed
    650  7bf0							; this may be overkill and more effort than it's worth...
    651  7bf0
    652  7bf0		       a9 0c		      lda	#BANK_PieceValueLO
    653  7bf2		       85 3f		      sta	SET_BANK
    654  7bf4
    655  7bf4		       b9 08 f0 	      lda	PieceValueHI,y
    656  7bf7		       48		      pha
    657  7bf8		       b9 00 f0 	      lda	PieceValueLO,y
    658  7bfb		       48		      pha
    659  7bfc
    660  7bfc		       bd 47 f2 	      lda	InitPieceList,x	; colour/-1
    661  7bff		       0a		      asl
    662  7c00		       a9 09		      lda	#RAMBANK_PLY
    663  7c02		       69 00		      adc	#0
    664  7c04		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    665  7c06
    666  7c06		       ac 70 f0 	      ldy	PieceListPtr
    667  7c09		       c8		      iny
    668  7c0a
    669  7c0a
    670  7c0a		       68		      pla
    671  7c0b		       99 30 f4 	      sta	PieceMaterialValueLO+RAM_WRITE,y
    672  7c0e		       68		      pla
    673  7c0f		       99 40 f4 	      sta	PieceMaterialValueHI+RAM_WRITE,y
    674  7c12
    675  7c12							;#endregion
    676  7c12
    677  7c12		       e8		      inx
    678  7c13		       e8		      inx
    679  7c14		       10 86		      bpl	.fillPieceLists
    680  7c16
    681  7c16				   .finish
    682  7c16
    683  7c16		       60		      rts
    684  7c17
    685  7c17
    686  7c17							;---------------------------------------------------------------------------------------------------
    687  7c17
      0  7c17					      DEF	SAFE_GetKingSquare
      1  7c17				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  7c17				   SAFE_GetKingSquare
      3  7c17				   TEMPORARY_VAR SET	Overlay
      4  7c17				   TEMPORARY_OFFSET SET	0
      5  7c17					      SUBROUTINE
    689  7c17					      SUBROUTINE
    690  7c17
    691  7c17							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    692  7c17							; Return:	 A = square king is on (or -1)
    693  7c17
    694  7c17		       85 3e		      sta	SET_BANK_RAM
    695  7c19		       20 8b f3 	      jsr	GetKingSquare
    696  7c1c		       a4 8b		      ldy	savedBank
    697  7c1e		       84 3f		      sty	SET_BANK
    698  7c20		       60		      rts
    699  7c21
    700  7c21							;---------------------------------------------------------------------------------------------------
    701  7c21
      0  7c21					      DEF	GetValid
      1  7c21				   BANK_GetValid SET	_CURRENT_BANK
      2  7c21				   GetValid
      3  7c21				   TEMPORARY_VAR SET	Overlay
      4  7c21				   TEMPORARY_OFFSET SET	0
      5  7c21					      SUBROUTINE
    703  7c21		       a9 08		      lda	#RAMBANK_MOVES_RAM
    704  7c23		       85 3e		      sta	SET_BANK_RAM
    705  7c25		       b9 15 f0 	      lda	ValidSquare,y
    706  7c28		       a4 8b		      ldy	savedBank
    707  7c2a		       84 3f		      sty	SET_BANK
    708  7c2c		       60		      rts
    709  7c2d
    710  7c2d
    711  7c2d
      0  7c2d					      DEF	GetBoard
      1  7c2d				   BANK_GetBoard SET	_CURRENT_BANK
      2  7c2d				   GetBoard
      3  7c2d				   TEMPORARY_VAR SET	Overlay
      4  7c2d				   TEMPORARY_OFFSET SET	0
      5  7c2d					      SUBROUTINE
    713  7c2d		       a9 08		      lda	#RAMBANK_MOVES_RAM
    714  7c2f		       85 3e		      sta	SET_BANK_RAM
    715  7c31		       b9 79 f0 	      lda	Board,y
    716  7c34		       a4 8b		      ldy	savedBank
    717  7c36		       84 3f		      sty	SET_BANK
    718  7c38		       60		      rts
    719  7c39
      0  7c39					      DEF	PutBoard
      1  7c39				   BANK_PutBoard SET	_CURRENT_BANK
      2  7c39				   PutBoard
      3  7c39				   TEMPORARY_VAR SET	Overlay
      4  7c39				   TEMPORARY_OFFSET SET	0
      5  7c39					      SUBROUTINE
    721  7c39		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    722  7c3b		       86 3e		      stx	SET_BANK_RAM
    723  7c3d		       99 79 f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    724  7c40		       a6 8b		      ldx	savedBank
    725  7c42		       86 3f		      stx	SET_BANK
    726  7c44		       60		      rts
    727  7c45
    728  7c45							;---------------------------------------------------------------------------------------------------
    729  7c45
      0  7c45					      DEF	SAFE_IsValidMoveFromSquare
      1  7c45				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7c45				   SAFE_IsValidMoveFromSquare
      3  7c45				   TEMPORARY_VAR SET	Overlay
      4  7c45				   TEMPORARY_OFFSET SET	0
      5  7c45					      SUBROUTINE
    731  7c45					      SUBROUTINE
    732  7c45
    733  7c45							; Does the square exist in the movelist?
    734  7c45
    735  7c45		       a6 88		      ldx	cursorX12
    736  7c47		       86 85		      stx	fromX12
    737  7c49		       8a		      txa
    738  7c4a
    739  7c4a		       a4 95		      ldy	currentPly
    740  7c4c		       84 3e		      sty	SET_BANK_RAM
    741  7c4e		       20 68 f3 	      jsr	CheckMoveListFromSquare
    742  7c51
    743  7c51		       a5 8b		      lda	savedBank
    744  7c53		       85 3f		      sta	SET_BANK
    745  7c55		       60		      rts
    746  7c56
    747  7c56
    748  7c56							;---------------------------------------------------------------------------------------------------
    749  7c56
      0  7c56					      DEF	GetPiece
      1  7c56				   BANK_GetPiece SET	_CURRENT_BANK
      2  7c56				   GetPiece
      3  7c56				   TEMPORARY_VAR SET	Overlay
      4  7c56				   TEMPORARY_OFFSET SET	0
      5  7c56					      SUBROUTINE
    751  7c56					      SUBROUTINE
    752  7c56
    753  7c56							; Retrieve the piece+flags from the movelist, given from/to squares
    754  7c56							; Required as moves have different flags but same origin squares (e.g., castling)
    755  7c56
    756  7c56		       a5 95		      lda	currentPly
    757  7c58		       85 3e		      sta	SET_BANK_RAM
    758  7c5a
    759  7c5a		       20 a6 f3 	      jsr	GetPieceGivenFromToSquares
    760  7c5d
    761  7c5d		       a5 8b		      lda	savedBank
    762  7c5f		       85 3f		      sta	SET_BANK
    763  7c61		       60		      rts
    764  7c62
    765  7c62							;---------------------------------------------------------------------------------------------------
    766  7c62
    767  7c62
      0  7c62					      DEF	CopyShadowROMtoRAM
      1  7c62				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7c62				   CopyShadowROMtoRAM
      3  7c62				   TEMPORARY_VAR SET	Overlay
      4  7c62				   TEMPORARY_OFFSET SET	0
      5  7c62					      SUBROUTINE
    769  7c62					      SUBROUTINE
    770  7c62
      0  7c62					      VAR	__destinationBank, 1
      1  7c62				   __destinationBank SET	TEMPORARY_VAR
      2  7c62				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7c62
      4  7c62				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7c62				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7c62				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7c62					      ENDIF
      8  7c62				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7c62				  -	      ECHO	"Temporary Variable", __destinationBank, "overflow!"
     10  7c62				  -	      ERR
     11  7c62					      ENDIF
     12  7c62					      LIST	ON
      0  7c62					      VAR	__sourceBank, 1
      1  7c62				   __sourceBank SET	TEMPORARY_VAR
      2  7c62				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7c62
      4  7c62				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7c62				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7c62				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7c62					      ENDIF
      8  7c62				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7c62				  -	      ECHO	"Temporary Variable", __sourceBank, "overflow!"
     10  7c62				  -	      ERR
     11  7c62					      ENDIF
     12  7c62					      LIST	ON
    773  7c62
    774  7c62
    775  7c62							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    776  7c62							; used to setup callable RAM code from ROM templates
    777  7c62
    778  7c62							; x = source ROM bank
    779  7c62							; y = destination RAM bank (preserved)
    780  7c62
    781  7c62		       86 9d		      stx	__sourceBank
    782  7c64
    783  7c64		       a2 00		      ldx	#0
    784  7c66		       a5 9d	   .copyPage  lda	__sourceBank
    785  7c68		       85 3f		      sta	SET_BANK
    786  7c6a
    787  7c6a		       bd 00 f0 	      lda	$F000,x
    788  7c6d		       48		      pha
    789  7c6e		       bd 00 f1 	      lda	$F100,x
    790  7c71		       48		      pha
    791  7c72		       bd 00 f2 	      lda	$F200,x
    792  7c75		       48		      pha
    793  7c76		       bd 00 f3 	      lda	$F300,x
    794  7c79
    795  7c79		       84 3e		      sty	SET_BANK_RAM
    796  7c7b
    797  7c7b		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    798  7c7e		       68		      pla
    799  7c7f		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    800  7c82		       68		      pla
    801  7c83		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    802  7c86		       68		      pla
    803  7c87		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    804  7c8a
    805  7c8a		       ca		      dex
    806  7c8b		       d0 d9		      bne	.copyPage
    807  7c8d
    808  7c8d		       a5 8b		      lda	savedBank
    809  7c8f		       85 3f		      sta	SET_BANK
    810  7c91		       60		      rts
    811  7c92
    812  7c92
    813  7c92							;---------------------------------------------------------------------------------------------------
    814  7c92
      0  7c92					      DEF	CopySinglePiece
      1  7c92				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7c92				   CopySinglePiece
      3  7c92				   TEMPORARY_VAR SET	Overlay
      4  7c92				   TEMPORARY_OFFSET SET	0
      5  7c92					      SUBROUTINE
    816  7c92					      SUBROUTINE
      0  7c92					      TIMING	COPYSINGLEPIECE, (2600)
      1  7c92		       00 29	   SPEEDOF_COPYSINGLEPIECE =	((2600)/64) + 1
    818  7c92
    819  7c92							; WARNING: CANNOT USE VAR/OVERLAY IN ANY ROUTINE CALLING THIS!!
    820  7c92							; ALSO CAN'T USE IN THIS ROUTINE
    821  7c92							; This routine will STOMP on those vars due to __pieceShapeBuffer occupying whole overlay
    822  7c92							; @2150 max
    823  7c92							; = 33 TIM64T
    824  7c92
      0  7c92					      JSROM	CopySetup
      1  7c92
      2  7c92		       a9 09		      lda	#BANK_CopySetup
      3  7c94		       85 3f		      sta	SET_BANK
      4  7c96		       20 75 f1 	      jsr	CopySetup
    826  7c99
      0  7c99					      DEF	InterceptMarkerCopy
      1  7c99				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7c99				   InterceptMarkerCopy
      3  7c99				   TEMPORARY_VAR SET	Overlay
      4  7c99				   TEMPORARY_OFFSET SET	0
      5  7c99					      SUBROUTINE
    828  7c99					      SUBROUTINE
    829  7c99
    830  7c99
    831  7c99							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    832  7c99							; y = piece index
    833  7c99
    834  7c99		       a9 00		      lda	#BANK_PIECE_VECTOR_BANK
    835  7c9b		       85 3f		      sta	SET_BANK
    836  7c9d
    837  7c9d		       b9 37 f1 	      lda	PIECE_VECTOR_LO,y
    838  7ca0		       85 e4		      sta	__ptr
    839  7ca2		       b9 c7 f1 	      lda	PIECE_VECTOR_HI,y
    840  7ca5		       85 e5		      sta	__ptr+1
    841  7ca7		       b9 57 f2 	      lda	PIECE_VECTOR_BANK,y
    842  7caa		       85 3f		      sta	SET_BANK
    843  7cac
    844  7cac		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
    845  7cae		       b1 e4	   .copy      lda	(__ptr),y
    846  7cb0		       99 9c 00 	      sta	__pieceShapeBuffer,y
    847  7cb3		       88		      dey
    848  7cb4		       10 f8		      bpl	.copy
    849  7cb6
    850  7cb6		       a5 80		      lda	squareToDraw
    851  7cb8		       38		      sec
    852  7cb9		       a2 0a		      ldx	#10
    853  7cbb		       e9 0a	   .sub10     sbc	#10
    854  7cbd		       ca		      dex
    855  7cbe		       b0 fb		      bcs	.sub10
    856  7cc0
    857  7cc0		       86 3e		      stx	SET_BANK_RAM	; row
    858  7cc2
    859  7cc2		       69 08		      adc	#8
    860  7cc4		       c9 04		      cmp	#4	; CS = right side of screen
    861  7cc6
    862  7cc6		       20 9b f1 	      jsr	CopyPieceToRowBitmap
    863  7cc9
    864  7cc9		       a5 8b		      lda	savedBank
    865  7ccb		       85 3f		      sta	SET_BANK
    866  7ccd		       60		      rts
    867  7cce
    868  7cce							;---------------------------------------------------------------------------------------------------
    869  7cce
      0  7cce					      DEF	SAFE_getMoveIndex
      1  7cce				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7cce				   SAFE_getMoveIndex
      3  7cce				   TEMPORARY_VAR SET	Overlay
      4  7cce				   TEMPORARY_OFFSET SET	0
      5  7cce					      SUBROUTINE
    871  7cce					      SUBROUTINE
    872  7cce
    873  7cce		       a9 09		      lda	#RAMBANK_PLY
    874  7cd0		       85 3e		      sta	SET_BANK_RAM
    875  7cd2		       ad f1 f1 	      lda	moveIndex
    876  7cd5		       a6 8b		      ldx	savedBank
    877  7cd7		       86 3f		      stx	SET_BANK
    878  7cd9		       60		      rts
    879  7cda
    880  7cda
    881  7cda							;---------------------------------------------------------------------------------------------------
    882  7cda
      0  7cda					      DEF	GoFixPieceList
      1  7cda				   BANK_GoFixPieceList SET	_CURRENT_BANK
      2  7cda				   GoFixPieceList
      3  7cda				   TEMPORARY_VAR SET	Overlay
      4  7cda				   TEMPORARY_OFFSET SET	0
      5  7cda					      SUBROUTINE
    884  7cda
    885  7cda		       85 3e		      sta	SET_BANK_RAM
    886  7cdc		       20 d8 f2 	      jsr	FixPieceList
    887  7cdf		       a5 8b		      lda	savedBank
    888  7ce1		       85 3f		      sta	SET_BANK
    889  7ce3		       60		      rts
    890  7ce4
    891  7ce4							;---------------------------------------------------------------------------------------------------
    892  7ce4
      0  7ce4					      DEF	markerDraw
      1  7ce4				   BANK_markerDraw SET	_CURRENT_BANK
      2  7ce4				   markerDraw
      3  7ce4				   TEMPORARY_VAR SET	Overlay
      4  7ce4				   TEMPORARY_OFFSET SET	0
      5  7ce4					      SUBROUTINE
    894  7ce4
    895  7ce4		       a2 1c		      ldx	#INDEX_WHITE_MARKER_on_WHITE_SQUARE_0
      0  7ce6					      JSROM	CopySetupForMarker
      1  7ce6
      2  7ce6		       a9 09		      lda	#BANK_CopySetupForMarker
      3  7ce8		       85 3f		      sta	SET_BANK
      4  7cea		       20 4a f1 	      jsr	CopySetupForMarker
    897  7ced		       4c 99 fc 	      jmp	InterceptMarkerCopy
    898  7cf0
    899  7cf0							;---------------------------------------------------------------------------------------------------
    900  7cf0
      0  7cf0					      DEF	showPromoteOptions
      1  7cf0				   BANK_showPromoteOptions SET	_CURRENT_BANK
      2  7cf0				   showPromoteOptions
      3  7cf0				   TEMPORARY_VAR SET	Overlay
      4  7cf0				   TEMPORARY_OFFSET SET	0
      5  7cf0					      SUBROUTINE
    902  7cf0					      SUBROUTINE
    903  7cf0
    904  7cf0							; X = character shape # (?/N/B/R/Q)
    905  7cf0
    906  7cf0		       a4 86		      ldy	toX12
    907  7cf2		       84 80		      sty	squareToDraw
    908  7cf4
      0  7cf4					      JSROM	CopySetupForMarker
      1  7cf4
      2  7cf4		       a9 09		      lda	#BANK_CopySetupForMarker
      3  7cf6		       85 3f		      sta	SET_BANK
      4  7cf8		       20 4a f1 	      jsr	CopySetupForMarker
    910  7cfb		       4c 99 fc 	      jmp	InterceptMarkerCopy
    911  7cfe
    912  7cfe							;		      lda savedBank
    913  7cfe							;		      sta SET_BANK
    914  7cfe							;		      rts
    915  7cfe
    916  7cfe							;---------------------------------------------------------------------------------------------------
    917  7cfe
      0  7cfe					      DEF	SAFE_BackupBitmaps
      1  7cfe				   BANK_SAFE_BackupBitmaps SET	_CURRENT_BANK
      2  7cfe				   SAFE_BackupBitmaps
      3  7cfe				   TEMPORARY_VAR SET	Overlay
      4  7cfe				   TEMPORARY_OFFSET SET	0
      5  7cfe					      SUBROUTINE
    919  7cfe
    920  7cfe		       84 3e		      sty	SET_BANK_RAM
    921  7d00		       20 f4 f2 	      jsr	SaveBitmap
    922  7d03		       a5 8b		      lda	savedBank
    923  7d05		       85 3f		      sta	SET_BANK
    924  7d07		       60		      rts
    925  7d08
    926  7d08							;---------------------------------------------------------------------------------------------------
    927  7d08
      0  7d08					      DEF	SAFE_IsSquareUnderAttack
      1  7d08				   BANK_SAFE_IsSquareUnderAttack SET	_CURRENT_BANK
      2  7d08				   SAFE_IsSquareUnderAttack
      3  7d08				   TEMPORARY_VAR SET	Overlay
      4  7d08				   TEMPORARY_OFFSET SET	0
      5  7d08					      SUBROUTINE
    929  7d08
    930  7d08							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
    931  7d08
    932  7d08							; Pass:	 currentPly = which movelist to check
    933  7d08							;		 A = X12 square to check
    934  7d08							; Return:	 CC = No, CS = Yes
    935  7d08
    936  7d08		       a6 95		      ldx	currentPly
    937  7d0a		       86 3e		      stx	SET_BANK_RAM
    938  7d0c		       20 7c f3 	      jsr	IsSquareUnderAttack
    939  7d0f		       a5 8b		      lda	savedBank
    940  7d11		       85 3f		      sta	SET_BANK
    941  7d13		       60		      rts
    942  7d14
    943  7d14							;---------------------------------------------------------------------------------------------------
    944  7d14
      0  7d14					      DEF	SAFE_showMoveCaptures
      1  7d14				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7d14				   SAFE_showMoveCaptures
      3  7d14				   TEMPORARY_VAR SET	Overlay
      4  7d14				   TEMPORARY_OFFSET SET	0
      5  7d14					      SUBROUTINE
    946  7d14					      SUBROUTINE
    947  7d14
      0  7d14					      JSROM	UNSAFE_showMoveCaptures
      1  7d14
      2  7d14		       a9 09		      lda	#BANK_UNSAFE_showMoveCaptures
      3  7d16		       85 3f		      sta	SET_BANK
      4  7d18		       20 00 f0 	      jsr	UNSAFE_showMoveCaptures
    949  7d1b		       a5 8b		      lda	savedBank
    950  7d1d		       85 3f		      sta	SET_BANK
    951  7d1f		       60		      rts
    952  7d20
    953  7d20
    954  7d20							;---------------------------------------------------------------------------------------------------
    955  7d20
      0  7d20					      DEF	GetMoveFrom
      1  7d20				   BANK_GetMoveFrom SET	_CURRENT_BANK
      2  7d20				   GetMoveFrom
      3  7d20				   TEMPORARY_VAR SET	Overlay
      4  7d20				   TEMPORARY_OFFSET SET	0
      5  7d20					      SUBROUTINE
    957  7d20		       a9 09		      lda	#RAMBANK_PLY
    958  7d22		       85 3e		      sta	SET_BANK_RAM
    959  7d24		       a4 8b		      ldy	savedBank
    960  7d26		       bd 76 f0 	      lda	MoveFrom,x
    961  7d29		       84 3f		      sty	SET_BANK
    962  7d2b		       60		      rts
    963  7d2c
      0  7d2c					      DEF	GetMoveTo
      1  7d2c				   BANK_GetMoveTo SET	_CURRENT_BANK
      2  7d2c				   GetMoveTo
      3  7d2c				   TEMPORARY_VAR SET	Overlay
      4  7d2c				   TEMPORARY_OFFSET SET	0
      5  7d2c					      SUBROUTINE
    965  7d2c		       a9 09		      lda	#RAMBANK_PLY
    966  7d2e		       85 3e		      sta	SET_BANK_RAM
    967  7d30		       a4 8b		      ldy	savedBank
    968  7d32		       bd 00 f1 	      lda	MoveTo,x
    969  7d35		       84 3f		      sty	SET_BANK
    970  7d37		       60		      rts
    971  7d38
      0  7d38					      DEF	GetMovePiece
      1  7d38				   BANK_GetMovePiece SET	_CURRENT_BANK
      2  7d38				   GetMovePiece
      3  7d38				   TEMPORARY_VAR SET	Overlay
      4  7d38				   TEMPORARY_OFFSET SET	0
      5  7d38					      SUBROUTINE
    973  7d38		       a9 09		      lda	#RAMBANK_PLY
    974  7d3a		       85 3e		      sta	SET_BANK_RAM
    975  7d3c		       a4 8b		      ldy	savedBank
    976  7d3e		       bd 78 f1 	      lda	MovePiece,x
    977  7d41		       84 3f		      sty	SET_BANK
    978  7d43		       60		      rts
    979  7d44
    980  7d44
    981  7d44							;---------------------------------------------------------------------------------------------------
    982  7d44
 FREE BYTES IN FIXED BANK =  $2b8
    983  7d44					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
    984  7d44
    985  7d44
    986  7d44							;---------------------------------------------------------------------------------------------------
    987  7d44							; The reset vectors
    988  7d44							; these must live in the fixed bank (last 2K of any ROM image in "3E" scheme)
    989  7d44
    990  8000 ????				      SEG	InterruptVectors
    991  7ffc					      ORG	FIXED_BANK + $7FC
    992  7ffc					      RORG	$7ffC
    993  7ffc
    994  7ffc		       00 f8		      .word.w	Reset	; RESET
    995  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
    996  8000
    997  8000							;---------------------------------------------------------------------------------------------------
    998  8000							; EOF
------- FILE ./chess.asm
    475  8000
    476  8000							;END
