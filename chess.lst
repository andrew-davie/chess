------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????	       00 80	   PIECE_COLOUR =	128	; mask
      6  0000 ????
      7  0000 ????
      8  0000 ????	       00 40	   MOVED      =	64	; mark ALL pieces when moved. Used for castling
      9  0000 ????						; but maybe useful for evaluation of development
     10  0000 ????	       00 20	   PHANTOM    =	32	; a phantom king (via castling)
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 01	   PAWN       =	1
     18  0000 ????	       00 02	   KNIGHT     =	2
     19  0000 ????	       00 03	   BISHOP     =	3
     20  0000 ????	       00 04	   ROOK       =	4
     21  0000 ????	       00 05	   QUEEN      =	5
     22  0000 ????	       00 06	   KING       =	6
     23  0000 ????
     24  0000 ????	       00 07	   PIECE_MASK =	7	; trim off the flags leaving just piece ID
     25  0000 ????
     26  0000 ????						;---------------------------------------------------------------------------------------------------
     27  0000 ????
     28  0000 ????						; Movements
     29  0000 ????
     30  0000 ????	       00 0c	   _UP	      =	12	; up
     31  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     32  0000 ????	       ff ff ff f4 _DOWN      =	-12	; down
     33  0000 ????	       00 01	   _RIGHT     =	1	; right
     34  0000 ????
     35  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						;===================================
     31  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     32  0000 ????						;===================================
     33  0000 ????
     34  0000 ????						;-------------------------------------------------------------------------------
     35  0000 ????						; The following are optional YES/NO depending on phase of the moon
     36  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     37  0000 ????						;-------------------------------------------------------------------------------
     38  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     39  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     40  0000 ????			  -	      IF	FINAL_VERSION = YES
     41  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     42  0000 ????				      ENDIF
     43  0000 ????
     44  0000 ????						;-------------------------------------------------------------------------------
     45  0000 ????
     46  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     47  0000 ????	       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
     48  0000 ????
     49  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     50  0000 ????
     51  0000 ????						;------------------------------------------------------------------------------
     52  0000 ????
     53  0000 ????	       00 01	   PLUSCART   =	YES
     54  0000 ????
     55  0000 ????						;------------------------------------------------------------------------------
     56  0000 ????
     57  0000 ????
     58  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     59  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     60  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     61  0000 ????
     62  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     63  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     64  0000 ????
     65  0000 ????
     66  0000 ????	       10 00	   RAM_3E     =	$1000
     67  0000 ????	       04 00	   RAM_SIZE   =	$400
     68  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     69  0000 ????
     70  0000 ????
     71  0000 ????						; Platform constants:
     72  0000 ????	       00 02	   PAL	      =	%10
     73  0000 ????	       00 02	   PAL_50     =	PAL|0
     74  0000 ????	       00 03	   PAL_60     =	PAL|1
     75  0000 ????
     76  0000 ????
     77  0000 ????				      IF	L276
     78  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     79  0000 ????			  -	      ELSE
     80  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     81  0000 ????				      ENDIF
     82  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     83  0000 ????
     84  0000 ????				      IF	L276
     85  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     86  0000 ????			  -	      ELSE
     87  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     88  0000 ????				      ENDIF
     89  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     90  0000 ????
     91  0000 ????				      IF	L276
     92  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     93  0000 ????			  -	      ELSE
     94  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     95  0000 ????				      ENDIF
     96  0000 ????	       01 38	   SCANLINES_PAL =	312
     97  0000 ????
     98  0000 ????
     99  0000 ????						;------------------------------------------------------------------------------
    100  0000 ????						; MACRO definitions
    101  0000 ????
    102  0000 ????
    103  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    104  0000 ????
    105  0000 ????				      MAC	newbank
    106  0000 ????				      SEG	{1}
    107  0000 ????				      ORG	ORIGIN
    108  0000 ????				      RORG	$F000
    109  0000 ????			   BANK_START SET	*
    110  0000 ????			   {1}	      SET	ORIGIN / 2048
    111  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    112  0000 ????			   _CURRENT_BANK SET	{1}
    113  0000 ????				      ENDM		; bank name
    114  0000 ????
    115  0000 ????				      MAC	define_1k_segment
    116  0000 ????				      ALIGN	$400
    117  0000 ????			   SEGMENT_{1} SET	*
    118  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    119  0000 ????				      ENDM		; {seg name}
    120  0000 ????
    121  0000 ????				      MAC	check_bank_size
    122  0000 ????			   .TEMP      =	* - BANK_START
    123  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    124  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    125  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    126  0000 ????				      ERR
    127  0000 ????				      endif
    128  0000 ????				      ENDM		; name
    129  0000 ????
    130  0000 ????
    131  0000 ????				      MAC	check_half_bank_size
    132  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    133  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    134  0000 ????			   .TEMP      =	* - BANK_START
    135  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    136  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    137  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    138  0000 ????				      ERR
    139  0000 ????				      endif
    140  0000 ????				      ENDM		; name
    141  0000 ????
    142  0000 ????
    143  0000 ????
    144  0000 ????						;--------------------------------------------------------------------------
    145  0000 ????						; Macro inserts a page break if the object would overlap a page
    146  0000 ????
    147  0000 ????				      MAC	optional_pagebreak
    148  0000 ????				      LIST	OFF
    149  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    150  0000 ????			   EARLY_LOCATION SET	*
    151  0000 ????				      ALIGN	256
    152  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    153  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    154  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    155  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    156  0000 ????				      ENDIF
    157  0000 ????				      LIST	ON
    158  0000 ????				      ENDM		; { string, size }
    159  0000 ????
    160  0000 ????
    161  0000 ????				      MAC	check_page_crossing
    162  0000 ????				      LIST	OFF
    163  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    164  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    165  0000 ????				      endif
    166  0000 ????				      LIST	ON
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????				      MAC	checkpage
    170  0000 ????				      LIST	OFF
    171  0000 ????				      IF	>. != >{1}
    172  0000 ????				      ECHO	""
    173  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    174  0000 ????				      ECHO	""
    175  0000 ????				      ERR
    176  0000 ????				      ENDIF
    177  0000 ????				      LIST	ON
    178  0000 ????				      ENDM
    179  0000 ????
    180  0000 ????				      MAC	checkpagex
    181  0000 ????				      LIST	OFF
    182  0000 ????				      IF	>. != >{1}
    183  0000 ????				      ECHO	""
    184  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    185  0000 ????				      ECHO	{2}
    186  0000 ????				      ECHO	""
    187  0000 ????				      ERR
    188  0000 ????				      ENDIF
    189  0000 ????				      LIST	ON
    190  0000 ????				      ENDM
    191  0000 ????
    192  0000 ????
    193  0000 ????				      MAC	checkpage_bne
    194  0000 ????				      LIST	OFF
    195  0000 ????				      IF	0	;>(. + 2) != >{1}
    196  0000 ????				      ECHO	""
    197  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    198  0000 ????				      ECHO	""
    199  0000 ????				      ERR
    200  0000 ????				      ENDIF
    201  0000 ????				      LIST	ON
    202  0000 ????				      bne	{1}
    203  0000 ????				      ENDM
    204  0000 ????
    205  0000 ????				      MAC	checkpage_bpl
    206  0000 ????				      LIST	OFF
    207  0000 ????				      IF	(>(.+2 )) != >{1}
    208  0000 ????				      ECHO	""
    209  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    210  0000 ????				      ECHO	""
    211  0000 ????				      ERR
    212  0000 ????				      ENDIF
    213  0000 ????				      LIST	ON
    214  0000 ????				      bpl	{1}
    215  0000 ????				      ENDM
    216  0000 ????
    217  0000 ????				      MAC	align_free
    218  0000 ????			   FREE       SET	FREE - .
    219  0000 ????				      align	{1}
    220  0000 ????			   FREE       SET	FREE + .
    221  0000 ????				      echo	"@", ., ":", FREE
    222  0000 ????				      ENDM
    223  0000 ????
    224  0000 ????						;--------------------------------------------------------------------------
    225  0000 ????
    226  0000 ????				      MAC	vector
    227  0000 ????				      .word	{1}
    228  0000 ????				      ENDM		; just a word pointer to code
    229  0000 ????
    230  0000 ????
    231  0000 ????				      MAC	define_subroutine
    232  0000 ????			   BANK_{1}   =	_CURRENT_BANK	; bank in which this subroutine resides
    233  0000 ????				      SUBROUTINE		; keep everything local
    234  0000 ????			   {1}			; entry point
    235  0000 ????				      ENDM		; name of subroutine
    236  0000 ????
    237  0000 ????
    238  0000 ????
    239  0000 ????						;--------------------------------------------------------------------------
    240  0000 ????
    241  0000 ????				      MAC	newrambank
    242  0000 ????				      SEG.U	{1}
    243  0000 ????				      ORG	ORIGIN_RAM
    244  0000 ????				      RORG	RAM_3E
    245  0000 ????			   BANK_START SET	*
    246  0000 ????			   {1}	      SET	ORIGIN_RAM / RAM_SIZE
    247  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    248  0000 ????				      ENDM		; bank name
    249  0000 ????
    250  0000 ????						; TODO - fix - this is faulty....
    251  0000 ????				      MAC	validate_ram_size
    252  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    253  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    254  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    255  0000 ????				      ERR
    256  0000 ????				      ENDIF
    257  0000 ????				      ENDM
    258  0000 ????
    259  0000 ????
    260  0000 ????				      MAC	resync
    261  0000 ????						; resync screen, X and Y == 0 afterwards
    262  0000 ????				      lda	#%10	; make sure VBLANK is ON
    263  0000 ????				      sta	VBLANK
    264  0000 ????
    265  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    266  0000 ????			   .loopResync
    267  0000 ????				      VERTICAL_SYNC
    268  0000 ????
    269  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    270  0000 ????				      lda	Platform
    271  0000 ????				      eor	#PAL_50	; PAL-50?
    272  0000 ????				      bne	.ntsc
    273  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    274  0000 ????			   .ntsc
    275  0000 ????			   .loopWait
    276  0000 ????				      sta	WSYNC
    277  0000 ????				      sta	WSYNC
    278  0000 ????				      dey
    279  0000 ????				      bne	.loopWait
    280  0000 ????				      dex
    281  0000 ????				      bne	.loopResync
    282  0000 ????				      ENDM
    283  0000 ????
    284  0000 ????				      MAC	set_platform
    285  0000 ????						; 00 = NTSC
    286  0000 ????						; 01 = NTSC
    287  0000 ????						; 10 = PAL-50
    288  0000 ????						; 11 = PAL-60
    289  0000 ????				      lda	SWCHB
    290  0000 ????				      rol
    291  0000 ????				      rol
    292  0000 ????				      rol
    293  0000 ????				      and	#%11
    294  0000 ????				      eor	#PAL
    295  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    296  0000 ????				      ENDM
    297  0000 ????
    298  0000 ????
    299  0000 ????						;------------------------------------------------------------------------------
    300  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00ed ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   doubleBufferBase ds	1	; switcher for which draw buffer in use points to DRAW one
     12 U0083		       00	   drawPhase  ds	1	; ticks through the board draw process
     13 U0084		       00	   drawDelay  ds	1
     14 U0085		       00	   lastSquare ds	1
     15 U0086		       00	   drawCount  ds	1
     16 U0087		       00	   snail      ds	1
     17 U0088		       00 00	   title_colour_table ds	2
     18 U008a		       00	   currentPiece ds	1
     19 U008b		       00	   currentSquare ds	1
     20 U008c		       00	   returnBank ds	1
     21 U008d
     22 U008d		       00	   fromSquare ds	1
     23 U008e		       00	   fromPiece  ds	1
     24 U008f		       00	   toSquare   ds	1
     25 U0090		       00	   toPiece    ds	1
     26 U0091		       00	   lastPiece  ds	1
     27 U0092		       00	   __fromRow  ds	1
     28 U0093		       00	   previousPiece ds	1
     29 U0094		       00	   movePointer ds	1
     30 U0095
     31 U0095		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     32 U0096		       00	   BufferedJoystick ds	1	; player joystick input
     33 U0097		       00	   PreviousJoystick ds	1
     34 U0098							;BGColour			  ds 1
     35 U0098		       00 00	   colour_table ds	2
     36 U009a
     37 U009a		       00 00	   Board_AddressR ds	2
     38 U009c		       00 00	   Board_AddressW ds	2
     39 U009e		       00	   ROM_Bank   ds	1	; last switched ROM bank (not accessible if RAM subsequently switched)
     40 U009f		       00	   RAM_Bank   ds	1
     41 U00a0
     42 U00a0
     43 U00a0		       00	   ObjIterator ds	1	; count UP iterator over objects
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a1					      include	"overlays.asm"
      1 U00a1							; Chess
      2 U00a1							; Atari 2600 Chess display system
      3 U00a1							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a1							; andrew@taswegian.com
      5 U00a1
      6 U00a1							;---------------------------------------------------------------------------------------------------
      7 U00a1							; OVERLAYS!
      8 U00a1							; These variables are overlays, and should be managed with care
      9 U00a1							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a1							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a1							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a1							; overlay #2
     13 U00a1
     14 U00a1							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a1
     16 U00a1							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a1							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a1							;---------------------------------------------------------------------------------------------------
     19 U00a1
     20 U00a1					      MAC	overlay
     21 U00a1				   OVERLAY_NAME SET	{1}
     22 U00a1					      SEG.U	OVERLAY_{1}
     23 U00a1					      org	Overlay
     24 U00a1					      ENDM		; {name}
     25 U00a1
     26 U00a1							;---------------------------------------------------------------------------------------------------
     27 U00a1
     28 U00a1					      MAC	validate_overlay
     29 U00a1					      LIST	OFF
     30 U00a1				   OVERLAY_DELTA SET	* - Overlay
     31 U00a1					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a1				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a1					      ENDIF
     34 U00a1					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a1					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a1					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a1					      ERR
     38 U00a1					      ENDIF
     39 U00a1					      LIST	ON
     40 U00a1					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a1					      ENDM
     42 U00a1
     43 U00a1							;---------------------------------------------------------------------------------------------------
     44 U00a1
     45 U00a1				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a1				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a1
     48 U00a1
     49 U00a1							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a1							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a1							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a1							; (especially the latter ones) are only used in rare occasions.
     53 U00a1
     54 U00a1							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a1							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a1
     57 U00a1		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00ed
     59 U00ed							;---------------------------------------------------------------------------------------------------
     60 U00ed							; And now... the overlays....
     61 U00ed
 ---- OVERLAYS ( $4c bytes ) ----
     62 U00ed					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     63 U00ed
     64 U00ed							;---------------------------------------------------------------------------------------------------
     65 U00ed
      0 U00ed					      OVERLAY	"PieceBufferOverlay"
      1 U00ed				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00ed ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a1					      org	Overlay
     67 U00a1							; used in CopyPieceFromRAMBufferToScreen
     68 U00a1							; used in CopyPieceToRAMBuffer
     69 U00a1							; used in ClearChessBitmap
     70 U00a1							; used in CopyPieceToRowBitmap
     71 U00a1		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     72 U00e9		       00 00	   __ptr      ds	2	; pointer to data
     73 U00eb		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00ed					      VALIDATE_OVERLAY
     11 U00ed					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00ed					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     75 U00ed
     76 U00ed							;---------------------------------------------------------------------------------------------------
     77 U00ed
      0 U00ed					      OVERLAY	"CopyROMShadowToRAM"
      1 U00ed				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U00a4 ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a1					      org	Overlay
     79 U00a1		       00	   __CopyCount ds	1
     80 U00a2		       00	   __ROM_SourceBank ds	1
     81 U00a3		       00	   __index    ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     83 U00a4
     84 U00a4							;---------------------------------------------------------------------------------------------------
     85 U00a4
      0 U00a4					      OVERLAY	"DrawTheChessScreen"
      1 U00a4				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U00a2 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a1					      org	Overlay
     87 U00a1		       00	   __rows     ds	1
      0 U00a2					      VALIDATE_OVERLAY
     11 U00a2					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a2					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     89 U00a2
     90 U00a2							;---------------------------------------------------------------------------------------------------
     91 U00a2
      0 U00a2					      OVERLAY	"SetupShadowRAM"
      1 U00a2				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U00a3 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a1					      org	Overlay
     93 U00a1		       00	   __destinationBank ds	1
     94 U00a2		       00	   __sourceBank ds	1
      0 U00a3					      VALIDATE_OVERLAY
     11 U00a3					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     96 U00a3
     97 U00a3							;---------------------------------------------------------------------------------------------------
      0 U00a3					      OVERLAY	"DrawPiece"
      1 U00a3				   OVERLAY_NAME SET	"DrawPiece"
      2 U00a2 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a1					      org	Overlay
     99 U00a1		       00	   __pieceColour ds	1
      0 U00a2					      VALIDATE_OVERLAY
     11 U00a2					      LIST	ON
 DrawPiece - $4b bytes available
     12 U00a2					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    101 U00a2
    102 U00a2							;---------------------------------------------------------------------------------------------------
      0 U00a2					      OVERLAY	"RandomPiece"
      1 U00a2				   OVERLAY_NAME SET	"RandomPiece"
      2 U00a2 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a1					      org	Overlay
    104 U00a1		       00	   __tempx    ds	1
      0 U00a2					      VALIDATE_OVERLAY
     11 U00a2					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a2					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    106 U00a2
    107 U00a2							;---------------------------------------------------------------------------------------------------
      0 U00a2					      OVERLAY	"Handlers"
      1 U00a2				   OVERLAY_NAME SET	"Handlers"
      2 U00ae ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a1					      org	Overlay
    109 U00a1		       00	   __piece    ds	1
      0 U00a2					      VALIDATE_OVERLAY
     11 U00a2					      LIST	ON
 Handlers - $4b bytes available
     12 U00a2					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    111 U00a2
    112 U00a2							;---------------------------------------------------------------------------------------------------
    113 U00a2
 ---- END OF OVERLAYS ----
    114 U00a2					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    115 U00a2					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    116 U00a2
    117 U00a2							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00a2					      include	"stack.asm"
      1 U00a2							; Chess
      2 U00a2							; Atari 2600 Chess display system
      3 U00a2							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a2							; andrew@taswegian.com
      5 U00a2
      6 U00a2		       00 00 00 00*	      ds	RESERVED_FOR_STACK
------- FILE ./chess.asm
    304 U00ae
 FREE BYTES IN ZERO PAGE =  $51
    305 U00ae					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    306 U00ae				  -	      IF	* > $FF
    307 U00ae				  -	      ERR	"Zero Page overflow!"
    308 U00ae					      ENDIF
    309 U00ae
    310 U00ae							;------------------------------------------------------------------------------
    311 U00ae							;##############################################################################
    312 U00ae							;------------------------------------------------------------------------------
    313 U00ae
    314 U00ae							; NOW THE VERY INTERESTING '3E' RAM BANKS
    315 U00ae							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 2k TOTAL
    316 U00ae
      0 U00ae					      NEWRAMBANK	BANK_SCREENMARKII1
      1 U0000 ????				      SEG.U	BANK_SCREENMARKII1
      2 U0000					      ORG	ORIGIN_RAM
      3 U0000					      RORG	RAM_3E
      4 U0000				   BANK_START SET	*
      5 U0000				   BANK_SCREENMARKII1 SET	ORIGIN_RAM / RAM_SIZE
      6 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    318 U0000
    319 U0000							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    320 U0000							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    321 U0000							; The variable definitions are also in that ROM bank (even though they're RAM :)
    322 U0000
    323 U0000		       00 60	   SCREEN_BITMAP_SIZE =	4 * LINES_PER_CHAR
    324 U0000
    325 U0000							; These banks (there are #CHESSBOARD_ROWS of them) hold a RAM copy of the screen draw
    326 U0000							; code.  This code is self-modifying, in that the colour values for each scanline
    327 U0000							; are set to NTSC or PAL values on startup -- thus, the single binary can run
    328 U0000							; on either format system.  The main purpose for copying the draw code to RAM,
    329 U0000							; though, is to free up space in the fixed bank (which is incredibly valuable).
    330 U0000
    331 U0000							; A neat feature of having multiple copies of the same code in different RAM banks
    332 U0000							; is that we can use that code to switch between banks, and the system will happily
    333 U0000							; execute the next instruction from the newly switched-in bank without a problem.
    334 U0000
    335 U0000							; Now we have the actual graphics data for each of the rows.  This consists of an
    336 U0000							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    337 U0000							; character shapes are masked/copied. The depth of the character shapes may be
    338 U0000							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    339 U0000							; a multiple of 3, so that the RGB scanlines match at character joins.
    340 U0000
    341 U0000							; The next part of the graphics data is a bitmap sprite buffer -- space for two
    342 U0000							; sprites' graphics shape and colour data.  The shape and colour may be set as
    343 U0000							; part of the draw routine *every* scanline (though the system currently uses
    344 U0000							; one colour shared between both players).
    345 U0000
      0 U0000					      VALIDATE_RAM_SIZE
      1 U0000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0000				  -	      ERR
      5 U0000					      ENDIF
    347 U0000
    348 U0000							; We have one bank for each screen row.  These banks are duplicates of the above,
    349 U0000							; accessed via the above labels but with the appropriate bank switched in.
    350 U0000
    351 U0000							;------------------------------------------------------------------------------
    352 U0000
    353 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U1c00 ????				      SEG.U	.DUMMY
      2 U0400					      ORG	ORIGIN_RAM
      3 U0400					      RORG	RAM_3E
      4 U0400				   BANK_START SET	*
      5 U0400				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    353 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400					      SEG.U	.DUMMY
      2 U0800					      ORG	ORIGIN_RAM
      3 U0800					      RORG	RAM_3E
      4 U0800				   BANK_START SET	*
      5 U0800				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    353 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800					      SEG.U	.DUMMY
      2 U0c00					      ORG	ORIGIN_RAM
      3 U0c00					      RORG	RAM_3E
      4 U0c00				   BANK_START SET	*
      5 U0c00				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    353 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00					      SEG.U	.DUMMY
      2 U1000					      ORG	ORIGIN_RAM
      3 U1000					      RORG	RAM_3E
      4 U1000				   BANK_START SET	*
      5 U1000				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    353 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000					      SEG.U	.DUMMY
      2 U1400					      ORG	ORIGIN_RAM
      3 U1400					      RORG	RAM_3E
      4 U1400				   BANK_START SET	*
      5 U1400				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    353 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400					      SEG.U	.DUMMY
      2 U1800					      ORG	ORIGIN_RAM
      3 U1800					      RORG	RAM_3E
      4 U1800				   BANK_START SET	*
      5 U1800				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    353 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800					      SEG.U	.DUMMY
      2 U1c00					      ORG	ORIGIN_RAM
      3 U1c00					      RORG	RAM_3E
      4 U1c00				   BANK_START SET	*
      5 U1c00				   .DUMMY     SET	ORIGIN_RAM / RAM_SIZE
      6 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    356 U1c00					      REPEND
    357 U1c00
    358 U1c00							;---------------------------------------------------------------------------------------------------
    359 U1c00
      0 U1c00					      NEWRAMBANK	BANK_CHESSBOARD
      1 U2040 ????				      SEG.U	BANK_CHESSBOARD
      2 U2000					      ORG	ORIGIN_RAM
      3 U2000					      RORG	RAM_3E
      4 U2000				   BANK_START SET	*
      5 U2000				   BANK_CHESSBOARD SET	ORIGIN_RAM / RAM_SIZE
      6 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    361 U2000		       00 00 00 00*Chessboard ds	64
      0 U2040					      VALIDATE_RAM_SIZE
      1 U2040				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2040				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2040				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2040				  -	      ERR
      5 U2040					      ENDIF
    363 U2040
    364 U2040							;------------------------------------------------------------------------------
    365 U2040							;##############################################################################
    366 U2040							;------------------------------------------------------------------------------
    367 U2040
      0 U2040					      NEWRAMBANK	BANK_SCREEN
      1 U2400 ????				      SEG.U	BANK_SCREEN
      2 U2400					      ORG	ORIGIN_RAM
      3 U2400					      RORG	RAM_3E
      4 U2400				   BANK_START SET	*
      5 U2400				   BANK_SCREEN SET	ORIGIN_RAM / RAM_SIZE
      6 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    369 U2400							; VARS DEFINED IN ROM_SHADOW_OF_SCREEN
      0 U2400					      VALIDATE_RAM_SIZE
      1 U2400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2400				  -	      ERR
      5 U2400					      ENDIF
    371 U2400
    372 U2400
      0 U2400					      NEWRAMBANK	BANK_DRAW_BUFFERS
      1 U2800 ????				      SEG.U	BANK_DRAW_BUFFERS
      2 U2800					      ORG	ORIGIN_RAM
      3 U2800					      RORG	RAM_3E
      4 U2800				   BANK_START SET	*
      5 U2800				   BANK_DRAW_BUFFERS SET	ORIGIN_RAM / RAM_SIZE
      6 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    374 U2800							; VARS DEFINED IN ROM_SHADOW_OF_BANK_DRAW_BUFFERS
    375 U2800							; SELF-MODIFYING SUBROUTINES MAY BE PRESENT IN THIS BANK TOO!
      0 U2800					      VALIDATE_RAM_SIZE
      1 U2800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2800				  -	      ERR
      5 U2800					      ENDIF
    377 U2800
    378 U2800							;------------------------------------------------------------------------------
    379 U2800							;##############################################################################
    380 U2800							;------------------------------------------------------------------------------
    381 U2800
      0 U2800					      NEWRAMBANK	BANK_SCORING
      1 U2c00 ????				      SEG.U	BANK_SCORING
      2 U2c00					      ORG	ORIGIN_RAM
      3 U2c00					      RORG	RAM_3E
      4 U2c00				   BANK_START SET	*
      5 U2c00				   BANK_SCORING SET	ORIGIN_RAM / RAM_SIZE
      6 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    383 U2c00							; VARS DEFINED IN ROM_SHADOW_OF_BANK_SCORING
    384 U2c00							; SELF-MODIFYING SUBROUTINES MAY BE PRESENT IN THIS BANK TOO!
      0 U2c00					      VALIDATE_RAM_SIZE
      1 U2c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U2c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U2c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U2c00				  -	      ERR
      5 U2c00					      ENDIF
    386 U2c00
    387 U2c00							;------------------------------------------------------------------------------
    388 U2c00							;##############################################################################
    389 U2c00							;------------------------------------------------------------------------------
    390 U2c00
      0 U2c00					      NEWRAMBANK	BANK_DECODE_LEVEL
      1 U3000 ????				      SEG.U	BANK_DECODE_LEVEL
      2 U3000					      ORG	ORIGIN_RAM
      3 U3000					      RORG	RAM_3E
      4 U3000				   BANK_START SET	*
      5 U3000				   BANK_DECODE_LEVEL SET	ORIGIN_RAM / RAM_SIZE
      6 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    392 U3000							; VARS DEFINED IN BANK_DECODE_LEVEL_SHADOW
    393 U3000							; SELF-MODIFYING SUBROUTINES MAY BE PRESENT IN THIS BANK TOO!
      0 U3000					      VALIDATE_RAM_SIZE
      1 U3000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U3000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U3000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U3000				  -	      ERR
      5 U3000					      ENDIF
    395 U3000
    396 U3000							;------------------------------------------------------------------------------
    397 U3000							;##############################################################################
    398 U3000							;------------------------------------------------------------------------------
    399 U3000
    400 U3000
    401 U3000							;------------------------------------------------------------------------------
    402 U3000							;##############################################################################
    403 U3000							;------------------------------------------------------------------------------
    404 U3000
      0 U3000					      NEWRAMBANK	BANK_BOARD
      1 U3400 ????				      SEG.U	BANK_BOARD
      2 U3400					      ORG	ORIGIN_RAM
      3 U3400					      RORG	RAM_3E
      4 U3400				   BANK_START SET	*
      5 U3400				   BANK_BOARD SET	ORIGIN_RAM / RAM_SIZE
      6 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    406 U3400
    407 U3400							; Now the interesting 'BOARD' -- which in reality is a free-form system of M*N
    408 U3400							; rows and columns.  We need to reserve enough RAM for the board's entirety, but
    409 U3400							; don't really care much how it overlaps the 1K bank limit.  The code accessing
    410 U3400							; the board *MUST* calculate and take account of the correct RAM bank to switch
    411 U3400							; when accessing.
    412 U3400
    413 U3400							; The system is fairly free-form, in that it rearranges the memory and tables
    414 U3400							; automatically based on the sizes set in these constants. The board may overlay
    415 U3400							; MULTIPLE banks -- just as long as any particular LINE does not cross a bank
    416 U3400							; we're doing OK.
    417 U3400
    418 U3400							; NOTE: Assumption is that board lines CANNOT CROSS page boundaries.
    419 U3400
    420 U3400							; now fits into one single bank (if we don't reserve too much space for code)
    421 U3400
    422 U3400
    423 U3400							;------------------------------------------------------------------------------
    424 U3400							;##############################################################################
    425 U3400							;------------------------------------------------------------------------------
    426 U3400
    427 U3400		       00 fe	   RND_EOR_VAL =	$FE	;B4
    428 U3400
    429 U3400					      MAC	next_random
    430 U3400					      lda	rnd
    431 U3400					      lsr
    432 U3400					      bcc	.skipEOR
    433 U3400					      eor	#RND_EOR_VAL
    434 U3400				   .skipEOR   sta	rnd
    435 U3400					      ENDM
    436 U3400
    437 U3400							;--------------------------------------------------------------------------------
    438 U3400
    439 U3400							;ORIGIN      SET 0
    440 U3400
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U3400					      include	"BANK_GENERIC.asm"
      1 U3400
      0 U3400					      NEWBANK	GENERIC_BANK_1
      1  006c ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000
      0  0000					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0000
      2  0000
      3  0000		       00 00	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $0 , FREE= $400
      4  0000					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0000				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0000				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0000				  -	      ERR
      8  0000					      endif
     15  0000
     16  0000							;------------------------------------------------------------------------------
     17  0000							; ... the above is a RAM-copied section -- the following is ROM-only.	Note that
     18  0000							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     19  0000							; bank finishes.  Just continue on from where it left off...
     20  0000							;------------------------------------------------------------------------------
     21  0000
      0  0000					      DEFINE_SUBROUTINE	Cart_Init	; in GENERIC_BANK_1
      1  0000		       00 00	   BANK_Cart_Init =	_CURRENT_BANK
      2  0000					      SUBROUTINE
      3  0000				   Cart_Init
     23  0000
     24  0000							; Note the variables from the title selection are incredibly transient an can be stomped
     25  0000							; at any time.  So they need to be used immediately.
     26  0000
     27  0000
     28  0000							; odd usage below is to prevent any possibility of variable stomping/assumptions
     29  0000
     30  0000		       a9 00		      lda	#0
     31  0002		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     32  0005		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     33  0008		       85 6b		      sta	HMCLR
     34  000a
     35  000a							; cleanup remains of title screen
     36  000a		       85 5b		      sta	GRP0
     37  000c		       85 5c		      sta	GRP1
     38  000e
     39  000e		       a9 10		      lda	#%00010000	; 2	 double width missile, double width player
     40  0010		       85 44		      sta	NUSIZ0	; 3
     41  0012		       85 45		      sta	NUSIZ1
     42  0014
     43  0014		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     44  0016		       85 4a		      sta	CTRLPF
     45  0018
     46  0018		       a9 ff		      lda	#$FF
     47  001a		       85 96		      sta	BufferedJoystick
     48  001c
     49  001c							;lda #DIRECTION_BITS		  ;???
     50  001c							;sta ManLastDirection
     51  001c
     52  001c							;lda #0
     53  001c							;		  sta ObjStackPtr		  ; object stack index of last entry
     54  001c							;		  sta ObjStackPtr+1
     55  001c							;		  sta ObjStackNum
     56  001c							;		  sta ObjIterator
     57  001c
     58  001c							;sta sortPtr
     59  001c							;lda #<(-1)
     60  001c							;sta sortRequired
     61  001c
     62  001c		       60		      rts
     63  001d
     64  001d							;-------------------------------------------------------------------------------------
     65  001d
      0  001d					      DEFINE_SUBROUTINE	Resync
      1  001d		       00 00	   BANK_Resync =	_CURRENT_BANK
      2  001d					      SUBROUTINE
      3  001d				   Resync
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 95		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     68  0040		       60	   Ret	      rts
     69  0041
     70  0041							;------------------------------------------------------------------------------
     71  0041
     72  0041
     73  0041				   OverscanTime
     74  0041		       23 23		      .byte.b	OVERSCAN_TIM_NTSC, OVERSCAN_TIM_NTSC
     75  0043		       29 23		      .byte.b	OVERSCAN_TIM_PAL, OVERSCAN_TIM_NTSC
     76  0045
     77  0045
     78  0045		       00 12	   THROT_BASE =	18
     79  0045				   theThrottler
     80  0045		       12 12 15 12	      .byte.b	THROT_BASE, THROT_BASE, THROT_BASE*60/50, THROT_BASE
     81  0049
      0  0049					      DEFINE_SUBROUTINE	PostScreenCleanup
      1  0049		       00 00	   BANK_PostScreenCleanup =	_CURRENT_BANK
      2  0049					      SUBROUTINE
      3  0049				   PostScreenCleanup
     83  0049
     84  0049		       c8		      iny		; --> 0
     85  004a
     86  004a		       84 49		      sty	COLUBK	; starts colour change bottom score area, wraps to top score area
     87  004c							; + moved here so we don't see a minor colour artefact bottom of screen when look-arounding
     88  004c
     89  004c		       84 4d		      sty	PF0	; why wasn't this here?  I saw colour glitching in score area!
     90  004e							; TJ: no idea why, but you had removed it in revision 758 ;)
     91  004e							; completely accidental -- one of our cats may have deleted it.
     92  004e		       84 4e		      sty	PF1
     93  0050		       84 4f		      sty	PF2
     94  0052		       84 5d		      sty	ENAM0
     95  0054		       84 5b		      sty	GRP0	; when look-scrolling, we can see feet at the top if these aren't here
     96  0056		       84 5c		      sty	GRP1	; 30/12/2011 -- fix dots @ top!
     97  0058
     98  0058							; D1 VBLANK turns off beam
     99  0058
    100  0058		       a9 42		      lda	#%01000010	; bit6 is not required
    101  005a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    102  005c
    103  005c							;------------------------------------------------------------------------------
    104  005c							; This is where the PAL system has a bit of extra time on a per-frame basis.
    105  005c
    106  005c		       a6 95		      ldx	Platform
    107  005e		       bd 41 f0 	      lda	OverscanTime,x
    108  0061		       8d 96 02 	      sta	TIM64T
    109  0064
    110  0064
    111  0064							;----------------------------------------------------------------------------------------------
    112  0064
    113  0064							; has to be done AFTER screen display, because it disables the effect!
    114  0064							;SLEEP 6
    115  0064							;lda rnd		      ; 3     randomly reposition the Cosmic Ark missile
    116  0064							;sta HMM0		      ; 3     this assumes that HMOVE is called at least once/frame
    117  0064
    118  0064				   noFlashBG
    119  0064							;	 sta BGColour
    120  0064
    121  0064							; Create a 'standardised' joystick with D4-D7 having bits CLEAR if the appropriate direction is chosen.
    122  0064
    123  0064		       ad 80 02 	      lda	SWCHA
    124  0067		       25 96		      and	BufferedJoystick
    125  0069		       85 96		      sta	BufferedJoystick
    126  006b
    127  006b		       60		      rts
    128  006c
    129  006c							;------------------------------------------------------------------------------
    130  006c
    131  006c
      0  006c					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  006c		       00 6c	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $6c , FREE= $794
      2  006c					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  006c				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  006c				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  006c				  -	      ERR
      6  006c					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  006c					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  006c
      0  006c					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  090b ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     13  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     15  0800
     16  0800				   ChessBitmap
     17  0800		       00 00 00 00*ChessBitmap0 ds	24
     18  0818		       00 00 00 00*ChessBitmap1 ds	24
     19  0830		       00 00 00 00*ChessBitmap2 ds	24
     20  0848		       00 00 00 00*ChessBitmap3 ds	24
     21  0860		       00 00 00 00*ChessBitmap4 ds	24
     22  0878		       00 00 00 00*ChessBitmap5 ds	24
     23  0890
     24  0890							;---------------------------------------------------------------------------------------------------
     25  0890
      0  0890					      DEFINE_SUBROUTINE	ClearRowBitmap
      1  0890		       00 01	   BANK_ClearRowBitmap =	_CURRENT_BANK
      2  0890					      SUBROUTINE
      3  0890				   ClearRowBitmap
     27  0890
     28  0890		       a9 00		      lda	#0
     29  0892		       a0 90		      ldy	#ROW_BITMAP_SIZE
     30  0894		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     31  0897		       88		      dey
     32  0898		       d0 fa		      bne	.clearRow
     33  089a		       60		      rts
     34  089b
     35  089b							;---------------------------------------------------------------------------------------------------
     36  089b
      0  089b					      DEFINE_SUBROUTINE	CopyPieceToRowBitmap
      1  089b		       00 01	   BANK_CopyPieceToRowBitmap =	_CURRENT_BANK
      2  089b					      SUBROUTINE
      3  089b				   CopyPieceToRowBitmap
     38  089b
     39  089b		       b0 11		      bcs	.rightSide
     40  089d
     41  089d		       a0 47		      ldy	#71
     42  089f		       b9 a1 00    .copyPiece lda	__pieceShapeBuffer,y
     43  08a2		       f0 06		      beq	.blank1
     44  08a4		       59 00 f0 	      eor	ChessBitmap,y
     45  08a7		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
     46  08aa		       88	   .blank1    dey
     47  08ab		       10 f2		      bpl	.copyPiece
     48  08ad
     49  08ad		       60		      rts
     50  08ae
     51  08ae				   .rightSide
     52  08ae
     53  08ae		       a0 47		      ldy	#71
     54  08b0		       b9 a1 00    .copyPieceR lda	__pieceShapeBuffer,y
     55  08b3		       f0 06		      beq	.blank2
     56  08b5		       59 48 f0 	      eor	ChessBitmap+72,y
     57  08b8		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
     58  08bb		       88	   .blank2    dey
     59  08bc		       10 f2		      bpl	.copyPieceR
     60  08be
     61  08be		       60		      rts
     62  08bf
     63  08bf							;---------------------------------------------------------------------------------------------------
     64  08bf
      0  08bf					      DEFINE_SUBROUTINE	DrawRow
      1  08bf		       00 01	   BANK_DrawRow =	_CURRENT_BANK
      2  08bf					      SUBROUTINE
      3  08bf				   DrawRow
     66  08bf
     67  08bf							; x = row # (and bank#)
     68  08bf
     69  08bf		       a0 00	   .startLine ldy	#0	; 2
     70  08c1
     71  08c1		       85 42	   .drawLine  sta	WSYNC	; 3 @0
     72  08c3
     73  08c3		       b9 f3 f0 	      lda	.LineColour,y	; 5
     74  08c6		       85 48		      sta	COLUPF	; 3 @8
     75  08c8
     76  08c8		       b9 00 f0 	      lda	ChessBitmap0,y	; 5
     77  08cb		       85 4d		      sta	PF0	; 3
     78  08cd		       b9 18 f0 	      lda	ChessBitmap1,y	; 5
     79  08d0		       85 4e		      sta	PF1	; 3
     80  08d2		       b9 30 f0 	      lda	ChessBitmap2,y	; 5
     81  08d5		       85 4f		      sta	PF2	; 3 @32
     82  08d7
      0  08d7					      SLEEP	6	; 6 @30
      1  08d7				   .CYCLES    SET	6
      2  08d7
      3  08d7				  -	      IF	.CYCLES < 2
      4  08d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  08d7				  -	      ERR
      6  08d7					      ENDIF
      7  08d7
      8  08d7				  -	      IF	.CYCLES & 1
      9  08d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  08d7				  -	      nop	0
     11  08d7				  -	      ELSE
     12  08d7				  -	      bit	VSYNC
     13  08d7				  -	      ENDIF
     14  08d7				  -.CYCLES    SET	.CYCLES - 3
     15  08d7					      ENDIF
     16  08d7
     17  08d7					      REPEAT	.CYCLES / 2
     18  08d7		       ea		      nop
     17  08d7					      REPEND
     18  08d8		       ea		      nop
     17  08d8					      REPEND
     18  08d9		       ea		      nop
     19  08da					      REPEND
     84  08da
     85  08da		       b9 48 f0 	      lda	ChessBitmap3,y	; 5
     86  08dd		       85 4d		      sta	PF0	; 3 @38
     87  08df		       b9 60 f0 	      lda	ChessBitmap4,y	; 5
     88  08e2		       85 4e		      sta	PF1	; 3 @46
     89  08e4		       b9 78 f0 	      lda	ChessBitmap5,y	; 5
     90  08e7		       85 4f		      sta	PF2	; 3 @52
     91  08e9
     92  08e9		       c8		      iny		; 2
     93  08ea		       c0 18		      cpy	#24
     94  08ec		       90 d3		      bcc	.drawLine	; 3(2) @57 (taken)
     95  08ee
     96  08ee							; @56
     97  08ee
     98  08ee							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
     99  08ee							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    100  08ee				   SELFMOD_RTS_ON_LAST_ROW
    101  08ee		       e8		      inx		; 2
    102  08ef
    103  08ef		       86 3e		      stx	SET_BANK_RAM	; 3 @61     BANK switch to next row
    104  08f1		       d0 cc		      bne	.startLine	; 3(2) @64 (taken)
    105  08f3
    106  08f3				   .LineColour
    107  08f3							; The ICC triplet colour definitions for a single row of the chessboard
    108  08f3					      REPEAT	8
    109  08f3		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08f3					      REPEND
    109  08f6		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08f6					      REPEND
    109  08f9		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08f9					      REPEND
    109  08fc		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08fc					      REPEND
    109  08ff		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08ff					      REPEND
    109  0902		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  0902					      REPEND
    109  0905		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  0905					      REPEND
    109  0908		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    110  090b					      REPEND
    111  090b
    112  090b							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_INITBANK.asm LEVEL 2 PASS 2
      0  090b					      include	"BANK_INITBANK.asm"	; MUST be after banks that include levels -- otherwise MAX_LEVELBANK is not calculated properly
      1  090b							; Chess
      2  090b							; Atari 2600 Chess display system
      3  090b							; Copyright (c) 2019-2020 Andrew Davie
      4  090b							; andrew@taswegian.com
      5  090b
      0  090b					      NEWBANK	INITBANK
      1  1027 ????				      SEG	INITBANK
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   INITBANK   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	INITBANK
      7  1000
      8  1000
      9  1000							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
     10  1000							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
     11  1000		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
     12  1010		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
     13  1020
     14  1020				   JoyDirY
     15  1020		       00 00		      .byte.b	0,0	;,1,-1,0
     16  1022				   JoyDirX
     17  1022		       01 ff 00 00*	      .byte.b	1,-1,0,0,0
     18  1027
     19  1027							;Data Bit  Direction Player
     20  1027							;		 D7	   right	  P0  D4
     21  1027							;		 D6	   left      P0  D3
     22  1027							;		 D5	   down      P0  D2
     23  1027							;		 D4	   up	     P0  D1
     24  1027							;     A "0" in a data bit indicates the joystick has been moved
     25  1027							;     to close that switch.  All "1's" in a player's nibble
     26  1027							;     indicates that joystick is not moving.
     27  1027
     28  1027							;0  0000 x
     29  1027							;1  0001 x
     30  1027							;2  0010 x
     31  1027							;3  0011 x
     32  1027							;4  0100 x
     33  1027							;5  0101 right down
     34  1027							;6  0110 right up
     35  1027							;7  0111 right
     36  1027							;8  1000 x
     37  1027							;9  1001 left down
     38  1027							;10  1010 left up
     39  1027							;11  1011 left
     40  1027							;12  1100 x
     41  1027							;13  1101 down
     42  1027							;14  1110 up
     43  1027							;15  1111 none
     44  1027
     45  1027
     46  1027							;------------------------------------------------------------------------------
     47  1027
     48  1027							;------------------------------------------------------------------------------
     49  1027
     50  1027
      0  1027					      CHECK_BANK_SIZE	"INITBANK"
      1  1027		       00 27	   .TEMP      =	* - BANK_START
 INITBANK (2K) SIZE =  $27 , FREE= $7d9
      2  1027					      ECHO	"INITBANK", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1027				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1027				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1027				  -	      ERR
      6  1027					      endif
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  1027					      include	"BANK_CHESS_INCLUDES.asm"
      1  1027							; Chess
      2  1027							; Atari 2600 Chess display system
      3  1027							; Copyright (c) 2019-2020 Andrew Davie
      4  1027							; andrew@taswegian.com
      5  1027
      6  1027
      7  1027							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  1027							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  1027							; a single gif of the format..
     10  1027							; a row of white pieces on black squares
     11  1027							; a row of white pieces on white squares
     12  1027							; a row of black pieces on black squares
     13  1027							; a row of black pieces on white squares
     14  1027
     15  1027							; each row has the pieces ordered thus:
     16  1027							; a blank, then pawn, knight, bishop, rook, queen, king
     17  1027							; each piece is 5 pixels wide x 8 pixels deep
     18  1027							; each pixel is from an 8-colour palette.
     19  1027							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  1027							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  1027							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  1027							; bit "b" becomes the second ICC pixel line (2)
     23  1027							; bit "c" becomes the third ICC pixel line (3)
     24  1027							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  1027							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  1027							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  1027							; These 4 shifted positions are stored consecutively in the shape definition
     28  1027
     29  1027							; Example...
     30  1027							;DEFINE_SUBROUTINE WHITE_BISHOP_on_BLACK_SQUARE_0
     31  1027							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  1027							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  1027							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  1027
     35  1027							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  1027							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  1027							; actually have any data in PF1 or PF2.
     38  1027
     39  1027
     40  1027
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  1027					      include	"piece_graphics.asm"
      1  1027							; Import the graphics definitions generated by ConvertChessPieces.py
      0  1027					      NEWBANK	PIECES_0
      1  1fd8 ????				      SEG	PIECES_0
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_0   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_0
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1800		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1800					      SUBROUTINE
      3  1800				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1800		       00 00 f0 00*	      .byte.b	$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$40,$00,$f0,$40,$00,$f0,$00,$00,$f0,$00,$00,$f0	;PF0
      4  1818		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1848		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1848					      SUBROUTINE
      3  1848				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       00 00 7c 00*	      .byte.b	$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$10,$00,$7c,$10,$00,$7c,$00,$00,$7c,$00,$00,$7c	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1890		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1890					      SUBROUTINE
      3  1890				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03	;PF1
      5  18c0		       00 00 07 00*	      .byte.b	$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$01,$00,$07,$01,$00,$07,$00,$00,$07,$00,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1900		       00 03	   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1900					      SUBROUTINE
      3  1900				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       00 00 f8 00*	      .byte.b	$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$20,$00,$f8,$20,$00,$f8,$00,$00,$f8,$00,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1948		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1948					      SUBROUTINE
      3  1948				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1948		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$40,$00,$f0,$e0,$40,$f0,$40,$40,$f0,$40,$40,$f0,$e0,$e0,$f0,$e0,$00,$f0	;PF0
      4  1960		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1990		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1990					      SUBROUTINE
      3  1990				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$10,$7c,$10,$00,$7c,$38,$10,$7c,$10,$10,$7c,$10,$10,$7c,$38,$38,$7c,$38,$00,$7c	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1a00		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1a00					      SUBROUTINE
      3  1a00				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$01,$00,$03,$00,$00,$03,$00,$00,$03,$01,$01,$03,$01,$00,$03	;PF1
      5  1a30		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$01,$07,$01,$00,$07,$03,$01,$07,$01,$01,$07,$01,$01,$07,$03,$03,$07,$03,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1a48		       00 03	   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1a48					      SUBROUTINE
      3  1a48				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$20,$f8,$20,$00,$f8,$70,$20,$f8,$20,$20,$f8,$20,$20,$f8,$70,$70,$f8,$70,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1a90		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1a90					      SUBROUTINE
      3  1a90				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1a90		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$a0,$a0,$f0,$f0,$f0,$f0,$f0,$c0,$f0,$e0,$e0,$f0,$f0,$70,$f0,$f0,$f0,$f0	;PF0
      4  1aa8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1b00		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1b00					      SUBROUTINE
      3  1b00				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       00 00 7c 14*	      .byte.b	$00,$00,$7c,$14,$14,$7c,$2c,$28,$7c,$7c,$78,$7c,$7c,$18,$7c,$3c,$38,$7c,$78,$70,$7c,$78,$78,$7c	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1b48		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1b48					      SUBROUTINE
      3  1b48				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$03,$03,$03,$03,$03,$00,$03,$01,$01,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  1b78		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$07,$06,$02,$07,$07,$03,$07,$07,$03,$07,$07,$03,$07,$03,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1b90		       00 03	   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1b90					      SUBROUTINE
      3  1b90				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       00 00 f8 a0*	      .byte.b	$00,$00,$f8,$a0,$a0,$f8,$d0,$50,$f8,$f8,$78,$f8,$f8,$60,$f8,$f0,$70,$f8,$78,$38,$f8,$78,$78,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1c00		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1c00					      SUBROUTINE
      3  1c00				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1c00		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$00,$f0,$e0,$e0,$f0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$f0,$f0,$f0,$f0	;PF0
      4  1c18		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1c48		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1c48					      SUBROUTINE
      3  1c48				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$00,$7c,$38,$38,$7c,$5c,$58,$5c,$6c,$68,$6c,$7c,$78,$7c,$38,$30,$7c,$78,$78,$7c	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1c90		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1c90					      SUBROUTINE
      3  1c90				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$03,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$01,$03,$03,$03,$03	;PF1
      5  1cc0		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$00,$07,$03,$03,$07,$07,$03,$07,$06,$02,$06,$07,$03,$07,$03,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1d00		       00 03	   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1d00					      SUBROUTINE
      3  1d00				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$00,$f8,$70,$70,$f8,$e8,$68,$e8,$d8,$58,$d8,$f8,$78,$f8,$70,$30,$f8,$78,$78,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1d48		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1d48					      SUBROUTINE
      3  1d48				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1d48		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$00,$f0,$50,$50,$f0,$f0,$f0,$f0,$e0,$60,$f0,$e0,$60,$f0,$e0,$60,$f0,$f0,$f0,$f0	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1d90		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1d90					      SUBROUTINE
      3  1d90				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$00,$7c,$54,$50,$7c,$7c,$78,$7c,$3c,$30,$7c,$38,$30,$7c,$38,$30,$7c,$78,$78,$7c	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1e00		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1e00					      SUBROUTINE
      3  1e00				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$00,$03,$02,$02,$03,$03,$03,$03,$01,$01,$03,$01,$01,$03,$01,$01,$03,$03,$03,$03	;PF1
      5  1e30		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$00,$07,$05,$01,$07,$07,$03,$07,$07,$01,$07,$03,$01,$07,$03,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1e48		       00 03	   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1e48					      SUBROUTINE
      3  1e48				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$00,$f8,$a8,$28,$f8,$f8,$78,$f8,$f0,$30,$f8,$70,$30,$f8,$70,$30,$f8,$78,$78,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1e90		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  1e90					      SUBROUTINE
      3  1e90				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1e90		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$50,$f0,$00,$00,$f0,$50,$50,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$e0,$40,$f0,$e0,$e0,$f0	;PF0
      4  1ea8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1f00		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  1f00					      SUBROUTINE
      3  1f00				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$54,$7c,$00,$00,$7c,$54,$50,$7c,$7c,$78,$7c,$7c,$78,$7c,$38,$10,$7c,$38,$38,$7c	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1f48		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  1f48					      SUBROUTINE
      3  1f48				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$02,$03,$00,$00,$03,$02,$02,$03,$03,$03,$03,$03,$03,$03,$01,$00,$03,$01,$01,$03	;PF1
      5  1f78		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$07,$00,$00,$07,$05,$01,$07,$07,$03,$07,$07,$03,$07,$03,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1f90		       00 03	   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  1f90					      SUBROUTINE
      3  1f90				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$a8,$f8,$00,$00,$f8,$a8,$28,$f8,$f8,$78,$f8,$f8,$78,$f8,$70,$20,$f8,$70,$70,$f8	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_1
      1  27d8 ????				      SEG	PIECES_1
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_1   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_0
      1  2000		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2000					      SUBROUTINE
      3  2000				   WHITE_KING_on_WHITE_SQUARE_0
      3  2000		       00 00 f0 e0*	      .byte.b	$00,$00,$f0,$e0,$e0,$f0,$40,$40,$b0,$f0,$50,$50,$50,$50,$50,$50,$50,$f0,$f0,$60,$f0,$e0,$e0,$f0	;PF0
      4  2018		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_1
      1  2048		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2048					      SUBROUTINE
      3  2048				   WHITE_KING_on_WHITE_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       00 00 7c 38*	      .byte.b	$00,$00,$7c,$38,$38,$7c,$10,$10,$6c,$7c,$50,$54,$54,$50,$54,$54,$50,$7c,$7c,$30,$7c,$38,$38,$7c	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_2
      1  2090		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2090					      SUBROUTINE
      3  2090				   WHITE_KING_on_WHITE_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       00 00 03 01*	      .byte.b	$00,$00,$03,$01,$01,$03,$00,$00,$03,$03,$02,$02,$02,$02,$02,$02,$02,$03,$03,$01,$03,$01,$01,$03	;PF1
      5  20c0		       00 00 07 03*	      .byte.b	$00,$00,$07,$03,$03,$07,$01,$01,$06,$07,$01,$05,$05,$01,$05,$05,$01,$07,$07,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_3
      1  2100		       00 04	   BANK_WHITE_KING_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2100					      SUBROUTINE
      3  2100				   WHITE_KING_on_WHITE_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       00 00 f8 70*	      .byte.b	$00,$00,$f8,$70,$70,$f8,$20,$20,$d8,$f8,$28,$a8,$a8,$28,$a8,$a8,$28,$f8,$f8,$30,$f8,$70,$70,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_0
      1  2148		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2148					      SUBROUTINE
      3  2148				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  2148		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$40,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_1
      1  2190		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2190					      SUBROUTINE
      3  2190				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$10,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_2
      1  2200		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2200					      SUBROUTINE
      3  2200				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2230		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_3
      1  2248		       00 04	   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2248					      SUBROUTINE
      3  2248				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$20,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_0
      1  2290		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2290					      SUBROUTINE
      3  2290				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  2290		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$40,$00,$40,$e0,$40,$40,$40,$40,$40,$40,$40,$40,$e0,$e0,$e0,$e0,$00,$00	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_1
      1  2300		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2300					      SUBROUTINE
      3  2300				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$10,$10,$00,$10,$38,$10,$10,$10,$10,$10,$10,$10,$10,$38,$38,$38,$38,$00,$00	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_2
      1  2348		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2348					      SUBROUTINE
      3  2348				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$00,$00	;PF1
      5  2378		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$01,$00,$01,$03,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_3
      1  2390		       00 04	   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2390					      SUBROUTINE
      3  2390				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$20,$20,$00,$20,$70,$20,$20,$20,$20,$20,$20,$20,$20,$70,$70,$70,$70,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  2400		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2400					      SUBROUTINE
      3  2400				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  2400		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$a0,$a0,$f0,$f0,$f0,$f0,$f0,$c0,$e0,$e0,$e0,$e0,$f0,$70,$f0,$f0,$f0,$f0	;PF0
      4  2418		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$00,$80	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  2448		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2448					      SUBROUTINE
      3  2448				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       00 00 00 14*	      .byte.b	$00,$00,$00,$14,$14,$14,$2c,$28,$7c,$7c,$78,$7c,$7c,$18,$3c,$3c,$38,$38,$78,$70,$78,$78,$78,$7c	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  2490		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2490					      SUBROUTINE
      3  2490				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$03,$03,$03,$03,$03,$00,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03	;PF1
      5  24c0		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$05,$06,$02,$07,$07,$03,$07,$07,$03,$07,$07,$03,$03,$03,$01,$03,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  2500		       00 04	   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2500					      SUBROUTINE
      3  2500				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       00 00 00 a0*	      .byte.b	$00,$00,$00,$a0,$a0,$a0,$d0,$50,$f8,$f8,$78,$f8,$f8,$60,$f0,$f0,$70,$70,$78,$38,$78,$78,$78,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  2548		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2548					      SUBROUTINE
      3  2548				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  2548		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0	;PF0
      4  2560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  2590		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2590					      SUBROUTINE
      3  2590				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$00,$00,$38,$38,$38,$5c,$58,$5c,$6c,$68,$6c,$7c,$78,$7c,$38,$30,$38,$78,$78,$7c	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  2600		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2600					      SUBROUTINE
      3  2600				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$01,$01,$03,$03,$03	;PF1
      5  2630		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$00,$00,$03,$03,$03,$07,$03,$07,$06,$02,$06,$07,$03,$07,$03,$01,$03,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  2648		       00 04	   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2648					      SUBROUTINE
      3  2648				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$00,$00,$70,$70,$70,$e8,$68,$e8,$d8,$58,$d8,$f8,$78,$f8,$70,$30,$70,$78,$78,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_0
      1  2690		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2690					      SUBROUTINE
      3  2690				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  2690		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$00,$50,$50,$50,$f0,$f0,$f0,$f0,$e0,$60,$e0,$e0,$60,$e0,$e0,$60,$e0,$f0,$f0,$f0	;PF0
      4  26a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_1
      1  2700		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2700					      SUBROUTINE
      3  2700				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$00,$54,$54,$50,$7c,$7c,$78,$7c,$3c,$30,$38,$38,$30,$38,$38,$30,$38,$78,$78,$7c	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_2
      1  2748		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2748					      SUBROUTINE
      3  2748				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$00,$02,$02,$02,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03	;PF1
      5  2778		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$00,$05,$05,$01,$07,$07,$03,$07,$07,$01,$03,$03,$01,$03,$03,$01,$03,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_3
      1  2790		       00 04	   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2790					      SUBROUTINE
      3  2790				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$00,$a8,$a8,$28,$f8,$f8,$78,$f8,$f0,$30,$70,$70,$30,$70,$70,$30,$70,$78,$78,$f8	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_2
      1  2fd8 ????				      SEG	PIECES_2
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_2   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2800		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2800					      SUBROUTINE
      3  2800				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2800		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$50,$50,$00,$00,$00,$50,$50,$50,$f0,$f0,$f0,$f0,$f0,$f0,$e0,$40,$e0,$e0,$e0,$e0	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2848		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2848					      SUBROUTINE
      3  2848				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$54,$54,$00,$00,$00,$54,$50,$54,$7c,$78,$7c,$7c,$78,$7c,$38,$10,$38,$38,$38,$38	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2890		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2890					      SUBROUTINE
      3  2890				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$02,$02,$00,$00,$00,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$00,$01,$01,$01,$01	;PF1
      5  28c0		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$05,$00,$00,$00,$05,$01,$05,$07,$03,$07,$07,$03,$07,$03,$01,$03,$03,$03,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2900		       00 05	   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2900					      SUBROUTINE
      3  2900				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$a8,$a8,$00,$00,$00,$a8,$28,$a8,$f8,$78,$f8,$f8,$78,$f8,$70,$20,$70,$70,$70,$70	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_0
      1  2948		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  2948					      SUBROUTINE
      3  2948				   WHITE_KING_on_BLACK_SQUARE_0
      3  2948		       00 00 40 e0*	      .byte.b	$00,$00,$40,$e0,$e0,$e0,$40,$40,$b0,$f0,$50,$50,$50,$50,$50,$50,$50,$f0,$f0,$60,$e0,$e0,$e0,$e0	;PF0
      4  2960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_1
      1  2990		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  2990					      SUBROUTINE
      3  2990				   WHITE_KING_on_BLACK_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       00 00 10 38*	      .byte.b	$00,$00,$10,$38,$38,$38,$10,$10,$6c,$7c,$50,$54,$54,$50,$54,$54,$50,$7c,$7c,$30,$38,$38,$38,$38	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_2
      1  2a00		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  2a00					      SUBROUTINE
      3  2a00				   WHITE_KING_on_BLACK_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$00,$00,$03,$03,$02,$02,$02,$02,$02,$02,$02,$03,$03,$01,$01,$01,$01,$01	;PF1
      5  2a30		       00 00 01 03*	      .byte.b	$00,$00,$01,$03,$03,$03,$01,$01,$06,$07,$01,$05,$05,$01,$05,$05,$01,$07,$07,$01,$03,$03,$03,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_3
      1  2a48		       00 05	   BANK_WHITE_KING_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  2a48					      SUBROUTINE
      3  2a48				   WHITE_KING_on_BLACK_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       00 00 20 70*	      .byte.b	$00,$00,$20,$70,$70,$70,$20,$20,$d8,$f8,$28,$a8,$a8,$28,$a8,$a8,$28,$f8,$f8,$30,$70,$70,$70,$70	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2a90		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2a90					      SUBROUTINE
      3  2a90				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2a90		       00 00 f0 00*	      .byte.b	$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0	;PF0
      4  2aa8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2b00		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2b00					      SUBROUTINE
      3  2b00				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       00 00 7c 00*	      .byte.b	$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2b48		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2b48					      SUBROUTINE
      3  2b48				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03	;PF1
      5  2b78		       00 00 07 00*	      .byte.b	$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2b90		       00 05	   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2b90					      SUBROUTINE
      3  2b90				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       00 00 f8 00*	      .byte.b	$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2c00		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2c00					      SUBROUTINE
      3  2c00				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2c00		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$40,$00,$f0,$e0,$40,$b0,$40,$40,$b0,$40,$40,$b0,$e0,$e0,$10,$e0,$00,$f0	;PF0
      4  2c18		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2c48		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2c48					      SUBROUTINE
      3  2c48				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$10,$7c,$10,$00,$7c,$38,$10,$6c,$10,$10,$6c,$10,$10,$6c,$38,$38,$44,$38,$00,$7c	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2c90		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2c90					      SUBROUTINE
      3  2c90				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$01,$00,$03,$00,$00,$03,$00,$00,$03,$01,$01,$02,$01,$00,$03	;PF1
      5  2cc0		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$01,$07,$01,$00,$07,$03,$01,$06,$01,$01,$06,$01,$01,$06,$03,$03,$04,$03,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2d00		       00 05	   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2d00					      SUBROUTINE
      3  2d00				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$20,$f8,$20,$00,$f8,$70,$20,$d8,$20,$20,$d8,$20,$20,$d8,$70,$70,$88,$70,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2d48		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2d48					      SUBROUTINE
      3  2d48				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2d48		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$a0,$a0,$10,$f0,$f0,$00,$f0,$c0,$30,$e0,$e0,$10,$f0,$70,$00,$f0,$f0,$00	;PF0
      4  2d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2d90		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2d90					      SUBROUTINE
      3  2d90				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       00 00 7c 14*	      .byte.b	$00,$00,$7c,$14,$14,$78,$2c,$28,$40,$7c,$78,$00,$7c,$18,$60,$3c,$38,$44,$78,$70,$04,$78,$78,$04	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2e00		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2e00					      SUBROUTINE
      3  2e00				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$02,$03,$03,$00,$03,$00,$03,$01,$01,$02,$03,$03,$00,$03,$03,$00	;PF1
      5  2e30		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$03,$06,$02,$00,$07,$03,$00,$07,$03,$00,$07,$03,$04,$03,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2e48		       00 05	   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2e48					      SUBROUTINE
      3  2e48				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       00 00 f8 a0*	      .byte.b	$00,$00,$f8,$a0,$a0,$78,$d0,$50,$08,$f8,$78,$00,$f8,$60,$18,$f0,$70,$88,$78,$38,$80,$78,$78,$80	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2e90		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  2e90					      SUBROUTINE
      3  2e90				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2e90		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$00,$f0,$e0,$e0,$10,$d0,$d0,$00,$b0,$b0,$00,$f0,$f0,$00,$e0,$60,$10,$f0,$f0,$00	;PF0
      4  2ea8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$80,$00,$00,$80	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2f00		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  2f00					      SUBROUTINE
      3  2f00				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$00,$7c,$38,$38,$44,$5c,$58,$00,$6c,$68,$00,$7c,$78,$00,$38,$30,$44,$78,$78,$04	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2f48		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  2f48					      SUBROUTINE
      3  2f48				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$02,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$01,$02,$03,$03,$00	;PF1
      5  2f78		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$00,$07,$03,$03,$04,$07,$03,$00,$06,$02,$00,$07,$03,$00,$03,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2f90		       00 05	   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  2f90					      SUBROUTINE
      3  2f90				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$00,$f8,$70,$70,$88,$e8,$68,$00,$d8,$58,$00,$f8,$78,$00,$70,$30,$88,$78,$78,$80	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_3
      1  37d8 ????				      SEG	PIECES_3
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_3   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_0
      1  3000		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  3000					      SUBROUTINE
      3  3000				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  3000		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$00,$a0,$50,$50,$a0,$f0,$f0,$00,$e0,$60,$10,$e0,$60,$10,$e0,$60,$10,$f0,$f0,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_1
      1  3048		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  3048					      SUBROUTINE
      3  3048				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$00,$28,$54,$50,$28,$7c,$78,$00,$3c,$30,$44,$38,$30,$44,$38,$30,$44,$78,$78,$04	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_2
      1  3090		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  3090					      SUBROUTINE
      3  3090				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$00,$01,$02,$02,$01,$03,$03,$00,$01,$01,$02,$01,$01,$02,$01,$01,$02,$03,$03,$00	;PF1
      5  30c0		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$00,$02,$05,$01,$02,$07,$03,$00,$07,$01,$04,$03,$01,$04,$03,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_3
      1  3100		       00 06	   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  3100					      SUBROUTINE
      3  3100				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$00,$50,$a8,$28,$50,$f8,$78,$00,$f0,$30,$88,$70,$30,$88,$70,$30,$88,$78,$78,$80	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  3148		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  3148					      SUBROUTINE
      3  3148				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  3148		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$50,$a0,$00,$00,$f0,$50,$50,$a0,$f0,$f0,$00,$f0,$f0,$00,$e0,$40,$10,$e0,$e0,$10	;PF0
      4  3160		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  3190		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  3190					      SUBROUTINE
      3  3190				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$54,$28,$00,$00,$7c,$54,$50,$28,$7c,$78,$00,$7c,$78,$04,$38,$10,$44,$38,$38,$44	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  3200		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  3200					      SUBROUTINE
      3  3200				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$02,$01,$00,$00,$03,$02,$02,$01,$03,$03,$00,$03,$03,$00,$01,$00,$02,$01,$01,$02	;PF1
      5  3230		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$02,$00,$00,$07,$05,$01,$02,$07,$03,$00,$07,$03,$04,$03,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  3248		       00 06	   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  3248					      SUBROUTINE
      3  3248				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$a8,$50,$00,$00,$f8,$a8,$28,$50,$f8,$78,$00,$f8,$78,$80,$70,$20,$88,$70,$70,$88	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_0
      1  3290		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_0 =	_CURRENT_BANK
      2  3290					      SUBROUTINE
      3  3290				   BLACK_KING_on_WHITE_SQUARE_0
      3  3290		       40 40 b0 e0*	      .byte.b	$40,$40,$b0,$e0,$e0,$10,$40,$40,$b0,$f0,$50,$00,$50,$50,$00,$50,$50,$a0,$f0,$60,$10,$e0,$e0,$10	;PF0
      4  32a8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_1
      1  3300		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_1 =	_CURRENT_BANK
      2  3300					      SUBROUTINE
      3  3300				   BLACK_KING_on_WHITE_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       10 10 6c 38*	      .byte.b	$10,$10,$6c,$38,$38,$44,$10,$10,$6c,$7c,$50,$00,$54,$50,$00,$54,$50,$28,$7c,$30,$44,$38,$38,$44	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_2
      1  3348		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_2 =	_CURRENT_BANK
      2  3348					      SUBROUTINE
      3  3348				   BLACK_KING_on_WHITE_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       00 00 03 01*	      .byte.b	$00,$00,$03,$01,$01,$02,$00,$00,$03,$03,$02,$00,$02,$02,$00,$02,$02,$01,$03,$01,$02,$01,$01,$02	;PF1
      5  3378		       01 01 06 03*	      .byte.b	$01,$01,$06,$03,$03,$04,$01,$01,$06,$07,$01,$00,$05,$01,$00,$05,$01,$02,$07,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_3
      1  3390		       00 06	   BANK_BLACK_KING_on_WHITE_SQUARE_3 =	_CURRENT_BANK
      2  3390					      SUBROUTINE
      3  3390				   BLACK_KING_on_WHITE_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       20 20 d8 70*	      .byte.b	$20,$20,$d8,$70,$70,$88,$20,$20,$d8,$f8,$28,$00,$a8,$28,$00,$a8,$28,$50,$f8,$30,$88,$70,$70,$88	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_0
      1  3400		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3400					      SUBROUTINE
      3  3400				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  3400		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_1
      1  3448		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3448					      SUBROUTINE
      3  3448				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_2
      1  3490		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3490					      SUBROUTINE
      3  3490				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  34c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_3
      1  3500		       00 06	   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3500					      SUBROUTINE
      3  3500				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_0
      1  3548		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3548					      SUBROUTINE
      3  3548				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$40,$00,$40,$e0,$40,$00,$40,$40,$00,$40,$40,$00,$e0,$e0,$00,$e0,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_1
      1  3590		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3590					      SUBROUTINE
      3  3590				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$10,$10,$00,$10,$38,$10,$00,$10,$10,$00,$10,$10,$00,$38,$38,$00,$38,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_2
      1  3600		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3600					      SUBROUTINE
      3  3600				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$01,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$01,$00,$01,$03,$01,$00,$01,$01,$00,$01,$01,$00,$03,$03,$00,$03,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_3
      1  3648		       00 06	   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3648					      SUBROUTINE
      3  3648				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$20,$20,$00,$20,$70,$20,$00,$20,$20,$00,$20,$20,$00,$70,$70,$00,$70,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  3690		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3690					      SUBROUTINE
      3  3690				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  3690		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$a0,$a0,$10,$f0,$f0,$00,$f0,$c0,$00,$e0,$e0,$00,$f0,$70,$00,$f0,$f0,$00	;PF0
      4  36a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  3700		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3700					      SUBROUTINE
      3  3700				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 00 14*	      .byte.b	$00,$00,$00,$14,$14,$10,$2c,$28,$40,$7c,$78,$00,$7c,$18,$00,$3c,$38,$00,$78,$70,$00,$78,$78,$04	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  3748		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3748					      SUBROUTINE
      3  3748				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$02,$03,$03,$00,$03,$00,$00,$01,$01,$00,$03,$03,$00,$03,$03,$00	;PF1
      5  3778		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$01,$06,$02,$00,$07,$03,$00,$07,$03,$00,$07,$03,$00,$03,$01,$00,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  3790		       00 06	   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3790					      SUBROUTINE
      3  3790				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 00 a0*	      .byte.b	$00,$00,$00,$a0,$a0,$20,$d0,$50,$08,$f8,$78,$00,$f8,$60,$00,$f0,$70,$00,$78,$38,$00,$78,$78,$80	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
      0  37d8					      NEWBANK	PIECES_4
      1  3d48 ????				      SEG	PIECES_4
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_4   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3800		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3800					      SUBROUTINE
      3  3800				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3800		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$00,$00,$e0,$e0,$00,$d0,$d0,$00,$b0,$b0,$00,$f0,$f0,$00,$e0,$60,$00,$f0,$f0,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3848		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3848					      SUBROUTINE
      3  3848				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$00,$00,$38,$38,$00,$5c,$58,$00,$6c,$68,$00,$7c,$78,$00,$38,$30,$00,$78,$78,$04	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3890		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3890					      SUBROUTINE
      3  3890				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$00,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$01,$00,$03,$03,$00	;PF1
      5  38c0		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$00,$00,$03,$03,$00,$07,$03,$00,$06,$02,$00,$07,$03,$00,$03,$01,$00,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3900		       00 07	   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3900					      SUBROUTINE
      3  3900				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$00,$00,$70,$70,$00,$e8,$68,$00,$d8,$58,$00,$f8,$78,$00,$70,$30,$00,$78,$78,$80	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3948		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3948					      SUBROUTINE
      3  3948				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3948		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$00,$00,$50,$50,$a0,$f0,$f0,$00,$e0,$60,$00,$e0,$60,$00,$e0,$60,$00,$f0,$f0,$00	;PF0
      4  3960		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3990		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3990					      SUBROUTINE
      3  3990				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$00,$00,$54,$50,$28,$7c,$78,$00,$3c,$30,$00,$38,$30,$00,$38,$30,$00,$78,$78,$04	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3a00		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3a00					      SUBROUTINE
      3  3a00				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$00,$00,$02,$02,$01,$03,$03,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$03,$03,$00	;PF1
      5  3a30		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$00,$00,$05,$01,$02,$07,$03,$00,$07,$01,$00,$03,$01,$00,$03,$01,$00,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3a48		       00 07	   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3a48					      SUBROUTINE
      3  3a48				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$00,$00,$a8,$28,$50,$f8,$78,$00,$f0,$30,$00,$70,$30,$00,$70,$30,$00,$78,$78,$80	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3a90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3a90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3a90					      LIST	ON
      0  3a90					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3a90		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3a90					      SUBROUTINE
      3  3a90				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3a90		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$50,$00,$00,$00,$00,$50,$50,$00,$f0,$f0,$00,$f0,$f0,$00,$e0,$40,$00,$e0,$e0,$00	;PF0
      4  3aa8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$00,$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ad8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  3ad8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3b00					      LIST	ON
      0  3b00					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3b00		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3b00					      SUBROUTINE
      3  3b00				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b18		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$54,$00,$00,$00,$00,$54,$50,$00,$7c,$78,$00,$7c,$78,$00,$38,$10,$00,$38,$38,$00	;PF1
      5  3b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3b48					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3b48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3b48					      LIST	ON
      0  3b48					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3b48		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3b48					      SUBROUTINE
      3  3b48				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b60		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$02,$00,$00,$00,$00,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$00,$00,$01,$01,$00	;PF1
      5  3b78		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$00,$00,$00,$00,$05,$01,$00,$07,$03,$00,$07,$03,$00,$03,$01,$00,$03,$03,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3b90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3b90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3b90					      LIST	ON
      0  3b90					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3b90		       00 07	   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3b90					      SUBROUTINE
      3  3b90				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3bc0		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$a8,$00,$00,$00,$00,$a8,$28,$00,$f8,$78,$00,$f8,$78,$00,$70,$20,$00,$70,$70,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3bd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  3bd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3c00					      LIST	ON
      0  3c00					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_0
      1  3c00		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_0 =	_CURRENT_BANK
      2  3c00					      SUBROUTINE
      3  3c00				   BLACK_KING_on_BLACK_SQUARE_0
      3  3c00		       40 40 00 e0*	      .byte.b	$40,$40,$00,$e0,$e0,$00,$40,$40,$b0,$f0,$50,$00,$50,$50,$00,$50,$50,$a0,$f0,$60,$00,$e0,$e0,$00	;PF0
      4  3c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00	;PF1
      5  3c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3c48					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3c48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3c48					      LIST	ON
      0  3c48					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_1
      1  3c48		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_1 =	_CURRENT_BANK
      2  3c48					      SUBROUTINE
      3  3c48				   BLACK_KING_on_BLACK_SQUARE_1
      3  3c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c60		       10 10 00 38*	      .byte.b	$10,$10,$00,$38,$38,$00,$10,$10,$6c,$7c,$50,$00,$54,$50,$00,$54,$50,$28,$7c,$30,$00,$38,$38,$00	;PF1
      5  3c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3c90					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3c90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3c90					      LIST	ON
      0  3c90					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_2
      1  3c90		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_2 =	_CURRENT_BANK
      2  3c90					      SUBROUTINE
      3  3c90				   BLACK_KING_on_BLACK_SQUARE_2
      3  3c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ca8		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$03,$03,$02,$00,$02,$02,$00,$02,$02,$01,$03,$01,$00,$01,$01,$00	;PF1
      5  3cc0		       01 01 00 03*	      .byte.b	$01,$01,$00,$03,$03,$00,$01,$01,$06,$07,$01,$00,$05,$01,$00,$05,$01,$02,$07,$01,$00,$03,$03,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3cd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  3cd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3d00					      LIST	ON
      0  3d00					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_3
      1  3d00		       00 07	   BANK_BLACK_KING_on_BLACK_SQUARE_3 =	_CURRENT_BANK
      2  3d00					      SUBROUTINE
      3  3d00				   BLACK_KING_on_BLACK_SQUARE_3
      3  3d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d30		       20 20 00 70*	      .byte.b	$20,$20,$00,$70,$70,$00,$20,$20,$d8,$f8,$28,$00,$a8,$28,$00,$a8,$28,$50,$f8,$30,$00,$70,$70,$00	;PF2
------- FILE piece_graphics.asm
      0  3d48					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  3d48		       05 48	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $548 , FREE= $2b8
      2  3d48					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3d48				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3d48				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3d48				  -	      ERR
      6  3d48					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3d48
      0  3d48					      NEWBANK	PIECE_VECTORS
      1  4150 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEFINE_SUBROUTINE	PIECE_VECTOR_LO
      1  4000		       00 08	   BANK_PIECE_VECTOR_LO =	_CURRENT_BANK
      2  4000					      SUBROUTINE
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     32  401d		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     33  401e		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     34  401f		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     35  4020		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     36  4021		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     37  4022		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     38  4023		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     39  4024		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     40  4025		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     41  4026		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     42  4027		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     43  4028		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     44  4029		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     45  402a		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     46  402b		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     47  402c		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     48  402d		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     49  402e		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     50  402f		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     51  4030		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     52  4031		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     53  4032		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     54  4033		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     55  4034		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     56  4035		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     57  4036		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     58  4037		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     59  4038		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     60  4039		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     61  403a		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     62  403b		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     63  403c		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     64  403d		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     65  403e		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     66  403f		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     67  4040		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     68  4041		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     69  4042		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     70  4043		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     71  4044		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     72  4045		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     73  4046		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     74  4047		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     75  4048		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     76  4049		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     77  404a		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     78  404b		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     79  404c		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     80  404d		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     81  404e		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     82  404f		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     83  4050		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     84  4051		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     85  4052		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     86  4053		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     87  4054		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
     88  4055		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
     89  4056		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
     90  4057		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
     91  4058		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
     92  4059		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
     93  405a		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
     94  405b		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
     95  405c		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
     96  405d		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
     97  405e		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
     98  405f		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
     99  4060		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    100  4061		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    101  4062		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    102  4063		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
      0  4070					      DEFINE_SUBROUTINE	PIECE_VECTOR_HI
      1  4070		       00 08	   BANK_PIECE_VECTOR_HI =	_CURRENT_BANK
      2  4070					      SUBROUTINE
      3  4070				   PIECE_VECTOR_HI
    116  4070		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    117  4071		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    118  4072		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    119  4073		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    120  4074		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    121  4075		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    122  4076		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    123  4077		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    124  4078		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    125  4079		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    126  407a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    127  407b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    128  407c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    129  407d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    130  407e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    131  407f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    132  4080		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    133  4081		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    134  4082		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    135  4083		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    136  4084		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    137  4085		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    138  4086		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    139  4087		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    140  4088		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    141  4089		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    142  408a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    143  408b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    144  408c		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    145  408d		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    146  408e		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    147  408f		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    148  4090		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    149  4091		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    150  4092		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    151  4093		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    152  4094		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    153  4095		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    154  4096		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    155  4097		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    156  4098		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    157  4099		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    158  409a		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    159  409b		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    160  409c		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    161  409d		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    162  409e		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    163  409f		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    164  40a0		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    165  40a1		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    166  40a2		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    167  40a3		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    168  40a4		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    169  40a5		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    170  40a6		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    171  40a7		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    172  40a8		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    173  40a9		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    174  40aa		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    175  40ab		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    176  40ac		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    177  40ad		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    178  40ae		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    179  40af		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    180  40b0		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    181  40b1		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    182  40b2		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    183  40b3		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    184  40b4		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    185  40b5		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    186  40b6		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    187  40b7		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    188  40b8		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    189  40b9		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    190  40ba		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    191  40bb		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    192  40bc		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    193  40bd		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    194  40be		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    195  40bf		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    196  40c0		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    197  40c1		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    198  40c2		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    199  40c3		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    200  40c4		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    201  40c5		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    202  40c6		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    203  40c7		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    204  40c8		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    205  40c9		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    206  40ca		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    207  40cb		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    208  40cc		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    209  40cd		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    210  40ce		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    211  40cf		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    212  40d0		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    213  40d1		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    214  40d2		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    215  40d3		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    216  40d4		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    217  40d5		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    218  40d6		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    219  40d7		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    224  40dc		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    225  40dd		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    226  40de		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    227  40df		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
      0  40e0					      DEFINE_SUBROUTINE	PIECE_VECTOR_BANK
      1  40e0		       00 08	   BANK_PIECE_VECTOR_BANK =	_CURRENT_BANK
      2  40e0					      SUBROUTINE
      3  40e0				   PIECE_VECTOR_BANK
    229  40e0		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    230  40e1		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    231  40e2		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    232  40e3		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    233  40e4		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    234  40e5		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    235  40e6		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    236  40e7		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    237  40e8		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    238  40e9		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    239  40ea		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    240  40eb		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    241  40ec		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    242  40ed		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    243  40ee		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    244  40ef		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    245  40f0		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    246  40f1		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    247  40f2		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    248  40f3		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    249  40f4		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    250  40f5		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    251  40f6		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    252  40f7		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    253  40f8		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    254  40f9		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    255  40fa		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    256  40fb		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    257  40fc		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    258  40fd		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    259  40fe		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    260  40ff		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    261  4100		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    262  4101		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    263  4102		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    264  4103		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    265  4104		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    266  4105		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    267  4106		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    268  4107		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    269  4108		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    270  4109		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    271  410a		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    272  410b		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    273  410c		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    274  410d		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    275  410e		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    276  410f		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    277  4110		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    278  4111		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    279  4112		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    280  4113		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    281  4114		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    282  4115		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    283  4116		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    284  4117		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    285  4118		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    286  4119		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    287  411a		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    288  411b		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    289  411c		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    290  411d		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    291  411e		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    292  411f		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    293  4120		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    294  4121		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    295  4122		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    296  4123		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    297  4124		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    298  4125		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    299  4126		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    300  4127		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    301  4128		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    302  4129		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    303  412a		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    304  412b		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    305  412c		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    306  412d		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    307  412e		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    308  412f		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    309  4130		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    310  4131		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    311  4132		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    312  4133		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    313  4134		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    314  4135		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    315  4136		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    316  4137		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    317  4138		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    318  4139		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    319  413a		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    320  413b		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    321  413c		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    322  413d		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    323  413e		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    324  413f		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    325  4140		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    326  4141		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    327  4142		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    328  4143		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    329  4144		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    330  4145		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    331  4146		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    332  4147		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    333  4148		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    334  4149		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    335  414a		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    336  414b		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    337  414c		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    338  414d		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    339  414e		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    340  414f		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    341  4150
    342  4150							; piece index equates...
    343  4150		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    344  4150		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    345  4150		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    346  4150		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    347  4150		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    348  4150		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    349  4150		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    350  4150		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    351  4150		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    352  4150		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    353  4150		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    354  4150		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    355  4150		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    356  4150		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    357  4150		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    358  4150		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    359  4150		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    360  4150		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    361  4150		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    362  4150		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    363  4150		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    364  4150		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    365  4150		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    366  4150		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    367  4150		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    368  4150		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    369  4150		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    370  4150		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    371  4150		       00 1c	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	28
    372  4150		       00 1d	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	29
    373  4150		       00 1e	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	30
    374  4150		       00 1f	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	31
    375  4150		       00 20	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	32
    376  4150		       00 21	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	33
    377  4150		       00 22	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	34
    378  4150		       00 23	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	35
    379  4150		       00 24	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	36
    380  4150		       00 25	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	37
    381  4150		       00 26	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	38
    382  4150		       00 27	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	39
    383  4150		       00 28	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	40
    384  4150		       00 29	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	41
    385  4150		       00 2a	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	42
    386  4150		       00 2b	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	43
    387  4150		       00 2c	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	44
    388  4150		       00 2d	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	45
    389  4150		       00 2e	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	46
    390  4150		       00 2f	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	47
    391  4150		       00 30	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	48
    392  4150		       00 31	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	49
    393  4150		       00 32	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	50
    394  4150		       00 33	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	51
    395  4150		       00 34	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	52
    396  4150		       00 35	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	53
    397  4150		       00 36	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	54
    398  4150		       00 37	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	55
    399  4150		       00 38	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	56
    400  4150		       00 39	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	57
    401  4150		       00 3a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	58
    402  4150		       00 3b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	59
    403  4150		       00 3c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	60
    404  4150		       00 3d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	61
    405  4150		       00 3e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	62
    406  4150		       00 3f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	63
    407  4150		       00 40	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	64
    408  4150		       00 41	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	65
    409  4150		       00 42	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	66
    410  4150		       00 43	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	67
    411  4150		       00 44	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	68
    412  4150		       00 45	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	69
    413  4150		       00 46	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	70
    414  4150		       00 47	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	71
    415  4150		       00 48	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	72
    416  4150		       00 49	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	73
    417  4150		       00 4a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	74
    418  4150		       00 4b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	75
    419  4150		       00 4c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	76
    420  4150		       00 4d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	77
    421  4150		       00 4e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	78
    422  4150		       00 4f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	79
    423  4150		       00 50	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	80
    424  4150		       00 51	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	81
    425  4150		       00 52	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	82
    426  4150		       00 53	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	83
    427  4150		       00 54	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	84
    428  4150		       00 55	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	85
    429  4150		       00 56	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	86
    430  4150		       00 57	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	87
    431  4150		       00 58	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	88
    432  4150		       00 59	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	89
    433  4150		       00 5a	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	90
    434  4150		       00 5b	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	91
    435  4150		       00 5c	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	92
    436  4150		       00 5d	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	93
    437  4150		       00 5e	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	94
    438  4150		       00 5f	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	95
    439  4150		       00 60	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	96
    440  4150		       00 61	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	97
    441  4150		       00 62	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	98
    442  4150		       00 63	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	99
    443  4150		       00 64	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	100
    444  4150		       00 65	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	101
    445  4150		       00 66	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	102
    446  4150		       00 67	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	103
    447  4150		       00 68	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	104
    448  4150		       00 69	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	105
    449  4150		       00 6a	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	106
    450  4150		       00 6b	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	107
    451  4150		       00 6c	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	108
    452  4150		       00 6d	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	109
    453  4150		       00 6e	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	110
    454  4150		       00 6f	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	111
------- FILE BANK_CHESS_INCLUDES.asm
      0  4150					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4150		       01 50	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $150 , FREE= $6b0
      2  4150					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4150				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4150				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4150				  -	      ERR
      6  4150					      endif
------- FILE ./chess.asm
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  4150					      include	"titleScreen.asm"
      0  4150					      NEWBANK	TITLESCREEN
      1  4fc0 ????				      SEG	TITLESCREEN
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   TITLESCREEN SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	TITLESCREEN
      2  4800
      3  4800				   OverscanTime2
      4  4800		       1a 1a		      .byte.b	26, 26
      5  4802		       20 20		      .byte.b	32, 32
      6  4804
      7  4804				   colvec
      8  4804		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  4808
     10  4808
     11  4808		       32 32	   VBlankTime .byte.b	50,50
     12  480a
      0  480a					      DEFINE_SUBROUTINE	TitleScreen
      1  480a		       00 09	   BANK_TitleScreen =	_CURRENT_BANK
      2  480a					      SUBROUTINE
      3  480a				   TitleScreen
     14  480a
     15  480a							; Start of new frame
     16  480a
     17  480a							; Start of vertical blank processing
     18  480a
     19  480a				   TitleSequence
     20  480a
     21  480a		       a9 00		      lda	#%00000000
     22  480c		       85 4a		      sta	CTRLPF
     23  480e		       85 49		      sta	COLUBK
     24  4810
     25  4810		       a2 00		      ldx	#0	;Platform
     26  4812		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  4814		       85 98		      sta	colour_table
     28  4816		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     29  4818		       85 99		      sta	colour_table+1
     30  481a
     31  481a							;		  sta rndHi
     32  481a							;		  sta rnd
     33  481a
     34  481a
     35  481a				  -	      if	0
     36  481a				  -	      lda	#0
     37  481a				  -	      sta	digit
     38  481a				  -	      lda	#$10
     39  481a				  -	      sta	digit+1
     40  481a				  -	      lda	#$20
     41  481a				  -	      sta	digit+2
     42  481a					      endif
     43  481a
     44  481a
     45  481a
     46  481a
      0  481a					      RESYNC
      1  481a
      2  481a		       a9 02		      lda	#%10
      3  481c		       85 41		      sta	VBLANK
      4  481e
      5  481e		       a2 08		      ldx	#8
      6  4820				   .loopResync
      0  4820					      VERTICAL_SYNC
      1  4820		       a9 0e		      lda	#%1110
      2  4822		       85 42	   .VSLP1     sta	WSYNC
      3  4824		       85 40		      sta	VSYNC
      4  4826		       4a		      lsr
      5  4827		       d0 f9		      bne	.VSLP1
      8  4829
      9  4829		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  482b		       a5 95		      lda	Platform
     11  482d		       49 02		      eor	#PAL_50
     12  482f		       d0 02		      bne	.ntsc
     13  4831		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  4833				   .ntsc
     15  4833				   .loopWait
     16  4833		       85 42		      sta	WSYNC
     17  4835		       85 42		      sta	WSYNC
     18  4837		       88		      dey
     19  4838		       d0 f9		      bne	.loopWait
     20  483a		       ca		      dex
     21  483b		       d0 e3		      bne	.loopResync
     48  483d
     49  483d				   RestartFrame0
     50  483d
     51  483d				  -	      if	0
     52  483d				  -	      ldx	#2
     53  483d				  -rollcols   clc
     54  483d				  -	      lda	digit+2
     55  483d				  -	      adc	#$10
     56  483d				  -	      sta	digit+2
     57  483d				  -	      bcc	finxc
     58  483d				  -	      dex
     59  483d				  -	      bpl	rollcols
     60  483d				  -finxc
     61  483d					      endif
     62  483d
      0  483d					      DEFINE_SUBROUTINE	RestartFrame
      1  483d		       00 09	   BANK_RestartFrame =	_CURRENT_BANK
      2  483d					      SUBROUTINE
      3  483d				   RestartFrame
     64  483d		       a9 00		      LDA	#0
     65  483f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  4841		       85 42	   .loopVSync2 sta	WSYNC
     67  4843		       85 40		      sta	VSYNC
     68  4845		       4a		      lsr
     69  4846		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  4848
     71  4848							;------------------------------------------------------------------
     72  4848
     73  4848		       a6 95		      ldx	Platform
     74  484a		       bc 08 f0 	      ldy	VBlankTime,x
     75  484d		       8c 96 02 	      sty	TIM64T
     76  4850
     77  4850
     78  4850				  -	      if	0
     79  4850				  -	      lda	SWCHB
     80  4850				  -	      rol
     81  4850				  -	      rol
     82  4850				  -	      rol
     83  4850				  -	      and	#%11
     84  4850				  -	      eor	#PAL
     85  4850				  -	      cmp	Platform
     86  4850				  -	      beq	platOK
     87  4850				  -	      sta	Platform
     88  4850				  -	      jmp	TitleSequence
     89  4850				  -platOK
     90  4850					      endif
     91  4850
     92  4850		       e6 81	   k2	      inc	rnd
     93  4852		       f0 fc		      beq	k2
     94  4854
     95  4854
     96  4854		       85 42	   VerticalBlank sta	WSYNC
     97  4856		       ad 84 02 	      lda	INTIM
     98  4859		       d0 f9		      bne	VerticalBlank
     99  485b		       85 41		      sta	VBLANK
    100  485d
    101  485d							;sta COLUBK
    102  485d
    103  485d							;------------------------------------------------------------------
    104  485d
    105  485d							; Do X scanlines of color-changing (our picture)
    106  485d
    107  485d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  485f		       a2 03	   SokoLogo   ldx	#3
    109  4861		       b1 98	   triplet    lda	(colour_table),y
    110  4863							;    eor digit-1,x
    111  4863		       85 42		      sta	WSYNC
    112  4865		       85 48		      sta	COLUPF	; 3
    113  4867
    114  4867		       b9 b0 f2 	      lda	COL_0,y	; 5
    115  486a		       85 4d		      sta	PF0	; 3   @11
    116  486c		       b9 88 f3 	      lda	COL_1,y	; 5
    117  486f		       85 4e		      sta	PF1	; 3   @19
    118  4871		       b9 60 f4 	      lda	COL_2,y	; 5
    119  4874		       85 4f		      sta	PF2	; 3   @27
    120  4876
    121  4876		       b9 38 f5 	      lda	COL_3,y	; 5
    122  4879		       85 4d		      sta	PF0	; 3   @35
      0  487b					      SLEEP	2	; @37
      1  487b				   .CYCLES    SET	2
      2  487b
      3  487b				  -	      IF	.CYCLES < 2
      4  487b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  487b				  -	      ERR
      6  487b					      ENDIF
      7  487b
      8  487b				  -	      IF	.CYCLES & 1
      9  487b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  487b				  -	      nop	0
     11  487b				  -	      ELSE
     12  487b				  -	      bit	VSYNC
     13  487b				  -	      ENDIF
     14  487b				  -.CYCLES    SET	.CYCLES - 3
     15  487b					      ENDIF
     16  487b
     17  487b					      REPEAT	.CYCLES / 2
     18  487b		       ea		      nop
     19  487c					      REPEND
    124  487c		       b9 10 f6 	      lda	COL_4,y	; 5
    125  487f		       85 4e		      sta	PF1	; 3   @45
      0  4881					      SLEEP	3	; @45
      1  4881				   .CYCLES    SET	3
      2  4881
      3  4881				  -	      IF	.CYCLES < 2
      4  4881				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4881				  -	      ERR
      6  4881					      ENDIF
      7  4881
      8  4881					      IF	.CYCLES & 1
      9  4881					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4881		       04 00		      nop	0
     11  4883				  -	      ELSE
     12  4883				  -	      bit	VSYNC
     13  4883					      ENDIF
     14  4883				   .CYCLES    SET	.CYCLES - 3
     15  4883					      ENDIF
     16  4883
     17  4883				  -	      REPEAT	.CYCLES / 2
     18  4883				  -	      nop
     19  4883					      REPEND
    127  4883		       b9 e8 f6 	      lda	COL_5,y	; 5
    128  4886		       85 4f		      sta	PF2	; 3
    129  4888
    130  4888		       88		      dey		; 2
    131  4889		       ca		      dex		; 2
    132  488a		       d0 d5		      bne	triplet	; 2(3)
    133  488c
    134  488c		       c0 ff		      cpy	#-1	; 2
    135  488e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  4890
    137  4890							;lda #0
    138  4890							;sta PF0
    139  4890							;sta PF1
    140  4890							;sta PF2
    141  4890
    142  4890		       a6 95		      ldx	Platform
    143  4892		       bd 00 f0 	      lda	OverscanTime2,x
    144  4895		       8d 96 02 	      sta	TIM64T
    145  4898
    146  4898				  -	      if	0
    147  4898				  -	      sta	WSYNC
    148  4898				  -	      sta	WSYNC
    149  4898				  -	      sta	WSYNC
    150  4898				  -	      sta	WSYNC
    151  4898				  -	      sta	WSYNC
    152  4898				  -	      SLEEP	8
    153  4898				  -	      jsr	SokoScreen
    154  4898				  -
    155  4898				  -	      lda	#0
    156  4898				  -	      sta	BoardScrollX
    157  4898				  -	      sta	BoardScrollY
    158  4898					      endif
    159  4898
    160  4898							;		ldy #63
    161  4898							;bot2		 sta WSYNC
    162  4898							;		dey
    163  4898							;		bpl bot2
    164  4898
    165  4898							;--------------------------------------------------------------------------
    166  4898
    167  4898		       a9 00		      lda	#0
    168  489a		       85 4d		      sta	PF0
    169  489c		       85 4e		      sta	PF1
    170  489e		       85 4f		      sta	PF2
    171  48a0
    172  48a0
      0  48a0					      NEXT_RANDOM
      1  48a0		       a5 81		      lda	rnd
      2  48a2		       4a		      lsr
      3  48a3		       90 02		      bcc	.skipEOR
      4  48a5		       49 fe		      eor	#RND_EOR_VAL
      5  48a7		       85 81	   .skipEOR   sta	rnd
    174  48a9
    175  48a9							; D1 VBLANK turns off beam
    176  48a9							; It needs to be turned on 37 scanlines later
    177  48a9
    178  48a9				   oscan
    179  48a9		       ad 84 02 	      lda	INTIM
    180  48ac		       d0 fb		      bne	oscan
    181  48ae
    182  48ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  48b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  48b2
    185  48b2				  -	      if	0
    186  48b2				  -	      inc	rnd
    187  48b2				  -	      bne	rdd
    188  48b2				  -	      inc	rndHi
    189  48b2				  -rdd
    190  48b2				  -
    191  48b2				  -	      dec	digitick
    192  48b2				  -	      bpl	ret2
    193  48b2				  -	      lda	#40
    194  48b2				  -	      sta	digitick
    195  48b2				  -
    196  48b2				  -	      jsr	Random
    197  48b2				  -	      and	#3
    198  48b2				  -	      beq	ret2
    199  48b2				  -	      tax
    200  48b2				  -	      jsr	Random
    201  48b2				  -	      and	#$F0
    202  48b2				  -	      sta	digit-1,x
    203  48b2				  -	      jmp	RestartFrame0
    204  48b2				  -
    205  48b2				  -ret2
    206  48b2					      endif
    207  48b2
    208  48b2
    209  48b2		       a5 4c		      lda	INPT4
    210  48b4		       10 03		      bpl	ret
    211  48b6
    212  48b6		       4c 3d f0 	      jmp	RestartFrame
    213  48b9
    214  48b9				   ret
    215  48b9		       60		      rts
    216  48ba
    217  48ba
    218  48ba
    219  48ba					      MAC	lumtable
    220  48ba							; {4} MIN LUM 1
    221  48ba							; {5} MIN LUM 2
    222  48ba							; {6} MIN LUM 3
    223  48ba
    224  48ba				   .LUM1      SET	{4}*256
    225  48ba				   .LUM2      SET	{5}*256
    226  48ba				   .LUM3      SET	{6}*256
    227  48ba
    228  48ba				   .STEP1     =	(256*({7}-{4}))/72
    229  48ba				   .STEP2     =	(256*({8}-{5}))/72
    230  48ba				   .STEP3     =	(256*({9}-{6}))/72
    231  48ba
    232  48ba					      REPEAT	72
    233  48ba					      .byte	{1}+(.LUM1/256)
    234  48ba					      .byte	{2}+(.LUM2/256)
    235  48ba					      .byte	{3}+(.LUM3/256)
    236  48ba
    237  48ba							;    ECHO {1}+(.LUM1/256)
    238  48ba							;    ECHO {2}+(.LUM1/256)
    239  48ba							;    ECHO {3}+(.LUM1/256)
    240  48ba
    241  48ba				   .LUM1      SET	.LUM1 + .STEP1
    242  48ba				   .LUM2      SET	.LUM2 + .STEP2
    243  48ba				   .LUM3      SET	.LUM3 + .STEP3
    244  48ba					      REPEND
    245  48ba					      ENDM		;{1}{2}{3} base colours
    246  48ba
    247  48ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  48ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  48ba
    250  4900		       00 00 00 00*	      align	256
    251  4900							;    ECHO "NTSC LUMS"
    252  4900				   colr_ntsc2
      0  4900					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  4900
      2  4900
      3  4900
      4  4900
      5  4900				   .LUM1      SET	$4*256
      6  4900				   .LUM2      SET	$6*256
      7  4900				   .LUM3      SET	$8*256
      8  4900
      9  4900		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  4900		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  4900		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  4900
     13  4900					      REPEAT	72
     14  4900		       44		      .byte.b	$40+(.LUM1/256)
     15  4901		       26		      .byte.b	$20+(.LUM2/256)
     16  4902		       98		      .byte.b	$90+(.LUM3/256)
     17  4903
     18  4903
     19  4903
     20  4903
     21  4903
     22  4903				   .LUM1      SET	.LUM1 + .STEP1
     23  4903				   .LUM2      SET	.LUM2 + .STEP2
     24  4903				   .LUM3      SET	.LUM3 + .STEP3
     13  4903					      REPEND
     14  4903		       44		      .byte.b	$40+(.LUM1/256)
     15  4904		       26		      .byte.b	$20+(.LUM2/256)
     16  4905		       98		      .byte.b	$90+(.LUM3/256)
     17  4906
     18  4906
     19  4906
     20  4906
     21  4906
     22  4906				   .LUM1      SET	.LUM1 + .STEP1
     23  4906				   .LUM2      SET	.LUM2 + .STEP2
     24  4906				   .LUM3      SET	.LUM3 + .STEP3
     13  4906					      REPEND
     14  4906		       44		      .byte.b	$40+(.LUM1/256)
     15  4907		       26		      .byte.b	$20+(.LUM2/256)
     16  4908		       98		      .byte.b	$90+(.LUM3/256)
     17  4909
     18  4909
     19  4909
     20  4909
     21  4909
     22  4909				   .LUM1      SET	.LUM1 + .STEP1
     23  4909				   .LUM2      SET	.LUM2 + .STEP2
     24  4909				   .LUM3      SET	.LUM3 + .STEP3
     13  4909					      REPEND
     14  4909		       44		      .byte.b	$40+(.LUM1/256)
     15  490a		       26		      .byte.b	$20+(.LUM2/256)
     16  490b		       98		      .byte.b	$90+(.LUM3/256)
     17  490c
     18  490c
     19  490c
     20  490c
     21  490c
     22  490c				   .LUM1      SET	.LUM1 + .STEP1
     23  490c				   .LUM2      SET	.LUM2 + .STEP2
     24  490c				   .LUM3      SET	.LUM3 + .STEP3
     13  490c					      REPEND
     14  490c		       44		      .byte.b	$40+(.LUM1/256)
     15  490d		       26		      .byte.b	$20+(.LUM2/256)
     16  490e		       98		      .byte.b	$90+(.LUM3/256)
     17  490f
     18  490f
     19  490f
     20  490f
     21  490f
     22  490f				   .LUM1      SET	.LUM1 + .STEP1
     23  490f				   .LUM2      SET	.LUM2 + .STEP2
     24  490f				   .LUM3      SET	.LUM3 + .STEP3
     13  490f					      REPEND
     14  490f		       44		      .byte.b	$40+(.LUM1/256)
     15  4910		       26		      .byte.b	$20+(.LUM2/256)
     16  4911		       98		      .byte.b	$90+(.LUM3/256)
     17  4912
     18  4912
     19  4912
     20  4912
     21  4912
     22  4912				   .LUM1      SET	.LUM1 + .STEP1
     23  4912				   .LUM2      SET	.LUM2 + .STEP2
     24  4912				   .LUM3      SET	.LUM3 + .STEP3
     13  4912					      REPEND
     14  4912		       44		      .byte.b	$40+(.LUM1/256)
     15  4913		       26		      .byte.b	$20+(.LUM2/256)
     16  4914		       98		      .byte.b	$90+(.LUM3/256)
     17  4915
     18  4915
     19  4915
     20  4915
     21  4915
     22  4915				   .LUM1      SET	.LUM1 + .STEP1
     23  4915				   .LUM2      SET	.LUM2 + .STEP2
     24  4915				   .LUM3      SET	.LUM3 + .STEP3
     13  4915					      REPEND
     14  4915		       44		      .byte.b	$40+(.LUM1/256)
     15  4916		       26		      .byte.b	$20+(.LUM2/256)
     16  4917		       98		      .byte.b	$90+(.LUM3/256)
     17  4918
     18  4918
     19  4918
     20  4918
     21  4918
     22  4918				   .LUM1      SET	.LUM1 + .STEP1
     23  4918				   .LUM2      SET	.LUM2 + .STEP2
     24  4918				   .LUM3      SET	.LUM3 + .STEP3
     13  4918					      REPEND
     14  4918		       44		      .byte.b	$40+(.LUM1/256)
     15  4919		       26		      .byte.b	$20+(.LUM2/256)
     16  491a		       98		      .byte.b	$90+(.LUM3/256)
     17  491b
     18  491b
     19  491b
     20  491b
     21  491b
     22  491b				   .LUM1      SET	.LUM1 + .STEP1
     23  491b				   .LUM2      SET	.LUM2 + .STEP2
     24  491b				   .LUM3      SET	.LUM3 + .STEP3
     13  491b					      REPEND
     14  491b		       44		      .byte.b	$40+(.LUM1/256)
     15  491c		       26		      .byte.b	$20+(.LUM2/256)
     16  491d		       98		      .byte.b	$90+(.LUM3/256)
     17  491e
     18  491e
     19  491e
     20  491e
     21  491e
     22  491e				   .LUM1      SET	.LUM1 + .STEP1
     23  491e				   .LUM2      SET	.LUM2 + .STEP2
     24  491e				   .LUM3      SET	.LUM3 + .STEP3
     13  491e					      REPEND
     14  491e		       44		      .byte.b	$40+(.LUM1/256)
     15  491f		       26		      .byte.b	$20+(.LUM2/256)
     16  4920		       98		      .byte.b	$90+(.LUM3/256)
     17  4921
     18  4921
     19  4921
     20  4921
     21  4921
     22  4921				   .LUM1      SET	.LUM1 + .STEP1
     23  4921				   .LUM2      SET	.LUM2 + .STEP2
     24  4921				   .LUM3      SET	.LUM3 + .STEP3
     13  4921					      REPEND
     14  4921		       44		      .byte.b	$40+(.LUM1/256)
     15  4922		       26		      .byte.b	$20+(.LUM2/256)
     16  4923		       98		      .byte.b	$90+(.LUM3/256)
     17  4924
     18  4924
     19  4924
     20  4924
     21  4924
     22  4924				   .LUM1      SET	.LUM1 + .STEP1
     23  4924				   .LUM2      SET	.LUM2 + .STEP2
     24  4924				   .LUM3      SET	.LUM3 + .STEP3
     13  4924					      REPEND
     14  4924		       44		      .byte.b	$40+(.LUM1/256)
     15  4925		       26		      .byte.b	$20+(.LUM2/256)
     16  4926		       98		      .byte.b	$90+(.LUM3/256)
     17  4927
     18  4927
     19  4927
     20  4927
     21  4927
     22  4927				   .LUM1      SET	.LUM1 + .STEP1
     23  4927				   .LUM2      SET	.LUM2 + .STEP2
     24  4927				   .LUM3      SET	.LUM3 + .STEP3
     13  4927					      REPEND
     14  4927		       44		      .byte.b	$40+(.LUM1/256)
     15  4928		       26		      .byte.b	$20+(.LUM2/256)
     16  4929		       98		      .byte.b	$90+(.LUM3/256)
     17  492a
     18  492a
     19  492a
     20  492a
     21  492a
     22  492a				   .LUM1      SET	.LUM1 + .STEP1
     23  492a				   .LUM2      SET	.LUM2 + .STEP2
     24  492a				   .LUM3      SET	.LUM3 + .STEP3
     13  492a					      REPEND
     14  492a		       44		      .byte.b	$40+(.LUM1/256)
     15  492b		       26		      .byte.b	$20+(.LUM2/256)
     16  492c		       98		      .byte.b	$90+(.LUM3/256)
     17  492d
     18  492d
     19  492d
     20  492d
     21  492d
     22  492d				   .LUM1      SET	.LUM1 + .STEP1
     23  492d				   .LUM2      SET	.LUM2 + .STEP2
     24  492d				   .LUM3      SET	.LUM3 + .STEP3
     13  492d					      REPEND
     14  492d		       44		      .byte.b	$40+(.LUM1/256)
     15  492e		       26		      .byte.b	$20+(.LUM2/256)
     16  492f		       98		      .byte.b	$90+(.LUM3/256)
     17  4930
     18  4930
     19  4930
     20  4930
     21  4930
     22  4930				   .LUM1      SET	.LUM1 + .STEP1
     23  4930				   .LUM2      SET	.LUM2 + .STEP2
     24  4930				   .LUM3      SET	.LUM3 + .STEP3
     13  4930					      REPEND
     14  4930		       44		      .byte.b	$40+(.LUM1/256)
     15  4931		       26		      .byte.b	$20+(.LUM2/256)
     16  4932		       98		      .byte.b	$90+(.LUM3/256)
     17  4933
     18  4933
     19  4933
     20  4933
     21  4933
     22  4933				   .LUM1      SET	.LUM1 + .STEP1
     23  4933				   .LUM2      SET	.LUM2 + .STEP2
     24  4933				   .LUM3      SET	.LUM3 + .STEP3
     13  4933					      REPEND
     14  4933		       44		      .byte.b	$40+(.LUM1/256)
     15  4934		       26		      .byte.b	$20+(.LUM2/256)
     16  4935		       98		      .byte.b	$90+(.LUM3/256)
     17  4936
     18  4936
     19  4936
     20  4936
     21  4936
     22  4936				   .LUM1      SET	.LUM1 + .STEP1
     23  4936				   .LUM2      SET	.LUM2 + .STEP2
     24  4936				   .LUM3      SET	.LUM3 + .STEP3
     13  4936					      REPEND
     14  4936		       44		      .byte.b	$40+(.LUM1/256)
     15  4937		       26		      .byte.b	$20+(.LUM2/256)
     16  4938		       98		      .byte.b	$90+(.LUM3/256)
     17  4939
     18  4939
     19  4939
     20  4939
     21  4939
     22  4939				   .LUM1      SET	.LUM1 + .STEP1
     23  4939				   .LUM2      SET	.LUM2 + .STEP2
     24  4939				   .LUM3      SET	.LUM3 + .STEP3
     13  4939					      REPEND
     14  4939		       44		      .byte.b	$40+(.LUM1/256)
     15  493a		       26		      .byte.b	$20+(.LUM2/256)
     16  493b		       98		      .byte.b	$90+(.LUM3/256)
     17  493c
     18  493c
     19  493c
     20  493c
     21  493c
     22  493c				   .LUM1      SET	.LUM1 + .STEP1
     23  493c				   .LUM2      SET	.LUM2 + .STEP2
     24  493c				   .LUM3      SET	.LUM3 + .STEP3
     13  493c					      REPEND
     14  493c		       44		      .byte.b	$40+(.LUM1/256)
     15  493d		       26		      .byte.b	$20+(.LUM2/256)
     16  493e		       98		      .byte.b	$90+(.LUM3/256)
     17  493f
     18  493f
     19  493f
     20  493f
     21  493f
     22  493f				   .LUM1      SET	.LUM1 + .STEP1
     23  493f				   .LUM2      SET	.LUM2 + .STEP2
     24  493f				   .LUM3      SET	.LUM3 + .STEP3
     13  493f					      REPEND
     14  493f		       44		      .byte.b	$40+(.LUM1/256)
     15  4940		       26		      .byte.b	$20+(.LUM2/256)
     16  4941		       98		      .byte.b	$90+(.LUM3/256)
     17  4942
     18  4942
     19  4942
     20  4942
     21  4942
     22  4942				   .LUM1      SET	.LUM1 + .STEP1
     23  4942				   .LUM2      SET	.LUM2 + .STEP2
     24  4942				   .LUM3      SET	.LUM3 + .STEP3
     13  4942					      REPEND
     14  4942		       44		      .byte.b	$40+(.LUM1/256)
     15  4943		       26		      .byte.b	$20+(.LUM2/256)
     16  4944		       98		      .byte.b	$90+(.LUM3/256)
     17  4945
     18  4945
     19  4945
     20  4945
     21  4945
     22  4945				   .LUM1      SET	.LUM1 + .STEP1
     23  4945				   .LUM2      SET	.LUM2 + .STEP2
     24  4945				   .LUM3      SET	.LUM3 + .STEP3
     13  4945					      REPEND
     14  4945		       44		      .byte.b	$40+(.LUM1/256)
     15  4946		       26		      .byte.b	$20+(.LUM2/256)
     16  4947		       98		      .byte.b	$90+(.LUM3/256)
     17  4948
     18  4948
     19  4948
     20  4948
     21  4948
     22  4948				   .LUM1      SET	.LUM1 + .STEP1
     23  4948				   .LUM2      SET	.LUM2 + .STEP2
     24  4948				   .LUM3      SET	.LUM3 + .STEP3
     13  4948					      REPEND
     14  4948		       44		      .byte.b	$40+(.LUM1/256)
     15  4949		       26		      .byte.b	$20+(.LUM2/256)
     16  494a		       98		      .byte.b	$90+(.LUM3/256)
     17  494b
     18  494b
     19  494b
     20  494b
     21  494b
     22  494b				   .LUM1      SET	.LUM1 + .STEP1
     23  494b				   .LUM2      SET	.LUM2 + .STEP2
     24  494b				   .LUM3      SET	.LUM3 + .STEP3
     13  494b					      REPEND
     14  494b		       44		      .byte.b	$40+(.LUM1/256)
     15  494c		       26		      .byte.b	$20+(.LUM2/256)
     16  494d		       98		      .byte.b	$90+(.LUM3/256)
     17  494e
     18  494e
     19  494e
     20  494e
     21  494e
     22  494e				   .LUM1      SET	.LUM1 + .STEP1
     23  494e				   .LUM2      SET	.LUM2 + .STEP2
     24  494e				   .LUM3      SET	.LUM3 + .STEP3
     13  494e					      REPEND
     14  494e		       44		      .byte.b	$40+(.LUM1/256)
     15  494f		       26		      .byte.b	$20+(.LUM2/256)
     16  4950		       98		      .byte.b	$90+(.LUM3/256)
     17  4951
     18  4951
     19  4951
     20  4951
     21  4951
     22  4951				   .LUM1      SET	.LUM1 + .STEP1
     23  4951				   .LUM2      SET	.LUM2 + .STEP2
     24  4951				   .LUM3      SET	.LUM3 + .STEP3
     13  4951					      REPEND
     14  4951		       44		      .byte.b	$40+(.LUM1/256)
     15  4952		       26		      .byte.b	$20+(.LUM2/256)
     16  4953		       98		      .byte.b	$90+(.LUM3/256)
     17  4954
     18  4954
     19  4954
     20  4954
     21  4954
     22  4954				   .LUM1      SET	.LUM1 + .STEP1
     23  4954				   .LUM2      SET	.LUM2 + .STEP2
     24  4954				   .LUM3      SET	.LUM3 + .STEP3
     13  4954					      REPEND
     14  4954		       44		      .byte.b	$40+(.LUM1/256)
     15  4955		       26		      .byte.b	$20+(.LUM2/256)
     16  4956		       98		      .byte.b	$90+(.LUM3/256)
     17  4957
     18  4957
     19  4957
     20  4957
     21  4957
     22  4957				   .LUM1      SET	.LUM1 + .STEP1
     23  4957				   .LUM2      SET	.LUM2 + .STEP2
     24  4957				   .LUM3      SET	.LUM3 + .STEP3
     13  4957					      REPEND
     14  4957		       44		      .byte.b	$40+(.LUM1/256)
     15  4958		       26		      .byte.b	$20+(.LUM2/256)
     16  4959		       98		      .byte.b	$90+(.LUM3/256)
     17  495a
     18  495a
     19  495a
     20  495a
     21  495a
     22  495a				   .LUM1      SET	.LUM1 + .STEP1
     23  495a				   .LUM2      SET	.LUM2 + .STEP2
     24  495a				   .LUM3      SET	.LUM3 + .STEP3
     13  495a					      REPEND
     14  495a		       44		      .byte.b	$40+(.LUM1/256)
     15  495b		       26		      .byte.b	$20+(.LUM2/256)
     16  495c		       98		      .byte.b	$90+(.LUM3/256)
     17  495d
     18  495d
     19  495d
     20  495d
     21  495d
     22  495d				   .LUM1      SET	.LUM1 + .STEP1
     23  495d				   .LUM2      SET	.LUM2 + .STEP2
     24  495d				   .LUM3      SET	.LUM3 + .STEP3
     13  495d					      REPEND
     14  495d		       44		      .byte.b	$40+(.LUM1/256)
     15  495e		       26		      .byte.b	$20+(.LUM2/256)
     16  495f		       98		      .byte.b	$90+(.LUM3/256)
     17  4960
     18  4960
     19  4960
     20  4960
     21  4960
     22  4960				   .LUM1      SET	.LUM1 + .STEP1
     23  4960				   .LUM2      SET	.LUM2 + .STEP2
     24  4960				   .LUM3      SET	.LUM3 + .STEP3
     13  4960					      REPEND
     14  4960		       44		      .byte.b	$40+(.LUM1/256)
     15  4961		       26		      .byte.b	$20+(.LUM2/256)
     16  4962		       98		      .byte.b	$90+(.LUM3/256)
     17  4963
     18  4963
     19  4963
     20  4963
     21  4963
     22  4963				   .LUM1      SET	.LUM1 + .STEP1
     23  4963				   .LUM2      SET	.LUM2 + .STEP2
     24  4963				   .LUM3      SET	.LUM3 + .STEP3
     13  4963					      REPEND
     14  4963		       44		      .byte.b	$40+(.LUM1/256)
     15  4964		       26		      .byte.b	$20+(.LUM2/256)
     16  4965		       98		      .byte.b	$90+(.LUM3/256)
     17  4966
     18  4966
     19  4966
     20  4966
     21  4966
     22  4966				   .LUM1      SET	.LUM1 + .STEP1
     23  4966				   .LUM2      SET	.LUM2 + .STEP2
     24  4966				   .LUM3      SET	.LUM3 + .STEP3
     13  4966					      REPEND
     14  4966		       44		      .byte.b	$40+(.LUM1/256)
     15  4967		       26		      .byte.b	$20+(.LUM2/256)
     16  4968		       98		      .byte.b	$90+(.LUM3/256)
     17  4969
     18  4969
     19  4969
     20  4969
     21  4969
     22  4969				   .LUM1      SET	.LUM1 + .STEP1
     23  4969				   .LUM2      SET	.LUM2 + .STEP2
     24  4969				   .LUM3      SET	.LUM3 + .STEP3
     13  4969					      REPEND
     14  4969		       44		      .byte.b	$40+(.LUM1/256)
     15  496a		       26		      .byte.b	$20+(.LUM2/256)
     16  496b		       98		      .byte.b	$90+(.LUM3/256)
     17  496c
     18  496c
     19  496c
     20  496c
     21  496c
     22  496c				   .LUM1      SET	.LUM1 + .STEP1
     23  496c				   .LUM2      SET	.LUM2 + .STEP2
     24  496c				   .LUM3      SET	.LUM3 + .STEP3
     13  496c					      REPEND
     14  496c		       44		      .byte.b	$40+(.LUM1/256)
     15  496d		       26		      .byte.b	$20+(.LUM2/256)
     16  496e		       98		      .byte.b	$90+(.LUM3/256)
     17  496f
     18  496f
     19  496f
     20  496f
     21  496f
     22  496f				   .LUM1      SET	.LUM1 + .STEP1
     23  496f				   .LUM2      SET	.LUM2 + .STEP2
     24  496f				   .LUM3      SET	.LUM3 + .STEP3
     13  496f					      REPEND
     14  496f		       44		      .byte.b	$40+(.LUM1/256)
     15  4970		       26		      .byte.b	$20+(.LUM2/256)
     16  4971		       98		      .byte.b	$90+(.LUM3/256)
     17  4972
     18  4972
     19  4972
     20  4972
     21  4972
     22  4972				   .LUM1      SET	.LUM1 + .STEP1
     23  4972				   .LUM2      SET	.LUM2 + .STEP2
     24  4972				   .LUM3      SET	.LUM3 + .STEP3
     13  4972					      REPEND
     14  4972		       44		      .byte.b	$40+(.LUM1/256)
     15  4973		       26		      .byte.b	$20+(.LUM2/256)
     16  4974		       98		      .byte.b	$90+(.LUM3/256)
     17  4975
     18  4975
     19  4975
     20  4975
     21  4975
     22  4975				   .LUM1      SET	.LUM1 + .STEP1
     23  4975				   .LUM2      SET	.LUM2 + .STEP2
     24  4975				   .LUM3      SET	.LUM3 + .STEP3
     13  4975					      REPEND
     14  4975		       44		      .byte.b	$40+(.LUM1/256)
     15  4976		       26		      .byte.b	$20+(.LUM2/256)
     16  4977		       98		      .byte.b	$90+(.LUM3/256)
     17  4978
     18  4978
     19  4978
     20  4978
     21  4978
     22  4978				   .LUM1      SET	.LUM1 + .STEP1
     23  4978				   .LUM2      SET	.LUM2 + .STEP2
     24  4978				   .LUM3      SET	.LUM3 + .STEP3
     13  4978					      REPEND
     14  4978		       44		      .byte.b	$40+(.LUM1/256)
     15  4979		       26		      .byte.b	$20+(.LUM2/256)
     16  497a		       98		      .byte.b	$90+(.LUM3/256)
     17  497b
     18  497b
     19  497b
     20  497b
     21  497b
     22  497b				   .LUM1      SET	.LUM1 + .STEP1
     23  497b				   .LUM2      SET	.LUM2 + .STEP2
     24  497b				   .LUM3      SET	.LUM3 + .STEP3
     13  497b					      REPEND
     14  497b		       44		      .byte.b	$40+(.LUM1/256)
     15  497c		       26		      .byte.b	$20+(.LUM2/256)
     16  497d		       98		      .byte.b	$90+(.LUM3/256)
     17  497e
     18  497e
     19  497e
     20  497e
     21  497e
     22  497e				   .LUM1      SET	.LUM1 + .STEP1
     23  497e				   .LUM2      SET	.LUM2 + .STEP2
     24  497e				   .LUM3      SET	.LUM3 + .STEP3
     13  497e					      REPEND
     14  497e		       44		      .byte.b	$40+(.LUM1/256)
     15  497f		       26		      .byte.b	$20+(.LUM2/256)
     16  4980		       98		      .byte.b	$90+(.LUM3/256)
     17  4981
     18  4981
     19  4981
     20  4981
     21  4981
     22  4981				   .LUM1      SET	.LUM1 + .STEP1
     23  4981				   .LUM2      SET	.LUM2 + .STEP2
     24  4981				   .LUM3      SET	.LUM3 + .STEP3
     13  4981					      REPEND
     14  4981		       44		      .byte.b	$40+(.LUM1/256)
     15  4982		       26		      .byte.b	$20+(.LUM2/256)
     16  4983		       98		      .byte.b	$90+(.LUM3/256)
     17  4984
     18  4984
     19  4984
     20  4984
     21  4984
     22  4984				   .LUM1      SET	.LUM1 + .STEP1
     23  4984				   .LUM2      SET	.LUM2 + .STEP2
     24  4984				   .LUM3      SET	.LUM3 + .STEP3
     13  4984					      REPEND
     14  4984		       44		      .byte.b	$40+(.LUM1/256)
     15  4985		       26		      .byte.b	$20+(.LUM2/256)
     16  4986		       98		      .byte.b	$90+(.LUM3/256)
     17  4987
     18  4987
     19  4987
     20  4987
     21  4987
     22  4987				   .LUM1      SET	.LUM1 + .STEP1
     23  4987				   .LUM2      SET	.LUM2 + .STEP2
     24  4987				   .LUM3      SET	.LUM3 + .STEP3
     13  4987					      REPEND
     14  4987		       44		      .byte.b	$40+(.LUM1/256)
     15  4988		       26		      .byte.b	$20+(.LUM2/256)
     16  4989		       98		      .byte.b	$90+(.LUM3/256)
     17  498a
     18  498a
     19  498a
     20  498a
     21  498a
     22  498a				   .LUM1      SET	.LUM1 + .STEP1
     23  498a				   .LUM2      SET	.LUM2 + .STEP2
     24  498a				   .LUM3      SET	.LUM3 + .STEP3
     13  498a					      REPEND
     14  498a		       44		      .byte.b	$40+(.LUM1/256)
     15  498b		       26		      .byte.b	$20+(.LUM2/256)
     16  498c		       98		      .byte.b	$90+(.LUM3/256)
     17  498d
     18  498d
     19  498d
     20  498d
     21  498d
     22  498d				   .LUM1      SET	.LUM1 + .STEP1
     23  498d				   .LUM2      SET	.LUM2 + .STEP2
     24  498d				   .LUM3      SET	.LUM3 + .STEP3
     13  498d					      REPEND
     14  498d		       44		      .byte.b	$40+(.LUM1/256)
     15  498e		       26		      .byte.b	$20+(.LUM2/256)
     16  498f		       98		      .byte.b	$90+(.LUM3/256)
     17  4990
     18  4990
     19  4990
     20  4990
     21  4990
     22  4990				   .LUM1      SET	.LUM1 + .STEP1
     23  4990				   .LUM2      SET	.LUM2 + .STEP2
     24  4990				   .LUM3      SET	.LUM3 + .STEP3
     13  4990					      REPEND
     14  4990		       44		      .byte.b	$40+(.LUM1/256)
     15  4991		       26		      .byte.b	$20+(.LUM2/256)
     16  4992		       98		      .byte.b	$90+(.LUM3/256)
     17  4993
     18  4993
     19  4993
     20  4993
     21  4993
     22  4993				   .LUM1      SET	.LUM1 + .STEP1
     23  4993				   .LUM2      SET	.LUM2 + .STEP2
     24  4993				   .LUM3      SET	.LUM3 + .STEP3
     13  4993					      REPEND
     14  4993		       44		      .byte.b	$40+(.LUM1/256)
     15  4994		       26		      .byte.b	$20+(.LUM2/256)
     16  4995		       98		      .byte.b	$90+(.LUM3/256)
     17  4996
     18  4996
     19  4996
     20  4996
     21  4996
     22  4996				   .LUM1      SET	.LUM1 + .STEP1
     23  4996				   .LUM2      SET	.LUM2 + .STEP2
     24  4996				   .LUM3      SET	.LUM3 + .STEP3
     13  4996					      REPEND
     14  4996		       44		      .byte.b	$40+(.LUM1/256)
     15  4997		       26		      .byte.b	$20+(.LUM2/256)
     16  4998		       98		      .byte.b	$90+(.LUM3/256)
     17  4999
     18  4999
     19  4999
     20  4999
     21  4999
     22  4999				   .LUM1      SET	.LUM1 + .STEP1
     23  4999				   .LUM2      SET	.LUM2 + .STEP2
     24  4999				   .LUM3      SET	.LUM3 + .STEP3
     13  4999					      REPEND
     14  4999		       44		      .byte.b	$40+(.LUM1/256)
     15  499a		       26		      .byte.b	$20+(.LUM2/256)
     16  499b		       98		      .byte.b	$90+(.LUM3/256)
     17  499c
     18  499c
     19  499c
     20  499c
     21  499c
     22  499c				   .LUM1      SET	.LUM1 + .STEP1
     23  499c				   .LUM2      SET	.LUM2 + .STEP2
     24  499c				   .LUM3      SET	.LUM3 + .STEP3
     13  499c					      REPEND
     14  499c		       44		      .byte.b	$40+(.LUM1/256)
     15  499d		       26		      .byte.b	$20+(.LUM2/256)
     16  499e		       98		      .byte.b	$90+(.LUM3/256)
     17  499f
     18  499f
     19  499f
     20  499f
     21  499f
     22  499f				   .LUM1      SET	.LUM1 + .STEP1
     23  499f				   .LUM2      SET	.LUM2 + .STEP2
     24  499f				   .LUM3      SET	.LUM3 + .STEP3
     13  499f					      REPEND
     14  499f		       44		      .byte.b	$40+(.LUM1/256)
     15  49a0		       26		      .byte.b	$20+(.LUM2/256)
     16  49a1		       98		      .byte.b	$90+(.LUM3/256)
     17  49a2
     18  49a2
     19  49a2
     20  49a2
     21  49a2
     22  49a2				   .LUM1      SET	.LUM1 + .STEP1
     23  49a2				   .LUM2      SET	.LUM2 + .STEP2
     24  49a2				   .LUM3      SET	.LUM3 + .STEP3
     13  49a2					      REPEND
     14  49a2		       44		      .byte.b	$40+(.LUM1/256)
     15  49a3		       26		      .byte.b	$20+(.LUM2/256)
     16  49a4		       98		      .byte.b	$90+(.LUM3/256)
     17  49a5
     18  49a5
     19  49a5
     20  49a5
     21  49a5
     22  49a5				   .LUM1      SET	.LUM1 + .STEP1
     23  49a5				   .LUM2      SET	.LUM2 + .STEP2
     24  49a5				   .LUM3      SET	.LUM3 + .STEP3
     13  49a5					      REPEND
     14  49a5		       44		      .byte.b	$40+(.LUM1/256)
     15  49a6		       26		      .byte.b	$20+(.LUM2/256)
     16  49a7		       98		      .byte.b	$90+(.LUM3/256)
     17  49a8
     18  49a8
     19  49a8
     20  49a8
     21  49a8
     22  49a8				   .LUM1      SET	.LUM1 + .STEP1
     23  49a8				   .LUM2      SET	.LUM2 + .STEP2
     24  49a8				   .LUM3      SET	.LUM3 + .STEP3
     13  49a8					      REPEND
     14  49a8		       44		      .byte.b	$40+(.LUM1/256)
     15  49a9		       26		      .byte.b	$20+(.LUM2/256)
     16  49aa		       98		      .byte.b	$90+(.LUM3/256)
     17  49ab
     18  49ab
     19  49ab
     20  49ab
     21  49ab
     22  49ab				   .LUM1      SET	.LUM1 + .STEP1
     23  49ab				   .LUM2      SET	.LUM2 + .STEP2
     24  49ab				   .LUM3      SET	.LUM3 + .STEP3
     13  49ab					      REPEND
     14  49ab		       44		      .byte.b	$40+(.LUM1/256)
     15  49ac		       26		      .byte.b	$20+(.LUM2/256)
     16  49ad		       98		      .byte.b	$90+(.LUM3/256)
     17  49ae
     18  49ae
     19  49ae
     20  49ae
     21  49ae
     22  49ae				   .LUM1      SET	.LUM1 + .STEP1
     23  49ae				   .LUM2      SET	.LUM2 + .STEP2
     24  49ae				   .LUM3      SET	.LUM3 + .STEP3
     13  49ae					      REPEND
     14  49ae		       44		      .byte.b	$40+(.LUM1/256)
     15  49af		       26		      .byte.b	$20+(.LUM2/256)
     16  49b0		       98		      .byte.b	$90+(.LUM3/256)
     17  49b1
     18  49b1
     19  49b1
     20  49b1
     21  49b1
     22  49b1				   .LUM1      SET	.LUM1 + .STEP1
     23  49b1				   .LUM2      SET	.LUM2 + .STEP2
     24  49b1				   .LUM3      SET	.LUM3 + .STEP3
     13  49b1					      REPEND
     14  49b1		       44		      .byte.b	$40+(.LUM1/256)
     15  49b2		       26		      .byte.b	$20+(.LUM2/256)
     16  49b3		       98		      .byte.b	$90+(.LUM3/256)
     17  49b4
     18  49b4
     19  49b4
     20  49b4
     21  49b4
     22  49b4				   .LUM1      SET	.LUM1 + .STEP1
     23  49b4				   .LUM2      SET	.LUM2 + .STEP2
     24  49b4				   .LUM3      SET	.LUM3 + .STEP3
     13  49b4					      REPEND
     14  49b4		       44		      .byte.b	$40+(.LUM1/256)
     15  49b5		       26		      .byte.b	$20+(.LUM2/256)
     16  49b6		       98		      .byte.b	$90+(.LUM3/256)
     17  49b7
     18  49b7
     19  49b7
     20  49b7
     21  49b7
     22  49b7				   .LUM1      SET	.LUM1 + .STEP1
     23  49b7				   .LUM2      SET	.LUM2 + .STEP2
     24  49b7				   .LUM3      SET	.LUM3 + .STEP3
     13  49b7					      REPEND
     14  49b7		       44		      .byte.b	$40+(.LUM1/256)
     15  49b8		       26		      .byte.b	$20+(.LUM2/256)
     16  49b9		       98		      .byte.b	$90+(.LUM3/256)
     17  49ba
     18  49ba
     19  49ba
     20  49ba
     21  49ba
     22  49ba				   .LUM1      SET	.LUM1 + .STEP1
     23  49ba				   .LUM2      SET	.LUM2 + .STEP2
     24  49ba				   .LUM3      SET	.LUM3 + .STEP3
     13  49ba					      REPEND
     14  49ba		       44		      .byte.b	$40+(.LUM1/256)
     15  49bb		       26		      .byte.b	$20+(.LUM2/256)
     16  49bc		       98		      .byte.b	$90+(.LUM3/256)
     17  49bd
     18  49bd
     19  49bd
     20  49bd
     21  49bd
     22  49bd				   .LUM1      SET	.LUM1 + .STEP1
     23  49bd				   .LUM2      SET	.LUM2 + .STEP2
     24  49bd				   .LUM3      SET	.LUM3 + .STEP3
     13  49bd					      REPEND
     14  49bd		       44		      .byte.b	$40+(.LUM1/256)
     15  49be		       26		      .byte.b	$20+(.LUM2/256)
     16  49bf		       98		      .byte.b	$90+(.LUM3/256)
     17  49c0
     18  49c0
     19  49c0
     20  49c0
     21  49c0
     22  49c0				   .LUM1      SET	.LUM1 + .STEP1
     23  49c0				   .LUM2      SET	.LUM2 + .STEP2
     24  49c0				   .LUM3      SET	.LUM3 + .STEP3
     13  49c0					      REPEND
     14  49c0		       44		      .byte.b	$40+(.LUM1/256)
     15  49c1		       26		      .byte.b	$20+(.LUM2/256)
     16  49c2		       98		      .byte.b	$90+(.LUM3/256)
     17  49c3
     18  49c3
     19  49c3
     20  49c3
     21  49c3
     22  49c3				   .LUM1      SET	.LUM1 + .STEP1
     23  49c3				   .LUM2      SET	.LUM2 + .STEP2
     24  49c3				   .LUM3      SET	.LUM3 + .STEP3
     13  49c3					      REPEND
     14  49c3		       44		      .byte.b	$40+(.LUM1/256)
     15  49c4		       26		      .byte.b	$20+(.LUM2/256)
     16  49c5		       98		      .byte.b	$90+(.LUM3/256)
     17  49c6
     18  49c6
     19  49c6
     20  49c6
     21  49c6
     22  49c6				   .LUM1      SET	.LUM1 + .STEP1
     23  49c6				   .LUM2      SET	.LUM2 + .STEP2
     24  49c6				   .LUM3      SET	.LUM3 + .STEP3
     13  49c6					      REPEND
     14  49c6		       44		      .byte.b	$40+(.LUM1/256)
     15  49c7		       26		      .byte.b	$20+(.LUM2/256)
     16  49c8		       98		      .byte.b	$90+(.LUM3/256)
     17  49c9
     18  49c9
     19  49c9
     20  49c9
     21  49c9
     22  49c9				   .LUM1      SET	.LUM1 + .STEP1
     23  49c9				   .LUM2      SET	.LUM2 + .STEP2
     24  49c9				   .LUM3      SET	.LUM3 + .STEP3
     13  49c9					      REPEND
     14  49c9		       44		      .byte.b	$40+(.LUM1/256)
     15  49ca		       26		      .byte.b	$20+(.LUM2/256)
     16  49cb		       98		      .byte.b	$90+(.LUM3/256)
     17  49cc
     18  49cc
     19  49cc
     20  49cc
     21  49cc
     22  49cc				   .LUM1      SET	.LUM1 + .STEP1
     23  49cc				   .LUM2      SET	.LUM2 + .STEP2
     24  49cc				   .LUM3      SET	.LUM3 + .STEP3
     13  49cc					      REPEND
     14  49cc		       44		      .byte.b	$40+(.LUM1/256)
     15  49cd		       26		      .byte.b	$20+(.LUM2/256)
     16  49ce		       98		      .byte.b	$90+(.LUM3/256)
     17  49cf
     18  49cf
     19  49cf
     20  49cf
     21  49cf
     22  49cf				   .LUM1      SET	.LUM1 + .STEP1
     23  49cf				   .LUM2      SET	.LUM2 + .STEP2
     24  49cf				   .LUM3      SET	.LUM3 + .STEP3
     13  49cf					      REPEND
     14  49cf		       44		      .byte.b	$40+(.LUM1/256)
     15  49d0		       26		      .byte.b	$20+(.LUM2/256)
     16  49d1		       98		      .byte.b	$90+(.LUM3/256)
     17  49d2
     18  49d2
     19  49d2
     20  49d2
     21  49d2
     22  49d2				   .LUM1      SET	.LUM1 + .STEP1
     23  49d2				   .LUM2      SET	.LUM2 + .STEP2
     24  49d2				   .LUM3      SET	.LUM3 + .STEP3
     13  49d2					      REPEND
     14  49d2		       44		      .byte.b	$40+(.LUM1/256)
     15  49d3		       26		      .byte.b	$20+(.LUM2/256)
     16  49d4		       98		      .byte.b	$90+(.LUM3/256)
     17  49d5
     18  49d5
     19  49d5
     20  49d5
     21  49d5
     22  49d5				   .LUM1      SET	.LUM1 + .STEP1
     23  49d5				   .LUM2      SET	.LUM2 + .STEP2
     24  49d5				   .LUM3      SET	.LUM3 + .STEP3
     13  49d5					      REPEND
     14  49d5		       44		      .byte.b	$40+(.LUM1/256)
     15  49d6		       26		      .byte.b	$20+(.LUM2/256)
     16  49d7		       98		      .byte.b	$90+(.LUM3/256)
     17  49d8
     18  49d8
     19  49d8
     20  49d8
     21  49d8
     22  49d8				   .LUM1      SET	.LUM1 + .STEP1
     23  49d8				   .LUM2      SET	.LUM2 + .STEP2
     24  49d8				   .LUM3      SET	.LUM3 + .STEP3
     25  49d8					      REPEND
    254  49d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  49d8
    256  49d8							;    ECHO "PAL LUMS"
    257  49d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  49d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  49d8
      2  49d8
      3  49d8
      4  49d8
      5  49d8				   .LUM1      SET	$6*256
      6  49d8				   .LUM2      SET	$4*256
      7  49d8				   .LUM3      SET	$8*256
      8  49d8
      9  49d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  49d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  49d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  49d8
     13  49d8					      REPEAT	72
     14  49d8		       66		      .byte.b	$60+(.LUM1/256)
     15  49d9		       84		      .byte.b	$80+(.LUM2/256)
     16  49da		       18		      .byte.b	$10+(.LUM3/256)
     17  49db
     18  49db
     19  49db
     20  49db
     21  49db
     22  49db				   .LUM1      SET	.LUM1 + .STEP1
     23  49db				   .LUM2      SET	.LUM2 + .STEP2
     24  49db				   .LUM3      SET	.LUM3 + .STEP3
     13  49db					      REPEND
     14  49db		       66		      .byte.b	$60+(.LUM1/256)
     15  49dc		       84		      .byte.b	$80+(.LUM2/256)
     16  49dd		       18		      .byte.b	$10+(.LUM3/256)
     17  49de
     18  49de
     19  49de
     20  49de
     21  49de
     22  49de				   .LUM1      SET	.LUM1 + .STEP1
     23  49de				   .LUM2      SET	.LUM2 + .STEP2
     24  49de				   .LUM3      SET	.LUM3 + .STEP3
     13  49de					      REPEND
     14  49de		       66		      .byte.b	$60+(.LUM1/256)
     15  49df		       84		      .byte.b	$80+(.LUM2/256)
     16  49e0		       18		      .byte.b	$10+(.LUM3/256)
     17  49e1
     18  49e1
     19  49e1
     20  49e1
     21  49e1
     22  49e1				   .LUM1      SET	.LUM1 + .STEP1
     23  49e1				   .LUM2      SET	.LUM2 + .STEP2
     24  49e1				   .LUM3      SET	.LUM3 + .STEP3
     13  49e1					      REPEND
     14  49e1		       66		      .byte.b	$60+(.LUM1/256)
     15  49e2		       84		      .byte.b	$80+(.LUM2/256)
     16  49e3		       18		      .byte.b	$10+(.LUM3/256)
     17  49e4
     18  49e4
     19  49e4
     20  49e4
     21  49e4
     22  49e4				   .LUM1      SET	.LUM1 + .STEP1
     23  49e4				   .LUM2      SET	.LUM2 + .STEP2
     24  49e4				   .LUM3      SET	.LUM3 + .STEP3
     13  49e4					      REPEND
     14  49e4		       66		      .byte.b	$60+(.LUM1/256)
     15  49e5		       84		      .byte.b	$80+(.LUM2/256)
     16  49e6		       18		      .byte.b	$10+(.LUM3/256)
     17  49e7
     18  49e7
     19  49e7
     20  49e7
     21  49e7
     22  49e7				   .LUM1      SET	.LUM1 + .STEP1
     23  49e7				   .LUM2      SET	.LUM2 + .STEP2
     24  49e7				   .LUM3      SET	.LUM3 + .STEP3
     13  49e7					      REPEND
     14  49e7		       66		      .byte.b	$60+(.LUM1/256)
     15  49e8		       84		      .byte.b	$80+(.LUM2/256)
     16  49e9		       18		      .byte.b	$10+(.LUM3/256)
     17  49ea
     18  49ea
     19  49ea
     20  49ea
     21  49ea
     22  49ea				   .LUM1      SET	.LUM1 + .STEP1
     23  49ea				   .LUM2      SET	.LUM2 + .STEP2
     24  49ea				   .LUM3      SET	.LUM3 + .STEP3
     13  49ea					      REPEND
     14  49ea		       66		      .byte.b	$60+(.LUM1/256)
     15  49eb		       84		      .byte.b	$80+(.LUM2/256)
     16  49ec		       18		      .byte.b	$10+(.LUM3/256)
     17  49ed
     18  49ed
     19  49ed
     20  49ed
     21  49ed
     22  49ed				   .LUM1      SET	.LUM1 + .STEP1
     23  49ed				   .LUM2      SET	.LUM2 + .STEP2
     24  49ed				   .LUM3      SET	.LUM3 + .STEP3
     13  49ed					      REPEND
     14  49ed		       66		      .byte.b	$60+(.LUM1/256)
     15  49ee		       84		      .byte.b	$80+(.LUM2/256)
     16  49ef		       18		      .byte.b	$10+(.LUM3/256)
     17  49f0
     18  49f0
     19  49f0
     20  49f0
     21  49f0
     22  49f0				   .LUM1      SET	.LUM1 + .STEP1
     23  49f0				   .LUM2      SET	.LUM2 + .STEP2
     24  49f0				   .LUM3      SET	.LUM3 + .STEP3
     13  49f0					      REPEND
     14  49f0		       66		      .byte.b	$60+(.LUM1/256)
     15  49f1		       84		      .byte.b	$80+(.LUM2/256)
     16  49f2		       18		      .byte.b	$10+(.LUM3/256)
     17  49f3
     18  49f3
     19  49f3
     20  49f3
     21  49f3
     22  49f3				   .LUM1      SET	.LUM1 + .STEP1
     23  49f3				   .LUM2      SET	.LUM2 + .STEP2
     24  49f3				   .LUM3      SET	.LUM3 + .STEP3
     13  49f3					      REPEND
     14  49f3		       66		      .byte.b	$60+(.LUM1/256)
     15  49f4		       84		      .byte.b	$80+(.LUM2/256)
     16  49f5		       18		      .byte.b	$10+(.LUM3/256)
     17  49f6
     18  49f6
     19  49f6
     20  49f6
     21  49f6
     22  49f6				   .LUM1      SET	.LUM1 + .STEP1
     23  49f6				   .LUM2      SET	.LUM2 + .STEP2
     24  49f6				   .LUM3      SET	.LUM3 + .STEP3
     13  49f6					      REPEND
     14  49f6		       66		      .byte.b	$60+(.LUM1/256)
     15  49f7		       84		      .byte.b	$80+(.LUM2/256)
     16  49f8		       18		      .byte.b	$10+(.LUM3/256)
     17  49f9
     18  49f9
     19  49f9
     20  49f9
     21  49f9
     22  49f9				   .LUM1      SET	.LUM1 + .STEP1
     23  49f9				   .LUM2      SET	.LUM2 + .STEP2
     24  49f9				   .LUM3      SET	.LUM3 + .STEP3
     13  49f9					      REPEND
     14  49f9		       66		      .byte.b	$60+(.LUM1/256)
     15  49fa		       84		      .byte.b	$80+(.LUM2/256)
     16  49fb		       18		      .byte.b	$10+(.LUM3/256)
     17  49fc
     18  49fc
     19  49fc
     20  49fc
     21  49fc
     22  49fc				   .LUM1      SET	.LUM1 + .STEP1
     23  49fc				   .LUM2      SET	.LUM2 + .STEP2
     24  49fc				   .LUM3      SET	.LUM3 + .STEP3
     13  49fc					      REPEND
     14  49fc		       66		      .byte.b	$60+(.LUM1/256)
     15  49fd		       84		      .byte.b	$80+(.LUM2/256)
     16  49fe		       18		      .byte.b	$10+(.LUM3/256)
     17  49ff
     18  49ff
     19  49ff
     20  49ff
     21  49ff
     22  49ff				   .LUM1      SET	.LUM1 + .STEP1
     23  49ff				   .LUM2      SET	.LUM2 + .STEP2
     24  49ff				   .LUM3      SET	.LUM3 + .STEP3
     13  49ff					      REPEND
     14  49ff		       66		      .byte.b	$60+(.LUM1/256)
     15  4a00		       84		      .byte.b	$80+(.LUM2/256)
     16  4a01		       18		      .byte.b	$10+(.LUM3/256)
     17  4a02
     18  4a02
     19  4a02
     20  4a02
     21  4a02
     22  4a02				   .LUM1      SET	.LUM1 + .STEP1
     23  4a02				   .LUM2      SET	.LUM2 + .STEP2
     24  4a02				   .LUM3      SET	.LUM3 + .STEP3
     13  4a02					      REPEND
     14  4a02		       66		      .byte.b	$60+(.LUM1/256)
     15  4a03		       84		      .byte.b	$80+(.LUM2/256)
     16  4a04		       18		      .byte.b	$10+(.LUM3/256)
     17  4a05
     18  4a05
     19  4a05
     20  4a05
     21  4a05
     22  4a05				   .LUM1      SET	.LUM1 + .STEP1
     23  4a05				   .LUM2      SET	.LUM2 + .STEP2
     24  4a05				   .LUM3      SET	.LUM3 + .STEP3
     13  4a05					      REPEND
     14  4a05		       66		      .byte.b	$60+(.LUM1/256)
     15  4a06		       84		      .byte.b	$80+(.LUM2/256)
     16  4a07		       18		      .byte.b	$10+(.LUM3/256)
     17  4a08
     18  4a08
     19  4a08
     20  4a08
     21  4a08
     22  4a08				   .LUM1      SET	.LUM1 + .STEP1
     23  4a08				   .LUM2      SET	.LUM2 + .STEP2
     24  4a08				   .LUM3      SET	.LUM3 + .STEP3
     13  4a08					      REPEND
     14  4a08		       66		      .byte.b	$60+(.LUM1/256)
     15  4a09		       84		      .byte.b	$80+(.LUM2/256)
     16  4a0a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a0b
     18  4a0b
     19  4a0b
     20  4a0b
     21  4a0b
     22  4a0b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a0b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a0b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a0b					      REPEND
     14  4a0b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a0c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a0d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a0e
     18  4a0e
     19  4a0e
     20  4a0e
     21  4a0e
     22  4a0e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a0e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a0e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a0e					      REPEND
     14  4a0e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a0f		       84		      .byte.b	$80+(.LUM2/256)
     16  4a10		       18		      .byte.b	$10+(.LUM3/256)
     17  4a11
     18  4a11
     19  4a11
     20  4a11
     21  4a11
     22  4a11				   .LUM1      SET	.LUM1 + .STEP1
     23  4a11				   .LUM2      SET	.LUM2 + .STEP2
     24  4a11				   .LUM3      SET	.LUM3 + .STEP3
     13  4a11					      REPEND
     14  4a11		       66		      .byte.b	$60+(.LUM1/256)
     15  4a12		       84		      .byte.b	$80+(.LUM2/256)
     16  4a13		       18		      .byte.b	$10+(.LUM3/256)
     17  4a14
     18  4a14
     19  4a14
     20  4a14
     21  4a14
     22  4a14				   .LUM1      SET	.LUM1 + .STEP1
     23  4a14				   .LUM2      SET	.LUM2 + .STEP2
     24  4a14				   .LUM3      SET	.LUM3 + .STEP3
     13  4a14					      REPEND
     14  4a14		       66		      .byte.b	$60+(.LUM1/256)
     15  4a15		       84		      .byte.b	$80+(.LUM2/256)
     16  4a16		       18		      .byte.b	$10+(.LUM3/256)
     17  4a17
     18  4a17
     19  4a17
     20  4a17
     21  4a17
     22  4a17				   .LUM1      SET	.LUM1 + .STEP1
     23  4a17				   .LUM2      SET	.LUM2 + .STEP2
     24  4a17				   .LUM3      SET	.LUM3 + .STEP3
     13  4a17					      REPEND
     14  4a17		       66		      .byte.b	$60+(.LUM1/256)
     15  4a18		       84		      .byte.b	$80+(.LUM2/256)
     16  4a19		       18		      .byte.b	$10+(.LUM3/256)
     17  4a1a
     18  4a1a
     19  4a1a
     20  4a1a
     21  4a1a
     22  4a1a				   .LUM1      SET	.LUM1 + .STEP1
     23  4a1a				   .LUM2      SET	.LUM2 + .STEP2
     24  4a1a				   .LUM3      SET	.LUM3 + .STEP3
     13  4a1a					      REPEND
     14  4a1a		       66		      .byte.b	$60+(.LUM1/256)
     15  4a1b		       84		      .byte.b	$80+(.LUM2/256)
     16  4a1c		       18		      .byte.b	$10+(.LUM3/256)
     17  4a1d
     18  4a1d
     19  4a1d
     20  4a1d
     21  4a1d
     22  4a1d				   .LUM1      SET	.LUM1 + .STEP1
     23  4a1d				   .LUM2      SET	.LUM2 + .STEP2
     24  4a1d				   .LUM3      SET	.LUM3 + .STEP3
     13  4a1d					      REPEND
     14  4a1d		       66		      .byte.b	$60+(.LUM1/256)
     15  4a1e		       84		      .byte.b	$80+(.LUM2/256)
     16  4a1f		       18		      .byte.b	$10+(.LUM3/256)
     17  4a20
     18  4a20
     19  4a20
     20  4a20
     21  4a20
     22  4a20				   .LUM1      SET	.LUM1 + .STEP1
     23  4a20				   .LUM2      SET	.LUM2 + .STEP2
     24  4a20				   .LUM3      SET	.LUM3 + .STEP3
     13  4a20					      REPEND
     14  4a20		       66		      .byte.b	$60+(.LUM1/256)
     15  4a21		       84		      .byte.b	$80+(.LUM2/256)
     16  4a22		       18		      .byte.b	$10+(.LUM3/256)
     17  4a23
     18  4a23
     19  4a23
     20  4a23
     21  4a23
     22  4a23				   .LUM1      SET	.LUM1 + .STEP1
     23  4a23				   .LUM2      SET	.LUM2 + .STEP2
     24  4a23				   .LUM3      SET	.LUM3 + .STEP3
     13  4a23					      REPEND
     14  4a23		       66		      .byte.b	$60+(.LUM1/256)
     15  4a24		       84		      .byte.b	$80+(.LUM2/256)
     16  4a25		       18		      .byte.b	$10+(.LUM3/256)
     17  4a26
     18  4a26
     19  4a26
     20  4a26
     21  4a26
     22  4a26				   .LUM1      SET	.LUM1 + .STEP1
     23  4a26				   .LUM2      SET	.LUM2 + .STEP2
     24  4a26				   .LUM3      SET	.LUM3 + .STEP3
     13  4a26					      REPEND
     14  4a26		       66		      .byte.b	$60+(.LUM1/256)
     15  4a27		       84		      .byte.b	$80+(.LUM2/256)
     16  4a28		       18		      .byte.b	$10+(.LUM3/256)
     17  4a29
     18  4a29
     19  4a29
     20  4a29
     21  4a29
     22  4a29				   .LUM1      SET	.LUM1 + .STEP1
     23  4a29				   .LUM2      SET	.LUM2 + .STEP2
     24  4a29				   .LUM3      SET	.LUM3 + .STEP3
     13  4a29					      REPEND
     14  4a29		       66		      .byte.b	$60+(.LUM1/256)
     15  4a2a		       84		      .byte.b	$80+(.LUM2/256)
     16  4a2b		       18		      .byte.b	$10+(.LUM3/256)
     17  4a2c
     18  4a2c
     19  4a2c
     20  4a2c
     21  4a2c
     22  4a2c				   .LUM1      SET	.LUM1 + .STEP1
     23  4a2c				   .LUM2      SET	.LUM2 + .STEP2
     24  4a2c				   .LUM3      SET	.LUM3 + .STEP3
     13  4a2c					      REPEND
     14  4a2c		       66		      .byte.b	$60+(.LUM1/256)
     15  4a2d		       84		      .byte.b	$80+(.LUM2/256)
     16  4a2e		       18		      .byte.b	$10+(.LUM3/256)
     17  4a2f
     18  4a2f
     19  4a2f
     20  4a2f
     21  4a2f
     22  4a2f				   .LUM1      SET	.LUM1 + .STEP1
     23  4a2f				   .LUM2      SET	.LUM2 + .STEP2
     24  4a2f				   .LUM3      SET	.LUM3 + .STEP3
     13  4a2f					      REPEND
     14  4a2f		       66		      .byte.b	$60+(.LUM1/256)
     15  4a30		       84		      .byte.b	$80+(.LUM2/256)
     16  4a31		       18		      .byte.b	$10+(.LUM3/256)
     17  4a32
     18  4a32
     19  4a32
     20  4a32
     21  4a32
     22  4a32				   .LUM1      SET	.LUM1 + .STEP1
     23  4a32				   .LUM2      SET	.LUM2 + .STEP2
     24  4a32				   .LUM3      SET	.LUM3 + .STEP3
     13  4a32					      REPEND
     14  4a32		       66		      .byte.b	$60+(.LUM1/256)
     15  4a33		       84		      .byte.b	$80+(.LUM2/256)
     16  4a34		       18		      .byte.b	$10+(.LUM3/256)
     17  4a35
     18  4a35
     19  4a35
     20  4a35
     21  4a35
     22  4a35				   .LUM1      SET	.LUM1 + .STEP1
     23  4a35				   .LUM2      SET	.LUM2 + .STEP2
     24  4a35				   .LUM3      SET	.LUM3 + .STEP3
     13  4a35					      REPEND
     14  4a35		       66		      .byte.b	$60+(.LUM1/256)
     15  4a36		       84		      .byte.b	$80+(.LUM2/256)
     16  4a37		       18		      .byte.b	$10+(.LUM3/256)
     17  4a38
     18  4a38
     19  4a38
     20  4a38
     21  4a38
     22  4a38				   .LUM1      SET	.LUM1 + .STEP1
     23  4a38				   .LUM2      SET	.LUM2 + .STEP2
     24  4a38				   .LUM3      SET	.LUM3 + .STEP3
     13  4a38					      REPEND
     14  4a38		       66		      .byte.b	$60+(.LUM1/256)
     15  4a39		       84		      .byte.b	$80+(.LUM2/256)
     16  4a3a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a3b
     18  4a3b
     19  4a3b
     20  4a3b
     21  4a3b
     22  4a3b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a3b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a3b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a3b					      REPEND
     14  4a3b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a3c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a3d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a3e
     18  4a3e
     19  4a3e
     20  4a3e
     21  4a3e
     22  4a3e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a3e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a3e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a3e					      REPEND
     14  4a3e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a3f		       84		      .byte.b	$80+(.LUM2/256)
     16  4a40		       18		      .byte.b	$10+(.LUM3/256)
     17  4a41
     18  4a41
     19  4a41
     20  4a41
     21  4a41
     22  4a41				   .LUM1      SET	.LUM1 + .STEP1
     23  4a41				   .LUM2      SET	.LUM2 + .STEP2
     24  4a41				   .LUM3      SET	.LUM3 + .STEP3
     13  4a41					      REPEND
     14  4a41		       66		      .byte.b	$60+(.LUM1/256)
     15  4a42		       84		      .byte.b	$80+(.LUM2/256)
     16  4a43		       18		      .byte.b	$10+(.LUM3/256)
     17  4a44
     18  4a44
     19  4a44
     20  4a44
     21  4a44
     22  4a44				   .LUM1      SET	.LUM1 + .STEP1
     23  4a44				   .LUM2      SET	.LUM2 + .STEP2
     24  4a44				   .LUM3      SET	.LUM3 + .STEP3
     13  4a44					      REPEND
     14  4a44		       66		      .byte.b	$60+(.LUM1/256)
     15  4a45		       84		      .byte.b	$80+(.LUM2/256)
     16  4a46		       18		      .byte.b	$10+(.LUM3/256)
     17  4a47
     18  4a47
     19  4a47
     20  4a47
     21  4a47
     22  4a47				   .LUM1      SET	.LUM1 + .STEP1
     23  4a47				   .LUM2      SET	.LUM2 + .STEP2
     24  4a47				   .LUM3      SET	.LUM3 + .STEP3
     13  4a47					      REPEND
     14  4a47		       66		      .byte.b	$60+(.LUM1/256)
     15  4a48		       84		      .byte.b	$80+(.LUM2/256)
     16  4a49		       18		      .byte.b	$10+(.LUM3/256)
     17  4a4a
     18  4a4a
     19  4a4a
     20  4a4a
     21  4a4a
     22  4a4a				   .LUM1      SET	.LUM1 + .STEP1
     23  4a4a				   .LUM2      SET	.LUM2 + .STEP2
     24  4a4a				   .LUM3      SET	.LUM3 + .STEP3
     13  4a4a					      REPEND
     14  4a4a		       66		      .byte.b	$60+(.LUM1/256)
     15  4a4b		       84		      .byte.b	$80+(.LUM2/256)
     16  4a4c		       18		      .byte.b	$10+(.LUM3/256)
     17  4a4d
     18  4a4d
     19  4a4d
     20  4a4d
     21  4a4d
     22  4a4d				   .LUM1      SET	.LUM1 + .STEP1
     23  4a4d				   .LUM2      SET	.LUM2 + .STEP2
     24  4a4d				   .LUM3      SET	.LUM3 + .STEP3
     13  4a4d					      REPEND
     14  4a4d		       66		      .byte.b	$60+(.LUM1/256)
     15  4a4e		       84		      .byte.b	$80+(.LUM2/256)
     16  4a4f		       18		      .byte.b	$10+(.LUM3/256)
     17  4a50
     18  4a50
     19  4a50
     20  4a50
     21  4a50
     22  4a50				   .LUM1      SET	.LUM1 + .STEP1
     23  4a50				   .LUM2      SET	.LUM2 + .STEP2
     24  4a50				   .LUM3      SET	.LUM3 + .STEP3
     13  4a50					      REPEND
     14  4a50		       66		      .byte.b	$60+(.LUM1/256)
     15  4a51		       84		      .byte.b	$80+(.LUM2/256)
     16  4a52		       18		      .byte.b	$10+(.LUM3/256)
     17  4a53
     18  4a53
     19  4a53
     20  4a53
     21  4a53
     22  4a53				   .LUM1      SET	.LUM1 + .STEP1
     23  4a53				   .LUM2      SET	.LUM2 + .STEP2
     24  4a53				   .LUM3      SET	.LUM3 + .STEP3
     13  4a53					      REPEND
     14  4a53		       66		      .byte.b	$60+(.LUM1/256)
     15  4a54		       84		      .byte.b	$80+(.LUM2/256)
     16  4a55		       18		      .byte.b	$10+(.LUM3/256)
     17  4a56
     18  4a56
     19  4a56
     20  4a56
     21  4a56
     22  4a56				   .LUM1      SET	.LUM1 + .STEP1
     23  4a56				   .LUM2      SET	.LUM2 + .STEP2
     24  4a56				   .LUM3      SET	.LUM3 + .STEP3
     13  4a56					      REPEND
     14  4a56		       66		      .byte.b	$60+(.LUM1/256)
     15  4a57		       84		      .byte.b	$80+(.LUM2/256)
     16  4a58		       18		      .byte.b	$10+(.LUM3/256)
     17  4a59
     18  4a59
     19  4a59
     20  4a59
     21  4a59
     22  4a59				   .LUM1      SET	.LUM1 + .STEP1
     23  4a59				   .LUM2      SET	.LUM2 + .STEP2
     24  4a59				   .LUM3      SET	.LUM3 + .STEP3
     13  4a59					      REPEND
     14  4a59		       66		      .byte.b	$60+(.LUM1/256)
     15  4a5a		       84		      .byte.b	$80+(.LUM2/256)
     16  4a5b		       18		      .byte.b	$10+(.LUM3/256)
     17  4a5c
     18  4a5c
     19  4a5c
     20  4a5c
     21  4a5c
     22  4a5c				   .LUM1      SET	.LUM1 + .STEP1
     23  4a5c				   .LUM2      SET	.LUM2 + .STEP2
     24  4a5c				   .LUM3      SET	.LUM3 + .STEP3
     13  4a5c					      REPEND
     14  4a5c		       66		      .byte.b	$60+(.LUM1/256)
     15  4a5d		       84		      .byte.b	$80+(.LUM2/256)
     16  4a5e		       18		      .byte.b	$10+(.LUM3/256)
     17  4a5f
     18  4a5f
     19  4a5f
     20  4a5f
     21  4a5f
     22  4a5f				   .LUM1      SET	.LUM1 + .STEP1
     23  4a5f				   .LUM2      SET	.LUM2 + .STEP2
     24  4a5f				   .LUM3      SET	.LUM3 + .STEP3
     13  4a5f					      REPEND
     14  4a5f		       66		      .byte.b	$60+(.LUM1/256)
     15  4a60		       84		      .byte.b	$80+(.LUM2/256)
     16  4a61		       18		      .byte.b	$10+(.LUM3/256)
     17  4a62
     18  4a62
     19  4a62
     20  4a62
     21  4a62
     22  4a62				   .LUM1      SET	.LUM1 + .STEP1
     23  4a62				   .LUM2      SET	.LUM2 + .STEP2
     24  4a62				   .LUM3      SET	.LUM3 + .STEP3
     13  4a62					      REPEND
     14  4a62		       66		      .byte.b	$60+(.LUM1/256)
     15  4a63		       84		      .byte.b	$80+(.LUM2/256)
     16  4a64		       18		      .byte.b	$10+(.LUM3/256)
     17  4a65
     18  4a65
     19  4a65
     20  4a65
     21  4a65
     22  4a65				   .LUM1      SET	.LUM1 + .STEP1
     23  4a65				   .LUM2      SET	.LUM2 + .STEP2
     24  4a65				   .LUM3      SET	.LUM3 + .STEP3
     13  4a65					      REPEND
     14  4a65		       66		      .byte.b	$60+(.LUM1/256)
     15  4a66		       84		      .byte.b	$80+(.LUM2/256)
     16  4a67		       18		      .byte.b	$10+(.LUM3/256)
     17  4a68
     18  4a68
     19  4a68
     20  4a68
     21  4a68
     22  4a68				   .LUM1      SET	.LUM1 + .STEP1
     23  4a68				   .LUM2      SET	.LUM2 + .STEP2
     24  4a68				   .LUM3      SET	.LUM3 + .STEP3
     13  4a68					      REPEND
     14  4a68		       66		      .byte.b	$60+(.LUM1/256)
     15  4a69		       84		      .byte.b	$80+(.LUM2/256)
     16  4a6a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a6b
     18  4a6b
     19  4a6b
     20  4a6b
     21  4a6b
     22  4a6b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a6b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a6b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a6b					      REPEND
     14  4a6b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a6c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a6d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a6e
     18  4a6e
     19  4a6e
     20  4a6e
     21  4a6e
     22  4a6e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a6e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a6e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a6e					      REPEND
     14  4a6e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a6f		       84		      .byte.b	$80+(.LUM2/256)
     16  4a70		       18		      .byte.b	$10+(.LUM3/256)
     17  4a71
     18  4a71
     19  4a71
     20  4a71
     21  4a71
     22  4a71				   .LUM1      SET	.LUM1 + .STEP1
     23  4a71				   .LUM2      SET	.LUM2 + .STEP2
     24  4a71				   .LUM3      SET	.LUM3 + .STEP3
     13  4a71					      REPEND
     14  4a71		       66		      .byte.b	$60+(.LUM1/256)
     15  4a72		       84		      .byte.b	$80+(.LUM2/256)
     16  4a73		       18		      .byte.b	$10+(.LUM3/256)
     17  4a74
     18  4a74
     19  4a74
     20  4a74
     21  4a74
     22  4a74				   .LUM1      SET	.LUM1 + .STEP1
     23  4a74				   .LUM2      SET	.LUM2 + .STEP2
     24  4a74				   .LUM3      SET	.LUM3 + .STEP3
     13  4a74					      REPEND
     14  4a74		       66		      .byte.b	$60+(.LUM1/256)
     15  4a75		       84		      .byte.b	$80+(.LUM2/256)
     16  4a76		       18		      .byte.b	$10+(.LUM3/256)
     17  4a77
     18  4a77
     19  4a77
     20  4a77
     21  4a77
     22  4a77				   .LUM1      SET	.LUM1 + .STEP1
     23  4a77				   .LUM2      SET	.LUM2 + .STEP2
     24  4a77				   .LUM3      SET	.LUM3 + .STEP3
     13  4a77					      REPEND
     14  4a77		       66		      .byte.b	$60+(.LUM1/256)
     15  4a78		       84		      .byte.b	$80+(.LUM2/256)
     16  4a79		       18		      .byte.b	$10+(.LUM3/256)
     17  4a7a
     18  4a7a
     19  4a7a
     20  4a7a
     21  4a7a
     22  4a7a				   .LUM1      SET	.LUM1 + .STEP1
     23  4a7a				   .LUM2      SET	.LUM2 + .STEP2
     24  4a7a				   .LUM3      SET	.LUM3 + .STEP3
     13  4a7a					      REPEND
     14  4a7a		       66		      .byte.b	$60+(.LUM1/256)
     15  4a7b		       84		      .byte.b	$80+(.LUM2/256)
     16  4a7c		       18		      .byte.b	$10+(.LUM3/256)
     17  4a7d
     18  4a7d
     19  4a7d
     20  4a7d
     21  4a7d
     22  4a7d				   .LUM1      SET	.LUM1 + .STEP1
     23  4a7d				   .LUM2      SET	.LUM2 + .STEP2
     24  4a7d				   .LUM3      SET	.LUM3 + .STEP3
     13  4a7d					      REPEND
     14  4a7d		       66		      .byte.b	$60+(.LUM1/256)
     15  4a7e		       84		      .byte.b	$80+(.LUM2/256)
     16  4a7f		       18		      .byte.b	$10+(.LUM3/256)
     17  4a80
     18  4a80
     19  4a80
     20  4a80
     21  4a80
     22  4a80				   .LUM1      SET	.LUM1 + .STEP1
     23  4a80				   .LUM2      SET	.LUM2 + .STEP2
     24  4a80				   .LUM3      SET	.LUM3 + .STEP3
     13  4a80					      REPEND
     14  4a80		       66		      .byte.b	$60+(.LUM1/256)
     15  4a81		       84		      .byte.b	$80+(.LUM2/256)
     16  4a82		       18		      .byte.b	$10+(.LUM3/256)
     17  4a83
     18  4a83
     19  4a83
     20  4a83
     21  4a83
     22  4a83				   .LUM1      SET	.LUM1 + .STEP1
     23  4a83				   .LUM2      SET	.LUM2 + .STEP2
     24  4a83				   .LUM3      SET	.LUM3 + .STEP3
     13  4a83					      REPEND
     14  4a83		       66		      .byte.b	$60+(.LUM1/256)
     15  4a84		       84		      .byte.b	$80+(.LUM2/256)
     16  4a85		       18		      .byte.b	$10+(.LUM3/256)
     17  4a86
     18  4a86
     19  4a86
     20  4a86
     21  4a86
     22  4a86				   .LUM1      SET	.LUM1 + .STEP1
     23  4a86				   .LUM2      SET	.LUM2 + .STEP2
     24  4a86				   .LUM3      SET	.LUM3 + .STEP3
     13  4a86					      REPEND
     14  4a86		       66		      .byte.b	$60+(.LUM1/256)
     15  4a87		       84		      .byte.b	$80+(.LUM2/256)
     16  4a88		       18		      .byte.b	$10+(.LUM3/256)
     17  4a89
     18  4a89
     19  4a89
     20  4a89
     21  4a89
     22  4a89				   .LUM1      SET	.LUM1 + .STEP1
     23  4a89				   .LUM2      SET	.LUM2 + .STEP2
     24  4a89				   .LUM3      SET	.LUM3 + .STEP3
     13  4a89					      REPEND
     14  4a89		       66		      .byte.b	$60+(.LUM1/256)
     15  4a8a		       84		      .byte.b	$80+(.LUM2/256)
     16  4a8b		       18		      .byte.b	$10+(.LUM3/256)
     17  4a8c
     18  4a8c
     19  4a8c
     20  4a8c
     21  4a8c
     22  4a8c				   .LUM1      SET	.LUM1 + .STEP1
     23  4a8c				   .LUM2      SET	.LUM2 + .STEP2
     24  4a8c				   .LUM3      SET	.LUM3 + .STEP3
     13  4a8c					      REPEND
     14  4a8c		       66		      .byte.b	$60+(.LUM1/256)
     15  4a8d		       84		      .byte.b	$80+(.LUM2/256)
     16  4a8e		       18		      .byte.b	$10+(.LUM3/256)
     17  4a8f
     18  4a8f
     19  4a8f
     20  4a8f
     21  4a8f
     22  4a8f				   .LUM1      SET	.LUM1 + .STEP1
     23  4a8f				   .LUM2      SET	.LUM2 + .STEP2
     24  4a8f				   .LUM3      SET	.LUM3 + .STEP3
     13  4a8f					      REPEND
     14  4a8f		       66		      .byte.b	$60+(.LUM1/256)
     15  4a90		       84		      .byte.b	$80+(.LUM2/256)
     16  4a91		       18		      .byte.b	$10+(.LUM3/256)
     17  4a92
     18  4a92
     19  4a92
     20  4a92
     21  4a92
     22  4a92				   .LUM1      SET	.LUM1 + .STEP1
     23  4a92				   .LUM2      SET	.LUM2 + .STEP2
     24  4a92				   .LUM3      SET	.LUM3 + .STEP3
     13  4a92					      REPEND
     14  4a92		       66		      .byte.b	$60+(.LUM1/256)
     15  4a93		       84		      .byte.b	$80+(.LUM2/256)
     16  4a94		       18		      .byte.b	$10+(.LUM3/256)
     17  4a95
     18  4a95
     19  4a95
     20  4a95
     21  4a95
     22  4a95				   .LUM1      SET	.LUM1 + .STEP1
     23  4a95				   .LUM2      SET	.LUM2 + .STEP2
     24  4a95				   .LUM3      SET	.LUM3 + .STEP3
     13  4a95					      REPEND
     14  4a95		       66		      .byte.b	$60+(.LUM1/256)
     15  4a96		       84		      .byte.b	$80+(.LUM2/256)
     16  4a97		       18		      .byte.b	$10+(.LUM3/256)
     17  4a98
     18  4a98
     19  4a98
     20  4a98
     21  4a98
     22  4a98				   .LUM1      SET	.LUM1 + .STEP1
     23  4a98				   .LUM2      SET	.LUM2 + .STEP2
     24  4a98				   .LUM3      SET	.LUM3 + .STEP3
     13  4a98					      REPEND
     14  4a98		       66		      .byte.b	$60+(.LUM1/256)
     15  4a99		       84		      .byte.b	$80+(.LUM2/256)
     16  4a9a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a9b
     18  4a9b
     19  4a9b
     20  4a9b
     21  4a9b
     22  4a9b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a9b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a9b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a9b					      REPEND
     14  4a9b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a9c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a9d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a9e
     18  4a9e
     19  4a9e
     20  4a9e
     21  4a9e
     22  4a9e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a9e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a9e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a9e					      REPEND
     14  4a9e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a9f		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa0		       18		      .byte.b	$10+(.LUM3/256)
     17  4aa1
     18  4aa1
     19  4aa1
     20  4aa1
     21  4aa1
     22  4aa1				   .LUM1      SET	.LUM1 + .STEP1
     23  4aa1				   .LUM2      SET	.LUM2 + .STEP2
     24  4aa1				   .LUM3      SET	.LUM3 + .STEP3
     13  4aa1					      REPEND
     14  4aa1		       66		      .byte.b	$60+(.LUM1/256)
     15  4aa2		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa3		       18		      .byte.b	$10+(.LUM3/256)
     17  4aa4
     18  4aa4
     19  4aa4
     20  4aa4
     21  4aa4
     22  4aa4				   .LUM1      SET	.LUM1 + .STEP1
     23  4aa4				   .LUM2      SET	.LUM2 + .STEP2
     24  4aa4				   .LUM3      SET	.LUM3 + .STEP3
     13  4aa4					      REPEND
     14  4aa4		       66		      .byte.b	$60+(.LUM1/256)
     15  4aa5		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa6		       18		      .byte.b	$10+(.LUM3/256)
     17  4aa7
     18  4aa7
     19  4aa7
     20  4aa7
     21  4aa7
     22  4aa7				   .LUM1      SET	.LUM1 + .STEP1
     23  4aa7				   .LUM2      SET	.LUM2 + .STEP2
     24  4aa7				   .LUM3      SET	.LUM3 + .STEP3
     13  4aa7					      REPEND
     14  4aa7		       66		      .byte.b	$60+(.LUM1/256)
     15  4aa8		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa9		       18		      .byte.b	$10+(.LUM3/256)
     17  4aaa
     18  4aaa
     19  4aaa
     20  4aaa
     21  4aaa
     22  4aaa				   .LUM1      SET	.LUM1 + .STEP1
     23  4aaa				   .LUM2      SET	.LUM2 + .STEP2
     24  4aaa				   .LUM3      SET	.LUM3 + .STEP3
     13  4aaa					      REPEND
     14  4aaa		       66		      .byte.b	$60+(.LUM1/256)
     15  4aab		       84		      .byte.b	$80+(.LUM2/256)
     16  4aac		       18		      .byte.b	$10+(.LUM3/256)
     17  4aad
     18  4aad
     19  4aad
     20  4aad
     21  4aad
     22  4aad				   .LUM1      SET	.LUM1 + .STEP1
     23  4aad				   .LUM2      SET	.LUM2 + .STEP2
     24  4aad				   .LUM3      SET	.LUM3 + .STEP3
     13  4aad					      REPEND
     14  4aad		       66		      .byte.b	$60+(.LUM1/256)
     15  4aae		       84		      .byte.b	$80+(.LUM2/256)
     16  4aaf		       18		      .byte.b	$10+(.LUM3/256)
     17  4ab0
     18  4ab0
     19  4ab0
     20  4ab0
     21  4ab0
     22  4ab0				   .LUM1      SET	.LUM1 + .STEP1
     23  4ab0				   .LUM2      SET	.LUM2 + .STEP2
     24  4ab0				   .LUM3      SET	.LUM3 + .STEP3
     25  4ab0					      REPEND
    259  4ab0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  4ab0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  4ab0					      include	"titleData.asm"
      1  4ab0				   COL_0
      2  4ab0		       00		      .byte.b	0	;R (71)
      3  4ab1		       00		      .byte.b	0	;G
      4  4ab2		       00		      .byte.b	0	;B
      5  4ab3		       40		      .byte.b	64	;R (70)
      6  4ab4		       40		      .byte.b	64	;G
      7  4ab5		       00		      .byte.b	0	;B
      8  4ab6		       00		      .byte.b	0	;R (69)
      9  4ab7		       00		      .byte.b	0	;G
     10  4ab8		       00		      .byte.b	0	;B
     11  4ab9		       00		      .byte.b	0	;R (68)
     12  4aba		       80		      .byte.b	128	;G
     13  4abb		       00		      .byte.b	0	;B
     14  4abc		       00		      .byte.b	0	;R (67)
     15  4abd		       20		      .byte.b	32	;G
     16  4abe		       00		      .byte.b	0	;B
     17  4abf		       80		      .byte.b	128	;R (66)
     18  4ac0		       80		      .byte.b	128	;G
     19  4ac1		       00		      .byte.b	0	;B
     20  4ac2		       c0		      .byte.b	192	;R (65)
     21  4ac3		       c0		      .byte.b	192	;G
     22  4ac4		       00		      .byte.b	0	;B
     23  4ac5		       40		      .byte.b	64	;R (64)
     24  4ac6		       c0		      .byte.b	192	;G
     25  4ac7		       00		      .byte.b	0	;B
     26  4ac8		       00		      .byte.b	0	;R (63)
     27  4ac9		       a0		      .byte.b	160	;G
     28  4aca		       00		      .byte.b	0	;B
     29  4acb		       10		      .byte.b	16	;R (62)
     30  4acc		       70		      .byte.b	112	;G
     31  4acd		       00		      .byte.b	0	;B
     32  4ace		       00		      .byte.b	0	;R (61)
     33  4acf		       80		      .byte.b	128	;G
     34  4ad0		       40		      .byte.b	64	;B
     35  4ad1		       00		      .byte.b	0	;R (60)
     36  4ad2		       c0		      .byte.b	192	;G
     37  4ad3		       00		      .byte.b	0	;B
     38  4ad4		       00		      .byte.b	0	;R (59)
     39  4ad5		       c0		      .byte.b	192	;G
     40  4ad6		       00		      .byte.b	0	;B
     41  4ad7		       00		      .byte.b	0	;R (58)
     42  4ad8		       40		      .byte.b	64	;G
     43  4ad9		       00		      .byte.b	0	;B
     44  4ada		       00		      .byte.b	0	;R (57)
     45  4adb		       c0		      .byte.b	192	;G
     46  4adc		       00		      .byte.b	0	;B
     47  4add		       00		      .byte.b	0	;R (56)
     48  4ade		       60		      .byte.b	96	;G
     49  4adf		       00		      .byte.b	0	;B
     50  4ae0		       00		      .byte.b	0	;R (55)
     51  4ae1		       80		      .byte.b	128	;G
     52  4ae2		       00		      .byte.b	0	;B
     53  4ae3		       00		      .byte.b	0	;R (54)
     54  4ae4		       40		      .byte.b	64	;G
     55  4ae5		       00		      .byte.b	0	;B
     56  4ae6		       00		      .byte.b	0	;R (53)
     57  4ae7		       80		      .byte.b	128	;G
     58  4ae8		       00		      .byte.b	0	;B
     59  4ae9		       00		      .byte.b	0	;R (52)
     60  4aea		       80		      .byte.b	128	;G
     61  4aeb		       00		      .byte.b	0	;B
     62  4aec		       00		      .byte.b	0	;R (51)
     63  4aed		       10		      .byte.b	16	;G
     64  4aee		       00		      .byte.b	0	;B
     65  4aef		       00		      .byte.b	0	;R (50)
     66  4af0		       00		      .byte.b	0	;G
     67  4af1		       00		      .byte.b	0	;B
     68  4af2		       00		      .byte.b	0	;R (49)
     69  4af3		       00		      .byte.b	0	;G
     70  4af4		       00		      .byte.b	0	;B
     71  4af5		       00		      .byte.b	0	;R (48)
     72  4af6		       00		      .byte.b	0	;G
     73  4af7		       00		      .byte.b	0	;B
     74  4af8		       00		      .byte.b	0	;R (47)
     75  4af9		       00		      .byte.b	0	;G
     76  4afa		       00		      .byte.b	0	;B
     77  4afb		       00		      .byte.b	0	;R (46)
     78  4afc		       40		      .byte.b	64	;G
     79  4afd		       00		      .byte.b	0	;B
     80  4afe		       00		      .byte.b	0	;R (45)
     81  4aff		       00		      .byte.b	0	;G
     82  4b00		       00		      .byte.b	0	;B
     83  4b01		       00		      .byte.b	0	;R (44)
     84  4b02		       00		      .byte.b	0	;G
     85  4b03		       00		      .byte.b	0	;B
     86  4b04		       00		      .byte.b	0	;R (43)
     87  4b05		       00		      .byte.b	0	;G
     88  4b06		       00		      .byte.b	0	;B
     89  4b07		       00		      .byte.b	0	;R (42)
     90  4b08		       40		      .byte.b	64	;G
     91  4b09		       00		      .byte.b	0	;B
     92  4b0a		       00		      .byte.b	0	;R (41)
     93  4b0b		       00		      .byte.b	0	;G
     94  4b0c		       00		      .byte.b	0	;B
     95  4b0d		       00		      .byte.b	0	;R (40)
     96  4b0e		       00		      .byte.b	0	;G
     97  4b0f		       00		      .byte.b	0	;B
     98  4b10		       00		      .byte.b	0	;R (39)
     99  4b11		       20		      .byte.b	32	;G
    100  4b12		       00		      .byte.b	0	;B
    101  4b13		       00		      .byte.b	0	;R (38)
    102  4b14		       00		      .byte.b	0	;G
    103  4b15		       00		      .byte.b	0	;B
    104  4b16		       00		      .byte.b	0	;R (37)
    105  4b17		       10		      .byte.b	16	;G
    106  4b18		       00		      .byte.b	0	;B
    107  4b19		       00		      .byte.b	0	;R (36)
    108  4b1a		       00		      .byte.b	0	;G
    109  4b1b		       00		      .byte.b	0	;B
    110  4b1c		       00		      .byte.b	0	;R (35)
    111  4b1d		       40		      .byte.b	64	;G
    112  4b1e		       00		      .byte.b	0	;B
    113  4b1f		       00		      .byte.b	0	;R (34)
    114  4b20		       20		      .byte.b	32	;G
    115  4b21		       00		      .byte.b	0	;B
    116  4b22		       00		      .byte.b	0	;R (33)
    117  4b23		       00		      .byte.b	0	;G
    118  4b24		       00		      .byte.b	0	;B
    119  4b25		       00		      .byte.b	0	;R (32)
    120  4b26		       00		      .byte.b	0	;G
    121  4b27		       00		      .byte.b	0	;B
    122  4b28		       00		      .byte.b	0	;R (31)
    123  4b29		       20		      .byte.b	32	;G
    124  4b2a		       00		      .byte.b	0	;B
    125  4b2b		       00		      .byte.b	0	;R (30)
    126  4b2c		       00		      .byte.b	0	;G
    127  4b2d		       00		      .byte.b	0	;B
    128  4b2e		       00		      .byte.b	0	;R (29)
    129  4b2f		       80		      .byte.b	128	;G
    130  4b30		       00		      .byte.b	0	;B
    131  4b31		       00		      .byte.b	0	;R (28)
    132  4b32		       00		      .byte.b	0	;G
    133  4b33		       00		      .byte.b	0	;B
    134  4b34		       00		      .byte.b	0	;R (27)
    135  4b35		       20		      .byte.b	32	;G
    136  4b36		       00		      .byte.b	0	;B
    137  4b37		       00		      .byte.b	0	;R (26)
    138  4b38		       00		      .byte.b	0	;G
    139  4b39		       00		      .byte.b	0	;B
    140  4b3a		       00		      .byte.b	0	;R (25)
    141  4b3b		       00		      .byte.b	0	;G
    142  4b3c		       00		      .byte.b	0	;B
    143  4b3d		       00		      .byte.b	0	;R (24)
    144  4b3e		       20		      .byte.b	32	;G
    145  4b3f		       00		      .byte.b	0	;B
    146  4b40		       00		      .byte.b	0	;R (23)
    147  4b41		       00		      .byte.b	0	;G
    148  4b42		       00		      .byte.b	0	;B
    149  4b43		       00		      .byte.b	0	;R (22)
    150  4b44		       00		      .byte.b	0	;G
    151  4b45		       00		      .byte.b	0	;B
    152  4b46		       00		      .byte.b	0	;R (21)
    153  4b47		       20		      .byte.b	32	;G
    154  4b48		       00		      .byte.b	0	;B
    155  4b49		       00		      .byte.b	0	;R (20)
    156  4b4a		       00		      .byte.b	0	;G
    157  4b4b		       00		      .byte.b	0	;B
    158  4b4c		       00		      .byte.b	0	;R (19)
    159  4b4d		       00		      .byte.b	0	;G
    160  4b4e		       00		      .byte.b	0	;B
    161  4b4f		       00		      .byte.b	0	;R (18)
    162  4b50		       00		      .byte.b	0	;G
    163  4b51		       00		      .byte.b	0	;B
    164  4b52		       00		      .byte.b	0	;R (17)
    165  4b53		       80		      .byte.b	128	;G
    166  4b54		       00		      .byte.b	0	;B
    167  4b55		       00		      .byte.b	0	;R (16)
    168  4b56		       00		      .byte.b	0	;G
    169  4b57		       00		      .byte.b	0	;B
    170  4b58		       00		      .byte.b	0	;R (15)
    171  4b59		       10		      .byte.b	16	;G
    172  4b5a		       00		      .byte.b	0	;B
    173  4b5b		       00		      .byte.b	0	;R (14)
    174  4b5c		       00		      .byte.b	0	;G
    175  4b5d		       00		      .byte.b	0	;B
    176  4b5e		       00		      .byte.b	0	;R (13)
    177  4b5f		       00		      .byte.b	0	;G
    178  4b60		       00		      .byte.b	0	;B
    179  4b61		       00		      .byte.b	0	;R (12)
    180  4b62		       80		      .byte.b	128	;G
    181  4b63		       00		      .byte.b	0	;B
    182  4b64		       00		      .byte.b	0	;R (11)
    183  4b65		       00		      .byte.b	0	;G
    184  4b66		       00		      .byte.b	0	;B
    185  4b67		       00		      .byte.b	0	;R (10)
    186  4b68		       00		      .byte.b	0	;G
    187  4b69		       00		      .byte.b	0	;B
    188  4b6a		       00		      .byte.b	0	;R (9)
    189  4b6b		       80		      .byte.b	128	;G
    190  4b6c		       00		      .byte.b	0	;B
    191  4b6d		       00		      .byte.b	0	;R (8)
    192  4b6e		       00		      .byte.b	0	;G
    193  4b6f		       00		      .byte.b	0	;B
    194  4b70		       00		      .byte.b	0	;R (7)
    195  4b71		       20		      .byte.b	32	;G
    196  4b72		       00		      .byte.b	0	;B
    197  4b73		       00		      .byte.b	0	;R (6)
    198  4b74		       00		      .byte.b	0	;G
    199  4b75		       00		      .byte.b	0	;B
    200  4b76		       00		      .byte.b	0	;R (5)
    201  4b77		       10		      .byte.b	16	;G
    202  4b78		       00		      .byte.b	0	;B
    203  4b79		       00		      .byte.b	0	;R (4)
    204  4b7a		       00		      .byte.b	0	;G
    205  4b7b		       00		      .byte.b	0	;B
    206  4b7c		       00		      .byte.b	0	;R (3)
    207  4b7d		       00		      .byte.b	0	;G
    208  4b7e		       00		      .byte.b	0	;B
    209  4b7f		       00		      .byte.b	0	;R (2)
    210  4b80		       40		      .byte.b	64	;G
    211  4b81		       00		      .byte.b	0	;B
    212  4b82		       00		      .byte.b	0	;R (1)
    213  4b83		       00		      .byte.b	0	;G
    214  4b84		       00		      .byte.b	0	;B
    215  4b85		       00		      .byte.b	0	;R (0)
    216  4b86		       00		      .byte.b	0	;G
    217  4b87		       00		      .byte.b	0	;B
    218  4b88				   COL_1
    219  4b88		       80		      .byte.b	128	;R (71)
    220  4b89		       80		      .byte.b	128	;G
    221  4b8a		       00		      .byte.b	0	;B
    222  4b8b		       10		      .byte.b	16	;R (70)
    223  4b8c		       14		      .byte.b	20	;G
    224  4b8d		       00		      .byte.b	0	;B
    225  4b8e		       00		      .byte.b	0	;R (69)
    226  4b8f		       41		      .byte.b	65	;G
    227  4b90		       00		      .byte.b	0	;B
    228  4b91		       00		      .byte.b	0	;R (68)
    229  4b92		       08		      .byte.b	8	;G
    230  4b93		       00		      .byte.b	0	;B
    231  4b94		       20		      .byte.b	32	;R (67)
    232  4b95		       20		      .byte.b	32	;G
    233  4b96		       00		      .byte.b	0	;B
    234  4b97		       63		      .byte.b	99	;R (66)
    235  4b98		       6b		      .byte.b	107	;G
    236  4b99		       00		      .byte.b	0	;B
    237  4b9a		       ff		      .byte.b	255	;R (65)
    238  4b9b		       f5		      .byte.b	245	;G
    239  4b9c		       00		      .byte.b	0	;B
    240  4b9d		       80		      .byte.b	128	;R (64)
    241  4b9e		       fb		      .byte.b	251	;G
    242  4b9f		       04		      .byte.b	4	;B
    243  4ba0		       00		      .byte.b	0	;R (63)
    244  4ba1		       b7		      .byte.b	183	;G
    245  4ba2		       00		      .byte.b	0	;B
    246  4ba3		       00		      .byte.b	0	;R (62)
    247  4ba4		       b5		      .byte.b	181	;G
    248  4ba5		       00		      .byte.b	0	;B
    249  4ba6		       00		      .byte.b	0	;R (61)
    250  4ba7		       ef		      .byte.b	239	;G
    251  4ba8		       10		      .byte.b	16	;B
    252  4ba9		       00		      .byte.b	0	;R (60)
    253  4baa		       bd		      .byte.b	189	;G
    254  4bab		       42		      .byte.b	66	;B
    255  4bac		       00		      .byte.b	0	;R (59)
    256  4bad		       77		      .byte.b	119	;G
    257  4bae		       00		      .byte.b	0	;B
    258  4baf		       00		      .byte.b	0	;R (58)
    259  4bb0		       ee		      .byte.b	238	;G
    260  4bb1		       00		      .byte.b	0	;B
    261  4bb2		       00		      .byte.b	0	;R (57)
    262  4bb3		       9b		      .byte.b	155	;G
    263  4bb4		       00		      .byte.b	0	;B
    264  4bb5		       00		      .byte.b	0	;R (56)
    265  4bb6		       f2		      .byte.b	242	;G
    266  4bb7		       00		      .byte.b	0	;B
    267  4bb8		       00		      .byte.b	0	;R (55)
    268  4bb9		       40		      .byte.b	64	;G
    269  4bba		       00		      .byte.b	0	;B
    270  4bbb		       00		      .byte.b	0	;R (54)
    271  4bbc		       df		      .byte.b	223	;G
    272  4bbd		       00		      .byte.b	0	;B
    273  4bbe		       10		      .byte.b	16	;R (53)
    274  4bbf		       69		      .byte.b	105	;G
    275  4bc0		       10		      .byte.b	16	;B
    276  4bc1		       00		      .byte.b	0	;R (52)
    277  4bc2		       4b		      .byte.b	75	;G
    278  4bc3		       00		      .byte.b	0	;B
    279  4bc4		       00		      .byte.b	0	;R (51)
    280  4bc5		       b0		      .byte.b	176	;G
    281  4bc6		       00		      .byte.b	0	;B
    282  4bc7		       00		      .byte.b	0	;R (50)
    283  4bc8		       a7		      .byte.b	167	;G
    284  4bc9		       00		      .byte.b	0	;B
    285  4bca		       00		      .byte.b	0	;R (49)
    286  4bcb		       7d		      .byte.b	125	;G
    287  4bcc		       02		      .byte.b	2	;B
    288  4bcd		       00		      .byte.b	0	;R (48)
    289  4bce		       db		      .byte.b	219	;G
    290  4bcf		       20		      .byte.b	32	;B
    291  4bd0		       00		      .byte.b	0	;R (47)
    292  4bd1		       6d		      .byte.b	109	;G
    293  4bd2		       00		      .byte.b	0	;B
    294  4bd3		       00		      .byte.b	0	;R (46)
    295  4bd4		       ea		      .byte.b	234	;G
    296  4bd5		       00		      .byte.b	0	;B
    297  4bd6		       00		      .byte.b	0	;R (45)
    298  4bd7		       13		      .byte.b	19	;G
    299  4bd8		       00		      .byte.b	0	;B
    300  4bd9		       00		      .byte.b	0	;R (44)
    301  4bda		       7e		      .byte.b	126	;G
    302  4bdb		       01		      .byte.b	1	;B
    303  4bdc		       22		      .byte.b	34	;R (43)
    304  4bdd		       77		      .byte.b	119	;G
    305  4bde		       08		      .byte.b	8	;B
    306  4bdf		       04		      .byte.b	4	;R (42)
    307  4be0		       5f		      .byte.b	95	;G
    308  4be1		       00		      .byte.b	0	;B
    309  4be2		       00		      .byte.b	0	;R (41)
    310  4be3		       6f		      .byte.b	111	;G
    311  4be4		       00		      .byte.b	0	;B
    312  4be5		       00		      .byte.b	0	;R (40)
    313  4be6		       b5		      .byte.b	181	;G
    314  4be7		       00		      .byte.b	0	;B
    315  4be8		       00		      .byte.b	0	;R (39)
    316  4be9		       5b		      .byte.b	91	;G
    317  4bea		       00		      .byte.b	0	;B
    318  4beb		       00		      .byte.b	0	;R (38)
    319  4bec		       57		      .byte.b	87	;G
    320  4bed		       00		      .byte.b	0	;B
    321  4bee		       20		      .byte.b	32	;R (37)
    322  4bef		       4d		      .byte.b	77	;G
    323  4bf0		       22		      .byte.b	34	;B
    324  4bf1		       00		      .byte.b	0	;R (36)
    325  4bf2		       55		      .byte.b	85	;G
    326  4bf3		       00		      .byte.b	0	;B
    327  4bf4		       01		      .byte.b	1	;R (35)
    328  4bf5		       56		      .byte.b	86	;G
    329  4bf6		       00		      .byte.b	0	;B
    330  4bf7		       02		      .byte.b	2	;R (34)
    331  4bf8		       57		      .byte.b	87	;G
    332  4bf9		       00		      .byte.b	0	;B
    333  4bfa		       00		      .byte.b	0	;R (33)
    334  4bfb		       2a		      .byte.b	42	;G
    335  4bfc		       01		      .byte.b	1	;B
    336  4bfd		       01		      .byte.b	1	;R (32)
    337  4bfe		       ab		      .byte.b	171	;G
    338  4bff		       00		      .byte.b	0	;B
    339  4c00		       22		      .byte.b	34	;R (31)
    340  4c01		       17		      .byte.b	23	;G
    341  4c02		       20		      .byte.b	32	;B
    342  4c03		       00		      .byte.b	0	;R (30)
    343  4c04		       55		      .byte.b	85	;G
    344  4c05		       02		      .byte.b	2	;B
    345  4c06		       22		      .byte.b	34	;R (29)
    346  4c07		       17		      .byte.b	23	;G
    347  4c08		       20		      .byte.b	32	;B
    348  4c09		       00		      .byte.b	0	;R (28)
    349  4c0a		       2b		      .byte.b	43	;G
    350  4c0b		       00		      .byte.b	0	;B
    351  4c0c		       00		      .byte.b	0	;R (27)
    352  4c0d		       95		      .byte.b	149	;G
    353  4c0e		       02		      .byte.b	2	;B
    354  4c0f		       00		      .byte.b	0	;R (26)
    355  4c10		       17		      .byte.b	23	;G
    356  4c11		       00		      .byte.b	0	;B
    357  4c12		       00		      .byte.b	0	;R (25)
    358  4c13		       2d		      .byte.b	45	;G
    359  4c14		       00		      .byte.b	0	;B
    360  4c15		       00		      .byte.b	0	;R (24)
    361  4c16		       b4		      .byte.b	180	;G
    362  4c17		       00		      .byte.b	0	;B
    363  4c18		       00		      .byte.b	0	;R (23)
    364  4c19		       0a		      .byte.b	10	;G
    365  4c1a		       00		      .byte.b	0	;B
    366  4c1b		       10		      .byte.b	16	;R (22)
    367  4c1c		       3c		      .byte.b	60	;G
    368  4c1d		       00		      .byte.b	0	;B
    369  4c1e		       10		      .byte.b	16	;R (21)
    370  4c1f		       98		      .byte.b	152	;G
    371  4c20		       00		      .byte.b	0	;B
    372  4c21		       10		      .byte.b	16	;R (20)
    373  4c22		       1a		      .byte.b	26	;G
    374  4c23		       00		      .byte.b	0	;B
    375  4c24		       00		      .byte.b	0	;R (19)
    376  4c25		       14		      .byte.b	20	;G
    377  4c26		       00		      .byte.b	0	;B
    378  4c27		       00		      .byte.b	0	;R (18)
    379  4c28		       5a		      .byte.b	90	;G
    380  4c29		       00		      .byte.b	0	;B
    381  4c2a		       00		      .byte.b	0	;R (17)
    382  4c2b		       09		      .byte.b	9	;G
    383  4c2c		       00		      .byte.b	0	;B
    384  4c2d		       08		      .byte.b	8	;R (16)
    385  4c2e		       1d		      .byte.b	29	;G
    386  4c2f		       00		      .byte.b	0	;B
    387  4c30		       00		      .byte.b	0	;R (15)
    388  4c31		       1a		      .byte.b	26	;G
    389  4c32		       00		      .byte.b	0	;B
    390  4c33		       20		      .byte.b	32	;R (14)
    391  4c34		       ba		      .byte.b	186	;G
    392  4c35		       00		      .byte.b	0	;B
    393  4c36		       00		      .byte.b	0	;R (13)
    394  4c37		       12		      .byte.b	18	;G
    395  4c38		       00		      .byte.b	0	;B
    396  4c39		       00		      .byte.b	0	;R (12)
    397  4c3a		       1a		      .byte.b	26	;G
    398  4c3b		       00		      .byte.b	0	;B
    399  4c3c		       00		      .byte.b	0	;R (11)
    400  4c3d		       2d		      .byte.b	45	;G
    401  4c3e		       10		      .byte.b	16	;B
    402  4c3f		       10		      .byte.b	16	;R (10)
    403  4c40		       3b		      .byte.b	59	;G
    404  4c41		       00		      .byte.b	0	;B
    405  4c42		       24		      .byte.b	36	;R (9)
    406  4c43		       39		      .byte.b	57	;G
    407  4c44		       04		      .byte.b	4	;B
    408  4c45		       20		      .byte.b	32	;R (8)
    409  4c46		       35		      .byte.b	53	;G
    410  4c47		       00		      .byte.b	0	;B
    411  4c48		       00		      .byte.b	0	;R (7)
    412  4c49		       3d		      .byte.b	61	;G
    413  4c4a		       00		      .byte.b	0	;B
    414  4c4b		       00		      .byte.b	0	;R (6)
    415  4c4c		       32		      .byte.b	50	;G
    416  4c4d		       00		      .byte.b	0	;B
    417  4c4e		       00		      .byte.b	0	;R (5)
    418  4c4f		       98		      .byte.b	152	;G
    419  4c50		       00		      .byte.b	0	;B
    420  4c51		       00		      .byte.b	0	;R (4)
    421  4c52		       12		      .byte.b	18	;G
    422  4c53		       00		      .byte.b	0	;B
    423  4c54		       00		      .byte.b	0	;R (3)
    424  4c55		       20		      .byte.b	32	;G
    425  4c56		       00		      .byte.b	0	;B
    426  4c57		       01		      .byte.b	1	;R (2)
    427  4c58		       49		      .byte.b	73	;G
    428  4c59		       00		      .byte.b	0	;B
    429  4c5a		       20		      .byte.b	32	;R (1)
    430  4c5b		       20		      .byte.b	32	;G
    431  4c5c		       00		      .byte.b	0	;B
    432  4c5d		       00		      .byte.b	0	;R (0)
    433  4c5e		       00		      .byte.b	0	;G
    434  4c5f		       00		      .byte.b	0	;B
    435  4c60				   COL_2
    436  4c60		       14		      .byte.b	20	;R (71)
    437  4c61		       14		      .byte.b	20	;G
    438  4c62		       00		      .byte.b	0	;B
    439  4c63		       40		      .byte.b	64	;R (70)
    440  4c64		       42		      .byte.b	66	;G
    441  4c65		       00		      .byte.b	0	;B
    442  4c66		       a8		      .byte.b	168	;R (69)
    443  4c67		       a8		      .byte.b	168	;G
    444  4c68		       00		      .byte.b	0	;B
    445  4c69		       fd		      .byte.b	253	;R (68)
    446  4c6a		       1d		      .byte.b	29	;G
    447  4c6b		       00		      .byte.b	0	;B
    448  4c6c		       f0		      .byte.b	240	;R (67)
    449  4c6d		       44		      .byte.b	68	;G
    450  4c6e		       08		      .byte.b	8	;B
    451  4c6f		       ff		      .byte.b	255	;R (66)
    452  4c70		       2f		      .byte.b	47	;G
    453  4c71		       00		      .byte.b	0	;B
    454  4c72		       ff		      .byte.b	255	;R (65)
    455  4c73		       0e		      .byte.b	14	;G
    456  4c74		       00		      .byte.b	0	;B
    457  4c75		       f8		      .byte.b	248	;R (64)
    458  4c76		       0f		      .byte.b	15	;G
    459  4c77		       00		      .byte.b	0	;B
    460  4c78		       f8		      .byte.b	248	;R (63)
    461  4c79		       2e		      .byte.b	46	;G
    462  4c7a		       00		      .byte.b	0	;B
    463  4c7b		       f8		      .byte.b	248	;R (62)
    464  4c7c		       1e		      .byte.b	30	;G
    465  4c7d		       01		      .byte.b	1	;B
    466  4c7e		       74		      .byte.b	116	;R (61)
    467  4c7f		       23		      .byte.b	35	;G
    468  4c80		       88		      .byte.b	136	;B
    469  4c81		       fc		      .byte.b	252	;R (60)
    470  4c82		       0f		      .byte.b	15	;G
    471  4c83		       00		      .byte.b	0	;B
    472  4c84		       f8		      .byte.b	248	;R (59)
    473  4c85		       06		      .byte.b	6	;G
    474  4c86		       01		      .byte.b	1	;B
    475  4c87		       f8		      .byte.b	248	;R (58)
    476  4c88		       8f		      .byte.b	143	;G
    477  4c89		       00		      .byte.b	0	;B
    478  4c8a		       e8		      .byte.b	232	;R (57)
    479  4c8b		       0e		      .byte.b	14	;G
    480  4c8c		       10		      .byte.b	16	;B
    481  4c8d		       e0		      .byte.b	224	;R (56)
    482  4c8e		       97		      .byte.b	151	;G
    483  4c8f		       00		      .byte.b	0	;B
    484  4c90		       f0		      .byte.b	240	;R (55)
    485  4c91		       3a		      .byte.b	58	;G
    486  4c92		       00		      .byte.b	0	;B
    487  4c93		       e0		      .byte.b	224	;R (54)
    488  4c94		       bb		      .byte.b	187	;G
    489  4c95		       04		      .byte.b	4	;B
    490  4c96		       e0		      .byte.b	224	;R (53)
    491  4c97		       3e		      .byte.b	62	;G
    492  4c98		       00		      .byte.b	0	;B
    493  4c99		       c0		      .byte.b	192	;R (52)
    494  4c9a		       2a		      .byte.b	42	;G
    495  4c9b		       00		      .byte.b	0	;B
    496  4c9c		       80		      .byte.b	128	;R (51)
    497  4c9d		       3f		      .byte.b	63	;G
    498  4c9e		       40		      .byte.b	64	;B
    499  4c9f		       f5		      .byte.b	245	;R (50)
    500  4ca0		       3f		      .byte.b	63	;G
    501  4ca1		       00		      .byte.b	0	;B
    502  4ca2		       e8		      .byte.b	232	;R (49)
    503  4ca3		       7f		      .byte.b	127	;G
    504  4ca4		       00		      .byte.b	0	;B
    505  4ca5		       e0		      .byte.b	224	;R (48)
    506  4ca6		       7a		      .byte.b	122	;G
    507  4ca7		       04		      .byte.b	4	;B
    508  4ca8		       c0		      .byte.b	192	;R (47)
    509  4ca9		       5f		      .byte.b	95	;G
    510  4caa		       00		      .byte.b	0	;B
    511  4cab		       90		      .byte.b	144	;R (46)
    512  4cac		       dd		      .byte.b	221	;G
    513  4cad		       02		      .byte.b	2	;B
    514  4cae		       84		      .byte.b	132	;R (45)
    515  4caf		       9f		      .byte.b	159	;G
    516  4cb0		       00		      .byte.b	0	;B
    517  4cb1		       c4		      .byte.b	196	;R (44)
    518  4cb2		       cf		      .byte.b	207	;G
    519  4cb3		       00		      .byte.b	0	;B
    520  4cb4		       c5		      .byte.b	197	;R (43)
    521  4cb5		       1f		      .byte.b	31	;G
    522  4cb6		       00		      .byte.b	0	;B
    523  4cb7		       d4		      .byte.b	212	;R (42)
    524  4cb8		       9f		      .byte.b	159	;G
    525  4cb9		       20		      .byte.b	32	;B
    526  4cba		       c8		      .byte.b	200	;R (41)
    527  4cbb		       1e		      .byte.b	30	;G
    528  4cbc		       01		      .byte.b	1	;B
    529  4cbd		       c8		      .byte.b	200	;R (40)
    530  4cbe		       5f		      .byte.b	95	;G
    531  4cbf		       00		      .byte.b	0	;B
    532  4cc0		       cd		      .byte.b	205	;R (39)
    533  4cc1		       5e		      .byte.b	94	;G
    534  4cc2		       00		      .byte.b	0	;B
    535  4cc3		       c7		      .byte.b	199	;R (38)
    536  4cc4		       5b		      .byte.b	91	;G
    537  4cc5		       00		      .byte.b	0	;B
    538  4cc6		       8b		      .byte.b	139	;R (37)
    539  4cc7		       1c		      .byte.b	28	;G
    540  4cc8		       00		      .byte.b	0	;B
    541  4cc9		       81		      .byte.b	129	;R (36)
    542  4cca		       9a		      .byte.b	154	;G
    543  4ccb		       04		      .byte.b	4	;B
    544  4ccc		       8e		      .byte.b	142	;R (35)
    545  4ccd		       9d		      .byte.b	157	;G
    546  4cce		       00		      .byte.b	0	;B
    547  4ccf		       2b		      .byte.b	43	;R (34)
    548  4cd0		       36		      .byte.b	54	;G
    549  4cd1		       00		      .byte.b	0	;B
    550  4cd2		       3a		      .byte.b	58	;R (33)
    551  4cd3		       0d		      .byte.b	13	;G
    552  4cd4		       00		      .byte.b	0	;B
    553  4cd5		       3e		      .byte.b	62	;R (32)
    554  4cd6		       85		      .byte.b	133	;G
    555  4cd7		       40		      .byte.b	64	;B
    556  4cd8		       fa		      .byte.b	250	;R (31)
    557  4cd9		       17		      .byte.b	23	;G
    558  4cda		       00		      .byte.b	0	;B
    559  4cdb		       ff		      .byte.b	255	;R (30)
    560  4cdc		       03		      .byte.b	3	;G
    561  4cdd		       00		      .byte.b	0	;B
    562  4cde		       fc		      .byte.b	252	;R (29)
    563  4cdf		       93		      .byte.b	147	;G
    564  4ce0		       00		      .byte.b	0	;B
    565  4ce1		       f7		      .byte.b	247	;R (28)
    566  4ce2		       81		      .byte.b	129	;G
    567  4ce3		       08		      .byte.b	8	;B
    568  4ce4		       ff		      .byte.b	255	;R (27)
    569  4ce5		       03		      .byte.b	3	;G
    570  4ce6		       00		      .byte.b	0	;B
    571  4ce7		       fe		      .byte.b	254	;R (26)
    572  4ce8		       2b		      .byte.b	43	;G
    573  4ce9		       00		      .byte.b	0	;B
    574  4cea		       fe		      .byte.b	254	;R (25)
    575  4ceb		       0a		      .byte.b	10	;G
    576  4cec		       00		      .byte.b	0	;B
    577  4ced		       fc		      .byte.b	252	;R (24)
    578  4cee		       4f		      .byte.b	79	;G
    579  4cef		       00		      .byte.b	0	;B
    580  4cf0		       fc		      .byte.b	252	;R (23)
    581  4cf1		       55		      .byte.b	85	;G
    582  4cf2		       00		      .byte.b	0	;B
    583  4cf3		       f8		      .byte.b	248	;R (22)
    584  4cf4		       45		      .byte.b	69	;G
    585  4cf5		       00		      .byte.b	0	;B
    586  4cf6		       e8		      .byte.b	232	;R (21)
    587  4cf7		       05		      .byte.b	5	;G
    588  4cf8		       10		      .byte.b	16	;B
    589  4cf9		       f8		      .byte.b	248	;R (20)
    590  4cfa		       5b		      .byte.b	91	;G
    591  4cfb		       00		      .byte.b	0	;B
    592  4cfc		       f8		      .byte.b	248	;R (19)
    593  4cfd		       1d		      .byte.b	29	;G
    594  4cfe		       00		      .byte.b	0	;B
    595  4cff		       f0		      .byte.b	240	;R (18)
    596  4d00		       55		      .byte.b	85	;G
    597  4d01		       00		      .byte.b	0	;B
    598  4d02		       f0		      .byte.b	240	;R (17)
    599  4d03		       16		      .byte.b	22	;G
    600  4d04		       00		      .byte.b	0	;B
    601  4d05		       f0		      .byte.b	240	;R (16)
    602  4d06		       b2		      .byte.b	178	;G
    603  4d07		       00		      .byte.b	0	;B
    604  4d08		       e0		      .byte.b	224	;R (15)
    605  4d09		       0e		      .byte.b	14	;G
    606  4d0a		       10		      .byte.b	16	;B
    607  4d0b		       f0		      .byte.b	240	;R (14)
    608  4d0c		       93		      .byte.b	147	;G
    609  4d0d		       00		      .byte.b	0	;B
    610  4d0e		       e0		      .byte.b	224	;R (13)
    611  4d0f		       25		      .byte.b	37	;G
    612  4d10		       00		      .byte.b	0	;B
    613  4d11		       c0		      .byte.b	192	;R (12)
    614  4d12		       e5		      .byte.b	229	;G
    615  4d13		       00		      .byte.b	0	;B
    616  4d14		       80		      .byte.b	128	;R (11)
    617  4d15		       0e		      .byte.b	14	;G
    618  4d16		       00		      .byte.b	0	;B
    619  4d17		       c0		      .byte.b	192	;R (10)
    620  4d18		       ca		      .byte.b	202	;G
    621  4d19		       00		      .byte.b	0	;B
    622  4d1a		       84		      .byte.b	132	;R (9)
    623  4d1b		       8e		      .byte.b	142	;G
    624  4d1c		       00		      .byte.b	0	;B
    625  4d1d		       00		      .byte.b	0	;R (8)
    626  4d1e		       8e		      .byte.b	142	;G
    627  4d1f		       00		      .byte.b	0	;B
    628  4d20		       00		      .byte.b	0	;R (7)
    629  4d21		       15		      .byte.b	21	;G
    630  4d22		       00		      .byte.b	0	;B
    631  4d23		       00		      .byte.b	0	;R (6)
    632  4d24		       14		      .byte.b	20	;G
    633  4d25		       00		      .byte.b	0	;B
    634  4d26		       00		      .byte.b	0	;R (5)
    635  4d27		       14		      .byte.b	20	;G
    636  4d28		       00		      .byte.b	0	;B
    637  4d29		       00		      .byte.b	0	;R (4)
    638  4d2a		       0a		      .byte.b	10	;G
    639  4d2b		       00		      .byte.b	0	;B
    640  4d2c		       00		      .byte.b	0	;R (3)
    641  4d2d		       10		      .byte.b	16	;G
    642  4d2e		       00		      .byte.b	0	;B
    643  4d2f		       08		      .byte.b	8	;R (2)
    644  4d30		       88		      .byte.b	136	;G
    645  4d31		       00		      .byte.b	0	;B
    646  4d32		       40		      .byte.b	64	;R (1)
    647  4d33		       42		      .byte.b	66	;G
    648  4d34		       00		      .byte.b	0	;B
    649  4d35		       00		      .byte.b	0	;R (0)
    650  4d36		       00		      .byte.b	0	;G
    651  4d37		       00		      .byte.b	0	;B
    652  4d38				   COL_3
    653  4d38		       90		      .byte.b	144	;R (71)
    654  4d39		       90		      .byte.b	144	;G
    655  4d3a		       00		      .byte.b	0	;B
    656  4d3b		       40		      .byte.b	64	;R (70)
    657  4d3c		       40		      .byte.b	64	;G
    658  4d3d		       00		      .byte.b	0	;B
    659  4d3e		       b0		      .byte.b	176	;R (69)
    660  4d3f		       b0		      .byte.b	176	;G
    661  4d40		       00		      .byte.b	0	;B
    662  4d41		       d0		      .byte.b	208	;R (68)
    663  4d42		       00		      .byte.b	0	;G
    664  4d43		       20		      .byte.b	32	;B
    665  4d44		       f0		      .byte.b	240	;R (67)
    666  4d45		       00		      .byte.b	0	;G
    667  4d46		       00		      .byte.b	0	;B
    668  4d47		       f0		      .byte.b	240	;R (66)
    669  4d48		       d0		      .byte.b	208	;G
    670  4d49		       00		      .byte.b	0	;B
    671  4d4a		       f0		      .byte.b	240	;R (65)
    672  4d4b		       00		      .byte.b	0	;G
    673  4d4c		       00		      .byte.b	0	;B
    674  4d4d		       f0		      .byte.b	240	;R (64)
    675  4d4e		       00		      .byte.b	0	;G
    676  4d4f		       00		      .byte.b	0	;B
    677  4d50		       f0		      .byte.b	240	;R (63)
    678  4d51		       50		      .byte.b	80	;G
    679  4d52		       00		      .byte.b	0	;B
    680  4d53		       f0		      .byte.b	240	;R (62)
    681  4d54		       00		      .byte.b	0	;G
    682  4d55		       00		      .byte.b	0	;B
    683  4d56		       f0		      .byte.b	240	;R (61)
    684  4d57		       a0		      .byte.b	160	;G
    685  4d58		       00		      .byte.b	0	;B
    686  4d59		       f0		      .byte.b	240	;R (60)
    687  4d5a		       00		      .byte.b	0	;G
    688  4d5b		       00		      .byte.b	0	;B
    689  4d5c		       f0		      .byte.b	240	;R (59)
    690  4d5d		       d0		      .byte.b	208	;G
    691  4d5e		       00		      .byte.b	0	;B
    692  4d5f		       f0		      .byte.b	240	;R (58)
    693  4d60		       c0		      .byte.b	192	;G
    694  4d61		       00		      .byte.b	0	;B
    695  4d62		       f0		      .byte.b	240	;R (57)
    696  4d63		       90		      .byte.b	144	;G
    697  4d64		       00		      .byte.b	0	;B
    698  4d65		       f0		      .byte.b	240	;R (56)
    699  4d66		       80		      .byte.b	128	;G
    700  4d67		       00		      .byte.b	0	;B
    701  4d68		       f0		      .byte.b	240	;R (55)
    702  4d69		       40		      .byte.b	64	;G
    703  4d6a		       00		      .byte.b	0	;B
    704  4d6b		       70		      .byte.b	112	;R (54)
    705  4d6c		       00		      .byte.b	0	;G
    706  4d6d		       80		      .byte.b	128	;B
    707  4d6e		       d0		      .byte.b	208	;R (53)
    708  4d6f		       00		      .byte.b	0	;G
    709  4d70		       20		      .byte.b	32	;B
    710  4d71		       f0		      .byte.b	240	;R (52)
    711  4d72		       80		      .byte.b	128	;G
    712  4d73		       00		      .byte.b	0	;B
    713  4d74		       f0		      .byte.b	240	;R (51)
    714  4d75		       00		      .byte.b	0	;G
    715  4d76		       00		      .byte.b	0	;B
    716  4d77		       f0		      .byte.b	240	;R (50)
    717  4d78		       a0		      .byte.b	160	;G
    718  4d79		       00		      .byte.b	0	;B
    719  4d7a		       f0		      .byte.b	240	;R (49)
    720  4d7b		       80		      .byte.b	128	;G
    721  4d7c		       00		      .byte.b	0	;B
    722  4d7d		       f0		      .byte.b	240	;R (48)
    723  4d7e		       40		      .byte.b	64	;G
    724  4d7f		       00		      .byte.b	0	;B
    725  4d80		       f0		      .byte.b	240	;R (47)
    726  4d81		       20		      .byte.b	32	;G
    727  4d82		       00		      .byte.b	0	;B
    728  4d83		       f0		      .byte.b	240	;R (46)
    729  4d84		       00		      .byte.b	0	;G
    730  4d85		       00		      .byte.b	0	;B
    731  4d86		       f0		      .byte.b	240	;R (45)
    732  4d87		       80		      .byte.b	128	;G
    733  4d88		       00		      .byte.b	0	;B
    734  4d89		       f0		      .byte.b	240	;R (44)
    735  4d8a		       00		      .byte.b	0	;G
    736  4d8b		       00		      .byte.b	0	;B
    737  4d8c		       f0		      .byte.b	240	;R (43)
    738  4d8d		       40		      .byte.b	64	;G
    739  4d8e		       00		      .byte.b	0	;B
    740  4d8f		       f0		      .byte.b	240	;R (42)
    741  4d90		       00		      .byte.b	0	;G
    742  4d91		       00		      .byte.b	0	;B
    743  4d92		       f0		      .byte.b	240	;R (41)
    744  4d93		       20		      .byte.b	32	;G
    745  4d94		       00		      .byte.b	0	;B
    746  4d95		       f0		      .byte.b	240	;R (40)
    747  4d96		       20		      .byte.b	32	;G
    748  4d97		       00		      .byte.b	0	;B
    749  4d98		       f0		      .byte.b	240	;R (39)
    750  4d99		       50		      .byte.b	80	;G
    751  4d9a		       00		      .byte.b	0	;B
    752  4d9b		       f0		      .byte.b	240	;R (38)
    753  4d9c		       10		      .byte.b	16	;G
    754  4d9d		       00		      .byte.b	0	;B
    755  4d9e		       70		      .byte.b	112	;R (37)
    756  4d9f		       80		      .byte.b	128	;G
    757  4da0		       80		      .byte.b	128	;B
    758  4da1		       f0		      .byte.b	240	;R (36)
    759  4da2		       50		      .byte.b	80	;G
    760  4da3		       00		      .byte.b	0	;B
    761  4da4		       f0		      .byte.b	240	;R (35)
    762  4da5		       00		      .byte.b	0	;G
    763  4da6		       00		      .byte.b	0	;B
    764  4da7		       f0		      .byte.b	240	;R (34)
    765  4da8		       40		      .byte.b	64	;G
    766  4da9		       00		      .byte.b	0	;B
    767  4daa		       f0		      .byte.b	240	;R (33)
    768  4dab		       10		      .byte.b	16	;G
    769  4dac		       00		      .byte.b	0	;B
    770  4dad		       f0		      .byte.b	240	;R (32)
    771  4dae		       b0		      .byte.b	176	;G
    772  4daf		       00		      .byte.b	0	;B
    773  4db0		       e0		      .byte.b	224	;R (31)
    774  4db1		       00		      .byte.b	0	;G
    775  4db2		       10		      .byte.b	16	;B
    776  4db3		       e0		      .byte.b	224	;R (30)
    777  4db4		       40		      .byte.b	64	;G
    778  4db5		       00		      .byte.b	0	;B
    779  4db6		       e0		      .byte.b	224	;R (29)
    780  4db7		       20		      .byte.b	32	;G
    781  4db8		       00		      .byte.b	0	;B
    782  4db9		       c0		      .byte.b	192	;R (28)
    783  4dba		       00		      .byte.b	0	;G
    784  4dbb		       00		      .byte.b	0	;B
    785  4dbc		       c0		      .byte.b	192	;R (27)
    786  4dbd		       10		      .byte.b	16	;G
    787  4dbe		       00		      .byte.b	0	;B
    788  4dbf		       c0		      .byte.b	192	;R (26)
    789  4dc0		       40		      .byte.b	64	;G
    790  4dc1		       10		      .byte.b	16	;B
    791  4dc2		       90		      .byte.b	144	;R (25)
    792  4dc3		       00		      .byte.b	0	;G
    793  4dc4		       00		      .byte.b	0	;B
    794  4dc5		       f0		      .byte.b	240	;R (24)
    795  4dc6		       60		      .byte.b	96	;G
    796  4dc7		       00		      .byte.b	0	;B
    797  4dc8		       f0		      .byte.b	240	;R (23)
    798  4dc9		       00		      .byte.b	0	;G
    799  4dca		       00		      .byte.b	0	;B
    800  4dcb		       f0		      .byte.b	240	;R (22)
    801  4dcc		       40		      .byte.b	64	;G
    802  4dcd		       00		      .byte.b	0	;B
    803  4dce		       f0		      .byte.b	240	;R (21)
    804  4dcf		       10		      .byte.b	16	;G
    805  4dd0		       00		      .byte.b	0	;B
    806  4dd1		       f0		      .byte.b	240	;R (20)
    807  4dd2		       00		      .byte.b	0	;G
    808  4dd3		       00		      .byte.b	0	;B
    809  4dd4		       f0		      .byte.b	240	;R (19)
    810  4dd5		       60		      .byte.b	96	;G
    811  4dd6		       00		      .byte.b	0	;B
    812  4dd7		       f0		      .byte.b	240	;R (18)
    813  4dd8		       20		      .byte.b	32	;G
    814  4dd9		       00		      .byte.b	0	;B
    815  4dda		       f0		      .byte.b	240	;R (17)
    816  4ddb		       50		      .byte.b	80	;G
    817  4ddc		       00		      .byte.b	0	;B
    818  4ddd		       f0		      .byte.b	240	;R (16)
    819  4dde		       40		      .byte.b	64	;G
    820  4ddf		       00		      .byte.b	0	;B
    821  4de0		       f0		      .byte.b	240	;R (15)
    822  4de1		       80		      .byte.b	128	;G
    823  4de2		       00		      .byte.b	0	;B
    824  4de3		       f0		      .byte.b	240	;R (14)
    825  4de4		       40		      .byte.b	64	;G
    826  4de5		       00		      .byte.b	0	;B
    827  4de6		       f0		      .byte.b	240	;R (13)
    828  4de7		       00		      .byte.b	0	;G
    829  4de8		       00		      .byte.b	0	;B
    830  4de9		       f0		      .byte.b	240	;R (12)
    831  4dea		       10		      .byte.b	16	;G
    832  4deb		       00		      .byte.b	0	;B
    833  4dec		       f0		      .byte.b	240	;R (11)
    834  4ded		       50		      .byte.b	80	;G
    835  4dee		       00		      .byte.b	0	;B
    836  4def		       f0		      .byte.b	240	;R (10)
    837  4df0		       00		      .byte.b	0	;G
    838  4df1		       00		      .byte.b	0	;B
    839  4df2		       f0		      .byte.b	240	;R (9)
    840  4df3		       b0		      .byte.b	176	;G
    841  4df4		       00		      .byte.b	0	;B
    842  4df5		       f0		      .byte.b	240	;R (8)
    843  4df6		       90		      .byte.b	144	;G
    844  4df7		       00		      .byte.b	0	;B
    845  4df8		       e0		      .byte.b	224	;R (7)
    846  4df9		       e0		      .byte.b	224	;G
    847  4dfa		       00		      .byte.b	0	;B
    848  4dfb		       f0		      .byte.b	240	;R (6)
    849  4dfc		       d0		      .byte.b	208	;G
    850  4dfd		       00		      .byte.b	0	;B
    851  4dfe		       60		      .byte.b	96	;R (5)
    852  4dff		       00		      .byte.b	0	;G
    853  4e00		       00		      .byte.b	0	;B
    854  4e01		       60		      .byte.b	96	;R (4)
    855  4e02		       40		      .byte.b	64	;G
    856  4e03		       00		      .byte.b	0	;B
    857  4e04		       40		      .byte.b	64	;R (3)
    858  4e05		       50		      .byte.b	80	;G
    859  4e06		       00		      .byte.b	0	;B
    860  4e07		       00		      .byte.b	0	;R (2)
    861  4e08		       00		      .byte.b	0	;G
    862  4e09		       00		      .byte.b	0	;B
    863  4e0a		       00		      .byte.b	0	;R (1)
    864  4e0b		       80		      .byte.b	128	;G
    865  4e0c		       00		      .byte.b	0	;B
    866  4e0d		       00		      .byte.b	0	;R (0)
    867  4e0e		       00		      .byte.b	0	;G
    868  4e0f		       00		      .byte.b	0	;B
    869  4e10				   COL_4
    870  4e10		       25		      .byte.b	37	;R (71)
    871  4e11		       25		      .byte.b	37	;G
    872  4e12		       00		      .byte.b	0	;B
    873  4e13		       48		      .byte.b	72	;R (70)
    874  4e14		       48		      .byte.b	72	;G
    875  4e15		       00		      .byte.b	0	;B
    876  4e16		       25		      .byte.b	37	;R (69)
    877  4e17		       25		      .byte.b	37	;G
    878  4e18		       88		      .byte.b	136	;B
    879  4e19		       ff		      .byte.b	255	;R (68)
    880  4e1a		       00		      .byte.b	0	;G
    881  4e1b		       00		      .byte.b	0	;B
    882  4e1c		       ff		      .byte.b	255	;R (67)
    883  4e1d		       04		      .byte.b	4	;G
    884  4e1e		       00		      .byte.b	0	;B
    885  4e1f		       ef		      .byte.b	239	;R (66)
    886  4e20		       40		      .byte.b	64	;G
    887  4e21		       10		      .byte.b	16	;B
    888  4e22		       ff		      .byte.b	255	;R (65)
    889  4e23		       00		      .byte.b	0	;G
    890  4e24		       00		      .byte.b	0	;B
    891  4e25		       ff		      .byte.b	255	;R (64)
    892  4e26		       02		      .byte.b	2	;G
    893  4e27		       00		      .byte.b	0	;B
    894  4e28		       ff		      .byte.b	255	;R (63)
    895  4e29		       20		      .byte.b	32	;G
    896  4e2a		       00		      .byte.b	0	;B
    897  4e2b		       ff		      .byte.b	255	;R (62)
    898  4e2c		       a5		      .byte.b	165	;G
    899  4e2d		       00		      .byte.b	0	;B
    900  4e2e		       ff		      .byte.b	255	;R (61)
    901  4e2f		       09		      .byte.b	9	;G
    902  4e30		       00		      .byte.b	0	;B
    903  4e31		       ff		      .byte.b	255	;R (60)
    904  4e32		       00		      .byte.b	0	;G
    905  4e33		       00		      .byte.b	0	;B
    906  4e34		       7f		      .byte.b	127	;R (59)
    907  4e35		       42		      .byte.b	66	;G
    908  4e36		       80		      .byte.b	128	;B
    909  4e37		       ff		      .byte.b	255	;R (58)
    910  4e38		       88		      .byte.b	136	;G
    911  4e39		       00		      .byte.b	0	;B
    912  4e3a		       ff		      .byte.b	255	;R (57)
    913  4e3b		       40		      .byte.b	64	;G
    914  4e3c		       00		      .byte.b	0	;B
    915  4e3d		       ff		      .byte.b	255	;R (56)
    916  4e3e		       09		      .byte.b	9	;G
    917  4e3f		       00		      .byte.b	0	;B
    918  4e40		       7f		      .byte.b	127	;R (55)
    919  4e41		       01		      .byte.b	1	;G
    920  4e42		       80		      .byte.b	128	;B
    921  4e43		       ff		      .byte.b	255	;R (54)
    922  4e44		       91		      .byte.b	145	;G
    923  4e45		       00		      .byte.b	0	;B
    924  4e46		       fe		      .byte.b	254	;R (53)
    925  4e47		       81		      .byte.b	129	;G
    926  4e48		       00		      .byte.b	0	;B
    927  4e49		       fe		      .byte.b	254	;R (52)
    928  4e4a		       20		      .byte.b	32	;G
    929  4e4b		       00		      .byte.b	0	;B
    930  4e4c		       ff		      .byte.b	255	;R (51)
    931  4e4d		       03		      .byte.b	3	;G
    932  4e4e		       00		      .byte.b	0	;B
    933  4e4f		       ff		      .byte.b	255	;R (50)
    934  4e50		       83		      .byte.b	131	;G
    935  4e51		       00		      .byte.b	0	;B
    936  4e52		       fe		      .byte.b	254	;R (49)
    937  4e53		       90		      .byte.b	144	;G
    938  4e54		       00		      .byte.b	0	;B
    939  4e55		       fe		      .byte.b	254	;R (48)
    940  4e56		       83		      .byte.b	131	;G
    941  4e57		       00		      .byte.b	0	;B
    942  4e58		       7e		      .byte.b	126	;R (47)
    943  4e59		       12		      .byte.b	18	;G
    944  4e5a		       80		      .byte.b	128	;B
    945  4e5b		       fc		      .byte.b	252	;R (46)
    946  4e5c		       00		      .byte.b	0	;G
    947  4e5d		       00		      .byte.b	0	;B
    948  4e5e		       fe		      .byte.b	254	;R (45)
    949  4e5f		       07		      .byte.b	7	;G
    950  4e60		       00		      .byte.b	0	;B
    951  4e61		       ef		      .byte.b	239	;R (44)
    952  4e62		       03		      .byte.b	3	;G
    953  4e63		       10		      .byte.b	16	;B
    954  4e64		       ff		      .byte.b	255	;R (43)
    955  4e65		       40		      .byte.b	64	;G
    956  4e66		       00		      .byte.b	0	;B
    957  4e67		       ff		      .byte.b	255	;R (42)
    958  4e68		       01		      .byte.b	1	;G
    959  4e69		       00		      .byte.b	0	;B
    960  4e6a		       ff		      .byte.b	255	;R (41)
    961  4e6b		       01		      .byte.b	1	;G
    962  4e6c		       00		      .byte.b	0	;B
    963  4e6d		       bf		      .byte.b	191	;R (40)
    964  4e6e		       01		      .byte.b	1	;G
    965  4e6f		       40		      .byte.b	64	;B
    966  4e70		       f7		      .byte.b	247	;R (39)
    967  4e71		       80		      .byte.b	128	;G
    968  4e72		       08		      .byte.b	8	;B
    969  4e73		       ff		      .byte.b	255	;R (38)
    970  4e74		       40		      .byte.b	64	;G
    971  4e75		       00		      .byte.b	0	;B
    972  4e76		       ff		      .byte.b	255	;R (37)
    973  4e77		       00		      .byte.b	0	;G
    974  4e78		       00		      .byte.b	0	;B
    975  4e79		       ff		      .byte.b	255	;R (36)
    976  4e7a		       40		      .byte.b	64	;G
    977  4e7b		       00		      .byte.b	0	;B
    978  4e7c		       ff		      .byte.b	255	;R (35)
    979  4e7d		       a1		      .byte.b	161	;G
    980  4e7e		       00		      .byte.b	0	;B
    981  4e7f		       7f		      .byte.b	127	;R (34)
    982  4e80		       05		      .byte.b	5	;G
    983  4e81		       80		      .byte.b	128	;B
    984  4e82		       ff		      .byte.b	255	;R (33)
    985  4e83		       21		      .byte.b	33	;G
    986  4e84		       00		      .byte.b	0	;B
    987  4e85		       bf		      .byte.b	191	;R (32)
    988  4e86		       40		      .byte.b	64	;G
    989  4e87		       40		      .byte.b	64	;B
    990  4e88		       ff		      .byte.b	255	;R (31)
    991  4e89		       61		      .byte.b	97	;G
    992  4e8a		       00		      .byte.b	0	;B
    993  4e8b		       7f		      .byte.b	127	;R (30)
    994  4e8c		       81		      .byte.b	129	;G
    995  4e8d		       80		      .byte.b	128	;B
    996  4e8e		       f7		      .byte.b	247	;R (29)
    997  4e8f		       60		      .byte.b	96	;G
    998  4e90		       08		      .byte.b	8	;B
    999  4e91		       ff		      .byte.b	255	;R (28)
   1000  4e92		       81		      .byte.b	129	;G
   1001  4e93		       00		      .byte.b	0	;B
   1002  4e94		       ef		      .byte.b	239	;R (27)
   1003  4e95		       40		      .byte.b	64	;G
   1004  4e96		       10		      .byte.b	16	;B
   1005  4e97		       ff		      .byte.b	255	;R (26)
   1006  4e98		       60		      .byte.b	96	;G
   1007  4e99		       00		      .byte.b	0	;B
   1008  4e9a		       ff		      .byte.b	255	;R (25)
   1009  4e9b		       18		      .byte.b	24	;G
   1010  4e9c		       00		      .byte.b	0	;B
   1011  4e9d		       ff		      .byte.b	255	;R (24)
   1012  4e9e		       20		      .byte.b	32	;G
   1013  4e9f		       00		      .byte.b	0	;B
   1014  4ea0		       ff		      .byte.b	255	;R (23)
   1015  4ea1		       8a		      .byte.b	138	;G
   1016  4ea2		       00		      .byte.b	0	;B
   1017  4ea3		       f7		      .byte.b	247	;R (22)
   1018  4ea4		       10		      .byte.b	16	;G
   1019  4ea5		       08		      .byte.b	8	;B
   1020  4ea6		       ff		      .byte.b	255	;R (21)
   1021  4ea7		       04		      .byte.b	4	;G
   1022  4ea8		       00		      .byte.b	0	;B
   1023  4ea9		       df		      .byte.b	223	;R (20)
   1024  4eaa		       10		      .byte.b	16	;G
   1025  4eab		       20		      .byte.b	32	;B
   1026  4eac		       ff		      .byte.b	255	;R (19)
   1027  4ead		       90		      .byte.b	144	;G
   1028  4eae		       00		      .byte.b	0	;B
   1029  4eaf		       ff		      .byte.b	255	;R (18)
   1030  4eb0		       12		      .byte.b	18	;G
   1031  4eb1		       00		      .byte.b	0	;B
   1032  4eb2		       ff		      .byte.b	255	;R (17)
   1033  4eb3		       00		      .byte.b	0	;G
   1034  4eb4		       00		      .byte.b	0	;B
   1035  4eb5		       ff		      .byte.b	255	;R (16)
   1036  4eb6		       45		      .byte.b	69	;G
   1037  4eb7		       00		      .byte.b	0	;B
   1038  4eb8		       ff		      .byte.b	255	;R (15)
   1039  4eb9		       10		      .byte.b	16	;G
   1040  4eba		       00		      .byte.b	0	;B
   1041  4ebb		       ff		      .byte.b	255	;R (14)
   1042  4ebc		       23		      .byte.b	35	;G
   1043  4ebd		       00		      .byte.b	0	;B
   1044  4ebe		       fc		      .byte.b	252	;R (13)
   1045  4ebf		       12		      .byte.b	18	;G
   1046  4ec0		       00		      .byte.b	0	;B
   1047  4ec1		       fc		      .byte.b	252	;R (12)
   1048  4ec2		       20		      .byte.b	32	;G
   1049  4ec3		       00		      .byte.b	0	;B
   1050  4ec4		       fe		      .byte.b	254	;R (11)
   1051  4ec5		       46		      .byte.b	70	;G
   1052  4ec6		       00		      .byte.b	0	;B
   1053  4ec7		       f8		      .byte.b	248	;R (10)
   1054  4ec8		       48		      .byte.b	72	;G
   1055  4ec9		       00		      .byte.b	0	;B
   1056  4eca		       f0		      .byte.b	240	;R (9)
   1057  4ecb		       04		      .byte.b	4	;G
   1058  4ecc		       00		      .byte.b	0	;B
   1059  4ecd		       e0		      .byte.b	224	;R (8)
   1060  4ece		       20		      .byte.b	32	;G
   1061  4ecf		       00		      .byte.b	0	;B
   1062  4ed0		       e0		      .byte.b	224	;R (7)
   1063  4ed1		       29		      .byte.b	41	;G
   1064  4ed2		       00		      .byte.b	0	;B
   1065  4ed3		       e0		      .byte.b	224	;R (6)
   1066  4ed4		       20		      .byte.b	32	;G
   1067  4ed5		       00		      .byte.b	0	;B
   1068  4ed6		       e0		      .byte.b	224	;R (5)
   1069  4ed7		       84		      .byte.b	132	;G
   1070  4ed8		       00		      .byte.b	0	;B
   1071  4ed9		       60		      .byte.b	96	;R (4)
   1072  4eda		       40		      .byte.b	64	;G
   1073  4edb		       00		      .byte.b	0	;B
   1074  4edc		       00		      .byte.b	0	;R (3)
   1075  4edd		       88		      .byte.b	136	;G
   1076  4ede		       00		      .byte.b	0	;B
   1077  4edf		       00		      .byte.b	0	;R (2)
   1078  4ee0		       11		      .byte.b	17	;G
   1079  4ee1		       00		      .byte.b	0	;B
   1080  4ee2		       24		      .byte.b	36	;R (1)
   1081  4ee3		       24		      .byte.b	36	;G
   1082  4ee4		       00		      .byte.b	0	;B
   1083  4ee5		       00		      .byte.b	0	;R (0)
   1084  4ee6		       00		      .byte.b	0	;G
   1085  4ee7		       00		      .byte.b	0	;B
   1086  4ee8				   COL_5
   1087  4ee8		       02		      .byte.b	2	;R (71)
   1088  4ee9		       12		      .byte.b	18	;G
   1089  4eea		       00		      .byte.b	0	;B
   1090  4eeb		       00		      .byte.b	0	;R (70)
   1091  4eec		       00		      .byte.b	0	;G
   1092  4eed		       00		      .byte.b	0	;B
   1093  4eee		       00		      .byte.b	0	;R (69)
   1094  4eef		       02		      .byte.b	2	;G
   1095  4ef0		       00		      .byte.b	0	;B
   1096  4ef1		       03		      .byte.b	3	;R (68)
   1097  4ef2		       12		      .byte.b	18	;G
   1098  4ef3		       00		      .byte.b	0	;B
   1099  4ef4		       0b		      .byte.b	11	;R (67)
   1100  4ef5		       09		      .byte.b	9	;G
   1101  4ef6		       00		      .byte.b	0	;B
   1102  4ef7		       07		      .byte.b	7	;R (66)
   1103  4ef8		       05		      .byte.b	5	;G
   1104  4ef9		       00		      .byte.b	0	;B
   1105  4efa		       03		      .byte.b	3	;R (65)
   1106  4efb		       06		      .byte.b	6	;G
   1107  4efc		       00		      .byte.b	0	;B
   1108  4efd		       01		      .byte.b	1	;R (64)
   1109  4efe		       20		      .byte.b	32	;G
   1110  4eff		       00		      .byte.b	0	;B
   1111  4f00		       03		      .byte.b	3	;R (63)
   1112  4f01		       03		      .byte.b	3	;G
   1113  4f02		       00		      .byte.b	0	;B
   1114  4f03		       03		      .byte.b	3	;R (62)
   1115  4f04		       0a		      .byte.b	10	;G
   1116  4f05		       00		      .byte.b	0	;B
   1117  4f06		       03		      .byte.b	3	;R (61)
   1118  4f07		       02		      .byte.b	2	;G
   1119  4f08		       00		      .byte.b	0	;B
   1120  4f09		       03		      .byte.b	3	;R (60)
   1121  4f0a		       00		      .byte.b	0	;G
   1122  4f0b		       00		      .byte.b	0	;B
   1123  4f0c		       03		      .byte.b	3	;R (59)
   1124  4f0d		       0a		      .byte.b	10	;G
   1125  4f0e		       00		      .byte.b	0	;B
   1126  4f0f		       03		      .byte.b	3	;R (58)
   1127  4f10		       02		      .byte.b	2	;G
   1128  4f11		       00		      .byte.b	0	;B
   1129  4f12		       01		      .byte.b	1	;R (57)
   1130  4f13		       03		      .byte.b	3	;G
   1131  4f14		       00		      .byte.b	0	;B
   1132  4f15		       01		      .byte.b	1	;R (56)
   1133  4f16		       01		      .byte.b	1	;G
   1134  4f17		       00		      .byte.b	0	;B
   1135  4f18		       00		      .byte.b	0	;R (55)
   1136  4f19		       25		      .byte.b	37	;G
   1137  4f1a		       00		      .byte.b	0	;B
   1138  4f1b		       00		      .byte.b	0	;R (54)
   1139  4f1c		       00		      .byte.b	0	;G
   1140  4f1d		       00		      .byte.b	0	;B
   1141  4f1e		       00		      .byte.b	0	;R (53)
   1142  4f1f		       20		      .byte.b	32	;G
   1143  4f20		       00		      .byte.b	0	;B
   1144  4f21		       00		      .byte.b	0	;R (52)
   1145  4f22		       08		      .byte.b	8	;G
   1146  4f23		       00		      .byte.b	0	;B
   1147  4f24		       00		      .byte.b	0	;R (51)
   1148  4f25		       02		      .byte.b	2	;G
   1149  4f26		       00		      .byte.b	0	;B
   1150  4f27		       00		      .byte.b	0	;R (50)
   1151  4f28		       40		      .byte.b	64	;G
   1152  4f29		       00		      .byte.b	0	;B
   1153  4f2a		       00		      .byte.b	0	;R (49)
   1154  4f2b		       11		      .byte.b	17	;G
   1155  4f2c		       00		      .byte.b	0	;B
   1156  4f2d		       00		      .byte.b	0	;R (48)
   1157  4f2e		       00		      .byte.b	0	;G
   1158  4f2f		       00		      .byte.b	0	;B
   1159  4f30		       00		      .byte.b	0	;R (47)
   1160  4f31		       20		      .byte.b	32	;G
   1161  4f32		       00		      .byte.b	0	;B
   1162  4f33		       00		      .byte.b	0	;R (46)
   1163  4f34		       08		      .byte.b	8	;G
   1164  4f35		       00		      .byte.b	0	;B
   1165  4f36		       00		      .byte.b	0	;R (45)
   1166  4f37		       00		      .byte.b	0	;G
   1167  4f38		       00		      .byte.b	0	;B
   1168  4f39		       00		      .byte.b	0	;R (44)
   1169  4f3a		       24		      .byte.b	36	;G
   1170  4f3b		       00		      .byte.b	0	;B
   1171  4f3c		       00		      .byte.b	0	;R (43)
   1172  4f3d		       00		      .byte.b	0	;G
   1173  4f3e		       00		      .byte.b	0	;B
   1174  4f3f		       00		      .byte.b	0	;R (42)
   1175  4f40		       04		      .byte.b	4	;G
   1176  4f41		       00		      .byte.b	0	;B
   1177  4f42		       00		      .byte.b	0	;R (41)
   1178  4f43		       21		      .byte.b	33	;G
   1179  4f44		       00		      .byte.b	0	;B
   1180  4f45		       01		      .byte.b	1	;R (40)
   1181  4f46		       01		      .byte.b	1	;G
   1182  4f47		       00		      .byte.b	0	;B
   1183  4f48		       01		      .byte.b	1	;R (39)
   1184  4f49		       25		      .byte.b	37	;G
   1185  4f4a		       00		      .byte.b	0	;B
   1186  4f4b		       01		      .byte.b	1	;R (38)
   1187  4f4c		       01		      .byte.b	1	;G
   1188  4f4d		       00		      .byte.b	0	;B
   1189  4f4e		       03		      .byte.b	3	;R (37)
   1190  4f4f		       23		      .byte.b	35	;G
   1191  4f50		       00		      .byte.b	0	;B
   1192  4f51		       03		      .byte.b	3	;R (36)
   1193  4f52		       13		      .byte.b	19	;G
   1194  4f53		       00		      .byte.b	0	;B
   1195  4f54		       01		      .byte.b	1	;R (35)
   1196  4f55		       02		      .byte.b	2	;G
   1197  4f56		       00		      .byte.b	0	;B
   1198  4f57		       01		      .byte.b	1	;R (34)
   1199  4f58		       10		      .byte.b	16	;G
   1200  4f59		       00		      .byte.b	0	;B
   1201  4f5a		       03		      .byte.b	3	;R (33)
   1202  4f5b		       02		      .byte.b	2	;G
   1203  4f5c		       00		      .byte.b	0	;B
   1204  4f5d		       01		      .byte.b	1	;R (32)
   1205  4f5e		       08		      .byte.b	8	;G
   1206  4f5f		       00		      .byte.b	0	;B
   1207  4f60		       03		      .byte.b	3	;R (31)
   1208  4f61		       20		      .byte.b	32	;G
   1209  4f62		       00		      .byte.b	0	;B
   1210  4f63		       03		      .byte.b	3	;R (30)
   1211  4f64		       00		      .byte.b	0	;G
   1212  4f65		       00		      .byte.b	0	;B
   1213  4f66		       03		      .byte.b	3	;R (29)
   1214  4f67		       10		      .byte.b	16	;G
   1215  4f68		       00		      .byte.b	0	;B
   1216  4f69		       03		      .byte.b	3	;R (28)
   1217  4f6a		       00		      .byte.b	0	;G
   1218  4f6b		       00		      .byte.b	0	;B
   1219  4f6c		       07		      .byte.b	7	;R (27)
   1220  4f6d		       0e		      .byte.b	14	;G
   1221  4f6e		       00		      .byte.b	0	;B
   1222  4f6f		       03		      .byte.b	3	;R (26)
   1223  4f70		       41		      .byte.b	65	;G
   1224  4f71		       00		      .byte.b	0	;B
   1225  4f72		       07		      .byte.b	7	;R (25)
   1226  4f73		       04		      .byte.b	4	;G
   1227  4f74		       00		      .byte.b	0	;B
   1228  4f75		       03		      .byte.b	3	;R (24)
   1229  4f76		       21		      .byte.b	33	;G
   1230  4f77		       00		      .byte.b	0	;B
   1231  4f78		       03		      .byte.b	3	;R (23)
   1232  4f79		       04		      .byte.b	4	;G
   1233  4f7a		       00		      .byte.b	0	;B
   1234  4f7b		       03		      .byte.b	3	;R (22)
   1235  4f7c		       02		      .byte.b	2	;G
   1236  4f7d		       00		      .byte.b	0	;B
   1237  4f7e		       03		      .byte.b	3	;R (21)
   1238  4f7f		       26		      .byte.b	38	;G
   1239  4f80		       00		      .byte.b	0	;B
   1240  4f81		       01		      .byte.b	1	;R (20)
   1241  4f82		       01		      .byte.b	1	;G
   1242  4f83		       00		      .byte.b	0	;B
   1243  4f84		       00		      .byte.b	0	;R (19)
   1244  4f85		       21		      .byte.b	33	;G
   1245  4f86		       00		      .byte.b	0	;B
   1246  4f87		       01		      .byte.b	1	;R (18)
   1247  4f88		       09		      .byte.b	9	;G
   1248  4f89		       00		      .byte.b	0	;B
   1249  4f8a		       23		      .byte.b	35	;R (17)
   1250  4f8b		       22		      .byte.b	34	;G
   1251  4f8c		       00		      .byte.b	0	;B
   1252  4f8d		       01		      .byte.b	1	;R (16)
   1253  4f8e		       01		      .byte.b	1	;G
   1254  4f8f		       00		      .byte.b	0	;B
   1255  4f90		       00		      .byte.b	0	;R (15)
   1256  4f91		       29		      .byte.b	41	;G
   1257  4f92		       00		      .byte.b	0	;B
   1258  4f93		       00		      .byte.b	0	;R (14)
   1259  4f94		       00		      .byte.b	0	;G
   1260  4f95		       00		      .byte.b	0	;B
   1261  4f96		       00		      .byte.b	0	;R (13)
   1262  4f97		       04		      .byte.b	4	;G
   1263  4f98		       00		      .byte.b	0	;B
   1264  4f99		       00		      .byte.b	0	;R (12)
   1265  4f9a		       20		      .byte.b	32	;G
   1266  4f9b		       00		      .byte.b	0	;B
   1267  4f9c		       10		      .byte.b	16	;R (11)
   1268  4f9d		       12		      .byte.b	18	;G
   1269  4f9e		       00		      .byte.b	0	;B
   1270  4f9f		       00		      .byte.b	0	;R (10)
   1271  4fa0		       00		      .byte.b	0	;G
   1272  4fa1		       00		      .byte.b	0	;B
   1273  4fa2		       00		      .byte.b	0	;R (9)
   1274  4fa3		       21		      .byte.b	33	;G
   1275  4fa4		       00		      .byte.b	0	;B
   1276  4fa5		       00		      .byte.b	0	;R (8)
   1277  4fa6		       08		      .byte.b	8	;G
   1278  4fa7		       00		      .byte.b	0	;B
   1279  4fa8		       00		      .byte.b	0	;R (7)
   1280  4fa9		       20		      .byte.b	32	;G
   1281  4faa		       00		      .byte.b	0	;B
   1282  4fab		       00		      .byte.b	0	;R (6)
   1283  4fac		       04		      .byte.b	4	;G
   1284  4fad		       00		      .byte.b	0	;B
   1285  4fae		       20		      .byte.b	32	;R (5)
   1286  4faf		       20		      .byte.b	32	;G
   1287  4fb0		       00		      .byte.b	0	;B
   1288  4fb1		       00		      .byte.b	0	;R (4)
   1289  4fb2		       09		      .byte.b	9	;G
   1290  4fb3		       00		      .byte.b	0	;B
   1291  4fb4		       00		      .byte.b	0	;R (3)
   1292  4fb5		       00		      .byte.b	0	;G
   1293  4fb6		       00		      .byte.b	0	;B
   1294  4fb7		       00		      .byte.b	0	;R (2)
   1295  4fb8		       48		      .byte.b	72	;G
   1296  4fb9		       00		      .byte.b	0	;B
   1297  4fba		       02		      .byte.b	2	;R (1)
   1298  4fbb		       02		      .byte.b	2	;G
   1299  4fbc		       00		      .byte.b	0	;B
   1300  4fbd		       00		      .byte.b	0	;R (0)
   1301  4fbe		       00		      .byte.b	0	;G
   1302  4fbf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  4fc0							;    include "pizza.asm"
    263  4fc0
      0  4fc0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  4fc0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  4fc0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4fc0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4fc0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4fc0				  -	      ERR
      6  4fc0					      endif
------- FILE ./chess.asm
------- FILE engine6502.asm LEVEL 2 PASS 2
      0  4fc0					      include	"engine6502.asm"
      1  4fc0							; 6502 chess engine
      2  4fc0							; Andrew Davie - January 2020
      3  4fc0
      0  4fc0					      NEWRAMBANK	ENGINE6502
      1 U3800 ????				      SEG.U	ENGINE6502
      2 U3800					      ORG	ORIGIN_RAM
      3 U3800					      RORG	RAM_3E
      4 U3800				   BANK_START SET	*
      5 U3800				   ENGINE6502 SET	ORIGIN_RAM / RAM_SIZE
      6 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      5 U3800
      6 U3800
      7 U3800
      8 U3800
      9 U3800
     10 U3800				  -	      if	0
     11 U3800				  -
     12 U3800				  -
     13 U3800				  -
     14 U3800				  -	      DEFINE_SUBROUTINE	GenMoveForPiece
     15 U3800				  -
     16 U3800				  -			; a = piece
     17 U3800				  -			; x = square
     18 U3800				  -
     19 U3800				  -	      asl
     20 U3800				  -	      tay
     21 U3800				  -	      lda	Move_Vector,y
     22 U3800				  -	      sta	_vec
     23 U3800				  -	      lda	Move_Vector+1,y
     24 U3800				  -	      sta	_vec+1
     25 U3800				  -	      jmp	(vec)
     26 U3800				  -
     27 U3800				  -
     28 U3800				  -Move_Blank rts
     29 U3800				  -
     30 U3800				  -Move_White_Pawn
     31 U3800				  -
     32 U3800				  -	      ldy	Square+12,x
     33 U3800				  -	      lda	Board,y
     34 U3800				  -	      bne	CaptureLeft
     35 U3800				  -	      jsr	AddMove
     36 U3800				  -
     37 U3800				  -	      cpx	#48	; ~ (i.e., pawn must have originally been on start rank)
     38 U3800				  -	      bcs	notOnStart
     39 U3800				  -
     40 U3800				  -	      ldy	Square+24,x
     41 U3800				  -	      lda	Board,y
     42 U3800				  -	      bne	CaptureLeft
     43 U3800				  -	      jsr	AddMove
     44 U3800				  -
     45 U3800				  -notOnStart
     46 U3800				  -CaptureLeft
     47 U3800				  -
     48 U3800				  -	      dey
     49 U3800				  -	      lda	Board,y
     50 U3800				  -	      and	#BLACK
     51 U3800				  -	      bne	CaptureRight	; ALSO CATCHES ILLEGALS
     52 U3800				  -	      jsr	AddMove
     53 U3800				  -
     54 U3800				  -CaptureRight
     55 U3800				  -	      iny
     56 U3800				  -	      iny
     57 U3800				  -	      lda	Board,y
     58 U3800				  -	      and	#BLACK
     59 U3800				  -	      bne	enPassant	; ALSO CATCHES ILLEGALS
     60 U3800				  -	      jsr	AddMove
     61 U3800				  -
     62 U3800				  -
     63 U3800				  -enPassant  rts
     64 U3800				  -
     65 U3800				  -
     66 U3800				  -
     67 U3800				  -
     68 U3800				  -Move_Bishop txa
     69 U3800				  -	      tay
     70 U3800				  -
     71 U3800				  -AddMoveBish jsr	AddMove
     72 U3800				  -
     73 U3800				  -BishAddMove1 lda	Square+13,y
     74 U3800				  -	      tay
     75 U3800				  -	      lda	Board,y
     76 U3800				  -	      beq	AddMoveBish
     77 U3800				  -	      eor	Board,x
     78 U3800				  -	      and	#BLACK
     79 U3800				  -	      bne	AddMoveBish
     80 U3800				  -	      jsr	AddMove
     81 U3800				  -
     82 U3800				  -
     83 U3800				  -
     84 U3800				  -
     85 U3800				  -
     86 U3800				  -
     87 U3800				  -Move_Vector
     88 U3800				  -
     89 U3800				  -	      .word	Move_Blank	; BLANK
     90 U3800				  -	      .word	Move_White_Pawn
     91 U3800				  -	      .word	Move_Knight
     92 U3800				  -	      .word	Move_Bishop
     93 U3800				  -	      .word	Move_Rook
     94 U3800				  -	      .word	Move_Queen
     95 U3800				  -	      .word	Move_King
     96 U3800				  -	      .word	0
     97 U3800				  -
     98 U3800				  -	      .word	0
     99 U3800				  -	      .word	Move_Black_Pawn
    100 U3800				  -	      .word	Move_Knight
    101 U3800				  -	      .word	Move_Bishop
    102 U3800				  -	      .word	Move_Rook
    103 U3800				  -	      .word	Move_Queen
    104 U3800				  -	      .word	Move_King
    105 U3800				  -	      .word	0
    106 U3800				  -
    107 U3800				  -
    108 U3800				  -
    109 U3800				  -
    110 U3800				  -
    111 U3800				  -
    112 U3800				  -	      DEFINE_SUBROUTINE	Init_Board
    113 U3800				  -
    114 U3800				  -			; Board is a 12 x 12 object which simplifies the generation of moves
    115 U3800				  -			; The squares marked 'X' are illegal. The index of each square is the left
    116 U3800				  -			; number + the bottom number. So, bottom left legal square is #26
    117 U3800				  -
    118 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    119 U3800				  -			;132 | X | X | X | X | X | X | X | X | X | X | X | X |
    120 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    121 U3800				  -			;120 | X | X | X | X | X | X | X | X | X | X | X | X |
    122 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    123 U3800				  -			;108 | X | X |   |   |   |   |   |   |   |   | X | X |
    124 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    125 U3800				  -			; 96 | X | X |   |   |   |   |   |   |   |   | X | X |
    126 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    127 U3800				  -			; 84 | X | X |   |   |   |   |   |   |   |   | X | X |
    128 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    129 U3800				  -			; 72 | X | X |   |   |   |   |   |   |   |   | X | X |
    130 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    131 U3800				  -			; 60 | X | X |   |   |   |   |   |   |   |   | X | X |
    132 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    133 U3800				  -			; 48 | X | X |   |   |   |   |   |   |   |   | X | X |
    134 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    135 U3800				  -			; 36 | X | X |   |   |   |   |   |   |   |   | X | X |
    136 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    137 U3800				  -			; 24 | X | X |   |   |   |   |   |   |   |   | X | X |
    138 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    139 U3800				  -			; 12 | X | X | X | X | X | X | X | X | X | X | X | X |
    140 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    141 U3800				  -			;  0 | X | X | X | X | X | X | X | X | X | X | X | X |
    142 U3800				  -			;    +---+---+---+---+---+---+---+---+---+---+---+---+
    143 U3800				  -			;	0   1	2   3	4   5	6   7	8   9	10  11
    144 U3800				  -
    145 U3800				  -	      ldx	#144
    146 U3800				  -	      lda	#-1
    147 U3800				  -.fill_illegal sta	Board-1,x
    148 U3800				  -	      dex
    149 U3800				  -	      bpl	.fill_illegal
    150 U3800				  -
    151 U3800				  -	      rts
    152 U3800				  -
    153 U3800					      endif
    154 U3800
    155 U3800
      0 U3800					      CHECK_BANK_SIZE	"ENGINE6502 -- full 2K"
      1 U3800		       00 00	   .TEMP      =	* - BANK_START
 ENGINE6502 -- full 2K (2K) SIZE =  $0 , FREE= $800
      2 U3800					      ECHO	"ENGINE6502 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3 U3800				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4 U3800				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5 U3800				  -	      ERR
      6 U3800					      endif
------- FILE ./chess.asm
------- FILE common_variables.asm LEVEL 2 PASS 2
      0 U3800					      include	"common_variables.asm"
      0 U3800					      NEWRAMBANK	COMMON_VARIABLES
      1 U3c9b ????				      SEG.U	COMMON_VARIABLES
      2 U3c00					      ORG	ORIGIN_RAM
      3 U3c00					      RORG	RAM_3E
      4 U3c00				   BANK_START SET	*
      5 U3c00				   COMMON_VARIABLES SET	ORIGIN_RAM / RAM_SIZE
      6 U3c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      2 U3c00
      3 U3c00		       00 00 00 00*Board      ds	144
      4 U3c90
      0 U3c90					      DEFINE_SUBROUTINE	Init_Board
      1 U3c90		       00 09	   BANK_Init_Board =	_CURRENT_BANK
      2 U3c90					      SUBROUTINE
      3 U3c90				   Init_Board
      6 U3c90
      7 U3c90							; Board is a 12 x 12 object which simplifies the generation of moves
      8 U3c90							; The squares marked 'X' are illegal. The index of each square is the left
      9 U3c90							; number + the bottom number. So, bottom left legal square is #26
     10 U3c90
     11 U3c90							; --> see ValidSquareTable for lookup
     12 U3c90
     13 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     14 U3c90							;132 | X | X | X | X | X | X | X | X | X | X | X | X |
     15 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     16 U3c90							;120 | X | X | X | X | X | X | X | X | X | X | X | X |
     17 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     18 U3c90							;108 | X | X |   |   |   |   |   |   |   |   | X | X |
     19 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     20 U3c90							; 96 | X | X |   |   |   |   |   |   |   |   | X | X |
     21 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     22 U3c90							; 84 | X | X |   |   |   |   |   |   |   |   | X | X |
     23 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     24 U3c90							; 72 | X | X |   |   |   |   |   |   |   |   | X | X |
     25 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     26 U3c90							; 60 | X | X |   |   |   |   |   |   |   |   | X | X |
     27 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     28 U3c90							; 48 | X | X |   |   |   |   |   |   |   |   | X | X |
     29 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     30 U3c90							; 36 | X | X |   |   |   |   |   |   |   |   | X | X |
     31 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     32 U3c90							; 24 | X | X |   |   |   |   |   |   |   |   | X | X |
     33 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     34 U3c90							; 12 | X | X | X | X | X | X | X | X | X | X | X | X |
     35 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     36 U3c90							;  0 | X | X | X | X | X | X | X | X | X | X | X | X |
     37 U3c90							;    +---+---+---+---+---+---+---+---+---+---+---+---+
     38 U3c90							;	0   1	2   3	4   5	6   7	8   9	10  11
     39 U3c90
     40 U3c90		       a2 90		      ldx	#144
     41 U3c92		       a9 ff		      lda	#-1
     42 U3c94		       9d ff 0f    .fill_illegal sta	Board-1,x
     43 U3c97		       ca		      dex
     44 U3c98		       10 fa		      bpl	.fill_illegal
     45 U3c9a
     46 U3c9a		       60		      rts
     47 U3c9b
     48 U3c9b
     49 U3c9b
     50 U3c9b
      0 U3c9b					      CHECK_HALF_BANK_SIZE	"COMMON_VARIABLES"
      1 U3c9b
      2 U3c9b
      3 U3c9b		       00 9b	   .TEMP      =	* - BANK_START
 COMMON_VARIABLES (1K) SIZE =  $9b , FREE= $365
      4 U3c9b					      ECHO	"COMMON_VARIABLES", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5 U3c9b				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6 U3c9b				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7 U3c9b				  -	      ERR
      8 U3c9b					      endif
------- FILE ./chess.asm
------- FILE Handler_KING.asm LEVEL 2 PASS 2
      0 U3c9b					      include	"Handler_KING.asm"
      1 U3c9b							; Copyright (C)2020 Andrew Davie
      2 U3c9b
      3 U3c9b							; This is the move handler for a KING
      4 U3c9b							; "Check" is detected in the next ply of the search, so the move generation doesn't have to
      5 U3c9b							; be concerned about that. To assist with castling over squares in check (which is illegal)
      6 U3c9b							; the concept of a phantom king is introduced. Phantom kings are effectively blank squares
      7 U3c9b							; but need to be checked when moving opposite-colour pieces to a square. Messy.
      8 U3c9b
      0 U3c9b					      NEWRAMBANK	HANDLER_KING
      1 U416e ????				      SEG.U	HANDLER_KING
      2 U4000					      ORG	ORIGIN_RAM
      3 U4000					      RORG	RAM_3E
      4 U4000				   BANK_START SET	*
      5 U4000				   HANDLER_KING SET	ORIGIN_RAM / RAM_SIZE
      6 U4000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     10 U4000							; Handles everything to do with king moving
     11 U4000
------- FILE common_vectors.asm LEVEL 3 PASS 2
      0 U4000					      include	"common_vectors.asm"	; MUST BE FIRST
      1 U4000							; Copyright (C)2020 Andrew Davie
      2 U4000
      3 U4000							;---------------------------------------------------------------------------------------------------
      4 U4000
      0 U4000					      OPTIONAL_PAGEBREAK	"ValidSquare", 144
     10 U4000					      LIST	ON
      6 U4000					      SUBROUTINE
      0 U4000					      DEFINE_SUBROUTINE	ValidSquare
      1 U4000		       00 09	   BANK_ValidSquare =	_CURRENT_BANK
      2 U4000					      SUBROUTINE
      3 U4000				   ValidSquare
      8 U4000
      9 U4000							; Use this table to
     10 U4000							;   a) Determine if a square is valid (-1 = NO)
     11 U4000							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+12,x" will let you know
     12 U4000							;	if a white pawn on square "x" can move up the board.
     13 U4000
     14 U4000		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     15 U400c		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     16 U4018		       ff ff 1a 1b*	      .byte.b	-1,-1, 26, 27, 28, 29, 30, 31, 32, 33,-1,-1
     17 U4024		       ff ff 26 27*	      .byte.b	-1,-1, 38, 39, 40, 41, 42, 43, 44, 45,-1,-1
     18 U4030		       ff ff 32 33*	      .byte.b	-1,-1, 50, 51, 52, 53, 54, 55, 56, 57,-1,-1
     19 U403c		       ff ff 3e 3f*	      .byte.b	-1,-1, 62, 63, 64, 65, 66, 67, 68, 69,-1,-1
     20 U4048		       ff ff 4a 4b*	      .byte.b	-1,-1, 74, 75, 76, 77, 78, 79, 80, 81,-1,-1
     21 U4054		       ff ff 56 57*	      .byte.b	-1,-1, 86, 87, 88, 89, 90, 91, 92, 93,-1,-1
     22 U4060		       ff ff 62 63*	      .byte.b	-1,-1, 98, 99,100,101,102,103,104,105,-1,-1
     23 U406c		       ff ff 6e 6f*	      .byte.b	-1,-1,110,111,112,113,114,115,116,117,-1,-1
     24 U4078		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     25 U4084		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     26 U4090
     27 U4090							;---------------------------------------------------------------------------------------------------
     28 U4090
      0 U4090					      DEFINE_SUBROUTINE	Return
      1 U4090		       00 09	   BANK_Return =	_CURRENT_BANK
      2 U4090					      SUBROUTINE
      3 U4090				   Return
     30 U4090		       a4 8c		      ldy	returnBank
     31 U4092		       84 3e		      sty	SET_BANK_RAM
     32 U4094		       60		      rts
     33 U4095
     34 U4095							;---------------------------------------------------------------------------------------------------
     35 U4095
      0 U4095					      DEFINE_SUBROUTINE	AddMove
      1 U4095		       00 09	   BANK_AddMove =	_CURRENT_BANK
      2 U4095					      SUBROUTINE
      3 U4095				   AddMove
     37 U4095
     38 U4095							; add square in y register to movelist as destinatio
     39 U4095							; currentPiexe = piece moving
     40 U4095							; currentSquare = start square
     41 U4095
     42 U4095							; To call (and this function MUST be at the start of every RAM bank)...
     43 U4095							;	 ldy #BANK_OF_CALLER
     44 U4095							;	 lda ply
     45 U4095							;	 sta SET_BANK_RAM
     46 U4095							; and fall through ...
     47 U4095
      0 U4095					      DEFINE_SUBROUTINE	InsertMove
      1 U4095		       00 09	   BANK_InsertMove =	_CURRENT_BANK
      2 U4095					      SUBROUTINE
      3 U4095				   InsertMove
     49 U4095
     50 U4095
     51 U4095
     52 U4095
     53 U4095							; TODO - add move to movelist
     54 U4095
     55 U4095		       4c 90 10 	      jmp	Return	; switch back to call bank and return
     56 U4098
     57 U4098							;---------------------------------------------------------------------------------------------------
     58 U4098							; EOF
------- FILE Handler_KING.asm
     13 U4098
     14 U4098							;---------------------------------------------------------------------------------------------------
     15 U4098							; MACRO - Common code
     16 U4098							; Looks at a square offset {1} to see if piece can move to it
     17 U4098							; Adds the square to the movelist if it can
     18 U4098
     19 U4098					      MAC	move_to
     20 U4098					      SUBROUTINE
     21 U4098
     22 U4098					      ldy	ValidSquare+{1},x
     23 U4098					      bmi	.invalid	; off board!
     24 U4098					      lda	Board,y	; piece @ destination
     25 U4098					      beq	.squareEmpty
     26 U4098
     27 U4098					      eor	currentPiece
     28 U4098					      bpl	.invalid	; same colour
     29 U4098
     30 U4098				   .squareEmpty jsr	AddMove
     31 U4098				   .invalid
     32 U4098					      ENDM
     33 U4098
     34 U4098							;---------------------------------------------------------------------------------------------------
     35 U4098							; MACRO - Castling
     36 U4098
     37 U4098		       00 03	   KINGSIDE   =	3
     38 U4098		       ff ff ff fc QUEENSIDE  =	-4
     39 U4098
     40 U4098					      MAC	castle
     41 U4098							; {1} == KINGSIDE or QUEENSIDE
     42 U4098					      SUBROUTINE
     43 U4098
     44 U4098							; Most likely failure trigger is there are pieces in the way (N or B) (or Q)
     45 U4098							; Check these squares first as it's the cheapest "exit" from castle check
     46 U4098
     47 U4098							; Note: castling with squares that are "in check" is problematic
     48 U4098							; TODO: next ply have a "phantom" king on the positions king moves over...?
     49 U4098
     50 U4098					      IF	{1} = QUEENSIDE
     51 U4098					      lda	Board-3,y	; nothing in N pos
     52 U4098					      bne	.noCastle
     53 U4098					      lda	Board-2,y	; nothing in B pos
     54 U4098					      bne	.noCastle
     55 U4098					      lda	Board-1,y	; nothing in Q pos
     56 U4098					      bne	.noCastle
     57 U4098					      ENDIF
     58 U4098
     59 U4098					      IF	{1} = KINGSIDE
     60 U4098					      lda	Board+2,y	; check N pos
     61 U4098					      bne	.noCastle
     62 U4098					      lda	Board+1,y	; check B pos
     63 U4098					      bne	.noCastle
     64 U4098					      ENDIF
     65 U4098
     66 U4098							; appropriate N/B/(Q) squares are vacant so we proceed with more checks...
     67 U4098
     68 U4098					      lda	Board+{1},y	; we expect a R
     69 U4098					      sta	__piece
     70 U4098
     71 U4098					      and	#PIECE_MASK
     72 U4098					      cmp	#ROOK
     73 U4098					      bne	.noCastle	; not a R
     74 U4098
     75 U4098					      lda	__piece
     76 U4098					      eor	currentPiece
     77 U4098					      bmi	.noCastle	; not correct colour
     78 U4098
     79 U4098					      bit	__piece
     80 U4098					      bvs	.noCastle	; it's previously moved so we can't castle
     81 U4098
     82 U4098							; FINALLY -- king can castle
     83 U4098							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     84 U4098							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     85 U4098							; next move. Castling will be detected by K moving > 1 square.
     86 U4098
     87 U4098					      jsr	AddMove
     88 U4098				   .noCastle
     89 U4098					      ENDM
     90 U4098
     91 U4098
     92 U4098							;---------------------------------------------------------------------------------------------------
     93 U4098
      0 U4098					      DEFINE_SUBROUTINE	Handle_KING
      1 U4098		       00 09	   BANK_Handle_KING =	_CURRENT_BANK
      2 U4098					      SUBROUTINE
      3 U4098				   Handle_KING
     95 U4098
     96 U4098							; Pass...
     97 U4098							; x = currentSquare (square the KING is on)
     98 U4098							; currentPiece (KING of course, but with flags/colour attached)
     99 U4098
    100 U4098							; regular moving...
    101 U4098
      0 U4098					      MOVE_TO	_DOWN+_LEFT
      1 U4098					      SUBROUTINE
      2 U4098
      3 U4098		       bc f3 0f 	      ldy	ValidSquare+_DOWN+_LEFT,x
      4 U409b		       30 0c		      bmi	.invalid
      5 U409d		       b9 00 10 	      lda	Board,y
      6 U40a0		       f0 04		      beq	.squareEmpty
      7 U40a2
      8 U40a2		       45 8a		      eor	currentPiece
      9 U40a4		       10 03		      bpl	.invalid
     10 U40a6
     11 U40a6		       20 95 10    .squareEmpty jsr	AddMove
     12 U40a9				   .invalid
      0 U40a9					      MOVE_TO	_DOWN
      1 U40a9					      SUBROUTINE
      2 U40a9
      3 U40a9		       bc f4 0f 	      ldy	ValidSquare+_DOWN,x
      4 U40ac		       30 0c		      bmi	.invalid
      5 U40ae		       b9 00 10 	      lda	Board,y
      6 U40b1		       f0 04		      beq	.squareEmpty
      7 U40b3
      8 U40b3		       45 8a		      eor	currentPiece
      9 U40b5		       10 03		      bpl	.invalid
     10 U40b7
     11 U40b7		       20 95 10    .squareEmpty jsr	AddMove
     12 U40ba				   .invalid
      0 U40ba					      MOVE_TO	_DOWN+_RIGHT
      1 U40ba					      SUBROUTINE
      2 U40ba
      3 U40ba		       bc f5 0f 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      4 U40bd		       30 0c		      bmi	.invalid
      5 U40bf		       b9 00 10 	      lda	Board,y
      6 U40c2		       f0 04		      beq	.squareEmpty
      7 U40c4
      8 U40c4		       45 8a		      eor	currentPiece
      9 U40c6		       10 03		      bpl	.invalid
     10 U40c8
     11 U40c8		       20 95 10    .squareEmpty jsr	AddMove
     12 U40cb				   .invalid
      0 U40cb					      MOVE_TO	_RIGHT
      1 U40cb					      SUBROUTINE
      2 U40cb
      3 U40cb		       bc 01 10 	      ldy	ValidSquare+_RIGHT,x
      4 U40ce		       30 0c		      bmi	.invalid
      5 U40d0		       b9 00 10 	      lda	Board,y
      6 U40d3		       f0 04		      beq	.squareEmpty
      7 U40d5
      8 U40d5		       45 8a		      eor	currentPiece
      9 U40d7		       10 03		      bpl	.invalid
     10 U40d9
     11 U40d9		       20 95 10    .squareEmpty jsr	AddMove
     12 U40dc				   .invalid
      0 U40dc					      MOVE_TO	_UP+_RIGHT
      1 U40dc					      SUBROUTINE
      2 U40dc
      3 U40dc		       bc 0d 10 	      ldy	ValidSquare+_UP+_RIGHT,x
      4 U40df		       30 0c		      bmi	.invalid
      5 U40e1		       b9 00 10 	      lda	Board,y
      6 U40e4		       f0 04		      beq	.squareEmpty
      7 U40e6
      8 U40e6		       45 8a		      eor	currentPiece
      9 U40e8		       10 03		      bpl	.invalid
     10 U40ea
     11 U40ea		       20 95 10    .squareEmpty jsr	AddMove
     12 U40ed				   .invalid
      0 U40ed					      MOVE_TO	_UP
      1 U40ed					      SUBROUTINE
      2 U40ed
      3 U40ed		       bc 0c 10 	      ldy	ValidSquare+_UP,x
      4 U40f0		       30 0c		      bmi	.invalid
      5 U40f2		       b9 00 10 	      lda	Board,y
      6 U40f5		       f0 04		      beq	.squareEmpty
      7 U40f7
      8 U40f7		       45 8a		      eor	currentPiece
      9 U40f9		       10 03		      bpl	.invalid
     10 U40fb
     11 U40fb		       20 95 10    .squareEmpty jsr	AddMove
     12 U40fe				   .invalid
      0 U40fe					      MOVE_TO	_UP+_LEFT
      1 U40fe					      SUBROUTINE
      2 U40fe
      3 U40fe		       bc 0b 10 	      ldy	ValidSquare+_UP+_LEFT,x
      4 U4101		       30 0c		      bmi	.invalid
      5 U4103		       b9 00 10 	      lda	Board,y
      6 U4106		       f0 04		      beq	.squareEmpty
      7 U4108
      8 U4108		       45 8a		      eor	currentPiece
      9 U410a		       10 03		      bpl	.invalid
     10 U410c
     11 U410c		       20 95 10    .squareEmpty jsr	AddMove
     12 U410f				   .invalid
      0 U410f					      MOVE_TO	_LEFT
      1 U410f					      SUBROUTINE
      2 U410f
      3 U410f		       bc ff 0f 	      ldy	ValidSquare+_LEFT,x
      4 U4112		       30 0c		      bmi	.invalid
      5 U4114		       b9 00 10 	      lda	Board,y
      6 U4117		       f0 04		      beq	.squareEmpty
      7 U4119
      8 U4119		       45 8a		      eor	currentPiece
      9 U411b		       10 03		      bpl	.invalid
     10 U411d
     11 U411d		       20 95 10    .squareEmpty jsr	AddMove
     12 U4120				   .invalid
    110 U4120
    111 U4120							; castling...
    112 U4120
    113 U4120		       24 8a		      bit	currentPiece	; WARNING: D6 (=MOVED) assumed
    114 U4122		       70 49		      bvs	.noCastle	; can't castle - king has moved
    115 U4124
      0 U4124					      CASTLE	KINGSIDE
      1 U4124
      2 U4124					      SUBROUTINE
      3 U4124
      4 U4124
      5 U4124
      6 U4124
      7 U4124
      8 U4124
      9 U4124
     10 U4124				  -	      IF	KINGSIDE = QUEENSIDE
     11 U4124				  -	      lda	Board-3,y
     12 U4124				  -	      bne	.noCastle
     13 U4124				  -	      lda	Board-2,y
     14 U4124				  -	      bne	.noCastle
     15 U4124				  -	      lda	Board-1,y
     16 U4124				  -	      bne	.noCastle
     17 U4124					      ENDIF
     18 U4124
     19 U4124					      IF	KINGSIDE = KINGSIDE
     20 U4124		       b9 02 10 	      lda	Board+2,y
     21 U4127		       d0 1d		      bne	.noCastle
     22 U4129		       b9 01 10 	      lda	Board+1,y
     23 U412c		       d0 18		      bne	.noCastle
     24 U412e					      ENDIF
     25 U412e
     26 U412e
     27 U412e
     28 U412e		       b9 03 10 	      lda	Board+KINGSIDE,y
     29 U4131		       85 a1		      sta	__piece
     30 U4133
     31 U4133		       29 07		      and	#PIECE_MASK
     32 U4135		       c9 04		      cmp	#ROOK
     33 U4137		       d0 0d		      bne	.noCastle
     34 U4139
     35 U4139		       a5 a1		      lda	__piece
     36 U413b		       45 8a		      eor	currentPiece
     37 U413d		       30 07		      bmi	.noCastle
     38 U413f
     39 U413f		       24 a1		      bit	__piece
     40 U4141		       70 03		      bvs	.noCastle
     41 U4143
     42 U4143
     43 U4143
     44 U4143
     45 U4143
     46 U4143
     47 U4143		       20 95 10 	      jsr	AddMove
     48 U4146				   .noCastle
      0 U4146					      CASTLE	QUEENSIDE
      1 U4146
      2 U4146					      SUBROUTINE
      3 U4146
      4 U4146
      5 U4146
      6 U4146
      7 U4146
      8 U4146
      9 U4146
     10 U4146					      IF	QUEENSIDE = QUEENSIDE
     11 U4146		       b9 fd 0f 	      lda	Board-3,y
     12 U4149		       d0 22		      bne	.noCastle
     13 U414b		       b9 fe 0f 	      lda	Board-2,y
     14 U414e		       d0 1d		      bne	.noCastle
     15 U4150		       b9 ff 0f 	      lda	Board-1,y
     16 U4153		       d0 18		      bne	.noCastle
     17 U4155					      ENDIF
     18 U4155
     19 U4155				  -	      IF	QUEENSIDE = KINGSIDE
     20 U4155				  -	      lda	Board+2,y
     21 U4155				  -	      bne	.noCastle
     22 U4155				  -	      lda	Board+1,y
     23 U4155				  -	      bne	.noCastle
     24 U4155					      ENDIF
     25 U4155
     26 U4155
     27 U4155
     28 U4155		       b9 fc 0f 	      lda	Board+QUEENSIDE,y
     29 U4158		       85 a1		      sta	__piece
     30 U415a
     31 U415a		       29 07		      and	#PIECE_MASK
     32 U415c		       c9 04		      cmp	#ROOK
     33 U415e		       d0 0d		      bne	.noCastle
     34 U4160
     35 U4160		       a5 a1		      lda	__piece
     36 U4162		       45 8a		      eor	currentPiece
     37 U4164		       30 07		      bmi	.noCastle
     38 U4166
     39 U4166		       24 a1		      bit	__piece
     40 U4168		       70 03		      bvs	.noCastle
     41 U416a
     42 U416a
     43 U416a
     44 U416a
     45 U416a
     46 U416a
     47 U416a		       20 95 10 	      jsr	AddMove
     48 U416d				   .noCastle
    118 U416d
    119 U416d				   .noCastle
    120 U416d		       60		      rts
    121 U416e
    122 U416e
      0 U416e					      CHECK_HALF_BANK_SIZE	"HANDLER_KING -- 1K"
      1 U416e
      2 U416e
      3 U416e		       01 6e	   .TEMP      =	* - BANK_START
 HANDLER_KING -- 1K (1K) SIZE =  $16e , FREE= $292
      4 U416e					      ECHO	"HANDLER_KING -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5 U416e				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6 U416e				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7 U416e				  -	      ERR
      8 U416e					      endif
------- FILE ./chess.asm
------- FILE Handler_QUEEN.asm LEVEL 2 PASS 2
      0 U416e					      include	"Handler_QUEEN.asm"
      1 U416e							; Copyright (C)2020 Andrew Davie
      2 U416e
      3 U416e							; This is the move handler for a QUEEN
      4 U416e
      0 U416e					      NEWRAMBANK	HANDLER_MOVE
      1 U46f4 ????				      SEG.U	HANDLER_MOVE
      2 U4400					      ORG	ORIGIN_RAM
      3 U4400					      RORG	RAM_3E
      4 U4400				   BANK_START SET	*
      5 U4400				   HANDLER_MOVE SET	ORIGIN_RAM / RAM_SIZE
      6 U4400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      6 U4400
------- FILE common_vectors.asm LEVEL 3 PASS 2
      0 U4400					      include	"common_vectors.asm"	; MUST BE FIRST
      1 U4400							; Copyright (C)2020 Andrew Davie
      2 U4400
      3 U4400							;---------------------------------------------------------------------------------------------------
      4 U4400
      0 U4400					      OPTIONAL_PAGEBREAK	"ValidSquare", 144
     10 U4400					      LIST	ON
      6 U4400					      SUBROUTINE
      0 U4400					      DEFINE_SUBROUTINE	ValidSquare
      1 U4400		       00 09	   BANK_ValidSquare =	_CURRENT_BANK
      2 U4400					      SUBROUTINE
      3 U4400				   ValidSquare
      8 U4400
      9 U4400							; Use this table to
     10 U4400							;   a) Determine if a square is valid (-1 = NO)
     11 U4400							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+12,x" will let you know
     12 U4400							;	if a white pawn on square "x" can move up the board.
     13 U4400
     14 U4400		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     15 U440c		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     16 U4418		       ff ff 1a 1b*	      .byte.b	-1,-1, 26, 27, 28, 29, 30, 31, 32, 33,-1,-1
     17 U4424		       ff ff 26 27*	      .byte.b	-1,-1, 38, 39, 40, 41, 42, 43, 44, 45,-1,-1
     18 U4430		       ff ff 32 33*	      .byte.b	-1,-1, 50, 51, 52, 53, 54, 55, 56, 57,-1,-1
     19 U443c		       ff ff 3e 3f*	      .byte.b	-1,-1, 62, 63, 64, 65, 66, 67, 68, 69,-1,-1
     20 U4448		       ff ff 4a 4b*	      .byte.b	-1,-1, 74, 75, 76, 77, 78, 79, 80, 81,-1,-1
     21 U4454		       ff ff 56 57*	      .byte.b	-1,-1, 86, 87, 88, 89, 90, 91, 92, 93,-1,-1
     22 U4460		       ff ff 62 63*	      .byte.b	-1,-1, 98, 99,100,101,102,103,104,105,-1,-1
     23 U446c		       ff ff 6e 6f*	      .byte.b	-1,-1,110,111,112,113,114,115,116,117,-1,-1
     24 U4478		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     25 U4484		       ff ff ff ff*	      .byte.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
     26 U4490
     27 U4490							;---------------------------------------------------------------------------------------------------
     28 U4490
      0 U4490					      DEFINE_SUBROUTINE	Return
      1 U4490		       00 09	   BANK_Return =	_CURRENT_BANK
      2 U4490					      SUBROUTINE
      3 U4490				   Return
     30 U4490		       a4 8c		      ldy	returnBank
     31 U4492		       84 3e		      sty	SET_BANK_RAM
     32 U4494		       60		      rts
     33 U4495
     34 U4495							;---------------------------------------------------------------------------------------------------
     35 U4495
      0 U4495					      DEFINE_SUBROUTINE	AddMove
      1 U4495		       00 09	   BANK_AddMove =	_CURRENT_BANK
      2 U4495					      SUBROUTINE
      3 U4495				   AddMove
     37 U4495
     38 U4495							; add square in y register to movelist as destinatio
     39 U4495							; currentPiexe = piece moving
     40 U4495							; currentSquare = start square
     41 U4495
     42 U4495							; To call (and this function MUST be at the start of every RAM bank)...
     43 U4495							;	 ldy #BANK_OF_CALLER
     44 U4495							;	 lda ply
     45 U4495							;	 sta SET_BANK_RAM
     46 U4495							; and fall through ...
     47 U4495
      0 U4495					      DEFINE_SUBROUTINE	InsertMove
      1 U4495		       00 09	   BANK_InsertMove =	_CURRENT_BANK
      2 U4495					      SUBROUTINE
      3 U4495				   InsertMove
     49 U4495
     50 U4495
     51 U4495
     52 U4495
     53 U4495							; TODO - add move to movelist
     54 U4495
     55 U4495		       4c 90 10 	      jmp	Return	; switch back to call bank and return
     56 U4498
     57 U4498							;---------------------------------------------------------------------------------------------------
     58 U4498							; EOF
------- FILE Handler_QUEEN.asm
      8 U4498
      9 U4498							;---------------------------------------------------------------------------------------------------
     10 U4498							; MACRO - Common code
     11 U4498							; Looks at a square offset {1} to see if piece can move to it
     12 U4498							; Adds the square to the movelist if it can
     13 U4498							; Keeps moving in the same direction until it's blocked/off=board
     14 U4498
     15 U4498					      MAC	move_towards
     16 U4498					      SUBROUTINE
     17 U4498
     18 U4498					      ldx	currentSquare
     19 U4498				   .project   ldy	ValidSquare+{1},x
     20 U4498					      bmi	.invalid	; off board!
     21 U4498					      lda	Board,y	; piece @ destination
     22 U4498					      beq	.squareEmpty
     23 U4498
     24 U4498					      eor	currentPiece
     25 U4498					      bpl	.invalid	; same colour
     26 U4498
     27 U4498				   .squareEmpty jsr	AddMove
     28 U4498
     29 U4498					      lda	Board,y
     30 U4498					      bne	.invalid	; stop when we hit something
     31 U4498
     32 U4498					      tya
     33 U4498					      tax		; move to next square
     34 U4498					      jmp	.project
     35 U4498
     36 U4498				   .invalid
     37 U4498					      ENDM
     38 U4498
     39 U4498					      MAC	move_to
     40 U4498					      SUBROUTINE
     41 U4498
     42 U4498					      ldy	ValidSquare+{1},x
     43 U4498					      bmi	.invalidK	; off board!
     44 U4498					      lda	Board,y	; piece @ destination
     45 U4498					      beq	.squareEmpty
     46 U4498
     47 U4498					      eor	currentPiece
     48 U4498					      bpl	.invalidK	; same colour
     49 U4498
     50 U4498				   .squareEmpty jsr	AddMove
     51 U4498				   .invalidK
     52 U4498					      ENDM
     53 U4498
     54 U4498
     55 U4498							;---------------------------------------------------------------------------------------------------
     56 U4498							; QUEEN
     57 U4498							;---------------------------------------------------------------------------------------------------
     58 U4498
      0 U4498					      DEFINE_SUBROUTINE	Handle_QUEEN
      1 U4498		       00 09	   BANK_Handle_QUEEN =	_CURRENT_BANK
      2 U4498					      SUBROUTINE
      3 U4498				   Handle_QUEEN
     60 U4498
     61 U4498							; Pass...
     62 U4498							; x = currentSquare (square the piece is on)
     63 U4498							; currentPiece (with flags/colour attached)
     64 U4498
      0 U4498					      MOVE_TOWARDS	_DOWN+_LEFT
      1 U4498					      SUBROUTINE
      2 U4498
      3 U4498		       a6 8b		      ldx	currentSquare
      4 U449a		       bc f3 0f    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      5 U449d		       30 16		      bmi	.invalid
      6 U449f		       b9 00 10 	      lda	Board,y
      7 U44a2		       f0 04		      beq	.squareEmpty
      8 U44a4
      9 U44a4		       45 8a		      eor	currentPiece
     10 U44a6		       10 0d		      bpl	.invalid
     11 U44a8
     12 U44a8		       20 95 10    .squareEmpty jsr	AddMove
     13 U44ab
     14 U44ab		       b9 00 10 	      lda	Board,y
     15 U44ae		       d0 05		      bne	.invalid
     16 U44b0
     17 U44b0		       98		      tya
     18 U44b1		       aa		      tax
     19 U44b2		       4c 9a 10 	      jmp	.project
     20 U44b5
     21 U44b5				   .invalid
      0 U44b5					      MOVE_TOWARDS	_DOWN
      1 U44b5					      SUBROUTINE
      2 U44b5
      3 U44b5		       a6 8b		      ldx	currentSquare
      4 U44b7		       bc f4 0f    .project   ldy	ValidSquare+_DOWN,x
      5 U44ba		       30 16		      bmi	.invalid
      6 U44bc		       b9 00 10 	      lda	Board,y
      7 U44bf		       f0 04		      beq	.squareEmpty
      8 U44c1
      9 U44c1		       45 8a		      eor	currentPiece
     10 U44c3		       10 0d		      bpl	.invalid
     11 U44c5
     12 U44c5		       20 95 10    .squareEmpty jsr	AddMove
     13 U44c8
     14 U44c8		       b9 00 10 	      lda	Board,y
     15 U44cb		       d0 05		      bne	.invalid
     16 U44cd
     17 U44cd		       98		      tya
     18 U44ce		       aa		      tax
     19 U44cf		       4c b7 10 	      jmp	.project
     20 U44d2
     21 U44d2				   .invalid
      0 U44d2					      MOVE_TOWARDS	_DOWN+_RIGHT
      1 U44d2					      SUBROUTINE
      2 U44d2
      3 U44d2		       a6 8b		      ldx	currentSquare
      4 U44d4		       bc f5 0f    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      5 U44d7		       30 16		      bmi	.invalid
      6 U44d9		       b9 00 10 	      lda	Board,y
      7 U44dc		       f0 04		      beq	.squareEmpty
      8 U44de
      9 U44de		       45 8a		      eor	currentPiece
     10 U44e0		       10 0d		      bpl	.invalid
     11 U44e2
     12 U44e2		       20 95 10    .squareEmpty jsr	AddMove
     13 U44e5
     14 U44e5		       b9 00 10 	      lda	Board,y
     15 U44e8		       d0 05		      bne	.invalid
     16 U44ea
     17 U44ea		       98		      tya
     18 U44eb		       aa		      tax
     19 U44ec		       4c d4 10 	      jmp	.project
     20 U44ef
     21 U44ef				   .invalid
      0 U44ef					      MOVE_TOWARDS	_RIGHT
      1 U44ef					      SUBROUTINE
      2 U44ef
      3 U44ef		       a6 8b		      ldx	currentSquare
      4 U44f1		       bc 01 10    .project   ldy	ValidSquare+_RIGHT,x
      5 U44f4		       30 16		      bmi	.invalid
      6 U44f6		       b9 00 10 	      lda	Board,y
      7 U44f9		       f0 04		      beq	.squareEmpty
      8 U44fb
      9 U44fb		       45 8a		      eor	currentPiece
     10 U44fd		       10 0d		      bpl	.invalid
     11 U44ff
     12 U44ff		       20 95 10    .squareEmpty jsr	AddMove
     13 U4502
     14 U4502		       b9 00 10 	      lda	Board,y
     15 U4505		       d0 05		      bne	.invalid
     16 U4507
     17 U4507		       98		      tya
     18 U4508		       aa		      tax
     19 U4509		       4c f1 10 	      jmp	.project
     20 U450c
     21 U450c				   .invalid
      0 U450c					      MOVE_TOWARDS	_UP+_RIGHT
      1 U450c					      SUBROUTINE
      2 U450c
      3 U450c		       a6 8b		      ldx	currentSquare
      4 U450e		       bc 0d 10    .project   ldy	ValidSquare+_UP+_RIGHT,x
      5 U4511		       30 16		      bmi	.invalid
      6 U4513		       b9 00 10 	      lda	Board,y
      7 U4516		       f0 04		      beq	.squareEmpty
      8 U4518
      9 U4518		       45 8a		      eor	currentPiece
     10 U451a		       10 0d		      bpl	.invalid
     11 U451c
     12 U451c		       20 95 10    .squareEmpty jsr	AddMove
     13 U451f
     14 U451f		       b9 00 10 	      lda	Board,y
     15 U4522		       d0 05		      bne	.invalid
     16 U4524
     17 U4524		       98		      tya
     18 U4525		       aa		      tax
     19 U4526		       4c 0e 11 	      jmp	.project
     20 U4529
     21 U4529				   .invalid
      0 U4529					      MOVE_TOWARDS	_UP
      1 U4529					      SUBROUTINE
      2 U4529
      3 U4529		       a6 8b		      ldx	currentSquare
      4 U452b		       bc 0c 10    .project   ldy	ValidSquare+_UP,x
      5 U452e		       30 16		      bmi	.invalid
      6 U4530		       b9 00 10 	      lda	Board,y
      7 U4533		       f0 04		      beq	.squareEmpty
      8 U4535
      9 U4535		       45 8a		      eor	currentPiece
     10 U4537		       10 0d		      bpl	.invalid
     11 U4539
     12 U4539		       20 95 10    .squareEmpty jsr	AddMove
     13 U453c
     14 U453c		       b9 00 10 	      lda	Board,y
     15 U453f		       d0 05		      bne	.invalid
     16 U4541
     17 U4541		       98		      tya
     18 U4542		       aa		      tax
     19 U4543		       4c 2b 11 	      jmp	.project
     20 U4546
     21 U4546				   .invalid
      0 U4546					      MOVE_TOWARDS	_UP+_LEFT
      1 U4546					      SUBROUTINE
      2 U4546
      3 U4546		       a6 8b		      ldx	currentSquare
      4 U4548		       bc 0b 10    .project   ldy	ValidSquare+_UP+_LEFT,x
      5 U454b		       30 16		      bmi	.invalid
      6 U454d		       b9 00 10 	      lda	Board,y
      7 U4550		       f0 04		      beq	.squareEmpty
      8 U4552
      9 U4552		       45 8a		      eor	currentPiece
     10 U4554		       10 0d		      bpl	.invalid
     11 U4556
     12 U4556		       20 95 10    .squareEmpty jsr	AddMove
     13 U4559
     14 U4559		       b9 00 10 	      lda	Board,y
     15 U455c		       d0 05		      bne	.invalid
     16 U455e
     17 U455e		       98		      tya
     18 U455f		       aa		      tax
     19 U4560		       4c 48 11 	      jmp	.project
     20 U4563
     21 U4563				   .invalid
      0 U4563					      MOVE_TOWARDS	_LEFT
      1 U4563					      SUBROUTINE
      2 U4563
      3 U4563		       a6 8b		      ldx	currentSquare
      4 U4565		       bc ff 0f    .project   ldy	ValidSquare+_LEFT,x
      5 U4568		       30 16		      bmi	.invalid
      6 U456a		       b9 00 10 	      lda	Board,y
      7 U456d		       f0 04		      beq	.squareEmpty
      8 U456f
      9 U456f		       45 8a		      eor	currentPiece
     10 U4571		       10 0d		      bpl	.invalid
     11 U4573
     12 U4573		       20 95 10    .squareEmpty jsr	AddMove
     13 U4576
     14 U4576		       b9 00 10 	      lda	Board,y
     15 U4579		       d0 05		      bne	.invalid
     16 U457b
     17 U457b		       98		      tya
     18 U457c		       aa		      tax
     19 U457d		       4c 65 11 	      jmp	.project
     20 U4580
     21 U4580				   .invalid
     73 U4580		       60		      rts
     74 U4581
     75 U4581							;---------------------------------------------------------------------------------------------------
     76 U4581							; ROOK
     77 U4581							;---------------------------------------------------------------------------------------------------
     78 U4581
      0 U4581					      DEFINE_SUBROUTINE	Handle_ROOK
      1 U4581		       00 09	   BANK_Handle_ROOK =	_CURRENT_BANK
      2 U4581					      SUBROUTINE
      3 U4581				   Handle_ROOK
     80 U4581
     81 U4581							; Pass...
     82 U4581							; x = currentSquare (square the piece is on)
     83 U4581							; currentPiece (with flags/colour attached)
     84 U4581
      0 U4581					      MOVE_TOWARDS	_DOWN
      1 U4581					      SUBROUTINE
      2 U4581
      3 U4581		       a6 8b		      ldx	currentSquare
      4 U4583		       bc f4 0f    .project   ldy	ValidSquare+_DOWN,x
      5 U4586		       30 16		      bmi	.invalid
      6 U4588		       b9 00 10 	      lda	Board,y
      7 U458b		       f0 04		      beq	.squareEmpty
      8 U458d
      9 U458d		       45 8a		      eor	currentPiece
     10 U458f		       10 0d		      bpl	.invalid
     11 U4591
     12 U4591		       20 95 10    .squareEmpty jsr	AddMove
     13 U4594
     14 U4594		       b9 00 10 	      lda	Board,y
     15 U4597		       d0 05		      bne	.invalid
     16 U4599
     17 U4599		       98		      tya
     18 U459a		       aa		      tax
     19 U459b		       4c 83 11 	      jmp	.project
     20 U459e
     21 U459e				   .invalid
      0 U459e					      MOVE_TOWARDS	_RIGHT
      1 U459e					      SUBROUTINE
      2 U459e
      3 U459e		       a6 8b		      ldx	currentSquare
      4 U45a0		       bc 01 10    .project   ldy	ValidSquare+_RIGHT,x
      5 U45a3		       30 16		      bmi	.invalid
      6 U45a5		       b9 00 10 	      lda	Board,y
      7 U45a8		       f0 04		      beq	.squareEmpty
      8 U45aa
      9 U45aa		       45 8a		      eor	currentPiece
     10 U45ac		       10 0d		      bpl	.invalid
     11 U45ae
     12 U45ae		       20 95 10    .squareEmpty jsr	AddMove
     13 U45b1
     14 U45b1		       b9 00 10 	      lda	Board,y
     15 U45b4		       d0 05		      bne	.invalid
     16 U45b6
     17 U45b6		       98		      tya
     18 U45b7		       aa		      tax
     19 U45b8		       4c a0 11 	      jmp	.project
     20 U45bb
     21 U45bb				   .invalid
      0 U45bb					      MOVE_TOWARDS	_UP
      1 U45bb					      SUBROUTINE
      2 U45bb
      3 U45bb		       a6 8b		      ldx	currentSquare
      4 U45bd		       bc 0c 10    .project   ldy	ValidSquare+_UP,x
      5 U45c0		       30 16		      bmi	.invalid
      6 U45c2		       b9 00 10 	      lda	Board,y
      7 U45c5		       f0 04		      beq	.squareEmpty
      8 U45c7
      9 U45c7		       45 8a		      eor	currentPiece
     10 U45c9		       10 0d		      bpl	.invalid
     11 U45cb
     12 U45cb		       20 95 10    .squareEmpty jsr	AddMove
     13 U45ce
     14 U45ce		       b9 00 10 	      lda	Board,y
     15 U45d1		       d0 05		      bne	.invalid
     16 U45d3
     17 U45d3		       98		      tya
     18 U45d4		       aa		      tax
     19 U45d5		       4c bd 11 	      jmp	.project
     20 U45d8
     21 U45d8				   .invalid
      0 U45d8					      MOVE_TOWARDS	_LEFT
      1 U45d8					      SUBROUTINE
      2 U45d8
      3 U45d8		       a6 8b		      ldx	currentSquare
      4 U45da		       bc ff 0f    .project   ldy	ValidSquare+_LEFT,x
      5 U45dd		       30 16		      bmi	.invalid
      6 U45df		       b9 00 10 	      lda	Board,y
      7 U45e2		       f0 04		      beq	.squareEmpty
      8 U45e4
      9 U45e4		       45 8a		      eor	currentPiece
     10 U45e6		       10 0d		      bpl	.invalid
     11 U45e8
     12 U45e8		       20 95 10    .squareEmpty jsr	AddMove
     13 U45eb
     14 U45eb		       b9 00 10 	      lda	Board,y
     15 U45ee		       d0 05		      bne	.invalid
     16 U45f0
     17 U45f0		       98		      tya
     18 U45f1		       aa		      tax
     19 U45f2		       4c da 11 	      jmp	.project
     20 U45f5
     21 U45f5				   .invalid
     89 U45f5		       60		      rts
     90 U45f6
     91 U45f6							;---------------------------------------------------------------------------------------------------
     92 U45f6							; BISHOP
     93 U45f6							;---------------------------------------------------------------------------------------------------
     94 U45f6
      0 U45f6					      DEFINE_SUBROUTINE	Handle_BISHOP
      1 U45f6		       00 09	   BANK_Handle_BISHOP =	_CURRENT_BANK
      2 U45f6					      SUBROUTINE
      3 U45f6				   Handle_BISHOP
     96 U45f6
     97 U45f6							; Pass...
     98 U45f6							; x = currentSquare (square the piece is on)
     99 U45f6							; currentPiece (with flags/colour attached)
    100 U45f6
      0 U45f6					      MOVE_TOWARDS	_DOWN+_LEFT
      1 U45f6					      SUBROUTINE
      2 U45f6
      3 U45f6		       a6 8b		      ldx	currentSquare
      4 U45f8		       bc f3 0f    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      5 U45fb		       30 16		      bmi	.invalid
      6 U45fd		       b9 00 10 	      lda	Board,y
      7 U4600		       f0 04		      beq	.squareEmpty
      8 U4602
      9 U4602		       45 8a		      eor	currentPiece
     10 U4604		       10 0d		      bpl	.invalid
     11 U4606
     12 U4606		       20 95 10    .squareEmpty jsr	AddMove
     13 U4609
     14 U4609		       b9 00 10 	      lda	Board,y
     15 U460c		       d0 05		      bne	.invalid
     16 U460e
     17 U460e		       98		      tya
     18 U460f		       aa		      tax
     19 U4610		       4c f8 11 	      jmp	.project
     20 U4613
     21 U4613				   .invalid
      0 U4613					      MOVE_TOWARDS	_DOWN+_RIGHT
      1 U4613					      SUBROUTINE
      2 U4613
      3 U4613		       a6 8b		      ldx	currentSquare
      4 U4615		       bc f5 0f    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      5 U4618		       30 16		      bmi	.invalid
      6 U461a		       b9 00 10 	      lda	Board,y
      7 U461d		       f0 04		      beq	.squareEmpty
      8 U461f
      9 U461f		       45 8a		      eor	currentPiece
     10 U4621		       10 0d		      bpl	.invalid
     11 U4623
     12 U4623		       20 95 10    .squareEmpty jsr	AddMove
     13 U4626
     14 U4626		       b9 00 10 	      lda	Board,y
     15 U4629		       d0 05		      bne	.invalid
     16 U462b
     17 U462b		       98		      tya
     18 U462c		       aa		      tax
     19 U462d		       4c 15 12 	      jmp	.project
     20 U4630
     21 U4630				   .invalid
      0 U4630					      MOVE_TOWARDS	_UP+_LEFT
      1 U4630					      SUBROUTINE
      2 U4630
      3 U4630		       a6 8b		      ldx	currentSquare
      4 U4632		       bc 0b 10    .project   ldy	ValidSquare+_UP+_LEFT,x
      5 U4635		       30 16		      bmi	.invalid
      6 U4637		       b9 00 10 	      lda	Board,y
      7 U463a		       f0 04		      beq	.squareEmpty
      8 U463c
      9 U463c		       45 8a		      eor	currentPiece
     10 U463e		       10 0d		      bpl	.invalid
     11 U4640
     12 U4640		       20 95 10    .squareEmpty jsr	AddMove
     13 U4643
     14 U4643		       b9 00 10 	      lda	Board,y
     15 U4646		       d0 05		      bne	.invalid
     16 U4648
     17 U4648		       98		      tya
     18 U4649		       aa		      tax
     19 U464a		       4c 32 12 	      jmp	.project
     20 U464d
     21 U464d				   .invalid
      0 U464d					      MOVE_TOWARDS	_UP+_RIGHT
      1 U464d					      SUBROUTINE
      2 U464d
      3 U464d		       a6 8b		      ldx	currentSquare
      4 U464f		       bc 0d 10    .project   ldy	ValidSquare+_UP+_RIGHT,x
      5 U4652		       30 16		      bmi	.invalid
      6 U4654		       b9 00 10 	      lda	Board,y
      7 U4657		       f0 04		      beq	.squareEmpty
      8 U4659
      9 U4659		       45 8a		      eor	currentPiece
     10 U465b		       10 0d		      bpl	.invalid
     11 U465d
     12 U465d		       20 95 10    .squareEmpty jsr	AddMove
     13 U4660
     14 U4660		       b9 00 10 	      lda	Board,y
     15 U4663		       d0 05		      bne	.invalid
     16 U4665
     17 U4665		       98		      tya
     18 U4666		       aa		      tax
     19 U4667		       4c 4f 12 	      jmp	.project
     20 U466a
     21 U466a				   .invalid
    105 U466a		       60		      rts
    106 U466b
    107 U466b							;---------------------------------------------------------------------------------------------------
    108 U466b							; KNIGHT
    109 U466b							;---------------------------------------------------------------------------------------------------
    110 U466b
      0 U466b					      DEFINE_SUBROUTINE	Handle_KNIGHT
      1 U466b		       00 09	   BANK_Handle_KNIGHT =	_CURRENT_BANK
      2 U466b					      SUBROUTINE
      3 U466b				   Handle_KNIGHT
    112 U466b
    113 U466b							; Pass...
    114 U466b							; x = currentSquare (square the piece is on)
    115 U466b							; currentPiece (with flags/colour attached)
    116 U466b
      0 U466b					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1 U466b					      SUBROUTINE
      2 U466b
      3 U466b		       bc e7 0f 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      4 U466e		       30 0c		      bmi	.invalid
      5 U4670		       b9 00 10 	      lda	Board,y
      6 U4673		       f0 04		      beq	.squareEmpty
      7 U4675
      8 U4675		       45 8a		      eor	currentPiece
      9 U4677		       10 03		      bpl	.invalid
     10 U4679
     11 U4679		       20 95 10    .squareEmpty jsr	AddMove
     12 U467c				   .invalid
      0 U467c					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1 U467c					      SUBROUTINE
      2 U467c
      3 U467c		       bc e9 0f 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      4 U467f		       30 0c		      bmi	.invalid
      5 U4681		       b9 00 10 	      lda	Board,y
      6 U4684		       f0 04		      beq	.squareEmpty
      7 U4686
      8 U4686		       45 8a		      eor	currentPiece
      9 U4688		       10 03		      bpl	.invalid
     10 U468a
     11 U468a		       20 95 10    .squareEmpty jsr	AddMove
     12 U468d				   .invalid
      0 U468d					      MOVE_TO	_UP+_UP+_LEFT
      1 U468d					      SUBROUTINE
      2 U468d
      3 U468d		       bc 17 10 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      4 U4690		       30 0c		      bmi	.invalid
      5 U4692		       b9 00 10 	      lda	Board,y
      6 U4695		       f0 04		      beq	.squareEmpty
      7 U4697
      8 U4697		       45 8a		      eor	currentPiece
      9 U4699		       10 03		      bpl	.invalid
     10 U469b
     11 U469b		       20 95 10    .squareEmpty jsr	AddMove
     12 U469e				   .invalid
      0 U469e					      MOVE_TO	_UP+_UP+_RIGHT
      1 U469e					      SUBROUTINE
      2 U469e
      3 U469e		       bc 19 10 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      4 U46a1		       30 0c		      bmi	.invalid
      5 U46a3		       b9 00 10 	      lda	Board,y
      6 U46a6		       f0 04		      beq	.squareEmpty
      7 U46a8
      8 U46a8		       45 8a		      eor	currentPiece
      9 U46aa		       10 03		      bpl	.invalid
     10 U46ac
     11 U46ac		       20 95 10    .squareEmpty jsr	AddMove
     12 U46af				   .invalid
    121 U46af
      0 U46af					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1 U46af					      SUBROUTINE
      2 U46af
      3 U46af		       bc f2 0f 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      4 U46b2		       30 0c		      bmi	.invalid
      5 U46b4		       b9 00 10 	      lda	Board,y
      6 U46b7		       f0 04		      beq	.squareEmpty
      7 U46b9
      8 U46b9		       45 8a		      eor	currentPiece
      9 U46bb		       10 03		      bpl	.invalid
     10 U46bd
     11 U46bd		       20 95 10    .squareEmpty jsr	AddMove
     12 U46c0				   .invalid
      0 U46c0					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1 U46c0					      SUBROUTINE
      2 U46c0
      3 U46c0		       bc f6 0f 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      4 U46c3		       30 0c		      bmi	.invalid
      5 U46c5		       b9 00 10 	      lda	Board,y
      6 U46c8		       f0 04		      beq	.squareEmpty
      7 U46ca
      8 U46ca		       45 8a		      eor	currentPiece
      9 U46cc		       10 03		      bpl	.invalid
     10 U46ce
     11 U46ce		       20 95 10    .squareEmpty jsr	AddMove
     12 U46d1				   .invalid
      0 U46d1					      MOVE_TO	_UP+_LEFT+_LEFT
      1 U46d1					      SUBROUTINE
      2 U46d1
      3 U46d1		       bc 0a 10 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      4 U46d4		       30 0c		      bmi	.invalid
      5 U46d6		       b9 00 10 	      lda	Board,y
      6 U46d9		       f0 04		      beq	.squareEmpty
      7 U46db
      8 U46db		       45 8a		      eor	currentPiece
      9 U46dd		       10 03		      bpl	.invalid
     10 U46df
     11 U46df		       20 95 10    .squareEmpty jsr	AddMove
     12 U46e2				   .invalid
      0 U46e2					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1 U46e2					      SUBROUTINE
      2 U46e2
      3 U46e2		       bc 0e 10 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      4 U46e5		       30 0c		      bmi	.invalid
      5 U46e7		       b9 00 10 	      lda	Board,y
      6 U46ea		       f0 04		      beq	.squareEmpty
      7 U46ec
      8 U46ec		       45 8a		      eor	currentPiece
      9 U46ee		       10 03		      bpl	.invalid
     10 U46f0
     11 U46f0		       20 95 10    .squareEmpty jsr	AddMove
     12 U46f3				   .invalid
    126 U46f3
    127 U46f3		       60		      rts
    128 U46f4
    129 U46f4
      0 U46f4					      CHECK_HALF_BANK_SIZE	"HANDLER_MOVE -- 1K"
      1 U46f4
      2 U46f4
      3 U46f4		       02 f4	   .TEMP      =	* - BANK_START
 HANDLER_MOVE -- 1K (1K) SIZE =  $2f4 , FREE= $10c
      4 U46f4					      ECHO	"HANDLER_MOVE -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5 U46f4				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6 U46f4				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7 U46f4				  -	      ERR
      8 U46f4					      endif
------- FILE ./chess.asm
    450 U46f4
    451 U46f4							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0 U46f4					      include	"BANK_FIXED.asm"
      1 U46f4							; Chess
      2 U46f4							; Atari 2600 Chess display system
      3 U46f4							; Copyright (c) 2019-2020 Andrew Davie
      4 U46f4							; andrew@taswegian.com
      5 U46f4
      6 U46f4							;------------------------------------------------------------------------------
      7 U46f4							;###############################  FIXED BANK  #################################
      8 U46f4							;------------------------------------------------------------------------------
      9 U46f4
     10 U46f4				   ORIGIN     SET	FIXED_BANK
     11 U46f4
      0 U46f4					      NEWBANK	THE_FIXED_BANK
      1  7d87 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00
     16  7804
     17  7804							;---------------------------------------------------------------------------------------------------
     18  7804
      0  7804					      DEFINE_SUBROUTINE	ClearChessBitmap_PART0
      1  7804		       00 0f	   BANK_ClearChessBitmap_PART0 =	_CURRENT_BANK
      2  7804					      SUBROUTINE
      3  7804				   ClearChessBitmap_PART0
     20  7804
     21  7804		       60		      rts
     22  7805
      0  7805					      DEFINE_SUBROUTINE	ClearChessBitmap_PART1
      1  7805		       00 0f	   BANK_ClearChessBitmap_PART1 =	_CURRENT_BANK
      2  7805					      SUBROUTINE
      3  7805				   ClearChessBitmap_PART1
     24  7805		       60		      rts
     25  7806
     26  7806							;---------------------------------------------------------------------------------------------------
     27  7806
      0  7806					      DEFINE_SUBROUTINE	CopySinglePiece
      1  7806		       00 0f	   BANK_CopySinglePiece =	_CURRENT_BANK
      2  7806					      SUBROUTINE
      3  7806				   CopySinglePiece
     29  7806
     30  7806		       a9 08		      lda	#BANK_CHESSBOARD
     31  7808		       85 3e		      sta	SET_BANK_RAM
     32  780a
     33  780a		       a5 80		      lda	drawPieceNumber
     34  780c		       4a		      lsr
     35  780d		       4a		      lsr
     36  780e		       4a		      lsr
     37  780f		       18		      clc
     38  7810		       65 80		      adc	drawPieceNumber
     39  7812		       29 01		      and	#1
     40  7814							;eor #1
     41  7814		       f0 02		      beq	.white
     42  7816		       a9 1c		      lda	#28
     43  7818		       85 a1	   .white     sta	__pieceColour	; actually SQUARE black/white
     44  781a
     45  781a							; PieceColour = 0 for white square, 28 for black square
     46  781a
     47  781a		       a4 80		      ldy	drawPieceNumber
     48  781c
     49  781c
     50  781c		       98		      tya
     51  781d		       29 03		      and	#3	; shift position in PF
     52  781f
     53  781f		       a2 08		      ldx	#BANK_CHESSBOARD
     54  7821		       86 3e		      stx	SET_BANK_RAM
     55  7823
     56  7823		       be 00 10 	      ldx	Chessboard,y
     57  7826		       18		      clc
     58  7827		       7d 7b f9 	      adc	PieceToShape,x
     59  782a		       18		      clc
     60  782b		       65 a1		      adc	__pieceColour
     61  782d		       a8		      tay
     62  782e		       20 cb f9 	      jsr	CopyPieceToRAMBuffer
     63  7831
     64  7831		       a5 80		      lda	drawPieceNumber
     65  7833		       4a		      lsr
     66  7834		       4a		      lsr
     67  7835		       4a		      lsr
     68  7836							;ora doubleBufferBase
     69  7836		       aa		      tax		; row
     70  7837
     71  7837		       a5 80		      lda	drawPieceNumber
     72  7839		       29 04		      and	#4
     73  783b		       c9 04		      cmp	#4	; cc = left side, cs = right side
     74  783d
     75  783d		       86 3e		      stx	SET_BANK_RAM
     76  783f		       4c 9b f0 	      jmp	CopyPieceToRowBitmap
     77  7842
     78  7842							;---------------------------------------------------------------------------------------------------
     79  7842
      0  7842					      DEFINE_SUBROUTINE	MoveViaList
      1  7842		       00 0f	   BANK_MoveViaList =	_CURRENT_BANK
      2  7842					      SUBROUTINE
      3  7842				   MoveViaList
     81  7842
     82  7842		       a6 94		      ldx	movePointer
     83  7844		       bd 69 f8 	      lda	Move,x
     84  7847		       30 1f		      bmi	halted
     85  7849
     86  7849		       bd 6a f8 	      lda	Move+1,x
     87  784c		       85 8d		      sta	fromSquare
     88  784e		       a8		      tay
     89  784f		       a9 08		      lda	#BANK_CHESSBOARD
     90  7851		       85 3e		      sta	SET_BANK_RAM
     91  7853		       bd 69 f8 	      lda	Move,x	;Chessboard,y
     92  7856		       85 8e		      sta	fromPiece
     93  7858		       bd 6b f8 	      lda	Move+2,x
     94  785b		       85 8f		      sta	toSquare
     95  785d
     96  785d		       bd 6c f8 	      lda	Move+3,x
     97  7860							;    beq zz
     98  7860							;    NEXT_RANDOM
     99  7860							;    and #31
    100  7860							;    adc Move+2,x
    101  7860							;    asl
    102  7860		       85 84	   zz	      sta	drawDelay
    103  7862		       e8		      inx
    104  7863		       e8		      inx
    105  7864		       e8		      inx
    106  7865		       e8		      inx
    107  7866		       86 94		      stx	movePointer
    108  7868
    109  7868
    110  7868		       60	   halted     rts
    111  7869
    112  7869		       00 32	   DELX       =	50
    113  7869
    114  7869				   Move
    115  7869
    116  7869		       04 14 3f 00	      .byte.b	WHITE|ROOK,20,63,0	; e2e4
    117  786d		       02 14 3e 00	      .byte.b	WHITE|KNIGHT,20,62,0	; e2e4
    118  7871		       03 14 3d 00	      .byte.b	WHITE|BISHOP,20,61,0	; e2e4
    119  7875		       06 14 3c 00	      .byte.b	WHITE|KING,20,60,0	; e2e4
    120  7879		       05 14 3b 00	      .byte.b	WHITE|QUEEN,20,59,0	; e2e4
    121  787d		       03 14 3a 00	      .byte.b	WHITE|BISHOP,20,58,0	; e2e4
    122  7881		       02 14 39 00	      .byte.b	WHITE|KNIGHT,20,57,0	; e2e4
    123  7885		       04 14 38 00	      .byte.b	WHITE|ROOK,20,56,0	; e2e4
    124  7889
    125  7889		       01 14 37 00	      .byte.b	WHITE|PAWN,20,55,0	; e2e4
    126  788d		       01 14 36 00	      .byte.b	WHITE|PAWN,20,54,0	; e2e4
    127  7891		       01 14 35 00	      .byte.b	WHITE|PAWN,20,53,0	; e2e4
    128  7895		       01 14 34 00	      .byte.b	WHITE|PAWN,20,52,0	; e2e4
    129  7899		       01 14 33 00	      .byte.b	WHITE|PAWN,20,51,0	; e2e4
    130  789d		       01 14 32 00	      .byte.b	WHITE|PAWN,20,50,0	; e2e4
    131  78a1		       01 14 31 00	      .byte.b	WHITE|PAWN,20,49,0	; e2e4
    132  78a5		       01 14 30 00	      .byte.b	WHITE|PAWN,20,48,0	; e2e4
    133  78a9
    134  78a9		       0c 2b 00 00	      .byte.b	BLACK2|ROOK,43,0,0	; e2e4
    135  78ad		       0a 2b 01 00	      .byte.b	BLACK2|KNIGHT,43,1,0	; e2e4
    136  78b1		       0b 2b 02 00	      .byte.b	BLACK2|BISHOP,43,2,0	; e2e4
    137  78b5		       0d 2b 03 00	      .byte.b	BLACK2|QUEEN,43,3,0	; e2e4
    138  78b9		       0e 2b 04 00	      .byte.b	BLACK2|KING,43,4,0	; e2e4
    139  78bd		       0b 2b 05 00	      .byte.b	BLACK2|BISHOP,43,5,0	; e2e4
    140  78c1		       0a 2b 06 00	      .byte.b	BLACK2|KNIGHT,43,6,0	; e2e4
    141  78c5		       0c 2b 07 00	      .byte.b	BLACK2|ROOK,43,7,0	; e2e4
    142  78c9
    143  78c9		       09 2b 08 00	      .byte.b	BLACK2|PAWN,43,8,0	; e2e4
    144  78cd		       09 2b 09 00	      .byte.b	BLACK2|PAWN,43,9,0	; e2e4
    145  78d1		       09 2b 0a 00	      .byte.b	BLACK2|PAWN,43,10,0	; e2e4
    146  78d5		       09 2b 0b 00	      .byte.b	BLACK2|PAWN,43,11,0	; e2e4
    147  78d9		       09 2b 0c 00	      .byte.b	BLACK2|PAWN,43,12,0	; e2e4
    148  78dd		       09 2b 0d 00	      .byte.b	BLACK2|PAWN,43,13,0	; e2e4
    149  78e1		       09 2b 0e 00	      .byte.b	BLACK2|PAWN,43,14,0	; e2e4
    150  78e5		       09 2b 0f 00	      .byte.b	BLACK2|PAWN,43,15,0	; e2e4
    151  78e9
    152  78e9
    153  78e9
    154  78e9		       01 34 24 32	      .byte.b	WHITE|PAWN,52,52-16,DELX	; e2e4
    155  78ed		       09 0b 1b 32	      .byte.b	BLACK2|PAWN,11,11+16,DELX	; d7d5
    156  78f1		       02 3e 2d 32	      .byte.b	WHITE|KNIGHT,62,62-17,DELX	; g1f3
    157  78f5		       09 1b 24 32	      .byte.b	BLACK2|PAWN,27,27+9,DELX	;d5e4
    158  78f9		       02 2d 1e 32	      .byte.b	WHITE|KNIGHT,45,45-15,DELX	;f3-g5
    159  78fd		       09 0d 1d 32	      .byte.b	BLACK2|PAWN,13,13+16,DELX	;f7f5
    160  7901		       03 3d 22 32	      .byte.b	WHITE|BISHOP,61,61-3*8-3,DELX	;f1c4
    161  7905		       0a 01 12 32	      .byte.b	BLACK2|KNIGHT,1,1+17,DELX	;b8c6
    162  7909		       06 3c 3e 32	      .byte.b	WHITE|KING,60,62,DELX	;0-0
    163  790d		       04 3f 3d 00	      .byte.b	WHITE|ROOK,63,61,0
    164  7911		       0a 06 15 32	      .byte.b	BLACK2|KNIGHT,6,6+15,DELX	;g8f6
    165  7915		       02 1e 14 32	      .byte.b	WHITE|KNIGHT,30,20,DELX	;g5e6
    166  7919		       0d 03 13 32	      .byte.b	BLACK2|QUEEN,3,3+16,DELX	;D8d6
    167  791d		       02 14 05 32	      .byte.b	WHITE|KNIGHT,20,20-15,DELX	;e6f8
    168  7921		       0a 15 26 32	      .byte.b	BLACK2|KNIGHT,21,21+17,DELX	;f6g4
    169  7925		       02 39 2a 32	      .byte.b	WHITE|KNIGHT,57,42,DELX	;B1C3
    170  7929		       0d 13 37 32	      .byte.b	BLACK2|QUEEN,19,55,DELX	;qxp mate
    171  792d
    172  792d
    173  792d							;	      .byte 7,5,DELX
    174  792d							;	      .byte 51,51-16,DELX
    175  792d							;	      .byte 36,43,DELX
    176  792d							;	      .byte 35,35,0
    177  792d							;	      .byte 59,59-16,DELX
    178  792d							;	      .byte 19,19+3*8,DELX
    179  792d							;	      .byte 50,43,DELX
    180  792d							;	      .byte 18,18+17,DELX
    181  792d							;	      .byte 57,57-17,DELX
    182  792d							;	      .byte 35,35+17,DELX
    183  792d							;	      .byte 62,63,DELX
    184  792d							;	      .byte 52,58,DELX
    185  792d							;	      .byte 56,58,DELX
    186  792d							;	      .byte 21,21+17,DELX
    187  792d		       06 3e 3e 32	      .byte.b	WHITE|KING,62,62,DELX
    188  7931		       ff		      .byte.b	-1
    189  7932
    190  7932
    191  7932
      0  7932					      DEFINE_SUBROUTINE	RandomPieceMove
      1  7932		       00 0f	   BANK_RandomPieceMove =	_CURRENT_BANK
      2  7932					      SUBROUTINE
      3  7932				   RandomPieceMove
    193  7932
    194  7932		       4c 42 f8 	      jmp	MoveViaList
    195  7935
    196  7935
    197  7935
    198  7935		       a9 08		      lda	#BANK_CHESSBOARD
    199  7937		       85 3e		      sta	SET_BANK_RAM
    200  7939
      0  7939					      NEXT_RANDOM
      1  7939		       a5 81		      lda	rnd
      2  793b		       4a		      lsr
      3  793c		       90 02		      bcc	.skipEOR
      4  793e		       49 fe		      eor	#RND_EOR_VAL
      5  7940		       85 81	   .skipEOR   sta	rnd
    202  7942		       aa		      tax
    203  7943		       e8	   .nextX     inx
    204  7944		       8a		      txa
    205  7945		       29 3f		      and	#63
    206  7947		       aa		      tax
    207  7948
    208  7948		       bd 00 10 	      lda	Chessboard,x
    209  794b							;cmp #BLANK
    210  794b		       f0 f6		      beq	.nextX
    211  794d
    212  794d		       86 8d		      stx	fromSquare
    213  794f
      0  794f					      NEXT_RANDOM
      1  794f		       a5 81		      lda	rnd
      2  7951		       4a		      lsr
      3  7952		       90 02		      bcc	.skipEOR
      4  7954		       49 fe		      eor	#RND_EOR_VAL
      5  7956		       85 81	   .skipEOR   sta	rnd
    215  7958		       a8		      tay
    216  7959		       c8	   .nextY     iny
    217  795a		       98		      tya
    218  795b		       29 3f		      and	#63
    219  795d		       a8		      tay
    220  795e
    221  795e
    222  795e							;lda #BLANK
    223  795e							;sta fromPiece
    224  795e
    225  795e		       b9 00 10 	      lda	Chessboard,y
    226  7961							;cmp #BLANK
    227  7961		       d0 f6		      bne	.nextY
    228  7963
    229  7963		       84 8f		      sty	toSquare
    230  7965
    231  7965		       bd 00 10 	      lda	Chessboard,x
    232  7968		       85 8e		      sta	fromPiece
    233  796a
    234  796a							;		  sta Chessboard+RAM_WRITE,y
    235  796a							;		  lda #BLANK
    236  796a							;		  sta Chessboard+RAM_WRITE,x
    237  796a
    238  796a		       60		      rts
    239  796b
    240  796b							;---------------------------------------------------------------------------------------------------
    241  796b
      0  796b					      DEFINE_SUBROUTINE	InitialiseChessboard
      1  796b		       00 0f	   BANK_InitialiseChessboard =	_CURRENT_BANK
      2  796b					      SUBROUTINE
      3  796b				   InitialiseChessboard
    243  796b
    244  796b		       a9 08		      lda	#BANK_CHESSBOARD
    245  796d		       85 3e		      sta	SET_BANK_RAM
    246  796f
    247  796f		       a2 3f		      ldx	#63
    248  7971		       bd 8b f9    .setupBoard lda	BoardPiece,x
    249  7974		       9d 00 14 	      sta	Chessboard+RAM_WRITE,x
    250  7977		       ca		      dex
    251  7978		       10 f7		      bpl	.setupBoard
    252  797a
    253  797a		       60		      rts
    254  797b
    255  797b
    256  797b		       00 08	   BLACK2     =	8
    257  797b
    258  797b				   PieceToShape
    259  797b
    260  797b		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    261  797c		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    262  797d		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    263  797e		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    264  797f		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    265  7980		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    266  7981		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    267  7982		       00		      .byte.b	0
    268  7983
    269  7983		       38		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    270  7984		       3c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    271  7985		       40		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    272  7986		       44		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    273  7987		       48		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    274  7988		       4c		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    275  7989		       50		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    276  798a		       00		      .byte.b	0
    277  798b
    278  798b
    279  798b
    280  798b				   BoardPiece
    281  798b
    282  798b							;WHITE_PAWN = INDEX_WHITE_PAWN_on_BLACK_SQUARE_0
    283  798b							;WHITE_ROOK = INDEX_WHITE_ROOK_on_BLACK_SQUARE_0
    284  798b							;WHITE_KNIGHT = INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0
    285  798b							;WHITE_BISHOP = INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0
    286  798b							;WHITE_QUEEN = INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0
    287  798b							;WHITE_KING = INDEX_WHITE_KING_on_BLACK_SQUARE_0
    288  798b							;BLACK_PAWN = INDEX_BLACK_PAWN_on_BLACK_SQUARE_0
    289  798b							;BLACK_ROOK = INDEX_BLACK_ROOK_on_BLACK_SQUARE_0
    290  798b							;BLACK_KNIGHT = INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0
    291  798b							;BLACK_BISHOP = INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0
    292  798b							;BLACK_QUEEN = INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0
    293  798b							;BLACK_KING = INDEX_BLACK_KING_on_BLACK_SQUARE_0
    294  798b
    295  798b							;.byte BLACK|ROOK ;0
    296  798b							;.byte BLACK|KNIGHT ;1
    297  798b							;.byte BLACK|BISHOP ;2
    298  798b							;.byte BLACK|QUEEN ;3
    299  798b							;.byte BLACK|KING ;4
    300  798b							;.byte BLACK|BISHOP ;5
    301  798b							;.byte BLACK|KNIGHT ;6
    302  798b							;.byte BLACK|ROOK ;7
    303  798b
    304  798b							;.byte BLACK|PAWN
    305  798b							;.byte BLACK|PAWN
    306  798b							;.byte BLACK|PAWN
    307  798b							;.byte BLACK|PAWN
    308  798b							;.byte BLACK|PAWN
    309  798b							;.byte BLACK|PAWN
    310  798b							;.byte BLACK|PAWN
    311  798b							;.byte BLACK|PAWN
    312  798b
    313  798b		       00		      .byte.b	BLANK
    314  798c		       00		      .byte.b	BLANK
    315  798d		       00		      .byte.b	BLANK
    316  798e		       00		      .byte.b	BLANK
    317  798f		       00		      .byte.b	BLANK
    318  7990		       00		      .byte.b	BLANK
    319  7991		       00		      .byte.b	BLANK
    320  7992		       00		      .byte.b	BLANK
    321  7993
    322  7993		       00		      .byte.b	BLANK
    323  7994		       00		      .byte.b	BLANK
    324  7995		       00		      .byte.b	BLANK
    325  7996		       00		      .byte.b	BLANK
    326  7997		       00		      .byte.b	BLANK
    327  7998		       00		      .byte.b	BLANK
    328  7999		       00		      .byte.b	BLANK
    329  799a		       00		      .byte.b	BLANK
    330  799b
    331  799b		       00		      .byte.b	BLANK
    332  799c		       00		      .byte.b	BLANK
    333  799d		       00		      .byte.b	BLANK
    334  799e		       00		      .byte.b	BLANK
    335  799f		       00		      .byte.b	BLANK
    336  79a0		       00		      .byte.b	BLANK
    337  79a1		       00		      .byte.b	BLANK
    338  79a2		       00		      .byte.b	BLANK
    339  79a3
    340  79a3		       00		      .byte.b	BLANK
    341  79a4		       00		      .byte.b	BLANK
    342  79a5		       00		      .byte.b	BLANK
    343  79a6		       00		      .byte.b	BLANK
    344  79a7		       00		      .byte.b	BLANK
    345  79a8		       00		      .byte.b	BLANK
    346  79a9		       00		      .byte.b	BLANK
    347  79aa		       00		      .byte.b	BLANK
    348  79ab
    349  79ab		       00		      .byte.b	BLANK
    350  79ac		       00		      .byte.b	BLANK
    351  79ad		       00		      .byte.b	BLANK
    352  79ae		       00		      .byte.b	BLANK
    353  79af		       00		      .byte.b	BLANK
    354  79b0		       00		      .byte.b	BLANK
    355  79b1		       00		      .byte.b	BLANK
    356  79b2		       00		      .byte.b	BLANK
    357  79b3
    358  79b3		       00		      .byte.b	BLANK
    359  79b4		       00		      .byte.b	BLANK
    360  79b5		       00		      .byte.b	BLANK
    361  79b6		       00		      .byte.b	BLANK
    362  79b7		       00		      .byte.b	BLANK
    363  79b8		       00		      .byte.b	BLANK
    364  79b9		       00		      .byte.b	BLANK
    365  79ba		       00		      .byte.b	BLANK
    366  79bb
    367  79bb		       00		      .byte.b	BLANK
    368  79bc		       00		      .byte.b	BLANK
    369  79bd		       00		      .byte.b	BLANK
    370  79be		       00		      .byte.b	BLANK
    371  79bf		       00		      .byte.b	BLANK
    372  79c0		       00		      .byte.b	BLANK
    373  79c1		       00		      .byte.b	BLANK
    374  79c2		       00		      .byte.b	BLANK
    375  79c3
    376  79c3		       00		      .byte.b	BLANK
    377  79c4		       00		      .byte.b	BLANK
    378  79c5		       00		      .byte.b	BLANK
    379  79c6		       00		      .byte.b	BLANK
    380  79c7		       00		      .byte.b	BLANK
    381  79c8		       00		      .byte.b	BLANK
    382  79c9		       00		      .byte.b	BLANK
    383  79ca		       00		      .byte.b	BLANK
    384  79cb
    385  79cb							;.byte WHITE|PAWN
    386  79cb							;.byte WHITE|PAWN
    387  79cb							;.byte WHITE|PAWN
    388  79cb							;.byte WHITE|PAWN
    389  79cb							;.byte WHITE|PAWN
    390  79cb							;.byte WHITE|PAWN
    391  79cb							;.byte WHITE|PAWN
    392  79cb							;.byte WHITE|PAWN
    393  79cb
    394  79cb							;.byte WHITE|ROOK
    395  79cb							;.byte WHITE|KNIGHT
    396  79cb							;.byte WHITE|BISHOP
    397  79cb							;.byte WHITE|QUEEN
    398  79cb							;.byte WHITE|KING
    399  79cb							;.byte WHITE|BISHOP
    400  79cb							;.byte WHITE|KNIGHT
    401  79cb							;.byte WHITE|ROOK
    402  79cb
    403  79cb
    404  79cb							;---------------------------------------------------------------------------------------------------
    405  79cb
      0  79cb					      DEFINE_SUBROUTINE	CopyPieceToRAMBuffer
      1  79cb		       00 0f	   BANK_CopyPieceToRAMBuffer =	_CURRENT_BANK
      2  79cb					      SUBROUTINE
      3  79cb				   CopyPieceToRAMBuffer
    407  79cb
    408  79cb							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    409  79cb							; y = piece index
    410  79cb
    411  79cb		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
    412  79cd		       85 3f		      sta	SET_BANK
    413  79cf
    414  79cf		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
    415  79d2		       85 e9		      sta	__ptr
    416  79d4		       b9 70 f0 	      lda	PIECE_VECTOR_HI,y
    417  79d7		       85 ea		      sta	__ptr+1
    418  79d9		       b9 e0 f0 	      lda	PIECE_VECTOR_BANK,y
    419  79dc		       85 3f		      sta	SET_BANK
    420  79de
    421  79de		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
    422  79e0					      REPEAT	PIECE_SHAPE_SIZE
    423  79e0		       b1 e9		      lda	(__ptr),y
    424  79e2		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  79e5		       88		      dey
    422  79e5					      REPEND
    423  79e6		       b1 e9		      lda	(__ptr),y
    424  79e8		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  79eb		       88		      dey
    422  79eb					      REPEND
    423  79ec		       b1 e9		      lda	(__ptr),y
    424  79ee		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  79f1		       88		      dey
    422  79f1					      REPEND
    423  79f2		       b1 e9		      lda	(__ptr),y
    424  79f4		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  79f7		       88		      dey
    422  79f7					      REPEND
    423  79f8		       b1 e9		      lda	(__ptr),y
    424  79fa		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  79fd		       88		      dey
    422  79fd					      REPEND
    423  79fe		       b1 e9		      lda	(__ptr),y
    424  7a00		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a03		       88		      dey
    422  7a03					      REPEND
    423  7a04		       b1 e9		      lda	(__ptr),y
    424  7a06		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a09		       88		      dey
    422  7a09					      REPEND
    423  7a0a		       b1 e9		      lda	(__ptr),y
    424  7a0c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a0f		       88		      dey
    422  7a0f					      REPEND
    423  7a10		       b1 e9		      lda	(__ptr),y
    424  7a12		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a15		       88		      dey
    422  7a15					      REPEND
    423  7a16		       b1 e9		      lda	(__ptr),y
    424  7a18		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a1b		       88		      dey
    422  7a1b					      REPEND
    423  7a1c		       b1 e9		      lda	(__ptr),y
    424  7a1e		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a21		       88		      dey
    422  7a21					      REPEND
    423  7a22		       b1 e9		      lda	(__ptr),y
    424  7a24		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a27		       88		      dey
    422  7a27					      REPEND
    423  7a28		       b1 e9		      lda	(__ptr),y
    424  7a2a		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a2d		       88		      dey
    422  7a2d					      REPEND
    423  7a2e		       b1 e9		      lda	(__ptr),y
    424  7a30		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a33		       88		      dey
    422  7a33					      REPEND
    423  7a34		       b1 e9		      lda	(__ptr),y
    424  7a36		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a39		       88		      dey
    422  7a39					      REPEND
    423  7a3a		       b1 e9		      lda	(__ptr),y
    424  7a3c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a3f		       88		      dey
    422  7a3f					      REPEND
    423  7a40		       b1 e9		      lda	(__ptr),y
    424  7a42		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a45		       88		      dey
    422  7a45					      REPEND
    423  7a46		       b1 e9		      lda	(__ptr),y
    424  7a48		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a4b		       88		      dey
    422  7a4b					      REPEND
    423  7a4c		       b1 e9		      lda	(__ptr),y
    424  7a4e		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a51		       88		      dey
    422  7a51					      REPEND
    423  7a52		       b1 e9		      lda	(__ptr),y
    424  7a54		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a57		       88		      dey
    422  7a57					      REPEND
    423  7a58		       b1 e9		      lda	(__ptr),y
    424  7a5a		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a5d		       88		      dey
    422  7a5d					      REPEND
    423  7a5e		       b1 e9		      lda	(__ptr),y
    424  7a60		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a63		       88		      dey
    422  7a63					      REPEND
    423  7a64		       b1 e9		      lda	(__ptr),y
    424  7a66		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a69		       88		      dey
    422  7a69					      REPEND
    423  7a6a		       b1 e9		      lda	(__ptr),y
    424  7a6c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a6f		       88		      dey
    422  7a6f					      REPEND
    423  7a70		       b1 e9		      lda	(__ptr),y
    424  7a72		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a75		       88		      dey
    422  7a75					      REPEND
    423  7a76		       b1 e9		      lda	(__ptr),y
    424  7a78		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a7b		       88		      dey
    422  7a7b					      REPEND
    423  7a7c		       b1 e9		      lda	(__ptr),y
    424  7a7e		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a81		       88		      dey
    422  7a81					      REPEND
    423  7a82		       b1 e9		      lda	(__ptr),y
    424  7a84		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a87		       88		      dey
    422  7a87					      REPEND
    423  7a88		       b1 e9		      lda	(__ptr),y
    424  7a8a		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a8d		       88		      dey
    422  7a8d					      REPEND
    423  7a8e		       b1 e9		      lda	(__ptr),y
    424  7a90		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a93		       88		      dey
    422  7a93					      REPEND
    423  7a94		       b1 e9		      lda	(__ptr),y
    424  7a96		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a99		       88		      dey
    422  7a99					      REPEND
    423  7a9a		       b1 e9		      lda	(__ptr),y
    424  7a9c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7a9f		       88		      dey
    422  7a9f					      REPEND
    423  7aa0		       b1 e9		      lda	(__ptr),y
    424  7aa2		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7aa5		       88		      dey
    422  7aa5					      REPEND
    423  7aa6		       b1 e9		      lda	(__ptr),y
    424  7aa8		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7aab		       88		      dey
    422  7aab					      REPEND
    423  7aac		       b1 e9		      lda	(__ptr),y
    424  7aae		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ab1		       88		      dey
    422  7ab1					      REPEND
    423  7ab2		       b1 e9		      lda	(__ptr),y
    424  7ab4		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ab7		       88		      dey
    422  7ab7					      REPEND
    423  7ab8		       b1 e9		      lda	(__ptr),y
    424  7aba		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7abd		       88		      dey
    422  7abd					      REPEND
    423  7abe		       b1 e9		      lda	(__ptr),y
    424  7ac0		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ac3		       88		      dey
    422  7ac3					      REPEND
    423  7ac4		       b1 e9		      lda	(__ptr),y
    424  7ac6		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ac9		       88		      dey
    422  7ac9					      REPEND
    423  7aca		       b1 e9		      lda	(__ptr),y
    424  7acc		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7acf		       88		      dey
    422  7acf					      REPEND
    423  7ad0		       b1 e9		      lda	(__ptr),y
    424  7ad2		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ad5		       88		      dey
    422  7ad5					      REPEND
    423  7ad6		       b1 e9		      lda	(__ptr),y
    424  7ad8		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7adb		       88		      dey
    422  7adb					      REPEND
    423  7adc		       b1 e9		      lda	(__ptr),y
    424  7ade		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ae1		       88		      dey
    422  7ae1					      REPEND
    423  7ae2		       b1 e9		      lda	(__ptr),y
    424  7ae4		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7ae7		       88		      dey
    422  7ae7					      REPEND
    423  7ae8		       b1 e9		      lda	(__ptr),y
    424  7aea		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7aed		       88		      dey
    422  7aed					      REPEND
    423  7aee		       b1 e9		      lda	(__ptr),y
    424  7af0		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7af3		       88		      dey
    422  7af3					      REPEND
    423  7af4		       b1 e9		      lda	(__ptr),y
    424  7af6		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7af9		       88		      dey
    422  7af9					      REPEND
    423  7afa		       b1 e9		      lda	(__ptr),y
    424  7afc		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7aff		       88		      dey
    422  7aff					      REPEND
    423  7b00		       b1 e9		      lda	(__ptr),y
    424  7b02		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b05		       88		      dey
    422  7b05					      REPEND
    423  7b06		       b1 e9		      lda	(__ptr),y
    424  7b08		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b0b		       88		      dey
    422  7b0b					      REPEND
    423  7b0c		       b1 e9		      lda	(__ptr),y
    424  7b0e		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b11		       88		      dey
    422  7b11					      REPEND
    423  7b12		       b1 e9		      lda	(__ptr),y
    424  7b14		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b17		       88		      dey
    422  7b17					      REPEND
    423  7b18		       b1 e9		      lda	(__ptr),y
    424  7b1a		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b1d		       88		      dey
    422  7b1d					      REPEND
    423  7b1e		       b1 e9		      lda	(__ptr),y
    424  7b20		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b23		       88		      dey
    422  7b23					      REPEND
    423  7b24		       b1 e9		      lda	(__ptr),y
    424  7b26		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b29		       88		      dey
    422  7b29					      REPEND
    423  7b2a		       b1 e9		      lda	(__ptr),y
    424  7b2c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b2f		       88		      dey
    422  7b2f					      REPEND
    423  7b30		       b1 e9		      lda	(__ptr),y
    424  7b32		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b35		       88		      dey
    422  7b35					      REPEND
    423  7b36		       b1 e9		      lda	(__ptr),y
    424  7b38		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b3b		       88		      dey
    422  7b3b					      REPEND
    423  7b3c		       b1 e9		      lda	(__ptr),y
    424  7b3e		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b41		       88		      dey
    422  7b41					      REPEND
    423  7b42		       b1 e9		      lda	(__ptr),y
    424  7b44		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b47		       88		      dey
    422  7b47					      REPEND
    423  7b48		       b1 e9		      lda	(__ptr),y
    424  7b4a		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b4d		       88		      dey
    422  7b4d					      REPEND
    423  7b4e		       b1 e9		      lda	(__ptr),y
    424  7b50		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b53		       88		      dey
    422  7b53					      REPEND
    423  7b54		       b1 e9		      lda	(__ptr),y
    424  7b56		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b59		       88		      dey
    422  7b59					      REPEND
    423  7b5a		       b1 e9		      lda	(__ptr),y
    424  7b5c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b5f		       88		      dey
    422  7b5f					      REPEND
    423  7b60		       b1 e9		      lda	(__ptr),y
    424  7b62		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b65		       88		      dey
    422  7b65					      REPEND
    423  7b66		       b1 e9		      lda	(__ptr),y
    424  7b68		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b6b		       88		      dey
    422  7b6b					      REPEND
    423  7b6c		       b1 e9		      lda	(__ptr),y
    424  7b6e		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b71		       88		      dey
    422  7b71					      REPEND
    423  7b72		       b1 e9		      lda	(__ptr),y
    424  7b74		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b77		       88		      dey
    422  7b77					      REPEND
    423  7b78		       b1 e9		      lda	(__ptr),y
    424  7b7a		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b7d		       88		      dey
    422  7b7d					      REPEND
    423  7b7e		       b1 e9		      lda	(__ptr),y
    424  7b80		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b83		       88		      dey
    422  7b83					      REPEND
    423  7b84		       b1 e9		      lda	(__ptr),y
    424  7b86		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b89		       88		      dey
    422  7b89					      REPEND
    423  7b8a		       b1 e9		      lda	(__ptr),y
    424  7b8c		       99 a1 00 	      sta	__pieceShapeBuffer,y
    425  7b8f		       88		      dey
    426  7b90					      REPEND
    427  7b90
    428  7b90							;.copyPieceGfx   lda (__ptr),y
    429  7b90							;		  sta __pieceShapeBuffer,y
    430  7b90							;		  dey
    431  7b90							;		  bpl .copyPieceGfx
    432  7b90
    433  7b90		       60		      rts
    434  7b91
    435  7b91							;---------------------------------------------------------------------------------------------------
    436  7b91
      0  7b91					      DEFINE_SUBROUTINE	CopyShadowROMtoRAM
      1  7b91		       00 0f	   BANK_CopyShadowROMtoRAM =	_CURRENT_BANK
      2  7b91					      SUBROUTINE
      3  7b91				   CopyShadowROMtoRAM
    438  7b91							; pass x = source bank
    439  7b91							; pass y = destination bank (preserved)
    440  7b91
    441  7b91		       86 a2		      stx	__sourceBank
    442  7b93
    443  7b93		       a2 00		      ldx	#0
    444  7b95		       a5 a2	   .copyPage  lda	__sourceBank
    445  7b97		       85 3f		      sta	SET_BANK
    446  7b99
    447  7b99		       bd 00 f0 	      lda	$F000,x
    448  7b9c		       48		      pha
    449  7b9d		       bd 00 f1 	      lda	$F100,x
    450  7ba0		       48		      pha
    451  7ba1		       bd 00 f2 	      lda	$F200,x
    452  7ba4		       48		      pha
    453  7ba5		       bd 00 f3 	      lda	$F300,x
    454  7ba8
    455  7ba8		       84 3e		      sty	SET_BANK_RAM
    456  7baa
    457  7baa		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    458  7bad		       68		      pla
    459  7bae		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    460  7bb1		       68		      pla
    461  7bb2		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    462  7bb5		       68		      pla
    463  7bb6		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    464  7bb9
    465  7bb9		       ca		      dex
    466  7bba		       d0 d9		      bne	.copyPage
    467  7bbc		       60		      rts
    468  7bbd
    469  7bbd							;---------------------------------------------------------------------------------------------------
    470  7bbd
      0  7bbd					      DEFINE_SUBROUTINE	Reset
      1  7bbd		       00 0f	   BANK_Reset =	_CURRENT_BANK
      2  7bbd					      SUBROUTINE
      3  7bbd				   Reset
    472  7bbd
      0  7bbd					      CLEAN_START
      1  7bbd		       78		      sei
      2  7bbe		       d8		      cld
      3  7bbf
      4  7bbf		       a2 00		      ldx	#0
      5  7bc1		       8a		      txa
      6  7bc2		       a8		      tay
      7  7bc3		       ca	   .CLEAR_STACK dex
      8  7bc4		       9a		      txs
      9  7bc5		       48		      pha
     10  7bc6		       d0 fb		      bne	.CLEAR_STACK
     11  7bc8
    474  7bc8
    475  7bc8		       a9 09		      lda	#BANK_TitleScreen
    476  7bca		       85 3f		      sta	SET_BANK
    477  7bcc		       20 0a f0 	      jsr	TitleScreen
    478  7bcf
    479  7bcf
    480  7bcf		       a9 97		      lda	#$97
    481  7bd1		       85 81		      sta	rnd
    482  7bd3		       a9 00		      lda	#0
    483  7bd5		       85 94		      sta	movePointer
    484  7bd7
    485  7bd7							; Move a copy of the row bank template to the first 8 banks of RAM
    486  7bd7							; and then terminate the draw subroutine by substituting in a RTS on the last one
    487  7bd7
    488  7bd7		       a0 07		      ldy	#7
    489  7bd9		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    490  7bdb		       20 91 fb 	      jsr	CopyShadowROMtoRAM
    491  7bde		       88		      dey
    492  7bdf		       10 f8		      bpl	.copyRowBanks
    493  7be1
    494  7be1							; Patch the final row's "loop" to a RTS
    495  7be1
    496  7be1		       a2 07		      ldx	#7
    497  7be3		       86 3e		      stx	SET_BANK_RAM
    498  7be5		       a9 60		      lda	#$60	; rts
    499  7be7		       8d ee f4 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
    500  7bea
    501  7bea		       20 6b f9 	      jsr	InitialiseChessboard
    502  7bed
    503  7bed							; Now the board is "living" in RAM (along with support code) we can do stuff with it
    504  7bed
    505  7bed		       a9 00		      lda	#0
    506  7bef		       85 82		      sta	doubleBufferBase
    507  7bf1		       85 83		      sta	drawPhase
    508  7bf3
    509  7bf3
    510  7bf3		       a9 00		      lda	#%00000000
    511  7bf5		       85 4a		      sta	CTRLPF
    512  7bf7		       85 49		      sta	COLUBK
    513  7bf9
    514  7bf9
      0  7bf9					      RESYNC
      1  7bf9
      2  7bf9		       a9 02		      lda	#%10
      3  7bfb		       85 41		      sta	VBLANK
      4  7bfd
      5  7bfd		       a2 08		      ldx	#8
      6  7bff				   .loopResync
      0  7bff					      VERTICAL_SYNC
      1  7bff		       a9 0e		      lda	#%1110
      2  7c01		       85 42	   .VSLP1     sta	WSYNC
      3  7c03		       85 40		      sta	VSYNC
      4  7c05		       4a		      lsr
      5  7c06		       d0 f9		      bne	.VSLP1
      8  7c08
      9  7c08		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  7c0a		       a5 95		      lda	Platform
     11  7c0c		       49 02		      eor	#PAL_50
     12  7c0e		       d0 02		      bne	.ntsc
     13  7c10		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  7c12				   .ntsc
     15  7c12				   .loopWait
     16  7c12		       85 42		      sta	WSYNC
     17  7c14		       85 42		      sta	WSYNC
     18  7c16		       88		      dey
     19  7c17		       d0 f9		      bne	.loopWait
     20  7c19		       ca		      dex
     21  7c1a		       d0 e3		      bne	.loopResync
    516  7c1c
    517  7c1c
    518  7c1c				   .doubleBufferLoop
    519  7c1c
    520  7c1c		       a9 0e		      lda	#%1110	; VSYNC ON
    521  7c1e		       85 42	   .loopVSync3 sta	WSYNC
    522  7c20		       85 40		      sta	VSYNC
    523  7c22		       4a		      lsr
    524  7c23		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
    525  7c25
    526  7c25		       a0 32		      ldy	#50	;VBLANK_TIM_NTSC
    527  7c27		       8c 96 02 	      sty	TIM64T
    528  7c2a
    529  7c2a		       20 62 fc 	      jsr	PhasedProcessor
    530  7c2d
    531  7c2d		       85 42	   .VerticalBlank sta	WSYNC
    532  7c2f		       ad 84 02 	      lda	INTIM
    533  7c32		       d0 f9		      bne	.VerticalBlank
    534  7c34		       85 41		      sta	VBLANK
    535  7c36
    536  7c36		       a5 82		      lda	doubleBufferBase
    537  7c38							;eor #8
    538  7c38		       aa		      tax
    539  7c39		       86 3e		      stx	SET_BANK_RAM
    540  7c3b		       20 bf f0 	      jsr	DrawRow
    541  7c3e
    542  7c3e		       a9 1a		      lda	#26
    543  7c40		       8d 96 02 	      sta	TIM64T
    544  7c43
    545  7c43		       a9 00		      lda	#0
    546  7c45		       85 4d		      sta	PF0
    547  7c47		       85 4e		      sta	PF1
    548  7c49		       85 4f		      sta	PF2
    549  7c4b
    550  7c4b							;jsr PhasedProcessor
    551  7c4b
    552  7c4b							; D1 VBLANK turns off beam
    553  7c4b							; It needs to be turned on 37 scanlines later
    554  7c4b
    555  7c4b		       ad 84 02    .oscan     lda	INTIM
    556  7c4e		       d0 fb		      bne	.oscan
    557  7c50
    558  7c50		       85 42		      sta	WSYNC
    559  7c52		       85 42		      sta	WSYNC
    560  7c54							;		  sta WSYNC
    561  7c54							;		  sta WSYNC
    562  7c54
    563  7c54		       a9 42		      lda	#%01000010	; bit6 is not required
    564  7c56		       85 41		      sta	VBLANK	; end of screen - enter blanking
    565  7c58
    566  7c58
    567  7c58
    568  7c58		       a5 4c		      lda	INPT4
    569  7c5a		       10 03		      bpl	.ret
    570  7c5c		       4c 1c fc 	      jmp	.doubleBufferLoop
    571  7c5f
    572  7c5f							;		  jmp .RestartChessFrame
    573  7c5f
    574  7c5f				   .ret
    575  7c5f
    576  7c5f							;jmp .doubleBufferLoop
    577  7c5f
    578  7c5f							;lda #2
    579  7c5f							;sta VSYNC
    580  7c5f							;lda #%01000010		  ; bit6 is not required
    581  7c5f							;sta VBLANK			  ; end of screen - enter blanking
    582  7c5f
    583  7c5f				   Restart		; go here on RESET + SELECT
    584  7c5f
    585  7c5f		       4c bd fb 	      jmp	Reset
    586  7c62
    587  7c62							;---------------------------------------------------------------------------------------------------
    588  7c62
      0  7c62					      DEFINE_SUBROUTINE	PhasedProcessor
      1  7c62		       00 0f	   BANK_PhasedProcessor =	_CURRENT_BANK
      2  7c62					      SUBROUTINE
      3  7c62				   PhasedProcessor
    590  7c62		       a6 83		      ldx	drawPhase
    591  7c64		       bd 71 fc 	      lda	DrawVectorLO,x
    592  7c67		       85 e9		      sta	__ptr
    593  7c69		       bd 7b fc 	      lda	DrawVectorHI,x
    594  7c6c		       85 ea		      sta	__ptr+1
    595  7c6e		       6c e9 00 	      jmp	(__ptr)
    596  7c71
    597  7c71		       00 06	   MARCH      =	6
    598  7c71		       00 0a	   MARCH_END  =	10
    599  7c71		       00 03	   STARTMOVE  =	3
    600  7c71
    601  7c71				   DrawVectorLO
    602  7c71		       85		      .byte.b	<StartClearBoard
    603  7c72		       8b		      .byte.b	<ClearEachRow
    604  7c73		       9e		      .byte.b	<DrawEntireBoard
    605  7c74		       a8		      .byte.b	<FlipBuffers
    606  7c75		       c4		      .byte.b	<EraseStartPiece
    607  7c76		       ca		      .byte.b	<WriteStartPieceBlank
    608  7c77		       e7		      .byte.b	<MarchToTargetA
    609  7c78		       42		      .byte.b	<MarchB
    610  7c79		       50		      .byte.b	<MarchToTargetB
    611  7c7a		       70		      .byte.b	<MarchB2
    612  7c7b
    613  7c7b				   DrawVectorHI
    614  7c7b		       fc		      .byte.b	>StartClearBoard
    615  7c7c		       fc		      .byte.b	>ClearEachRow
    616  7c7d		       fc		      .byte.b	>DrawEntireBoard
    617  7c7e		       fc		      .byte.b	>FlipBuffers
    618  7c7f		       fc		      .byte.b	>EraseStartPiece
    619  7c80		       fc		      .byte.b	>WriteStartPieceBlank
    620  7c81		       fc		      .byte.b	>MarchToTargetA
    621  7c82		       fd		      .byte.b	>MarchB
    622  7c83		       fd		      .byte.b	>MarchToTargetB
    623  7c84		       fd		      .byte.b	>MarchB2
    624  7c85
      0  7c85					      DEFINE_SUBROUTINE	StartClearBoard
      1  7c85		       00 0f	   BANK_StartClearBoard =	_CURRENT_BANK
      2  7c85					      SUBROUTINE
      3  7c85				   StartClearBoard
    626  7c85
    627  7c85		       a2 08		      ldx	#8
    628  7c87		       86 86		      stx	drawCount	; = bank
    629  7c89		       e6 83		      inc	drawPhase
    630  7c8b
      0  7c8b					      DEFINE_SUBROUTINE	ClearEachRow
      1  7c8b		       00 0f	   BANK_ClearEachRow =	_CURRENT_BANK
      2  7c8b					      SUBROUTINE
      3  7c8b				   ClearEachRow
    632  7c8b
    633  7c8b		       c6 86		      dec	drawCount
    634  7c8d		       30 08		      bmi	.bitmapCleared
    635  7c8f		       a6 86		      ldx	drawCount
    636  7c91		       86 3e		      stx	SET_BANK_RAM
    637  7c93		       20 90 f0 	      jsr	ClearRowBitmap
    638  7c96
    639  7c96		       60		      rts
    640  7c97
    641  7c97				   .bitmapCleared
    642  7c97
    643  7c97		       a9 3f		      lda	#63
    644  7c99		       85 80		      sta	drawPieceNumber
    645  7c9b
    646  7c9b		       e6 83		      inc	drawPhase
    647  7c9d		       60		      rts
    648  7c9e
      0  7c9e					      DEFINE_SUBROUTINE	DrawEntireBoard
      1  7c9e		       00 0f	   BANK_DrawEntireBoard =	_CURRENT_BANK
      2  7c9e					      SUBROUTINE
      3  7c9e				   DrawEntireBoard
    650  7c9e
    651  7c9e		       20 06 f8 	      jsr	CopySinglePiece
    652  7ca1		       c6 80		      dec	drawPieceNumber
    653  7ca3		       10 02		      bpl	.incomplete
    654  7ca5
    655  7ca5		       e6 83		      inc	drawPhase
    656  7ca7		       60	   .incomplete rts
    657  7ca8
    658  7ca8							; Now we've finished drawing the screen square by square.
    659  7ca8
      0  7ca8					      DEFINE_SUBROUTINE	FlipBuffers
      1  7ca8		       00 0f	   BANK_FlipBuffers =	_CURRENT_BANK
      2  7ca8					      SUBROUTINE
      3  7ca8				   FlipBuffers
    661  7ca8
    662  7ca8		       20 32 f9 	      jsr	RandomPieceMove
    663  7cab
    664  7cab		       a9 00		      lda	#BLANK
    665  7cad		       85 93		      sta	previousPiece
    666  7caf
    667  7caf		       a5 84		      lda	drawDelay
    668  7cb1		       d0 0b		      bne	normaldraw
    669  7cb3
    670  7cb3		       a9 00		      lda	#0
    671  7cb5		       85 87		      sta	snail
    672  7cb7
    673  7cb7		       a9 06		      lda	#6
    674  7cb9		       85 83		      sta	drawPhase
    675  7cbb		       4c e7 fc 	      jmp	MarchToTargetA
    676  7cbe
    677  7cbe				   normaldraw
    678  7cbe		       a9 05		      lda	#5
    679  7cc0		       85 87		      sta	snail
    680  7cc2
    681  7cc2		       e6 83		      inc	drawPhase
    682  7cc4
      0  7cc4					      DEFINE_SUBROUTINE	EraseStartPiece
      1  7cc4		       00 0f	   BANK_EraseStartPiece =	_CURRENT_BANK
      2  7cc4					      SUBROUTINE
      3  7cc4				   EraseStartPiece
    684  7cc4
    685  7cc4
    686  7cc4		       a9 0c		      lda	#12
    687  7cc6		       85 86		      sta	drawCount
    688  7cc8
    689  7cc8		       e6 83		      inc	drawPhase
    690  7cca							;rts
    691  7cca
      0  7cca					      DEFINE_SUBROUTINE	WriteStartPieceBlank
      1  7cca		       00 0f	   BANK_WriteStartPieceBlank =	_CURRENT_BANK
      2  7cca					      SUBROUTINE
      3  7cca				   WriteStartPieceBlank
    693  7cca
    694  7cca		       a5 84		      lda	drawDelay
    695  7ccc		       f0 03		      beq	deCount
    696  7cce		       c6 84		      dec	drawDelay
    697  7cd0		       60		      rts
    698  7cd1
    699  7cd1		       a5 86	   deCount    lda	drawCount
    700  7cd3		       f0 10		      beq	flashDone
    701  7cd5		       c6 86		      dec	drawCount
    702  7cd7
    703  7cd7		       a9 05		      lda	#5
    704  7cd9		       85 84		      sta	drawDelay
    705  7cdb
    706  7cdb		       a5 8d		      lda	fromSquare
    707  7cdd		       85 80		      sta	drawPieceNumber
    708  7cdf		       20 06 f8 	      jsr	CopySinglePiece
    709  7ce2
    710  7ce2		       c6 84		      dec	drawDelay
    711  7ce4		       60		      rts
    712  7ce5
    713  7ce5		       e6 83	   flashDone  inc	drawPhase
    714  7ce7							;rts
    715  7ce7
    716  7ce7
      0  7ce7					      DEFINE_SUBROUTINE	MarchToTargetA
      1  7ce7		       00 0f	   BANK_MarchToTargetA =	_CURRENT_BANK
      2  7ce7					      SUBROUTINE
      3  7ce7				   MarchToTargetA
    718  7ce7
    719  7ce7		       a5 84		      lda	drawDelay
    720  7ce9		       f0 03		      beq	.progress
    721  7ceb		       c6 84		      dec	drawDelay
    722  7ced		       60		      rts
    723  7cee				   .progress
    724  7cee
    725  7cee
    726  7cee							; Now we calculate move to new square
    727  7cee
    728  7cee		       a5 8d		      lda	fromSquare
    729  7cf0		       85 85		      sta	lastSquare
    730  7cf2		       4a		      lsr
    731  7cf3		       4a		      lsr
    732  7cf4		       4a		      lsr
    733  7cf5		       85 92		      sta	__fromRow
    734  7cf7		       a5 8f		      lda	toSquare
    735  7cf9		       4a		      lsr
    736  7cfa		       4a		      lsr
    737  7cfb		       4a		      lsr
    738  7cfc		       c5 92		      cmp	__fromRow
    739  7cfe		       f0 11		      beq	rowOK
    740  7d00		       b0 09		      bcs	.downRow
    741  7d02		       a5 8d		      lda	fromSquare
    742  7d04		       e9 07		      sbc	#7
    743  7d06		       85 8d		      sta	fromSquare
    744  7d08		       4c 11 fd 	      jmp	nowcol
    745  7d0b		       a5 8d	   .downRow   lda	fromSquare
    746  7d0d		       69 07		      adc	#7
    747  7d0f		       85 8d		      sta	fromSquare
    748  7d11				   rowOK
    749  7d11				   nowcol
    750  7d11
    751  7d11		       a5 8d		      lda	fromSquare
    752  7d13		       29 07		      and	#7
    753  7d15		       85 92		      sta	__fromRow
    754  7d17		       a5 8f		      lda	toSquare
    755  7d19		       29 07		      and	#7
    756  7d1b		       c5 92		      cmp	__fromRow
    757  7d1d		       f0 09		      beq	colok
    758  7d1f		       90 05		      bcc	.leftCol
    759  7d21		       e6 8d		      inc	fromSquare
    760  7d23		       4c 28 fd 	      jmp	colok
    761  7d26		       c6 8d	   .leftCol   dec	fromSquare
    762  7d28				   colok
    763  7d28
    764  7d28							; erase object in new sqare --> blank
    765  7d28
    766  7d28		       a5 8d		      lda	fromSquare
    767  7d2a		       85 80		      sta	drawPieceNumber
    768  7d2c		       20 06 f8 	      jsr	CopySinglePiece	; erase destination--> blank
    769  7d2f
    770  7d2f		       a9 08		      lda	#BANK_CHESSBOARD
    771  7d31		       85 3e		      sta	SET_BANK_RAM
    772  7d33		       a6 8d		      ldx	fromSquare
    773  7d35		       bd 00 10 	      lda	Chessboard,x
    774  7d38		       85 91		      sta	lastPiece	; what we are overwriting
    775  7d3a		       a5 8e		      lda	fromPiece
    776  7d3c		       9d 00 14 	      sta	Chessboard+RAM_WRITE,x	; and what'w actually moving there
    777  7d3f		       e6 83		      inc	drawPhase
    778  7d41		       60		      rts
    779  7d42
    780  7d42				   MarchB
    781  7d42
    782  7d42		       a5 8d		      lda	fromSquare
    783  7d44		       85 80		      sta	drawPieceNumber
    784  7d46		       20 06 f8 	      jsr	CopySinglePiece	; draw the moving piece into the new square
    785  7d49
    786  7d49		       a5 87		      lda	snail	; snail trail
    787  7d4b		       85 84		      sta	drawDelay
    788  7d4d
    789  7d4d		       e6 83		      inc	drawPhase
    790  7d4f		       60		      rts
    791  7d50
      0  7d50					      DEFINE_SUBROUTINE	MarchToTargetB
      1  7d50		       00 0f	   BANK_MarchToTargetB =	_CURRENT_BANK
      2  7d50					      SUBROUTINE
      3  7d50				   MarchToTargetB
    793  7d50
    794  7d50		       a5 84		      lda	drawDelay
    795  7d52		       f0 03		      beq	.mb
    796  7d54		       c6 84		      dec	drawDelay
    797  7d56		       60		      rts
    798  7d57				   .mb
    799  7d57
    800  7d57
    801  7d57							; now we want to undraw the piece in the old square
    802  7d57
    803  7d57		       a5 85		      lda	lastSquare
    804  7d59		       85 80		      sta	drawPieceNumber
    805  7d5b		       20 06 f8 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    806  7d5e
    807  7d5e		       a9 08		      lda	#BANK_CHESSBOARD
    808  7d60		       85 3e		      sta	SET_BANK_RAM
    809  7d62		       a5 93		      lda	previousPiece
    810  7d64		       a6 85		      ldx	lastSquare
    811  7d66		       9d 00 14 	      sta	Chessboard+RAM_WRITE,x
    812  7d69
    813  7d69		       a5 91		      lda	lastPiece
    814  7d6b		       85 93		      sta	previousPiece
    815  7d6d
    816  7d6d		       e6 83		      inc	drawPhase
    817  7d6f		       60		      rts
    818  7d70
      0  7d70					      DEFINE_SUBROUTINE	MarchB2
      1  7d70		       00 0f	   BANK_MarchB2 =	_CURRENT_BANK
      2  7d70					      SUBROUTINE
      3  7d70				   MarchB2
    820  7d70
    821  7d70		       a5 85		      lda	lastSquare
    822  7d72		       85 80		      sta	drawPieceNumber
    823  7d74		       20 06 f8 	      jsr	CopySinglePiece	; draw previous piece back in old position
    824  7d77
    825  7d77		       a5 8d		      lda	fromSquare
    826  7d79		       c5 8f		      cmp	toSquare
    827  7d7b		       f0 05		      beq	.halt
    828  7d7d
    829  7d7d							; here we could delay
    830  7d7d							;lda #5	    ; inter-move segment speed
    831  7d7d							;sta drawDelay
    832  7d7d
    833  7d7d		       a9 06		      lda	#MARCH
    834  7d7f		       85 83		      sta	drawPhase
    835  7d81		       60		      rts
    836  7d82
    837  7d82
    838  7d82
    839  7d82		       a9 03	   .halt      lda	#STARTMOVE
    840  7d84		       85 83		      sta	drawPhase
    841  7d86		       60		      rts
    842  7d87
    843  7d87
    844  7d87							;---------------------------------------------------------------------------
    845  7d87
 FREE BYTES IN FIXED BANK =  $269
    846  7d87					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFF0 - *
    847  7d87
    848  7d87							;---------------------------------------------------------------------------
    849  7d87							; The reset vectors
    850  7d87							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
    851  7d87
    852  7ff4 ????				      SEG	PlusCart
    853  7ff0					      ORG	FIXED_BANK + $7F0
    854  7ff0					      RORG	$7FF0
    855  7ff0		       7f f0	   PLUSCART_IO =	*
    856  7ff0		       00 aa	   PLUS0      =	%10101010
    857  7ff0		       00 19	   PLUS1      =	%00011001
    858  7ff0		       00 af	   PLUS2      =	%10101111
    859  7ff0		       00 36	   PLUS3      =	%00110110
    860  7ff0		       aa 19 af 36	      .byte.b	PLUS0,PLUS1,PLUS2,PLUS3
    861  7ff4
    862  8000 ????				      SEG	InterruptVectors
    863  7ffc					      ORG	FIXED_BANK + $7FC
    864  7ffc					      RORG	$7ffC
    865  7ffc
    866  7ffc							;		 .word Reset	       ; NMI	    (not used)
    867  7ffc		       bd fb		      .word.w	Reset	; RESET
    868  7ffe		       bd fb		      .word.w	Reset	; IRQ	      (not used)
    869  8000
    870  8000							;---------------------------------------------------------------------------
------- FILE ./chess.asm
    453  8000
    454  8000							;END
