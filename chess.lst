------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 80	   BL	      =	BLACK
      5  0000 ????
      6  0000 ????	       00 00	   WHITE      =	0
      7  0000 ????	       00 00	   WH	      =	WHITE
      8  0000 ????
      9  0000 ????	       00 80	   PIECE_COLOUR =	128	; mask
     10  0000 ????
     11  0000 ????
     12  0000 ????	       00 40	   MOVED      =	64	; mark ALL pieces when moved. Used for castling
     13  0000 ????						; but maybe useful for evaluation of development
     14  0000 ????	       00 20	   PHANTOM    =	32	; a phantom king (via castling)
     15  0000 ????
     16  0000 ????						;---------------------------------------------------------------------------------------------------
     17  0000 ????						; DEFINE THE PIECES
     18  0000 ????						; ID lives in bits 0-2
     19  0000 ????
     20  0000 ????	       00 00	   BLANK      =	0
     21  0000 ????	       00 00	   ███  =	BLANK
     22  0000 ????
     23  0000 ????	       00 01	   WPAWN      =	1
     24  0000 ????	       00 01	   WP	      =	WPAWN
     25  0000 ????	       00 02	   BPAWN      =	2
     26  0000 ????	       00 02	   BP	      =	BPAWN
     27  0000 ????	       00 03	   KNIGHT     =	3
     28  0000 ????	       00 03	   N	      =	KNIGHT
     29  0000 ????	       00 04	   BISHOP     =	4
     30  0000 ????	       00 04	   B	      =	BISHOP
     31  0000 ????	       00 05	   ROOK       =	5
     32  0000 ????	       00 05	   R	      =	ROOK
     33  0000 ????	       00 06	   QUEEN      =	6
     34  0000 ????	       00 06	   Q	      =	QUEEN
     35  0000 ????	       00 07	   KING       =	7
     36  0000 ????	       00 07	   K	      =	KING
     37  0000 ????
     38  0000 ????	       00 07	   PIECE_MASK =	7	; trim off the flags leaving just piece ID
     39  0000 ????
     40  0000 ????						;---------------------------------------------------------------------------------------------------
     41  0000 ????
     42  0000 ????						; Movements
     43  0000 ????
     44  0000 ????	       00 0a	   _UP	      =	10	; up
     45  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     46  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     47  0000 ????	       00 01	   _RIGHT     =	1	; right
     48  0000 ????
     49  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						;===================================
     31  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     32  0000 ????						;===================================
     33  0000 ????
     34  0000 ????						;-------------------------------------------------------------------------------
     35  0000 ????						; The following are optional YES/NO depending on phase of the moon
     36  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     37  0000 ????						;-------------------------------------------------------------------------------
     38  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     39  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     40  0000 ????			  -	      IF	FINAL_VERSION = YES
     41  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     42  0000 ????				      ENDIF
     43  0000 ????
     44  0000 ????						;-------------------------------------------------------------------------------
     45  0000 ????
     46  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     47  0000 ????	       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
     48  0000 ????
     49  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     50  0000 ????
     51  0000 ????						;------------------------------------------------------------------------------
     52  0000 ????
     53  0000 ????	       00 01	   PLUSCART   =	YES
     54  0000 ????
     55  0000 ????						;------------------------------------------------------------------------------
     56  0000 ????
     57  0000 ????
     58  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     59  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     60  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     61  0000 ????
     62  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     63  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     64  0000 ????
     65  0000 ????
     66  0000 ????	       10 00	   RAM_3E     =	$1000
     67  0000 ????	       04 00	   RAM_SIZE   =	$400
     68  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     69  0000 ????
     70  0000 ????
     71  0000 ????						; Platform constants:
     72  0000 ????	       00 02	   PAL	      =	%10
     73  0000 ????	       00 02	   PAL_50     =	PAL|0
     74  0000 ????	       00 03	   PAL_60     =	PAL|1
     75  0000 ????
     76  0000 ????
     77  0000 ????				      IF	L276
     78  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     79  0000 ????			  -	      ELSE
     80  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     81  0000 ????				      ENDIF
     82  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     83  0000 ????
     84  0000 ????				      IF	L276
     85  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     86  0000 ????			  -	      ELSE
     87  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     88  0000 ????				      ENDIF
     89  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     90  0000 ????
     91  0000 ????				      IF	L276
     92  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     93  0000 ????			  -	      ELSE
     94  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     95  0000 ????				      ENDIF
     96  0000 ????	       01 38	   SCANLINES_PAL =	312
     97  0000 ????
     98  0000 ????
     99  0000 ????						;------------------------------------------------------------------------------
    100  0000 ????						; MACRO definitions
    101  0000 ????
    102  0000 ????
    103  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    104  0000 ????
    105  0000 ????				      MAC	newbank
    106  0000 ????				      SEG	{1}
    107  0000 ????				      ORG	ORIGIN
    108  0000 ????				      RORG	$F000
    109  0000 ????			   BANK_START SET	*
    110  0000 ????			   {1}	      SET	ORIGIN / 2048
    111  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    112  0000 ????			   _CURRENT_BANK SET	{1}
    113  0000 ????				      ENDM		; bank name
    114  0000 ????
    115  0000 ????				      MAC	define_1k_segment
    116  0000 ????				      ALIGN	$400
    117  0000 ????			   SEGMENT_{1} SET	*
    118  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    119  0000 ????				      ENDM		; {seg name}
    120  0000 ????
    121  0000 ????				      MAC	check_bank_size
    122  0000 ????			   .TEMP      =	* - BANK_START
    123  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    124  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    125  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    126  0000 ????				      ERR
    127  0000 ????				      endif
    128  0000 ????				      ENDM		; name
    129  0000 ????
    130  0000 ????
    131  0000 ????				      MAC	check_half_bank_size
    132  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    133  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    134  0000 ????			   .TEMP      =	* - BANK_START
    135  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    136  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    137  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    138  0000 ????				      ERR
    139  0000 ????				      endif
    140  0000 ????				      ENDM		; name
    141  0000 ????
    142  0000 ????
    143  0000 ????
    144  0000 ????						;--------------------------------------------------------------------------
    145  0000 ????						; Macro inserts a page break if the object would overlap a page
    146  0000 ????
    147  0000 ????				      MAC	optional_pagebreak
    148  0000 ????				      LIST	OFF
    149  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    150  0000 ????			   EARLY_LOCATION SET	*
    151  0000 ????				      ALIGN	256
    152  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    153  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    154  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    155  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    156  0000 ????				      ENDIF
    157  0000 ????				      LIST	ON
    158  0000 ????				      ENDM		; { string, size }
    159  0000 ????
    160  0000 ????
    161  0000 ????				      MAC	check_page_crossing
    162  0000 ????				      LIST	OFF
    163  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    164  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    165  0000 ????				      endif
    166  0000 ????				      LIST	ON
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????				      MAC	checkpage
    170  0000 ????				      LIST	OFF
    171  0000 ????				      IF	>. != >{1}
    172  0000 ????				      ECHO	""
    173  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    174  0000 ????				      ECHO	""
    175  0000 ????				      ERR
    176  0000 ????				      ENDIF
    177  0000 ????				      LIST	ON
    178  0000 ????				      ENDM
    179  0000 ????
    180  0000 ????				      MAC	checkpagex
    181  0000 ????				      LIST	OFF
    182  0000 ????				      IF	>. != >{1}
    183  0000 ????				      ECHO	""
    184  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    185  0000 ????				      ECHO	{2}
    186  0000 ????				      ECHO	""
    187  0000 ????				      ERR
    188  0000 ????				      ENDIF
    189  0000 ????				      LIST	ON
    190  0000 ????				      ENDM
    191  0000 ????
    192  0000 ????
    193  0000 ????				      MAC	checkpage_bne
    194  0000 ????				      LIST	OFF
    195  0000 ????				      IF	0	;>(. + 2) != >{1}
    196  0000 ????				      ECHO	""
    197  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    198  0000 ????				      ECHO	""
    199  0000 ????				      ERR
    200  0000 ????				      ENDIF
    201  0000 ????				      LIST	ON
    202  0000 ????				      bne	{1}
    203  0000 ????				      ENDM
    204  0000 ????
    205  0000 ????				      MAC	checkpage_bpl
    206  0000 ????				      LIST	OFF
    207  0000 ????				      IF	(>(.+2 )) != >{1}
    208  0000 ????				      ECHO	""
    209  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    210  0000 ????				      ECHO	""
    211  0000 ????				      ERR
    212  0000 ????				      ENDIF
    213  0000 ????				      LIST	ON
    214  0000 ????				      bpl	{1}
    215  0000 ????				      ENDM
    216  0000 ????
    217  0000 ????				      MAC	align_free
    218  0000 ????			   FREE       SET	FREE - .
    219  0000 ????				      align	{1}
    220  0000 ????			   FREE       SET	FREE + .
    221  0000 ????				      echo	"@", ., ":", FREE
    222  0000 ????				      ENDM
    223  0000 ????
    224  0000 ????						;--------------------------------------------------------------------------
    225  0000 ????
    226  0000 ????				      MAC	vector
    227  0000 ????				      .word	{1}
    228  0000 ????				      ENDM		; just a word pointer to code
    229  0000 ????
    230  0000 ????
    231  0000 ????				      MAC	define_subroutine
    232  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    233  0000 ????				      SUBROUTINE		; keep everything local
    234  0000 ????			   {1}			; entry point
    235  0000 ????				      ENDM		; name of subroutine
    236  0000 ????
    237  0000 ????
    238  0000 ????				      MAC	def
    239  0000 ????						; {1} subroutine name
    240  0000 ????				      DEFINE_SUBROUTINE	{1}
    241  0000 ????				      ENDM
    242  0000 ????
    243  0000 ????						;--------------------------------------------------------------------------
    244  0000 ????
    245  0000 ????				      MAC	newrambank
    246  0000 ????						; {1}	     bank name
    247  0000 ????						; {2}	     RAM bank number
    248  0000 ????
    249  0000 ????				      SEG.U	{1}
    250  0000 ????				      ORG	ORIGIN_RAM
    251  0000 ????				      RORG	RAM_3E
    252  0000 ????			   BANK_START SET	*
    253  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    254  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    255  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    256  0000 ????				      ENDM		; bank name
    257  0000 ????
    258  0000 ????						; TODO - fix - this is faulty....
    259  0000 ????				      MAC	validate_ram_size
    260  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    261  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    262  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    263  0000 ????				      ERR
    264  0000 ????				      ENDIF
    265  0000 ????				      ENDM
    266  0000 ????
    267  0000 ????
    268  0000 ????				      MAC	resync
    269  0000 ????						; resync screen, X and Y == 0 afterwards
    270  0000 ????				      lda	#%10	; make sure VBLANK is ON
    271  0000 ????				      sta	VBLANK
    272  0000 ????
    273  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    274  0000 ????			   .loopResync
    275  0000 ????				      VERTICAL_SYNC
    276  0000 ????
    277  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    278  0000 ????				      lda	Platform
    279  0000 ????				      eor	#PAL_50	; PAL-50?
    280  0000 ????				      bne	.ntsc
    281  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    282  0000 ????			   .ntsc
    283  0000 ????			   .loopWait
    284  0000 ????				      sta	WSYNC
    285  0000 ????				      sta	WSYNC
    286  0000 ????				      dey
    287  0000 ????				      bne	.loopWait
    288  0000 ????				      dex
    289  0000 ????				      bne	.loopResync
    290  0000 ????				      ENDM
    291  0000 ????
    292  0000 ????				      MAC	set_platform
    293  0000 ????						; 00 = NTSC
    294  0000 ????						; 01 = NTSC
    295  0000 ????						; 10 = PAL-50
    296  0000 ????						; 11 = PAL-60
    297  0000 ????				      lda	SWCHB
    298  0000 ????				      rol
    299  0000 ????				      rol
    300  0000 ????				      rol
    301  0000 ????				      and	#%11
    302  0000 ????				      eor	#PAL
    303  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    304  0000 ????				      ENDM
    305  0000 ????
    306  0000 ????
    307  0000 ????						;------------------------------------------------------------------------------
    308  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00ee ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   doubleBufferBase ds	1	; switcher for which draw buffer in use points to DRAW one
     12 U0083		       00	   drawPhase  ds	1	; ticks through the board draw process
     13 U0084		       00	   drawDelay  ds	1
     14 U0085		       00	   lastSquare ds	1
     15 U0086		       00	   drawCount  ds	1
     16 U0087		       00	   snail      ds	1
     17 U0088		       00 00	   title_colour_table ds	2
     18 U008a		       00	   currentPiece ds	1
     19 U008b		       00	   currentSquare ds	1
     20 U008c		       00	   returnBank ds	1
     21 U008d		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     22 U008e
     23 U008e		       00	   fromSquare ds	1
     24 U008f		       00	   fromPiece  ds	1
     25 U0090		       00	   toSquare   ds	1
     26 U0091		       00	   toPiece    ds	1
     27 U0092		       00	   lastPiece  ds	1
     28 U0093		       00	   __fromRow  ds	1
     29 U0094		       00	   previousPiece ds	1
     30 U0095		       00	   movePointer ds	1
     31 U0096
     32 U0096		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     33 U0097		       00	   BufferedJoystick ds	1	; player joystick input
     34 U0098		       00	   PreviousJoystick ds	1
     35 U0099							;BGColour			  ds 1
     36 U0099		       00 00	   colour_table ds	2
     37 U009b
     38 U009b		       00 00	   Board_AddressR ds	2
     39 U009d		       00 00	   Board_AddressW ds	2
     40 U009f		       00	   ROM_Bank   ds	1	; last switched ROM bank (not accessible if RAM subsequently switched)
     41 U00a0		       00	   RAM_Bank   ds	1
     42 U00a1
     43 U00a1
     44 U00a1		       00	   ObjIterator ds	1	; count UP iterator over objects
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a2					      include	"overlays.asm"
      1 U00a2							; Chess
      2 U00a2							; Atari 2600 Chess display system
      3 U00a2							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a2							; andrew@taswegian.com
      5 U00a2
      6 U00a2							;---------------------------------------------------------------------------------------------------
      7 U00a2							; OVERLAYS!
      8 U00a2							; These variables are overlays, and should be managed with care
      9 U00a2							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a2							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a2							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a2							; overlay #2
     13 U00a2
     14 U00a2							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a2
     16 U00a2							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a2							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a2							;---------------------------------------------------------------------------------------------------
     19 U00a2
     20 U00a2					      MAC	overlay
     21 U00a2				   OVERLAY_NAME SET	{1}
     22 U00a2					      SEG.U	OVERLAY_{1}
     23 U00a2					      org	Overlay
     24 U00a2					      ENDM		; {name}
     25 U00a2
     26 U00a2							;---------------------------------------------------------------------------------------------------
     27 U00a2
     28 U00a2					      MAC	validate_overlay
     29 U00a2					      LIST	OFF
     30 U00a2				   OVERLAY_DELTA SET	* - Overlay
     31 U00a2					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a2				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a2					      ENDIF
     34 U00a2					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a2					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a2					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a2					      ERR
     38 U00a2					      ENDIF
     39 U00a2					      LIST	ON
     40 U00a2					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a2					      ENDM
     42 U00a2
     43 U00a2							;---------------------------------------------------------------------------------------------------
     44 U00a2
     45 U00a2				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a2				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a2
     48 U00a2
     49 U00a2							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a2							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a2							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a2							; (especially the latter ones) are only used in rare occasions.
     53 U00a2
     54 U00a2							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a2							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a2
     57 U00a2		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00ee
     59 U00ee							;---------------------------------------------------------------------------------------------------
     60 U00ee							; And now... the overlays....
     61 U00ee
 ---- OVERLAYS ( $4c bytes ) ----
     62 U00ee					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     63 U00ee
     64 U00ee							;---------------------------------------------------------------------------------------------------
     65 U00ee
      0 U00ee					      OVERLAY	"PieceBufferOverlay"
      1 U00ee				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00ee ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a2					      org	Overlay
     67 U00a2							; used in CopyPieceFromRAMBufferToScreen
     68 U00a2							; used in CopyPieceToRAMBuffer
     69 U00a2							; used in ClearChessBitmap
     70 U00a2							; used in CopyPieceToRowBitmap
     71 U00a2		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     72 U00ea		       00 00	   __ptr      ds	2	; pointer to data
     73 U00ec		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00ee					      VALIDATE_OVERLAY
     11 U00ee					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00ee					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     75 U00ee
     76 U00ee							;---------------------------------------------------------------------------------------------------
     77 U00ee
      0 U00ee					      OVERLAY	"CopyROMShadowToRAM"
      1 U00ee				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U00a5 ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a2					      org	Overlay
     79 U00a2		       00	   __CopyCount ds	1
     80 U00a3		       00	   __ROM_SourceBank ds	1
     81 U00a4		       00	   __index    ds	1
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     83 U00a5
     84 U00a5							;---------------------------------------------------------------------------------------------------
     85 U00a5
      0 U00a5					      OVERLAY	"DrawTheChessScreen"
      1 U00a5				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U00a3 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a2					      org	Overlay
     87 U00a2		       00	   __rows     ds	1
      0 U00a3					      VALIDATE_OVERLAY
     11 U00a3					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     89 U00a3
     90 U00a3							;---------------------------------------------------------------------------------------------------
     91 U00a3
      0 U00a3					      OVERLAY	"SetupShadowRAM"
      1 U00a3				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U00a4 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a2					      org	Overlay
     93 U00a2		       00	   __destinationBank ds	1
     94 U00a3		       00	   __sourceBank ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     96 U00a4
     97 U00a4							;---------------------------------------------------------------------------------------------------
      0 U00a4					      OVERLAY	"DrawPiece"
      1 U00a4				   OVERLAY_NAME SET	"DrawPiece"
      2 U00a3 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a2					      org	Overlay
     99 U00a2		       00	   __pieceColour ds	1
      0 U00a3					      VALIDATE_OVERLAY
     11 U00a3					      LIST	ON
 DrawPiece - $4b bytes available
     12 U00a3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    101 U00a3
    102 U00a3							;---------------------------------------------------------------------------------------------------
      0 U00a3					      OVERLAY	"RandomPiece"
      1 U00a3				   OVERLAY_NAME SET	"RandomPiece"
      2 U00a3 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a2					      org	Overlay
    104 U00a2		       00	   __tempx    ds	1
      0 U00a3					      VALIDATE_OVERLAY
     11 U00a3					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    106 U00a3
    107 U00a3							;---------------------------------------------------------------------------------------------------
      0 U00a3					      OVERLAY	"Handlers"
      1 U00a3				   OVERLAY_NAME SET	"Handlers"
      2 U00a5 ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a2					      org	Overlay
    109 U00a2		       00	   __piece    ds	1
    110 U00a3		       00 00	   __vector   ds	2
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 Handlers - $49 bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    112 U00a5
    113 U00a5							;---------------------------------------------------------------------------------------------------
      0 U00a5					      OVERLAY	"Movers"
      1 U00a5				   OVERLAY_NAME SET	"Movers"
      2 U00b0 ????				      SEG.U	OVERLAY_"Movers"
      3 U00a2					      org	Overlay
    115 U00a2		       00	   __fromCol  ds	1
    116 U00a3		       00	   __toCol    ds	1
    117 U00a4
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 Movers - $4a bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    119 U00a4
    120 U00a4							;---------------------------------------------------------------------------------------------------
    121 U00a4
 ---- END OF OVERLAYS ----
    122 U00a4					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    123 U00a4					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    124 U00a4
    125 U00a4							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00a4					      include	"stack.asm"
      1 U00a4							; Chess
      2 U00a4							; Atari 2600 Chess display system
      3 U00a4							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a4							; andrew@taswegian.com
      5 U00a4
      6 U00a4		       00 00 00 00*	      ds	RESERVED_FOR_STACK
------- FILE ./chess.asm
    312 U00b0
 FREE BYTES IN ZERO PAGE =  $4f
    313 U00b0					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    314 U00b0				  -	      IF	* > $FF
    315 U00b0				  -	      ERR	"Zero Page overflow!"
    316 U00b0					      ENDIF
    317 U00b0
    318 U00b0							;------------------------------------------------------------------------------
    319 U00b0							;##############################################################################
    320 U00b0							;------------------------------------------------------------------------------
    321 U00b0
    322 U00b0							; NOW THE VERY INTERESTING '3E' RAM BANKS
    323 U00b0							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    324 U00b0							; IN A 2K MEMORY SPACE
    325 U00b0
      0 U00b0					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00b0
      2 U00b0
      3 U00b0
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    327 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    327 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    327 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    327 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    327 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    327 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    327 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    330 U1c00					      REPEND
    331 U1c00
    332 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    333 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    334 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    335 U1c00
    336 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    337 U1c00							; is that we can use that code to switch between banks, and the system will happily
    338 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    339 U1c00
    340 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    341 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    342 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    343 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    344 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    345 U1c00
    346 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    347 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    348 U1c00
    349 U1c00							;------------------------------------------------------------------------------
    350 U1c00
    351 U1c00
    352 U1c00							;---------------------------------------------------------------------------------------------------
    353 U1c00
    354 U1c00
    355 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    356 U1c00
    357 U1c00					      MAC	next_random
    358 U1c00					      lda	rnd
    359 U1c00					      lsr
    360 U1c00					      bcc	.skipEOR
    361 U1c00					      eor	#RND_EOR_VAL
    362 U1c00				   .skipEOR   sta	rnd
    363 U1c00					      ENDM
    364 U1c00
    365 U1c00							;--------------------------------------------------------------------------------
    366 U1c00
    367 U1c00							;ORIGIN      SET 0
    368 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00
     12 U1c00					      ldx	currentSquare
     13 U1c00				   .project   ldy	ValidSquare+{1},x
     14 U1c00					      bmi	.invalid	; off board!
     15 U1c00					      lda	Board,y	; piece @ destination
     16 U1c00					      beq	.empty
     17 U1c00
     18 U1c00					      eor	currentPiece
     19 U1c00					      bpl	.invalid	; same colour
     20 U1c00
     21 U1c00				   .empty     jsr	AddMove
     22 U1c00
     23 U1c00					      lda	Board,y
     24 U1c00					      bne	.invalid	; stop when we hit something
     25 U1c00
     26 U1c00					      tya
     27 U1c00					      tax		; move to next square
     28 U1c00					      jmp	.project
     29 U1c00
     30 U1c00				   .invalid
     31 U1c00					      ENDM
     32 U1c00
     33 U1c00							;---------------------------------------------------------------------------------------------------
     34 U1c00
     35 U1c00					      MAC	move_to
     36 U1c00					      SUBROUTINE
     37 U1c00					      ldy	ValidSquare+{1},x
     38 U1c00					      bmi	.invalid	; off board!
     39 U1c00					      lda	Board,y	; piece @ destination
     40 U1c00					      beq	.squareEmpty
     41 U1c00
     42 U1c00					      eor	currentPiece
     43 U1c00					      bpl	.invalid	; same colour
     44 U1c00
     45 U1c00				   .squareEmpty jsr	AddMove
     46 U1c00				   .invalid
     47 U1c00					      ENDM
     48 U1c00
     49 U1c00							;---------------------------------------------------------------------------------------------------
     50 U1c00							; EOF
------- FILE ./chess.asm
    370 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  0070 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;------------------------------------------------------------------------------
     18  0004							; ... the above is a RAM-copied section -- the following is ROM-only.	Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;------------------------------------------------------------------------------
     22  0004
      0  0004					      DEFINE_SUBROUTINE	Cart_Init	; in GENERIC_BANK_1
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004					      SUBROUTINE
      3  0004				   Cart_Init
     24  0004
     25  0004							; Note the variables from the title selection are incredibly transient an can be stomped
     26  0004							; at any time.  So they need to be used immediately.
     27  0004
     28  0004
     29  0004							; odd usage below is to prevent any possibility of variable stomping/assumptions
     30  0004
     31  0004		       a9 00		      lda	#0
     32  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     33  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     34  000c		       85 6b		      sta	HMCLR
     35  000e
     36  000e							; cleanup remains of title screen
     37  000e		       85 5b		      sta	GRP0
     38  0010		       85 5c		      sta	GRP1
     39  0012
     40  0012		       a9 10		      lda	#%00010000	; 2	 double width missile, double width player
     41  0014		       85 44		      sta	NUSIZ0	; 3
     42  0016		       85 45		      sta	NUSIZ1
     43  0018
     44  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     45  001a		       85 4a		      sta	CTRLPF
     46  001c
     47  001c		       a9 ff		      lda	#$FF
     48  001e		       85 97		      sta	BufferedJoystick
     49  0020
     50  0020							;lda #DIRECTION_BITS		  ;???
     51  0020							;sta ManLastDirection
     52  0020
     53  0020							;lda #0
     54  0020							;		  sta ObjStackPtr		  ; object stack index of last entry
     55  0020							;		  sta ObjStackPtr+1
     56  0020							;		  sta ObjStackNum
     57  0020							;		  sta ObjIterator
     58  0020
     59  0020							;sta sortPtr
     60  0020							;lda #<(-1)
     61  0020							;sta sortRequired
     62  0020
     63  0020		       60		      rts
     64  0021
     65  0021							;-------------------------------------------------------------------------------------
     66  0021
      0  0021					      DEFINE_SUBROUTINE	Resync
      1  0021				   BANK_Resync SET	_CURRENT_BANK
      2  0021					      SUBROUTINE
      3  0021				   Resync
      0  0021					      RESYNC
      1  0021
      2  0021		       a9 02		      lda	#%10
      3  0023		       85 41		      sta	VBLANK
      4  0025
      5  0025		       a2 08		      ldx	#8
      6  0027				   .loopResync
      0  0027					      VERTICAL_SYNC
      1  0027		       a9 0e		      lda	#%1110
      2  0029		       85 42	   .VSLP1     sta	WSYNC
      3  002b		       85 40		      sta	VSYNC
      4  002d		       4a		      lsr
      5  002e		       d0 f9		      bne	.VSLP1
      8  0030
      9  0030		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  0032		       a5 96		      lda	Platform
     11  0034		       49 02		      eor	#PAL_50
     12  0036		       d0 02		      bne	.ntsc
     13  0038		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  003a				   .ntsc
     15  003a				   .loopWait
     16  003a		       85 42		      sta	WSYNC
     17  003c		       85 42		      sta	WSYNC
     18  003e		       88		      dey
     19  003f		       d0 f9		      bne	.loopWait
     20  0041		       ca		      dex
     21  0042		       d0 e3		      bne	.loopResync
     69  0044		       60	   Ret	      rts
     70  0045
     71  0045							;------------------------------------------------------------------------------
     72  0045
     73  0045
     74  0045				   OverscanTime
     75  0045		       23 23		      .byte.b	OVERSCAN_TIM_NTSC, OVERSCAN_TIM_NTSC
     76  0047		       29 23		      .byte.b	OVERSCAN_TIM_PAL, OVERSCAN_TIM_NTSC
     77  0049
     78  0049
     79  0049		       00 12	   THROT_BASE =	18
     80  0049				   theThrottler
     81  0049		       12 12 15 12	      .byte.b	THROT_BASE, THROT_BASE, THROT_BASE*60/50, THROT_BASE
     82  004d
      0  004d					      DEFINE_SUBROUTINE	PostScreenCleanup
      1  004d				   BANK_PostScreenCleanup SET	_CURRENT_BANK
      2  004d					      SUBROUTINE
      3  004d				   PostScreenCleanup
     84  004d
     85  004d		       c8		      iny		; --> 0
     86  004e
     87  004e		       84 49		      sty	COLUBK	; starts colour change bottom score area, wraps to top score area
     88  0050							; + moved here so we don't see a minor colour artefact bottom of screen when look-arounding
     89  0050
     90  0050		       84 4d		      sty	PF0	; why wasn't this here?  I saw colour glitching in score area!
     91  0052							; TJ: no idea why, but you had removed it in revision 758 ;)
     92  0052							; completely accidental -- one of our cats may have deleted it.
     93  0052		       84 4e		      sty	PF1
     94  0054		       84 4f		      sty	PF2
     95  0056		       84 5d		      sty	ENAM0
     96  0058		       84 5b		      sty	GRP0	; when look-scrolling, we can see feet at the top if these aren't here
     97  005a		       84 5c		      sty	GRP1	; 30/12/2011 -- fix dots @ top!
     98  005c
     99  005c							; D1 VBLANK turns off beam
    100  005c
    101  005c		       a9 42		      lda	#%01000010	; bit6 is not required
    102  005e		       85 41		      sta	VBLANK	; end of screen - enter blanking
    103  0060
    104  0060							;------------------------------------------------------------------------------
    105  0060							; This is where the PAL system has a bit of extra time on a per-frame basis.
    106  0060
    107  0060		       a6 96		      ldx	Platform
    108  0062		       bd 45 f0 	      lda	OverscanTime,x
    109  0065		       8d 96 02 	      sta	TIM64T
    110  0068
    111  0068
    112  0068							;----------------------------------------------------------------------------------------------
    113  0068
    114  0068							; has to be done AFTER screen display, because it disables the effect!
    115  0068							;SLEEP 6
    116  0068							;lda rnd		      ; 3     randomly reposition the Cosmic Ark missile
    117  0068							;sta HMM0		      ; 3     this assumes that HMOVE is called at least once/frame
    118  0068
    119  0068				   noFlashBG
    120  0068							;	 sta BGColour
    121  0068
    122  0068							; Create a 'standardised' joystick with D4-D7 having bits CLEAR if the appropriate direction is chosen.
    123  0068
    124  0068		       ad 80 02 	      lda	SWCHA
    125  006b		       25 97		      and	BufferedJoystick
    126  006d		       85 97		      sta	BufferedJoystick
    127  006f
    128  006f		       60		      rts
    129  0070
    130  0070							;------------------------------------------------------------------------------
    131  0070
    132  0070
      0  0070					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  0070		       00 70	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $70 , FREE= $790
      2  0070					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  0070				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  0070				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  0070				  -	      ERR
      6  0070					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  0070					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  0070
      0  0070					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  090b ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     13  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     15  0800
     16  0800				   ChessBitmap
     17  0800		       00 00 00 00*ChessBitmap0 ds	24
     18  0818		       00 00 00 00*ChessBitmap1 ds	24
     19  0830		       00 00 00 00*ChessBitmap2 ds	24
     20  0848		       00 00 00 00*ChessBitmap3 ds	24
     21  0860		       00 00 00 00*ChessBitmap4 ds	24
     22  0878		       00 00 00 00*ChessBitmap5 ds	24
     23  0890
     24  0890							;---------------------------------------------------------------------------------------------------
     25  0890
      0  0890					      DEFINE_SUBROUTINE	ClearRowBitmap
      1  0890				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  0890					      SUBROUTINE
      3  0890				   ClearRowBitmap
     27  0890
     28  0890		       a9 00		      lda	#0
     29  0892		       a0 90		      ldy	#ROW_BITMAP_SIZE
     30  0894		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     31  0897		       88		      dey
     32  0898		       d0 fa		      bne	.clearRow
     33  089a		       60		      rts
     34  089b
     35  089b							;---------------------------------------------------------------------------------------------------
     36  089b
      0  089b					      DEFINE_SUBROUTINE	CopyPieceToRowBitmap
      1  089b				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  089b					      SUBROUTINE
      3  089b				   CopyPieceToRowBitmap
     38  089b
     39  089b		       b0 11		      bcs	.rightSide
     40  089d
     41  089d		       a0 47		      ldy	#71
     42  089f		       b9 a2 00    .copyPiece lda	__pieceShapeBuffer,y
     43  08a2		       f0 06		      beq	.blank1
     44  08a4		       59 00 f0 	      eor	ChessBitmap,y
     45  08a7		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
     46  08aa		       88	   .blank1    dey
     47  08ab		       10 f2		      bpl	.copyPiece
     48  08ad
     49  08ad		       60		      rts
     50  08ae
     51  08ae				   .rightSide
     52  08ae
     53  08ae		       a0 47		      ldy	#71
     54  08b0		       b9 a2 00    .copyPieceR lda	__pieceShapeBuffer,y
     55  08b3		       f0 06		      beq	.blank2
     56  08b5		       59 48 f0 	      eor	ChessBitmap+72,y
     57  08b8		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
     58  08bb		       88	   .blank2    dey
     59  08bc		       10 f2		      bpl	.copyPieceR
     60  08be
     61  08be		       60		      rts
     62  08bf
     63  08bf							;---------------------------------------------------------------------------------------------------
     64  08bf
      0  08bf					      DEFINE_SUBROUTINE	DrawRow
      1  08bf				   BANK_DrawRow SET	_CURRENT_BANK
      2  08bf					      SUBROUTINE
      3  08bf				   DrawRow
     66  08bf
     67  08bf							; x = row # (and bank#)
     68  08bf
     69  08bf		       a0 00	   .startLine ldy	#0	; 2
     70  08c1
     71  08c1		       85 42	   .drawLine  sta	WSYNC	; 3 @0
     72  08c3
     73  08c3		       b9 f3 f0 	      lda	.LineColour,y	; 5
     74  08c6		       85 48		      sta	COLUPF	; 3 @8
     75  08c8
     76  08c8		       b9 00 f0 	      lda	ChessBitmap0,y	; 5
     77  08cb		       85 4d		      sta	PF0	; 3
     78  08cd		       b9 18 f0 	      lda	ChessBitmap1,y	; 5
     79  08d0		       85 4e		      sta	PF1	; 3
     80  08d2		       b9 30 f0 	      lda	ChessBitmap2,y	; 5
     81  08d5		       85 4f		      sta	PF2	; 3 @32
     82  08d7
      0  08d7					      SLEEP	6	; 6 @30
      1  08d7				   .CYCLES    SET	6
      2  08d7
      3  08d7				  -	      IF	.CYCLES < 2
      4  08d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  08d7				  -	      ERR
      6  08d7					      ENDIF
      7  08d7
      8  08d7				  -	      IF	.CYCLES & 1
      9  08d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  08d7				  -	      nop	0
     11  08d7				  -	      ELSE
     12  08d7				  -	      bit	VSYNC
     13  08d7				  -	      ENDIF
     14  08d7				  -.CYCLES    SET	.CYCLES - 3
     15  08d7					      ENDIF
     16  08d7
     17  08d7					      REPEAT	.CYCLES / 2
     18  08d7		       ea		      nop
     17  08d7					      REPEND
     18  08d8		       ea		      nop
     17  08d8					      REPEND
     18  08d9		       ea		      nop
     19  08da					      REPEND
     84  08da
     85  08da		       b9 48 f0 	      lda	ChessBitmap3,y	; 5
     86  08dd		       85 4d		      sta	PF0	; 3 @38
     87  08df		       b9 60 f0 	      lda	ChessBitmap4,y	; 5
     88  08e2		       85 4e		      sta	PF1	; 3 @46
     89  08e4		       b9 78 f0 	      lda	ChessBitmap5,y	; 5
     90  08e7		       85 4f		      sta	PF2	; 3 @52
     91  08e9
     92  08e9		       c8		      iny		; 2
     93  08ea		       c0 18		      cpy	#24
     94  08ec		       90 d3		      bcc	.drawLine	; 3(2) @57 (taken)
     95  08ee
     96  08ee							; @56
     97  08ee
     98  08ee							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
     99  08ee							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    100  08ee				   SELFMOD_RTS_ON_LAST_ROW
    101  08ee		       e8		      inx		; 2
    102  08ef
    103  08ef		       86 3e		      stx	SET_BANK_RAM	; 3 @61     BANK switch to next row
    104  08f1		       d0 cc		      bne	.startLine	; 3(2) @64 (taken)
    105  08f3
    106  08f3				   .LineColour
    107  08f3							; The ICC triplet colour definitions for a single row of the chessboard
    108  08f3					      REPEAT	8
    109  08f3		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08f3					      REPEND
    109  08f6		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08f6					      REPEND
    109  08f9		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08f9					      REPEND
    109  08fc		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08fc					      REPEND
    109  08ff		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  08ff					      REPEND
    109  0902		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  0902					      REPEND
    109  0905		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    108  0905					      REPEND
    109  0908		       4a 2a 96 	      .byte.b	$4A, $2A, $96
    110  090b					      REPEND
    111  090b
    112  090b							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_INITBANK.asm LEVEL 2 PASS 2
      0  090b					      include	"BANK_INITBANK.asm"	; MUST be after banks that include levels -- otherwise MAX_LEVELBANK is not calculated properly
      1  090b							; Chess
      2  090b							; Atari 2600 Chess display system
      3  090b							; Copyright (c) 2019-2020 Andrew Davie
      4  090b							; andrew@taswegian.com
      5  090b
      0  090b					      NEWBANK	INITBANK
      1  1027 ????				      SEG	INITBANK
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   INITBANK   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	INITBANK
      7  1000
      8  1000
      9  1000							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
     10  1000							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
     11  1000		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
     12  1010		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
     13  1020
     14  1020				   JoyDirY
     15  1020		       00 00		      .byte.b	0,0	;,1,-1,0
     16  1022				   JoyDirX
     17  1022		       01 ff 00 00*	      .byte.b	1,-1,0,0,0
     18  1027
     19  1027							;Data Bit  Direction Player
     20  1027							;		 D7	   right	  P0  D4
     21  1027							;		 D6	   left      P0  D3
     22  1027							;		 D5	   down      P0  D2
     23  1027							;		 D4	   up	     P0  D1
     24  1027							;     A "0" in a data bit indicates the joystick has been moved
     25  1027							;     to close that switch.  All "1's" in a player's nibble
     26  1027							;     indicates that joystick is not moving.
     27  1027
     28  1027							;0  0000 x
     29  1027							;1  0001 x
     30  1027							;2  0010 x
     31  1027							;3  0011 x
     32  1027							;4  0100 x
     33  1027							;5  0101 right down
     34  1027							;6  0110 right up
     35  1027							;7  0111 right
     36  1027							;8  1000 x
     37  1027							;9  1001 left down
     38  1027							;10  1010 left up
     39  1027							;11  1011 left
     40  1027							;12  1100 x
     41  1027							;13  1101 down
     42  1027							;14  1110 up
     43  1027							;15  1111 none
     44  1027
     45  1027
     46  1027							;------------------------------------------------------------------------------
     47  1027
     48  1027							;------------------------------------------------------------------------------
     49  1027
     50  1027
      0  1027					      CHECK_BANK_SIZE	"INITBANK"
      1  1027		       00 27	   .TEMP      =	* - BANK_START
 INITBANK (2K) SIZE =  $27 , FREE= $7d9
      2  1027					      ECHO	"INITBANK", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1027				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1027				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1027				  -	      ERR
      6  1027					      endif
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  1027					      include	"BANK_CHESS_INCLUDES.asm"
      1  1027							; Chess
      2  1027							; Atari 2600 Chess display system
      3  1027							; Copyright (c) 2019-2020 Andrew Davie
      4  1027							; andrew@taswegian.com
      5  1027
      6  1027
      7  1027							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  1027							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  1027							; a single gif of the format..
     10  1027							; a row of white pieces on black squares
     11  1027							; a row of white pieces on white squares
     12  1027							; a row of black pieces on black squares
     13  1027							; a row of black pieces on white squares
     14  1027
     15  1027							; each row has the pieces ordered thus:
     16  1027							; a blank, then pawn, knight, bishop, rook, queen, king
     17  1027							; each piece is 5 pixels wide x 8 pixels deep
     18  1027							; each pixel is from an 8-colour palette.
     19  1027							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  1027							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  1027							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  1027							; bit "b" becomes the second ICC pixel line (2)
     23  1027							; bit "c" becomes the third ICC pixel line (3)
     24  1027							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  1027							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  1027							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  1027							; These 4 shifted positions are stored consecutively in the shape definition
     28  1027
     29  1027							; Example...
     30  1027							;DEFINE_SUBROUTINE WHITE_BISHOP_on_BLACK_SQUARE_0
     31  1027							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  1027							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  1027							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  1027
     35  1027							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  1027							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  1027							; actually have any data in PF1 or PF2.
     38  1027
     39  1027
     40  1027
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  1027					      include	"piece_graphics.asm"
      1  1027							; Import the graphics definitions generated by ConvertChessPieces.py
      0  1027					      NEWBANK	PIECES_0
      1  1fd8 ????				      SEG	PIECES_0
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_0   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_0
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800					      SUBROUTINE
      3  1800				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1800		       00 00 f0 00*	      .byte.b	$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$40,$f0,$40,$40,$f0,$40,$00,$f0,$00,$00,$f0,$00,$00,$f0	;PF0
      4  1818		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848					      SUBROUTINE
      3  1848				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       00 00 7c 00*	      .byte.b	$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$10,$7c,$10,$10,$7c,$10,$00,$7c,$00,$00,$7c,$00,$00,$7c	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890					      SUBROUTINE
      3  1890				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03	;PF1
      5  18c0		       00 00 07 00*	      .byte.b	$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$01,$07,$01,$01,$07,$01,$00,$07,$00,$00,$07,$00,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEFINE_SUBROUTINE	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900					      SUBROUTINE
      3  1900				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       00 00 f8 00*	      .byte.b	$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$20,$f8,$20,$20,$f8,$20,$00,$f8,$00,$00,$f8,$00,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1948				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1948					      SUBROUTINE
      3  1948				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1948		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$40,$00,$f0,$e0,$40,$f0,$40,$40,$f0,$40,$40,$f0,$e0,$e0,$f0,$e0,$00,$f0	;PF0
      4  1960		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1990				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1990					      SUBROUTINE
      3  1990				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$10,$7c,$10,$00,$7c,$38,$10,$7c,$10,$10,$7c,$10,$10,$7c,$38,$38,$7c,$38,$00,$7c	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1a00				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1a00					      SUBROUTINE
      3  1a00				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$01,$00,$03,$00,$00,$03,$00,$00,$03,$01,$01,$03,$01,$00,$03	;PF1
      5  1a30		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$01,$07,$01,$00,$07,$03,$01,$07,$01,$01,$07,$01,$01,$07,$03,$03,$07,$03,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEFINE_SUBROUTINE	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1a48				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1a48					      SUBROUTINE
      3  1a48				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$20,$f8,$20,$00,$f8,$70,$20,$f8,$20,$20,$f8,$20,$20,$f8,$70,$70,$f8,$70,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1a90				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1a90					      SUBROUTINE
      3  1a90				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1a90		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$a0,$b0,$f0,$f0,$f0,$f0,$f0,$f0,$c0,$e0,$e0,$f0,$f0,$70,$f0,$f0,$f0,$f0	;PF0
      4  1aa8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$80,$80	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1b00				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1b00					      SUBROUTINE
      3  1b00				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       00 00 7c 14*	      .byte.b	$00,$00,$7c,$14,$14,$7c,$2c,$68,$7c,$7c,$78,$7c,$7c,$78,$1c,$3c,$38,$7c,$78,$70,$7c,$78,$7c,$7c	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1b48				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1b48					      SUBROUTINE
      3  1b48				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$03,$03,$03,$03,$03,$03,$03,$00,$01,$01,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  1b78		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$07,$06,$02,$07,$07,$03,$07,$07,$03,$07,$07,$03,$07,$03,$01,$07,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1b90				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1b90					      SUBROUTINE
      3  1b90				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       00 00 f8 a0*	      .byte.b	$00,$00,$f8,$a0,$a0,$f8,$d0,$58,$f8,$f8,$78,$f8,$f8,$78,$e0,$f0,$70,$f8,$78,$38,$f8,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1c00				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1c00					      SUBROUTINE
      3  1c00				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1c00		       00 40 f0 40*	      .byte.b	$00,$40,$f0,$40,$40,$b0,$e0,$e0,$f0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$f0,$f0,$f0,$f0	;PF0
      4  1c18		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$80,$80	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1c48				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1c48					      SUBROUTINE
      3  1c48				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       00 10 7c 10*	      .byte.b	$00,$10,$7c,$10,$10,$6c,$38,$38,$7c,$5c,$58,$5c,$6c,$68,$6c,$7c,$78,$7c,$38,$30,$7c,$78,$7c,$7c	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1c90				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1c90					      SUBROUTINE
      3  1c90				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$03,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$01,$03,$03,$03,$03	;PF1
      5  1cc0		       00 01 07 01*	      .byte.b	$00,$01,$07,$01,$01,$06,$03,$03,$07,$07,$03,$07,$06,$02,$06,$07,$03,$07,$03,$01,$07,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1d00				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1d00					      SUBROUTINE
      3  1d00				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       00 20 f8 20*	      .byte.b	$00,$20,$f8,$20,$20,$d8,$70,$70,$f8,$e8,$68,$e8,$d8,$58,$d8,$f8,$78,$f8,$70,$30,$f8,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1d48				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1d48					      SUBROUTINE
      3  1d48				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1d48		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$00,$f0,$50,$50,$f0,$f0,$f0,$f0,$e0,$60,$f0,$e0,$60,$f0,$e0,$60,$f0,$f0,$f0,$f0	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$80	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1d90				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1d90					      SUBROUTINE
      3  1d90				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$00,$7c,$54,$50,$7c,$7c,$78,$7c,$3c,$30,$7c,$38,$30,$7c,$38,$30,$7c,$78,$7c,$7c	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1e00				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1e00					      SUBROUTINE
      3  1e00				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$00,$03,$02,$02,$03,$03,$03,$03,$01,$01,$03,$01,$01,$03,$01,$01,$03,$03,$03,$03	;PF1
      5  1e30		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$00,$07,$05,$01,$07,$07,$03,$07,$07,$01,$07,$03,$01,$07,$03,$01,$07,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEFINE_SUBROUTINE	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1e48				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1e48					      SUBROUTINE
      3  1e48				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$00,$f8,$a8,$28,$f8,$f8,$78,$f8,$f0,$30,$f8,$70,$30,$f8,$70,$30,$f8,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1e90				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1e90					      SUBROUTINE
      3  1e90				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1e90		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$50,$f0,$00,$00,$f0,$50,$50,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$e0,$40,$f0,$e0,$e0,$f0	;PF0
      4  1ea8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1f00				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1f00					      SUBROUTINE
      3  1f00				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$54,$7c,$00,$00,$7c,$54,$50,$7c,$7c,$78,$7c,$7c,$78,$7c,$38,$10,$7c,$38,$38,$7c	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1f48				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1f48					      SUBROUTINE
      3  1f48				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$02,$03,$00,$00,$03,$02,$02,$03,$03,$03,$03,$03,$03,$03,$01,$00,$03,$01,$01,$03	;PF1
      5  1f78		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$07,$00,$00,$07,$05,$01,$07,$07,$03,$07,$07,$03,$07,$03,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1f90				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1f90					      SUBROUTINE
      3  1f90				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$a8,$f8,$00,$00,$f8,$a8,$28,$f8,$f8,$78,$f8,$f8,$78,$f8,$70,$20,$f8,$70,$70,$f8	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_1
      1  27d8 ????				      SEG	PIECES_1
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_1   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_0
      1  2000				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2000					      SUBROUTINE
      3  2000				   WHITE_KING_on_WHITE_SQUARE_0
      3  2000		       00 40 f0 e0*	      .byte.b	$00,$40,$f0,$e0,$e0,$f0,$40,$40,$b0,$f0,$50,$50,$50,$50,$50,$50,$50,$f0,$f0,$60,$f0,$e0,$e0,$f0	;PF0
      4  2018		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$80	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_1
      1  2048				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2048					      SUBROUTINE
      3  2048				   WHITE_KING_on_WHITE_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       00 10 7c 38*	      .byte.b	$00,$10,$7c,$38,$38,$7c,$10,$10,$6c,$7c,$50,$54,$54,$50,$54,$54,$50,$7c,$7c,$30,$7c,$38,$38,$7c	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_2
      1  2090				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2090					      SUBROUTINE
      3  2090				   WHITE_KING_on_WHITE_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       00 00 03 01*	      .byte.b	$00,$00,$03,$01,$01,$03,$00,$00,$03,$03,$02,$02,$02,$02,$02,$02,$02,$03,$03,$01,$03,$01,$01,$03	;PF1
      5  20c0		       00 01 07 03*	      .byte.b	$00,$01,$07,$03,$03,$07,$01,$01,$06,$07,$01,$05,$05,$01,$05,$05,$01,$07,$07,$01,$07,$03,$03,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEFINE_SUBROUTINE	WHITE_KING_on_WHITE_SQUARE_3
      1  2100				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2100					      SUBROUTINE
      3  2100				   WHITE_KING_on_WHITE_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       00 20 f8 70*	      .byte.b	$00,$20,$f8,$70,$70,$f8,$20,$20,$d8,$f8,$28,$a8,$a8,$28,$a8,$a8,$28,$f8,$f8,$30,$f8,$70,$70,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148					      SUBROUTINE
      3  2148				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  2148		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$40,$40,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190					      SUBROUTINE
      3  2190				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200					      SUBROUTINE
      3  2200				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2230		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEFINE_SUBROUTINE	WHITE_BLANK_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248					      SUBROUTINE
      3  2248				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$20,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_0
      1  2290				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2290					      SUBROUTINE
      3  2290				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  2290		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$40,$00,$40,$e0,$40,$40,$40,$40,$40,$40,$40,$40,$e0,$e0,$e0,$e0,$00,$00	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_1
      1  2300				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2300					      SUBROUTINE
      3  2300				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$10,$10,$00,$10,$38,$10,$10,$10,$10,$10,$10,$10,$10,$38,$38,$38,$38,$00,$00	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_2
      1  2348				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2348					      SUBROUTINE
      3  2348				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$00,$00	;PF1
      5  2378		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$01,$00,$01,$03,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03,$03,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEFINE_SUBROUTINE	WHITE_PAWN_on_BLACK_SQUARE_3
      1  2390				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2390					      SUBROUTINE
      3  2390				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$20,$20,$00,$20,$70,$20,$20,$20,$20,$20,$20,$20,$20,$70,$70,$70,$70,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  2400				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2400					      SUBROUTINE
      3  2400				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  2400		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$a0,$b0,$f0,$f0,$f0,$f0,$f0,$f0,$c0,$e0,$e0,$e0,$f0,$70,$f0,$f0,$f0,$f0	;PF0
      4  2418		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$80,$80	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  2448				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2448					      SUBROUTINE
      3  2448				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       00 00 00 14*	      .byte.b	$00,$00,$00,$14,$14,$14,$2c,$68,$7c,$7c,$78,$7c,$7c,$78,$1c,$3c,$38,$38,$78,$70,$78,$78,$7c,$7c	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  2490				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2490					      SUBROUTINE
      3  2490				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$03,$03,$03,$03,$03,$03,$03,$00,$01,$01,$01,$03,$03,$03,$03,$03,$03	;PF1
      5  24c0		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$05,$06,$02,$07,$07,$03,$07,$07,$03,$07,$07,$03,$03,$03,$01,$03,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEFINE_SUBROUTINE	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  2500				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2500					      SUBROUTINE
      3  2500				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       00 00 00 a0*	      .byte.b	$00,$00,$00,$a0,$a0,$a0,$d0,$58,$f8,$f8,$78,$f8,$f8,$78,$e0,$f0,$70,$70,$78,$38,$78,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  2548				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2548					      SUBROUTINE
      3  2548				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  2548		       00 40 40 40*	      .byte.b	$00,$40,$40,$40,$40,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0	;PF0
      4  2560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$80	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  2590				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2590					      SUBROUTINE
      3  2590				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       00 10 10 10*	      .byte.b	$00,$10,$10,$10,$10,$00,$38,$38,$38,$5c,$58,$5c,$6c,$68,$6c,$7c,$78,$7c,$38,$30,$38,$78,$7c,$7c	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  2600				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2600					      SUBROUTINE
      3  2600				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$01,$01,$03,$03,$03	;PF1
      5  2630		       00 01 01 01*	      .byte.b	$00,$01,$01,$01,$01,$00,$03,$03,$03,$07,$03,$07,$06,$02,$06,$07,$03,$07,$03,$01,$03,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEFINE_SUBROUTINE	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  2648				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2648					      SUBROUTINE
      3  2648				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       00 20 20 20*	      .byte.b	$00,$20,$20,$20,$20,$00,$70,$70,$70,$e8,$68,$e8,$d8,$58,$d8,$f8,$78,$f8,$70,$30,$70,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_0
      1  2690				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2690					      SUBROUTINE
      3  2690				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  2690		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$00,$50,$50,$50,$f0,$f0,$f0,$f0,$e0,$60,$e0,$e0,$60,$e0,$e0,$60,$e0,$f0,$f0,$f0	;PF0
      4  26a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_1
      1  2700				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2700					      SUBROUTINE
      3  2700				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$00,$54,$54,$50,$7c,$7c,$78,$7c,$3c,$30,$38,$38,$30,$38,$38,$30,$38,$78,$7c,$7c	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_2
      1  2748				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2748					      SUBROUTINE
      3  2748				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$00,$02,$02,$02,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$01,$03,$03,$03	;PF1
      5  2778		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$00,$05,$05,$01,$07,$07,$03,$07,$07,$01,$03,$03,$01,$03,$03,$01,$03,$03,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEFINE_SUBROUTINE	WHITE_ROOK_on_BLACK_SQUARE_3
      1  2790				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2790					      SUBROUTINE
      3  2790				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$00,$a8,$a8,$28,$f8,$f8,$78,$f8,$f0,$30,$70,$70,$30,$70,$70,$30,$70,$78,$f8,$f8	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_2
      1  2fd8 ????				      SEG	PIECES_2
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_2   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2800				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2800					      SUBROUTINE
      3  2800				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2800		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$50,$50,$00,$00,$00,$50,$50,$50,$f0,$f0,$f0,$f0,$f0,$f0,$e0,$40,$e0,$e0,$e0,$e0	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2848				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2848					      SUBROUTINE
      3  2848				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$54,$54,$00,$00,$00,$54,$50,$54,$7c,$78,$7c,$7c,$78,$7c,$38,$10,$38,$38,$38,$38	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2890				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2890					      SUBROUTINE
      3  2890				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$02,$02,$00,$00,$00,$02,$02,$02,$03,$03,$03,$03,$03,$03,$01,$00,$01,$01,$01,$01	;PF1
      5  28c0		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$05,$00,$00,$00,$05,$01,$05,$07,$03,$07,$07,$03,$07,$03,$01,$03,$03,$03,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEFINE_SUBROUTINE	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2900				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2900					      SUBROUTINE
      3  2900				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$a8,$a8,$00,$00,$00,$a8,$28,$a8,$f8,$78,$f8,$f8,$78,$f8,$70,$20,$70,$70,$70,$70	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_0
      1  2948				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2948					      SUBROUTINE
      3  2948				   WHITE_KING_on_BLACK_SQUARE_0
      3  2948		       00 40 40 e0*	      .byte.b	$00,$40,$40,$e0,$e0,$e0,$40,$40,$b0,$f0,$50,$50,$50,$50,$50,$50,$50,$f0,$f0,$60,$e0,$e0,$e0,$e0	;PF0
      4  2960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$80,$80,$00,$00,$00,$00,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_1
      1  2990				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2990					      SUBROUTINE
      3  2990				   WHITE_KING_on_BLACK_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       00 10 10 38*	      .byte.b	$00,$10,$10,$38,$38,$38,$10,$10,$6c,$7c,$50,$54,$54,$50,$54,$54,$50,$7c,$7c,$30,$38,$38,$38,$38	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_2
      1  2a00				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2a00					      SUBROUTINE
      3  2a00				   WHITE_KING_on_BLACK_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$00,$00,$03,$03,$02,$02,$02,$02,$02,$02,$02,$03,$03,$01,$01,$01,$01,$01	;PF1
      5  2a30		       00 01 01 03*	      .byte.b	$00,$01,$01,$03,$03,$03,$01,$01,$06,$07,$01,$05,$05,$01,$05,$05,$01,$07,$07,$01,$03,$03,$03,$03	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEFINE_SUBROUTINE	WHITE_KING_on_BLACK_SQUARE_3
      1  2a48				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2a48					      SUBROUTINE
      3  2a48				   WHITE_KING_on_BLACK_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       00 20 20 70*	      .byte.b	$00,$20,$20,$70,$70,$70,$20,$20,$d8,$f8,$28,$a8,$a8,$28,$a8,$a8,$28,$f8,$f8,$30,$70,$70,$70,$70	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90					      SUBROUTINE
      3  2a90				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2a90		       00 00 f0 00*	      .byte.b	$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0,$00,$00,$f0	;PF0
      4  2aa8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00					      SUBROUTINE
      3  2b00				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       00 00 7c 00*	      .byte.b	$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c,$00,$00,$7c	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48					      SUBROUTINE
      3  2b48				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03,$00,$00,$03	;PF1
      5  2b78		       00 00 07 00*	      .byte.b	$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07,$00,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEFINE_SUBROUTINE	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90					      SUBROUTINE
      3  2b90				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       00 00 f8 00*	      .byte.b	$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2c00				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2c00					      SUBROUTINE
      3  2c00				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2c00		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$40,$00,$f0,$e0,$40,$b0,$40,$40,$b0,$40,$40,$b0,$e0,$e0,$10,$e0,$00,$f0	;PF0
      4  2c18		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2c48				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2c48					      SUBROUTINE
      3  2c48				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 7c 10*	      .byte.b	$00,$00,$7c,$10,$10,$7c,$10,$00,$7c,$38,$10,$6c,$10,$10,$6c,$10,$10,$6c,$38,$38,$44,$38,$00,$7c	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2c90				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2c90					      SUBROUTINE
      3  2c90				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$00,$00,$03,$01,$00,$03,$00,$00,$03,$00,$00,$03,$01,$01,$02,$01,$00,$03	;PF1
      5  2cc0		       00 00 07 01*	      .byte.b	$00,$00,$07,$01,$01,$07,$01,$00,$07,$03,$01,$06,$01,$01,$06,$01,$01,$06,$03,$03,$04,$03,$00,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEFINE_SUBROUTINE	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2d00				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2d00					      SUBROUTINE
      3  2d00				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 f8 20*	      .byte.b	$00,$00,$f8,$20,$20,$f8,$20,$00,$f8,$70,$20,$d8,$20,$20,$d8,$20,$20,$d8,$70,$70,$88,$70,$00,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2d48				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2d48					      SUBROUTINE
      3  2d48				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2d48		       00 00 f0 40*	      .byte.b	$00,$00,$f0,$40,$40,$f0,$a0,$b0,$00,$f0,$f0,$00,$f0,$c0,$00,$e0,$e0,$10,$f0,$70,$00,$f0,$f0,$00	;PF0
      4  2d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$80,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2d90				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2d90					      SUBROUTINE
      3  2d90				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       00 00 7c 14*	      .byte.b	$00,$00,$7c,$14,$14,$78,$2c,$68,$00,$7c,$78,$00,$7c,$18,$00,$3c,$38,$44,$78,$70,$04,$78,$7c,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2e00				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2e00					      SUBROUTINE
      3  2e00				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$03,$00,$03,$03,$00,$03,$00,$00,$01,$01,$02,$03,$03,$00,$03,$03,$00	;PF1
      5  2e30		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$03,$06,$02,$00,$07,$03,$00,$07,$03,$00,$07,$03,$04,$03,$01,$04,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2e48				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2e48					      SUBROUTINE
      3  2e48				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       00 00 f8 a0*	      .byte.b	$00,$00,$f8,$a0,$a0,$78,$d0,$58,$00,$f8,$78,$00,$f8,$60,$00,$f0,$70,$88,$78,$38,$80,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2e90				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2e90					      SUBROUTINE
      3  2e90				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2e90		       00 40 f0 40*	      .byte.b	$00,$40,$f0,$40,$40,$b0,$e0,$e0,$10,$d0,$d0,$00,$b0,$b0,$00,$f0,$f0,$00,$e0,$60,$10,$f0,$f0,$00	;PF0
      4  2ea8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$80,$00,$80,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2f00				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2f00					      SUBROUTINE
      3  2f00				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       00 10 7c 10*	      .byte.b	$00,$10,$7c,$10,$10,$6c,$38,$38,$44,$5c,$58,$00,$6c,$68,$00,$7c,$78,$00,$38,$30,$44,$78,$7c,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2f48				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2f48					      SUBROUTINE
      3  2f48				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       00 00 03 00*	      .byte.b	$00,$00,$03,$00,$00,$03,$01,$01,$02,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$01,$02,$03,$03,$00	;PF1
      5  2f78		       00 01 07 01*	      .byte.b	$00,$01,$07,$01,$01,$06,$03,$03,$04,$07,$03,$00,$06,$02,$00,$07,$03,$00,$03,$01,$04,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2f90				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2f90					      SUBROUTINE
      3  2f90				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       00 20 f8 20*	      .byte.b	$00,$20,$f8,$20,$20,$d8,$70,$70,$88,$e8,$68,$00,$d8,$58,$00,$f8,$78,$00,$70,$30,$88,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_3
      1  37d8 ????				      SEG	PIECES_3
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_3   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_0
      1  3000				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3000					      SUBROUTINE
      3  3000				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  3000		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$00,$a0,$50,$50,$a0,$f0,$f0,$00,$e0,$60,$10,$e0,$60,$10,$e0,$60,$10,$f0,$f0,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_1
      1  3048				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3048					      SUBROUTINE
      3  3048				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$00,$28,$54,$50,$28,$7c,$78,$00,$3c,$30,$44,$38,$30,$44,$38,$30,$44,$78,$7c,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_2
      1  3090				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3090					      SUBROUTINE
      3  3090				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$00,$01,$02,$02,$01,$03,$03,$00,$01,$01,$02,$01,$01,$02,$01,$01,$02,$03,$03,$00	;PF1
      5  30c0		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$00,$02,$05,$01,$02,$07,$03,$00,$07,$01,$04,$03,$01,$04,$03,$01,$04,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEFINE_SUBROUTINE	BLACK_ROOK_on_WHITE_SQUARE_3
      1  3100				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3100					      SUBROUTINE
      3  3100				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$00,$50,$a8,$28,$50,$f8,$78,$00,$f0,$30,$88,$70,$30,$88,$70,$30,$88,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  3148				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3148					      SUBROUTINE
      3  3148				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  3148		       00 00 f0 50*	      .byte.b	$00,$00,$f0,$50,$50,$a0,$00,$00,$f0,$50,$50,$a0,$f0,$f0,$00,$f0,$f0,$00,$e0,$40,$10,$e0,$e0,$10	;PF0
      4  3160		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80,$00,$00,$80	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  3190				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3190					      SUBROUTINE
      3  3190				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       00 00 7c 54*	      .byte.b	$00,$00,$7c,$54,$54,$28,$00,$00,$7c,$54,$50,$28,$7c,$78,$00,$7c,$78,$04,$38,$10,$44,$38,$38,$44	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  3200				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3200					      SUBROUTINE
      3  3200				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       00 00 03 02*	      .byte.b	$00,$00,$03,$02,$02,$01,$00,$00,$03,$02,$02,$01,$03,$03,$00,$03,$03,$00,$01,$00,$02,$01,$01,$02	;PF1
      5  3230		       00 00 07 05*	      .byte.b	$00,$00,$07,$05,$05,$02,$00,$00,$07,$05,$01,$02,$07,$03,$00,$07,$03,$04,$03,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  3248				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3248					      SUBROUTINE
      3  3248				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       00 00 f8 a8*	      .byte.b	$00,$00,$f8,$a8,$a8,$50,$00,$00,$f8,$a8,$28,$50,$f8,$78,$00,$f8,$78,$80,$70,$20,$88,$70,$70,$88	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_0
      1  3290				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3290					      SUBROUTINE
      3  3290				   BLACK_KING_on_WHITE_SQUARE_0
      3  3290		       40 40 b0 e0*	      .byte.b	$40,$40,$b0,$e0,$e0,$10,$40,$40,$b0,$f0,$50,$00,$50,$50,$00,$50,$50,$a0,$f0,$60,$10,$e0,$e0,$10	;PF0
      4  32a8		       00 00 80 00*	      .byte.b	$00,$00,$80,$00,$00,$80,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$80,$00,$00,$80	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_1
      1  3300				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3300					      SUBROUTINE
      3  3300				   BLACK_KING_on_WHITE_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       10 10 6c 38*	      .byte.b	$10,$10,$6c,$38,$38,$44,$10,$10,$6c,$7c,$50,$00,$54,$50,$00,$54,$50,$28,$7c,$30,$44,$38,$38,$44	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_2
      1  3348				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3348					      SUBROUTINE
      3  3348				   BLACK_KING_on_WHITE_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       00 00 03 01*	      .byte.b	$00,$00,$03,$01,$01,$02,$00,$00,$03,$03,$02,$00,$02,$02,$00,$02,$02,$01,$03,$01,$02,$01,$01,$02	;PF1
      5  3378		       01 01 06 03*	      .byte.b	$01,$01,$06,$03,$03,$04,$01,$01,$06,$07,$01,$00,$05,$01,$00,$05,$01,$02,$07,$01,$04,$03,$03,$04	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEFINE_SUBROUTINE	BLACK_KING_on_WHITE_SQUARE_3
      1  3390				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3390					      SUBROUTINE
      3  3390				   BLACK_KING_on_WHITE_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       20 20 d8 70*	      .byte.b	$20,$20,$d8,$70,$70,$88,$20,$20,$d8,$f8,$28,$00,$a8,$28,$00,$a8,$28,$50,$f8,$30,$88,$70,$70,$88	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400					      SUBROUTINE
      3  3400				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  3400		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448					      SUBROUTINE
      3  3448				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490					      SUBROUTINE
      3  3490				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  34c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEFINE_SUBROUTINE	BLACK_BLANK_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500					      SUBROUTINE
      3  3500				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_0
      1  3548				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548					      SUBROUTINE
      3  3548				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$40,$00,$40,$e0,$40,$00,$40,$40,$00,$40,$40,$00,$e0,$e0,$00,$e0,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_1
      1  3590				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590					      SUBROUTINE
      3  3590				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$10,$10,$00,$10,$38,$10,$00,$10,$10,$00,$10,$10,$00,$38,$38,$00,$38,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_2
      1  3600				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600					      SUBROUTINE
      3  3600				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$01,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$01,$01,$00,$01,$03,$01,$00,$01,$01,$00,$01,$01,$00,$03,$03,$00,$03,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEFINE_SUBROUTINE	BLACK_PAWN_on_BLACK_SQUARE_3
      1  3648				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648					      SUBROUTINE
      3  3648				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$20,$20,$00,$20,$70,$20,$00,$20,$20,$00,$20,$20,$00,$70,$70,$00,$70,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  3690				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3690					      SUBROUTINE
      3  3690				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  3690		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$40,$a0,$b0,$00,$f0,$f0,$00,$f0,$c0,$00,$e0,$e0,$00,$f0,$70,$00,$f0,$f0,$00	;PF0
      4  36a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  3700				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3700					      SUBROUTINE
      3  3700				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 00 14*	      .byte.b	$00,$00,$00,$14,$14,$10,$2c,$68,$00,$7c,$78,$00,$7c,$18,$00,$3c,$38,$00,$78,$70,$00,$78,$7c,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  3748				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3748					      SUBROUTINE
      3  3748				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$03,$00,$03,$03,$00,$03,$00,$00,$01,$01,$00,$03,$03,$00,$03,$03,$00	;PF1
      5  3778		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$01,$06,$02,$00,$07,$03,$00,$07,$03,$00,$07,$03,$00,$03,$01,$00,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEFINE_SUBROUTINE	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  3790				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3790					      SUBROUTINE
      3  3790				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 00 a0*	      .byte.b	$00,$00,$00,$a0,$a0,$20,$d0,$58,$00,$f8,$78,$00,$f8,$60,$00,$f0,$70,$00,$78,$38,$00,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
      0  37d8					      NEWBANK	PIECES_4
      1  3d48 ????				      SEG	PIECES_4
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_4   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800					      SUBROUTINE
      3  3800				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3800		       00 40 40 40*	      .byte.b	$00,$40,$40,$40,$40,$00,$e0,$e0,$00,$d0,$d0,$00,$b0,$b0,$00,$f0,$f0,$00,$e0,$60,$00,$f0,$f0,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848					      SUBROUTINE
      3  3848				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 10 10 10*	      .byte.b	$00,$10,$10,$10,$10,$00,$38,$38,$00,$5c,$58,$00,$6c,$68,$00,$7c,$78,$00,$38,$30,$00,$78,$7c,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890					      SUBROUTINE
      3  3890				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$01,$01,$00,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$01,$00,$03,$03,$00	;PF1
      5  38c0		       00 01 01 01*	      .byte.b	$00,$01,$01,$01,$01,$00,$03,$03,$00,$07,$03,$00,$06,$02,$00,$07,$03,$00,$03,$01,$00,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEFINE_SUBROUTINE	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900					      SUBROUTINE
      3  3900				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 20 20 20*	      .byte.b	$00,$20,$20,$20,$20,$00,$70,$70,$00,$e8,$68,$00,$d8,$58,$00,$f8,$78,$00,$70,$30,$00,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3948				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3948					      SUBROUTINE
      3  3948				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3948		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$00,$00,$50,$50,$a0,$f0,$f0,$00,$e0,$60,$00,$e0,$60,$00,$e0,$60,$00,$f0,$f0,$00	;PF0
      4  3960		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3990				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3990					      SUBROUTINE
      3  3990				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$00,$00,$54,$50,$28,$7c,$78,$00,$3c,$30,$00,$38,$30,$00,$38,$30,$00,$78,$7c,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3a00				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3a00					      SUBROUTINE
      3  3a00				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$00,$00,$02,$02,$01,$03,$03,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$03,$03,$00	;PF1
      5  3a30		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$00,$00,$05,$01,$02,$07,$03,$00,$07,$01,$00,$03,$01,$00,$03,$01,$00,$03,$07,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEFINE_SUBROUTINE	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3a48				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3a48					      SUBROUTINE
      3  3a48				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$00,$00,$a8,$28,$50,$f8,$78,$00,$f0,$30,$00,$70,$30,$00,$70,$30,$00,$78,$f8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3a90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3a90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3a90					      LIST	ON
      0  3a90					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3a90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3a90					      SUBROUTINE
      3  3a90				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3a90		       00 00 00 50*	      .byte.b	$00,$00,$00,$50,$50,$00,$00,$00,$00,$50,$50,$00,$f0,$f0,$00,$f0,$f0,$00,$e0,$40,$00,$e0,$e0,$00	;PF0
      4  3aa8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$00,$00,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ad8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  3ad8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3b00					      LIST	ON
      0  3b00					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3b00				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3b00					      SUBROUTINE
      3  3b00				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b18		       00 00 00 54*	      .byte.b	$00,$00,$00,$54,$54,$00,$00,$00,$00,$54,$50,$00,$7c,$78,$00,$7c,$78,$00,$38,$10,$00,$38,$38,$00	;PF1
      5  3b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3b48					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3b48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3b48					      LIST	ON
      0  3b48					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3b48				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3b48					      SUBROUTINE
      3  3b48				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b60		       00 00 00 02*	      .byte.b	$00,$00,$00,$02,$02,$00,$00,$00,$00,$02,$02,$00,$03,$03,$00,$03,$03,$00,$01,$00,$00,$01,$01,$00	;PF1
      5  3b78		       00 00 00 05*	      .byte.b	$00,$00,$00,$05,$05,$00,$00,$00,$00,$05,$01,$00,$07,$03,$00,$07,$03,$00,$03,$01,$00,$03,$03,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3b90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3b90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3b90					      LIST	ON
      0  3b90					      DEFINE_SUBROUTINE	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3b90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3b90					      SUBROUTINE
      3  3b90				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3bc0		       00 00 00 a8*	      .byte.b	$00,$00,$00,$a8,$a8,$00,$00,$00,$00,$a8,$28,$00,$f8,$78,$00,$f8,$78,$00,$70,$20,$00,$70,$70,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3bd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  3bd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3c00					      LIST	ON
      0  3c00					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_0
      1  3c00				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3c00					      SUBROUTINE
      3  3c00				   BLACK_KING_on_BLACK_SQUARE_0
      3  3c00		       40 40 00 e0*	      .byte.b	$40,$40,$00,$e0,$e0,$00,$40,$40,$b0,$f0,$50,$00,$50,$50,$00,$50,$50,$a0,$f0,$60,$00,$e0,$e0,$00	;PF0
      4  3c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$00,$00,$80,$00,$00,$80,$00,$00,$80,$00,$00,$00,$00,$00	;PF1
      5  3c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3c48					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3c48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3c48					      LIST	ON
      0  3c48					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_1
      1  3c48				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3c48					      SUBROUTINE
      3  3c48				   BLACK_KING_on_BLACK_SQUARE_1
      3  3c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c60		       10 10 00 38*	      .byte.b	$10,$10,$00,$38,$38,$00,$10,$10,$6c,$7c,$50,$00,$54,$50,$00,$54,$50,$28,$7c,$30,$00,$38,$38,$00	;PF1
      5  3c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3c90					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3c90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3c90					      LIST	ON
      0  3c90					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_2
      1  3c90				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3c90					      SUBROUTINE
      3  3c90				   BLACK_KING_on_BLACK_SQUARE_2
      3  3c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ca8		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$03,$03,$02,$00,$02,$02,$00,$02,$02,$01,$03,$01,$00,$01,$01,$00	;PF1
      5  3cc0		       01 01 00 03*	      .byte.b	$01,$01,$00,$03,$03,$00,$01,$01,$06,$07,$01,$00,$05,$01,$00,$05,$01,$02,$07,$01,$00,$03,$03,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3cd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  3cd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3d00					      LIST	ON
      0  3d00					      DEFINE_SUBROUTINE	BLACK_KING_on_BLACK_SQUARE_3
      1  3d00				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3d00					      SUBROUTINE
      3  3d00				   BLACK_KING_on_BLACK_SQUARE_3
      3  3d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d30		       20 20 00 70*	      .byte.b	$20,$20,$00,$70,$70,$00,$20,$20,$d8,$f8,$28,$00,$a8,$28,$00,$a8,$28,$50,$f8,$30,$00,$70,$70,$00	;PF2
------- FILE piece_graphics.asm
      0  3d48					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  3d48		       05 48	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $548 , FREE= $2b8
      2  3d48					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3d48				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3d48				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3d48				  -	      ERR
      6  3d48					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3d48
      0  3d48					      NEWBANK	PIECE_VECTORS
      1  4150 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEFINE_SUBROUTINE	PIECE_VECTOR_LO
      1  4000				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4000					      SUBROUTINE
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     32  401d		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     33  401e		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     34  401f		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     35  4020		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     36  4021		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     37  4022		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     38  4023		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     39  4024		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     40  4025		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     41  4026		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     42  4027		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     43  4028		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     44  4029		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     45  402a		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     46  402b		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     47  402c		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     48  402d		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     49  402e		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     50  402f		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     51  4030		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     52  4031		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     53  4032		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     54  4033		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     55  4034		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     56  4035		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     57  4036		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     58  4037		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     59  4038		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     60  4039		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     61  403a		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     62  403b		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     63  403c		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     64  403d		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     65  403e		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     66  403f		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     67  4040		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     68  4041		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     69  4042		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     70  4043		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     71  4044		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     72  4045		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     73  4046		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     74  4047		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     75  4048		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     76  4049		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     77  404a		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     78  404b		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     79  404c		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     80  404d		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     81  404e		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     82  404f		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     83  4050		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     84  4051		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     85  4052		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     86  4053		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     87  4054		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
     88  4055		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
     89  4056		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
     90  4057		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
     91  4058		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
     92  4059		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
     93  405a		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
     94  405b		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
     95  405c		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
     96  405d		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
     97  405e		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
     98  405f		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
     99  4060		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    100  4061		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    101  4062		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    102  4063		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
      0  4070					      DEFINE_SUBROUTINE	PIECE_VECTOR_HI
      1  4070				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4070					      SUBROUTINE
      3  4070				   PIECE_VECTOR_HI
    116  4070		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    117  4071		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    118  4072		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    119  4073		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    120  4074		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    121  4075		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    122  4076		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    123  4077		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    124  4078		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    125  4079		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    126  407a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    127  407b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    128  407c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    129  407d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    130  407e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    131  407f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    132  4080		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    133  4081		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    134  4082		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    135  4083		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    136  4084		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    137  4085		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    138  4086		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    139  4087		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    140  4088		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    141  4089		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    142  408a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    143  408b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    144  408c		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    145  408d		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    146  408e		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    147  408f		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    148  4090		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    149  4091		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    150  4092		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    151  4093		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    152  4094		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    153  4095		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    154  4096		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    155  4097		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    156  4098		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    157  4099		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    158  409a		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    159  409b		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    160  409c		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    161  409d		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    162  409e		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    163  409f		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    164  40a0		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    165  40a1		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    166  40a2		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    167  40a3		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    168  40a4		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    169  40a5		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    170  40a6		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    171  40a7		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    172  40a8		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    173  40a9		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    174  40aa		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    175  40ab		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    176  40ac		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    177  40ad		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    178  40ae		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    179  40af		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    180  40b0		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    181  40b1		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    182  40b2		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    183  40b3		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    184  40b4		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    185  40b5		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    186  40b6		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    187  40b7		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    188  40b8		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    189  40b9		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    190  40ba		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    191  40bb		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    192  40bc		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    193  40bd		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    194  40be		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    195  40bf		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    196  40c0		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    197  40c1		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    198  40c2		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    199  40c3		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    200  40c4		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    201  40c5		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    202  40c6		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    203  40c7		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    204  40c8		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    205  40c9		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    206  40ca		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    207  40cb		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    208  40cc		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    209  40cd		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    210  40ce		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    211  40cf		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    212  40d0		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    213  40d1		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    214  40d2		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    215  40d3		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    216  40d4		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    217  40d5		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    218  40d6		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    219  40d7		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    224  40dc		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    225  40dd		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    226  40de		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    227  40df		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
      0  40e0					      DEFINE_SUBROUTINE	PIECE_VECTOR_BANK
      1  40e0				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  40e0					      SUBROUTINE
      3  40e0				   PIECE_VECTOR_BANK
    229  40e0		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    230  40e1		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    231  40e2		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    232  40e3		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    233  40e4		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    234  40e5		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    235  40e6		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    236  40e7		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    237  40e8		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    238  40e9		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    239  40ea		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    240  40eb		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    241  40ec		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    242  40ed		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    243  40ee		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    244  40ef		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    245  40f0		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    246  40f1		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    247  40f2		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    248  40f3		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    249  40f4		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    250  40f5		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    251  40f6		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    252  40f7		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    253  40f8		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    254  40f9		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    255  40fa		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    256  40fb		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    257  40fc		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    258  40fd		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    259  40fe		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    260  40ff		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    261  4100		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    262  4101		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    263  4102		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    264  4103		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    265  4104		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    266  4105		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    267  4106		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    268  4107		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    269  4108		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    270  4109		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    271  410a		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    272  410b		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    273  410c		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    274  410d		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    275  410e		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    276  410f		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    277  4110		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    278  4111		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    279  4112		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    280  4113		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    281  4114		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    282  4115		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    283  4116		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    284  4117		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    285  4118		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    286  4119		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    287  411a		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    288  411b		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    289  411c		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    290  411d		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    291  411e		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    292  411f		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    293  4120		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    294  4121		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    295  4122		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    296  4123		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    297  4124		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    298  4125		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    299  4126		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    300  4127		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    301  4128		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    302  4129		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    303  412a		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    304  412b		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    305  412c		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    306  412d		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    307  412e		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    308  412f		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    309  4130		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    310  4131		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    311  4132		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    312  4133		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    313  4134		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    314  4135		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    315  4136		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    316  4137		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    317  4138		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    318  4139		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    319  413a		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    320  413b		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    321  413c		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    322  413d		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    323  413e		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    324  413f		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    325  4140		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    326  4141		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    327  4142		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    328  4143		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    329  4144		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    330  4145		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    331  4146		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    332  4147		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    333  4148		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    334  4149		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    335  414a		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    336  414b		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    337  414c		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    338  414d		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    339  414e		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    340  414f		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    341  4150
    342  4150							; piece index equates...
    343  4150		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    344  4150		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    345  4150		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    346  4150		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    347  4150		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    348  4150		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    349  4150		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    350  4150		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    351  4150		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    352  4150		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    353  4150		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    354  4150		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    355  4150		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    356  4150		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    357  4150		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    358  4150		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    359  4150		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    360  4150		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    361  4150		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    362  4150		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    363  4150		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    364  4150		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    365  4150		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    366  4150		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    367  4150		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    368  4150		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    369  4150		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    370  4150		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    371  4150		       00 1c	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	28
    372  4150		       00 1d	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	29
    373  4150		       00 1e	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	30
    374  4150		       00 1f	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	31
    375  4150		       00 20	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	32
    376  4150		       00 21	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	33
    377  4150		       00 22	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	34
    378  4150		       00 23	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	35
    379  4150		       00 24	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	36
    380  4150		       00 25	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	37
    381  4150		       00 26	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	38
    382  4150		       00 27	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	39
    383  4150		       00 28	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	40
    384  4150		       00 29	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	41
    385  4150		       00 2a	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	42
    386  4150		       00 2b	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	43
    387  4150		       00 2c	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	44
    388  4150		       00 2d	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	45
    389  4150		       00 2e	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	46
    390  4150		       00 2f	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	47
    391  4150		       00 30	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	48
    392  4150		       00 31	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	49
    393  4150		       00 32	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	50
    394  4150		       00 33	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	51
    395  4150		       00 34	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	52
    396  4150		       00 35	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	53
    397  4150		       00 36	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	54
    398  4150		       00 37	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	55
    399  4150		       00 38	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	56
    400  4150		       00 39	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	57
    401  4150		       00 3a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	58
    402  4150		       00 3b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	59
    403  4150		       00 3c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	60
    404  4150		       00 3d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	61
    405  4150		       00 3e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	62
    406  4150		       00 3f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	63
    407  4150		       00 40	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	64
    408  4150		       00 41	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	65
    409  4150		       00 42	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	66
    410  4150		       00 43	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	67
    411  4150		       00 44	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	68
    412  4150		       00 45	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	69
    413  4150		       00 46	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	70
    414  4150		       00 47	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	71
    415  4150		       00 48	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	72
    416  4150		       00 49	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	73
    417  4150		       00 4a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	74
    418  4150		       00 4b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	75
    419  4150		       00 4c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	76
    420  4150		       00 4d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	77
    421  4150		       00 4e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	78
    422  4150		       00 4f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	79
    423  4150		       00 50	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	80
    424  4150		       00 51	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	81
    425  4150		       00 52	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	82
    426  4150		       00 53	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	83
    427  4150		       00 54	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	84
    428  4150		       00 55	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	85
    429  4150		       00 56	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	86
    430  4150		       00 57	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	87
    431  4150		       00 58	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	88
    432  4150		       00 59	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	89
    433  4150		       00 5a	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	90
    434  4150		       00 5b	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	91
    435  4150		       00 5c	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	92
    436  4150		       00 5d	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	93
    437  4150		       00 5e	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	94
    438  4150		       00 5f	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	95
    439  4150		       00 60	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	96
    440  4150		       00 61	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	97
    441  4150		       00 62	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	98
    442  4150		       00 63	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	99
    443  4150		       00 64	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	100
    444  4150		       00 65	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	101
    445  4150		       00 66	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	102
    446  4150		       00 67	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	103
    447  4150		       00 68	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	104
    448  4150		       00 69	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	105
    449  4150		       00 6a	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	106
    450  4150		       00 6b	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	107
    451  4150		       00 6c	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	108
    452  4150		       00 6d	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	109
    453  4150		       00 6e	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	110
    454  4150		       00 6f	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	111
------- FILE BANK_CHESS_INCLUDES.asm
      0  4150					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4150		       01 50	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $150 , FREE= $6b0
      2  4150					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4150				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4150				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4150				  -	      ERR
      6  4150					      endif
------- FILE ./chess.asm
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  4150					      include	"titleScreen.asm"
      0  4150					      NEWBANK	TITLESCREEN
      1  4fc0 ????				      SEG	TITLESCREEN
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   TITLESCREEN SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	TITLESCREEN
      2  4800
      3  4800				   OverscanTime2
      4  4800		       1a 1a		      .byte.b	26, 26
      5  4802		       20 20		      .byte.b	32, 32
      6  4804
      7  4804				   colvec
      8  4804		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  4808
     10  4808
     11  4808		       32 32	   VBlankTime .byte.b	50,50
     12  480a
      0  480a					      DEFINE_SUBROUTINE	TitleScreen
      1  480a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  480a					      SUBROUTINE
      3  480a				   TitleScreen
     14  480a
     15  480a							; Start of new frame
     16  480a
     17  480a							; Start of vertical blank processing
     18  480a
     19  480a				   TitleSequence
     20  480a
     21  480a		       a9 00		      lda	#%00000000
     22  480c		       85 4a		      sta	CTRLPF
     23  480e		       85 49		      sta	COLUBK
     24  4810
     25  4810		       a2 00		      ldx	#0	;Platform
     26  4812		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  4814		       85 99		      sta	colour_table
     28  4816		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     29  4818		       85 9a		      sta	colour_table+1
     30  481a
     31  481a							;		  sta rndHi
     32  481a							;		  sta rnd
     33  481a
     34  481a
     35  481a				  -	      if	0
     36  481a				  -	      lda	#0
     37  481a				  -	      sta	digit
     38  481a				  -	      lda	#$10
     39  481a				  -	      sta	digit+1
     40  481a				  -	      lda	#$20
     41  481a				  -	      sta	digit+2
     42  481a					      endif
     43  481a
     44  481a
     45  481a
     46  481a
      0  481a					      RESYNC
      1  481a
      2  481a		       a9 02		      lda	#%10
      3  481c		       85 41		      sta	VBLANK
      4  481e
      5  481e		       a2 08		      ldx	#8
      6  4820				   .loopResync
      0  4820					      VERTICAL_SYNC
      1  4820		       a9 0e		      lda	#%1110
      2  4822		       85 42	   .VSLP1     sta	WSYNC
      3  4824		       85 40		      sta	VSYNC
      4  4826		       4a		      lsr
      5  4827		       d0 f9		      bne	.VSLP1
      8  4829
      9  4829		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  482b		       a5 96		      lda	Platform
     11  482d		       49 02		      eor	#PAL_50
     12  482f		       d0 02		      bne	.ntsc
     13  4831		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  4833				   .ntsc
     15  4833				   .loopWait
     16  4833		       85 42		      sta	WSYNC
     17  4835		       85 42		      sta	WSYNC
     18  4837		       88		      dey
     19  4838		       d0 f9		      bne	.loopWait
     20  483a		       ca		      dex
     21  483b		       d0 e3		      bne	.loopResync
     48  483d
     49  483d				   RestartFrame0
     50  483d
     51  483d				  -	      if	0
     52  483d				  -	      ldx	#2
     53  483d				  -rollcols   clc
     54  483d				  -	      lda	digit+2
     55  483d				  -	      adc	#$10
     56  483d				  -	      sta	digit+2
     57  483d				  -	      bcc	finxc
     58  483d				  -	      dex
     59  483d				  -	      bpl	rollcols
     60  483d				  -finxc
     61  483d					      endif
     62  483d
      0  483d					      DEFINE_SUBROUTINE	RestartFrame
      1  483d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  483d					      SUBROUTINE
      3  483d				   RestartFrame
     64  483d		       a9 00		      LDA	#0
     65  483f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  4841		       85 42	   .loopVSync2 sta	WSYNC
     67  4843		       85 40		      sta	VSYNC
     68  4845		       4a		      lsr
     69  4846		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  4848
     71  4848							;------------------------------------------------------------------
     72  4848
     73  4848		       a6 96		      ldx	Platform
     74  484a		       bc 08 f0 	      ldy	VBlankTime,x
     75  484d		       8c 96 02 	      sty	TIM64T
     76  4850
     77  4850
     78  4850				  -	      if	0
     79  4850				  -	      lda	SWCHB
     80  4850				  -	      rol
     81  4850				  -	      rol
     82  4850				  -	      rol
     83  4850				  -	      and	#%11
     84  4850				  -	      eor	#PAL
     85  4850				  -	      cmp	Platform
     86  4850				  -	      beq	platOK
     87  4850				  -	      sta	Platform
     88  4850				  -	      jmp	TitleSequence
     89  4850				  -platOK
     90  4850					      endif
     91  4850
     92  4850		       e6 81	   k2	      inc	rnd
     93  4852		       f0 fc		      beq	k2
     94  4854
     95  4854
     96  4854		       85 42	   VerticalBlank sta	WSYNC
     97  4856		       ad 84 02 	      lda	INTIM
     98  4859		       d0 f9		      bne	VerticalBlank
     99  485b		       85 41		      sta	VBLANK
    100  485d
    101  485d							;sta COLUBK
    102  485d
    103  485d							;------------------------------------------------------------------
    104  485d
    105  485d							; Do X scanlines of color-changing (our picture)
    106  485d
    107  485d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  485f		       a2 03	   SokoLogo   ldx	#3
    109  4861		       b1 99	   triplet    lda	(colour_table),y
    110  4863							;    eor digit-1,x
    111  4863		       85 42		      sta	WSYNC
    112  4865		       85 48		      sta	COLUPF	; 3
    113  4867
    114  4867		       b9 b0 f2 	      lda	COL_0,y	; 5
    115  486a		       85 4d		      sta	PF0	; 3   @11
    116  486c		       b9 88 f3 	      lda	COL_1,y	; 5
    117  486f		       85 4e		      sta	PF1	; 3   @19
    118  4871		       b9 60 f4 	      lda	COL_2,y	; 5
    119  4874		       85 4f		      sta	PF2	; 3   @27
    120  4876
    121  4876		       b9 38 f5 	      lda	COL_3,y	; 5
    122  4879		       85 4d		      sta	PF0	; 3   @35
      0  487b					      SLEEP	2	; @37
      1  487b				   .CYCLES    SET	2
      2  487b
      3  487b				  -	      IF	.CYCLES < 2
      4  487b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  487b				  -	      ERR
      6  487b					      ENDIF
      7  487b
      8  487b				  -	      IF	.CYCLES & 1
      9  487b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  487b				  -	      nop	0
     11  487b				  -	      ELSE
     12  487b				  -	      bit	VSYNC
     13  487b				  -	      ENDIF
     14  487b				  -.CYCLES    SET	.CYCLES - 3
     15  487b					      ENDIF
     16  487b
     17  487b					      REPEAT	.CYCLES / 2
     18  487b		       ea		      nop
     19  487c					      REPEND
    124  487c		       b9 10 f6 	      lda	COL_4,y	; 5
    125  487f		       85 4e		      sta	PF1	; 3   @45
      0  4881					      SLEEP	3	; @45
      1  4881				   .CYCLES    SET	3
      2  4881
      3  4881				  -	      IF	.CYCLES < 2
      4  4881				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4881				  -	      ERR
      6  4881					      ENDIF
      7  4881
      8  4881					      IF	.CYCLES & 1
      9  4881					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4881		       04 00		      nop	0
     11  4883				  -	      ELSE
     12  4883				  -	      bit	VSYNC
     13  4883					      ENDIF
     14  4883				   .CYCLES    SET	.CYCLES - 3
     15  4883					      ENDIF
     16  4883
     17  4883				  -	      REPEAT	.CYCLES / 2
     18  4883				  -	      nop
     19  4883					      REPEND
    127  4883		       b9 e8 f6 	      lda	COL_5,y	; 5
    128  4886		       85 4f		      sta	PF2	; 3
    129  4888
    130  4888		       88		      dey		; 2
    131  4889		       ca		      dex		; 2
    132  488a		       d0 d5		      bne	triplet	; 2(3)
    133  488c
    134  488c		       c0 ff		      cpy	#-1	; 2
    135  488e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  4890
    137  4890							;lda #0
    138  4890							;sta PF0
    139  4890							;sta PF1
    140  4890							;sta PF2
    141  4890
    142  4890		       a6 96		      ldx	Platform
    143  4892		       bd 00 f0 	      lda	OverscanTime2,x
    144  4895		       8d 96 02 	      sta	TIM64T
    145  4898
    146  4898				  -	      if	0
    147  4898				  -	      sta	WSYNC
    148  4898				  -	      sta	WSYNC
    149  4898				  -	      sta	WSYNC
    150  4898				  -	      sta	WSYNC
    151  4898				  -	      sta	WSYNC
    152  4898				  -	      SLEEP	8
    153  4898				  -	      jsr	SokoScreen
    154  4898				  -
    155  4898				  -	      lda	#0
    156  4898				  -	      sta	BoardScrollX
    157  4898				  -	      sta	BoardScrollY
    158  4898					      endif
    159  4898
    160  4898							;		ldy #63
    161  4898							;bot2		 sta WSYNC
    162  4898							;		dey
    163  4898							;		bpl bot2
    164  4898
    165  4898							;--------------------------------------------------------------------------
    166  4898
    167  4898		       a9 00		      lda	#0
    168  489a		       85 4d		      sta	PF0
    169  489c		       85 4e		      sta	PF1
    170  489e		       85 4f		      sta	PF2
    171  48a0
    172  48a0
      0  48a0					      NEXT_RANDOM
      1  48a0		       a5 81		      lda	rnd
      2  48a2		       4a		      lsr
      3  48a3		       90 02		      bcc	.skipEOR
      4  48a5		       49 fe		      eor	#RND_EOR_VAL
      5  48a7		       85 81	   .skipEOR   sta	rnd
    174  48a9
    175  48a9							; D1 VBLANK turns off beam
    176  48a9							; It needs to be turned on 37 scanlines later
    177  48a9
    178  48a9				   oscan
    179  48a9		       ad 84 02 	      lda	INTIM
    180  48ac		       d0 fb		      bne	oscan
    181  48ae
    182  48ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  48b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  48b2
    185  48b2				  -	      if	0
    186  48b2				  -	      inc	rnd
    187  48b2				  -	      bne	rdd
    188  48b2				  -	      inc	rndHi
    189  48b2				  -rdd
    190  48b2				  -
    191  48b2				  -	      dec	digitick
    192  48b2				  -	      bpl	ret2
    193  48b2				  -	      lda	#40
    194  48b2				  -	      sta	digitick
    195  48b2				  -
    196  48b2				  -	      jsr	Random
    197  48b2				  -	      and	#3
    198  48b2				  -	      beq	ret2
    199  48b2				  -	      tax
    200  48b2				  -	      jsr	Random
    201  48b2				  -	      and	#$F0
    202  48b2				  -	      sta	digit-1,x
    203  48b2				  -	      jmp	RestartFrame0
    204  48b2				  -
    205  48b2				  -ret2
    206  48b2					      endif
    207  48b2
    208  48b2
    209  48b2		       a5 4c		      lda	INPT4
    210  48b4		       10 03		      bpl	ret
    211  48b6
    212  48b6		       4c 3d f0 	      jmp	RestartFrame
    213  48b9
    214  48b9				   ret
    215  48b9		       60		      rts
    216  48ba
    217  48ba
    218  48ba
    219  48ba					      MAC	lumtable
    220  48ba							; {4} MIN LUM 1
    221  48ba							; {5} MIN LUM 2
    222  48ba							; {6} MIN LUM 3
    223  48ba
    224  48ba				   .LUM1      SET	{4}*256
    225  48ba				   .LUM2      SET	{5}*256
    226  48ba				   .LUM3      SET	{6}*256
    227  48ba
    228  48ba				   .STEP1     =	(256*({7}-{4}))/72
    229  48ba				   .STEP2     =	(256*({8}-{5}))/72
    230  48ba				   .STEP3     =	(256*({9}-{6}))/72
    231  48ba
    232  48ba					      REPEAT	72
    233  48ba					      .byte	{1}+(.LUM1/256)
    234  48ba					      .byte	{2}+(.LUM2/256)
    235  48ba					      .byte	{3}+(.LUM3/256)
    236  48ba
    237  48ba							;    ECHO {1}+(.LUM1/256)
    238  48ba							;    ECHO {2}+(.LUM1/256)
    239  48ba							;    ECHO {3}+(.LUM1/256)
    240  48ba
    241  48ba				   .LUM1      SET	.LUM1 + .STEP1
    242  48ba				   .LUM2      SET	.LUM2 + .STEP2
    243  48ba				   .LUM3      SET	.LUM3 + .STEP3
    244  48ba					      REPEND
    245  48ba					      ENDM		;{1}{2}{3} base colours
    246  48ba
    247  48ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  48ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  48ba
    250  4900		       00 00 00 00*	      align	256
    251  4900							;    ECHO "NTSC LUMS"
    252  4900				   colr_ntsc2
      0  4900					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  4900
      2  4900
      3  4900
      4  4900
      5  4900				   .LUM1      SET	$4*256
      6  4900				   .LUM2      SET	$6*256
      7  4900				   .LUM3      SET	$8*256
      8  4900
      9  4900		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  4900		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  4900		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  4900
     13  4900					      REPEAT	72
     14  4900		       44		      .byte.b	$40+(.LUM1/256)
     15  4901		       26		      .byte.b	$20+(.LUM2/256)
     16  4902		       98		      .byte.b	$90+(.LUM3/256)
     17  4903
     18  4903
     19  4903
     20  4903
     21  4903
     22  4903				   .LUM1      SET	.LUM1 + .STEP1
     23  4903				   .LUM2      SET	.LUM2 + .STEP2
     24  4903				   .LUM3      SET	.LUM3 + .STEP3
     13  4903					      REPEND
     14  4903		       44		      .byte.b	$40+(.LUM1/256)
     15  4904		       26		      .byte.b	$20+(.LUM2/256)
     16  4905		       98		      .byte.b	$90+(.LUM3/256)
     17  4906
     18  4906
     19  4906
     20  4906
     21  4906
     22  4906				   .LUM1      SET	.LUM1 + .STEP1
     23  4906				   .LUM2      SET	.LUM2 + .STEP2
     24  4906				   .LUM3      SET	.LUM3 + .STEP3
     13  4906					      REPEND
     14  4906		       44		      .byte.b	$40+(.LUM1/256)
     15  4907		       26		      .byte.b	$20+(.LUM2/256)
     16  4908		       98		      .byte.b	$90+(.LUM3/256)
     17  4909
     18  4909
     19  4909
     20  4909
     21  4909
     22  4909				   .LUM1      SET	.LUM1 + .STEP1
     23  4909				   .LUM2      SET	.LUM2 + .STEP2
     24  4909				   .LUM3      SET	.LUM3 + .STEP3
     13  4909					      REPEND
     14  4909		       44		      .byte.b	$40+(.LUM1/256)
     15  490a		       26		      .byte.b	$20+(.LUM2/256)
     16  490b		       98		      .byte.b	$90+(.LUM3/256)
     17  490c
     18  490c
     19  490c
     20  490c
     21  490c
     22  490c				   .LUM1      SET	.LUM1 + .STEP1
     23  490c				   .LUM2      SET	.LUM2 + .STEP2
     24  490c				   .LUM3      SET	.LUM3 + .STEP3
     13  490c					      REPEND
     14  490c		       44		      .byte.b	$40+(.LUM1/256)
     15  490d		       26		      .byte.b	$20+(.LUM2/256)
     16  490e		       98		      .byte.b	$90+(.LUM3/256)
     17  490f
     18  490f
     19  490f
     20  490f
     21  490f
     22  490f				   .LUM1      SET	.LUM1 + .STEP1
     23  490f				   .LUM2      SET	.LUM2 + .STEP2
     24  490f				   .LUM3      SET	.LUM3 + .STEP3
     13  490f					      REPEND
     14  490f		       44		      .byte.b	$40+(.LUM1/256)
     15  4910		       26		      .byte.b	$20+(.LUM2/256)
     16  4911		       98		      .byte.b	$90+(.LUM3/256)
     17  4912
     18  4912
     19  4912
     20  4912
     21  4912
     22  4912				   .LUM1      SET	.LUM1 + .STEP1
     23  4912				   .LUM2      SET	.LUM2 + .STEP2
     24  4912				   .LUM3      SET	.LUM3 + .STEP3
     13  4912					      REPEND
     14  4912		       44		      .byte.b	$40+(.LUM1/256)
     15  4913		       26		      .byte.b	$20+(.LUM2/256)
     16  4914		       98		      .byte.b	$90+(.LUM3/256)
     17  4915
     18  4915
     19  4915
     20  4915
     21  4915
     22  4915				   .LUM1      SET	.LUM1 + .STEP1
     23  4915				   .LUM2      SET	.LUM2 + .STEP2
     24  4915				   .LUM3      SET	.LUM3 + .STEP3
     13  4915					      REPEND
     14  4915		       44		      .byte.b	$40+(.LUM1/256)
     15  4916		       26		      .byte.b	$20+(.LUM2/256)
     16  4917		       98		      .byte.b	$90+(.LUM3/256)
     17  4918
     18  4918
     19  4918
     20  4918
     21  4918
     22  4918				   .LUM1      SET	.LUM1 + .STEP1
     23  4918				   .LUM2      SET	.LUM2 + .STEP2
     24  4918				   .LUM3      SET	.LUM3 + .STEP3
     13  4918					      REPEND
     14  4918		       44		      .byte.b	$40+(.LUM1/256)
     15  4919		       26		      .byte.b	$20+(.LUM2/256)
     16  491a		       98		      .byte.b	$90+(.LUM3/256)
     17  491b
     18  491b
     19  491b
     20  491b
     21  491b
     22  491b				   .LUM1      SET	.LUM1 + .STEP1
     23  491b				   .LUM2      SET	.LUM2 + .STEP2
     24  491b				   .LUM3      SET	.LUM3 + .STEP3
     13  491b					      REPEND
     14  491b		       44		      .byte.b	$40+(.LUM1/256)
     15  491c		       26		      .byte.b	$20+(.LUM2/256)
     16  491d		       98		      .byte.b	$90+(.LUM3/256)
     17  491e
     18  491e
     19  491e
     20  491e
     21  491e
     22  491e				   .LUM1      SET	.LUM1 + .STEP1
     23  491e				   .LUM2      SET	.LUM2 + .STEP2
     24  491e				   .LUM3      SET	.LUM3 + .STEP3
     13  491e					      REPEND
     14  491e		       44		      .byte.b	$40+(.LUM1/256)
     15  491f		       26		      .byte.b	$20+(.LUM2/256)
     16  4920		       98		      .byte.b	$90+(.LUM3/256)
     17  4921
     18  4921
     19  4921
     20  4921
     21  4921
     22  4921				   .LUM1      SET	.LUM1 + .STEP1
     23  4921				   .LUM2      SET	.LUM2 + .STEP2
     24  4921				   .LUM3      SET	.LUM3 + .STEP3
     13  4921					      REPEND
     14  4921		       44		      .byte.b	$40+(.LUM1/256)
     15  4922		       26		      .byte.b	$20+(.LUM2/256)
     16  4923		       98		      .byte.b	$90+(.LUM3/256)
     17  4924
     18  4924
     19  4924
     20  4924
     21  4924
     22  4924				   .LUM1      SET	.LUM1 + .STEP1
     23  4924				   .LUM2      SET	.LUM2 + .STEP2
     24  4924				   .LUM3      SET	.LUM3 + .STEP3
     13  4924					      REPEND
     14  4924		       44		      .byte.b	$40+(.LUM1/256)
     15  4925		       26		      .byte.b	$20+(.LUM2/256)
     16  4926		       98		      .byte.b	$90+(.LUM3/256)
     17  4927
     18  4927
     19  4927
     20  4927
     21  4927
     22  4927				   .LUM1      SET	.LUM1 + .STEP1
     23  4927				   .LUM2      SET	.LUM2 + .STEP2
     24  4927				   .LUM3      SET	.LUM3 + .STEP3
     13  4927					      REPEND
     14  4927		       44		      .byte.b	$40+(.LUM1/256)
     15  4928		       26		      .byte.b	$20+(.LUM2/256)
     16  4929		       98		      .byte.b	$90+(.LUM3/256)
     17  492a
     18  492a
     19  492a
     20  492a
     21  492a
     22  492a				   .LUM1      SET	.LUM1 + .STEP1
     23  492a				   .LUM2      SET	.LUM2 + .STEP2
     24  492a				   .LUM3      SET	.LUM3 + .STEP3
     13  492a					      REPEND
     14  492a		       44		      .byte.b	$40+(.LUM1/256)
     15  492b		       26		      .byte.b	$20+(.LUM2/256)
     16  492c		       98		      .byte.b	$90+(.LUM3/256)
     17  492d
     18  492d
     19  492d
     20  492d
     21  492d
     22  492d				   .LUM1      SET	.LUM1 + .STEP1
     23  492d				   .LUM2      SET	.LUM2 + .STEP2
     24  492d				   .LUM3      SET	.LUM3 + .STEP3
     13  492d					      REPEND
     14  492d		       44		      .byte.b	$40+(.LUM1/256)
     15  492e		       26		      .byte.b	$20+(.LUM2/256)
     16  492f		       98		      .byte.b	$90+(.LUM3/256)
     17  4930
     18  4930
     19  4930
     20  4930
     21  4930
     22  4930				   .LUM1      SET	.LUM1 + .STEP1
     23  4930				   .LUM2      SET	.LUM2 + .STEP2
     24  4930				   .LUM3      SET	.LUM3 + .STEP3
     13  4930					      REPEND
     14  4930		       44		      .byte.b	$40+(.LUM1/256)
     15  4931		       26		      .byte.b	$20+(.LUM2/256)
     16  4932		       98		      .byte.b	$90+(.LUM3/256)
     17  4933
     18  4933
     19  4933
     20  4933
     21  4933
     22  4933				   .LUM1      SET	.LUM1 + .STEP1
     23  4933				   .LUM2      SET	.LUM2 + .STEP2
     24  4933				   .LUM3      SET	.LUM3 + .STEP3
     13  4933					      REPEND
     14  4933		       44		      .byte.b	$40+(.LUM1/256)
     15  4934		       26		      .byte.b	$20+(.LUM2/256)
     16  4935		       98		      .byte.b	$90+(.LUM3/256)
     17  4936
     18  4936
     19  4936
     20  4936
     21  4936
     22  4936				   .LUM1      SET	.LUM1 + .STEP1
     23  4936				   .LUM2      SET	.LUM2 + .STEP2
     24  4936				   .LUM3      SET	.LUM3 + .STEP3
     13  4936					      REPEND
     14  4936		       44		      .byte.b	$40+(.LUM1/256)
     15  4937		       26		      .byte.b	$20+(.LUM2/256)
     16  4938		       98		      .byte.b	$90+(.LUM3/256)
     17  4939
     18  4939
     19  4939
     20  4939
     21  4939
     22  4939				   .LUM1      SET	.LUM1 + .STEP1
     23  4939				   .LUM2      SET	.LUM2 + .STEP2
     24  4939				   .LUM3      SET	.LUM3 + .STEP3
     13  4939					      REPEND
     14  4939		       44		      .byte.b	$40+(.LUM1/256)
     15  493a		       26		      .byte.b	$20+(.LUM2/256)
     16  493b		       98		      .byte.b	$90+(.LUM3/256)
     17  493c
     18  493c
     19  493c
     20  493c
     21  493c
     22  493c				   .LUM1      SET	.LUM1 + .STEP1
     23  493c				   .LUM2      SET	.LUM2 + .STEP2
     24  493c				   .LUM3      SET	.LUM3 + .STEP3
     13  493c					      REPEND
     14  493c		       44		      .byte.b	$40+(.LUM1/256)
     15  493d		       26		      .byte.b	$20+(.LUM2/256)
     16  493e		       98		      .byte.b	$90+(.LUM3/256)
     17  493f
     18  493f
     19  493f
     20  493f
     21  493f
     22  493f				   .LUM1      SET	.LUM1 + .STEP1
     23  493f				   .LUM2      SET	.LUM2 + .STEP2
     24  493f				   .LUM3      SET	.LUM3 + .STEP3
     13  493f					      REPEND
     14  493f		       44		      .byte.b	$40+(.LUM1/256)
     15  4940		       26		      .byte.b	$20+(.LUM2/256)
     16  4941		       98		      .byte.b	$90+(.LUM3/256)
     17  4942
     18  4942
     19  4942
     20  4942
     21  4942
     22  4942				   .LUM1      SET	.LUM1 + .STEP1
     23  4942				   .LUM2      SET	.LUM2 + .STEP2
     24  4942				   .LUM3      SET	.LUM3 + .STEP3
     13  4942					      REPEND
     14  4942		       44		      .byte.b	$40+(.LUM1/256)
     15  4943		       26		      .byte.b	$20+(.LUM2/256)
     16  4944		       98		      .byte.b	$90+(.LUM3/256)
     17  4945
     18  4945
     19  4945
     20  4945
     21  4945
     22  4945				   .LUM1      SET	.LUM1 + .STEP1
     23  4945				   .LUM2      SET	.LUM2 + .STEP2
     24  4945				   .LUM3      SET	.LUM3 + .STEP3
     13  4945					      REPEND
     14  4945		       44		      .byte.b	$40+(.LUM1/256)
     15  4946		       26		      .byte.b	$20+(.LUM2/256)
     16  4947		       98		      .byte.b	$90+(.LUM3/256)
     17  4948
     18  4948
     19  4948
     20  4948
     21  4948
     22  4948				   .LUM1      SET	.LUM1 + .STEP1
     23  4948				   .LUM2      SET	.LUM2 + .STEP2
     24  4948				   .LUM3      SET	.LUM3 + .STEP3
     13  4948					      REPEND
     14  4948		       44		      .byte.b	$40+(.LUM1/256)
     15  4949		       26		      .byte.b	$20+(.LUM2/256)
     16  494a		       98		      .byte.b	$90+(.LUM3/256)
     17  494b
     18  494b
     19  494b
     20  494b
     21  494b
     22  494b				   .LUM1      SET	.LUM1 + .STEP1
     23  494b				   .LUM2      SET	.LUM2 + .STEP2
     24  494b				   .LUM3      SET	.LUM3 + .STEP3
     13  494b					      REPEND
     14  494b		       44		      .byte.b	$40+(.LUM1/256)
     15  494c		       26		      .byte.b	$20+(.LUM2/256)
     16  494d		       98		      .byte.b	$90+(.LUM3/256)
     17  494e
     18  494e
     19  494e
     20  494e
     21  494e
     22  494e				   .LUM1      SET	.LUM1 + .STEP1
     23  494e				   .LUM2      SET	.LUM2 + .STEP2
     24  494e				   .LUM3      SET	.LUM3 + .STEP3
     13  494e					      REPEND
     14  494e		       44		      .byte.b	$40+(.LUM1/256)
     15  494f		       26		      .byte.b	$20+(.LUM2/256)
     16  4950		       98		      .byte.b	$90+(.LUM3/256)
     17  4951
     18  4951
     19  4951
     20  4951
     21  4951
     22  4951				   .LUM1      SET	.LUM1 + .STEP1
     23  4951				   .LUM2      SET	.LUM2 + .STEP2
     24  4951				   .LUM3      SET	.LUM3 + .STEP3
     13  4951					      REPEND
     14  4951		       44		      .byte.b	$40+(.LUM1/256)
     15  4952		       26		      .byte.b	$20+(.LUM2/256)
     16  4953		       98		      .byte.b	$90+(.LUM3/256)
     17  4954
     18  4954
     19  4954
     20  4954
     21  4954
     22  4954				   .LUM1      SET	.LUM1 + .STEP1
     23  4954				   .LUM2      SET	.LUM2 + .STEP2
     24  4954				   .LUM3      SET	.LUM3 + .STEP3
     13  4954					      REPEND
     14  4954		       44		      .byte.b	$40+(.LUM1/256)
     15  4955		       26		      .byte.b	$20+(.LUM2/256)
     16  4956		       98		      .byte.b	$90+(.LUM3/256)
     17  4957
     18  4957
     19  4957
     20  4957
     21  4957
     22  4957				   .LUM1      SET	.LUM1 + .STEP1
     23  4957				   .LUM2      SET	.LUM2 + .STEP2
     24  4957				   .LUM3      SET	.LUM3 + .STEP3
     13  4957					      REPEND
     14  4957		       44		      .byte.b	$40+(.LUM1/256)
     15  4958		       26		      .byte.b	$20+(.LUM2/256)
     16  4959		       98		      .byte.b	$90+(.LUM3/256)
     17  495a
     18  495a
     19  495a
     20  495a
     21  495a
     22  495a				   .LUM1      SET	.LUM1 + .STEP1
     23  495a				   .LUM2      SET	.LUM2 + .STEP2
     24  495a				   .LUM3      SET	.LUM3 + .STEP3
     13  495a					      REPEND
     14  495a		       44		      .byte.b	$40+(.LUM1/256)
     15  495b		       26		      .byte.b	$20+(.LUM2/256)
     16  495c		       98		      .byte.b	$90+(.LUM3/256)
     17  495d
     18  495d
     19  495d
     20  495d
     21  495d
     22  495d				   .LUM1      SET	.LUM1 + .STEP1
     23  495d				   .LUM2      SET	.LUM2 + .STEP2
     24  495d				   .LUM3      SET	.LUM3 + .STEP3
     13  495d					      REPEND
     14  495d		       44		      .byte.b	$40+(.LUM1/256)
     15  495e		       26		      .byte.b	$20+(.LUM2/256)
     16  495f		       98		      .byte.b	$90+(.LUM3/256)
     17  4960
     18  4960
     19  4960
     20  4960
     21  4960
     22  4960				   .LUM1      SET	.LUM1 + .STEP1
     23  4960				   .LUM2      SET	.LUM2 + .STEP2
     24  4960				   .LUM3      SET	.LUM3 + .STEP3
     13  4960					      REPEND
     14  4960		       44		      .byte.b	$40+(.LUM1/256)
     15  4961		       26		      .byte.b	$20+(.LUM2/256)
     16  4962		       98		      .byte.b	$90+(.LUM3/256)
     17  4963
     18  4963
     19  4963
     20  4963
     21  4963
     22  4963				   .LUM1      SET	.LUM1 + .STEP1
     23  4963				   .LUM2      SET	.LUM2 + .STEP2
     24  4963				   .LUM3      SET	.LUM3 + .STEP3
     13  4963					      REPEND
     14  4963		       44		      .byte.b	$40+(.LUM1/256)
     15  4964		       26		      .byte.b	$20+(.LUM2/256)
     16  4965		       98		      .byte.b	$90+(.LUM3/256)
     17  4966
     18  4966
     19  4966
     20  4966
     21  4966
     22  4966				   .LUM1      SET	.LUM1 + .STEP1
     23  4966				   .LUM2      SET	.LUM2 + .STEP2
     24  4966				   .LUM3      SET	.LUM3 + .STEP3
     13  4966					      REPEND
     14  4966		       44		      .byte.b	$40+(.LUM1/256)
     15  4967		       26		      .byte.b	$20+(.LUM2/256)
     16  4968		       98		      .byte.b	$90+(.LUM3/256)
     17  4969
     18  4969
     19  4969
     20  4969
     21  4969
     22  4969				   .LUM1      SET	.LUM1 + .STEP1
     23  4969				   .LUM2      SET	.LUM2 + .STEP2
     24  4969				   .LUM3      SET	.LUM3 + .STEP3
     13  4969					      REPEND
     14  4969		       44		      .byte.b	$40+(.LUM1/256)
     15  496a		       26		      .byte.b	$20+(.LUM2/256)
     16  496b		       98		      .byte.b	$90+(.LUM3/256)
     17  496c
     18  496c
     19  496c
     20  496c
     21  496c
     22  496c				   .LUM1      SET	.LUM1 + .STEP1
     23  496c				   .LUM2      SET	.LUM2 + .STEP2
     24  496c				   .LUM3      SET	.LUM3 + .STEP3
     13  496c					      REPEND
     14  496c		       44		      .byte.b	$40+(.LUM1/256)
     15  496d		       26		      .byte.b	$20+(.LUM2/256)
     16  496e		       98		      .byte.b	$90+(.LUM3/256)
     17  496f
     18  496f
     19  496f
     20  496f
     21  496f
     22  496f				   .LUM1      SET	.LUM1 + .STEP1
     23  496f				   .LUM2      SET	.LUM2 + .STEP2
     24  496f				   .LUM3      SET	.LUM3 + .STEP3
     13  496f					      REPEND
     14  496f		       44		      .byte.b	$40+(.LUM1/256)
     15  4970		       26		      .byte.b	$20+(.LUM2/256)
     16  4971		       98		      .byte.b	$90+(.LUM3/256)
     17  4972
     18  4972
     19  4972
     20  4972
     21  4972
     22  4972				   .LUM1      SET	.LUM1 + .STEP1
     23  4972				   .LUM2      SET	.LUM2 + .STEP2
     24  4972				   .LUM3      SET	.LUM3 + .STEP3
     13  4972					      REPEND
     14  4972		       44		      .byte.b	$40+(.LUM1/256)
     15  4973		       26		      .byte.b	$20+(.LUM2/256)
     16  4974		       98		      .byte.b	$90+(.LUM3/256)
     17  4975
     18  4975
     19  4975
     20  4975
     21  4975
     22  4975				   .LUM1      SET	.LUM1 + .STEP1
     23  4975				   .LUM2      SET	.LUM2 + .STEP2
     24  4975				   .LUM3      SET	.LUM3 + .STEP3
     13  4975					      REPEND
     14  4975		       44		      .byte.b	$40+(.LUM1/256)
     15  4976		       26		      .byte.b	$20+(.LUM2/256)
     16  4977		       98		      .byte.b	$90+(.LUM3/256)
     17  4978
     18  4978
     19  4978
     20  4978
     21  4978
     22  4978				   .LUM1      SET	.LUM1 + .STEP1
     23  4978				   .LUM2      SET	.LUM2 + .STEP2
     24  4978				   .LUM3      SET	.LUM3 + .STEP3
     13  4978					      REPEND
     14  4978		       44		      .byte.b	$40+(.LUM1/256)
     15  4979		       26		      .byte.b	$20+(.LUM2/256)
     16  497a		       98		      .byte.b	$90+(.LUM3/256)
     17  497b
     18  497b
     19  497b
     20  497b
     21  497b
     22  497b				   .LUM1      SET	.LUM1 + .STEP1
     23  497b				   .LUM2      SET	.LUM2 + .STEP2
     24  497b				   .LUM3      SET	.LUM3 + .STEP3
     13  497b					      REPEND
     14  497b		       44		      .byte.b	$40+(.LUM1/256)
     15  497c		       26		      .byte.b	$20+(.LUM2/256)
     16  497d		       98		      .byte.b	$90+(.LUM3/256)
     17  497e
     18  497e
     19  497e
     20  497e
     21  497e
     22  497e				   .LUM1      SET	.LUM1 + .STEP1
     23  497e				   .LUM2      SET	.LUM2 + .STEP2
     24  497e				   .LUM3      SET	.LUM3 + .STEP3
     13  497e					      REPEND
     14  497e		       44		      .byte.b	$40+(.LUM1/256)
     15  497f		       26		      .byte.b	$20+(.LUM2/256)
     16  4980		       98		      .byte.b	$90+(.LUM3/256)
     17  4981
     18  4981
     19  4981
     20  4981
     21  4981
     22  4981				   .LUM1      SET	.LUM1 + .STEP1
     23  4981				   .LUM2      SET	.LUM2 + .STEP2
     24  4981				   .LUM3      SET	.LUM3 + .STEP3
     13  4981					      REPEND
     14  4981		       44		      .byte.b	$40+(.LUM1/256)
     15  4982		       26		      .byte.b	$20+(.LUM2/256)
     16  4983		       98		      .byte.b	$90+(.LUM3/256)
     17  4984
     18  4984
     19  4984
     20  4984
     21  4984
     22  4984				   .LUM1      SET	.LUM1 + .STEP1
     23  4984				   .LUM2      SET	.LUM2 + .STEP2
     24  4984				   .LUM3      SET	.LUM3 + .STEP3
     13  4984					      REPEND
     14  4984		       44		      .byte.b	$40+(.LUM1/256)
     15  4985		       26		      .byte.b	$20+(.LUM2/256)
     16  4986		       98		      .byte.b	$90+(.LUM3/256)
     17  4987
     18  4987
     19  4987
     20  4987
     21  4987
     22  4987				   .LUM1      SET	.LUM1 + .STEP1
     23  4987				   .LUM2      SET	.LUM2 + .STEP2
     24  4987				   .LUM3      SET	.LUM3 + .STEP3
     13  4987					      REPEND
     14  4987		       44		      .byte.b	$40+(.LUM1/256)
     15  4988		       26		      .byte.b	$20+(.LUM2/256)
     16  4989		       98		      .byte.b	$90+(.LUM3/256)
     17  498a
     18  498a
     19  498a
     20  498a
     21  498a
     22  498a				   .LUM1      SET	.LUM1 + .STEP1
     23  498a				   .LUM2      SET	.LUM2 + .STEP2
     24  498a				   .LUM3      SET	.LUM3 + .STEP3
     13  498a					      REPEND
     14  498a		       44		      .byte.b	$40+(.LUM1/256)
     15  498b		       26		      .byte.b	$20+(.LUM2/256)
     16  498c		       98		      .byte.b	$90+(.LUM3/256)
     17  498d
     18  498d
     19  498d
     20  498d
     21  498d
     22  498d				   .LUM1      SET	.LUM1 + .STEP1
     23  498d				   .LUM2      SET	.LUM2 + .STEP2
     24  498d				   .LUM3      SET	.LUM3 + .STEP3
     13  498d					      REPEND
     14  498d		       44		      .byte.b	$40+(.LUM1/256)
     15  498e		       26		      .byte.b	$20+(.LUM2/256)
     16  498f		       98		      .byte.b	$90+(.LUM3/256)
     17  4990
     18  4990
     19  4990
     20  4990
     21  4990
     22  4990				   .LUM1      SET	.LUM1 + .STEP1
     23  4990				   .LUM2      SET	.LUM2 + .STEP2
     24  4990				   .LUM3      SET	.LUM3 + .STEP3
     13  4990					      REPEND
     14  4990		       44		      .byte.b	$40+(.LUM1/256)
     15  4991		       26		      .byte.b	$20+(.LUM2/256)
     16  4992		       98		      .byte.b	$90+(.LUM3/256)
     17  4993
     18  4993
     19  4993
     20  4993
     21  4993
     22  4993				   .LUM1      SET	.LUM1 + .STEP1
     23  4993				   .LUM2      SET	.LUM2 + .STEP2
     24  4993				   .LUM3      SET	.LUM3 + .STEP3
     13  4993					      REPEND
     14  4993		       44		      .byte.b	$40+(.LUM1/256)
     15  4994		       26		      .byte.b	$20+(.LUM2/256)
     16  4995		       98		      .byte.b	$90+(.LUM3/256)
     17  4996
     18  4996
     19  4996
     20  4996
     21  4996
     22  4996				   .LUM1      SET	.LUM1 + .STEP1
     23  4996				   .LUM2      SET	.LUM2 + .STEP2
     24  4996				   .LUM3      SET	.LUM3 + .STEP3
     13  4996					      REPEND
     14  4996		       44		      .byte.b	$40+(.LUM1/256)
     15  4997		       26		      .byte.b	$20+(.LUM2/256)
     16  4998		       98		      .byte.b	$90+(.LUM3/256)
     17  4999
     18  4999
     19  4999
     20  4999
     21  4999
     22  4999				   .LUM1      SET	.LUM1 + .STEP1
     23  4999				   .LUM2      SET	.LUM2 + .STEP2
     24  4999				   .LUM3      SET	.LUM3 + .STEP3
     13  4999					      REPEND
     14  4999		       44		      .byte.b	$40+(.LUM1/256)
     15  499a		       26		      .byte.b	$20+(.LUM2/256)
     16  499b		       98		      .byte.b	$90+(.LUM3/256)
     17  499c
     18  499c
     19  499c
     20  499c
     21  499c
     22  499c				   .LUM1      SET	.LUM1 + .STEP1
     23  499c				   .LUM2      SET	.LUM2 + .STEP2
     24  499c				   .LUM3      SET	.LUM3 + .STEP3
     13  499c					      REPEND
     14  499c		       44		      .byte.b	$40+(.LUM1/256)
     15  499d		       26		      .byte.b	$20+(.LUM2/256)
     16  499e		       98		      .byte.b	$90+(.LUM3/256)
     17  499f
     18  499f
     19  499f
     20  499f
     21  499f
     22  499f				   .LUM1      SET	.LUM1 + .STEP1
     23  499f				   .LUM2      SET	.LUM2 + .STEP2
     24  499f				   .LUM3      SET	.LUM3 + .STEP3
     13  499f					      REPEND
     14  499f		       44		      .byte.b	$40+(.LUM1/256)
     15  49a0		       26		      .byte.b	$20+(.LUM2/256)
     16  49a1		       98		      .byte.b	$90+(.LUM3/256)
     17  49a2
     18  49a2
     19  49a2
     20  49a2
     21  49a2
     22  49a2				   .LUM1      SET	.LUM1 + .STEP1
     23  49a2				   .LUM2      SET	.LUM2 + .STEP2
     24  49a2				   .LUM3      SET	.LUM3 + .STEP3
     13  49a2					      REPEND
     14  49a2		       44		      .byte.b	$40+(.LUM1/256)
     15  49a3		       26		      .byte.b	$20+(.LUM2/256)
     16  49a4		       98		      .byte.b	$90+(.LUM3/256)
     17  49a5
     18  49a5
     19  49a5
     20  49a5
     21  49a5
     22  49a5				   .LUM1      SET	.LUM1 + .STEP1
     23  49a5				   .LUM2      SET	.LUM2 + .STEP2
     24  49a5				   .LUM3      SET	.LUM3 + .STEP3
     13  49a5					      REPEND
     14  49a5		       44		      .byte.b	$40+(.LUM1/256)
     15  49a6		       26		      .byte.b	$20+(.LUM2/256)
     16  49a7		       98		      .byte.b	$90+(.LUM3/256)
     17  49a8
     18  49a8
     19  49a8
     20  49a8
     21  49a8
     22  49a8				   .LUM1      SET	.LUM1 + .STEP1
     23  49a8				   .LUM2      SET	.LUM2 + .STEP2
     24  49a8				   .LUM3      SET	.LUM3 + .STEP3
     13  49a8					      REPEND
     14  49a8		       44		      .byte.b	$40+(.LUM1/256)
     15  49a9		       26		      .byte.b	$20+(.LUM2/256)
     16  49aa		       98		      .byte.b	$90+(.LUM3/256)
     17  49ab
     18  49ab
     19  49ab
     20  49ab
     21  49ab
     22  49ab				   .LUM1      SET	.LUM1 + .STEP1
     23  49ab				   .LUM2      SET	.LUM2 + .STEP2
     24  49ab				   .LUM3      SET	.LUM3 + .STEP3
     13  49ab					      REPEND
     14  49ab		       44		      .byte.b	$40+(.LUM1/256)
     15  49ac		       26		      .byte.b	$20+(.LUM2/256)
     16  49ad		       98		      .byte.b	$90+(.LUM3/256)
     17  49ae
     18  49ae
     19  49ae
     20  49ae
     21  49ae
     22  49ae				   .LUM1      SET	.LUM1 + .STEP1
     23  49ae				   .LUM2      SET	.LUM2 + .STEP2
     24  49ae				   .LUM3      SET	.LUM3 + .STEP3
     13  49ae					      REPEND
     14  49ae		       44		      .byte.b	$40+(.LUM1/256)
     15  49af		       26		      .byte.b	$20+(.LUM2/256)
     16  49b0		       98		      .byte.b	$90+(.LUM3/256)
     17  49b1
     18  49b1
     19  49b1
     20  49b1
     21  49b1
     22  49b1				   .LUM1      SET	.LUM1 + .STEP1
     23  49b1				   .LUM2      SET	.LUM2 + .STEP2
     24  49b1				   .LUM3      SET	.LUM3 + .STEP3
     13  49b1					      REPEND
     14  49b1		       44		      .byte.b	$40+(.LUM1/256)
     15  49b2		       26		      .byte.b	$20+(.LUM2/256)
     16  49b3		       98		      .byte.b	$90+(.LUM3/256)
     17  49b4
     18  49b4
     19  49b4
     20  49b4
     21  49b4
     22  49b4				   .LUM1      SET	.LUM1 + .STEP1
     23  49b4				   .LUM2      SET	.LUM2 + .STEP2
     24  49b4				   .LUM3      SET	.LUM3 + .STEP3
     13  49b4					      REPEND
     14  49b4		       44		      .byte.b	$40+(.LUM1/256)
     15  49b5		       26		      .byte.b	$20+(.LUM2/256)
     16  49b6		       98		      .byte.b	$90+(.LUM3/256)
     17  49b7
     18  49b7
     19  49b7
     20  49b7
     21  49b7
     22  49b7				   .LUM1      SET	.LUM1 + .STEP1
     23  49b7				   .LUM2      SET	.LUM2 + .STEP2
     24  49b7				   .LUM3      SET	.LUM3 + .STEP3
     13  49b7					      REPEND
     14  49b7		       44		      .byte.b	$40+(.LUM1/256)
     15  49b8		       26		      .byte.b	$20+(.LUM2/256)
     16  49b9		       98		      .byte.b	$90+(.LUM3/256)
     17  49ba
     18  49ba
     19  49ba
     20  49ba
     21  49ba
     22  49ba				   .LUM1      SET	.LUM1 + .STEP1
     23  49ba				   .LUM2      SET	.LUM2 + .STEP2
     24  49ba				   .LUM3      SET	.LUM3 + .STEP3
     13  49ba					      REPEND
     14  49ba		       44		      .byte.b	$40+(.LUM1/256)
     15  49bb		       26		      .byte.b	$20+(.LUM2/256)
     16  49bc		       98		      .byte.b	$90+(.LUM3/256)
     17  49bd
     18  49bd
     19  49bd
     20  49bd
     21  49bd
     22  49bd				   .LUM1      SET	.LUM1 + .STEP1
     23  49bd				   .LUM2      SET	.LUM2 + .STEP2
     24  49bd				   .LUM3      SET	.LUM3 + .STEP3
     13  49bd					      REPEND
     14  49bd		       44		      .byte.b	$40+(.LUM1/256)
     15  49be		       26		      .byte.b	$20+(.LUM2/256)
     16  49bf		       98		      .byte.b	$90+(.LUM3/256)
     17  49c0
     18  49c0
     19  49c0
     20  49c0
     21  49c0
     22  49c0				   .LUM1      SET	.LUM1 + .STEP1
     23  49c0				   .LUM2      SET	.LUM2 + .STEP2
     24  49c0				   .LUM3      SET	.LUM3 + .STEP3
     13  49c0					      REPEND
     14  49c0		       44		      .byte.b	$40+(.LUM1/256)
     15  49c1		       26		      .byte.b	$20+(.LUM2/256)
     16  49c2		       98		      .byte.b	$90+(.LUM3/256)
     17  49c3
     18  49c3
     19  49c3
     20  49c3
     21  49c3
     22  49c3				   .LUM1      SET	.LUM1 + .STEP1
     23  49c3				   .LUM2      SET	.LUM2 + .STEP2
     24  49c3				   .LUM3      SET	.LUM3 + .STEP3
     13  49c3					      REPEND
     14  49c3		       44		      .byte.b	$40+(.LUM1/256)
     15  49c4		       26		      .byte.b	$20+(.LUM2/256)
     16  49c5		       98		      .byte.b	$90+(.LUM3/256)
     17  49c6
     18  49c6
     19  49c6
     20  49c6
     21  49c6
     22  49c6				   .LUM1      SET	.LUM1 + .STEP1
     23  49c6				   .LUM2      SET	.LUM2 + .STEP2
     24  49c6				   .LUM3      SET	.LUM3 + .STEP3
     13  49c6					      REPEND
     14  49c6		       44		      .byte.b	$40+(.LUM1/256)
     15  49c7		       26		      .byte.b	$20+(.LUM2/256)
     16  49c8		       98		      .byte.b	$90+(.LUM3/256)
     17  49c9
     18  49c9
     19  49c9
     20  49c9
     21  49c9
     22  49c9				   .LUM1      SET	.LUM1 + .STEP1
     23  49c9				   .LUM2      SET	.LUM2 + .STEP2
     24  49c9				   .LUM3      SET	.LUM3 + .STEP3
     13  49c9					      REPEND
     14  49c9		       44		      .byte.b	$40+(.LUM1/256)
     15  49ca		       26		      .byte.b	$20+(.LUM2/256)
     16  49cb		       98		      .byte.b	$90+(.LUM3/256)
     17  49cc
     18  49cc
     19  49cc
     20  49cc
     21  49cc
     22  49cc				   .LUM1      SET	.LUM1 + .STEP1
     23  49cc				   .LUM2      SET	.LUM2 + .STEP2
     24  49cc				   .LUM3      SET	.LUM3 + .STEP3
     13  49cc					      REPEND
     14  49cc		       44		      .byte.b	$40+(.LUM1/256)
     15  49cd		       26		      .byte.b	$20+(.LUM2/256)
     16  49ce		       98		      .byte.b	$90+(.LUM3/256)
     17  49cf
     18  49cf
     19  49cf
     20  49cf
     21  49cf
     22  49cf				   .LUM1      SET	.LUM1 + .STEP1
     23  49cf				   .LUM2      SET	.LUM2 + .STEP2
     24  49cf				   .LUM3      SET	.LUM3 + .STEP3
     13  49cf					      REPEND
     14  49cf		       44		      .byte.b	$40+(.LUM1/256)
     15  49d0		       26		      .byte.b	$20+(.LUM2/256)
     16  49d1		       98		      .byte.b	$90+(.LUM3/256)
     17  49d2
     18  49d2
     19  49d2
     20  49d2
     21  49d2
     22  49d2				   .LUM1      SET	.LUM1 + .STEP1
     23  49d2				   .LUM2      SET	.LUM2 + .STEP2
     24  49d2				   .LUM3      SET	.LUM3 + .STEP3
     13  49d2					      REPEND
     14  49d2		       44		      .byte.b	$40+(.LUM1/256)
     15  49d3		       26		      .byte.b	$20+(.LUM2/256)
     16  49d4		       98		      .byte.b	$90+(.LUM3/256)
     17  49d5
     18  49d5
     19  49d5
     20  49d5
     21  49d5
     22  49d5				   .LUM1      SET	.LUM1 + .STEP1
     23  49d5				   .LUM2      SET	.LUM2 + .STEP2
     24  49d5				   .LUM3      SET	.LUM3 + .STEP3
     13  49d5					      REPEND
     14  49d5		       44		      .byte.b	$40+(.LUM1/256)
     15  49d6		       26		      .byte.b	$20+(.LUM2/256)
     16  49d7		       98		      .byte.b	$90+(.LUM3/256)
     17  49d8
     18  49d8
     19  49d8
     20  49d8
     21  49d8
     22  49d8				   .LUM1      SET	.LUM1 + .STEP1
     23  49d8				   .LUM2      SET	.LUM2 + .STEP2
     24  49d8				   .LUM3      SET	.LUM3 + .STEP3
     25  49d8					      REPEND
    254  49d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  49d8
    256  49d8							;    ECHO "PAL LUMS"
    257  49d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  49d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  49d8
      2  49d8
      3  49d8
      4  49d8
      5  49d8				   .LUM1      SET	$6*256
      6  49d8				   .LUM2      SET	$4*256
      7  49d8				   .LUM3      SET	$8*256
      8  49d8
      9  49d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  49d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  49d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  49d8
     13  49d8					      REPEAT	72
     14  49d8		       66		      .byte.b	$60+(.LUM1/256)
     15  49d9		       84		      .byte.b	$80+(.LUM2/256)
     16  49da		       18		      .byte.b	$10+(.LUM3/256)
     17  49db
     18  49db
     19  49db
     20  49db
     21  49db
     22  49db				   .LUM1      SET	.LUM1 + .STEP1
     23  49db				   .LUM2      SET	.LUM2 + .STEP2
     24  49db				   .LUM3      SET	.LUM3 + .STEP3
     13  49db					      REPEND
     14  49db		       66		      .byte.b	$60+(.LUM1/256)
     15  49dc		       84		      .byte.b	$80+(.LUM2/256)
     16  49dd		       18		      .byte.b	$10+(.LUM3/256)
     17  49de
     18  49de
     19  49de
     20  49de
     21  49de
     22  49de				   .LUM1      SET	.LUM1 + .STEP1
     23  49de				   .LUM2      SET	.LUM2 + .STEP2
     24  49de				   .LUM3      SET	.LUM3 + .STEP3
     13  49de					      REPEND
     14  49de		       66		      .byte.b	$60+(.LUM1/256)
     15  49df		       84		      .byte.b	$80+(.LUM2/256)
     16  49e0		       18		      .byte.b	$10+(.LUM3/256)
     17  49e1
     18  49e1
     19  49e1
     20  49e1
     21  49e1
     22  49e1				   .LUM1      SET	.LUM1 + .STEP1
     23  49e1				   .LUM2      SET	.LUM2 + .STEP2
     24  49e1				   .LUM3      SET	.LUM3 + .STEP3
     13  49e1					      REPEND
     14  49e1		       66		      .byte.b	$60+(.LUM1/256)
     15  49e2		       84		      .byte.b	$80+(.LUM2/256)
     16  49e3		       18		      .byte.b	$10+(.LUM3/256)
     17  49e4
     18  49e4
     19  49e4
     20  49e4
     21  49e4
     22  49e4				   .LUM1      SET	.LUM1 + .STEP1
     23  49e4				   .LUM2      SET	.LUM2 + .STEP2
     24  49e4				   .LUM3      SET	.LUM3 + .STEP3
     13  49e4					      REPEND
     14  49e4		       66		      .byte.b	$60+(.LUM1/256)
     15  49e5		       84		      .byte.b	$80+(.LUM2/256)
     16  49e6		       18		      .byte.b	$10+(.LUM3/256)
     17  49e7
     18  49e7
     19  49e7
     20  49e7
     21  49e7
     22  49e7				   .LUM1      SET	.LUM1 + .STEP1
     23  49e7				   .LUM2      SET	.LUM2 + .STEP2
     24  49e7				   .LUM3      SET	.LUM3 + .STEP3
     13  49e7					      REPEND
     14  49e7		       66		      .byte.b	$60+(.LUM1/256)
     15  49e8		       84		      .byte.b	$80+(.LUM2/256)
     16  49e9		       18		      .byte.b	$10+(.LUM3/256)
     17  49ea
     18  49ea
     19  49ea
     20  49ea
     21  49ea
     22  49ea				   .LUM1      SET	.LUM1 + .STEP1
     23  49ea				   .LUM2      SET	.LUM2 + .STEP2
     24  49ea				   .LUM3      SET	.LUM3 + .STEP3
     13  49ea					      REPEND
     14  49ea		       66		      .byte.b	$60+(.LUM1/256)
     15  49eb		       84		      .byte.b	$80+(.LUM2/256)
     16  49ec		       18		      .byte.b	$10+(.LUM3/256)
     17  49ed
     18  49ed
     19  49ed
     20  49ed
     21  49ed
     22  49ed				   .LUM1      SET	.LUM1 + .STEP1
     23  49ed				   .LUM2      SET	.LUM2 + .STEP2
     24  49ed				   .LUM3      SET	.LUM3 + .STEP3
     13  49ed					      REPEND
     14  49ed		       66		      .byte.b	$60+(.LUM1/256)
     15  49ee		       84		      .byte.b	$80+(.LUM2/256)
     16  49ef		       18		      .byte.b	$10+(.LUM3/256)
     17  49f0
     18  49f0
     19  49f0
     20  49f0
     21  49f0
     22  49f0				   .LUM1      SET	.LUM1 + .STEP1
     23  49f0				   .LUM2      SET	.LUM2 + .STEP2
     24  49f0				   .LUM3      SET	.LUM3 + .STEP3
     13  49f0					      REPEND
     14  49f0		       66		      .byte.b	$60+(.LUM1/256)
     15  49f1		       84		      .byte.b	$80+(.LUM2/256)
     16  49f2		       18		      .byte.b	$10+(.LUM3/256)
     17  49f3
     18  49f3
     19  49f3
     20  49f3
     21  49f3
     22  49f3				   .LUM1      SET	.LUM1 + .STEP1
     23  49f3				   .LUM2      SET	.LUM2 + .STEP2
     24  49f3				   .LUM3      SET	.LUM3 + .STEP3
     13  49f3					      REPEND
     14  49f3		       66		      .byte.b	$60+(.LUM1/256)
     15  49f4		       84		      .byte.b	$80+(.LUM2/256)
     16  49f5		       18		      .byte.b	$10+(.LUM3/256)
     17  49f6
     18  49f6
     19  49f6
     20  49f6
     21  49f6
     22  49f6				   .LUM1      SET	.LUM1 + .STEP1
     23  49f6				   .LUM2      SET	.LUM2 + .STEP2
     24  49f6				   .LUM3      SET	.LUM3 + .STEP3
     13  49f6					      REPEND
     14  49f6		       66		      .byte.b	$60+(.LUM1/256)
     15  49f7		       84		      .byte.b	$80+(.LUM2/256)
     16  49f8		       18		      .byte.b	$10+(.LUM3/256)
     17  49f9
     18  49f9
     19  49f9
     20  49f9
     21  49f9
     22  49f9				   .LUM1      SET	.LUM1 + .STEP1
     23  49f9				   .LUM2      SET	.LUM2 + .STEP2
     24  49f9				   .LUM3      SET	.LUM3 + .STEP3
     13  49f9					      REPEND
     14  49f9		       66		      .byte.b	$60+(.LUM1/256)
     15  49fa		       84		      .byte.b	$80+(.LUM2/256)
     16  49fb		       18		      .byte.b	$10+(.LUM3/256)
     17  49fc
     18  49fc
     19  49fc
     20  49fc
     21  49fc
     22  49fc				   .LUM1      SET	.LUM1 + .STEP1
     23  49fc				   .LUM2      SET	.LUM2 + .STEP2
     24  49fc				   .LUM3      SET	.LUM3 + .STEP3
     13  49fc					      REPEND
     14  49fc		       66		      .byte.b	$60+(.LUM1/256)
     15  49fd		       84		      .byte.b	$80+(.LUM2/256)
     16  49fe		       18		      .byte.b	$10+(.LUM3/256)
     17  49ff
     18  49ff
     19  49ff
     20  49ff
     21  49ff
     22  49ff				   .LUM1      SET	.LUM1 + .STEP1
     23  49ff				   .LUM2      SET	.LUM2 + .STEP2
     24  49ff				   .LUM3      SET	.LUM3 + .STEP3
     13  49ff					      REPEND
     14  49ff		       66		      .byte.b	$60+(.LUM1/256)
     15  4a00		       84		      .byte.b	$80+(.LUM2/256)
     16  4a01		       18		      .byte.b	$10+(.LUM3/256)
     17  4a02
     18  4a02
     19  4a02
     20  4a02
     21  4a02
     22  4a02				   .LUM1      SET	.LUM1 + .STEP1
     23  4a02				   .LUM2      SET	.LUM2 + .STEP2
     24  4a02				   .LUM3      SET	.LUM3 + .STEP3
     13  4a02					      REPEND
     14  4a02		       66		      .byte.b	$60+(.LUM1/256)
     15  4a03		       84		      .byte.b	$80+(.LUM2/256)
     16  4a04		       18		      .byte.b	$10+(.LUM3/256)
     17  4a05
     18  4a05
     19  4a05
     20  4a05
     21  4a05
     22  4a05				   .LUM1      SET	.LUM1 + .STEP1
     23  4a05				   .LUM2      SET	.LUM2 + .STEP2
     24  4a05				   .LUM3      SET	.LUM3 + .STEP3
     13  4a05					      REPEND
     14  4a05		       66		      .byte.b	$60+(.LUM1/256)
     15  4a06		       84		      .byte.b	$80+(.LUM2/256)
     16  4a07		       18		      .byte.b	$10+(.LUM3/256)
     17  4a08
     18  4a08
     19  4a08
     20  4a08
     21  4a08
     22  4a08				   .LUM1      SET	.LUM1 + .STEP1
     23  4a08				   .LUM2      SET	.LUM2 + .STEP2
     24  4a08				   .LUM3      SET	.LUM3 + .STEP3
     13  4a08					      REPEND
     14  4a08		       66		      .byte.b	$60+(.LUM1/256)
     15  4a09		       84		      .byte.b	$80+(.LUM2/256)
     16  4a0a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a0b
     18  4a0b
     19  4a0b
     20  4a0b
     21  4a0b
     22  4a0b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a0b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a0b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a0b					      REPEND
     14  4a0b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a0c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a0d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a0e
     18  4a0e
     19  4a0e
     20  4a0e
     21  4a0e
     22  4a0e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a0e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a0e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a0e					      REPEND
     14  4a0e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a0f		       84		      .byte.b	$80+(.LUM2/256)
     16  4a10		       18		      .byte.b	$10+(.LUM3/256)
     17  4a11
     18  4a11
     19  4a11
     20  4a11
     21  4a11
     22  4a11				   .LUM1      SET	.LUM1 + .STEP1
     23  4a11				   .LUM2      SET	.LUM2 + .STEP2
     24  4a11				   .LUM3      SET	.LUM3 + .STEP3
     13  4a11					      REPEND
     14  4a11		       66		      .byte.b	$60+(.LUM1/256)
     15  4a12		       84		      .byte.b	$80+(.LUM2/256)
     16  4a13		       18		      .byte.b	$10+(.LUM3/256)
     17  4a14
     18  4a14
     19  4a14
     20  4a14
     21  4a14
     22  4a14				   .LUM1      SET	.LUM1 + .STEP1
     23  4a14				   .LUM2      SET	.LUM2 + .STEP2
     24  4a14				   .LUM3      SET	.LUM3 + .STEP3
     13  4a14					      REPEND
     14  4a14		       66		      .byte.b	$60+(.LUM1/256)
     15  4a15		       84		      .byte.b	$80+(.LUM2/256)
     16  4a16		       18		      .byte.b	$10+(.LUM3/256)
     17  4a17
     18  4a17
     19  4a17
     20  4a17
     21  4a17
     22  4a17				   .LUM1      SET	.LUM1 + .STEP1
     23  4a17				   .LUM2      SET	.LUM2 + .STEP2
     24  4a17				   .LUM3      SET	.LUM3 + .STEP3
     13  4a17					      REPEND
     14  4a17		       66		      .byte.b	$60+(.LUM1/256)
     15  4a18		       84		      .byte.b	$80+(.LUM2/256)
     16  4a19		       18		      .byte.b	$10+(.LUM3/256)
     17  4a1a
     18  4a1a
     19  4a1a
     20  4a1a
     21  4a1a
     22  4a1a				   .LUM1      SET	.LUM1 + .STEP1
     23  4a1a				   .LUM2      SET	.LUM2 + .STEP2
     24  4a1a				   .LUM3      SET	.LUM3 + .STEP3
     13  4a1a					      REPEND
     14  4a1a		       66		      .byte.b	$60+(.LUM1/256)
     15  4a1b		       84		      .byte.b	$80+(.LUM2/256)
     16  4a1c		       18		      .byte.b	$10+(.LUM3/256)
     17  4a1d
     18  4a1d
     19  4a1d
     20  4a1d
     21  4a1d
     22  4a1d				   .LUM1      SET	.LUM1 + .STEP1
     23  4a1d				   .LUM2      SET	.LUM2 + .STEP2
     24  4a1d				   .LUM3      SET	.LUM3 + .STEP3
     13  4a1d					      REPEND
     14  4a1d		       66		      .byte.b	$60+(.LUM1/256)
     15  4a1e		       84		      .byte.b	$80+(.LUM2/256)
     16  4a1f		       18		      .byte.b	$10+(.LUM3/256)
     17  4a20
     18  4a20
     19  4a20
     20  4a20
     21  4a20
     22  4a20				   .LUM1      SET	.LUM1 + .STEP1
     23  4a20				   .LUM2      SET	.LUM2 + .STEP2
     24  4a20				   .LUM3      SET	.LUM3 + .STEP3
     13  4a20					      REPEND
     14  4a20		       66		      .byte.b	$60+(.LUM1/256)
     15  4a21		       84		      .byte.b	$80+(.LUM2/256)
     16  4a22		       18		      .byte.b	$10+(.LUM3/256)
     17  4a23
     18  4a23
     19  4a23
     20  4a23
     21  4a23
     22  4a23				   .LUM1      SET	.LUM1 + .STEP1
     23  4a23				   .LUM2      SET	.LUM2 + .STEP2
     24  4a23				   .LUM3      SET	.LUM3 + .STEP3
     13  4a23					      REPEND
     14  4a23		       66		      .byte.b	$60+(.LUM1/256)
     15  4a24		       84		      .byte.b	$80+(.LUM2/256)
     16  4a25		       18		      .byte.b	$10+(.LUM3/256)
     17  4a26
     18  4a26
     19  4a26
     20  4a26
     21  4a26
     22  4a26				   .LUM1      SET	.LUM1 + .STEP1
     23  4a26				   .LUM2      SET	.LUM2 + .STEP2
     24  4a26				   .LUM3      SET	.LUM3 + .STEP3
     13  4a26					      REPEND
     14  4a26		       66		      .byte.b	$60+(.LUM1/256)
     15  4a27		       84		      .byte.b	$80+(.LUM2/256)
     16  4a28		       18		      .byte.b	$10+(.LUM3/256)
     17  4a29
     18  4a29
     19  4a29
     20  4a29
     21  4a29
     22  4a29				   .LUM1      SET	.LUM1 + .STEP1
     23  4a29				   .LUM2      SET	.LUM2 + .STEP2
     24  4a29				   .LUM3      SET	.LUM3 + .STEP3
     13  4a29					      REPEND
     14  4a29		       66		      .byte.b	$60+(.LUM1/256)
     15  4a2a		       84		      .byte.b	$80+(.LUM2/256)
     16  4a2b		       18		      .byte.b	$10+(.LUM3/256)
     17  4a2c
     18  4a2c
     19  4a2c
     20  4a2c
     21  4a2c
     22  4a2c				   .LUM1      SET	.LUM1 + .STEP1
     23  4a2c				   .LUM2      SET	.LUM2 + .STEP2
     24  4a2c				   .LUM3      SET	.LUM3 + .STEP3
     13  4a2c					      REPEND
     14  4a2c		       66		      .byte.b	$60+(.LUM1/256)
     15  4a2d		       84		      .byte.b	$80+(.LUM2/256)
     16  4a2e		       18		      .byte.b	$10+(.LUM3/256)
     17  4a2f
     18  4a2f
     19  4a2f
     20  4a2f
     21  4a2f
     22  4a2f				   .LUM1      SET	.LUM1 + .STEP1
     23  4a2f				   .LUM2      SET	.LUM2 + .STEP2
     24  4a2f				   .LUM3      SET	.LUM3 + .STEP3
     13  4a2f					      REPEND
     14  4a2f		       66		      .byte.b	$60+(.LUM1/256)
     15  4a30		       84		      .byte.b	$80+(.LUM2/256)
     16  4a31		       18		      .byte.b	$10+(.LUM3/256)
     17  4a32
     18  4a32
     19  4a32
     20  4a32
     21  4a32
     22  4a32				   .LUM1      SET	.LUM1 + .STEP1
     23  4a32				   .LUM2      SET	.LUM2 + .STEP2
     24  4a32				   .LUM3      SET	.LUM3 + .STEP3
     13  4a32					      REPEND
     14  4a32		       66		      .byte.b	$60+(.LUM1/256)
     15  4a33		       84		      .byte.b	$80+(.LUM2/256)
     16  4a34		       18		      .byte.b	$10+(.LUM3/256)
     17  4a35
     18  4a35
     19  4a35
     20  4a35
     21  4a35
     22  4a35				   .LUM1      SET	.LUM1 + .STEP1
     23  4a35				   .LUM2      SET	.LUM2 + .STEP2
     24  4a35				   .LUM3      SET	.LUM3 + .STEP3
     13  4a35					      REPEND
     14  4a35		       66		      .byte.b	$60+(.LUM1/256)
     15  4a36		       84		      .byte.b	$80+(.LUM2/256)
     16  4a37		       18		      .byte.b	$10+(.LUM3/256)
     17  4a38
     18  4a38
     19  4a38
     20  4a38
     21  4a38
     22  4a38				   .LUM1      SET	.LUM1 + .STEP1
     23  4a38				   .LUM2      SET	.LUM2 + .STEP2
     24  4a38				   .LUM3      SET	.LUM3 + .STEP3
     13  4a38					      REPEND
     14  4a38		       66		      .byte.b	$60+(.LUM1/256)
     15  4a39		       84		      .byte.b	$80+(.LUM2/256)
     16  4a3a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a3b
     18  4a3b
     19  4a3b
     20  4a3b
     21  4a3b
     22  4a3b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a3b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a3b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a3b					      REPEND
     14  4a3b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a3c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a3d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a3e
     18  4a3e
     19  4a3e
     20  4a3e
     21  4a3e
     22  4a3e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a3e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a3e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a3e					      REPEND
     14  4a3e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a3f		       84		      .byte.b	$80+(.LUM2/256)
     16  4a40		       18		      .byte.b	$10+(.LUM3/256)
     17  4a41
     18  4a41
     19  4a41
     20  4a41
     21  4a41
     22  4a41				   .LUM1      SET	.LUM1 + .STEP1
     23  4a41				   .LUM2      SET	.LUM2 + .STEP2
     24  4a41				   .LUM3      SET	.LUM3 + .STEP3
     13  4a41					      REPEND
     14  4a41		       66		      .byte.b	$60+(.LUM1/256)
     15  4a42		       84		      .byte.b	$80+(.LUM2/256)
     16  4a43		       18		      .byte.b	$10+(.LUM3/256)
     17  4a44
     18  4a44
     19  4a44
     20  4a44
     21  4a44
     22  4a44				   .LUM1      SET	.LUM1 + .STEP1
     23  4a44				   .LUM2      SET	.LUM2 + .STEP2
     24  4a44				   .LUM3      SET	.LUM3 + .STEP3
     13  4a44					      REPEND
     14  4a44		       66		      .byte.b	$60+(.LUM1/256)
     15  4a45		       84		      .byte.b	$80+(.LUM2/256)
     16  4a46		       18		      .byte.b	$10+(.LUM3/256)
     17  4a47
     18  4a47
     19  4a47
     20  4a47
     21  4a47
     22  4a47				   .LUM1      SET	.LUM1 + .STEP1
     23  4a47				   .LUM2      SET	.LUM2 + .STEP2
     24  4a47				   .LUM3      SET	.LUM3 + .STEP3
     13  4a47					      REPEND
     14  4a47		       66		      .byte.b	$60+(.LUM1/256)
     15  4a48		       84		      .byte.b	$80+(.LUM2/256)
     16  4a49		       18		      .byte.b	$10+(.LUM3/256)
     17  4a4a
     18  4a4a
     19  4a4a
     20  4a4a
     21  4a4a
     22  4a4a				   .LUM1      SET	.LUM1 + .STEP1
     23  4a4a				   .LUM2      SET	.LUM2 + .STEP2
     24  4a4a				   .LUM3      SET	.LUM3 + .STEP3
     13  4a4a					      REPEND
     14  4a4a		       66		      .byte.b	$60+(.LUM1/256)
     15  4a4b		       84		      .byte.b	$80+(.LUM2/256)
     16  4a4c		       18		      .byte.b	$10+(.LUM3/256)
     17  4a4d
     18  4a4d
     19  4a4d
     20  4a4d
     21  4a4d
     22  4a4d				   .LUM1      SET	.LUM1 + .STEP1
     23  4a4d				   .LUM2      SET	.LUM2 + .STEP2
     24  4a4d				   .LUM3      SET	.LUM3 + .STEP3
     13  4a4d					      REPEND
     14  4a4d		       66		      .byte.b	$60+(.LUM1/256)
     15  4a4e		       84		      .byte.b	$80+(.LUM2/256)
     16  4a4f		       18		      .byte.b	$10+(.LUM3/256)
     17  4a50
     18  4a50
     19  4a50
     20  4a50
     21  4a50
     22  4a50				   .LUM1      SET	.LUM1 + .STEP1
     23  4a50				   .LUM2      SET	.LUM2 + .STEP2
     24  4a50				   .LUM3      SET	.LUM3 + .STEP3
     13  4a50					      REPEND
     14  4a50		       66		      .byte.b	$60+(.LUM1/256)
     15  4a51		       84		      .byte.b	$80+(.LUM2/256)
     16  4a52		       18		      .byte.b	$10+(.LUM3/256)
     17  4a53
     18  4a53
     19  4a53
     20  4a53
     21  4a53
     22  4a53				   .LUM1      SET	.LUM1 + .STEP1
     23  4a53				   .LUM2      SET	.LUM2 + .STEP2
     24  4a53				   .LUM3      SET	.LUM3 + .STEP3
     13  4a53					      REPEND
     14  4a53		       66		      .byte.b	$60+(.LUM1/256)
     15  4a54		       84		      .byte.b	$80+(.LUM2/256)
     16  4a55		       18		      .byte.b	$10+(.LUM3/256)
     17  4a56
     18  4a56
     19  4a56
     20  4a56
     21  4a56
     22  4a56				   .LUM1      SET	.LUM1 + .STEP1
     23  4a56				   .LUM2      SET	.LUM2 + .STEP2
     24  4a56				   .LUM3      SET	.LUM3 + .STEP3
     13  4a56					      REPEND
     14  4a56		       66		      .byte.b	$60+(.LUM1/256)
     15  4a57		       84		      .byte.b	$80+(.LUM2/256)
     16  4a58		       18		      .byte.b	$10+(.LUM3/256)
     17  4a59
     18  4a59
     19  4a59
     20  4a59
     21  4a59
     22  4a59				   .LUM1      SET	.LUM1 + .STEP1
     23  4a59				   .LUM2      SET	.LUM2 + .STEP2
     24  4a59				   .LUM3      SET	.LUM3 + .STEP3
     13  4a59					      REPEND
     14  4a59		       66		      .byte.b	$60+(.LUM1/256)
     15  4a5a		       84		      .byte.b	$80+(.LUM2/256)
     16  4a5b		       18		      .byte.b	$10+(.LUM3/256)
     17  4a5c
     18  4a5c
     19  4a5c
     20  4a5c
     21  4a5c
     22  4a5c				   .LUM1      SET	.LUM1 + .STEP1
     23  4a5c				   .LUM2      SET	.LUM2 + .STEP2
     24  4a5c				   .LUM3      SET	.LUM3 + .STEP3
     13  4a5c					      REPEND
     14  4a5c		       66		      .byte.b	$60+(.LUM1/256)
     15  4a5d		       84		      .byte.b	$80+(.LUM2/256)
     16  4a5e		       18		      .byte.b	$10+(.LUM3/256)
     17  4a5f
     18  4a5f
     19  4a5f
     20  4a5f
     21  4a5f
     22  4a5f				   .LUM1      SET	.LUM1 + .STEP1
     23  4a5f				   .LUM2      SET	.LUM2 + .STEP2
     24  4a5f				   .LUM3      SET	.LUM3 + .STEP3
     13  4a5f					      REPEND
     14  4a5f		       66		      .byte.b	$60+(.LUM1/256)
     15  4a60		       84		      .byte.b	$80+(.LUM2/256)
     16  4a61		       18		      .byte.b	$10+(.LUM3/256)
     17  4a62
     18  4a62
     19  4a62
     20  4a62
     21  4a62
     22  4a62				   .LUM1      SET	.LUM1 + .STEP1
     23  4a62				   .LUM2      SET	.LUM2 + .STEP2
     24  4a62				   .LUM3      SET	.LUM3 + .STEP3
     13  4a62					      REPEND
     14  4a62		       66		      .byte.b	$60+(.LUM1/256)
     15  4a63		       84		      .byte.b	$80+(.LUM2/256)
     16  4a64		       18		      .byte.b	$10+(.LUM3/256)
     17  4a65
     18  4a65
     19  4a65
     20  4a65
     21  4a65
     22  4a65				   .LUM1      SET	.LUM1 + .STEP1
     23  4a65				   .LUM2      SET	.LUM2 + .STEP2
     24  4a65				   .LUM3      SET	.LUM3 + .STEP3
     13  4a65					      REPEND
     14  4a65		       66		      .byte.b	$60+(.LUM1/256)
     15  4a66		       84		      .byte.b	$80+(.LUM2/256)
     16  4a67		       18		      .byte.b	$10+(.LUM3/256)
     17  4a68
     18  4a68
     19  4a68
     20  4a68
     21  4a68
     22  4a68				   .LUM1      SET	.LUM1 + .STEP1
     23  4a68				   .LUM2      SET	.LUM2 + .STEP2
     24  4a68				   .LUM3      SET	.LUM3 + .STEP3
     13  4a68					      REPEND
     14  4a68		       66		      .byte.b	$60+(.LUM1/256)
     15  4a69		       84		      .byte.b	$80+(.LUM2/256)
     16  4a6a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a6b
     18  4a6b
     19  4a6b
     20  4a6b
     21  4a6b
     22  4a6b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a6b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a6b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a6b					      REPEND
     14  4a6b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a6c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a6d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a6e
     18  4a6e
     19  4a6e
     20  4a6e
     21  4a6e
     22  4a6e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a6e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a6e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a6e					      REPEND
     14  4a6e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a6f		       84		      .byte.b	$80+(.LUM2/256)
     16  4a70		       18		      .byte.b	$10+(.LUM3/256)
     17  4a71
     18  4a71
     19  4a71
     20  4a71
     21  4a71
     22  4a71				   .LUM1      SET	.LUM1 + .STEP1
     23  4a71				   .LUM2      SET	.LUM2 + .STEP2
     24  4a71				   .LUM3      SET	.LUM3 + .STEP3
     13  4a71					      REPEND
     14  4a71		       66		      .byte.b	$60+(.LUM1/256)
     15  4a72		       84		      .byte.b	$80+(.LUM2/256)
     16  4a73		       18		      .byte.b	$10+(.LUM3/256)
     17  4a74
     18  4a74
     19  4a74
     20  4a74
     21  4a74
     22  4a74				   .LUM1      SET	.LUM1 + .STEP1
     23  4a74				   .LUM2      SET	.LUM2 + .STEP2
     24  4a74				   .LUM3      SET	.LUM3 + .STEP3
     13  4a74					      REPEND
     14  4a74		       66		      .byte.b	$60+(.LUM1/256)
     15  4a75		       84		      .byte.b	$80+(.LUM2/256)
     16  4a76		       18		      .byte.b	$10+(.LUM3/256)
     17  4a77
     18  4a77
     19  4a77
     20  4a77
     21  4a77
     22  4a77				   .LUM1      SET	.LUM1 + .STEP1
     23  4a77				   .LUM2      SET	.LUM2 + .STEP2
     24  4a77				   .LUM3      SET	.LUM3 + .STEP3
     13  4a77					      REPEND
     14  4a77		       66		      .byte.b	$60+(.LUM1/256)
     15  4a78		       84		      .byte.b	$80+(.LUM2/256)
     16  4a79		       18		      .byte.b	$10+(.LUM3/256)
     17  4a7a
     18  4a7a
     19  4a7a
     20  4a7a
     21  4a7a
     22  4a7a				   .LUM1      SET	.LUM1 + .STEP1
     23  4a7a				   .LUM2      SET	.LUM2 + .STEP2
     24  4a7a				   .LUM3      SET	.LUM3 + .STEP3
     13  4a7a					      REPEND
     14  4a7a		       66		      .byte.b	$60+(.LUM1/256)
     15  4a7b		       84		      .byte.b	$80+(.LUM2/256)
     16  4a7c		       18		      .byte.b	$10+(.LUM3/256)
     17  4a7d
     18  4a7d
     19  4a7d
     20  4a7d
     21  4a7d
     22  4a7d				   .LUM1      SET	.LUM1 + .STEP1
     23  4a7d				   .LUM2      SET	.LUM2 + .STEP2
     24  4a7d				   .LUM3      SET	.LUM3 + .STEP3
     13  4a7d					      REPEND
     14  4a7d		       66		      .byte.b	$60+(.LUM1/256)
     15  4a7e		       84		      .byte.b	$80+(.LUM2/256)
     16  4a7f		       18		      .byte.b	$10+(.LUM3/256)
     17  4a80
     18  4a80
     19  4a80
     20  4a80
     21  4a80
     22  4a80				   .LUM1      SET	.LUM1 + .STEP1
     23  4a80				   .LUM2      SET	.LUM2 + .STEP2
     24  4a80				   .LUM3      SET	.LUM3 + .STEP3
     13  4a80					      REPEND
     14  4a80		       66		      .byte.b	$60+(.LUM1/256)
     15  4a81		       84		      .byte.b	$80+(.LUM2/256)
     16  4a82		       18		      .byte.b	$10+(.LUM3/256)
     17  4a83
     18  4a83
     19  4a83
     20  4a83
     21  4a83
     22  4a83				   .LUM1      SET	.LUM1 + .STEP1
     23  4a83				   .LUM2      SET	.LUM2 + .STEP2
     24  4a83				   .LUM3      SET	.LUM3 + .STEP3
     13  4a83					      REPEND
     14  4a83		       66		      .byte.b	$60+(.LUM1/256)
     15  4a84		       84		      .byte.b	$80+(.LUM2/256)
     16  4a85		       18		      .byte.b	$10+(.LUM3/256)
     17  4a86
     18  4a86
     19  4a86
     20  4a86
     21  4a86
     22  4a86				   .LUM1      SET	.LUM1 + .STEP1
     23  4a86				   .LUM2      SET	.LUM2 + .STEP2
     24  4a86				   .LUM3      SET	.LUM3 + .STEP3
     13  4a86					      REPEND
     14  4a86		       66		      .byte.b	$60+(.LUM1/256)
     15  4a87		       84		      .byte.b	$80+(.LUM2/256)
     16  4a88		       18		      .byte.b	$10+(.LUM3/256)
     17  4a89
     18  4a89
     19  4a89
     20  4a89
     21  4a89
     22  4a89				   .LUM1      SET	.LUM1 + .STEP1
     23  4a89				   .LUM2      SET	.LUM2 + .STEP2
     24  4a89				   .LUM3      SET	.LUM3 + .STEP3
     13  4a89					      REPEND
     14  4a89		       66		      .byte.b	$60+(.LUM1/256)
     15  4a8a		       84		      .byte.b	$80+(.LUM2/256)
     16  4a8b		       18		      .byte.b	$10+(.LUM3/256)
     17  4a8c
     18  4a8c
     19  4a8c
     20  4a8c
     21  4a8c
     22  4a8c				   .LUM1      SET	.LUM1 + .STEP1
     23  4a8c				   .LUM2      SET	.LUM2 + .STEP2
     24  4a8c				   .LUM3      SET	.LUM3 + .STEP3
     13  4a8c					      REPEND
     14  4a8c		       66		      .byte.b	$60+(.LUM1/256)
     15  4a8d		       84		      .byte.b	$80+(.LUM2/256)
     16  4a8e		       18		      .byte.b	$10+(.LUM3/256)
     17  4a8f
     18  4a8f
     19  4a8f
     20  4a8f
     21  4a8f
     22  4a8f				   .LUM1      SET	.LUM1 + .STEP1
     23  4a8f				   .LUM2      SET	.LUM2 + .STEP2
     24  4a8f				   .LUM3      SET	.LUM3 + .STEP3
     13  4a8f					      REPEND
     14  4a8f		       66		      .byte.b	$60+(.LUM1/256)
     15  4a90		       84		      .byte.b	$80+(.LUM2/256)
     16  4a91		       18		      .byte.b	$10+(.LUM3/256)
     17  4a92
     18  4a92
     19  4a92
     20  4a92
     21  4a92
     22  4a92				   .LUM1      SET	.LUM1 + .STEP1
     23  4a92				   .LUM2      SET	.LUM2 + .STEP2
     24  4a92				   .LUM3      SET	.LUM3 + .STEP3
     13  4a92					      REPEND
     14  4a92		       66		      .byte.b	$60+(.LUM1/256)
     15  4a93		       84		      .byte.b	$80+(.LUM2/256)
     16  4a94		       18		      .byte.b	$10+(.LUM3/256)
     17  4a95
     18  4a95
     19  4a95
     20  4a95
     21  4a95
     22  4a95				   .LUM1      SET	.LUM1 + .STEP1
     23  4a95				   .LUM2      SET	.LUM2 + .STEP2
     24  4a95				   .LUM3      SET	.LUM3 + .STEP3
     13  4a95					      REPEND
     14  4a95		       66		      .byte.b	$60+(.LUM1/256)
     15  4a96		       84		      .byte.b	$80+(.LUM2/256)
     16  4a97		       18		      .byte.b	$10+(.LUM3/256)
     17  4a98
     18  4a98
     19  4a98
     20  4a98
     21  4a98
     22  4a98				   .LUM1      SET	.LUM1 + .STEP1
     23  4a98				   .LUM2      SET	.LUM2 + .STEP2
     24  4a98				   .LUM3      SET	.LUM3 + .STEP3
     13  4a98					      REPEND
     14  4a98		       66		      .byte.b	$60+(.LUM1/256)
     15  4a99		       84		      .byte.b	$80+(.LUM2/256)
     16  4a9a		       18		      .byte.b	$10+(.LUM3/256)
     17  4a9b
     18  4a9b
     19  4a9b
     20  4a9b
     21  4a9b
     22  4a9b				   .LUM1      SET	.LUM1 + .STEP1
     23  4a9b				   .LUM2      SET	.LUM2 + .STEP2
     24  4a9b				   .LUM3      SET	.LUM3 + .STEP3
     13  4a9b					      REPEND
     14  4a9b		       66		      .byte.b	$60+(.LUM1/256)
     15  4a9c		       84		      .byte.b	$80+(.LUM2/256)
     16  4a9d		       18		      .byte.b	$10+(.LUM3/256)
     17  4a9e
     18  4a9e
     19  4a9e
     20  4a9e
     21  4a9e
     22  4a9e				   .LUM1      SET	.LUM1 + .STEP1
     23  4a9e				   .LUM2      SET	.LUM2 + .STEP2
     24  4a9e				   .LUM3      SET	.LUM3 + .STEP3
     13  4a9e					      REPEND
     14  4a9e		       66		      .byte.b	$60+(.LUM1/256)
     15  4a9f		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa0		       18		      .byte.b	$10+(.LUM3/256)
     17  4aa1
     18  4aa1
     19  4aa1
     20  4aa1
     21  4aa1
     22  4aa1				   .LUM1      SET	.LUM1 + .STEP1
     23  4aa1				   .LUM2      SET	.LUM2 + .STEP2
     24  4aa1				   .LUM3      SET	.LUM3 + .STEP3
     13  4aa1					      REPEND
     14  4aa1		       66		      .byte.b	$60+(.LUM1/256)
     15  4aa2		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa3		       18		      .byte.b	$10+(.LUM3/256)
     17  4aa4
     18  4aa4
     19  4aa4
     20  4aa4
     21  4aa4
     22  4aa4				   .LUM1      SET	.LUM1 + .STEP1
     23  4aa4				   .LUM2      SET	.LUM2 + .STEP2
     24  4aa4				   .LUM3      SET	.LUM3 + .STEP3
     13  4aa4					      REPEND
     14  4aa4		       66		      .byte.b	$60+(.LUM1/256)
     15  4aa5		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa6		       18		      .byte.b	$10+(.LUM3/256)
     17  4aa7
     18  4aa7
     19  4aa7
     20  4aa7
     21  4aa7
     22  4aa7				   .LUM1      SET	.LUM1 + .STEP1
     23  4aa7				   .LUM2      SET	.LUM2 + .STEP2
     24  4aa7				   .LUM3      SET	.LUM3 + .STEP3
     13  4aa7					      REPEND
     14  4aa7		       66		      .byte.b	$60+(.LUM1/256)
     15  4aa8		       84		      .byte.b	$80+(.LUM2/256)
     16  4aa9		       18		      .byte.b	$10+(.LUM3/256)
     17  4aaa
     18  4aaa
     19  4aaa
     20  4aaa
     21  4aaa
     22  4aaa				   .LUM1      SET	.LUM1 + .STEP1
     23  4aaa				   .LUM2      SET	.LUM2 + .STEP2
     24  4aaa				   .LUM3      SET	.LUM3 + .STEP3
     13  4aaa					      REPEND
     14  4aaa		       66		      .byte.b	$60+(.LUM1/256)
     15  4aab		       84		      .byte.b	$80+(.LUM2/256)
     16  4aac		       18		      .byte.b	$10+(.LUM3/256)
     17  4aad
     18  4aad
     19  4aad
     20  4aad
     21  4aad
     22  4aad				   .LUM1      SET	.LUM1 + .STEP1
     23  4aad				   .LUM2      SET	.LUM2 + .STEP2
     24  4aad				   .LUM3      SET	.LUM3 + .STEP3
     13  4aad					      REPEND
     14  4aad		       66		      .byte.b	$60+(.LUM1/256)
     15  4aae		       84		      .byte.b	$80+(.LUM2/256)
     16  4aaf		       18		      .byte.b	$10+(.LUM3/256)
     17  4ab0
     18  4ab0
     19  4ab0
     20  4ab0
     21  4ab0
     22  4ab0				   .LUM1      SET	.LUM1 + .STEP1
     23  4ab0				   .LUM2      SET	.LUM2 + .STEP2
     24  4ab0				   .LUM3      SET	.LUM3 + .STEP3
     25  4ab0					      REPEND
    259  4ab0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  4ab0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  4ab0					      include	"titleData.asm"
      1  4ab0				   COL_0
      2  4ab0		       00		      .byte.b	0	;R (71)
      3  4ab1		       00		      .byte.b	0	;G
      4  4ab2		       00		      .byte.b	0	;B
      5  4ab3		       40		      .byte.b	64	;R (70)
      6  4ab4		       40		      .byte.b	64	;G
      7  4ab5		       00		      .byte.b	0	;B
      8  4ab6		       00		      .byte.b	0	;R (69)
      9  4ab7		       00		      .byte.b	0	;G
     10  4ab8		       00		      .byte.b	0	;B
     11  4ab9		       00		      .byte.b	0	;R (68)
     12  4aba		       80		      .byte.b	128	;G
     13  4abb		       00		      .byte.b	0	;B
     14  4abc		       00		      .byte.b	0	;R (67)
     15  4abd		       20		      .byte.b	32	;G
     16  4abe		       00		      .byte.b	0	;B
     17  4abf		       80		      .byte.b	128	;R (66)
     18  4ac0		       80		      .byte.b	128	;G
     19  4ac1		       00		      .byte.b	0	;B
     20  4ac2		       c0		      .byte.b	192	;R (65)
     21  4ac3		       c0		      .byte.b	192	;G
     22  4ac4		       00		      .byte.b	0	;B
     23  4ac5		       40		      .byte.b	64	;R (64)
     24  4ac6		       c0		      .byte.b	192	;G
     25  4ac7		       00		      .byte.b	0	;B
     26  4ac8		       00		      .byte.b	0	;R (63)
     27  4ac9		       a0		      .byte.b	160	;G
     28  4aca		       00		      .byte.b	0	;B
     29  4acb		       10		      .byte.b	16	;R (62)
     30  4acc		       70		      .byte.b	112	;G
     31  4acd		       00		      .byte.b	0	;B
     32  4ace		       00		      .byte.b	0	;R (61)
     33  4acf		       80		      .byte.b	128	;G
     34  4ad0		       40		      .byte.b	64	;B
     35  4ad1		       00		      .byte.b	0	;R (60)
     36  4ad2		       c0		      .byte.b	192	;G
     37  4ad3		       00		      .byte.b	0	;B
     38  4ad4		       00		      .byte.b	0	;R (59)
     39  4ad5		       c0		      .byte.b	192	;G
     40  4ad6		       00		      .byte.b	0	;B
     41  4ad7		       00		      .byte.b	0	;R (58)
     42  4ad8		       40		      .byte.b	64	;G
     43  4ad9		       00		      .byte.b	0	;B
     44  4ada		       00		      .byte.b	0	;R (57)
     45  4adb		       c0		      .byte.b	192	;G
     46  4adc		       00		      .byte.b	0	;B
     47  4add		       00		      .byte.b	0	;R (56)
     48  4ade		       60		      .byte.b	96	;G
     49  4adf		       00		      .byte.b	0	;B
     50  4ae0		       00		      .byte.b	0	;R (55)
     51  4ae1		       80		      .byte.b	128	;G
     52  4ae2		       00		      .byte.b	0	;B
     53  4ae3		       00		      .byte.b	0	;R (54)
     54  4ae4		       40		      .byte.b	64	;G
     55  4ae5		       00		      .byte.b	0	;B
     56  4ae6		       00		      .byte.b	0	;R (53)
     57  4ae7		       80		      .byte.b	128	;G
     58  4ae8		       00		      .byte.b	0	;B
     59  4ae9		       00		      .byte.b	0	;R (52)
     60  4aea		       80		      .byte.b	128	;G
     61  4aeb		       00		      .byte.b	0	;B
     62  4aec		       00		      .byte.b	0	;R (51)
     63  4aed		       10		      .byte.b	16	;G
     64  4aee		       00		      .byte.b	0	;B
     65  4aef		       00		      .byte.b	0	;R (50)
     66  4af0		       00		      .byte.b	0	;G
     67  4af1		       00		      .byte.b	0	;B
     68  4af2		       00		      .byte.b	0	;R (49)
     69  4af3		       00		      .byte.b	0	;G
     70  4af4		       00		      .byte.b	0	;B
     71  4af5		       00		      .byte.b	0	;R (48)
     72  4af6		       00		      .byte.b	0	;G
     73  4af7		       00		      .byte.b	0	;B
     74  4af8		       00		      .byte.b	0	;R (47)
     75  4af9		       00		      .byte.b	0	;G
     76  4afa		       00		      .byte.b	0	;B
     77  4afb		       00		      .byte.b	0	;R (46)
     78  4afc		       40		      .byte.b	64	;G
     79  4afd		       00		      .byte.b	0	;B
     80  4afe		       00		      .byte.b	0	;R (45)
     81  4aff		       00		      .byte.b	0	;G
     82  4b00		       00		      .byte.b	0	;B
     83  4b01		       00		      .byte.b	0	;R (44)
     84  4b02		       00		      .byte.b	0	;G
     85  4b03		       00		      .byte.b	0	;B
     86  4b04		       00		      .byte.b	0	;R (43)
     87  4b05		       00		      .byte.b	0	;G
     88  4b06		       00		      .byte.b	0	;B
     89  4b07		       00		      .byte.b	0	;R (42)
     90  4b08		       40		      .byte.b	64	;G
     91  4b09		       00		      .byte.b	0	;B
     92  4b0a		       00		      .byte.b	0	;R (41)
     93  4b0b		       00		      .byte.b	0	;G
     94  4b0c		       00		      .byte.b	0	;B
     95  4b0d		       00		      .byte.b	0	;R (40)
     96  4b0e		       00		      .byte.b	0	;G
     97  4b0f		       00		      .byte.b	0	;B
     98  4b10		       00		      .byte.b	0	;R (39)
     99  4b11		       20		      .byte.b	32	;G
    100  4b12		       00		      .byte.b	0	;B
    101  4b13		       00		      .byte.b	0	;R (38)
    102  4b14		       00		      .byte.b	0	;G
    103  4b15		       00		      .byte.b	0	;B
    104  4b16		       00		      .byte.b	0	;R (37)
    105  4b17		       10		      .byte.b	16	;G
    106  4b18		       00		      .byte.b	0	;B
    107  4b19		       00		      .byte.b	0	;R (36)
    108  4b1a		       00		      .byte.b	0	;G
    109  4b1b		       00		      .byte.b	0	;B
    110  4b1c		       00		      .byte.b	0	;R (35)
    111  4b1d		       40		      .byte.b	64	;G
    112  4b1e		       00		      .byte.b	0	;B
    113  4b1f		       00		      .byte.b	0	;R (34)
    114  4b20		       20		      .byte.b	32	;G
    115  4b21		       00		      .byte.b	0	;B
    116  4b22		       00		      .byte.b	0	;R (33)
    117  4b23		       00		      .byte.b	0	;G
    118  4b24		       00		      .byte.b	0	;B
    119  4b25		       00		      .byte.b	0	;R (32)
    120  4b26		       00		      .byte.b	0	;G
    121  4b27		       00		      .byte.b	0	;B
    122  4b28		       00		      .byte.b	0	;R (31)
    123  4b29		       20		      .byte.b	32	;G
    124  4b2a		       00		      .byte.b	0	;B
    125  4b2b		       00		      .byte.b	0	;R (30)
    126  4b2c		       00		      .byte.b	0	;G
    127  4b2d		       00		      .byte.b	0	;B
    128  4b2e		       00		      .byte.b	0	;R (29)
    129  4b2f		       80		      .byte.b	128	;G
    130  4b30		       00		      .byte.b	0	;B
    131  4b31		       00		      .byte.b	0	;R (28)
    132  4b32		       00		      .byte.b	0	;G
    133  4b33		       00		      .byte.b	0	;B
    134  4b34		       00		      .byte.b	0	;R (27)
    135  4b35		       20		      .byte.b	32	;G
    136  4b36		       00		      .byte.b	0	;B
    137  4b37		       00		      .byte.b	0	;R (26)
    138  4b38		       00		      .byte.b	0	;G
    139  4b39		       00		      .byte.b	0	;B
    140  4b3a		       00		      .byte.b	0	;R (25)
    141  4b3b		       00		      .byte.b	0	;G
    142  4b3c		       00		      .byte.b	0	;B
    143  4b3d		       00		      .byte.b	0	;R (24)
    144  4b3e		       20		      .byte.b	32	;G
    145  4b3f		       00		      .byte.b	0	;B
    146  4b40		       00		      .byte.b	0	;R (23)
    147  4b41		       00		      .byte.b	0	;G
    148  4b42		       00		      .byte.b	0	;B
    149  4b43		       00		      .byte.b	0	;R (22)
    150  4b44		       00		      .byte.b	0	;G
    151  4b45		       00		      .byte.b	0	;B
    152  4b46		       00		      .byte.b	0	;R (21)
    153  4b47		       20		      .byte.b	32	;G
    154  4b48		       00		      .byte.b	0	;B
    155  4b49		       00		      .byte.b	0	;R (20)
    156  4b4a		       00		      .byte.b	0	;G
    157  4b4b		       00		      .byte.b	0	;B
    158  4b4c		       00		      .byte.b	0	;R (19)
    159  4b4d		       00		      .byte.b	0	;G
    160  4b4e		       00		      .byte.b	0	;B
    161  4b4f		       00		      .byte.b	0	;R (18)
    162  4b50		       00		      .byte.b	0	;G
    163  4b51		       00		      .byte.b	0	;B
    164  4b52		       00		      .byte.b	0	;R (17)
    165  4b53		       80		      .byte.b	128	;G
    166  4b54		       00		      .byte.b	0	;B
    167  4b55		       00		      .byte.b	0	;R (16)
    168  4b56		       00		      .byte.b	0	;G
    169  4b57		       00		      .byte.b	0	;B
    170  4b58		       00		      .byte.b	0	;R (15)
    171  4b59		       10		      .byte.b	16	;G
    172  4b5a		       00		      .byte.b	0	;B
    173  4b5b		       00		      .byte.b	0	;R (14)
    174  4b5c		       00		      .byte.b	0	;G
    175  4b5d		       00		      .byte.b	0	;B
    176  4b5e		       00		      .byte.b	0	;R (13)
    177  4b5f		       00		      .byte.b	0	;G
    178  4b60		       00		      .byte.b	0	;B
    179  4b61		       00		      .byte.b	0	;R (12)
    180  4b62		       80		      .byte.b	128	;G
    181  4b63		       00		      .byte.b	0	;B
    182  4b64		       00		      .byte.b	0	;R (11)
    183  4b65		       00		      .byte.b	0	;G
    184  4b66		       00		      .byte.b	0	;B
    185  4b67		       00		      .byte.b	0	;R (10)
    186  4b68		       00		      .byte.b	0	;G
    187  4b69		       00		      .byte.b	0	;B
    188  4b6a		       00		      .byte.b	0	;R (9)
    189  4b6b		       80		      .byte.b	128	;G
    190  4b6c		       00		      .byte.b	0	;B
    191  4b6d		       00		      .byte.b	0	;R (8)
    192  4b6e		       00		      .byte.b	0	;G
    193  4b6f		       00		      .byte.b	0	;B
    194  4b70		       00		      .byte.b	0	;R (7)
    195  4b71		       20		      .byte.b	32	;G
    196  4b72		       00		      .byte.b	0	;B
    197  4b73		       00		      .byte.b	0	;R (6)
    198  4b74		       00		      .byte.b	0	;G
    199  4b75		       00		      .byte.b	0	;B
    200  4b76		       00		      .byte.b	0	;R (5)
    201  4b77		       10		      .byte.b	16	;G
    202  4b78		       00		      .byte.b	0	;B
    203  4b79		       00		      .byte.b	0	;R (4)
    204  4b7a		       00		      .byte.b	0	;G
    205  4b7b		       00		      .byte.b	0	;B
    206  4b7c		       00		      .byte.b	0	;R (3)
    207  4b7d		       00		      .byte.b	0	;G
    208  4b7e		       00		      .byte.b	0	;B
    209  4b7f		       00		      .byte.b	0	;R (2)
    210  4b80		       40		      .byte.b	64	;G
    211  4b81		       00		      .byte.b	0	;B
    212  4b82		       00		      .byte.b	0	;R (1)
    213  4b83		       00		      .byte.b	0	;G
    214  4b84		       00		      .byte.b	0	;B
    215  4b85		       00		      .byte.b	0	;R (0)
    216  4b86		       00		      .byte.b	0	;G
    217  4b87		       00		      .byte.b	0	;B
    218  4b88				   COL_1
    219  4b88		       80		      .byte.b	128	;R (71)
    220  4b89		       80		      .byte.b	128	;G
    221  4b8a		       00		      .byte.b	0	;B
    222  4b8b		       10		      .byte.b	16	;R (70)
    223  4b8c		       14		      .byte.b	20	;G
    224  4b8d		       00		      .byte.b	0	;B
    225  4b8e		       00		      .byte.b	0	;R (69)
    226  4b8f		       41		      .byte.b	65	;G
    227  4b90		       00		      .byte.b	0	;B
    228  4b91		       00		      .byte.b	0	;R (68)
    229  4b92		       08		      .byte.b	8	;G
    230  4b93		       00		      .byte.b	0	;B
    231  4b94		       20		      .byte.b	32	;R (67)
    232  4b95		       20		      .byte.b	32	;G
    233  4b96		       00		      .byte.b	0	;B
    234  4b97		       63		      .byte.b	99	;R (66)
    235  4b98		       6b		      .byte.b	107	;G
    236  4b99		       00		      .byte.b	0	;B
    237  4b9a		       ff		      .byte.b	255	;R (65)
    238  4b9b		       f5		      .byte.b	245	;G
    239  4b9c		       00		      .byte.b	0	;B
    240  4b9d		       80		      .byte.b	128	;R (64)
    241  4b9e		       fb		      .byte.b	251	;G
    242  4b9f		       04		      .byte.b	4	;B
    243  4ba0		       00		      .byte.b	0	;R (63)
    244  4ba1		       b7		      .byte.b	183	;G
    245  4ba2		       00		      .byte.b	0	;B
    246  4ba3		       00		      .byte.b	0	;R (62)
    247  4ba4		       b5		      .byte.b	181	;G
    248  4ba5		       00		      .byte.b	0	;B
    249  4ba6		       00		      .byte.b	0	;R (61)
    250  4ba7		       ef		      .byte.b	239	;G
    251  4ba8		       10		      .byte.b	16	;B
    252  4ba9		       00		      .byte.b	0	;R (60)
    253  4baa		       bd		      .byte.b	189	;G
    254  4bab		       42		      .byte.b	66	;B
    255  4bac		       00		      .byte.b	0	;R (59)
    256  4bad		       77		      .byte.b	119	;G
    257  4bae		       00		      .byte.b	0	;B
    258  4baf		       00		      .byte.b	0	;R (58)
    259  4bb0		       ee		      .byte.b	238	;G
    260  4bb1		       00		      .byte.b	0	;B
    261  4bb2		       00		      .byte.b	0	;R (57)
    262  4bb3		       9b		      .byte.b	155	;G
    263  4bb4		       00		      .byte.b	0	;B
    264  4bb5		       00		      .byte.b	0	;R (56)
    265  4bb6		       f2		      .byte.b	242	;G
    266  4bb7		       00		      .byte.b	0	;B
    267  4bb8		       00		      .byte.b	0	;R (55)
    268  4bb9		       40		      .byte.b	64	;G
    269  4bba		       00		      .byte.b	0	;B
    270  4bbb		       00		      .byte.b	0	;R (54)
    271  4bbc		       df		      .byte.b	223	;G
    272  4bbd		       00		      .byte.b	0	;B
    273  4bbe		       10		      .byte.b	16	;R (53)
    274  4bbf		       69		      .byte.b	105	;G
    275  4bc0		       10		      .byte.b	16	;B
    276  4bc1		       00		      .byte.b	0	;R (52)
    277  4bc2		       4b		      .byte.b	75	;G
    278  4bc3		       00		      .byte.b	0	;B
    279  4bc4		       00		      .byte.b	0	;R (51)
    280  4bc5		       b0		      .byte.b	176	;G
    281  4bc6		       00		      .byte.b	0	;B
    282  4bc7		       00		      .byte.b	0	;R (50)
    283  4bc8		       a7		      .byte.b	167	;G
    284  4bc9		       00		      .byte.b	0	;B
    285  4bca		       00		      .byte.b	0	;R (49)
    286  4bcb		       7d		      .byte.b	125	;G
    287  4bcc		       02		      .byte.b	2	;B
    288  4bcd		       00		      .byte.b	0	;R (48)
    289  4bce		       db		      .byte.b	219	;G
    290  4bcf		       20		      .byte.b	32	;B
    291  4bd0		       00		      .byte.b	0	;R (47)
    292  4bd1		       6d		      .byte.b	109	;G
    293  4bd2		       00		      .byte.b	0	;B
    294  4bd3		       00		      .byte.b	0	;R (46)
    295  4bd4		       ea		      .byte.b	234	;G
    296  4bd5		       00		      .byte.b	0	;B
    297  4bd6		       00		      .byte.b	0	;R (45)
    298  4bd7		       13		      .byte.b	19	;G
    299  4bd8		       00		      .byte.b	0	;B
    300  4bd9		       00		      .byte.b	0	;R (44)
    301  4bda		       7e		      .byte.b	126	;G
    302  4bdb		       01		      .byte.b	1	;B
    303  4bdc		       22		      .byte.b	34	;R (43)
    304  4bdd		       77		      .byte.b	119	;G
    305  4bde		       08		      .byte.b	8	;B
    306  4bdf		       04		      .byte.b	4	;R (42)
    307  4be0		       5f		      .byte.b	95	;G
    308  4be1		       00		      .byte.b	0	;B
    309  4be2		       00		      .byte.b	0	;R (41)
    310  4be3		       6f		      .byte.b	111	;G
    311  4be4		       00		      .byte.b	0	;B
    312  4be5		       00		      .byte.b	0	;R (40)
    313  4be6		       b5		      .byte.b	181	;G
    314  4be7		       00		      .byte.b	0	;B
    315  4be8		       00		      .byte.b	0	;R (39)
    316  4be9		       5b		      .byte.b	91	;G
    317  4bea		       00		      .byte.b	0	;B
    318  4beb		       00		      .byte.b	0	;R (38)
    319  4bec		       57		      .byte.b	87	;G
    320  4bed		       00		      .byte.b	0	;B
    321  4bee		       20		      .byte.b	32	;R (37)
    322  4bef		       4d		      .byte.b	77	;G
    323  4bf0		       22		      .byte.b	34	;B
    324  4bf1		       00		      .byte.b	0	;R (36)
    325  4bf2		       55		      .byte.b	85	;G
    326  4bf3		       00		      .byte.b	0	;B
    327  4bf4		       01		      .byte.b	1	;R (35)
    328  4bf5		       56		      .byte.b	86	;G
    329  4bf6		       00		      .byte.b	0	;B
    330  4bf7		       02		      .byte.b	2	;R (34)
    331  4bf8		       57		      .byte.b	87	;G
    332  4bf9		       00		      .byte.b	0	;B
    333  4bfa		       00		      .byte.b	0	;R (33)
    334  4bfb		       2a		      .byte.b	42	;G
    335  4bfc		       01		      .byte.b	1	;B
    336  4bfd		       01		      .byte.b	1	;R (32)
    337  4bfe		       ab		      .byte.b	171	;G
    338  4bff		       00		      .byte.b	0	;B
    339  4c00		       22		      .byte.b	34	;R (31)
    340  4c01		       17		      .byte.b	23	;G
    341  4c02		       20		      .byte.b	32	;B
    342  4c03		       00		      .byte.b	0	;R (30)
    343  4c04		       55		      .byte.b	85	;G
    344  4c05		       02		      .byte.b	2	;B
    345  4c06		       22		      .byte.b	34	;R (29)
    346  4c07		       17		      .byte.b	23	;G
    347  4c08		       20		      .byte.b	32	;B
    348  4c09		       00		      .byte.b	0	;R (28)
    349  4c0a		       2b		      .byte.b	43	;G
    350  4c0b		       00		      .byte.b	0	;B
    351  4c0c		       00		      .byte.b	0	;R (27)
    352  4c0d		       95		      .byte.b	149	;G
    353  4c0e		       02		      .byte.b	2	;B
    354  4c0f		       00		      .byte.b	0	;R (26)
    355  4c10		       17		      .byte.b	23	;G
    356  4c11		       00		      .byte.b	0	;B
    357  4c12		       00		      .byte.b	0	;R (25)
    358  4c13		       2d		      .byte.b	45	;G
    359  4c14		       00		      .byte.b	0	;B
    360  4c15		       00		      .byte.b	0	;R (24)
    361  4c16		       b4		      .byte.b	180	;G
    362  4c17		       00		      .byte.b	0	;B
    363  4c18		       00		      .byte.b	0	;R (23)
    364  4c19		       0a		      .byte.b	10	;G
    365  4c1a		       00		      .byte.b	0	;B
    366  4c1b		       10		      .byte.b	16	;R (22)
    367  4c1c		       3c		      .byte.b	60	;G
    368  4c1d		       00		      .byte.b	0	;B
    369  4c1e		       10		      .byte.b	16	;R (21)
    370  4c1f		       98		      .byte.b	152	;G
    371  4c20		       00		      .byte.b	0	;B
    372  4c21		       10		      .byte.b	16	;R (20)
    373  4c22		       1a		      .byte.b	26	;G
    374  4c23		       00		      .byte.b	0	;B
    375  4c24		       00		      .byte.b	0	;R (19)
    376  4c25		       14		      .byte.b	20	;G
    377  4c26		       00		      .byte.b	0	;B
    378  4c27		       00		      .byte.b	0	;R (18)
    379  4c28		       5a		      .byte.b	90	;G
    380  4c29		       00		      .byte.b	0	;B
    381  4c2a		       00		      .byte.b	0	;R (17)
    382  4c2b		       09		      .byte.b	9	;G
    383  4c2c		       00		      .byte.b	0	;B
    384  4c2d		       08		      .byte.b	8	;R (16)
    385  4c2e		       1d		      .byte.b	29	;G
    386  4c2f		       00		      .byte.b	0	;B
    387  4c30		       00		      .byte.b	0	;R (15)
    388  4c31		       1a		      .byte.b	26	;G
    389  4c32		       00		      .byte.b	0	;B
    390  4c33		       20		      .byte.b	32	;R (14)
    391  4c34		       ba		      .byte.b	186	;G
    392  4c35		       00		      .byte.b	0	;B
    393  4c36		       00		      .byte.b	0	;R (13)
    394  4c37		       12		      .byte.b	18	;G
    395  4c38		       00		      .byte.b	0	;B
    396  4c39		       00		      .byte.b	0	;R (12)
    397  4c3a		       1a		      .byte.b	26	;G
    398  4c3b		       00		      .byte.b	0	;B
    399  4c3c		       00		      .byte.b	0	;R (11)
    400  4c3d		       2d		      .byte.b	45	;G
    401  4c3e		       10		      .byte.b	16	;B
    402  4c3f		       10		      .byte.b	16	;R (10)
    403  4c40		       3b		      .byte.b	59	;G
    404  4c41		       00		      .byte.b	0	;B
    405  4c42		       24		      .byte.b	36	;R (9)
    406  4c43		       39		      .byte.b	57	;G
    407  4c44		       04		      .byte.b	4	;B
    408  4c45		       20		      .byte.b	32	;R (8)
    409  4c46		       35		      .byte.b	53	;G
    410  4c47		       00		      .byte.b	0	;B
    411  4c48		       00		      .byte.b	0	;R (7)
    412  4c49		       3d		      .byte.b	61	;G
    413  4c4a		       00		      .byte.b	0	;B
    414  4c4b		       00		      .byte.b	0	;R (6)
    415  4c4c		       32		      .byte.b	50	;G
    416  4c4d		       00		      .byte.b	0	;B
    417  4c4e		       00		      .byte.b	0	;R (5)
    418  4c4f		       98		      .byte.b	152	;G
    419  4c50		       00		      .byte.b	0	;B
    420  4c51		       00		      .byte.b	0	;R (4)
    421  4c52		       12		      .byte.b	18	;G
    422  4c53		       00		      .byte.b	0	;B
    423  4c54		       00		      .byte.b	0	;R (3)
    424  4c55		       20		      .byte.b	32	;G
    425  4c56		       00		      .byte.b	0	;B
    426  4c57		       01		      .byte.b	1	;R (2)
    427  4c58		       49		      .byte.b	73	;G
    428  4c59		       00		      .byte.b	0	;B
    429  4c5a		       20		      .byte.b	32	;R (1)
    430  4c5b		       20		      .byte.b	32	;G
    431  4c5c		       00		      .byte.b	0	;B
    432  4c5d		       00		      .byte.b	0	;R (0)
    433  4c5e		       00		      .byte.b	0	;G
    434  4c5f		       00		      .byte.b	0	;B
    435  4c60				   COL_2
    436  4c60		       14		      .byte.b	20	;R (71)
    437  4c61		       14		      .byte.b	20	;G
    438  4c62		       00		      .byte.b	0	;B
    439  4c63		       40		      .byte.b	64	;R (70)
    440  4c64		       42		      .byte.b	66	;G
    441  4c65		       00		      .byte.b	0	;B
    442  4c66		       a8		      .byte.b	168	;R (69)
    443  4c67		       a8		      .byte.b	168	;G
    444  4c68		       00		      .byte.b	0	;B
    445  4c69		       fd		      .byte.b	253	;R (68)
    446  4c6a		       1d		      .byte.b	29	;G
    447  4c6b		       00		      .byte.b	0	;B
    448  4c6c		       f0		      .byte.b	240	;R (67)
    449  4c6d		       44		      .byte.b	68	;G
    450  4c6e		       08		      .byte.b	8	;B
    451  4c6f		       ff		      .byte.b	255	;R (66)
    452  4c70		       2f		      .byte.b	47	;G
    453  4c71		       00		      .byte.b	0	;B
    454  4c72		       ff		      .byte.b	255	;R (65)
    455  4c73		       0e		      .byte.b	14	;G
    456  4c74		       00		      .byte.b	0	;B
    457  4c75		       f8		      .byte.b	248	;R (64)
    458  4c76		       0f		      .byte.b	15	;G
    459  4c77		       00		      .byte.b	0	;B
    460  4c78		       f8		      .byte.b	248	;R (63)
    461  4c79		       2e		      .byte.b	46	;G
    462  4c7a		       00		      .byte.b	0	;B
    463  4c7b		       f8		      .byte.b	248	;R (62)
    464  4c7c		       1e		      .byte.b	30	;G
    465  4c7d		       01		      .byte.b	1	;B
    466  4c7e		       74		      .byte.b	116	;R (61)
    467  4c7f		       23		      .byte.b	35	;G
    468  4c80		       88		      .byte.b	136	;B
    469  4c81		       fc		      .byte.b	252	;R (60)
    470  4c82		       0f		      .byte.b	15	;G
    471  4c83		       00		      .byte.b	0	;B
    472  4c84		       f8		      .byte.b	248	;R (59)
    473  4c85		       06		      .byte.b	6	;G
    474  4c86		       01		      .byte.b	1	;B
    475  4c87		       f8		      .byte.b	248	;R (58)
    476  4c88		       8f		      .byte.b	143	;G
    477  4c89		       00		      .byte.b	0	;B
    478  4c8a		       e8		      .byte.b	232	;R (57)
    479  4c8b		       0e		      .byte.b	14	;G
    480  4c8c		       10		      .byte.b	16	;B
    481  4c8d		       e0		      .byte.b	224	;R (56)
    482  4c8e		       97		      .byte.b	151	;G
    483  4c8f		       00		      .byte.b	0	;B
    484  4c90		       f0		      .byte.b	240	;R (55)
    485  4c91		       3a		      .byte.b	58	;G
    486  4c92		       00		      .byte.b	0	;B
    487  4c93		       e0		      .byte.b	224	;R (54)
    488  4c94		       bb		      .byte.b	187	;G
    489  4c95		       04		      .byte.b	4	;B
    490  4c96		       e0		      .byte.b	224	;R (53)
    491  4c97		       3e		      .byte.b	62	;G
    492  4c98		       00		      .byte.b	0	;B
    493  4c99		       c0		      .byte.b	192	;R (52)
    494  4c9a		       2a		      .byte.b	42	;G
    495  4c9b		       00		      .byte.b	0	;B
    496  4c9c		       80		      .byte.b	128	;R (51)
    497  4c9d		       3f		      .byte.b	63	;G
    498  4c9e		       40		      .byte.b	64	;B
    499  4c9f		       f5		      .byte.b	245	;R (50)
    500  4ca0		       3f		      .byte.b	63	;G
    501  4ca1		       00		      .byte.b	0	;B
    502  4ca2		       e8		      .byte.b	232	;R (49)
    503  4ca3		       7f		      .byte.b	127	;G
    504  4ca4		       00		      .byte.b	0	;B
    505  4ca5		       e0		      .byte.b	224	;R (48)
    506  4ca6		       7a		      .byte.b	122	;G
    507  4ca7		       04		      .byte.b	4	;B
    508  4ca8		       c0		      .byte.b	192	;R (47)
    509  4ca9		       5f		      .byte.b	95	;G
    510  4caa		       00		      .byte.b	0	;B
    511  4cab		       90		      .byte.b	144	;R (46)
    512  4cac		       dd		      .byte.b	221	;G
    513  4cad		       02		      .byte.b	2	;B
    514  4cae		       84		      .byte.b	132	;R (45)
    515  4caf		       9f		      .byte.b	159	;G
    516  4cb0		       00		      .byte.b	0	;B
    517  4cb1		       c4		      .byte.b	196	;R (44)
    518  4cb2		       cf		      .byte.b	207	;G
    519  4cb3		       00		      .byte.b	0	;B
    520  4cb4		       c5		      .byte.b	197	;R (43)
    521  4cb5		       1f		      .byte.b	31	;G
    522  4cb6		       00		      .byte.b	0	;B
    523  4cb7		       d4		      .byte.b	212	;R (42)
    524  4cb8		       9f		      .byte.b	159	;G
    525  4cb9		       20		      .byte.b	32	;B
    526  4cba		       c8		      .byte.b	200	;R (41)
    527  4cbb		       1e		      .byte.b	30	;G
    528  4cbc		       01		      .byte.b	1	;B
    529  4cbd		       c8		      .byte.b	200	;R (40)
    530  4cbe		       5f		      .byte.b	95	;G
    531  4cbf		       00		      .byte.b	0	;B
    532  4cc0		       cd		      .byte.b	205	;R (39)
    533  4cc1		       5e		      .byte.b	94	;G
    534  4cc2		       00		      .byte.b	0	;B
    535  4cc3		       c7		      .byte.b	199	;R (38)
    536  4cc4		       5b		      .byte.b	91	;G
    537  4cc5		       00		      .byte.b	0	;B
    538  4cc6		       8b		      .byte.b	139	;R (37)
    539  4cc7		       1c		      .byte.b	28	;G
    540  4cc8		       00		      .byte.b	0	;B
    541  4cc9		       81		      .byte.b	129	;R (36)
    542  4cca		       9a		      .byte.b	154	;G
    543  4ccb		       04		      .byte.b	4	;B
    544  4ccc		       8e		      .byte.b	142	;R (35)
    545  4ccd		       9d		      .byte.b	157	;G
    546  4cce		       00		      .byte.b	0	;B
    547  4ccf		       2b		      .byte.b	43	;R (34)
    548  4cd0		       36		      .byte.b	54	;G
    549  4cd1		       00		      .byte.b	0	;B
    550  4cd2		       3a		      .byte.b	58	;R (33)
    551  4cd3		       0d		      .byte.b	13	;G
    552  4cd4		       00		      .byte.b	0	;B
    553  4cd5		       3e		      .byte.b	62	;R (32)
    554  4cd6		       85		      .byte.b	133	;G
    555  4cd7		       40		      .byte.b	64	;B
    556  4cd8		       fa		      .byte.b	250	;R (31)
    557  4cd9		       17		      .byte.b	23	;G
    558  4cda		       00		      .byte.b	0	;B
    559  4cdb		       ff		      .byte.b	255	;R (30)
    560  4cdc		       03		      .byte.b	3	;G
    561  4cdd		       00		      .byte.b	0	;B
    562  4cde		       fc		      .byte.b	252	;R (29)
    563  4cdf		       93		      .byte.b	147	;G
    564  4ce0		       00		      .byte.b	0	;B
    565  4ce1		       f7		      .byte.b	247	;R (28)
    566  4ce2		       81		      .byte.b	129	;G
    567  4ce3		       08		      .byte.b	8	;B
    568  4ce4		       ff		      .byte.b	255	;R (27)
    569  4ce5		       03		      .byte.b	3	;G
    570  4ce6		       00		      .byte.b	0	;B
    571  4ce7		       fe		      .byte.b	254	;R (26)
    572  4ce8		       2b		      .byte.b	43	;G
    573  4ce9		       00		      .byte.b	0	;B
    574  4cea		       fe		      .byte.b	254	;R (25)
    575  4ceb		       0a		      .byte.b	10	;G
    576  4cec		       00		      .byte.b	0	;B
    577  4ced		       fc		      .byte.b	252	;R (24)
    578  4cee		       4f		      .byte.b	79	;G
    579  4cef		       00		      .byte.b	0	;B
    580  4cf0		       fc		      .byte.b	252	;R (23)
    581  4cf1		       55		      .byte.b	85	;G
    582  4cf2		       00		      .byte.b	0	;B
    583  4cf3		       f8		      .byte.b	248	;R (22)
    584  4cf4		       45		      .byte.b	69	;G
    585  4cf5		       00		      .byte.b	0	;B
    586  4cf6		       e8		      .byte.b	232	;R (21)
    587  4cf7		       05		      .byte.b	5	;G
    588  4cf8		       10		      .byte.b	16	;B
    589  4cf9		       f8		      .byte.b	248	;R (20)
    590  4cfa		       5b		      .byte.b	91	;G
    591  4cfb		       00		      .byte.b	0	;B
    592  4cfc		       f8		      .byte.b	248	;R (19)
    593  4cfd		       1d		      .byte.b	29	;G
    594  4cfe		       00		      .byte.b	0	;B
    595  4cff		       f0		      .byte.b	240	;R (18)
    596  4d00		       55		      .byte.b	85	;G
    597  4d01		       00		      .byte.b	0	;B
    598  4d02		       f0		      .byte.b	240	;R (17)
    599  4d03		       16		      .byte.b	22	;G
    600  4d04		       00		      .byte.b	0	;B
    601  4d05		       f0		      .byte.b	240	;R (16)
    602  4d06		       b2		      .byte.b	178	;G
    603  4d07		       00		      .byte.b	0	;B
    604  4d08		       e0		      .byte.b	224	;R (15)
    605  4d09		       0e		      .byte.b	14	;G
    606  4d0a		       10		      .byte.b	16	;B
    607  4d0b		       f0		      .byte.b	240	;R (14)
    608  4d0c		       93		      .byte.b	147	;G
    609  4d0d		       00		      .byte.b	0	;B
    610  4d0e		       e0		      .byte.b	224	;R (13)
    611  4d0f		       25		      .byte.b	37	;G
    612  4d10		       00		      .byte.b	0	;B
    613  4d11		       c0		      .byte.b	192	;R (12)
    614  4d12		       e5		      .byte.b	229	;G
    615  4d13		       00		      .byte.b	0	;B
    616  4d14		       80		      .byte.b	128	;R (11)
    617  4d15		       0e		      .byte.b	14	;G
    618  4d16		       00		      .byte.b	0	;B
    619  4d17		       c0		      .byte.b	192	;R (10)
    620  4d18		       ca		      .byte.b	202	;G
    621  4d19		       00		      .byte.b	0	;B
    622  4d1a		       84		      .byte.b	132	;R (9)
    623  4d1b		       8e		      .byte.b	142	;G
    624  4d1c		       00		      .byte.b	0	;B
    625  4d1d		       00		      .byte.b	0	;R (8)
    626  4d1e		       8e		      .byte.b	142	;G
    627  4d1f		       00		      .byte.b	0	;B
    628  4d20		       00		      .byte.b	0	;R (7)
    629  4d21		       15		      .byte.b	21	;G
    630  4d22		       00		      .byte.b	0	;B
    631  4d23		       00		      .byte.b	0	;R (6)
    632  4d24		       14		      .byte.b	20	;G
    633  4d25		       00		      .byte.b	0	;B
    634  4d26		       00		      .byte.b	0	;R (5)
    635  4d27		       14		      .byte.b	20	;G
    636  4d28		       00		      .byte.b	0	;B
    637  4d29		       00		      .byte.b	0	;R (4)
    638  4d2a		       0a		      .byte.b	10	;G
    639  4d2b		       00		      .byte.b	0	;B
    640  4d2c		       00		      .byte.b	0	;R (3)
    641  4d2d		       10		      .byte.b	16	;G
    642  4d2e		       00		      .byte.b	0	;B
    643  4d2f		       08		      .byte.b	8	;R (2)
    644  4d30		       88		      .byte.b	136	;G
    645  4d31		       00		      .byte.b	0	;B
    646  4d32		       40		      .byte.b	64	;R (1)
    647  4d33		       42		      .byte.b	66	;G
    648  4d34		       00		      .byte.b	0	;B
    649  4d35		       00		      .byte.b	0	;R (0)
    650  4d36		       00		      .byte.b	0	;G
    651  4d37		       00		      .byte.b	0	;B
    652  4d38				   COL_3
    653  4d38		       90		      .byte.b	144	;R (71)
    654  4d39		       90		      .byte.b	144	;G
    655  4d3a		       00		      .byte.b	0	;B
    656  4d3b		       40		      .byte.b	64	;R (70)
    657  4d3c		       40		      .byte.b	64	;G
    658  4d3d		       00		      .byte.b	0	;B
    659  4d3e		       b0		      .byte.b	176	;R (69)
    660  4d3f		       b0		      .byte.b	176	;G
    661  4d40		       00		      .byte.b	0	;B
    662  4d41		       d0		      .byte.b	208	;R (68)
    663  4d42		       00		      .byte.b	0	;G
    664  4d43		       20		      .byte.b	32	;B
    665  4d44		       f0		      .byte.b	240	;R (67)
    666  4d45		       00		      .byte.b	0	;G
    667  4d46		       00		      .byte.b	0	;B
    668  4d47		       f0		      .byte.b	240	;R (66)
    669  4d48		       d0		      .byte.b	208	;G
    670  4d49		       00		      .byte.b	0	;B
    671  4d4a		       f0		      .byte.b	240	;R (65)
    672  4d4b		       00		      .byte.b	0	;G
    673  4d4c		       00		      .byte.b	0	;B
    674  4d4d		       f0		      .byte.b	240	;R (64)
    675  4d4e		       00		      .byte.b	0	;G
    676  4d4f		       00		      .byte.b	0	;B
    677  4d50		       f0		      .byte.b	240	;R (63)
    678  4d51		       50		      .byte.b	80	;G
    679  4d52		       00		      .byte.b	0	;B
    680  4d53		       f0		      .byte.b	240	;R (62)
    681  4d54		       00		      .byte.b	0	;G
    682  4d55		       00		      .byte.b	0	;B
    683  4d56		       f0		      .byte.b	240	;R (61)
    684  4d57		       a0		      .byte.b	160	;G
    685  4d58		       00		      .byte.b	0	;B
    686  4d59		       f0		      .byte.b	240	;R (60)
    687  4d5a		       00		      .byte.b	0	;G
    688  4d5b		       00		      .byte.b	0	;B
    689  4d5c		       f0		      .byte.b	240	;R (59)
    690  4d5d		       d0		      .byte.b	208	;G
    691  4d5e		       00		      .byte.b	0	;B
    692  4d5f		       f0		      .byte.b	240	;R (58)
    693  4d60		       c0		      .byte.b	192	;G
    694  4d61		       00		      .byte.b	0	;B
    695  4d62		       f0		      .byte.b	240	;R (57)
    696  4d63		       90		      .byte.b	144	;G
    697  4d64		       00		      .byte.b	0	;B
    698  4d65		       f0		      .byte.b	240	;R (56)
    699  4d66		       80		      .byte.b	128	;G
    700  4d67		       00		      .byte.b	0	;B
    701  4d68		       f0		      .byte.b	240	;R (55)
    702  4d69		       40		      .byte.b	64	;G
    703  4d6a		       00		      .byte.b	0	;B
    704  4d6b		       70		      .byte.b	112	;R (54)
    705  4d6c		       00		      .byte.b	0	;G
    706  4d6d		       80		      .byte.b	128	;B
    707  4d6e		       d0		      .byte.b	208	;R (53)
    708  4d6f		       00		      .byte.b	0	;G
    709  4d70		       20		      .byte.b	32	;B
    710  4d71		       f0		      .byte.b	240	;R (52)
    711  4d72		       80		      .byte.b	128	;G
    712  4d73		       00		      .byte.b	0	;B
    713  4d74		       f0		      .byte.b	240	;R (51)
    714  4d75		       00		      .byte.b	0	;G
    715  4d76		       00		      .byte.b	0	;B
    716  4d77		       f0		      .byte.b	240	;R (50)
    717  4d78		       a0		      .byte.b	160	;G
    718  4d79		       00		      .byte.b	0	;B
    719  4d7a		       f0		      .byte.b	240	;R (49)
    720  4d7b		       80		      .byte.b	128	;G
    721  4d7c		       00		      .byte.b	0	;B
    722  4d7d		       f0		      .byte.b	240	;R (48)
    723  4d7e		       40		      .byte.b	64	;G
    724  4d7f		       00		      .byte.b	0	;B
    725  4d80		       f0		      .byte.b	240	;R (47)
    726  4d81		       20		      .byte.b	32	;G
    727  4d82		       00		      .byte.b	0	;B
    728  4d83		       f0		      .byte.b	240	;R (46)
    729  4d84		       00		      .byte.b	0	;G
    730  4d85		       00		      .byte.b	0	;B
    731  4d86		       f0		      .byte.b	240	;R (45)
    732  4d87		       80		      .byte.b	128	;G
    733  4d88		       00		      .byte.b	0	;B
    734  4d89		       f0		      .byte.b	240	;R (44)
    735  4d8a		       00		      .byte.b	0	;G
    736  4d8b		       00		      .byte.b	0	;B
    737  4d8c		       f0		      .byte.b	240	;R (43)
    738  4d8d		       40		      .byte.b	64	;G
    739  4d8e		       00		      .byte.b	0	;B
    740  4d8f		       f0		      .byte.b	240	;R (42)
    741  4d90		       00		      .byte.b	0	;G
    742  4d91		       00		      .byte.b	0	;B
    743  4d92		       f0		      .byte.b	240	;R (41)
    744  4d93		       20		      .byte.b	32	;G
    745  4d94		       00		      .byte.b	0	;B
    746  4d95		       f0		      .byte.b	240	;R (40)
    747  4d96		       20		      .byte.b	32	;G
    748  4d97		       00		      .byte.b	0	;B
    749  4d98		       f0		      .byte.b	240	;R (39)
    750  4d99		       50		      .byte.b	80	;G
    751  4d9a		       00		      .byte.b	0	;B
    752  4d9b		       f0		      .byte.b	240	;R (38)
    753  4d9c		       10		      .byte.b	16	;G
    754  4d9d		       00		      .byte.b	0	;B
    755  4d9e		       70		      .byte.b	112	;R (37)
    756  4d9f		       80		      .byte.b	128	;G
    757  4da0		       80		      .byte.b	128	;B
    758  4da1		       f0		      .byte.b	240	;R (36)
    759  4da2		       50		      .byte.b	80	;G
    760  4da3		       00		      .byte.b	0	;B
    761  4da4		       f0		      .byte.b	240	;R (35)
    762  4da5		       00		      .byte.b	0	;G
    763  4da6		       00		      .byte.b	0	;B
    764  4da7		       f0		      .byte.b	240	;R (34)
    765  4da8		       40		      .byte.b	64	;G
    766  4da9		       00		      .byte.b	0	;B
    767  4daa		       f0		      .byte.b	240	;R (33)
    768  4dab		       10		      .byte.b	16	;G
    769  4dac		       00		      .byte.b	0	;B
    770  4dad		       f0		      .byte.b	240	;R (32)
    771  4dae		       b0		      .byte.b	176	;G
    772  4daf		       00		      .byte.b	0	;B
    773  4db0		       e0		      .byte.b	224	;R (31)
    774  4db1		       00		      .byte.b	0	;G
    775  4db2		       10		      .byte.b	16	;B
    776  4db3		       e0		      .byte.b	224	;R (30)
    777  4db4		       40		      .byte.b	64	;G
    778  4db5		       00		      .byte.b	0	;B
    779  4db6		       e0		      .byte.b	224	;R (29)
    780  4db7		       20		      .byte.b	32	;G
    781  4db8		       00		      .byte.b	0	;B
    782  4db9		       c0		      .byte.b	192	;R (28)
    783  4dba		       00		      .byte.b	0	;G
    784  4dbb		       00		      .byte.b	0	;B
    785  4dbc		       c0		      .byte.b	192	;R (27)
    786  4dbd		       10		      .byte.b	16	;G
    787  4dbe		       00		      .byte.b	0	;B
    788  4dbf		       c0		      .byte.b	192	;R (26)
    789  4dc0		       40		      .byte.b	64	;G
    790  4dc1		       10		      .byte.b	16	;B
    791  4dc2		       90		      .byte.b	144	;R (25)
    792  4dc3		       00		      .byte.b	0	;G
    793  4dc4		       00		      .byte.b	0	;B
    794  4dc5		       f0		      .byte.b	240	;R (24)
    795  4dc6		       60		      .byte.b	96	;G
    796  4dc7		       00		      .byte.b	0	;B
    797  4dc8		       f0		      .byte.b	240	;R (23)
    798  4dc9		       00		      .byte.b	0	;G
    799  4dca		       00		      .byte.b	0	;B
    800  4dcb		       f0		      .byte.b	240	;R (22)
    801  4dcc		       40		      .byte.b	64	;G
    802  4dcd		       00		      .byte.b	0	;B
    803  4dce		       f0		      .byte.b	240	;R (21)
    804  4dcf		       10		      .byte.b	16	;G
    805  4dd0		       00		      .byte.b	0	;B
    806  4dd1		       f0		      .byte.b	240	;R (20)
    807  4dd2		       00		      .byte.b	0	;G
    808  4dd3		       00		      .byte.b	0	;B
    809  4dd4		       f0		      .byte.b	240	;R (19)
    810  4dd5		       60		      .byte.b	96	;G
    811  4dd6		       00		      .byte.b	0	;B
    812  4dd7		       f0		      .byte.b	240	;R (18)
    813  4dd8		       20		      .byte.b	32	;G
    814  4dd9		       00		      .byte.b	0	;B
    815  4dda		       f0		      .byte.b	240	;R (17)
    816  4ddb		       50		      .byte.b	80	;G
    817  4ddc		       00		      .byte.b	0	;B
    818  4ddd		       f0		      .byte.b	240	;R (16)
    819  4dde		       40		      .byte.b	64	;G
    820  4ddf		       00		      .byte.b	0	;B
    821  4de0		       f0		      .byte.b	240	;R (15)
    822  4de1		       80		      .byte.b	128	;G
    823  4de2		       00		      .byte.b	0	;B
    824  4de3		       f0		      .byte.b	240	;R (14)
    825  4de4		       40		      .byte.b	64	;G
    826  4de5		       00		      .byte.b	0	;B
    827  4de6		       f0		      .byte.b	240	;R (13)
    828  4de7		       00		      .byte.b	0	;G
    829  4de8		       00		      .byte.b	0	;B
    830  4de9		       f0		      .byte.b	240	;R (12)
    831  4dea		       10		      .byte.b	16	;G
    832  4deb		       00		      .byte.b	0	;B
    833  4dec		       f0		      .byte.b	240	;R (11)
    834  4ded		       50		      .byte.b	80	;G
    835  4dee		       00		      .byte.b	0	;B
    836  4def		       f0		      .byte.b	240	;R (10)
    837  4df0		       00		      .byte.b	0	;G
    838  4df1		       00		      .byte.b	0	;B
    839  4df2		       f0		      .byte.b	240	;R (9)
    840  4df3		       b0		      .byte.b	176	;G
    841  4df4		       00		      .byte.b	0	;B
    842  4df5		       f0		      .byte.b	240	;R (8)
    843  4df6		       90		      .byte.b	144	;G
    844  4df7		       00		      .byte.b	0	;B
    845  4df8		       e0		      .byte.b	224	;R (7)
    846  4df9		       e0		      .byte.b	224	;G
    847  4dfa		       00		      .byte.b	0	;B
    848  4dfb		       f0		      .byte.b	240	;R (6)
    849  4dfc		       d0		      .byte.b	208	;G
    850  4dfd		       00		      .byte.b	0	;B
    851  4dfe		       60		      .byte.b	96	;R (5)
    852  4dff		       00		      .byte.b	0	;G
    853  4e00		       00		      .byte.b	0	;B
    854  4e01		       60		      .byte.b	96	;R (4)
    855  4e02		       40		      .byte.b	64	;G
    856  4e03		       00		      .byte.b	0	;B
    857  4e04		       40		      .byte.b	64	;R (3)
    858  4e05		       50		      .byte.b	80	;G
    859  4e06		       00		      .byte.b	0	;B
    860  4e07		       00		      .byte.b	0	;R (2)
    861  4e08		       00		      .byte.b	0	;G
    862  4e09		       00		      .byte.b	0	;B
    863  4e0a		       00		      .byte.b	0	;R (1)
    864  4e0b		       80		      .byte.b	128	;G
    865  4e0c		       00		      .byte.b	0	;B
    866  4e0d		       00		      .byte.b	0	;R (0)
    867  4e0e		       00		      .byte.b	0	;G
    868  4e0f		       00		      .byte.b	0	;B
    869  4e10				   COL_4
    870  4e10		       25		      .byte.b	37	;R (71)
    871  4e11		       25		      .byte.b	37	;G
    872  4e12		       00		      .byte.b	0	;B
    873  4e13		       48		      .byte.b	72	;R (70)
    874  4e14		       48		      .byte.b	72	;G
    875  4e15		       00		      .byte.b	0	;B
    876  4e16		       25		      .byte.b	37	;R (69)
    877  4e17		       25		      .byte.b	37	;G
    878  4e18		       88		      .byte.b	136	;B
    879  4e19		       ff		      .byte.b	255	;R (68)
    880  4e1a		       00		      .byte.b	0	;G
    881  4e1b		       00		      .byte.b	0	;B
    882  4e1c		       ff		      .byte.b	255	;R (67)
    883  4e1d		       04		      .byte.b	4	;G
    884  4e1e		       00		      .byte.b	0	;B
    885  4e1f		       ef		      .byte.b	239	;R (66)
    886  4e20		       40		      .byte.b	64	;G
    887  4e21		       10		      .byte.b	16	;B
    888  4e22		       ff		      .byte.b	255	;R (65)
    889  4e23		       00		      .byte.b	0	;G
    890  4e24		       00		      .byte.b	0	;B
    891  4e25		       ff		      .byte.b	255	;R (64)
    892  4e26		       02		      .byte.b	2	;G
    893  4e27		       00		      .byte.b	0	;B
    894  4e28		       ff		      .byte.b	255	;R (63)
    895  4e29		       20		      .byte.b	32	;G
    896  4e2a		       00		      .byte.b	0	;B
    897  4e2b		       ff		      .byte.b	255	;R (62)
    898  4e2c		       a5		      .byte.b	165	;G
    899  4e2d		       00		      .byte.b	0	;B
    900  4e2e		       ff		      .byte.b	255	;R (61)
    901  4e2f		       09		      .byte.b	9	;G
    902  4e30		       00		      .byte.b	0	;B
    903  4e31		       ff		      .byte.b	255	;R (60)
    904  4e32		       00		      .byte.b	0	;G
    905  4e33		       00		      .byte.b	0	;B
    906  4e34		       7f		      .byte.b	127	;R (59)
    907  4e35		       42		      .byte.b	66	;G
    908  4e36		       80		      .byte.b	128	;B
    909  4e37		       ff		      .byte.b	255	;R (58)
    910  4e38		       88		      .byte.b	136	;G
    911  4e39		       00		      .byte.b	0	;B
    912  4e3a		       ff		      .byte.b	255	;R (57)
    913  4e3b		       40		      .byte.b	64	;G
    914  4e3c		       00		      .byte.b	0	;B
    915  4e3d		       ff		      .byte.b	255	;R (56)
    916  4e3e		       09		      .byte.b	9	;G
    917  4e3f		       00		      .byte.b	0	;B
    918  4e40		       7f		      .byte.b	127	;R (55)
    919  4e41		       01		      .byte.b	1	;G
    920  4e42		       80		      .byte.b	128	;B
    921  4e43		       ff		      .byte.b	255	;R (54)
    922  4e44		       91		      .byte.b	145	;G
    923  4e45		       00		      .byte.b	0	;B
    924  4e46		       fe		      .byte.b	254	;R (53)
    925  4e47		       81		      .byte.b	129	;G
    926  4e48		       00		      .byte.b	0	;B
    927  4e49		       fe		      .byte.b	254	;R (52)
    928  4e4a		       20		      .byte.b	32	;G
    929  4e4b		       00		      .byte.b	0	;B
    930  4e4c		       ff		      .byte.b	255	;R (51)
    931  4e4d		       03		      .byte.b	3	;G
    932  4e4e		       00		      .byte.b	0	;B
    933  4e4f		       ff		      .byte.b	255	;R (50)
    934  4e50		       83		      .byte.b	131	;G
    935  4e51		       00		      .byte.b	0	;B
    936  4e52		       fe		      .byte.b	254	;R (49)
    937  4e53		       90		      .byte.b	144	;G
    938  4e54		       00		      .byte.b	0	;B
    939  4e55		       fe		      .byte.b	254	;R (48)
    940  4e56		       83		      .byte.b	131	;G
    941  4e57		       00		      .byte.b	0	;B
    942  4e58		       7e		      .byte.b	126	;R (47)
    943  4e59		       12		      .byte.b	18	;G
    944  4e5a		       80		      .byte.b	128	;B
    945  4e5b		       fc		      .byte.b	252	;R (46)
    946  4e5c		       00		      .byte.b	0	;G
    947  4e5d		       00		      .byte.b	0	;B
    948  4e5e		       fe		      .byte.b	254	;R (45)
    949  4e5f		       07		      .byte.b	7	;G
    950  4e60		       00		      .byte.b	0	;B
    951  4e61		       ef		      .byte.b	239	;R (44)
    952  4e62		       03		      .byte.b	3	;G
    953  4e63		       10		      .byte.b	16	;B
    954  4e64		       ff		      .byte.b	255	;R (43)
    955  4e65		       40		      .byte.b	64	;G
    956  4e66		       00		      .byte.b	0	;B
    957  4e67		       ff		      .byte.b	255	;R (42)
    958  4e68		       01		      .byte.b	1	;G
    959  4e69		       00		      .byte.b	0	;B
    960  4e6a		       ff		      .byte.b	255	;R (41)
    961  4e6b		       01		      .byte.b	1	;G
    962  4e6c		       00		      .byte.b	0	;B
    963  4e6d		       bf		      .byte.b	191	;R (40)
    964  4e6e		       01		      .byte.b	1	;G
    965  4e6f		       40		      .byte.b	64	;B
    966  4e70		       f7		      .byte.b	247	;R (39)
    967  4e71		       80		      .byte.b	128	;G
    968  4e72		       08		      .byte.b	8	;B
    969  4e73		       ff		      .byte.b	255	;R (38)
    970  4e74		       40		      .byte.b	64	;G
    971  4e75		       00		      .byte.b	0	;B
    972  4e76		       ff		      .byte.b	255	;R (37)
    973  4e77		       00		      .byte.b	0	;G
    974  4e78		       00		      .byte.b	0	;B
    975  4e79		       ff		      .byte.b	255	;R (36)
    976  4e7a		       40		      .byte.b	64	;G
    977  4e7b		       00		      .byte.b	0	;B
    978  4e7c		       ff		      .byte.b	255	;R (35)
    979  4e7d		       a1		      .byte.b	161	;G
    980  4e7e		       00		      .byte.b	0	;B
    981  4e7f		       7f		      .byte.b	127	;R (34)
    982  4e80		       05		      .byte.b	5	;G
    983  4e81		       80		      .byte.b	128	;B
    984  4e82		       ff		      .byte.b	255	;R (33)
    985  4e83		       21		      .byte.b	33	;G
    986  4e84		       00		      .byte.b	0	;B
    987  4e85		       bf		      .byte.b	191	;R (32)
    988  4e86		       40		      .byte.b	64	;G
    989  4e87		       40		      .byte.b	64	;B
    990  4e88		       ff		      .byte.b	255	;R (31)
    991  4e89		       61		      .byte.b	97	;G
    992  4e8a		       00		      .byte.b	0	;B
    993  4e8b		       7f		      .byte.b	127	;R (30)
    994  4e8c		       81		      .byte.b	129	;G
    995  4e8d		       80		      .byte.b	128	;B
    996  4e8e		       f7		      .byte.b	247	;R (29)
    997  4e8f		       60		      .byte.b	96	;G
    998  4e90		       08		      .byte.b	8	;B
    999  4e91		       ff		      .byte.b	255	;R (28)
   1000  4e92		       81		      .byte.b	129	;G
   1001  4e93		       00		      .byte.b	0	;B
   1002  4e94		       ef		      .byte.b	239	;R (27)
   1003  4e95		       40		      .byte.b	64	;G
   1004  4e96		       10		      .byte.b	16	;B
   1005  4e97		       ff		      .byte.b	255	;R (26)
   1006  4e98		       60		      .byte.b	96	;G
   1007  4e99		       00		      .byte.b	0	;B
   1008  4e9a		       ff		      .byte.b	255	;R (25)
   1009  4e9b		       18		      .byte.b	24	;G
   1010  4e9c		       00		      .byte.b	0	;B
   1011  4e9d		       ff		      .byte.b	255	;R (24)
   1012  4e9e		       20		      .byte.b	32	;G
   1013  4e9f		       00		      .byte.b	0	;B
   1014  4ea0		       ff		      .byte.b	255	;R (23)
   1015  4ea1		       8a		      .byte.b	138	;G
   1016  4ea2		       00		      .byte.b	0	;B
   1017  4ea3		       f7		      .byte.b	247	;R (22)
   1018  4ea4		       10		      .byte.b	16	;G
   1019  4ea5		       08		      .byte.b	8	;B
   1020  4ea6		       ff		      .byte.b	255	;R (21)
   1021  4ea7		       04		      .byte.b	4	;G
   1022  4ea8		       00		      .byte.b	0	;B
   1023  4ea9		       df		      .byte.b	223	;R (20)
   1024  4eaa		       10		      .byte.b	16	;G
   1025  4eab		       20		      .byte.b	32	;B
   1026  4eac		       ff		      .byte.b	255	;R (19)
   1027  4ead		       90		      .byte.b	144	;G
   1028  4eae		       00		      .byte.b	0	;B
   1029  4eaf		       ff		      .byte.b	255	;R (18)
   1030  4eb0		       12		      .byte.b	18	;G
   1031  4eb1		       00		      .byte.b	0	;B
   1032  4eb2		       ff		      .byte.b	255	;R (17)
   1033  4eb3		       00		      .byte.b	0	;G
   1034  4eb4		       00		      .byte.b	0	;B
   1035  4eb5		       ff		      .byte.b	255	;R (16)
   1036  4eb6		       45		      .byte.b	69	;G
   1037  4eb7		       00		      .byte.b	0	;B
   1038  4eb8		       ff		      .byte.b	255	;R (15)
   1039  4eb9		       10		      .byte.b	16	;G
   1040  4eba		       00		      .byte.b	0	;B
   1041  4ebb		       ff		      .byte.b	255	;R (14)
   1042  4ebc		       23		      .byte.b	35	;G
   1043  4ebd		       00		      .byte.b	0	;B
   1044  4ebe		       fc		      .byte.b	252	;R (13)
   1045  4ebf		       12		      .byte.b	18	;G
   1046  4ec0		       00		      .byte.b	0	;B
   1047  4ec1		       fc		      .byte.b	252	;R (12)
   1048  4ec2		       20		      .byte.b	32	;G
   1049  4ec3		       00		      .byte.b	0	;B
   1050  4ec4		       fe		      .byte.b	254	;R (11)
   1051  4ec5		       46		      .byte.b	70	;G
   1052  4ec6		       00		      .byte.b	0	;B
   1053  4ec7		       f8		      .byte.b	248	;R (10)
   1054  4ec8		       48		      .byte.b	72	;G
   1055  4ec9		       00		      .byte.b	0	;B
   1056  4eca		       f0		      .byte.b	240	;R (9)
   1057  4ecb		       04		      .byte.b	4	;G
   1058  4ecc		       00		      .byte.b	0	;B
   1059  4ecd		       e0		      .byte.b	224	;R (8)
   1060  4ece		       20		      .byte.b	32	;G
   1061  4ecf		       00		      .byte.b	0	;B
   1062  4ed0		       e0		      .byte.b	224	;R (7)
   1063  4ed1		       29		      .byte.b	41	;G
   1064  4ed2		       00		      .byte.b	0	;B
   1065  4ed3		       e0		      .byte.b	224	;R (6)
   1066  4ed4		       20		      .byte.b	32	;G
   1067  4ed5		       00		      .byte.b	0	;B
   1068  4ed6		       e0		      .byte.b	224	;R (5)
   1069  4ed7		       84		      .byte.b	132	;G
   1070  4ed8		       00		      .byte.b	0	;B
   1071  4ed9		       60		      .byte.b	96	;R (4)
   1072  4eda		       40		      .byte.b	64	;G
   1073  4edb		       00		      .byte.b	0	;B
   1074  4edc		       00		      .byte.b	0	;R (3)
   1075  4edd		       88		      .byte.b	136	;G
   1076  4ede		       00		      .byte.b	0	;B
   1077  4edf		       00		      .byte.b	0	;R (2)
   1078  4ee0		       11		      .byte.b	17	;G
   1079  4ee1		       00		      .byte.b	0	;B
   1080  4ee2		       24		      .byte.b	36	;R (1)
   1081  4ee3		       24		      .byte.b	36	;G
   1082  4ee4		       00		      .byte.b	0	;B
   1083  4ee5		       00		      .byte.b	0	;R (0)
   1084  4ee6		       00		      .byte.b	0	;G
   1085  4ee7		       00		      .byte.b	0	;B
   1086  4ee8				   COL_5
   1087  4ee8		       02		      .byte.b	2	;R (71)
   1088  4ee9		       12		      .byte.b	18	;G
   1089  4eea		       00		      .byte.b	0	;B
   1090  4eeb		       00		      .byte.b	0	;R (70)
   1091  4eec		       00		      .byte.b	0	;G
   1092  4eed		       00		      .byte.b	0	;B
   1093  4eee		       00		      .byte.b	0	;R (69)
   1094  4eef		       02		      .byte.b	2	;G
   1095  4ef0		       00		      .byte.b	0	;B
   1096  4ef1		       03		      .byte.b	3	;R (68)
   1097  4ef2		       12		      .byte.b	18	;G
   1098  4ef3		       00		      .byte.b	0	;B
   1099  4ef4		       0b		      .byte.b	11	;R (67)
   1100  4ef5		       09		      .byte.b	9	;G
   1101  4ef6		       00		      .byte.b	0	;B
   1102  4ef7		       07		      .byte.b	7	;R (66)
   1103  4ef8		       05		      .byte.b	5	;G
   1104  4ef9		       00		      .byte.b	0	;B
   1105  4efa		       03		      .byte.b	3	;R (65)
   1106  4efb		       06		      .byte.b	6	;G
   1107  4efc		       00		      .byte.b	0	;B
   1108  4efd		       01		      .byte.b	1	;R (64)
   1109  4efe		       20		      .byte.b	32	;G
   1110  4eff		       00		      .byte.b	0	;B
   1111  4f00		       03		      .byte.b	3	;R (63)
   1112  4f01		       03		      .byte.b	3	;G
   1113  4f02		       00		      .byte.b	0	;B
   1114  4f03		       03		      .byte.b	3	;R (62)
   1115  4f04		       0a		      .byte.b	10	;G
   1116  4f05		       00		      .byte.b	0	;B
   1117  4f06		       03		      .byte.b	3	;R (61)
   1118  4f07		       02		      .byte.b	2	;G
   1119  4f08		       00		      .byte.b	0	;B
   1120  4f09		       03		      .byte.b	3	;R (60)
   1121  4f0a		       00		      .byte.b	0	;G
   1122  4f0b		       00		      .byte.b	0	;B
   1123  4f0c		       03		      .byte.b	3	;R (59)
   1124  4f0d		       0a		      .byte.b	10	;G
   1125  4f0e		       00		      .byte.b	0	;B
   1126  4f0f		       03		      .byte.b	3	;R (58)
   1127  4f10		       02		      .byte.b	2	;G
   1128  4f11		       00		      .byte.b	0	;B
   1129  4f12		       01		      .byte.b	1	;R (57)
   1130  4f13		       03		      .byte.b	3	;G
   1131  4f14		       00		      .byte.b	0	;B
   1132  4f15		       01		      .byte.b	1	;R (56)
   1133  4f16		       01		      .byte.b	1	;G
   1134  4f17		       00		      .byte.b	0	;B
   1135  4f18		       00		      .byte.b	0	;R (55)
   1136  4f19		       25		      .byte.b	37	;G
   1137  4f1a		       00		      .byte.b	0	;B
   1138  4f1b		       00		      .byte.b	0	;R (54)
   1139  4f1c		       00		      .byte.b	0	;G
   1140  4f1d		       00		      .byte.b	0	;B
   1141  4f1e		       00		      .byte.b	0	;R (53)
   1142  4f1f		       20		      .byte.b	32	;G
   1143  4f20		       00		      .byte.b	0	;B
   1144  4f21		       00		      .byte.b	0	;R (52)
   1145  4f22		       08		      .byte.b	8	;G
   1146  4f23		       00		      .byte.b	0	;B
   1147  4f24		       00		      .byte.b	0	;R (51)
   1148  4f25		       02		      .byte.b	2	;G
   1149  4f26		       00		      .byte.b	0	;B
   1150  4f27		       00		      .byte.b	0	;R (50)
   1151  4f28		       40		      .byte.b	64	;G
   1152  4f29		       00		      .byte.b	0	;B
   1153  4f2a		       00		      .byte.b	0	;R (49)
   1154  4f2b		       11		      .byte.b	17	;G
   1155  4f2c		       00		      .byte.b	0	;B
   1156  4f2d		       00		      .byte.b	0	;R (48)
   1157  4f2e		       00		      .byte.b	0	;G
   1158  4f2f		       00		      .byte.b	0	;B
   1159  4f30		       00		      .byte.b	0	;R (47)
   1160  4f31		       20		      .byte.b	32	;G
   1161  4f32		       00		      .byte.b	0	;B
   1162  4f33		       00		      .byte.b	0	;R (46)
   1163  4f34		       08		      .byte.b	8	;G
   1164  4f35		       00		      .byte.b	0	;B
   1165  4f36		       00		      .byte.b	0	;R (45)
   1166  4f37		       00		      .byte.b	0	;G
   1167  4f38		       00		      .byte.b	0	;B
   1168  4f39		       00		      .byte.b	0	;R (44)
   1169  4f3a		       24		      .byte.b	36	;G
   1170  4f3b		       00		      .byte.b	0	;B
   1171  4f3c		       00		      .byte.b	0	;R (43)
   1172  4f3d		       00		      .byte.b	0	;G
   1173  4f3e		       00		      .byte.b	0	;B
   1174  4f3f		       00		      .byte.b	0	;R (42)
   1175  4f40		       04		      .byte.b	4	;G
   1176  4f41		       00		      .byte.b	0	;B
   1177  4f42		       00		      .byte.b	0	;R (41)
   1178  4f43		       21		      .byte.b	33	;G
   1179  4f44		       00		      .byte.b	0	;B
   1180  4f45		       01		      .byte.b	1	;R (40)
   1181  4f46		       01		      .byte.b	1	;G
   1182  4f47		       00		      .byte.b	0	;B
   1183  4f48		       01		      .byte.b	1	;R (39)
   1184  4f49		       25		      .byte.b	37	;G
   1185  4f4a		       00		      .byte.b	0	;B
   1186  4f4b		       01		      .byte.b	1	;R (38)
   1187  4f4c		       01		      .byte.b	1	;G
   1188  4f4d		       00		      .byte.b	0	;B
   1189  4f4e		       03		      .byte.b	3	;R (37)
   1190  4f4f		       23		      .byte.b	35	;G
   1191  4f50		       00		      .byte.b	0	;B
   1192  4f51		       03		      .byte.b	3	;R (36)
   1193  4f52		       13		      .byte.b	19	;G
   1194  4f53		       00		      .byte.b	0	;B
   1195  4f54		       01		      .byte.b	1	;R (35)
   1196  4f55		       02		      .byte.b	2	;G
   1197  4f56		       00		      .byte.b	0	;B
   1198  4f57		       01		      .byte.b	1	;R (34)
   1199  4f58		       10		      .byte.b	16	;G
   1200  4f59		       00		      .byte.b	0	;B
   1201  4f5a		       03		      .byte.b	3	;R (33)
   1202  4f5b		       02		      .byte.b	2	;G
   1203  4f5c		       00		      .byte.b	0	;B
   1204  4f5d		       01		      .byte.b	1	;R (32)
   1205  4f5e		       08		      .byte.b	8	;G
   1206  4f5f		       00		      .byte.b	0	;B
   1207  4f60		       03		      .byte.b	3	;R (31)
   1208  4f61		       20		      .byte.b	32	;G
   1209  4f62		       00		      .byte.b	0	;B
   1210  4f63		       03		      .byte.b	3	;R (30)
   1211  4f64		       00		      .byte.b	0	;G
   1212  4f65		       00		      .byte.b	0	;B
   1213  4f66		       03		      .byte.b	3	;R (29)
   1214  4f67		       10		      .byte.b	16	;G
   1215  4f68		       00		      .byte.b	0	;B
   1216  4f69		       03		      .byte.b	3	;R (28)
   1217  4f6a		       00		      .byte.b	0	;G
   1218  4f6b		       00		      .byte.b	0	;B
   1219  4f6c		       07		      .byte.b	7	;R (27)
   1220  4f6d		       0e		      .byte.b	14	;G
   1221  4f6e		       00		      .byte.b	0	;B
   1222  4f6f		       03		      .byte.b	3	;R (26)
   1223  4f70		       41		      .byte.b	65	;G
   1224  4f71		       00		      .byte.b	0	;B
   1225  4f72		       07		      .byte.b	7	;R (25)
   1226  4f73		       04		      .byte.b	4	;G
   1227  4f74		       00		      .byte.b	0	;B
   1228  4f75		       03		      .byte.b	3	;R (24)
   1229  4f76		       21		      .byte.b	33	;G
   1230  4f77		       00		      .byte.b	0	;B
   1231  4f78		       03		      .byte.b	3	;R (23)
   1232  4f79		       04		      .byte.b	4	;G
   1233  4f7a		       00		      .byte.b	0	;B
   1234  4f7b		       03		      .byte.b	3	;R (22)
   1235  4f7c		       02		      .byte.b	2	;G
   1236  4f7d		       00		      .byte.b	0	;B
   1237  4f7e		       03		      .byte.b	3	;R (21)
   1238  4f7f		       26		      .byte.b	38	;G
   1239  4f80		       00		      .byte.b	0	;B
   1240  4f81		       01		      .byte.b	1	;R (20)
   1241  4f82		       01		      .byte.b	1	;G
   1242  4f83		       00		      .byte.b	0	;B
   1243  4f84		       00		      .byte.b	0	;R (19)
   1244  4f85		       21		      .byte.b	33	;G
   1245  4f86		       00		      .byte.b	0	;B
   1246  4f87		       01		      .byte.b	1	;R (18)
   1247  4f88		       09		      .byte.b	9	;G
   1248  4f89		       00		      .byte.b	0	;B
   1249  4f8a		       23		      .byte.b	35	;R (17)
   1250  4f8b		       22		      .byte.b	34	;G
   1251  4f8c		       00		      .byte.b	0	;B
   1252  4f8d		       01		      .byte.b	1	;R (16)
   1253  4f8e		       01		      .byte.b	1	;G
   1254  4f8f		       00		      .byte.b	0	;B
   1255  4f90		       00		      .byte.b	0	;R (15)
   1256  4f91		       29		      .byte.b	41	;G
   1257  4f92		       00		      .byte.b	0	;B
   1258  4f93		       00		      .byte.b	0	;R (14)
   1259  4f94		       00		      .byte.b	0	;G
   1260  4f95		       00		      .byte.b	0	;B
   1261  4f96		       00		      .byte.b	0	;R (13)
   1262  4f97		       04		      .byte.b	4	;G
   1263  4f98		       00		      .byte.b	0	;B
   1264  4f99		       00		      .byte.b	0	;R (12)
   1265  4f9a		       20		      .byte.b	32	;G
   1266  4f9b		       00		      .byte.b	0	;B
   1267  4f9c		       10		      .byte.b	16	;R (11)
   1268  4f9d		       12		      .byte.b	18	;G
   1269  4f9e		       00		      .byte.b	0	;B
   1270  4f9f		       00		      .byte.b	0	;R (10)
   1271  4fa0		       00		      .byte.b	0	;G
   1272  4fa1		       00		      .byte.b	0	;B
   1273  4fa2		       00		      .byte.b	0	;R (9)
   1274  4fa3		       21		      .byte.b	33	;G
   1275  4fa4		       00		      .byte.b	0	;B
   1276  4fa5		       00		      .byte.b	0	;R (8)
   1277  4fa6		       08		      .byte.b	8	;G
   1278  4fa7		       00		      .byte.b	0	;B
   1279  4fa8		       00		      .byte.b	0	;R (7)
   1280  4fa9		       20		      .byte.b	32	;G
   1281  4faa		       00		      .byte.b	0	;B
   1282  4fab		       00		      .byte.b	0	;R (6)
   1283  4fac		       04		      .byte.b	4	;G
   1284  4fad		       00		      .byte.b	0	;B
   1285  4fae		       20		      .byte.b	32	;R (5)
   1286  4faf		       20		      .byte.b	32	;G
   1287  4fb0		       00		      .byte.b	0	;B
   1288  4fb1		       00		      .byte.b	0	;R (4)
   1289  4fb2		       09		      .byte.b	9	;G
   1290  4fb3		       00		      .byte.b	0	;B
   1291  4fb4		       00		      .byte.b	0	;R (3)
   1292  4fb5		       00		      .byte.b	0	;G
   1293  4fb6		       00		      .byte.b	0	;B
   1294  4fb7		       00		      .byte.b	0	;R (2)
   1295  4fb8		       48		      .byte.b	72	;G
   1296  4fb9		       00		      .byte.b	0	;B
   1297  4fba		       02		      .byte.b	2	;R (1)
   1298  4fbb		       02		      .byte.b	2	;G
   1299  4fbc		       00		      .byte.b	0	;B
   1300  4fbd		       00		      .byte.b	0	;R (0)
   1301  4fbe		       00		      .byte.b	0	;G
   1302  4fbf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  4fc0							;    include "pizza.asm"
    263  4fc0
      0  4fc0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  4fc0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  4fc0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4fc0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4fc0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4fc0				  -	      ERR
      6  4fc0					      endif
------- FILE ./chess.asm
    376  4fc0
    377  4fc0							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  4fc0					      include	"Handler_BANK1.asm"
      1  4fc0							; Copyright (C)2020 Andrew Davie
      2  4fc0							; andrew@taswegian.com
      3  4fc0
      4  4fc0							;---------------------------------------------------------------------------------------------------
      5  4fc0
      0  4fc0					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  4fc0
      2  4fc0
      3  4fc0
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  53d6 ????				      SEG	MOVES
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   MOVES      SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	MOVES
      8  5000
      9  5000
     10  5000							; Board is a 12 x 10 object which simplifies the generation of moves
     11  5000							; The squares marked '░░░' are illegal. The index of each square is the left
     12  5000							; number + the bottom number. Screen is flipped vertically compared to memory layout.
     13  5000							; So, bottom left legal square (AS VISIBLE ON SCREEN) is #22
     14  5000
     15  5000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     16  5000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	   BASE64 numbering
     17  5000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	  ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     18  5000							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃ <-- W   ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     19  5000							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃ <-- W   ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     20  5000							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	  ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     21  5000							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	  ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     22  5000							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	  ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     23  5000							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	  ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     24  5000							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃ <-- B   ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     25  5000							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃ <-- B   ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     26  5000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	  ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     27  5000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     28  5000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     29  5000							;	0   1	2   3	4   5	6   7	8   9
     30  5000
     31  5000
     32  5000		       00 28	   WHITE_PAWN_HOME_ROW =	40	; < this, on home row
     33  5000		       00 52	   BLACK_PAWN_HOME_ROW =	82	; >= this, on home row
     34  5000
     35  5000
      0  5000					      OPTIONAL_PAGEBREAK	"ValidSquare", 120 + 80
     10  5000					      LIST	ON
      0  5000					      DEFINE_SUBROUTINE	ValidSquare
      1  5000				   BANK_ValidSquare SET	_CURRENT_BANK
      2  5000					      SUBROUTINE
      3  5000				   ValidSquare
     38  5000
     39  5000							; Use this table to
     40  5000							;   a) Determine if a square is valid (-1 = NO)
     41  5000							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     42  5000							;	if a white pawn on square "x" can move "up" the board.
     43  5000
     44  5000		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     45  500a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     46  5014		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     47  501e		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     48  5028		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     49  5032		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     50  503c		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     51  5046		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     52  5050		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     53  505a		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     54  5064
      0  5064					      DEFINE_SUBROUTINE	Board
      1  5064				   BANK_Board SET	_CURRENT_BANK
      2  5064					      SUBROUTINE
      3  5064				   Board
      0  5064					      DEFINE_SUBROUTINE	Chessboard
      1  5064				   BANK_Chessboard SET	_CURRENT_BANK
      2  5064					      SUBROUTINE
      3  5064				   Chessboard
     57  5064
     58  5064							; A 10X10...
     59  5064							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     60  5064							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     61  5064
     62  5064		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     63  506e		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     64  5078
     65  5078		       ff ff 05 03*	      .byte.b	-1, -1, WHITE|R, WHITE|N, WHITE|B, WHITE|Q, WHITE|K, WHITE|B, WHITE|N, WHITE|R
     66  5082		       ff ff 01 01*	      .byte.b	-1, -1, WHITE|WP, WHITE|WP, WHITE|WP, WHITE|WP, WHITE|WP, WHITE|WP, WHITE|WP, WHITE|WP
     67  508c		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     68  5096		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     69  50a0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     70  50aa		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     71  50b4		       ff ff 82 82*	      .byte.b	-1, -1, BLACK|BP, BLACK|BP, BLACK|BP, BLACK|BP, BLACK|BP, BLACK|BP, BLACK|BP, BLACK|BP
     72  50be		       ff ff 85 83*	      .byte.b	-1, -1, BLACK|R, BLACK|N, BLACK|B, BLACK|Q, BLACK|K, BLACK|B, BLACK|N, BLACK|R
     73  50c8
     74  50c8							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 103
     75  50c8
     76  50c8							;---------------------------------------------------------------------------------------------------
     77  50c8
     78  50c8				   HandlerVectorLO
     79  50c8
     80  50c8		       00		      .byte.b	0	; blank
     81  50c9		       96		      .byte.b	<Handle_WHITE_PAWN
     82  50ca		       2c		      .byte.b	<Handle_BLACK_PAWN
     83  50cb		       ea		      .byte.b	<Handle_KNIGHT
     84  50cc		       d2		      .byte.b	<Handle_BISHOP
     85  50cd		       47		      .byte.b	<Handle_ROOK
     86  50ce		       e9		      .byte.b	<Handle_QUEEN
     87  50cf		       bc		      .byte.b	<Handle_KING
     88  50d0
     89  50d0				   HandlerVectorHI
     90  50d0
     91  50d0		       00		      .byte.b	0	; blank
     92  50d1		       fb		      .byte.b	>Handle_WHITE_PAWN
     93  50d2		       fc		      .byte.b	>Handle_BLACK_PAWN
     94  50d3		       fa		      .byte.b	>Handle_KNIGHT
     95  50d4		       f1		      .byte.b	>Handle_BISHOP
     96  50d5		       f2		      .byte.b	>Handle_ROOK
     97  50d6		       f0		      .byte.b	>Handle_QUEEN
     98  50d7		       f2		      .byte.b	>Handle_KING
     99  50d8
    100  50d8							;---------------------------------------------------------------------------------------------------
    101  50d8
    102  50d8				   Piece
    103  50d8
    104  50d8							; 16 bytes defining square on which a piece is
    105  50d8
    106  50d8		       1a 1b 1c 1d*	      .byte.b	26,27,28,29,30,31,32,33
    107  50e0		       26 27 28 29*	      .byte.b	38,39,40,41,42,43,44,45
    108  50e8
    109  50e8							;---------------------------------------------------------------------------------------------------
    110  50e8
    111  50e8							; a piecelist - 16 entries/side
    112  50e8							; contains piece type, and piece square
    113  50e8							; referencing 10x12 grid
    114  50e8							; the BOARD is an 8x8 square in zp
    115  50e8
      0  50e8					      DEFINE_SUBROUTINE	AddMove
      1  50e8				   BANK_AddMove SET	_CURRENT_BANK
      2  50e8					      SUBROUTINE
      3  50e8				   AddMove
    117  50e8
    118  50e8							; add square in y register to movelist as destination (0-63)
    119  50e8							; currentPiexe = piece moving
    120  50e8							; currentSquare = start square (0-63)
    121  50e8
    122  50e8							; To call (and this function MUST be at the start of every RAM bank)...
    123  50e8							;	 ldy #BANK_OF_CALLER
    124  50e8							;	 lda ply
    125  50e8							;	 sta SET_BANK_RAM
    126  50e8							; and fall through ...
    127  50e8
      0  50e8					      DEFINE_SUBROUTINE	InsertMove
      1  50e8				   BANK_InsertMove SET	_CURRENT_BANK
      2  50e8					      SUBROUTINE
      3  50e8				   InsertMove
    129  50e8							; TODO - add move to movelist
    130  50e8
    131  50e8		       60		      rts		; switch back to call bank and return
    132  50e9
    133  50e9
    134  50e9
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  50e9					      include	"Handler_QUEEN.asm"
      1  50e9							; Copyright (C)2020 Andrew Davie
      2  50e9
      3  50e9							;---------------------------------------------------------------------------------------------------
      4  50e9							; QUEEN
      5  50e9							;---------------------------------------------------------------------------------------------------
      6  50e9
      0  50e9					      DEFINE_SUBROUTINE	Handle_QUEEN
      1  50e9				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  50e9					      SUBROUTINE
      3  50e9				   Handle_QUEEN
      8  50e9
      9  50e9							; Pass...
     10  50e9							; x = currentSquare (square the piece is on)
     11  50e9							; currentPiece (with flags/colour attached)
     12  50e9
      0  50e9					      MOVE_TOWARDS	_DOWN+_LEFT
      1  50e9					      SUBROUTINE
      2  50e9
      3  50e9		       a6 8b		      ldx	currentSquare
      4  50eb		       bc f5 ef    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      5  50ee		       30 16		      bmi	.invalid
      6  50f0		       b9 64 f0 	      lda	Board,y
      7  50f3		       f0 04		      beq	.empty
      8  50f5
      9  50f5		       45 8a		      eor	currentPiece
     10  50f7		       10 0d		      bpl	.invalid
     11  50f9
     12  50f9		       20 e8 f0    .empty     jsr	AddMove
     13  50fc
     14  50fc		       b9 64 f0 	      lda	Board,y
     15  50ff		       d0 05		      bne	.invalid
     16  5101
     17  5101		       98		      tya
     18  5102		       aa		      tax
     19  5103		       4c eb f0 	      jmp	.project
     20  5106
     21  5106				   .invalid
      0  5106					      MOVE_TOWARDS	_DOWN
      1  5106					      SUBROUTINE
      2  5106
      3  5106		       a6 8b		      ldx	currentSquare
      4  5108		       bc f6 ef    .project   ldy	ValidSquare+_DOWN,x
      5  510b		       30 16		      bmi	.invalid
      6  510d		       b9 64 f0 	      lda	Board,y
      7  5110		       f0 04		      beq	.empty
      8  5112
      9  5112		       45 8a		      eor	currentPiece
     10  5114		       10 0d		      bpl	.invalid
     11  5116
     12  5116		       20 e8 f0    .empty     jsr	AddMove
     13  5119
     14  5119		       b9 64 f0 	      lda	Board,y
     15  511c		       d0 05		      bne	.invalid
     16  511e
     17  511e		       98		      tya
     18  511f		       aa		      tax
     19  5120		       4c 08 f1 	      jmp	.project
     20  5123
     21  5123				   .invalid
      0  5123					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  5123					      SUBROUTINE
      2  5123
      3  5123		       a6 8b		      ldx	currentSquare
      4  5125		       bc f7 ef    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      5  5128		       30 16		      bmi	.invalid
      6  512a		       b9 64 f0 	      lda	Board,y
      7  512d		       f0 04		      beq	.empty
      8  512f
      9  512f		       45 8a		      eor	currentPiece
     10  5131		       10 0d		      bpl	.invalid
     11  5133
     12  5133		       20 e8 f0    .empty     jsr	AddMove
     13  5136
     14  5136		       b9 64 f0 	      lda	Board,y
     15  5139		       d0 05		      bne	.invalid
     16  513b
     17  513b		       98		      tya
     18  513c		       aa		      tax
     19  513d		       4c 25 f1 	      jmp	.project
     20  5140
     21  5140				   .invalid
      0  5140					      MOVE_TOWARDS	_RIGHT
      1  5140					      SUBROUTINE
      2  5140
      3  5140		       a6 8b		      ldx	currentSquare
      4  5142		       bc 01 f0    .project   ldy	ValidSquare+_RIGHT,x
      5  5145		       30 16		      bmi	.invalid
      6  5147		       b9 64 f0 	      lda	Board,y
      7  514a		       f0 04		      beq	.empty
      8  514c
      9  514c		       45 8a		      eor	currentPiece
     10  514e		       10 0d		      bpl	.invalid
     11  5150
     12  5150		       20 e8 f0    .empty     jsr	AddMove
     13  5153
     14  5153		       b9 64 f0 	      lda	Board,y
     15  5156		       d0 05		      bne	.invalid
     16  5158
     17  5158		       98		      tya
     18  5159		       aa		      tax
     19  515a		       4c 42 f1 	      jmp	.project
     20  515d
     21  515d				   .invalid
      0  515d					      MOVE_TOWARDS	_UP+_RIGHT
      1  515d					      SUBROUTINE
      2  515d
      3  515d		       a6 8b		      ldx	currentSquare
      4  515f		       bc 0b f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      5  5162		       30 16		      bmi	.invalid
      6  5164		       b9 64 f0 	      lda	Board,y
      7  5167		       f0 04		      beq	.empty
      8  5169
      9  5169		       45 8a		      eor	currentPiece
     10  516b		       10 0d		      bpl	.invalid
     11  516d
     12  516d		       20 e8 f0    .empty     jsr	AddMove
     13  5170
     14  5170		       b9 64 f0 	      lda	Board,y
     15  5173		       d0 05		      bne	.invalid
     16  5175
     17  5175		       98		      tya
     18  5176		       aa		      tax
     19  5177		       4c 5f f1 	      jmp	.project
     20  517a
     21  517a				   .invalid
      0  517a					      MOVE_TOWARDS	_UP
      1  517a					      SUBROUTINE
      2  517a
      3  517a		       a6 8b		      ldx	currentSquare
      4  517c		       bc 0a f0    .project   ldy	ValidSquare+_UP,x
      5  517f		       30 16		      bmi	.invalid
      6  5181		       b9 64 f0 	      lda	Board,y
      7  5184		       f0 04		      beq	.empty
      8  5186
      9  5186		       45 8a		      eor	currentPiece
     10  5188		       10 0d		      bpl	.invalid
     11  518a
     12  518a		       20 e8 f0    .empty     jsr	AddMove
     13  518d
     14  518d		       b9 64 f0 	      lda	Board,y
     15  5190		       d0 05		      bne	.invalid
     16  5192
     17  5192		       98		      tya
     18  5193		       aa		      tax
     19  5194		       4c 7c f1 	      jmp	.project
     20  5197
     21  5197				   .invalid
      0  5197					      MOVE_TOWARDS	_UP+_LEFT
      1  5197					      SUBROUTINE
      2  5197
      3  5197		       a6 8b		      ldx	currentSquare
      4  5199		       bc 09 f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      5  519c		       30 16		      bmi	.invalid
      6  519e		       b9 64 f0 	      lda	Board,y
      7  51a1		       f0 04		      beq	.empty
      8  51a3
      9  51a3		       45 8a		      eor	currentPiece
     10  51a5		       10 0d		      bpl	.invalid
     11  51a7
     12  51a7		       20 e8 f0    .empty     jsr	AddMove
     13  51aa
     14  51aa		       b9 64 f0 	      lda	Board,y
     15  51ad		       d0 05		      bne	.invalid
     16  51af
     17  51af		       98		      tya
     18  51b0		       aa		      tax
     19  51b1		       4c 99 f1 	      jmp	.project
     20  51b4
     21  51b4				   .invalid
      0  51b4					      MOVE_TOWARDS	_LEFT
      1  51b4					      SUBROUTINE
      2  51b4
      3  51b4		       a6 8b		      ldx	currentSquare
      4  51b6		       bc ff ef    .project   ldy	ValidSquare+_LEFT,x
      5  51b9		       30 16		      bmi	.invalid
      6  51bb		       b9 64 f0 	      lda	Board,y
      7  51be		       f0 04		      beq	.empty
      8  51c0
      9  51c0		       45 8a		      eor	currentPiece
     10  51c2		       10 0d		      bpl	.invalid
     11  51c4
     12  51c4		       20 e8 f0    .empty     jsr	AddMove
     13  51c7
     14  51c7		       b9 64 f0 	      lda	Board,y
     15  51ca		       d0 05		      bne	.invalid
     16  51cc
     17  51cc		       98		      tya
     18  51cd		       aa		      tax
     19  51ce		       4c b6 f1 	      jmp	.project
     20  51d1
     21  51d1				   .invalid
     21  51d1		       60		      rts
     22  51d2
     23  51d2							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  51d2					      include	"Handler_BISHOP.asm"
      1  51d2							; Copyright (C)2020 Andrew Davie
      2  51d2
      3  51d2							;---------------------------------------------------------------------------------------------------
      4  51d2							; BISHOP
      5  51d2							;---------------------------------------------------------------------------------------------------
      6  51d2
      0  51d2					      DEFINE_SUBROUTINE	Handle_BISHOP
      1  51d2				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  51d2					      SUBROUTINE
      3  51d2				   Handle_BISHOP
      8  51d2
      9  51d2							; Pass...
     10  51d2							; x = currentSquare (square the piece is on)
     11  51d2							; currentPiece (with flags/colour attached)
     12  51d2
      0  51d2					      MOVE_TOWARDS	_DOWN+_LEFT
      1  51d2					      SUBROUTINE
      2  51d2
      3  51d2		       a6 8b		      ldx	currentSquare
      4  51d4		       bc f5 ef    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      5  51d7		       30 16		      bmi	.invalid
      6  51d9		       b9 64 f0 	      lda	Board,y
      7  51dc		       f0 04		      beq	.empty
      8  51de
      9  51de		       45 8a		      eor	currentPiece
     10  51e0		       10 0d		      bpl	.invalid
     11  51e2
     12  51e2		       20 e8 f0    .empty     jsr	AddMove
     13  51e5
     14  51e5		       b9 64 f0 	      lda	Board,y
     15  51e8		       d0 05		      bne	.invalid
     16  51ea
     17  51ea		       98		      tya
     18  51eb		       aa		      tax
     19  51ec		       4c d4 f1 	      jmp	.project
     20  51ef
     21  51ef				   .invalid
      0  51ef					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  51ef					      SUBROUTINE
      2  51ef
      3  51ef		       a6 8b		      ldx	currentSquare
      4  51f1		       bc f7 ef    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      5  51f4		       30 16		      bmi	.invalid
      6  51f6		       b9 64 f0 	      lda	Board,y
      7  51f9		       f0 04		      beq	.empty
      8  51fb
      9  51fb		       45 8a		      eor	currentPiece
     10  51fd		       10 0d		      bpl	.invalid
     11  51ff
     12  51ff		       20 e8 f0    .empty     jsr	AddMove
     13  5202
     14  5202		       b9 64 f0 	      lda	Board,y
     15  5205		       d0 05		      bne	.invalid
     16  5207
     17  5207		       98		      tya
     18  5208		       aa		      tax
     19  5209		       4c f1 f1 	      jmp	.project
     20  520c
     21  520c				   .invalid
      0  520c					      MOVE_TOWARDS	_UP+_LEFT
      1  520c					      SUBROUTINE
      2  520c
      3  520c		       a6 8b		      ldx	currentSquare
      4  520e		       bc 09 f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      5  5211		       30 16		      bmi	.invalid
      6  5213		       b9 64 f0 	      lda	Board,y
      7  5216		       f0 04		      beq	.empty
      8  5218
      9  5218		       45 8a		      eor	currentPiece
     10  521a		       10 0d		      bpl	.invalid
     11  521c
     12  521c		       20 e8 f0    .empty     jsr	AddMove
     13  521f
     14  521f		       b9 64 f0 	      lda	Board,y
     15  5222		       d0 05		      bne	.invalid
     16  5224
     17  5224		       98		      tya
     18  5225		       aa		      tax
     19  5226		       4c 0e f2 	      jmp	.project
     20  5229
     21  5229				   .invalid
      0  5229					      MOVE_TOWARDS	_UP+_RIGHT
      1  5229					      SUBROUTINE
      2  5229
      3  5229		       a6 8b		      ldx	currentSquare
      4  522b		       bc 0b f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      5  522e		       30 16		      bmi	.invalid
      6  5230		       b9 64 f0 	      lda	Board,y
      7  5233		       f0 04		      beq	.empty
      8  5235
      9  5235		       45 8a		      eor	currentPiece
     10  5237		       10 0d		      bpl	.invalid
     11  5239
     12  5239		       20 e8 f0    .empty     jsr	AddMove
     13  523c
     14  523c		       b9 64 f0 	      lda	Board,y
     15  523f		       d0 05		      bne	.invalid
     16  5241
     17  5241		       98		      tya
     18  5242		       aa		      tax
     19  5243		       4c 2b f2 	      jmp	.project
     20  5246
     21  5246				   .invalid
     17  5246		       60		      rts
     18  5247
     19  5247
     20  5247							;CHECK_HALF_BANK_SIZE "HANDLER_MOVE -- 1K"
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  5247					      include	"Handler_ROOK.asm"
      1  5247							; Copyright (C)2020 Andrew Davie
      2  5247							; Rook move handler
      3  5247
      4  5247							;---------------------------------------------------------------------------------------------------
      5  5247							; ROOK
      6  5247							;---------------------------------------------------------------------------------------------------
      7  5247
      0  5247					      DEFINE_SUBROUTINE	Handle_ROOK
      1  5247				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  5247					      SUBROUTINE
      3  5247				   Handle_ROOK
      9  5247
     10  5247							; Pass...
     11  5247							; x = currentSquare (square the piece is on)
     12  5247							; currentPiece (with flags/colour attached)
     13  5247
      0  5247					      MOVE_TOWARDS	_DOWN
      1  5247					      SUBROUTINE
      2  5247
      3  5247		       a6 8b		      ldx	currentSquare
      4  5249		       bc f6 ef    .project   ldy	ValidSquare+_DOWN,x
      5  524c		       30 16		      bmi	.invalid
      6  524e		       b9 64 f0 	      lda	Board,y
      7  5251		       f0 04		      beq	.empty
      8  5253
      9  5253		       45 8a		      eor	currentPiece
     10  5255		       10 0d		      bpl	.invalid
     11  5257
     12  5257		       20 e8 f0    .empty     jsr	AddMove
     13  525a
     14  525a		       b9 64 f0 	      lda	Board,y
     15  525d		       d0 05		      bne	.invalid
     16  525f
     17  525f		       98		      tya
     18  5260		       aa		      tax
     19  5261		       4c 49 f2 	      jmp	.project
     20  5264
     21  5264				   .invalid
      0  5264					      MOVE_TOWARDS	_RIGHT
      1  5264					      SUBROUTINE
      2  5264
      3  5264		       a6 8b		      ldx	currentSquare
      4  5266		       bc 01 f0    .project   ldy	ValidSquare+_RIGHT,x
      5  5269		       30 16		      bmi	.invalid
      6  526b		       b9 64 f0 	      lda	Board,y
      7  526e		       f0 04		      beq	.empty
      8  5270
      9  5270		       45 8a		      eor	currentPiece
     10  5272		       10 0d		      bpl	.invalid
     11  5274
     12  5274		       20 e8 f0    .empty     jsr	AddMove
     13  5277
     14  5277		       b9 64 f0 	      lda	Board,y
     15  527a		       d0 05		      bne	.invalid
     16  527c
     17  527c		       98		      tya
     18  527d		       aa		      tax
     19  527e		       4c 66 f2 	      jmp	.project
     20  5281
     21  5281				   .invalid
      0  5281					      MOVE_TOWARDS	_UP
      1  5281					      SUBROUTINE
      2  5281
      3  5281		       a6 8b		      ldx	currentSquare
      4  5283		       bc 0a f0    .project   ldy	ValidSquare+_UP,x
      5  5286		       30 16		      bmi	.invalid
      6  5288		       b9 64 f0 	      lda	Board,y
      7  528b		       f0 04		      beq	.empty
      8  528d
      9  528d		       45 8a		      eor	currentPiece
     10  528f		       10 0d		      bpl	.invalid
     11  5291
     12  5291		       20 e8 f0    .empty     jsr	AddMove
     13  5294
     14  5294		       b9 64 f0 	      lda	Board,y
     15  5297		       d0 05		      bne	.invalid
     16  5299
     17  5299		       98		      tya
     18  529a		       aa		      tax
     19  529b		       4c 83 f2 	      jmp	.project
     20  529e
     21  529e				   .invalid
      0  529e					      MOVE_TOWARDS	_LEFT
      1  529e					      SUBROUTINE
      2  529e
      3  529e		       a6 8b		      ldx	currentSquare
      4  52a0		       bc ff ef    .project   ldy	ValidSquare+_LEFT,x
      5  52a3		       30 16		      bmi	.invalid
      6  52a5		       b9 64 f0 	      lda	Board,y
      7  52a8		       f0 04		      beq	.empty
      8  52aa
      9  52aa		       45 8a		      eor	currentPiece
     10  52ac		       10 0d		      bpl	.invalid
     11  52ae
     12  52ae		       20 e8 f0    .empty     jsr	AddMove
     13  52b1
     14  52b1		       b9 64 f0 	      lda	Board,y
     15  52b4		       d0 05		      bne	.invalid
     16  52b6
     17  52b6		       98		      tya
     18  52b7		       aa		      tax
     19  52b8		       4c a0 f2 	      jmp	.project
     20  52bb
     21  52bb				   .invalid
     18  52bb		       60		      rts
     19  52bc
     20  52bc							;---------------------------------------------------------------------------------------------------
     21  52bc							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  52bc					      include	"Handler_KING.asm"
      1  52bc							; Copyright (C)2020 Andrew Davie
      2  52bc							; Piece move handler for king
      3  52bc
      4  52bc
      5  52bc							; This is the move handler for a KING
      6  52bc							; "Check" is detected in the next ply of the search, so the move generation doesn't have to
      7  52bc							; be concerned about that. To assist with castling over squares in check (which is illegal)
      8  52bc							; the concept of a phantom king is introduced. Phantom kings are effectively blank squares
      9  52bc							; but need to be checked when moving opposite-colour pieces to a square. Messy.
     10  52bc
     11  52bc							;---------------------------------------------------------------------------------------------------
     12  52bc							; MACRO - Castling
     13  52bc
     14  52bc		       00 03	   KINGSIDE   =	3
     15  52bc		       ff ff ff fc QUEENSIDE  =	-4
     16  52bc
     17  52bc					      MAC	castle
     18  52bc							; {1} == KINGSIDE or QUEENSIDE
     19  52bc					      SUBROUTINE
     20  52bc
     21  52bc							; Most likely failure trigger is there are pieces in the way (N or B) (or Q)
     22  52bc							; Check these squares first as it's the cheapest "exit" from castle check
     23  52bc
     24  52bc							; Note: castling with squares that are "in check" is problematic
     25  52bc							; TODO: next ply have a "phantom" king on the positions king moves over...?
     26  52bc
     27  52bc							; todo: incomplete... x/y regs usage etc
     28  52bc
     29  52bc					      ldy	currentSquare
     30  52bc
     31  52bc					      IF	{1} = QUEENSIDE
     32  52bc					      lda	Board-3,y	; nothing in N pos
     33  52bc					      bne	.noCastle
     34  52bc					      lda	Board-2,y	; nothing in B pos
     35  52bc					      bne	.noCastle
     36  52bc					      lda	Board-1,y	; nothing in Q pos
     37  52bc					      bne	.noCastle
     38  52bc					      ENDIF
     39  52bc
     40  52bc					      IF	{1} = KINGSIDE
     41  52bc					      lda	Board+2,y	; check N pos
     42  52bc					      bne	.noCastle
     43  52bc					      lda	Board+1,y	; check B pos
     44  52bc					      bne	.noCastle
     45  52bc					      ENDIF
     46  52bc
     47  52bc							; appropriate N/B/(Q) squares are vacant so we proceed with more checks...
     48  52bc
     49  52bc					      lda	Board+{1},y	; we expect a R
     50  52bc					      sta	__piece
     51  52bc
     52  52bc					      and	#PIECE_MASK
     53  52bc					      cmp	#ROOK
     54  52bc					      bne	.noCastle	; not a R
     55  52bc
     56  52bc					      lda	__piece
     57  52bc					      eor	currentPiece
     58  52bc					      bmi	.noCastle	; not correct colour
     59  52bc
     60  52bc					      bit	__piece
     61  52bc					      bvs	.noCastle	; it's previously moved so we can't castle
     62  52bc
     63  52bc							; FINALLY -- king can castle
     64  52bc							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     65  52bc							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     66  52bc							; next move. Castling will be detected by K moving > 1 square.
     67  52bc
     68  52bc					      jsr	AddMove
     69  52bc				   .noCastle
     70  52bc					      ENDM
     71  52bc
     72  52bc
     73  52bc							;---------------------------------------------------------------------------------------------------
     74  52bc
      0  52bc					      DEFINE_SUBROUTINE	Handle_KING
      1  52bc				   BANK_Handle_KING SET	_CURRENT_BANK
      2  52bc					      SUBROUTINE
      3  52bc				   Handle_KING
     76  52bc
     77  52bc							; Pass...
     78  52bc							; x = currentSquare (square the KING is on)
     79  52bc							; currentPiece (KING of course, but with flags/colour attached)
     80  52bc
     81  52bc							; regular moving...
     82  52bc
      0  52bc					      MOVE_TO	_DOWN+_LEFT
      1  52bc					      SUBROUTINE
      2  52bc		       bc f5 ef 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  52bf		       30 0c		      bmi	.invalid
      4  52c1		       b9 64 f0 	      lda	Board,y
      5  52c4		       f0 04		      beq	.squareEmpty
      6  52c6
      7  52c6		       45 8a		      eor	currentPiece
      8  52c8		       10 03		      bpl	.invalid
      9  52ca
     10  52ca		       20 e8 f0    .squareEmpty jsr	AddMove
     11  52cd				   .invalid
      0  52cd					      MOVE_TO	_DOWN
      1  52cd					      SUBROUTINE
      2  52cd		       bc f6 ef 	      ldy	ValidSquare+_DOWN,x
      3  52d0		       30 0c		      bmi	.invalid
      4  52d2		       b9 64 f0 	      lda	Board,y
      5  52d5		       f0 04		      beq	.squareEmpty
      6  52d7
      7  52d7		       45 8a		      eor	currentPiece
      8  52d9		       10 03		      bpl	.invalid
      9  52db
     10  52db		       20 e8 f0    .squareEmpty jsr	AddMove
     11  52de				   .invalid
      0  52de					      MOVE_TO	_DOWN+_RIGHT
      1  52de					      SUBROUTINE
      2  52de		       bc f7 ef 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  52e1		       30 0c		      bmi	.invalid
      4  52e3		       b9 64 f0 	      lda	Board,y
      5  52e6		       f0 04		      beq	.squareEmpty
      6  52e8
      7  52e8		       45 8a		      eor	currentPiece
      8  52ea		       10 03		      bpl	.invalid
      9  52ec
     10  52ec		       20 e8 f0    .squareEmpty jsr	AddMove
     11  52ef				   .invalid
      0  52ef					      MOVE_TO	_RIGHT
      1  52ef					      SUBROUTINE
      2  52ef		       bc 01 f0 	      ldy	ValidSquare+_RIGHT,x
      3  52f2		       30 0c		      bmi	.invalid
      4  52f4		       b9 64 f0 	      lda	Board,y
      5  52f7		       f0 04		      beq	.squareEmpty
      6  52f9
      7  52f9		       45 8a		      eor	currentPiece
      8  52fb		       10 03		      bpl	.invalid
      9  52fd
     10  52fd		       20 e8 f0    .squareEmpty jsr	AddMove
     11  5300				   .invalid
      0  5300					      MOVE_TO	_UP+_RIGHT
      1  5300					      SUBROUTINE
      2  5300		       bc 0b f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  5303		       30 0c		      bmi	.invalid
      4  5305		       b9 64 f0 	      lda	Board,y
      5  5308		       f0 04		      beq	.squareEmpty
      6  530a
      7  530a		       45 8a		      eor	currentPiece
      8  530c		       10 03		      bpl	.invalid
      9  530e
     10  530e		       20 e8 f0    .squareEmpty jsr	AddMove
     11  5311				   .invalid
      0  5311					      MOVE_TO	_UP
      1  5311					      SUBROUTINE
      2  5311		       bc 0a f0 	      ldy	ValidSquare+_UP,x
      3  5314		       30 0c		      bmi	.invalid
      4  5316		       b9 64 f0 	      lda	Board,y
      5  5319		       f0 04		      beq	.squareEmpty
      6  531b
      7  531b		       45 8a		      eor	currentPiece
      8  531d		       10 03		      bpl	.invalid
      9  531f
     10  531f		       20 e8 f0    .squareEmpty jsr	AddMove
     11  5322				   .invalid
      0  5322					      MOVE_TO	_UP+_LEFT
      1  5322					      SUBROUTINE
      2  5322		       bc 09 f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  5325		       30 0c		      bmi	.invalid
      4  5327		       b9 64 f0 	      lda	Board,y
      5  532a		       f0 04		      beq	.squareEmpty
      6  532c
      7  532c		       45 8a		      eor	currentPiece
      8  532e		       10 03		      bpl	.invalid
      9  5330
     10  5330		       20 e8 f0    .squareEmpty jsr	AddMove
     11  5333				   .invalid
      0  5333					      MOVE_TO	_LEFT
      1  5333					      SUBROUTINE
      2  5333		       bc ff ef 	      ldy	ValidSquare+_LEFT,x
      3  5336		       30 0c		      bmi	.invalid
      4  5338		       b9 64 f0 	      lda	Board,y
      5  533b		       f0 04		      beq	.squareEmpty
      6  533d
      7  533d		       45 8a		      eor	currentPiece
      8  533f		       10 03		      bpl	.invalid
      9  5341
     10  5341		       20 e8 f0    .squareEmpty jsr	AddMove
     11  5344				   .invalid
     91  5344
     92  5344							; castling...
     93  5344
     94  5344		       24 8a		      bit	currentPiece	; WARNING: D6 (=MOVED) assumed
     95  5346		       70 4d		      bvs	.noCastle	; can't castle - king has moved
     96  5348
      0  5348					      CASTLE	KINGSIDE
      1  5348
      2  5348					      SUBROUTINE
      3  5348
      4  5348
      5  5348
      6  5348
      7  5348
      8  5348
      9  5348
     10  5348
     11  5348
     12  5348		       a4 8b		      ldy	currentSquare
     13  534a
     14  534a				  -	      IF	KINGSIDE = QUEENSIDE
     15  534a				  -	      lda	Board-3,y
     16  534a				  -	      bne	.noCastle
     17  534a				  -	      lda	Board-2,y
     18  534a				  -	      bne	.noCastle
     19  534a				  -	      lda	Board-1,y
     20  534a				  -	      bne	.noCastle
     21  534a					      ENDIF
     22  534a
     23  534a					      IF	KINGSIDE = KINGSIDE
     24  534a		       b9 66 f0 	      lda	Board+2,y
     25  534d		       d0 1d		      bne	.noCastle
     26  534f		       b9 65 f0 	      lda	Board+1,y
     27  5352		       d0 18		      bne	.noCastle
     28  5354					      ENDIF
     29  5354
     30  5354
     31  5354
     32  5354		       b9 67 f0 	      lda	Board+KINGSIDE,y
     33  5357		       85 a2		      sta	__piece
     34  5359
     35  5359		       29 07		      and	#PIECE_MASK
     36  535b		       c9 05		      cmp	#ROOK
     37  535d		       d0 0d		      bne	.noCastle
     38  535f
     39  535f		       a5 a2		      lda	__piece
     40  5361		       45 8a		      eor	currentPiece
     41  5363		       30 07		      bmi	.noCastle
     42  5365
     43  5365		       24 a2		      bit	__piece
     44  5367		       70 03		      bvs	.noCastle
     45  5369
     46  5369
     47  5369
     48  5369
     49  5369
     50  5369
     51  5369		       20 e8 f0 	      jsr	AddMove
     52  536c				   .noCastle
      0  536c					      CASTLE	QUEENSIDE
      1  536c
      2  536c					      SUBROUTINE
      3  536c
      4  536c
      5  536c
      6  536c
      7  536c
      8  536c
      9  536c
     10  536c
     11  536c
     12  536c		       a4 8b		      ldy	currentSquare
     13  536e
     14  536e					      IF	QUEENSIDE = QUEENSIDE
     15  536e		       b9 61 f0 	      lda	Board-3,y
     16  5371		       d0 22		      bne	.noCastle
     17  5373		       b9 62 f0 	      lda	Board-2,y
     18  5376		       d0 1d		      bne	.noCastle
     19  5378		       b9 63 f0 	      lda	Board-1,y
     20  537b		       d0 18		      bne	.noCastle
     21  537d					      ENDIF
     22  537d
     23  537d				  -	      IF	QUEENSIDE = KINGSIDE
     24  537d				  -	      lda	Board+2,y
     25  537d				  -	      bne	.noCastle
     26  537d				  -	      lda	Board+1,y
     27  537d				  -	      bne	.noCastle
     28  537d					      ENDIF
     29  537d
     30  537d
     31  537d
     32  537d		       b9 60 f0 	      lda	Board+QUEENSIDE,y
     33  5380		       85 a2		      sta	__piece
     34  5382
     35  5382		       29 07		      and	#PIECE_MASK
     36  5384		       c9 05		      cmp	#ROOK
     37  5386		       d0 0d		      bne	.noCastle
     38  5388
     39  5388		       a5 a2		      lda	__piece
     40  538a		       45 8a		      eor	currentPiece
     41  538c		       30 07		      bmi	.noCastle
     42  538e
     43  538e		       24 a2		      bit	__piece
     44  5390		       70 03		      bvs	.noCastle
     45  5392
     46  5392
     47  5392
     48  5392
     49  5392
     50  5392
     51  5392		       20 e8 f0 	      jsr	AddMove
     52  5395				   .noCastle
     99  5395
    100  5395				   .noCastle
    101  5395		       60		      rts
    102  5396
    103  5396							;---------------------------------------------------------------------------------------------------
    104  5396							; EOF
------- FILE Handler_BANK1.asm
    139  5396
    140  5396
      0  5396					      OPTIONAL_PAGEBREAK	"Base64ToIndex", 64
     10  5396					      LIST	ON
      0  5396					      DEFINE_SUBROUTINE	Base64ToIndex
      1  5396				   BANK_Base64ToIndex SET	_CURRENT_BANK
      2  5396					      SUBROUTINE
      3  5396				   Base64ToIndex
    143  5396							; Convert from 0-63 numbering into an index into the Chessboard
    144  5396
    145  5396		       16 17 18 19*	      .byte.b	22,23,24,25,26,27,28,29
    146  539e		       20 21 22 23*	      .byte.b	32,33,34,35,36,37,38,39
    147  53a6		       2a 2b 2c 2d*	      .byte.b	42,43,44,45,46,47,48,49
    148  53ae		       34 35 36 37*	      .byte.b	52,53,54,55,56,57,58,59
    149  53b6		       3e 3f 40 41*	      .byte.b	62,63,64,65,66,67,68,69
    150  53be		       48 49 4a 4b*	      .byte.b	72,73,74,75,76,77,78,79
    151  53c6		       52 53 54 55*	      .byte.b	82,83,84,85,86,87,88,89
    152  53ce		       5c 5d 5e 5f*	      .byte.b	92,93,94,95,96,97,98,99
    153  53d6
    154  53d6
      0  53d6					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  53d6
      2  53d6
      3  53d6		       03 d6	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3d6 , FREE= $2a
      4  53d6					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  53d6				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  53d6				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  53d6				  -	      ERR
      8  53d6					      endif
    156  53d6
    157  53d6							;---------------------------------------------------------------------------------------------------
    158  53d6							; EOF
------- FILE ./chess.asm
    379  53d6
    380  53d6							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  53d6					      include	"BANK_FIXED.asm"
      1  53d6							; Chess
      2  53d6							; Atari 2600 Chess display system
      3  53d6							; Copyright (c) 2019-2020 Andrew Davie
      4  53d6							; andrew@taswegian.com
      5  53d6
      6  53d6							;------------------------------------------------------------------------------
      7  53d6							;###############################  FIXED BANK  #################################
      8  53d6							;------------------------------------------------------------------------------
      9  53d6
     10  53d6				   ORIGIN     SET	FIXED_BANK
     11  53d6
      0  53d6					      NEWBANK	THE_FIXED_BANK
      1  7c9f ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800
     16  7800							;---------------------------------------------------------------------------------------------------
     17  7800
      0  7800					      DEFINE_SUBROUTINE	CopySinglePiece
      1  7800				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7800					      SUBROUTINE
      3  7800				   CopySinglePiece
     19  7800
     20  7800
     21  7800							; figure colouration of square
     22  7800		       a5 80		      lda	drawPieceNumber	;0-63
     23  7802		       4a		      lsr
     24  7803		       4a		      lsr
     25  7804		       4a		      lsr
     26  7805		       18		      clc
     27  7806		       65 80		      adc	drawPieceNumber
     28  7808		       29 01		      and	#1
     29  780a		       49 01		      eor	#1
     30  780c		       f0 02		      beq	.white
     31  780e		       a9 1c		      lda	#28
     32  7810		       85 a2	   .white     sta	__pieceColour	; actually SQUARE black/white
     33  7812
     34  7812							; PieceColour = 0 for white square, 28 for black square
     35  7812
     36  7812		       a9 08		      lda	#RAMBANK_MOVES_RAM
     37  7814		       85 3e		      sta	SET_BANK_RAM
     38  7816
     39  7816		       a4 80		      ldy	drawPieceNumber	;0-63
     40  7818		       be 96 f3 	      ldx	Base64ToIndex,y
     41  781b
     42  781b		       bd 64 f0 	      lda	Chessboard,x
     43  781e		       0a		      asl
     44  781f		       90 02		      bcc	.blackAdjust
     45  7821		       09 10		      ora	#16
     46  7823		       4a	   .blackAdjust lsr
     47  7824		       aa		      tax
     48  7825
     49  7825		       98		      tya
     50  7826		       29 03		      and	#3	; shift position in PF
     51  7828
     52  7828		       18		      clc
     53  7829		       7d 9a f8 	      adc	PieceToShape,x
     54  782c		       18		      clc
     55  782d		       65 a2		      adc	__pieceColour
     56  782f		       a8		      tay
     57  7830		       20 aa f8 	      jsr	CopyPieceToRAMBuffer
     58  7833
     59  7833		       a5 80		      lda	drawPieceNumber
     60  7835		       4a		      lsr
     61  7836		       4a		      lsr
     62  7837		       4a		      lsr
     63  7838		       49 07		      eor	#7
     64  783a							;ora doubleBufferBase
     65  783a		       aa		      tax		; row
     66  783b
     67  783b		       a5 80		      lda	drawPieceNumber
     68  783d		       29 04		      and	#4
     69  783f		       c9 04		      cmp	#4	; cc = left side, cs = right side
     70  7841
     71  7841		       86 3e		      stx	SET_BANK_RAM
     72  7843		       4c 9b f0 	      jmp	CopyPieceToRowBitmap
     73  7846
     74  7846							;---------------------------------------------------------------------------------------------------
     75  7846
      0  7846					      DEFINE_SUBROUTINE	MoveViaList
      1  7846				   BANK_MoveViaList SET	_CURRENT_BANK
      2  7846					      SUBROUTINE
      3  7846				   MoveViaList
     77  7846
     78  7846		       a6 95		      ldx	movePointer
     79  7848		       bd 6d f8 	      lda	Move,x
     80  784b		       f0 1f		      beq	halted
     81  784d
     82  784d		       bd 6e f8 	      lda	Move+1,x
     83  7850		       85 8e		      sta	fromSquare
     84  7852		       a8		      tay
     85  7853		       a9 08		      lda	#RAMBANK_MOVES_RAM
     86  7855		       85 3e		      sta	SET_BANK_RAM
     87  7857		       bd 6d f8 	      lda	Move,x	;Chessboard,y
     88  785a		       85 8f		      sta	fromPiece
     89  785c		       bd 6f f8 	      lda	Move+2,x
     90  785f		       85 90		      sta	toSquare
     91  7861
     92  7861		       bd 70 f8 	      lda	Move+3,x
     93  7864							;    beq zz
     94  7864							;    NEXT_RANDOM
     95  7864							;    and #31
     96  7864							;    adc Move+2,x
     97  7864							;    asl
     98  7864		       85 84	   zz	      sta	drawDelay
     99  7866		       e8		      inx
    100  7867		       e8		      inx
    101  7868		       e8		      inx
    102  7869		       e8		      inx
    103  786a		       86 95		      stx	movePointer
    104  786c
    105  786c
    106  786c		       60	   halted     rts
    107  786d
    108  786d		       00 32	   DELX       =	50
    109  786d
    110  786d				   Move
    111  786d
    112  786d							; numbering is BASE64
    113  786d
    114  786d				  -	      if	0
    115  786d				  -	      .byte	WHITE|ROOK,20,63,0	; e2e4
    116  786d				  -	      .byte	WHITE|KNIGHT,20,62,0	; e2e4
    117  786d				  -	      .byte	WHITE|BISHOP,20,61,0	; e2e4
    118  786d				  -	      .byte	WHITE|KING,20,60,0	; e2e4
    119  786d				  -	      .byte	WHITE|QUEEN,20,59,0	; e2e4
    120  786d				  -	      .byte	WHITE|BISHOP,20,58,0	; e2e4
    121  786d				  -	      .byte	WHITE|KNIGHT,20,57,0	; e2e4
    122  786d				  -	      .byte	WHITE|ROOK,20,56,0	; e2e4
    123  786d				  -
    124  786d				  -	      .byte	WHITE|WPAWN,20,55,0	; e2e4
    125  786d				  -	      .byte	WHITE|WPAWN,20,54,0	; e2e4
    126  786d				  -	      .byte	WHITE|WPAWN,20,53,0	; e2e4
    127  786d				  -	      .byte	WHITE|WPAWN,20,52,0	; e2e4
    128  786d				  -	      .byte	WHITE|WPAWN,20,51,0	; e2e4
    129  786d				  -	      .byte	WHITE|WPAWN,20,50,0	; e2e4
    130  786d				  -	      .byte	WHITE|WPAWN,20,49,0	; e2e4
    131  786d				  -	      .byte	WHITE|WPAWN,20,48,0	; e2e4
    132  786d				  -
    133  786d				  -	      .byte	BLACK|ROOK,43,0,0	; e2e4
    134  786d				  -	      .byte	BLACK|KNIGHT,43,1,0	; e2e4
    135  786d				  -	      .byte	BLACK|BISHOP,43,2,0	; e2e4
    136  786d				  -	      .byte	BLACK|QUEEN,43,3,0	; e2e4
    137  786d				  -	      .byte	BLACK|KING,43,4,0	; e2e4
    138  786d				  -	      .byte	BLACK|BISHOP,43,5,0	; e2e4
    139  786d				  -	      .byte	BLACK|KNIGHT,43,6,0	; e2e4
    140  786d				  -	      .byte	BLACK|ROOK,43,7,0	; e2e4
    141  786d				  -
    142  786d				  -	      .byte	BLACK|BPAWN,43,8,0	; e2e4
    143  786d				  -	      .byte	BLACK|BPAWN,43,9,0	; e2e4
    144  786d				  -	      .byte	BLACK|BPAWN,43,10,0	; e2e4
    145  786d				  -	      .byte	BLACK|BPAWN,43,11,0	; e2e4
    146  786d				  -	      .byte	BLACK|BPAWN,43,12,0	; e2e4
    147  786d				  -	      .byte	BLACK|BPAWN,43,13,0	; e2e4
    148  786d				  -	      .byte	BLACK|BPAWN,43,14,0	; e2e4
    149  786d				  -	      .byte	BLACK|BPAWN,43,15,0	; e2e4
    150  786d				  -
    151  786d					      endif
    152  786d
    153  786d		       01 0c 1c 32	      .byte.b	WHITE|WPAWN,12,12+16,DELX	; e2e4
    154  7871		       82 33 23 32	      .byte.b	BLACK|BPAWN,51,51-16,DELX	; d7d5
    155  7875				  -	      if	0
    156  7875				  -	      .byte	WHITE|KNIGHT,62,62-17,DELX	; g1f3
    157  7875				  -	      .byte	BLACK|BPAWN,27,27+9,DELX	;d5e4
    158  7875				  -	      .byte	WHITE|KNIGHT,45,45-15,DELX	;f3-g5
    159  7875				  -	      .byte	BLACK|BPAWN,13,13+16,DELX	;f7f5
    160  7875				  -	      .byte	WHITE|BISHOP,61,61-3*8-3,DELX	;f1c4
    161  7875				  -	      .byte	BLACK|KNIGHT,1,1+17,DELX	;b8c6
    162  7875				  -	      .byte	WHITE|KING,60,62,DELX	;0-0
    163  7875				  -	      .byte	WHITE|ROOK,63,61,0
    164  7875				  -	      .byte	BLACK|KNIGHT,6,6+15,DELX	;g8f6
    165  7875				  -	      .byte	WHITE|KNIGHT,30,20,DELX	;g5e6
    166  7875				  -	      .byte	BLACK|QUEEN,3,3+16,DELX	;D8d6
    167  7875				  -	      .byte	WHITE|KNIGHT,20,20-15,DELX	;e6f8
    168  7875				  -	      .byte	BLACK|KNIGHT,21,21+17,DELX	;f6g4
    169  7875				  -	      .byte	WHITE|KNIGHT,57,42,DELX	;B1C3
    170  7875				  -	      .byte	BLACK|QUEEN,19,55,DELX	;qxp mate
    171  7875					      endif
    172  7875
    173  7875							;	      .byte 7,5,DELX
    174  7875							;	      .byte 51,51-16,DELX
    175  7875							;	      .byte 36,43,DELX
    176  7875							;	      .byte 35,35,0
    177  7875							;	      .byte 59,59-16,DELX
    178  7875							;	      .byte 19,19+3*8,DELX
    179  7875							;	      .byte 50,43,DELX
    180  7875							;	      .byte 18,18+17,DELX
    181  7875							;	      .byte 57,57-17,DELX
    182  7875							;	      .byte 35,35+17,DELX
    183  7875							;	      .byte 62,63,DELX
    184  7875							;	      .byte 52,58,DELX
    185  7875							;	      .byte 56,58,DELX
    186  7875							;	      .byte 21,21+17,DELX
    187  7875		       07 3e 3e 32	      .byte.b	WHITE|KING,62,62,DELX
    188  7879		       00		      .byte.b	0
    189  787a
    190  787a							;---------------------------------------------------------------------------------------------------
    191  787a
      0  787a					      DEFINE_SUBROUTINE	ConvertToBase64
      1  787a				   BANK_ConvertToBase64 SET	_CURRENT_BANK
      2  787a					      SUBROUTINE
      3  787a				   ConvertToBase64
    193  787a
    194  787a							; convert from 10x12 square numbering (0-119) to 8x8 square numbering (0-63)
    195  787a
    196  787a		       38		      sec
    197  787b		       e9 16		      sbc	#22
    198  787d
    199  787d		       a2 ff		      ldx	#$FF
    200  787f		       e9 0a	   .conv64    sbc	#10
    201  7881		       e8		      inx
    202  7882		       b0 fb		      bcs	.conv64
    203  7884		       69 0a		      adc	#10
    204  7886
    205  7886							; A = column (0-7)
    206  7886							; X = row (0-7)
    207  7886
    208  7886		       60		      rts
    209  7887
    210  7887
    211  7887							;---------------------------------------------------------------------------------------------------
    212  7887
      0  7887					      DEFINE_SUBROUTINE	InitialiseChessboard
      1  7887				   BANK_InitialiseChessboard SET	_CURRENT_BANK
      2  7887					      SUBROUTINE
      3  7887				   InitialiseChessboard
    214  7887		       60		      rts
    215  7888		       a9 08		      lda	#RAMBANK_MOVES_RAM
    216  788a		       85 3e		      sta	SET_BANK_RAM
    217  788c
    218  788c		       a2 3f		      ldx	#63
    219  788e		       bc 96 f3    .setupBoard ldy	Base64ToIndex,x
    220  7891		       a9 00		      lda	#BLANK	;BoardPiece,x
    221  7893		       99 64 f4 	      sta	Chessboard+RAM_WRITE,y
    222  7896		       ca		      dex
    223  7897		       10 f5		      bpl	.setupBoard
    224  7899
    225  7899		       60		      rts
    226  789a
    227  789a
    228  789a
    229  789a				   PieceToShape
    230  789a
    231  789a		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    232  789b		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    233  789c		       3c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    234  789d		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    235  789e		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    236  789f		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    237  78a0		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    238  78a1		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    239  78a2
    240  78a2		       38		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    241  78a3		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    242  78a4		       3c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    243  78a5		       40		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    244  78a6		       44		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    245  78a7		       48		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    246  78a8		       4c		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    247  78a9		       50		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    248  78aa
    249  78aa
    250  78aa							;---------------------------------------------------------------------------------------------------
    251  78aa
      0  78aa					      DEFINE_SUBROUTINE	CopyPieceToRAMBuffer
      1  78aa				   BANK_CopyPieceToRAMBuffer SET	_CURRENT_BANK
      2  78aa					      SUBROUTINE
      3  78aa				   CopyPieceToRAMBuffer
    253  78aa
    254  78aa							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    255  78aa							; y = piece index
    256  78aa
    257  78aa		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
    258  78ac		       85 3f		      sta	SET_BANK
    259  78ae
    260  78ae		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
    261  78b1		       85 ea		      sta	__ptr
    262  78b3		       b9 70 f0 	      lda	PIECE_VECTOR_HI,y
    263  78b6		       85 eb		      sta	__ptr+1
    264  78b8		       b9 e0 f0 	      lda	PIECE_VECTOR_BANK,y
    265  78bb		       85 3f		      sta	SET_BANK
    266  78bd
    267  78bd		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
    268  78bf							;REPEAT PIECE_SHAPE_SIZE
    269  78bf		       b1 ea	   .copyP     lda	(__ptr),y
    270  78c1		       99 a2 00 	      sta	__pieceShapeBuffer,y
    271  78c4		       88		      dey
    272  78c5		       10 f8		      bpl	.copyP
    273  78c7							;REPEND
    274  78c7
    275  78c7							;.copyPieceGfx   lda (__ptr),y
    276  78c7							;		  sta __pieceShapeBuffer,y
    277  78c7							;		  dey
    278  78c7							;		  bpl .copyPieceGfx
    279  78c7
    280  78c7		       60		      rts
    281  78c8
    282  78c8							;---------------------------------------------------------------------------------------------------
    283  78c8
      0  78c8					      DEFINE_SUBROUTINE	CopyShadowROMtoRAM
      1  78c8				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  78c8					      SUBROUTINE
      3  78c8				   CopyShadowROMtoRAM
    285  78c8							; pass x = source bank
    286  78c8							; pass y = destination bank (preserved)
    287  78c8
    288  78c8		       86 a3		      stx	__sourceBank
    289  78ca
    290  78ca		       a2 00		      ldx	#0
    291  78cc		       a5 a3	   .copyPage  lda	__sourceBank
    292  78ce		       85 3f		      sta	SET_BANK
    293  78d0
    294  78d0		       bd 00 f0 	      lda	$F000,x
    295  78d3		       48		      pha
    296  78d4		       bd 00 f1 	      lda	$F100,x
    297  78d7		       48		      pha
    298  78d8		       bd 00 f2 	      lda	$F200,x
    299  78db		       48		      pha
    300  78dc		       bd 00 f3 	      lda	$F300,x
    301  78df
    302  78df		       84 3e		      sty	SET_BANK_RAM
    303  78e1
    304  78e1		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    305  78e4		       68		      pla
    306  78e5		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    307  78e8		       68		      pla
    308  78e9		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    309  78ec		       68		      pla
    310  78ed		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    311  78f0
    312  78f0		       ca		      dex
    313  78f1		       d0 d9		      bne	.copyPage
    314  78f3		       60		      rts
    315  78f4
    316  78f4							;---------------------------------------------------------------------------------------------------
    317  78f4
      0  78f4					      DEFINE_SUBROUTINE	Reset
      1  78f4				   BANK_Reset SET	_CURRENT_BANK
      2  78f4					      SUBROUTINE
      3  78f4				   Reset
    319  78f4
      0  78f4					      CLEAN_START
      1  78f4		       78		      sei
      2  78f5		       d8		      cld
      3  78f6
      4  78f6		       a2 00		      ldx	#0
      5  78f8		       8a		      txa
      6  78f9		       a8		      tay
      7  78fa		       ca	   .CLEAR_STACK dex
      8  78fb		       9a		      txs
      9  78fc		       48		      pha
     10  78fd		       d0 fb		      bne	.CLEAR_STACK
     11  78ff
    321  78ff
    322  78ff		       a9 09		      lda	#BANK_TitleScreen
    323  7901		       85 3f		      sta	SET_BANK
    324  7903		       20 0a f0 	      jsr	TitleScreen
    325  7906
    326  7906
    327  7906		       a9 97		      lda	#$97
    328  7908		       85 81		      sta	rnd
    329  790a		       a9 00		      lda	#0
    330  790c		       85 95		      sta	movePointer
    331  790e
    332  790e							; Move a copy of the row bank template to the first 8 banks of RAM
    333  790e							; and then terminate the draw subroutine by substituting in a RTS on the last one
    334  790e
    335  790e		       a0 07		      ldy	#7
    336  7910		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    337  7912		       20 c8 f8 	      jsr	CopyShadowROMtoRAM
    338  7915		       88		      dey
    339  7916		       10 f8		      bpl	.copyRowBanks
    340  7918
    341  7918							; Patch the final row's "loop" to a RTS
    342  7918
    343  7918		       a2 07		      ldx	#7
    344  791a		       86 3e		      stx	SET_BANK_RAM
    345  791c		       a9 60		      lda	#$60	; rts
    346  791e		       8d ee f4 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
    347  7921
    348  7921
    349  7921							; copy the BOARD/MOVES bank
    350  7921
    351  7921		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    352  7923		       a2 0a		      ldx	#MOVES
    353  7925		       20 c8 f8 	      jsr	CopyShadowROMtoRAM	; this auto-initialises Board too
    354  7928
    355  7928
    356  7928		       20 87 f8 	      jsr	InitialiseChessboard
    357  792b
    358  792b							; Now the board is "living" in RAM (along with support code) we can do stuff with it
    359  792b
    360  792b		       a9 00		      lda	#0
    361  792d		       85 82		      sta	doubleBufferBase
    362  792f		       85 83		      sta	drawPhase
    363  7931
    364  7931
    365  7931		       a9 00		      lda	#%00000000
    366  7933		       85 4a		      sta	CTRLPF
    367  7935		       85 49		      sta	COLUBK
    368  7937
    369  7937
      0  7937					      RESYNC
      1  7937
      2  7937		       a9 02		      lda	#%10
      3  7939		       85 41		      sta	VBLANK
      4  793b
      5  793b		       a2 08		      ldx	#8
      6  793d				   .loopResync
      0  793d					      VERTICAL_SYNC
      1  793d		       a9 0e		      lda	#%1110
      2  793f		       85 42	   .VSLP1     sta	WSYNC
      3  7941		       85 40		      sta	VSYNC
      4  7943		       4a		      lsr
      5  7944		       d0 f9		      bne	.VSLP1
      8  7946
      9  7946		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  7948		       a5 96		      lda	Platform
     11  794a		       49 02		      eor	#PAL_50
     12  794c		       d0 02		      bne	.ntsc
     13  794e		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  7950				   .ntsc
     15  7950				   .loopWait
     16  7950		       85 42		      sta	WSYNC
     17  7952		       85 42		      sta	WSYNC
     18  7954		       88		      dey
     19  7955		       d0 f9		      bne	.loopWait
     20  7957		       ca		      dex
     21  7958		       d0 e3		      bne	.loopResync
    371  795a
    372  795a
    373  795a				   .doubleBufferLoop
    374  795a
    375  795a		       a9 0e		      lda	#%1110	; VSYNC ON
    376  795c		       85 42	   .loopVSync3 sta	WSYNC
    377  795e		       85 40		      sta	VSYNC
    378  7960		       4a		      lsr
    379  7961		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
    380  7963
    381  7963		       a0 32		      ldy	#50	;VBLANK_TIM_NTSC
    382  7965		       8c 96 02 	      sty	TIM64T
    383  7968
    384  7968		       20 9f f9 	      jsr	PhasedProcessor
    385  796b
    386  796b		       85 42	   .VerticalBlank sta	WSYNC
    387  796d		       ad 84 02 	      lda	INTIM
    388  7970		       d0 f9		      bne	.VerticalBlank
    389  7972		       85 41		      sta	VBLANK
    390  7974
    391  7974		       a6 82		      ldx	doubleBufferBase
    392  7976		       86 3e		      stx	SET_BANK_RAM
    393  7978		       20 bf f0 	      jsr	DrawRow
    394  797b
    395  797b		       a9 1a		      lda	#26
    396  797d		       8d 96 02 	      sta	TIM64T
    397  7980
    398  7980		       a9 00		      lda	#0
    399  7982		       85 4d		      sta	PF0
    400  7984		       85 4e		      sta	PF1
    401  7986		       85 4f		      sta	PF2
    402  7988
    403  7988							;jsr PhasedProcessor
    404  7988
    405  7988							; D1 VBLANK turns off beam
    406  7988							; It needs to be turned on 37 scanlines later
    407  7988
    408  7988		       ad 84 02    .oscan     lda	INTIM
    409  798b		       d0 fb		      bne	.oscan
    410  798d
    411  798d		       85 42		      sta	WSYNC
    412  798f		       85 42		      sta	WSYNC
    413  7991							;		  sta WSYNC
    414  7991							;		  sta WSYNC
    415  7991
    416  7991		       a9 42		      lda	#%01000010	; bit6 is not required
    417  7993		       85 41		      sta	VBLANK	; end of screen - enter blanking
    418  7995
    419  7995
    420  7995
    421  7995		       a5 4c		      lda	INPT4
    422  7997		       10 03		      bpl	.ret
    423  7999		       4c 5a f9 	      jmp	.doubleBufferLoop
    424  799c
    425  799c							;		  jmp .RestartChessFrame
    426  799c
    427  799c				   .ret
    428  799c
    429  799c							;jmp .doubleBufferLoop
    430  799c
    431  799c							;lda #2
    432  799c							;sta VSYNC
    433  799c							;lda #%01000010		  ; bit6 is not required
    434  799c							;sta VBLANK			  ; end of screen - enter blanking
    435  799c
    436  799c				   Restart		; go here on RESET + SELECT
    437  799c
    438  799c		       4c f4 f8 	      jmp	Reset
    439  799f
    440  799f							;---------------------------------------------------------------------------------------------------
    441  799f
      0  799f					      DEFINE_SUBROUTINE	PhasedProcessor
      1  799f				   BANK_PhasedProcessor SET	_CURRENT_BANK
      2  799f					      SUBROUTINE
      3  799f				   PhasedProcessor
    443  799f		       a6 83		      ldx	drawPhase
    444  79a1		       bd ae f9 	      lda	DrawVectorLO,x
    445  79a4		       85 ea		      sta	__ptr
    446  79a6		       bd b8 f9 	      lda	DrawVectorHI,x
    447  79a9		       85 eb		      sta	__ptr+1
    448  79ab		       6c ea 00 	      jmp	(__ptr)
    449  79ae
    450  79ae		       00 06	   MARCH      =	6
    451  79ae		       00 03	   STARTMOVE  =	3
    452  79ae
    453  79ae				   DrawVectorLO
    454  79ae		       c2		      .byte.b	<StartClearBoard
    455  79af		       c8		      .byte.b	<ClearEachRow
    456  79b0		       db		      .byte.b	<DrawEntireBoard
    457  79b1		       e5		      .byte.b	<FlipBuffers
    458  79b2		       01		      .byte.b	<EraseStartPiece
    459  79b3		       07		      .byte.b	<WriteStartPieceBlank
    460  79b4		       24		      .byte.b	<MarchToTargetA
    461  79b5		       82		      .byte.b	<MarchB
    462  79b6		       90		      .byte.b	<MarchToTargetB
    463  79b7		       b3		      .byte.b	<MarchB2
    464  79b8
    465  79b8				   DrawVectorHI
    466  79b8		       f9		      .byte.b	>StartClearBoard
    467  79b9		       f9		      .byte.b	>ClearEachRow
    468  79ba		       f9		      .byte.b	>DrawEntireBoard
    469  79bb		       f9		      .byte.b	>FlipBuffers
    470  79bc		       fa		      .byte.b	>EraseStartPiece
    471  79bd		       fa		      .byte.b	>WriteStartPieceBlank
    472  79be		       fa		      .byte.b	>MarchToTargetA
    473  79bf		       fa		      .byte.b	>MarchB
    474  79c0		       fa		      .byte.b	>MarchToTargetB
    475  79c1		       fa		      .byte.b	>MarchB2
    476  79c2
      0  79c2					      DEFINE_SUBROUTINE	StartClearBoard
      1  79c2				   BANK_StartClearBoard SET	_CURRENT_BANK
      2  79c2					      SUBROUTINE
      3  79c2				   StartClearBoard
    478  79c2
    479  79c2		       a2 08		      ldx	#8
    480  79c4		       86 86		      stx	drawCount	; = bank
    481  79c6		       e6 83		      inc	drawPhase
    482  79c8
      0  79c8					      DEFINE_SUBROUTINE	ClearEachRow
      1  79c8				   BANK_ClearEachRow SET	_CURRENT_BANK
      2  79c8					      SUBROUTINE
      3  79c8				   ClearEachRow
    484  79c8
    485  79c8		       c6 86		      dec	drawCount
    486  79ca		       30 08		      bmi	.bitmapCleared
    487  79cc		       a6 86		      ldx	drawCount
    488  79ce		       86 3e		      stx	SET_BANK_RAM
    489  79d0		       20 90 f0 	      jsr	ClearRowBitmap
    490  79d3
    491  79d3		       60		      rts
    492  79d4
    493  79d4				   .bitmapCleared
    494  79d4
    495  79d4		       a9 3f		      lda	#63
    496  79d6		       85 80		      sta	drawPieceNumber
    497  79d8
    498  79d8		       e6 83		      inc	drawPhase
    499  79da		       60		      rts
    500  79db
      0  79db					      DEFINE_SUBROUTINE	DrawEntireBoard
      1  79db				   BANK_DrawEntireBoard SET	_CURRENT_BANK
      2  79db					      SUBROUTINE
      3  79db				   DrawEntireBoard
    502  79db
    503  79db		       20 00 f8 	      jsr	CopySinglePiece
    504  79de		       c6 80		      dec	drawPieceNumber
    505  79e0		       10 02		      bpl	.incomplete
    506  79e2
    507  79e2		       e6 83		      inc	drawPhase
    508  79e4		       60	   .incomplete rts
    509  79e5
    510  79e5							; Now we've finished drawing the screen square by square.
    511  79e5
      0  79e5					      DEFINE_SUBROUTINE	FlipBuffers
      1  79e5				   BANK_FlipBuffers SET	_CURRENT_BANK
      2  79e5					      SUBROUTINE
      3  79e5				   FlipBuffers
    513  79e5
    514  79e5		       20 46 f8 	      jsr	MoveViaList
    515  79e8
    516  79e8		       a9 00		      lda	#BLANK
    517  79ea		       85 94		      sta	previousPiece
    518  79ec
    519  79ec		       a5 84		      lda	drawDelay
    520  79ee		       d0 0b		      bne	normaldraw
    521  79f0
    522  79f0		       a9 00		      lda	#0
    523  79f2		       85 87		      sta	snail
    524  79f4
    525  79f4		       a9 06		      lda	#6
    526  79f6		       85 83		      sta	drawPhase
    527  79f8		       4c 24 fa 	      jmp	MarchToTargetA
    528  79fb
    529  79fb				   normaldraw
    530  79fb		       a9 05		      lda	#5
    531  79fd		       85 87		      sta	snail
    532  79ff
    533  79ff		       e6 83		      inc	drawPhase
    534  7a01
      0  7a01					      DEFINE_SUBROUTINE	EraseStartPiece
      1  7a01				   BANK_EraseStartPiece SET	_CURRENT_BANK
      2  7a01					      SUBROUTINE
      3  7a01				   EraseStartPiece
    536  7a01
    537  7a01
    538  7a01		       a9 0c		      lda	#12
    539  7a03		       85 86		      sta	drawCount
    540  7a05
    541  7a05		       e6 83		      inc	drawPhase
    542  7a07							;rts
    543  7a07
      0  7a07					      DEFINE_SUBROUTINE	WriteStartPieceBlank
      1  7a07				   BANK_WriteStartPieceBlank SET	_CURRENT_BANK
      2  7a07					      SUBROUTINE
      3  7a07				   WriteStartPieceBlank
    545  7a07
    546  7a07		       a5 84		      lda	drawDelay
    547  7a09		       f0 03		      beq	deCount
    548  7a0b		       c6 84		      dec	drawDelay
    549  7a0d		       60		      rts
    550  7a0e
    551  7a0e		       a5 86	   deCount    lda	drawCount
    552  7a10		       f0 10		      beq	flashDone
    553  7a12		       c6 86		      dec	drawCount
    554  7a14
    555  7a14		       a9 05		      lda	#5
    556  7a16		       85 84		      sta	drawDelay
    557  7a18
    558  7a18		       a5 8e		      lda	fromSquare
    559  7a1a		       85 80		      sta	drawPieceNumber
    560  7a1c		       20 00 f8 	      jsr	CopySinglePiece
    561  7a1f
    562  7a1f		       c6 84		      dec	drawDelay
    563  7a21		       60		      rts
    564  7a22
    565  7a22		       e6 83	   flashDone  inc	drawPhase
    566  7a24							;rts
    567  7a24
    568  7a24							;---------------------------------------------------------------------------------------------------
    569  7a24
      0  7a24					      DEFINE_SUBROUTINE	MarchToTargetA
      1  7a24				   BANK_MarchToTargetA SET	_CURRENT_BANK
      2  7a24					      SUBROUTINE
      3  7a24				   MarchToTargetA
    571  7a24
    572  7a24		       a5 84		      lda	drawDelay
    573  7a26		       f0 03		      beq	.progress
    574  7a28		       c6 84		      dec	drawDelay
    575  7a2a		       60		      rts
    576  7a2b				   .progress
    577  7a2b
    578  7a2b
    579  7a2b							; Now we calculate move to new square
    580  7a2b
    581  7a2b		       a5 8e		      lda	fromSquare
    582  7a2d		       85 85		      sta	lastSquare
    583  7a2f		       4a		      lsr
    584  7a30		       4a		      lsr
    585  7a31		       4a		      lsr
    586  7a32		       85 93		      sta	__fromRow
    587  7a34		       a5 90		      lda	toSquare
    588  7a36		       4a		      lsr
    589  7a37		       4a		      lsr
    590  7a38		       4a		      lsr
    591  7a39		       c5 93		      cmp	__fromRow
    592  7a3b		       f0 11		      beq	rowOK
    593  7a3d		       b0 09		      bcs	.downRow
    594  7a3f		       a5 8e		      lda	fromSquare
    595  7a41		       e9 07		      sbc	#7
    596  7a43		       85 8e		      sta	fromSquare
    597  7a45		       4c 4e fa 	      jmp	nowcol
    598  7a48		       a5 8e	   .downRow   lda	fromSquare
    599  7a4a		       69 07		      adc	#7
    600  7a4c		       85 8e		      sta	fromSquare
    601  7a4e				   rowOK
    602  7a4e				   nowcol
    603  7a4e
    604  7a4e		       a5 8e		      lda	fromSquare
    605  7a50		       29 07		      and	#7
    606  7a52		       85 93		      sta	__fromRow
    607  7a54		       a5 90		      lda	toSquare
    608  7a56		       29 07		      and	#7
    609  7a58		       c5 93		      cmp	__fromRow
    610  7a5a		       f0 09		      beq	colok
    611  7a5c		       90 05		      bcc	.leftCol
    612  7a5e		       e6 8e		      inc	fromSquare
    613  7a60		       4c 65 fa 	      jmp	colok
    614  7a63		       c6 8e	   .leftCol   dec	fromSquare
    615  7a65				   colok
    616  7a65
    617  7a65							; erase object in new sqare --> blank
    618  7a65
    619  7a65		       a5 8e		      lda	fromSquare
    620  7a67		       85 80		      sta	drawPieceNumber
    621  7a69		       20 00 f8 	      jsr	CopySinglePiece	; erase destination--> blank
    622  7a6c
    623  7a6c		       a9 08		      lda	#RAMBANK_MOVES_RAM
    624  7a6e		       85 3e		      sta	SET_BANK_RAM
    625  7a70		       a6 8e		      ldx	fromSquare
    626  7a72		       bc 96 f3 	      ldy	Base64ToIndex,x
    627  7a75
    628  7a75		       b9 64 f0 	      lda	Chessboard,y
    629  7a78		       85 92		      sta	lastPiece	; what we are overwriting
    630  7a7a		       a5 8f		      lda	fromPiece
    631  7a7c		       99 64 f4 	      sta	Chessboard+RAM_WRITE,y	; and what'w actually moving there
    632  7a7f		       e6 83		      inc	drawPhase
    633  7a81		       60		      rts
    634  7a82
    635  7a82							;---------------------------------------------------------------------------------------------------
    636  7a82
    637  7a82				   MarchB
    638  7a82
    639  7a82		       a5 8e		      lda	fromSquare
    640  7a84		       85 80		      sta	drawPieceNumber
    641  7a86		       20 00 f8 	      jsr	CopySinglePiece	; draw the moving piece into the new square
    642  7a89
    643  7a89		       a5 87		      lda	snail	; snail trail
    644  7a8b		       85 84		      sta	drawDelay
    645  7a8d
    646  7a8d		       e6 83		      inc	drawPhase
    647  7a8f		       60		      rts
    648  7a90
    649  7a90							;---------------------------------------------------------------------------------------------------
    650  7a90
      0  7a90					      DEFINE_SUBROUTINE	MarchToTargetB
      1  7a90				   BANK_MarchToTargetB SET	_CURRENT_BANK
      2  7a90					      SUBROUTINE
      3  7a90				   MarchToTargetB
    652  7a90
    653  7a90		       a5 84		      lda	drawDelay
    654  7a92		       f0 03		      beq	.mb
    655  7a94		       c6 84		      dec	drawDelay
    656  7a96		       60		      rts
    657  7a97				   .mb
    658  7a97
    659  7a97
    660  7a97							; now we want to undraw the piece in the old square
    661  7a97
    662  7a97		       a5 85		      lda	lastSquare
    663  7a99		       85 80		      sta	drawPieceNumber
    664  7a9b		       20 00 f8 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    665  7a9e
    666  7a9e		       a9 08		      lda	#RAMBANK_MOVES_RAM
    667  7aa0		       85 3e		      sta	SET_BANK_RAM
    668  7aa2		       a5 94		      lda	previousPiece
    669  7aa4
    670  7aa4		       a6 85		      ldx	lastSquare
    671  7aa6		       bc 96 f3 	      ldy	Base64ToIndex,x
    672  7aa9		       99 64 f4 	      sta	Chessboard+RAM_WRITE,y
    673  7aac
    674  7aac		       a5 92		      lda	lastPiece
    675  7aae		       85 94		      sta	previousPiece
    676  7ab0
    677  7ab0		       e6 83		      inc	drawPhase
    678  7ab2		       60		      rts
    679  7ab3
    680  7ab3							;---------------------------------------------------------------------------------------------------
    681  7ab3
      0  7ab3					      DEFINE_SUBROUTINE	MarchB2
      1  7ab3				   BANK_MarchB2 SET	_CURRENT_BANK
      2  7ab3					      SUBROUTINE
      3  7ab3				   MarchB2
    683  7ab3
    684  7ab3		       a5 85		      lda	lastSquare
    685  7ab5		       85 80		      sta	drawPieceNumber
    686  7ab7		       20 00 f8 	      jsr	CopySinglePiece	; draw previous piece back in old position
    687  7aba
    688  7aba		       a5 8e		      lda	fromSquare
    689  7abc		       c5 90		      cmp	toSquare
    690  7abe		       f0 05		      beq	.halt
    691  7ac0
    692  7ac0							; here we could delay
    693  7ac0							;lda #5	    ; inter-move segment speed
    694  7ac0							;sta drawDelay
    695  7ac0
    696  7ac0		       a9 06		      lda	#MARCH
    697  7ac2		       85 83		      sta	drawPhase
    698  7ac4		       60		      rts
    699  7ac5
    700  7ac5		       a9 03	   .halt      lda	#STARTMOVE
    701  7ac7		       85 83		      sta	drawPhase
    702  7ac9		       60		      rts
    703  7aca
    704  7aca							;---------------------------------------------------------------------------------------------------
    705  7aca
      0  7aca					      DEFINE_SUBROUTINE	CallMoveGenerators
      1  7aca				   BANK_CallMoveGenerators SET	_CURRENT_BANK
      2  7aca					      SUBROUTINE
      3  7aca				   CallMoveGenerators
    707  7aca
    708  7aca		       a9 08		      lda	#RAMBANK_MOVES_RAM
    709  7acc		       85 3e		      sta	SET_BANK_RAM
    710  7ace
    711  7ace							; iterate piecelist
    712  7ace							; call move generators
    713  7ace
    714  7ace							;ldx pieclistIndex
    715  7ace		       bc e3 f0 	      ldy	Piece+11,x	; square piece is on (hardwired pawn for now)
    716  7ad1		       84 8b		      sty	currentSquare
    717  7ad3		       b9 64 f0 	      lda	Board,y
    718  7ad6		       85 8a		      sta	currentPiece
    719  7ad8
    720  7ad8		       29 07		      and	#PIECE_MASK
    721  7ada		       aa		      tax
    722  7adb
    723  7adb		       bd c8 f0 	      lda	HandlerVectorLO,x
    724  7ade		       85 a3		      sta	__vector
    725  7ae0		       bd d0 f0 	      lda	HandlerVectorHI,x
    726  7ae3		       85 a4		      sta	__vector+1
    727  7ae5
    728  7ae5		       a6 8b		      ldx	currentSquare
    729  7ae7		       6c a3 00 	      jmp	(__vector)
    730  7aea
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  7aea					      include	"Handler_KNIGHT.asm"
      1  7aea							; Copyright (C)2020 Andrew Davie
      2  7aea							; Knight move handler
      3  7aea
      4  7aea							;---------------------------------------------------------------------------------------------------
      5  7aea							; KNIGHT
      6  7aea							;---------------------------------------------------------------------------------------------------
      7  7aea
      0  7aea					      DEFINE_SUBROUTINE	Handle_KNIGHT
      1  7aea				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  7aea					      SUBROUTINE
      3  7aea				   Handle_KNIGHT
      9  7aea
     10  7aea							; Pass...
     11  7aea							; x = currentSquare (square the piece is on)
     12  7aea							; currentPiece (with flags/colour attached)
     13  7aea
      0  7aea					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  7aea					      SUBROUTINE
      2  7aea		       bc eb ef 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  7aed		       30 0c		      bmi	.invalid
      4  7aef		       b9 64 f0 	      lda	Board,y
      5  7af2		       f0 04		      beq	.squareEmpty
      6  7af4
      7  7af4		       45 8a		      eor	currentPiece
      8  7af6		       10 03		      bpl	.invalid
      9  7af8
     10  7af8		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7afb				   .invalid
      0  7afb					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  7afb					      SUBROUTINE
      2  7afb		       bc ed ef 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  7afe		       30 0c		      bmi	.invalid
      4  7b00		       b9 64 f0 	      lda	Board,y
      5  7b03		       f0 04		      beq	.squareEmpty
      6  7b05
      7  7b05		       45 8a		      eor	currentPiece
      8  7b07		       10 03		      bpl	.invalid
      9  7b09
     10  7b09		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b0c				   .invalid
      0  7b0c					      MOVE_TO	_UP+_UP+_LEFT
      1  7b0c					      SUBROUTINE
      2  7b0c		       bc 13 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  7b0f		       30 0c		      bmi	.invalid
      4  7b11		       b9 64 f0 	      lda	Board,y
      5  7b14		       f0 04		      beq	.squareEmpty
      6  7b16
      7  7b16		       45 8a		      eor	currentPiece
      8  7b18		       10 03		      bpl	.invalid
      9  7b1a
     10  7b1a		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b1d				   .invalid
      0  7b1d					      MOVE_TO	_UP+_UP+_RIGHT
      1  7b1d					      SUBROUTINE
      2  7b1d		       bc 15 f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  7b20		       30 0c		      bmi	.invalid
      4  7b22		       b9 64 f0 	      lda	Board,y
      5  7b25		       f0 04		      beq	.squareEmpty
      6  7b27
      7  7b27		       45 8a		      eor	currentPiece
      8  7b29		       10 03		      bpl	.invalid
      9  7b2b
     10  7b2b		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b2e				   .invalid
     18  7b2e
      0  7b2e					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  7b2e					      SUBROUTINE
      2  7b2e		       bc f4 ef 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  7b31		       30 0c		      bmi	.invalid
      4  7b33		       b9 64 f0 	      lda	Board,y
      5  7b36		       f0 04		      beq	.squareEmpty
      6  7b38
      7  7b38		       45 8a		      eor	currentPiece
      8  7b3a		       10 03		      bpl	.invalid
      9  7b3c
     10  7b3c		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b3f				   .invalid
      0  7b3f					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  7b3f					      SUBROUTINE
      2  7b3f		       bc f8 ef 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  7b42		       30 0c		      bmi	.invalid
      4  7b44		       b9 64 f0 	      lda	Board,y
      5  7b47		       f0 04		      beq	.squareEmpty
      6  7b49
      7  7b49		       45 8a		      eor	currentPiece
      8  7b4b		       10 03		      bpl	.invalid
      9  7b4d
     10  7b4d		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b50				   .invalid
      0  7b50					      MOVE_TO	_UP+_LEFT+_LEFT
      1  7b50					      SUBROUTINE
      2  7b50		       bc 08 f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  7b53		       30 0c		      bmi	.invalid
      4  7b55		       b9 64 f0 	      lda	Board,y
      5  7b58		       f0 04		      beq	.squareEmpty
      6  7b5a
      7  7b5a		       45 8a		      eor	currentPiece
      8  7b5c		       10 03		      bpl	.invalid
      9  7b5e
     10  7b5e		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b61				   .invalid
      0  7b61					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  7b61					      SUBROUTINE
      2  7b61		       bc 0c f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  7b64		       30 0c		      bmi	.invalid
      4  7b66		       b9 64 f0 	      lda	Board,y
      5  7b69		       f0 04		      beq	.squareEmpty
      6  7b6b
      7  7b6b		       45 8a		      eor	currentPiece
      8  7b6d		       10 03		      bpl	.invalid
      9  7b6f
     10  7b6f		       20 e8 f0    .squareEmpty jsr	AddMove
     11  7b72				   .invalid
     23  7b72
     24  7b72		       60		      rts
     25  7b73
     26  7b73							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  7b73					      include	"Handler_PAWN.asm"
      1  7b73							; Copyright (C)2020 Andrew Davie
      2  7b73							; Pawn move handlers
      3  7b73
      4  7b73							;---------------------------------------------------------------------------------------------------
      5  7b73							; WHITE PAWN
      6  7b73							;---------------------------------------------------------------------------------------------------
      7  7b73
      8  7b73		       00 30	   WHITE_HOME_ROW =	48	; less than this and pawn hasn't moved yet
      9  7b73		       00 60	   BLACK_HOME_ROW =	96	; greater than this and pawn hasn't moved yet
     10  7b73
     11  7b73							;---------------------------------------------------------------------------------------------------
     12  7b73
     13  7b73					      MAC	en_passant
     14  7b73					      SUBROUTINE
     15  7b73							; {1} = _LEFT or _RIGHT
     16  7b73					      ldy	ValidSquare+{1},x
     17  7b73					      cpy	enPassantPawn
     18  7b73					      bne	.invalid
     19  7b73					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     20  7b73				   .invalid
     21  7b73					      ENDM
     22  7b73
     23  7b73							;---------------------------------------------------------------------------------------------------
     24  7b73
     25  7b73					      MAC	promote_pawn
     26  7b73					      SUBROUTINE
     27  7b73							;{1} = BLACK or WHITE
     28  7b73
     29  7b73					      lda	currentPiece
     30  7b73					      pha
     31  7b73
     32  7b73					      lda	#{1}|QUEEN
     33  7b73					      sta	currentPiece
     34  7b73					      jsr	AddMove
     35  7b73
     36  7b73					      lda	#{1}|ROOK
     37  7b73					      sta	currentPiece
     38  7b73					      jsr	AddMove
     39  7b73
     40  7b73					      lda	#{1}|BISHOP
     41  7b73					      sta	currentPiece
     42  7b73					      jsr	AddMove
     43  7b73
     44  7b73					      lda	#{1}|KNIGHT
     45  7b73					      sta	currentPiece
     46  7b73					      jsr	AddMove
     47  7b73
     48  7b73					      pla
     49  7b73					      sta	currentPiece
     50  7b73					      ENDM
     51  7b73
     52  7b73							;---------------------------------------------------------------------------------------------------
     53  7b73
     54  7b73					      MAC	move_or_promote_pawn
     55  7b73					      SUBROUTINE
     56  7b73							; {1} = BLACK or WHITE
     57  7b73
     58  7b73					      IF	{1} = WHITE
     59  7b73					      cpy	#108	; last rank?
     60  7b73					      bcc	.standard
     61  7b73					      jsr	PromoteWhitePawn
     62  7b73					      jmp	.pMoved
     63  7b73					      ENDIF
     64  7b73
     65  7b73					      IF	{1} = BLACK
     66  7b73					      cpy	#36	; last rank?
     67  7b73					      bcs	.standard
     68  7b73					      jsr	PromoteBlackPawn
     69  7b73					      jmp	.pMoved
     70  7b73					      ENDIF
     71  7b73
     72  7b73				   .standard  jsr	AddMove	; add +1UP move
     73  7b73				   .pMoved
     74  7b73
     75  7b73					      ENDM
     76  7b73
     77  7b73							;---------------------------------------------------------------------------------------------------
     78  7b73
     79  7b73					      MAC	take
     80  7b73					      SUBROUTINE
     81  7b73							; {1} = capture square offset
     82  7b73
     83  7b73					      ldy	ValidSquare+{1},x
     84  7b73					      bmi	.invalid
     85  7b73					      lda	Board,y
     86  7b73					      beq	.invalid	; square empty
     87  7b73					      eor	currentPiece
     88  7b73					      bpl	.invalid	; same colour
     89  7b73
     90  7b73					      MOVE_OR_PROMOTE_PAWN	{2}
     91  7b73				   .invalid
     92  7b73					      ENDM
     93  7b73
     94  7b73							;---------------------------------------------------------------------------------------------------
     95  7b73
      0  7b73					      DEFINE_SUBROUTINE	PromoteWhitePawn
      1  7b73				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7b73					      SUBROUTINE
      3  7b73				   PromoteWhitePawn
      0  7b73					      PROMOTE_PAWN	WHITE
      1  7b73					      SUBROUTINE
      2  7b73
      3  7b73
      4  7b73		       a5 8a		      lda	currentPiece
      5  7b75		       48		      pha
      6  7b76
      7  7b76		       a9 06		      lda	#WHITE|QUEEN
      8  7b78		       85 8a		      sta	currentPiece
      9  7b7a		       20 e8 f0 	      jsr	AddMove
     10  7b7d
     11  7b7d		       a9 05		      lda	#WHITE|ROOK
     12  7b7f		       85 8a		      sta	currentPiece
     13  7b81		       20 e8 f0 	      jsr	AddMove
     14  7b84
     15  7b84		       a9 04		      lda	#WHITE|BISHOP
     16  7b86		       85 8a		      sta	currentPiece
     17  7b88		       20 e8 f0 	      jsr	AddMove
     18  7b8b
     19  7b8b		       a9 03		      lda	#WHITE|KNIGHT
     20  7b8d		       85 8a		      sta	currentPiece
     21  7b8f		       20 e8 f0 	      jsr	AddMove
     22  7b92
     23  7b92		       68		      pla
     24  7b93		       85 8a		      sta	currentPiece
     98  7b95		       60		      rts
     99  7b96
    100  7b96							;---------------------------------------------------------------------------------------------------
    101  7b96
      0  7b96					      DEFINE_SUBROUTINE	Handle_WHITE_PAWN
      1  7b96				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7b96					      SUBROUTINE
      3  7b96				   Handle_WHITE_PAWN
    103  7b96
    104  7b96		       bc 0a f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    105  7b99		       b9 64 f0 	      lda	Board,y
    106  7b9c		       d0 1c		      bne	.pMoved	; occupied
    107  7b9e
    108  7b9e							; we may need to promote the pawn
    109  7b9e							; All possibilites (Q/R/B/N) are added as individual moves
    110  7b9e
      0  7b9e					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b9e					      SUBROUTINE
      2  7b9e
      3  7b9e
      4  7b9e					      IF	WHITE = WHITE
      5  7b9e		       c0 6c		      cpy	#108
      6  7ba0		       90 06		      bcc	.standard
      7  7ba2		       20 73 fb 	      jsr	PromoteWhitePawn
      8  7ba5		       4c ab fb 	      jmp	.pMoved
      9  7ba8					      ENDIF
     10  7ba8
     11  7ba8				  -	      IF	WHITE = BLACK
     12  7ba8				  -	      cpy	#36
     13  7ba8				  -	      bcs	.standard
     14  7ba8				  -	      jsr	PromoteBlackPawn
     15  7ba8				  -	      jmp	.pMoved
     16  7ba8					      ENDIF
     17  7ba8
     18  7ba8		       20 e8 f0    .standard  jsr	AddMove
     19  7bab				   .pMoved
     20  7bab
    112  7bab
    113  7bab							; the +2 move off the home rank...
    114  7bab
    115  7bab		       e0 30		      cpx	#WHITE_HOME_ROW
    116  7bad		       b0 0b		      bcs	.pMoved	; pawn has moved so can't do +2
    117  7baf		       bc 14 f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    118  7bb2		       b9 64 f0 	      lda	Board,y
    119  7bb5		       d0 03		      bne	.pMoved	; destination square occupied
    120  7bb7
    121  7bb7		       20 e8 f0 	      jsr	AddMove	; add the +2UP move off home row
    122  7bba
    123  7bba				   .pMoved
    124  7bba
    125  7bba							; en-passant captures...
    126  7bba
    127  7bba		       a5 8d		      lda	enPassantPawn
    128  7bbc		       f0 14		      beq	.noEnPassant
    129  7bbe
      0  7bbe					      EN_PASSANT	_LEFT
      1  7bbe					      SUBROUTINE
      2  7bbe
      3  7bbe		       bc ff ef 	      ldy	ValidSquare+_LEFT,x
      4  7bc1		       c4 8d		      cpy	enPassantPawn
      5  7bc3		       d0 03		      bne	.invalid
      6  7bc5		       20 e8 f0 	      jsr	AddMove
      7  7bc8				   .invalid
      0  7bc8					      EN_PASSANT	_RIGHT
      1  7bc8					      SUBROUTINE
      2  7bc8
      3  7bc8		       bc 01 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7bcb		       c4 8d		      cpy	enPassantPawn
      5  7bcd		       d0 03		      bne	.invalid
      6  7bcf		       20 e8 f0 	      jsr	AddMove
      7  7bd2				   .invalid
    132  7bd2
    133  7bd2				   .noEnPassant
    134  7bd2
    135  7bd2							; regular captures...
    136  7bd2
      0  7bd2					      TAKE	_UP+_LEFT, WHITE
      1  7bd2					      SUBROUTINE
      2  7bd2
      3  7bd2
      4  7bd2		       bc 09 f0 	      ldy	ValidSquare+_UP+_LEFT,x
      5  7bd5		       30 16		      bmi	.invalid
      6  7bd7		       b9 64 f0 	      lda	Board,y
      7  7bda		       f0 11		      beq	.invalid
      8  7bdc		       45 8a		      eor	currentPiece
      9  7bde		       10 0d		      bpl	.invalid
     10  7be0
      0  7be0					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7be0					      SUBROUTINE
      2  7be0
      3  7be0
      4  7be0					      IF	WHITE = WHITE
      5  7be0		       c0 6c		      cpy	#108
      6  7be2		       90 06		      bcc	.standard
      7  7be4		       20 73 fb 	      jsr	PromoteWhitePawn
      8  7be7		       4c ed fb 	      jmp	.pMoved
      9  7bea					      ENDIF
     10  7bea
     11  7bea				  -	      IF	WHITE = BLACK
     12  7bea				  -	      cpy	#36
     13  7bea				  -	      bcs	.standard
     14  7bea				  -	      jsr	PromoteBlackPawn
     15  7bea				  -	      jmp	.pMoved
     16  7bea					      ENDIF
     17  7bea
     18  7bea		       20 e8 f0    .standard  jsr	AddMove
     19  7bed				   .pMoved
     20  7bed
     12  7bed				   .invalid
      0  7bed					      TAKE	_UP+_RIGHT, WHITE
      1  7bed					      SUBROUTINE
      2  7bed
      3  7bed
      4  7bed		       bc 0b f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      5  7bf0		       30 16		      bmi	.invalid
      6  7bf2		       b9 64 f0 	      lda	Board,y
      7  7bf5		       f0 11		      beq	.invalid
      8  7bf7		       45 8a		      eor	currentPiece
      9  7bf9		       10 0d		      bpl	.invalid
     10  7bfb
      0  7bfb					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7bfb					      SUBROUTINE
      2  7bfb
      3  7bfb
      4  7bfb					      IF	WHITE = WHITE
      5  7bfb		       c0 6c		      cpy	#108
      6  7bfd		       90 06		      bcc	.standard
      7  7bff		       20 73 fb 	      jsr	PromoteWhitePawn
      8  7c02		       4c 08 fc 	      jmp	.pMoved
      9  7c05					      ENDIF
     10  7c05
     11  7c05				  -	      IF	WHITE = BLACK
     12  7c05				  -	      cpy	#36
     13  7c05				  -	      bcs	.standard
     14  7c05				  -	      jsr	PromoteBlackPawn
     15  7c05				  -	      jmp	.pMoved
     16  7c05					      ENDIF
     17  7c05
     18  7c05		       20 e8 f0    .standard  jsr	AddMove
     19  7c08				   .pMoved
     20  7c08
     12  7c08				   .invalid
    139  7c08
    140  7c08		       60		      rts
    141  7c09
    142  7c09
    143  7c09							;---------------------------------------------------------------------------------------------------
    144  7c09							; BLACK PAWN
    145  7c09							;---------------------------------------------------------------------------------------------------
    146  7c09
      0  7c09					      DEFINE_SUBROUTINE	PromoteBlackPawn
      1  7c09				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7c09					      SUBROUTINE
      3  7c09				   PromoteBlackPawn
      0  7c09					      PROMOTE_PAWN	BLACK
      1  7c09					      SUBROUTINE
      2  7c09
      3  7c09
      4  7c09		       a5 8a		      lda	currentPiece
      5  7c0b		       48		      pha
      6  7c0c
      7  7c0c		       a9 86		      lda	#BLACK|QUEEN
      8  7c0e		       85 8a		      sta	currentPiece
      9  7c10		       20 e8 f0 	      jsr	AddMove
     10  7c13
     11  7c13		       a9 85		      lda	#BLACK|ROOK
     12  7c15		       85 8a		      sta	currentPiece
     13  7c17		       20 e8 f0 	      jsr	AddMove
     14  7c1a
     15  7c1a		       a9 84		      lda	#BLACK|BISHOP
     16  7c1c		       85 8a		      sta	currentPiece
     17  7c1e		       20 e8 f0 	      jsr	AddMove
     18  7c21
     19  7c21		       a9 83		      lda	#BLACK|KNIGHT
     20  7c23		       85 8a		      sta	currentPiece
     21  7c25		       20 e8 f0 	      jsr	AddMove
     22  7c28
     23  7c28		       68		      pla
     24  7c29		       85 8a		      sta	currentPiece
    149  7c2b		       60		      rts
    150  7c2c
      0  7c2c					      DEFINE_SUBROUTINE	Handle_BLACK_PAWN
      1  7c2c				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7c2c					      SUBROUTINE
      3  7c2c				   Handle_BLACK_PAWN
    152  7c2c					      SUBROUTINE
    153  7c2c
    154  7c2c		       bc f6 ef 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    155  7c2f		       b9 64 f0 	      lda	Board,y
    156  7c32		       d0 1c		      bne	.pMoved	; occupied
    157  7c34
    158  7c34							; we may need to promote the pawn
    159  7c34							; All possibilites (Q/R/B/N) are added as individual moves
    160  7c34
      0  7c34					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7c34					      SUBROUTINE
      2  7c34
      3  7c34
      4  7c34				  -	      IF	BLACK = WHITE
      5  7c34				  -	      cpy	#108
      6  7c34				  -	      bcc	.standard
      7  7c34				  -	      jsr	PromoteWhitePawn
      8  7c34				  -	      jmp	.pMoved
      9  7c34					      ENDIF
     10  7c34
     11  7c34					      IF	BLACK = BLACK
     12  7c34		       c0 24		      cpy	#36
     13  7c36		       b0 06		      bcs	.standard
     14  7c38		       20 09 fc 	      jsr	PromoteBlackPawn
     15  7c3b		       4c 41 fc 	      jmp	.pMoved
     16  7c3e					      ENDIF
     17  7c3e
     18  7c3e		       20 e8 f0    .standard  jsr	AddMove
     19  7c41				   .pMoved
     20  7c41
    162  7c41
    163  7c41							; the +2 move off the home rank...
    164  7c41
    165  7c41		       e0 60		      cpx	#BLACK_HOME_ROW
    166  7c43		       90 0b		      bcc	.pMoved	; pawn has moved so can't do +2
    167  7c45		       bc ec ef 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    168  7c48		       b9 64 f0 	      lda	Board,y
    169  7c4b		       d0 03		      bne	.pMoved	; destination square occupied
    170  7c4d
    171  7c4d		       20 e8 f0 	      jsr	AddMove	; add the +2DOWN move off home row
    172  7c50
    173  7c50				   .pMoved
    174  7c50
    175  7c50							; en-passant captures...
    176  7c50
    177  7c50		       a5 8d		      lda	enPassantPawn
    178  7c52		       f0 14		      beq	.noEnPassant
    179  7c54
      0  7c54					      EN_PASSANT	_LEFT
      1  7c54					      SUBROUTINE
      2  7c54
      3  7c54		       bc ff ef 	      ldy	ValidSquare+_LEFT,x
      4  7c57		       c4 8d		      cpy	enPassantPawn
      5  7c59		       d0 03		      bne	.invalid
      6  7c5b		       20 e8 f0 	      jsr	AddMove
      7  7c5e				   .invalid
      0  7c5e					      EN_PASSANT	_RIGHT
      1  7c5e					      SUBROUTINE
      2  7c5e
      3  7c5e		       bc 01 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7c61		       c4 8d		      cpy	enPassantPawn
      5  7c63		       d0 03		      bne	.invalid
      6  7c65		       20 e8 f0 	      jsr	AddMove
      7  7c68				   .invalid
    182  7c68
    183  7c68				   .noEnPassant
    184  7c68
    185  7c68							; regular captures...
    186  7c68
      0  7c68					      TAKE	_DOWN+_LEFT, BLACK
      1  7c68					      SUBROUTINE
      2  7c68
      3  7c68
      4  7c68		       bc f5 ef 	      ldy	ValidSquare+_DOWN+_LEFT,x
      5  7c6b		       30 16		      bmi	.invalid
      6  7c6d		       b9 64 f0 	      lda	Board,y
      7  7c70		       f0 11		      beq	.invalid
      8  7c72		       45 8a		      eor	currentPiece
      9  7c74		       10 0d		      bpl	.invalid
     10  7c76
      0  7c76					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7c76					      SUBROUTINE
      2  7c76
      3  7c76
      4  7c76				  -	      IF	BLACK = WHITE
      5  7c76				  -	      cpy	#108
      6  7c76				  -	      bcc	.standard
      7  7c76				  -	      jsr	PromoteWhitePawn
      8  7c76				  -	      jmp	.pMoved
      9  7c76					      ENDIF
     10  7c76
     11  7c76					      IF	BLACK = BLACK
     12  7c76		       c0 24		      cpy	#36
     13  7c78		       b0 06		      bcs	.standard
     14  7c7a		       20 09 fc 	      jsr	PromoteBlackPawn
     15  7c7d		       4c 83 fc 	      jmp	.pMoved
     16  7c80					      ENDIF
     17  7c80
     18  7c80		       20 e8 f0    .standard  jsr	AddMove
     19  7c83				   .pMoved
     20  7c83
     12  7c83				   .invalid
      0  7c83					      TAKE	_DOWN+_RIGHT, BLACK
      1  7c83					      SUBROUTINE
      2  7c83
      3  7c83
      4  7c83		       bc f7 ef 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      5  7c86		       30 16		      bmi	.invalid
      6  7c88		       b9 64 f0 	      lda	Board,y
      7  7c8b		       f0 11		      beq	.invalid
      8  7c8d		       45 8a		      eor	currentPiece
      9  7c8f		       10 0d		      bpl	.invalid
     10  7c91
      0  7c91					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7c91					      SUBROUTINE
      2  7c91
      3  7c91
      4  7c91				  -	      IF	BLACK = WHITE
      5  7c91				  -	      cpy	#108
      6  7c91				  -	      bcc	.standard
      7  7c91				  -	      jsr	PromoteWhitePawn
      8  7c91				  -	      jmp	.pMoved
      9  7c91					      ENDIF
     10  7c91
     11  7c91					      IF	BLACK = BLACK
     12  7c91		       c0 24		      cpy	#36
     13  7c93		       b0 06		      bcs	.standard
     14  7c95		       20 09 fc 	      jsr	PromoteBlackPawn
     15  7c98		       4c 9e fc 	      jmp	.pMoved
     16  7c9b					      ENDIF
     17  7c9b
     18  7c9b		       20 e8 f0    .standard  jsr	AddMove
     19  7c9e				   .pMoved
     20  7c9e
     12  7c9e				   .invalid
    189  7c9e
    190  7c9e		       60		      rts
    191  7c9f
    192  7c9f							; EOF
------- FILE BANK_FIXED.asm
    733  7c9f
    734  7c9f
    735  7c9f							;---------------------------------------------------------------------------------------------------
    736  7c9f
 FREE BYTES IN FIXED BANK =  $35d
    737  7c9f					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
    738  7c9f
    739  7c9f							;---------------------------------------------------------------------------------------------------
    740  7c9f							; The reset vectors
    741  7c9f							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
    742  7c9f
    743  8000 ????				      SEG	InterruptVectors
    744  7ffc					      ORG	FIXED_BANK + $7FC
    745  7ffc					      RORG	$7ffC
    746  7ffc
    747  7ffc							;		 .word Reset	       ; NMI	    (not used)
    748  7ffc		       f4 f8		      .word.w	Reset	; RESET
    749  7ffe		       f4 f8		      .word.w	Reset	; IRQ	      (not used)
    750  8000
    751  8000							;---------------------------------------------------------------------------------------------------
    752  8000							; EOF
------- FILE ./chess.asm
    382  8000
    383  8000							;END
