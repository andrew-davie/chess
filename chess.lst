------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????	       00 00	   VERBOSE    =	0	; set to 1 for compile messages
     15  0000 ????
     16  0000 ????			   ORIGIN     SET	0
     17  0000 ????			   ORIGIN_RAM SET	0
     18  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     20  0000 ????
     21  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     22  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     23  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     24  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     25  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     26  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     27  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     28  0000 ????
     29  0000 ????	       00 01	   YES	      =	1
     30  0000 ????	       00 00	   NO	      =	0
     31  0000 ????
     32  0000 ????						; assemble diagnostics. Remove for release.
     33  0000 ????	       00 00	   ASSERTS    =	0
     34  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     35  0000 ????	       00 00	   PVSP       =	0	; player versus player =1
     36  0000 ????
     37  0000 ????	       00 00	   WHITE_PLAYER =	0	; human
     38  0000 ????	       00 00	   BLACK_PLAYER =	0	; human
     39  0000 ????
     40  0000 ????						; DELAYS
     41  0000 ????
     42  0000 ????	       00 0a	   READY_TO_MOVE_FLASH =	10
     43  0000 ????
     44  0000 ????						;===================================
     45  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     46  0000 ????						;===================================
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; The following are optional YES/NO depending on phase of the moon
     50  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     51  0000 ????						;-------------------------------------------------------------------------------
     52  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     53  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     54  0000 ????			  -	      IF	FINAL_VERSION = YES
     55  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     56  0000 ????				      ENDIF
     57  0000 ????
     58  0000 ????						;-------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     61  0000 ????
     62  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     63  0000 ????
     64  0000 ????						;------------------------------------------------------------------------------
     65  0000 ????
     66  0000 ????	       00 01	   PLUSCART   =	YES
     67  0000 ????
     68  0000 ????						;------------------------------------------------------------------------------
     69  0000 ????
     70  0000 ????
     71  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     72  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     73  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     74  0000 ????
     75  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     76  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     77  0000 ????
     78  0000 ????
     79  0000 ????	       10 00	   RAM_3E     =	$1000
     80  0000 ????	       04 00	   RAM_SIZE   =	$400
     81  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     82  0000 ????
     83  0000 ????
     84  0000 ????
     85  0000 ????
     86  0000 ????						; Platform constants:
     87  0000 ????	       00 02	   PAL	      =	%10
     88  0000 ????	       00 02	   PAL_50     =	PAL|0
     89  0000 ????	       00 03	   PAL_60     =	PAL|1
     90  0000 ????
     91  0000 ????
     92  0000 ????				      IF	L276
     93  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     94  0000 ????			  -	      ELSE
     95  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     96  0000 ????				      ENDIF
     97  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     98  0000 ????
     99  0000 ????				      IF	L276
    100  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
    101  0000 ????			  -	      ELSE
    102  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
    103  0000 ????				      ENDIF
    104  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
    105  0000 ????
    106  0000 ????				      IF	L276
    107  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
    108  0000 ????			  -	      ELSE
    109  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
    110  0000 ????				      ENDIF
    111  0000 ????	       01 38	   SCANLINES_PAL =	312
    112  0000 ????
    113  0000 ????
    114  0000 ????	       00 2e	   TIME_PART_2 =	46
    115  0000 ????	       00 2f	   TIME_PART_1 =	47
    116  0000 ????
    117  0000 ????
    118  0000 ????						;------------------------------------------------------------------------------
    119  0000 ????						; MACRO definitions
    120  0000 ????
    121  0000 ????
    122  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    123  0000 ????
    124  0000 ????				      MAC	newbank
    125  0000 ????				      SEG	{1}
    126  0000 ????				      ORG	ORIGIN
    127  0000 ????				      RORG	$F000
    128  0000 ????			   BANK_START SET	*
    129  0000 ????			   {1}	      SET	ORIGIN / 2048
    130  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    131  0000 ????			   _CURRENT_BANK SET	{1}
    132  0000 ????				      ENDM		; bank name
    133  0000 ????
    134  0000 ????				      MAC	define_1k_segment
    135  0000 ????				      ALIGN	$400
    136  0000 ????			   SEGMENT_{1} SET	*
    137  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    138  0000 ????				      ENDM		; {seg name}
    139  0000 ????
    140  0000 ????				      MAC	check_bank_size
    141  0000 ????			   .TEMP      =	* - BANK_START
    142  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    143  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    144  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    145  0000 ????				      ERR
    146  0000 ????				      endif
    147  0000 ????				      ENDM		; name
    148  0000 ????
    149  0000 ????
    150  0000 ????				      MAC	check_half_bank_size
    151  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    152  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    153  0000 ????			   .TEMP      =	* - BANK_START
    154  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    155  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    156  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    157  0000 ????				      ERR
    158  0000 ????				      endif
    159  0000 ????				      ENDM		; name
    160  0000 ????
    161  0000 ????
    162  0000 ????						;---------------------------------------------------------------------------------------------------
    163  0000 ????
    164  0000 ????						; Macro inserts a page break if the object would overlap a page
    165  0000 ????
    166  0000 ????				      MAC	optional_pagebreak
    167  0000 ????				      LIST	OFF
    168  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    169  0000 ????			   EARLY_LOCATION SET	*
    170  0000 ????				      ALIGN	256
    171  0000 ????				      IF	VERBOSE=1
    172  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR", {1}
    173  0000 ????				      ECHO	"REQUESTED SIZE =", {2}
    174  0000 ????				      ECHO	"WASTED SPACE =", *-EARLY_LOCATION
    175  0000 ????				      ECHO	"PAGEBREAK LOCATION =", *
    176  0000 ????				      ENDIF
    177  0000 ????				      ENDIF
    178  0000 ????				      LIST	ON
    179  0000 ????				      ENDM		; { string, size }
    180  0000 ????
    181  0000 ????
    182  0000 ????				      MAC	check_page_crossing
    183  0000 ????				      LIST	OFF
    184  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    185  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    186  0000 ????				      endif
    187  0000 ????				      LIST	ON
    188  0000 ????				      ENDM
    189  0000 ????
    190  0000 ????				      MAC	checkpage
    191  0000 ????				      LIST	OFF
    192  0000 ????				      IF	>. != >{1}
    193  0000 ????				      ECHO	""
    194  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    195  0000 ????				      ECHO	""
    196  0000 ????				      ERR
    197  0000 ????				      ENDIF
    198  0000 ????				      LIST	ON
    199  0000 ????				      ENDM
    200  0000 ????
    201  0000 ????				      MAC	checkpagex
    202  0000 ????				      LIST	OFF
    203  0000 ????				      IF	>. != >{1}
    204  0000 ????				      ECHO	""
    205  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    206  0000 ????				      ECHO	{2}
    207  0000 ????				      ECHO	""
    208  0000 ????				      ERR
    209  0000 ????				      ENDIF
    210  0000 ????				      LIST	ON
    211  0000 ????				      ENDM
    212  0000 ????
    213  0000 ????						;---------------------------------------------------------------------------------------------------
    214  0000 ????
    215  0000 ????						; Defines a variable of the given size, making sure it doesn't cross a page
    216  0000 ????				      MAC	variable
    217  0000 ????				      OPTIONAL_PAGEBREAK	"Variable", {2}
    218  0000 ????			   {1}	      ds	{2}
    219  0000 ????				      ENDM		; {name, size}
    220  0000 ????
    221  0000 ????
    222  0000 ????						;---------------------------------------------------------------------------------------------------
    223  0000 ????
    224  0000 ????				      MAC	def
    225  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    226  0000 ????			   {1}			; entry point
    227  0000 ????			   TEMPORARY_VAR SET	Overlay
    228  0000 ????			   TEMPORARY_OFFSET SET	0
    229  0000 ????				      SUBROUTINE
    230  0000 ????				      ENDM		; name of subroutine
    231  0000 ????
    232  0000 ????
    233  0000 ????						;---------------------------------------------------------------------------------------------------
    234  0000 ????
    235  0000 ????				      MAC	allocate
    236  0000 ????				      OPTIONAL_PAGEBREAK	"Table", {2}
    237  0000 ????				      DEF	{1}
    238  0000 ????				      ENDM
    239  0000 ????
    240  0000 ????
    241  0000 ????						;---------------------------------------------------------------------------------------------------
    242  0000 ????
    243  0000 ????				      MAC	negeval
    244  0000 ????
    245  0000 ????				      clc
    246  0000 ????				      lda	Evaluation
    247  0000 ????				      eor	#$FF
    248  0000 ????				      adc	#1
    249  0000 ????				      sta	Evaluation
    250  0000 ????				      lda	Evaluation+1
    251  0000 ????				      eor	#$FF
    252  0000 ????				      adc	#0
    253  0000 ????				      sta	Evaluation+1
    254  0000 ????
    255  0000 ????				      ENDM
    256  0000 ????
    257  0000 ????
    258  0000 ????						;---------------------------------------------------------------------------------------------------
    259  0000 ????
    260  0000 ????			   TEMPORARY_OFFSET SET	0
    261  0000 ????
    262  0000 ????				      MAC	varbase
    263  0000 ????			   TEMPORARY_OFFSET SET	{1}
    264  0000 ????				      ENDM		; {offset}
    265  0000 ????
    266  0000 ????	       00 00	   VAR_LEVEL0 =	0
    267  0000 ????	       00 10	   VAR_LEVEL1 =	16
    268  0000 ????	       00 20	   VAR_LEVEL2 =	32
    269  0000 ????
    270  0000 ????
    271  0000 ????						; Define a temporary variable for use in a subroutine
    272  0000 ????						; Will allocate appropriate bytes, and also check for overflow of the available overlay buffer
    273  0000 ????
    274  0000 ????				      MAC	var
    275  0000 ????			   {1}	      =	TEMPORARY_VAR
    276  0000 ????			   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + {2}
    277  0000 ????
    278  0000 ????			   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
    279  0000 ????				      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
    280  0000 ????			   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
    281  0000 ????				      ENDIF
    282  0000 ????				      IF	OVERLAY_DELTA > OVERLAY_SIZE
    283  0000 ????				      ECHO	"Temporary Variable", {1}, "overflow!"
    284  0000 ????				      ERR
    285  0000 ????				      ENDIF
    286  0000 ????				      LIST	ON
    287  0000 ????				      ENDM		; { name, size }
    288  0000 ????
    289  0000 ????
    290  0000 ????
    291  0000 ????
    292  0000 ????						;---------------------------------------------------------------------------------------------------
    293  0000 ????
    294  0000 ????				      MAC	tag
    295  0000 ????						; {0}
    296  0000 ????				      ENDM		; {ident/tag}
    297  0000 ????
    298  0000 ????
    299  0000 ????						;---------------------------------------------------------------------------------------------------
    300  0000 ????
    301  0000 ????				      MAC	newrambank
    302  0000 ????						; {1}	     bank name
    303  0000 ????						; {2}	     RAM bank number
    304  0000 ????
    305  0000 ????				      SEG.U	{1}
    306  0000 ????				      ORG	ORIGIN_RAM
    307  0000 ????				      RORG	RAM_3E
    308  0000 ????			   BANK_START SET	*
    309  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    310  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    311  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    312  0000 ????				      ENDM		; bank name
    313  0000 ????
    314  0000 ????						; TODO - fix - this is faulty....
    315  0000 ????				      MAC	validate_ram_size
    316  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    317  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    318  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    319  0000 ????				      ERR
    320  0000 ????				      ENDIF
    321  0000 ????				      ENDM
    322  0000 ????
    323  0000 ????						;---------------------------------------------------------------------------------------------------
    324  0000 ????
    325  0000 ????				      MAC	resync
    326  0000 ????						; resync screen, X and Y == 0 afterwards
    327  0000 ????				      lda	#%10	; make sure VBLANK is ON
    328  0000 ????				      sta	VBLANK
    329  0000 ????
    330  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    331  0000 ????			   .loopResync
    332  0000 ????				      VERTICAL_SYNC
    333  0000 ????
    334  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    335  0000 ????				      lda	Platform
    336  0000 ????				      eor	#PAL_50	; PAL-50?
    337  0000 ????				      bne	.ntsc
    338  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    339  0000 ????			   .ntsc
    340  0000 ????			   .loopWait
    341  0000 ????				      sta	WSYNC
    342  0000 ????				      sta	WSYNC
    343  0000 ????				      dey
    344  0000 ????				      bne	.loopWait
    345  0000 ????				      dex
    346  0000 ????				      bne	.loopResync
    347  0000 ????				      ENDM
    348  0000 ????
    349  0000 ????				      MAC	set_platform
    350  0000 ????						; 00 = NTSC
    351  0000 ????						; 01 = NTSC
    352  0000 ????						; 10 = PAL-50
    353  0000 ????						; 11 = PAL-60
    354  0000 ????				      lda	SWCHB
    355  0000 ????				      rol
    356  0000 ????				      rol
    357  0000 ????				      rol
    358  0000 ????				      and	#%11
    359  0000 ????				      eor	#PAL
    360  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    361  0000 ????				      ENDM
    362  0000 ????
    363  0000 ????
    364  0000 ????						;---------------------------------------------------------------------------------------------------
    365  0000 ????
    366  0000 ????				      MAC	jsrom_safe
    367  0000 ????						; Saves bank of routine to variable for later restore.
    368  0000 ????						; Switches to the bank and does a JSR to the routine.
    369  0000 ????
    370  0000 ????				      lda	#BANK_{1}
    371  0000 ????				      sta	savedBank
    372  0000 ????				      sta	SET_BANK
    373  0000 ????				      jsr	{1}
    374  0000 ????				      ENDM		; {routine}
    375  0000 ????
    376  0000 ????
    377  0000 ????				      MAC	jsrom
    378  0000 ????
    379  0000 ????				      lda	#BANK_{1}
    380  0000 ????				      sta	SET_BANK
    381  0000 ????				      jsr	{1}
    382  0000 ????				      ENDM		; {routine}
    383  0000 ????
    384  0000 ????
    385  0000 ????				      MAC	jsram
    386  0000 ????				      lda	#BANK_{1}
    387  0000 ????				      sta	SET_BANK_RAM
    388  0000 ????				      jsr	{1}
    389  0000 ????				      ENDM
    390  0000 ????
    391  0000 ????
    392  0000 ????
    393  0000 ????				      MAC	timecheck
    394  0000 ????				      lda	INTIM
    395  0000 ????				      cmp	#SPEEDOF_{1}
    396  0000 ????				      bcc	{2}
    397  0000 ????				      ENDM		; {ident}, {branch if out of time}
    398  0000 ????
    399  0000 ????
    400  0000 ????				      MAC	timing
    401  0000 ????			   SPEEDOF_{1} =	({2}/64) + 1
    402  0000 ????				      ENDM		; {label}, {cycles}
    403  0000 ????
    404  0000 ????
    405  0000 ????						;---------------------------------------------------------------------------------------------------
    406  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00f8 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080
      9 U0080		       00	   squareToDraw ds	1
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawDelay  ds	1
     12 U0083		       00	   lastSquareX12 ds	1
     13 U0084
     14 U0084		       00	   drawCount  ds	1
     15 U0085		       00	   fromX12    ds	1
     16 U0086		       00	   toX12      ds	1
     17 U0087		       00	   originX12  ds	1
     18 U0088
     19 U0088		       00	   cursorX12  ds	1
     20 U0089
     21 U0089		       00	   mdelay     ds	1
     22 U008a		       00	   ccur       ds	1
     23 U008b		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     24 U008c		       00	   aiState    ds	1	; state
     25 U008d		       00	   aiFlashDelay ds	1
     26 U008e
     27 U008e		       00	   aiMoveIndex ds	1
     28 U008f
     29 U008f		       00	   aiFlashPhase ds	1
     30 U0090
     31 U0090		       00 00	   Evaluation ds	2	; tracks value of the board position
     32 U0092
     33 U0092		       00	   currentPiece ds	1
     34 U0093		       00	   currentSquare ds	1
     35 U0094		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     36 U0095		       00	   currentPly ds	1
     37 U0096
     38 U0096		       00	   piecelistIndex ds	1
     39 U0097		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     40 U0098		       00	   fromPiece  ds	1
     41 U0099		       00	   lastPiece  ds	1
     42 U009a		       00	   previousPiece ds	1
     43 U009b
     44 U009b		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     45 U009c		       00 00	   speech_addr ds	2
     46 U009e		       00 00	   temp       ds	2
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a0					      include	"overlays.asm"
      1 U00a0							; Chess
      2 U00a0							; Atari 2600 Chess display system
      3 U00a0							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a0							; andrew@taswegian.com
      5 U00a0
      6 U00a0							;---------------------------------------------------------------------------------------------------
      7 U00a0							; OVERLAYS!
      8 U00a0							; These variables are overlays, and should be managed with care
      9 U00a0							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a0							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a0							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a0							; overlay #2
     13 U00a0
     14 U00a0							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a0
     16 U00a0							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a0							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a0							;---------------------------------------------------------------------------------------------------
     19 U00a0
     20 U00a0					      MAC	overlay
     21 U00a0				   OVERLAY_NAME SET	{1}
     22 U00a0					      SEG.U	OVERLAY_{1}
     23 U00a0					      org	Overlay
     24 U00a0					      ENDM		; {name}
     25 U00a0
     26 U00a0							;---------------------------------------------------------------------------------------------------
     27 U00a0
     28 U00a0					      MAC	validate_overlay
     29 U00a0					      LIST	OFF
     30 U00a0				   OVERLAY_DELTA SET	* - Overlay
     31 U00a0					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a0				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a0					      ENDIF
     34 U00a0					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a0					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a0					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a0					      ERR
     38 U00a0					      ENDIF
     39 U00a0					      LIST	ON
     40 U00a0					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a0					      ENDM
     42 U00a0
     43 U00a0							;---------------------------------------------------------------------------------------------------
     44 U00a0
     45 U00a0				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a0				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a0
     48 U00a0
     49 U00a0							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a0							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a0							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a0							; (especially the latter ones) are only used in rare occasions.
     53 U00a0
     54 U00a0							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a0							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a0
      0 U00a0					      DEF	Overlay
      1 U00a0				   BANK_Overlay SET	_CURRENT_BANK
      2 U00a0				   Overlay
      3 U00a0				   TEMPORARY_VAR SET	Overlay
      4 U00a0				   TEMPORARY_OFFSET SET	0
      5 U00a0					      SUBROUTINE
     58 U00a0		       00 00 00 00*	      ds	OVERLAY_SIZE	;--> overlay (share) variables
     59 U00ec				   END_OF_OVERLAY
     60 U00ec
     61 U00ec							;---------------------------------------------------------------------------------------------------
     62 U00ec							; And now... the overlays....
     63 U00ec
 ---- OVERLAYS ( $4c bytes ) ----
     64 U00ec					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     65 U00ec
     66 U00ec							;---------------------------------------------------------------------------------------------------
     67 U00ec
     68 U00ec							; Some overlays are used across multiple routines/calls, and they will need to be defined
     69 U00ec							; "globally" in this file.
     70 U00ec
      0 U00ec					      VAR	__pieceShapeBuffer, PIECE_SHAPE_SIZE
      1 U00ec		       00 a0	   __pieceShapeBuffer =	TEMPORARY_VAR
      2 U00ec				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + PIECE_SHAPE_SIZE
      3 U00ec
      4 U00ec				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00ec					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00ec				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00ec					      ENDIF
      8 U00ec				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00ec				  -	      ECHO	"Temporary Variable", __pieceShapeBuffer, "overflow!"
     10 U00ec				  -	      ERR
     11 U00ec					      ENDIF
     12 U00ec					      LIST	ON
      0 U00ec					      VAR	__ptr, 2
      1 U00ec		       00 e8	   __ptr      =	TEMPORARY_VAR
      2 U00ec				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3 U00ec
      4 U00ec				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00ec					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00ec				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00ec					      ENDIF
      8 U00ec				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00ec				  -	      ECHO	"Temporary Variable", __ptr, "overflow!"
     10 U00ec				  -	      ERR
     11 U00ec					      ENDIF
     12 U00ec					      LIST	ON
      0 U00ec					      VAR	__ptr2, 2
      1 U00ec		       00 ea	   __ptr2     =	TEMPORARY_VAR
      2 U00ec				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3 U00ec
      4 U00ec				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5 U00ec					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6 U00ec				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7 U00ec					      ENDIF
      8 U00ec				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9 U00ec				  -	      ECHO	"Temporary Variable", __ptr2, "overflow!"
     10 U00ec				  -	      ERR
     11 U00ec					      ENDIF
     12 U00ec					      LIST	ON
     74 U00ec
     75 U00ec							;---------------------------------------------------------------------------------------------------
     76 U00ec
     77 U00ec
     78 U00ec					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
     79 U00ec					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
     80 U00ec					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
     81 U00ec
     82 U00ec							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00ec					      include	"stack.asm"
      1 U00ec							; Chess
      2 U00ec							; Atari 2600 Chess display system
      3 U00ec							; Copyright (c) 2019-2020 Andrew Davie
      4 U00ec							; andrew@taswegian.com
      5 U00ec
      6 U00ec
      7 U00ec		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00ec
      9 U00ec		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00f8
     11 U00f8							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00f8							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00f8							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    410 U00f8
 FREE BYTES IN ZERO PAGE =  $7
    411 U00f8					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    412 U00f8				  -	      IF	* > $FF
    413 U00f8				  -	      ERR	"Zero Page overflow!"
    414 U00f8					      ENDIF
    415 U00f8
    416 U00f8							;------------------------------------------------------------------------------
    417 U00f8							;##############################################################################
    418 U00f8							;------------------------------------------------------------------------------
    419 U00f8
    420 U00f8							; NOW THE VERY INTERESTING '3E' RAM BANKS
    421 U00f8							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    422 U00f8							; IN A 2K MEMORY SPACE
    423 U00f8
      0 U00f8					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00f8
      2 U00f8
      3 U00f8
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    425 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    425 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    425 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    425 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    425 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    425 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    425 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    428 U1c00					      REPEND
    429 U1c00
    430 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    431 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    432 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    433 U1c00
    434 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    435 U1c00							; is that we can use that code to switch between banks, and the system will happily
    436 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    437 U1c00
    438 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    439 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    440 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    441 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    442 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    443 U1c00
    444 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    445 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    446 U1c00
    447 U1c00							;------------------------------------------------------------------------------
    448 U1c00
    449 U1c00
    450 U1c00							;---------------------------------------------------------------------------------------------------
    451 U1c00
    452 U1c00
    453 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    454 U1c00
    455 U1c00					      MAC	next_random
    456 U1c00					      lda	rnd
    457 U1c00					      lsr
    458 U1c00					      bcc	.skipEOR
    459 U1c00					      eor	#RND_EOR_VAL
    460 U1c00				   .skipEOR   sta	rnd
    461 U1c00					      ENDM
    462 U1c00
    463 U1c00							;--------------------------------------------------------------------------------
    464 U1c00
    465 U1c00					      MAC	phase
    466 U1c00					      lda	#{1}
    467 U1c00					      sta	aiState
    468 U1c00					      ENDM		;#
    469 U1c00
    470 U1c00							;--------------------------------------------------------------------------------
    471 U1c00
    472 U1c00							;ORIGIN      SET 0
    473 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00
     12 U1c00							; = 76 for single square (empty/take)
     13 U1c00
     14 U1c00					      ldx	currentSquare	; 3
     15 U1c00					      bne	.project	; 3   unconditional
     16 U1c00
     17 U1c00				   .empty     jsr	AddMove	; 57
     18 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     19 U1c00					      bmi	.invalid	; 2/3 off board!
     20 U1c00					      lda	Board,y	; 4   piece @ destination
     21 U1c00					      beq	.empty	; 2/3
     22 U1c00					      eor	currentPiece	; 3
     23 U1c00					      bpl	.invalid	; 2/3 same colour
     24 U1c00					      jsr	AddMove	; 57  and exit
     25 U1c00
     26 U1c00				   .invalid
     27 U1c00					      ENDM
     28 U1c00
     29 U1c00
     30 U1c00							;---------------------------------------------------------------------------------------------------
     31 U1c00
     32 U1c00					      MAC	move_to
     33 U1c00					      SUBROUTINE
     34 U1c00					      ldy	ValidSquare+{1},x
     35 U1c00					      bmi	.invalid	; off board!
     36 U1c00					      lda	Board,y	; piece @ destination
     37 U1c00					      beq	.squareEmpty
     38 U1c00					      eor	currentPiece
     39 U1c00					      bpl	.invalid	; same colour
     40 U1c00				   .squareEmpty jsr	AddMove
     41 U1c00				   .invalid
     42 U1c00					      ENDM
     43 U1c00
     44 U1c00
     45 U1c00							;---------------------------------------------------------------------------------------------------
     46 U1c00
     47 U1c00					      MAC	move_to_x
     48 U1c00					      ldx	currentSquare
     49 U1c00					      MOVE_TO	{1}
     50 U1c00					      ENDM
     51 U1c00
     52 U1c00
     53 U1c00							;---------------------------------------------------------------------------------------------------
     54 U1c00							; EOF
------- FILE ./chess.asm
    475 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  07d8 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
     15  0004
     16  0004							;---------------------------------------------------------------------------------------------------
     17  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     18  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     19  0004							; bank finishes.  Just continue on from where it left off...
     20  0004							;---------------------------------------------------------------------------------------------------
     21  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004				   Cart_Init
      3  0004				   TEMPORARY_VAR SET	Overlay
      4  0004				   TEMPORARY_OFFSET SET	0
      5  0004					      SUBROUTINE
     23  0004					      SUBROUTINE
     24  0004
     25  0004		       a9 00		      lda	#0
     26  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     27  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     28  000c		       85 6b		      sta	HMCLR
     29  000e
     30  000e							; cleanup remains of title screen
     31  000e		       85 5b		      sta	GRP0
     32  0010		       85 5c		      sta	GRP1
     33  0012
     34  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     35  0014		       85 44		      sta	NUSIZ0
     36  0016		       85 45		      sta	NUSIZ1
     37  0018
     38  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     39  001a		       85 4a		      sta	CTRLPF
     40  001c
     41  001c		       60		      rts
     42  001d
     43  001d
     44  001d							;---------------------------------------------------------------------------------------------------
     45  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d				   Resync
      3  001d				   TEMPORARY_VAR SET	Overlay
      4  001d				   TEMPORARY_OFFSET SET	0
      5  001d					      SUBROUTINE
     47  001d					      SUBROUTINE
     48  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 9b		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     50  0040		       60		      rts
     51  0041
     52  0041
     53  0041							;---------------------------------------------------------------------------------------------------
     54  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041				   aiStartClearBoard
      3  0041				   TEMPORARY_VAR SET	Overlay
      4  0041				   TEMPORARY_OFFSET SET	0
      5  0041					      SUBROUTINE
     56  0041					      SUBROUTINE
     57  0041
     58  0041		       a2 08		      ldx	#8
     59  0043		       86 84		      stx	drawCount	; = bank
     60  0045
     61  0045		       a9 ff		      lda	#-1
     62  0047		       85 88		      sta	cursorX12
     63  0049
      0  0049					      PHASE	AI_ClearEachRow
      1  0049		       a9 0e		      lda	#AI_ClearEachRow
      2  004b		       85 8c		      sta	aiState
     65  004d		       60		      rts
     66  004e
     67  004e							;---------------------------------------------------------------------------------------------------
     68  004e
      0  004e					      DEF	aiClearEachRow
      1  004e				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  004e				   aiClearEachRow
      3  004e				   TEMPORARY_VAR SET	Overlay
      4  004e				   TEMPORARY_OFFSET SET	0
      5  004e					      SUBROUTINE
     70  004e					      SUBROUTINE
     71  004e
     72  004e		       c6 84		      dec	drawCount
     73  0050		       30 05		      bmi	.bitmapCleared
     74  0052		       a4 84		      ldy	drawCount
     75  0054		       4c b5 f8 	      jmp	CallClear
     76  0057
     77  0057				   .bitmapCleared
     78  0057
     79  0057		       a9 63		      lda	#99
     80  0059		       85 80		      sta	squareToDraw
     81  005b
      0  005b					      PHASE	AI_DrawEntireBoard
      1  005b		       a9 0f		      lda	#AI_DrawEntireBoard
      2  005d		       85 8c		      sta	aiState
     83  005f		       60		      rts
     84  0060
     85  0060
     86  0060
     87  0060							;---------------------------------------------------------------------------------------------------
     88  0060
      0  0060					      DEF	aiMoveIsSelected
      1  0060				   BANK_aiMoveIsSelected SET	_CURRENT_BANK
      2  0060				   aiMoveIsSelected
      3  0060				   TEMPORARY_VAR SET	Overlay
      4  0060				   TEMPORARY_OFFSET SET	0
      5  0060					      SUBROUTINE
     90  0060					      SUBROUTINE
      0  0060					      TAG	MOVE_SELECTED (AI)
      1  0060
     92  0060
     93  0060
     94  0060							; Both computer and human have now seleted a move, and converge here
     95  0060
     96  0060
     97  0060							; fromPiece	 piece doing the move
     98  0060							; fromSquare	 starting square BASE64
     99  0060							; toSquare	 ending square BASE64
    100  0060							; fromX12	 current square X12
    101  0060							; originX12	 starting square X12
    102  0060							; toX12	 ending square X12
    103  0060
    104  0060
    105  0060		       20 4c f9 	      jsr	AdjustMaterialPositionalValue
    106  0063
    107  0063
    108  0063		       a9 00		      lda	#BLANK
    109  0065		       85 9a		      sta	previousPiece
    110  0067
    111  0067
    112  0067							;lda toSquare
    113  0067							;cmp fromSquare
    114  0067							;beq .idleErase
    115  0067
    116  0067		       a9 06		      lda	#6	; on/off count
    117  0069		       85 84		      sta	drawCount	; flashing for piece about to move
    118  006b		       a9 00		      lda	#0
    119  006d		       85 82		      sta	drawDelay
    120  006f
      0  006f					      PHASE	AI_WriteStartPieceBlank
      1  006f		       a9 16		      lda	#AI_WriteStartPieceBlank
      2  0071		       85 8c		      sta	aiState
    122  0073		       60	   .idleErase rts
    123  0074
    124  0074
    125  0074							;---------------------------------------------------------------------------------------------------
    126  0074
      0  0074					      DEF	aiWriteStartPieceBlank
      1  0074				   BANK_aiWriteStartPieceBlank SET	_CURRENT_BANK
      2  0074				   aiWriteStartPieceBlank
      3  0074				   TEMPORARY_VAR SET	Overlay
      4  0074				   TEMPORARY_OFFSET SET	0
      5  0074					      SUBROUTINE
    128  0074					      SUBROUTINE
    129  0074
    130  0074							; Flash the piece in-place preparatory to moving it.
    131  0074							; drawDelay = flash speed
    132  0074							; drawCount = # of flashes
    133  0074
    134  0074		       a5 82		      lda	drawDelay
    135  0076		       f0 03		      beq	deCount
    136  0078		       c6 82		      dec	drawDelay
    137  007a		       60		      rts
    138  007b				   deCount
    139  007b
    140  007b		       a5 84		      lda	drawCount
    141  007d		       f0 0e		      beq	flashDone
    142  007f		       c6 84		      dec	drawCount
    143  0081
    144  0081		       a9 0a		      lda	#READY_TO_MOVE_FLASH
    145  0083		       85 82		      sta	drawDelay	; "getting ready to move" flash
    146  0085
    147  0085		       a5 85		      lda	fromX12
    148  0087		       85 80		      sta	squareToDraw
    149  0089
    150  0089		       20 4e fd 	      jsr	CopySinglePiece	; EOR-draw = flash
    151  008c		       60		      rts
    152  008d
      0  008d				   flashDone  PHASE	AI_MarchToTargetA
      1  008d		       a9 17		      lda	#AI_MarchToTargetA
      2  008f		       85 8c		      sta	aiState
    154  0091		       60		      rts
    155  0092
    156  0092
    157  0092							;---------------------------------------------------------------------------------------------------
    158  0092
      0  0092					      DEF	aiDrawPart2
      1  0092				   BANK_aiDrawPart2 SET	_CURRENT_BANK
      2  0092				   aiDrawPart2
      3  0092				   TEMPORARY_VAR SET	Overlay
      4  0092				   TEMPORARY_OFFSET SET	0
      5  0092					      SUBROUTINE
    160  0092					      SUBROUTINE
    161  0092
    162  0092		       20 4e fd 	      jsr	CopySinglePiece
    163  0095
      0  0095					      DEF	aiDrawPart3
      1  0095				   BANK_aiDrawPart3 SET	_CURRENT_BANK
      2  0095				   aiDrawPart3
      3  0095				   TEMPORARY_VAR SET	Overlay
      4  0095				   TEMPORARY_OFFSET SET	0
      5  0095					      SUBROUTINE
    165  0095					      SUBROUTINE
    166  0095
    167  0095		       c6 80		      dec	squareToDraw
    168  0097		       a5 80		      lda	squareToDraw
    169  0099		       c9 16		      cmp	#22
    170  009b		       90 05		      bcc	.comp
    171  009d
      0  009d					      PHASE	AI_DrawEntireBoard
      1  009d		       a9 0f		      lda	#AI_DrawEntireBoard
      2  009f		       85 8c		      sta	aiState
    173  00a1		       60		      rts
    174  00a2
      0  00a2				   .comp      PHASE	AI_FlipBuffers
      1  00a2		       a9 12		      lda	#AI_FlipBuffers
      2  00a4		       85 8c		      sta	aiState
    176  00a6		       60		      rts
    177  00a7
    178  00a7
    179  00a7
    180  00a7							;---------------------------------------------------------------------------------------------------
    181  00a7
      0  00a7					      DEF	aiMarchB
      1  00a7				   BANK_aiMarchB SET	_CURRENT_BANK
      2  00a7				   aiMarchB
      3  00a7				   TEMPORARY_VAR SET	Overlay
      4  00a7				   TEMPORARY_OFFSET SET	0
      5  00a7					      SUBROUTINE
    183  00a7					      SUBROUTINE
    184  00a7
    185  00a7							; Draw the piece in the new square
    186  00a7
    187  00a7		       a5 85		      lda	fromX12
    188  00a9		       85 80		      sta	squareToDraw
    189  00ab
    190  00ab		       20 4e fd 	      jsr	CopySinglePiece	; draw the moving piece into the new square
    191  00ae
    192  00ae		       a9 06		      lda	#6	; snail trail delay
    193  00b0		       85 82		      sta	drawDelay
    194  00b2
      0  00b2					      PHASE	AI_MarchToTargetB
      1  00b2		       a9 19		      lda	#AI_MarchToTargetB
      2  00b4		       85 8c		      sta	aiState
    196  00b6		       60		      rts
    197  00b7
    198  00b7
    199  00b7							;---------------------------------------------------------------------------------------------------
    200  00b7
      0  00b7					      DEF	aiFinalFlash
      1  00b7				   BANK_aiFinalFlash SET	_CURRENT_BANK
      2  00b7				   aiFinalFlash
      3  00b7				   TEMPORARY_VAR SET	Overlay
      4  00b7				   TEMPORARY_OFFSET SET	0
      5  00b7					      SUBROUTINE
    202  00b7					      SUBROUTINE
    203  00b7
    204  00b7		       a5 82		      lda	drawDelay
    205  00b9		       f0 03		      beq	.deCount
    206  00bb		       c6 82		      dec	drawDelay
    207  00bd		       60		      rts
    208  00be
    209  00be		       a5 84	   .deCount   lda	drawCount
    210  00c0		       f0 0e		      beq	flashDone2
    211  00c2		       c6 84		      dec	drawCount
    212  00c4
    213  00c4		       a9 0a		      lda	#10
    214  00c6		       85 82		      sta	drawDelay	; "getting ready to move" flash
    215  00c8
    216  00c8		       a5 85		      lda	fromX12
    217  00ca		       85 80		      sta	squareToDraw
    218  00cc
    219  00cc		       20 4e fd 	      jsr	CopySinglePiece
    220  00cf		       60		      rts
    221  00d0
      0  00d0				   flashDone2 PHASE	AI_SpecialMoveFixup
      1  00d0		       a9 1c		      lda	#AI_SpecialMoveFixup
      2  00d2		       85 8c		      sta	aiState
    223  00d4		       60		      rts
    224  00d5
    225  00d5
    226  00d5							;---------------------------------------------------------------------------------------------------
    227  00d5
      0  00d5					      DEF	CastleFixup
      1  00d5				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00d5				   CastleFixup
      3  00d5				   TEMPORARY_VAR SET	Overlay
      4  00d5				   TEMPORARY_OFFSET SET	0
      5  00d5					      SUBROUTINE
    229  00d5					      SUBROUTINE
    230  00d5
    231  00d5							; fixup any castling issues
    232  00d5							; at this point the king has finished his two-square march
    233  00d5							; based on the finish square, we determine which rook we're interacting with
    234  00d5							; and generate a 'move' for the rook to position on the other side of the king
    235  00d5
    236  00d5
    237  00d5		       a5 98		      lda	fromPiece
    238  00d7		       29 10		      and	#FLAG_CASTLE
    239  00d9		       f0 25		      beq	.exit	; NOT involved in castle!
    240  00db
    241  00db		       a2 04		      ldx	#4
    242  00dd		       a5 85		      lda	fromX12	; *destination*
    243  00df		       ca	   .findCast  dex
    244  00e0		       30 1e		      bmi	.exit
    245  00e2		       dd 18 f1 	      cmp	KSquare,x
    246  00e5		       d0 f8		      bne	.findCast
    247  00e7
    248  00e7		       bd 20 f1 	      lda	RSquareEnd,x
    249  00ea		       85 86		      sta	toX12
    250  00ec		       bc 1c f1 	      ldy	RSquareStart,x
    251  00ef		       84 85		      sty	fromX12
    252  00f1		       84 87		      sty	originX12
    253  00f3
    254  00f3		       a5 98		      lda	fromPiece
    255  00f5		       29 80		      and	#128	; colour bit
    256  00f7		       09 05		      ora	#ROOK	; preserve colour
    257  00f9		       85 98		      sta	fromPiece
    258  00fb
      0  00fb					      PHASE	AI_MoveIsSelected
      1  00fb		       a9 15		      lda	#AI_MoveIsSelected
      2  00fd		       85 8c		      sta	aiState
    260  00ff
    261  00ff							; in this siutation (castle, rook moving) we do not change sides yet!
    262  00ff
    263  00ff		       60		      rts
    264  0100
    265  0100		       a5 97	   .exit      lda	sideToMove
    266  0102		       49 80		      eor	#128
    267  0104		       85 97		      sta	sideToMove
    268  0106
      0  0106					      NEGEVAL
      1  0106
      2  0106		       18		      clc
      3  0107		       a5 90		      lda	Evaluation
      4  0109		       49 ff		      eor	#$FF
      5  010b		       69 01		      adc	#1
      6  010d		       85 90		      sta	Evaluation
      7  010f		       a5 91		      lda	Evaluation+1
      8  0111		       49 ff		      eor	#$FF
      9  0113		       69 00		      adc	#0
     10  0115		       85 91		      sta	Evaluation+1
     11  0117
    270  0117		       60		      rts
    271  0118
    272  0118
    273  0118		       18 1c 5e 62 KSquare    .byte.b	24,28,94,98
    274  011c		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    275  0120		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    276  0124
    277  0124
    278  0124							;---------------------------------------------------------------------------------------------------
    279  0124
      0  0124					      DEF	SetupBanks
      1  0124				   BANK_SetupBanks SET	_CURRENT_BANK
      2  0124				   SetupBanks
      3  0124				   TEMPORARY_VAR SET	Overlay
      4  0124				   TEMPORARY_OFFSET SET	0
      5  0124					      SUBROUTINE
    281  0124					      SUBROUTINE
    282  0124
      0  0124					      VAR	__plyBank, 1
      1  0124		       00 a0	   __plyBank  =	TEMPORARY_VAR
      2  0124				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  0124
      4  0124				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  0124				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  0124				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  0124					      ENDIF
      8  0124				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  0124				  -	      ECHO	"Temporary Variable", __plyBank, "overflow!"
     10  0124				  -	      ERR
     11  0124					      ENDIF
     12  0124					      LIST	ON
    284  0124
    285  0124							; SAFE
    286  0124
    287  0124		       a0 07		      ldy	#7
    288  0126		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    289  0128		       20 1e fd 	      jsr	CopyShadowROMtoRAM
    290  012b		       88		      dey
    291  012c		       10 f8		      bpl	.copyRowBanks
    292  012e
    293  012e							; copy the BOARD/MOVES bank
    294  012e
    295  012e		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    296  0130		       a2 0a		      ldx	#MOVES
    297  0132		       20 1e fd 	      jsr	CopyShadowROMtoRAM	; this auto-initialises Board too
    298  0135
    299  0135							; copy the PLY banks
    300  0135
    301  0135		       a9 06		      lda	#MAX_PLY
    302  0137		       85 a0		      sta	__plyBank
    303  0139		       a0 09		      ldy	#RAMBANK_PLY
    304  013b		       84 95		      sty	currentPly
    305  013d		       a2 0b	   .copyPlyBanks ldx	#BANK_PLY
    306  013f		       20 1e fd 	      jsr	CopyShadowROMtoRAM
    307  0142		       c8		      iny
    308  0143		       c6 a0		      dec	__plyBank
    309  0145		       d0 f6		      bne	.copyPlyBanks
    310  0147
    311  0147		       60		      rts
    312  0148
    313  0148
    314  0148							;---------------------------------------------------------------------------------------------------
    315  0148
      0  0148					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1"
      1  0148
      2  0148
      3  0148		       01 48	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (1K) SIZE =  $148 , FREE= $2b8
      4  0148					      ECHO	"GENERIC_BANK_1", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0148				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0148				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0148				  -	      ERR
      8  0148					      endif
    317  0148
    318  0148
    319  0148							;---------------------------------------------------------------------------------------------------
    320  0148
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  0148					      include	"piece_vectors.asm"
      1  0148							; Created by ConvertChessPieces.py
      0  0148					      DEF	PIECE_VECTOR_LO
      1  0148				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  0148				   PIECE_VECTOR_LO
      3  0148				   TEMPORARY_VAR SET	Overlay
      4  0148				   TEMPORARY_OFFSET SET	0
      5  0148					      SUBROUTINE
      3  0148		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  0149		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  014a		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  014b		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  014c		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  014d		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  014e		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  014f		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  0150		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  0151		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  0152		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  0153		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  0154		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  0155		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  0156		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  0157		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  0158		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  0159		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  015a		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  015b		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  015c		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  015d		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  015e		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  015f		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  0160		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  0161		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  0162		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  0163		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  0164		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  0165		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  0166		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  0167		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  0168		       48		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_0
     36  0169		       90		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_1
     37  016a		       00		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_2
     38  016b		       48		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_3
     39  016c		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     40  016d		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     41  016e		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     42  016f		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     43  0170		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     44  0171		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     45  0172		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     46  0173		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     47  0174		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     48  0175		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     49  0176		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     50  0177		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     51  0178		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     52  0179		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     53  017a		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     54  017b		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     55  017c		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     56  017d		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     57  017e		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     58  017f		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     59  0180		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     60  0181		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     61  0182		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     62  0183		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     63  0184		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     64  0185		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     65  0186		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     66  0187		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     67  0188		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     68  0189		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     69  018a		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     70  018b		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     71  018c		       00		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_0
     72  018d		       48		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_1
     73  018e		       90		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_2
     74  018f		       00		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_3
     75  0190		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     76  0191		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     77  0192		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     78  0193		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     79  0194		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     80  0195		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     81  0196		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     82  0197		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     83  0198		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     84  0199		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     85  019a		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     86  019b		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     87  019c		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     88  019d		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     89  019e		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     90  019f		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     91  01a0		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     92  01a1		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     93  01a2		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     94  01a3		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     95  01a4		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     96  01a5		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     97  01a6		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     98  01a7		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     99  01a8		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
    100  01a9		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
    101  01aa		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
    102  01ab		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
    103  01ac		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
    104  01ad		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
    105  01ae		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
    106  01af		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
    107  01b0		       48		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_0
    108  01b1		       90		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_1
    109  01b2		       00		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_2
    110  01b3		       48		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_3
    111  01b4		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    112  01b5		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    113  01b6		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    114  01b7		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    115  01b8		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    116  01b9		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    117  01ba		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    118  01bb		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    119  01bc		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    120  01bd		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    121  01be		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    122  01bf		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    123  01c0		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    124  01c1		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    125  01c2		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    126  01c3		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    127  01c4		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    128  01c5		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    129  01c6		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    130  01c7		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    131  01c8		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    132  01c9		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    133  01ca		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    134  01cb		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    135  01cc		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    136  01cd		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    137  01ce		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    138  01cf		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    139  01d0		       38		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    140  01d1		       80		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    141  01d2		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    142  01d3		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
    143  01d4		       00		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_0
    144  01d5		       48		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_1
    145  01d6		       90		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_2
    146  01d7		       00		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  01d8					      DEF	PIECE_VECTOR_HI
      1  01d8				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  01d8				   PIECE_VECTOR_HI
      3  01d8				   TEMPORARY_VAR SET	Overlay
      4  01d8				   TEMPORARY_OFFSET SET	0
      5  01d8					      SUBROUTINE
    148  01d8		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    149  01d9		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    150  01da		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    151  01db		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    152  01dc		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    153  01dd		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    154  01de		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    155  01df		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    156  01e0		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    157  01e1		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    158  01e2		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    159  01e3		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    160  01e4		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    161  01e5		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    162  01e6		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    163  01e7		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    164  01e8		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    165  01e9		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    166  01ea		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    167  01eb		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    168  01ec		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    169  01ed		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    170  01ee		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    171  01ef		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    172  01f0		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    173  01f1		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    174  01f2		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    175  01f3		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    176  01f4		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    177  01f5		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    178  01f6		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    179  01f7		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    180  01f8		       f5		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_0
    181  01f9		       f5		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_1
    182  01fa		       f6		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_2
    183  01fb		       f6		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_3
    184  01fc		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    185  01fd		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    186  01fe		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    187  01ff		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    188  0200		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    189  0201		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    190  0202		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    191  0203		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    192  0204		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    193  0205		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    194  0206		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    195  0207		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    196  0208		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    197  0209		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    198  020a		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    199  020b		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    200  020c		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    201  020d		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    202  020e		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    203  020f		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    204  0210		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    205  0211		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    206  0212		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    207  0213		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    208  0214		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    209  0215		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    210  0216		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    211  0217		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    212  0218		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    213  0219		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    214  021a		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    215  021b		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    216  021c		       f4		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_0
    217  021d		       f4		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_1
    218  021e		       f4		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_2
    219  021f		       f5		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_3
    220  0220		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    221  0221		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    222  0222		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    223  0223		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    224  0224		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    225  0225		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    226  0226		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    227  0227		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    228  0228		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    229  0229		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    230  022a		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    231  022b		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    232  022c		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    233  022d		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    234  022e		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    235  022f		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    236  0230		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    237  0231		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    238  0232		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    239  0233		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    240  0234		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    241  0235		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    242  0236		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    243  0237		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    244  0238		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    245  0239		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    246  023a		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    247  023b		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    248  023c		       f5		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    249  023d		       f6		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    250  023e		       f6		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    251  023f		       f6		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    252  0240		       f4		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_0
    253  0241		       f4		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_1
    254  0242		       f5		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_2
    255  0243		       f5		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_3
    256  0244		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    257  0245		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    258  0246		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    259  0247		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    260  0248		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    261  0249		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    262  024a		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    263  024b		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    264  024c		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    265  024d		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    266  024e		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    267  024f		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    268  0250		       f2		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    269  0251		       f2		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    270  0252		       f2		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    271  0253		       f3		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    272  0254		       f3		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    273  0255		       f3		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    274  0256		       f4		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    275  0257		       f4		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    276  0258		       f4		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    277  0259		       f5		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    278  025a		       f5		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    279  025b		       f5		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    280  025c		       f6		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    281  025d		       f6		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    282  025e		       f6		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    283  025f		       f7		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    284  0260		       f4		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    285  0261		       f4		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    286  0262		       f5		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    287  0263		       f5		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
    288  0264		       f3		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_0
    289  0265		       f3		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_1
    290  0266		       f3		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_2
    291  0267		       f4		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  0268					      DEF	PIECE_VECTOR_BANK
      1  0268				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  0268				   PIECE_VECTOR_BANK
      3  0268				   TEMPORARY_VAR SET	Overlay
      4  0268				   TEMPORARY_OFFSET SET	0
      5  0268					      SUBROUTINE
    293  0268		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    294  0269		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    295  026a		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    296  026b		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    297  026c		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    298  026d		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    299  026e		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    300  026f		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    301  0270		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    302  0271		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    303  0272		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    304  0273		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    305  0274		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    306  0275		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    307  0276		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    308  0277		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    309  0278		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    310  0279		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    311  027a		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    312  027b		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    313  027c		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    314  027d		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    315  027e		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    316  027f		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    317  0280		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    318  0281		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    319  0282		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    320  0283		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    321  0284		       00		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    322  0285		       00		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    323  0286		       00		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    324  0287		       09		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    325  0288		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0
    326  0289		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1
    327  028a		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2
    328  028b		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3
    329  028c		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    330  028d		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    331  028e		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    332  028f		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    333  0290		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    334  0291		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    335  0292		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    336  0293		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    337  0294		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    338  0295		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    339  0296		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    340  0297		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    341  0298		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    342  0299		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    343  029a		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    344  029b		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    345  029c		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    346  029d		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    347  029e		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    348  029f		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    349  02a0		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    350  02a1		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    351  02a2		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    352  02a3		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    353  02a4		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    354  02a5		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    355  02a6		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    356  02a7		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    357  02a8		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    358  02a9		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    359  02aa		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    360  02ab		       00		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    361  02ac		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0
    362  02ad		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1
    363  02ae		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2
    364  02af		       0a		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3
    365  02b0		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    366  02b1		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    367  02b2		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    368  02b3		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    369  02b4		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    370  02b5		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    371  02b6		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    372  02b7		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    373  02b8		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    374  02b9		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    375  02ba		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    376  02bb		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    377  02bc		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    378  02bd		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    379  02be		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    380  02bf		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    381  02c0		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    382  02c1		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    383  02c2		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    384  02c3		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    385  02c4		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    386  02c5		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    387  02c6		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    388  02c7		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    389  02c8		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    390  02c9		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    391  02ca		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    392  02cb		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    393  02cc		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    394  02cd		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    395  02ce		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    396  02cf		       06		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    397  02d0		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0
    398  02d1		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1
    399  02d2		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2
    400  02d3		       00		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3
    401  02d4		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    402  02d5		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    403  02d6		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    404  02d7		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    405  02d8		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    406  02d9		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    407  02da		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    408  02db		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    409  02dc		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    410  02dd		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    411  02de		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    412  02df		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    413  02e0		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    414  02e1		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    415  02e2		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    416  02e3		       09		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    417  02e4		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    418  02e5		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    419  02e6		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    420  02e7		       09		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    421  02e8		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    422  02e9		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    423  02ea		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    424  02eb		       09		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    425  02ec		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    426  02ed		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    427  02ee		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    428  02ef		       09		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    429  02f0		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    430  02f1		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    431  02f2		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    432  02f3		       06		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    433  02f4		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0
    434  02f5		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1
    435  02f6		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2
    436  02f7		       00		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3
    437  02f8
    438  02f8							; piece index equates...
    439  02f8		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    440  02f8		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    441  02f8		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    442  02f8		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    443  02f8		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    444  02f8		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    445  02f8		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    446  02f8		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    447  02f8		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    448  02f8		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    449  02f8		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    450  02f8		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    451  02f8		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    452  02f8		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    453  02f8		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    454  02f8		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    455  02f8		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    456  02f8		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    457  02f8		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    458  02f8		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    459  02f8		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    460  02f8		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    461  02f8		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    462  02f8		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    463  02f8		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    464  02f8		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    465  02f8		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    466  02f8		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    467  02f8		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    468  02f8		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    469  02f8		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    470  02f8		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    471  02f8		       00 20	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0 =	32
    472  02f8		       00 21	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_1 =	33
    473  02f8		       00 22	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_2 =	34
    474  02f8		       00 23	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_3 =	35
    475  02f8		       00 24	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	36
    476  02f8		       00 25	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	37
    477  02f8		       00 26	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	38
    478  02f8		       00 27	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	39
    479  02f8		       00 28	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	40
    480  02f8		       00 29	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	41
    481  02f8		       00 2a	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	42
    482  02f8		       00 2b	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	43
    483  02f8		       00 2c	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	44
    484  02f8		       00 2d	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	45
    485  02f8		       00 2e	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	46
    486  02f8		       00 2f	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	47
    487  02f8		       00 30	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	48
    488  02f8		       00 31	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	49
    489  02f8		       00 32	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	50
    490  02f8		       00 33	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	51
    491  02f8		       00 34	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	52
    492  02f8		       00 35	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	53
    493  02f8		       00 36	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	54
    494  02f8		       00 37	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	55
    495  02f8		       00 38	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	56
    496  02f8		       00 39	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	57
    497  02f8		       00 3a	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	58
    498  02f8		       00 3b	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	59
    499  02f8		       00 3c	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	60
    500  02f8		       00 3d	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	61
    501  02f8		       00 3e	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	62
    502  02f8		       00 3f	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	63
    503  02f8		       00 40	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	64
    504  02f8		       00 41	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	65
    505  02f8		       00 42	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	66
    506  02f8		       00 43	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	67
    507  02f8		       00 44	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_0 =	68
    508  02f8		       00 45	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_1 =	69
    509  02f8		       00 46	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_2 =	70
    510  02f8		       00 47	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_3 =	71
    511  02f8		       00 48	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	72
    512  02f8		       00 49	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	73
    513  02f8		       00 4a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	74
    514  02f8		       00 4b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	75
    515  02f8		       00 4c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	76
    516  02f8		       00 4d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	77
    517  02f8		       00 4e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	78
    518  02f8		       00 4f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	79
    519  02f8		       00 50	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	80
    520  02f8		       00 51	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	81
    521  02f8		       00 52	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	82
    522  02f8		       00 53	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	83
    523  02f8		       00 54	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	84
    524  02f8		       00 55	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	85
    525  02f8		       00 56	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	86
    526  02f8		       00 57	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	87
    527  02f8		       00 58	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	88
    528  02f8		       00 59	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	89
    529  02f8		       00 5a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	90
    530  02f8		       00 5b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	91
    531  02f8		       00 5c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	92
    532  02f8		       00 5d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	93
    533  02f8		       00 5e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	94
    534  02f8		       00 5f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	95
    535  02f8		       00 60	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	96
    536  02f8		       00 61	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	97
    537  02f8		       00 62	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	98
    538  02f8		       00 63	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	99
    539  02f8		       00 64	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	100
    540  02f8		       00 65	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	101
    541  02f8		       00 66	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	102
    542  02f8		       00 67	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	103
    543  02f8		       00 68	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_0 =	104
    544  02f8		       00 69	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_1 =	105
    545  02f8		       00 6a	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_2 =	106
    546  02f8		       00 6b	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_3 =	107
    547  02f8		       00 6c	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	108
    548  02f8		       00 6d	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	109
    549  02f8		       00 6e	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	110
    550  02f8		       00 6f	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	111
    551  02f8		       00 70	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	112
    552  02f8		       00 71	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	113
    553  02f8		       00 72	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	114
    554  02f8		       00 73	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	115
    555  02f8		       00 74	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	116
    556  02f8		       00 75	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	117
    557  02f8		       00 76	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	118
    558  02f8		       00 77	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	119
    559  02f8		       00 78	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	120
    560  02f8		       00 79	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	121
    561  02f8		       00 7a	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	122
    562  02f8		       00 7b	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	123
    563  02f8		       00 7c	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	124
    564  02f8		       00 7d	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	125
    565  02f8		       00 7e	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	126
    566  02f8		       00 7f	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	127
    567  02f8		       00 80	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	128
    568  02f8		       00 81	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	129
    569  02f8		       00 82	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	130
    570  02f8		       00 83	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	131
    571  02f8		       00 84	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	132
    572  02f8		       00 85	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	133
    573  02f8		       00 86	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	134
    574  02f8		       00 87	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	135
    575  02f8		       00 88	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	136
    576  02f8		       00 89	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	137
    577  02f8		       00 8a	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	138
    578  02f8		       00 8b	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	139
    579  02f8		       00 8c	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_0 =	140
    580  02f8		       00 8d	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_1 =	141
    581  02f8		       00 8e	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_2 =	142
    582  02f8		       00 8f	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_3 =	143
------- FILE BANK_GENERIC.asm
    322  02f8
    323  02f8							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
    324  02f8							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
    325  02f8							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
    326  02f8							; include "gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
    327  02f8							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
    328  02f8							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
    329  02f8							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
    330  02f8							; include "gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
    331  02f8
    332  02f8							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm"
    333  02f8							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm"
    334  02f8							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm"
    335  02f8							; include "gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm"
    336  02f8							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm"
    337  02f8							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm"
    338  02f8							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm"
    339  02f8							; include "gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm"
    340  02f8
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  02f8					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  02f8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_0", 72
     12  0300					      LIST	ON
      0  0300					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_0
      1  0300				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  0300				   BLACK_PROMOTE_on_BLACK_SQUARE_0
      3  0300				   TEMPORARY_VAR SET	Overlay
      4  0300				   TEMPORARY_OFFSET SET	0
      5  0300					      SUBROUTINE
      3  0300		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  0348					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  0348					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_1", 72
     12  0348					      LIST	ON
      0  0348					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_1
      1  0348				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  0348				   BLACK_PROMOTE_on_BLACK_SQUARE_1
      3  0348				   TEMPORARY_VAR SET	Overlay
      4  0348				   TEMPORARY_OFFSET SET	0
      5  0348					      SUBROUTINE
      3  0348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0360		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  0390					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  0390					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_2", 72
     12  0390					      LIST	ON
      0  0390					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_2
      1  0390				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  0390				   BLACK_PROMOTE_on_BLACK_SQUARE_2
      3  0390				   TEMPORARY_VAR SET	Overlay
      4  0390				   TEMPORARY_OFFSET SET	0
      5  0390					      SUBROUTINE
      3  0390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  03a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  03c0		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  03d8					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  03d8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_3", 72
     12  0400					      LIST	ON
      0  0400					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_3
      1  0400				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  0400				   BLACK_PROMOTE_on_BLACK_SQUARE_3
      3  0400				   TEMPORARY_VAR SET	Overlay
      4  0400				   TEMPORARY_OFFSET SET	0
      5  0400					      SUBROUTINE
      3  0400		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0430		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  0448					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  0448					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_0", 72
     12  0448					      LIST	ON
      0  0448					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_0
      1  0448				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  0448				   BLACK_PROMOTE_on_WHITE_SQUARE_0
      3  0448				   TEMPORARY_VAR SET	Overlay
      4  0448				   TEMPORARY_OFFSET SET	0
      5  0448					      SUBROUTINE
      3  0448		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  0460		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  0490					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  0490					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_1", 72
     12  0490					      LIST	ON
      0  0490					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_1
      1  0490				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  0490				   BLACK_PROMOTE_on_WHITE_SQUARE_1
      3  0490				   TEMPORARY_VAR SET	Overlay
      4  0490				   TEMPORARY_OFFSET SET	0
      5  0490					      SUBROUTINE
      3  0490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  04a8		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  04c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  04d8					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  04d8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_2", 72
     12  0500					      LIST	ON
      0  0500					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_2
      1  0500				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  0500				   BLACK_PROMOTE_on_WHITE_SQUARE_2
      3  0500				   TEMPORARY_VAR SET	Overlay
      4  0500				   TEMPORARY_OFFSET SET	0
      5  0500					      SUBROUTINE
      3  0500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  0530		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  0548					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  0548					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_3", 72
     12  0548					      LIST	ON
      0  0548					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_3
      1  0548				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  0548				   BLACK_PROMOTE_on_WHITE_SQUARE_3
      3  0548				   TEMPORARY_VAR SET	Overlay
      4  0548				   TEMPORARY_OFFSET SET	0
      5  0548					      SUBROUTINE
      3  0548		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0578		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE BANK_GENERIC.asm
    349  0590
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  0590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  0590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     12  0590					      LIST	ON
      0  0590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  0590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  0590				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  0590				   TEMPORARY_VAR SET	Overlay
      4  0590				   TEMPORARY_OFFSET SET	0
      5  0590					      SUBROUTINE
      3  0590		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  05a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  05c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  05d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  05d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     12  0600					      LIST	ON
      0  0600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  0600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  0600				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  0600				   TEMPORARY_VAR SET	Overlay
      4  0600				   TEMPORARY_OFFSET SET	0
      5  0600					      SUBROUTINE
      3  0600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0618		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  0630		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  0648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  0648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
     12  0648					      LIST	ON
      0  0648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  0648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  0648				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  0648				   TEMPORARY_VAR SET	Overlay
      4  0648				   TEMPORARY_OFFSET SET	0
      5  0648					      SUBROUTINE
      3  0648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0678		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  0690					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  0690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     12  0690					      LIST	ON
      0  0690					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  0690				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  0690				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  0690				   TEMPORARY_VAR SET	Overlay
      4  0690				   TEMPORARY_OFFSET SET	0
      5  0690					      SUBROUTINE
      3  0690		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  06a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  06c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  06d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  06d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     12  0700					      LIST	ON
      0  0700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  0700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  0700				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  0700				   TEMPORARY_VAR SET	Overlay
      4  0700				   TEMPORARY_OFFSET SET	0
      5  0700					      SUBROUTINE
      3  0700		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0718		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  0748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  0748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
     12  0748					      LIST	ON
      0  0748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  0748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  0748				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  0748				   TEMPORARY_VAR SET	Overlay
      4  0748				   TEMPORARY_OFFSET SET	0
      5  0748					      SUBROUTINE
      3  0748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  0760		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  0778		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  0790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  0790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     12  0790					      LIST	ON
      0  0790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  0790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  0790				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  0790				   TEMPORARY_VAR SET	Overlay
      4  0790				   TEMPORARY_OFFSET SET	0
      5  0790					      SUBROUTINE
      3  0790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  07a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  07c0		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_GENERIC.asm
    357  07d8
      0  07d8					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  07d8		       07 d8	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $7d8 , FREE= $28
      2  07d8					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  07d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  07d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  07d8				  -	      ERR
      6  07d8					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  07d8					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  07d8
      0  07d8					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0b36 ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a4	   COLOUR_LINE_1 =	$a4
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 2a	   COLOUR_LINE_3 =	$2A
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800
     18  0800
     19  0800							; good/contrast
     20  0800							;COLOUR_LINE_1 = $a6
     21  0800							;COLOUR_LINE_2 = $4a
     22  0800							;COLOUR_LINE_3 = $2A
     23  0800
     24  0800							;COLOUR_LINE_1 = $94 ; square col
     25  0800							;COLOUR_LINE_2 = $C6
     26  0800							;COLOUR_LINE_3 = $48
     27  0800							;BACKGCOL	= 0 ;$F0
     28  0800
     29  0800
     30  0800							; good 94/46/28/0
     31  0800							; good 94/44/26/0
     32  0800
     33  0800
     34  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     35  0800
     36  0800
      0  0800					      ALLOCATE	ChessBitmap, ROW_BITMAP_SIZE
      0  0800					      OPTIONAL_PAGEBREAK	"Table", ROW_BITMAP_SIZE
     12  0800					      LIST	ON
      0  0800					      DEF	ChessBitmap
      1  0800				   BANK_ChessBitmap SET	_CURRENT_BANK
      2  0800				   ChessBitmap
      3  0800				   TEMPORARY_VAR SET	Overlay
      4  0800				   TEMPORARY_OFFSET SET	0
      5  0800					      SUBROUTINE
     38  0800		       00 00 00 00*ChessBitmap0 ds	24
     39  0818		       00 00 00 00*ChessBitmap1 ds	24
     40  0830		       00 00 00 00*ChessBitmap2 ds	24
     41  0848		       00 00 00 00*ChessBitmap3 ds	24
     42  0860		       00 00 00 00*ChessBitmap4 ds	24
     43  0878		       00 00 00 00*ChessBitmap5 ds	24
     44  0890
      0  0890					      ALLOCATE	BlankSprite, 8
      0  0890					      OPTIONAL_PAGEBREAK	"Table", 8
     12  0890					      LIST	ON
      0  0890					      DEF	BlankSprite
      1  0890				   BANK_BlankSprite SET	_CURRENT_BANK
      2  0890				   BlankSprite
      3  0890				   TEMPORARY_VAR SET	Overlay
      4  0890				   TEMPORARY_OFFSET SET	0
      5  0890					      SUBROUTINE
     46  0890		       00 00 00 00*	      ds	8, 0
     47  0898
      0  0898					      ALLOCATE	SpriteBuffer, 24
      0  0898					      OPTIONAL_PAGEBREAK	"Table", 24
     12  0898					      LIST	ON
      0  0898					      DEF	SpriteBuffer
      1  0898				   BANK_SpriteBuffer SET	_CURRENT_BANK
      2  0898				   SpriteBuffer
      3  0898				   TEMPORARY_VAR SET	Overlay
      4  0898				   TEMPORARY_OFFSET SET	0
      5  0898					      SUBROUTINE
     49  0898				   SpriteBuffer2
     50  0898					      REPEAT	24
     51  0898		       f8		      .byte.b	%11111000
     50  0898					      REPEND
     51  0899		       f8		      .byte.b	%11111000
     50  0899					      REPEND
     51  089a		       f8		      .byte.b	%11111000
     50  089a					      REPEND
     51  089b		       f8		      .byte.b	%11111000
     50  089b					      REPEND
     51  089c		       f8		      .byte.b	%11111000
     50  089c					      REPEND
     51  089d		       f8		      .byte.b	%11111000
     50  089d					      REPEND
     51  089e		       f8		      .byte.b	%11111000
     50  089e					      REPEND
     51  089f		       f8		      .byte.b	%11111000
     50  089f					      REPEND
     51  08a0		       f8		      .byte.b	%11111000
     50  08a0					      REPEND
     51  08a1		       f8		      .byte.b	%11111000
     50  08a1					      REPEND
     51  08a2		       f8		      .byte.b	%11111000
     50  08a2					      REPEND
     51  08a3		       f8		      .byte.b	%11111000
     50  08a3					      REPEND
     51  08a4		       f8		      .byte.b	%11111000
     50  08a4					      REPEND
     51  08a5		       f8		      .byte.b	%11111000
     50  08a5					      REPEND
     51  08a6		       f8		      .byte.b	%11111000
     50  08a6					      REPEND
     51  08a7		       f8		      .byte.b	%11111000
     50  08a7					      REPEND
     51  08a8		       f8		      .byte.b	%11111000
     50  08a8					      REPEND
     51  08a9		       f8		      .byte.b	%11111000
     50  08a9					      REPEND
     51  08aa		       f8		      .byte.b	%11111000
     50  08aa					      REPEND
     51  08ab		       f8		      .byte.b	%11111000
     50  08ab					      REPEND
     51  08ac		       f8		      .byte.b	%11111000
     50  08ac					      REPEND
     51  08ad		       f8		      .byte.b	%11111000
     50  08ad					      REPEND
     51  08ae		       f8		      .byte.b	%11111000
     50  08ae					      REPEND
     51  08af		       f8		      .byte.b	%11111000
     52  08b0					      REPEND
     53  08b0
      0  08b0					      ALLOCATE	BackupBitmap, ROW_BITMAP_SIZE
      0  08b0					      OPTIONAL_PAGEBREAK	"Table", ROW_BITMAP_SIZE
     12  0900					      LIST	ON
      0  0900					      DEF	BackupBitmap
      1  0900				   BANK_BackupBitmap SET	_CURRENT_BANK
      2  0900				   BackupBitmap
      3  0900				   TEMPORARY_VAR SET	Overlay
      4  0900				   TEMPORARY_OFFSET SET	0
      5  0900					      SUBROUTINE
     55  0900		       00 00 00 00*	      ds	ROW_BITMAP_SIZE, 0
     56  0990
     57  0990							;---------------------------------------------------------------------------------------------------
     58  0990
      0  0990					      DEF	ClearRowBitmap
      1  0990				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  0990				   ClearRowBitmap
      3  0990				   TEMPORARY_VAR SET	Overlay
      4  0990				   TEMPORARY_OFFSET SET	0
      5  0990					      SUBROUTINE
     60  0990					      SUBROUTINE
     61  0990
     62  0990		       a9 00		      lda	#0
     63  0992		       a0 90		      ldy	#ROW_BITMAP_SIZE
     64  0994		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     65  0997		       88		      dey
     66  0998		       d0 fa		      bne	.clearRow
     67  099a		       60		      rts
     68  099b
     69  099b
     70  099b							;---------------------------------------------------------------------------------------------------
     71  099b
      0  099b					      DEF	CopyPieceToRowBitmap
      1  099b				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  099b				   CopyPieceToRowBitmap
      3  099b				   TEMPORARY_VAR SET	Overlay
      4  099b				   TEMPORARY_OFFSET SET	0
      5  099b					      SUBROUTINE
     73  099b					      SUBROUTINE
     74  099b
     75  099b		       a0 11		      ldy	#17
     76  099d		       b0 30		      bcs	.rightSide
     77  099f
     78  099f		       b9 a0 00    .copyPiece lda	__pieceShapeBuffer,y
     79  09a2		       f0 06		      beq	.blank1
     80  09a4		       59 00 f0 	      eor	ChessBitmap,y
     81  09a7		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
     82  09aa
     83  09aa		       b9 b2 00    .blank1    lda	__pieceShapeBuffer+18,y
     84  09ad		       f0 06		      beq	.blank2
     85  09af		       59 12 f0 	      eor	ChessBitmap+18,y
     86  09b2		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
     87  09b5
     88  09b5		       b9 c4 00    .blank2    lda	__pieceShapeBuffer+36,y
     89  09b8		       f0 06		      beq	.blank3
     90  09ba		       59 24 f0 	      eor	ChessBitmap+36,y
     91  09bd		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
     92  09c0
     93  09c0		       b9 d6 00    .blank3    lda	__pieceShapeBuffer+54,y
     94  09c3		       f0 06		      beq	.blank4
     95  09c5		       59 36 f0 	      eor	ChessBitmap+54,y
     96  09c8		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
     97  09cb
     98  09cb		       88	   .blank4    dey
     99  09cc		       10 d1		      bpl	.copyPiece
    100  09ce		       60		      rts
    101  09cf
    102  09cf				   .rightSide
    103  09cf
    104  09cf					      SUBROUTINE
    105  09cf
    106  09cf		       b9 a0 00    .copyPieceR lda	__pieceShapeBuffer,y
    107  09d2		       f0 06		      beq	.blank1
    108  09d4		       59 48 f0 	      eor	ChessBitmap+72,y
    109  09d7		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    110  09da
    111  09da		       b9 b2 00    .blank1    lda	__pieceShapeBuffer+18,y
    112  09dd		       f0 06		      beq	.blank2
    113  09df		       59 5a f0 	      eor	ChessBitmap+72+18,y
    114  09e2		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    115  09e5
    116  09e5		       b9 c4 00    .blank2    lda	__pieceShapeBuffer+36,y
    117  09e8		       f0 06		      beq	.blank3
    118  09ea		       59 6c f0 	      eor	ChessBitmap+72+36,y
    119  09ed		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    120  09f0
    121  09f0		       b9 d6 00    .blank3    lda	__pieceShapeBuffer+54,y
    122  09f3		       f0 06		      beq	.blank4
    123  09f5		       59 7e f0 	      eor	ChessBitmap+72+54,y
    124  09f8		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    125  09fb
    126  09fb		       88	   .blank4    dey
    127  09fc		       10 d1		      bpl	.copyPieceR
    128  09fe		       60		      rts
    129  09ff
    130  09ff
    131  09ff							;---------------------------------------------------------------------------------------------------
    132  09ff
    133  0a00		       00		      ALIGN	256
    134  0a00
    135  0a00							; x = row # (and bank#)
    136  0a00
    137  0a00				   .endline
    138  0a00
    139  0a00							;@59
    140  0a00
    141  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    142  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    143  0a00				   SELFMOD_RTS_ON_LAST_ROW
    144  0a00
    145  0a00		       e8		      inx		; 2
    146  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    147  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03				   DrawRow
      3  0a03				   TEMPORARY_VAR SET	Overlay
      4  0a03				   TEMPORARY_OFFSET SET	0
      5  0a03					      SUBROUTINE
    149  0a03
    150  0a03							;@64
    151  0a03		       a0 07		      ldy	#7	; 2
    152  0a05		       10 3b		      bpl	.dl2	; 3   (must be 69 here)
    153  0a07
    154  0a07							;@58...
    155  0a07
    156  0a07				   .l3
    157  0a07
    158  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    159  0a0a		       85 5b		      sta	GRP0	; 3
    160  0a0c		       b9 a8 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    161  0a0f		       85 5c		      sta	GRP1	; 3
    162  0a11
    163  0a11							;@-4
    164  0a11
    165  0a11		       a9 a4		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    166  0a13		       85 48		      sta	COLUPF	; 3 @1
    167  0a15
    168  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    169  0a18		       85 4d		      sta	PF0	; 3
    170  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    171  0a1d		       85 4e		      sta	PF1	; 3
    172  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    173  0a22		       85 4f		      sta	PF2	; 3 @22
    174  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    176  0a27
    177  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    178  0a2a		       85 4d		      sta	PF0	; 3
    179  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    180  0a2f		       85 4e		      sta	PF1	; 3
    181  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    182  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    183  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    185  0a39
    186  0a39		       88		      dey		; 2
    187  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    188  0a3c
    189  0a3c							;@57
    190  0a3c				   .drawLine
    191  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    193  0a42
    194  0a42				   .dl2
    195  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    196  0a45		       85 5b		      sta	GRP0	; 3
    197  0a47		       b9 98 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    198  0a4a		       85 5c		      sta	GRP1	; 3
    199  0a4c
    200  0a4c							;@7
    201  0a4c
    202  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    203  0a4e		       85 48		      sta	COLUPF	; 3 @12
    204  0a50
    205  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    206  0a53		       85 4d		      sta	PF0	; 3
    207  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    208  0a58		       85 4e		      sta	PF1	; 3
    209  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    210  0a5d		       85 4f		      sta	PF2	; 3 @33
    211  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    213  0a61
    214  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    215  0a64		       85 4d		      sta	PF0	; 3
    216  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    217  0a69		       85 4e		      sta	PF1	; 3
    218  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    219  0a6e		       85 4f		      sta	PF2	; 3 @57
    220  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    222  0a73
    223  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    224  0a76		       85 5b		      sta	GRP0	; 3
    225  0a78		       b9 a0 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    226  0a7b		       85 5c		      sta	GRP1	; 3
    227  0a7d
    228  0a7d							;@0
    229  0a7d		       a9 2a		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    230  0a7f		       85 48		      sta	COLUPF	; 3 @5
    231  0a81
    232  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    233  0a84		       85 4d		      sta	PF0	; 3
    234  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    235  0a89		       85 4e		      sta	PF1	; 3
    236  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    237  0a8e		       85 4f		      sta	PF2	; 3 @26
    238  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    240  0a94
    241  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    242  0a97		       85 4d		      sta	PF0	; 3
    243  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    244  0a9c		       85 4e		      sta	PF1	; 3
    245  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    246  0aa1		       85 4f		      sta	PF2	; 3 @55
    247  0aa3
    248  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    249  0aa6
    250  0aa6
    251  0aa6							;---------------------------------------------------------------------------------------------------
    252  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6				   WriteBlank
      3  0aa6				   TEMPORARY_VAR SET	Overlay
      4  0aa6				   TEMPORARY_OFFSET SET	0
      5  0aa6					      SUBROUTINE
    254  0aa6					      SUBROUTINE
    255  0aa6
    256  0aa6		       a9 90		      lda	#<BlankSprite
    257  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    258  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    259  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    260  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    261  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    262  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    263  0aba
    264  0aba		       a9 f0		      lda	#>BlankSprite
    265  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    266  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    267  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    268  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    269  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    270  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    271  0ace
    272  0ace		       60		      rts
    273  0acf
    274  0acf
    275  0acf							;---------------------------------------------------------------------------------------------------
    276  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf				   WriteCursor
      3  0acf				   TEMPORARY_VAR SET	Overlay
      4  0acf				   TEMPORARY_OFFSET SET	0
      5  0acf					      SUBROUTINE
    278  0acf					      SUBROUTINE
    279  0acf
    280  0acf		       38		      sec
    281  0ad0		       a5 88		      lda	cursorX12
    282  0ad2		       30 1f		      bmi	.exit
    283  0ad4		       a2 0a		      ldx	#10
    284  0ad6		       e9 0a	   .sub10     sbc	#10
    285  0ad8		       ca		      dex
    286  0ad9		       b0 fb		      bcs	.sub10
    287  0adb
    288  0adb		       86 3e		      stx	SET_BANK_RAM
    289  0add		       a9 98		      lda	#<SpriteBuffer
    290  0adf		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    291  0ae2		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    292  0ae5		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    293  0ae8		       a9 f0		      lda	#>SpriteBuffer
    294  0aea		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    295  0aed		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    296  0af0		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    297  0af3
    298  0af3		       60	   .exit      rts
    299  0af4
    300  0af4
    301  0af4							;---------------------------------------------------------------------------------------------------
    302  0af4
      0  0af4					      DEF	SaveBitmap
      1  0af4				   BANK_SaveBitmap SET	_CURRENT_BANK
      2  0af4				   SaveBitmap
      3  0af4				   TEMPORARY_VAR SET	Overlay
      4  0af4				   TEMPORARY_OFFSET SET	0
      5  0af4					      SUBROUTINE
    304  0af4					      SUBROUTINE
    305  0af4
    306  0af4		       a0 47		      ldy	#71
    307  0af6		       b9 00 f0    .fromTo    lda	ChessBitmap,y
    308  0af9		       99 00 f5 	      sta	BackupBitmap+RAM_WRITE,y
    309  0afc		       b9 48 f0 	      lda	ChessBitmap+72,y
    310  0aff		       99 48 f5 	      sta	BackupBitmap+72+RAM_WRITE,y
    311  0b02		       88		      dey
    312  0b03		       10 f1		      bpl	.fromTo
    313  0b05		       60		      rts
    314  0b06
    315  0b06
    316  0b06							;---------------------------------------------------------------------------------------------------
    317  0b06
      0  0b06					      DEF	RestoreBitmap
      1  0b06				   BANK_RestoreBitmap SET	_CURRENT_BANK
      2  0b06				   RestoreBitmap
      3  0b06				   TEMPORARY_VAR SET	Overlay
      4  0b06				   TEMPORARY_OFFSET SET	0
      5  0b06					      SUBROUTINE
    319  0b06					      SUBROUTINE
    320  0b06
    321  0b06		       a0 47		      ldy	#71
    322  0b08		       b9 00 f1    .fromTo    lda	BackupBitmap,y
    323  0b0b		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    324  0b0e		       b9 48 f1 	      lda	BackupBitmap+72,y
    325  0b11		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
    326  0b14		       88		      dey
    327  0b15		       10 f1		      bpl	.fromTo
    328  0b17		       60		      rts
    329  0b18
    330  0b18
    331  0b18							;---------------------------------------------------------------------------------------------------
    332  0b18
      0  0b18					      DEF	CopyTextToRowBitmap
      1  0b18				   BANK_CopyTextToRowBitmap SET	_CURRENT_BANK
      2  0b18				   CopyTextToRowBitmap
      3  0b18				   TEMPORARY_VAR SET	Overlay
      4  0b18				   TEMPORARY_OFFSET SET	0
      5  0b18					      SUBROUTINE
    334  0b18					      SUBROUTINE
    335  0b18
    336  0b18							; An OR-draw, used for placing matricies/text onscreen
    337  0b18							; Similar to the EOR - first copy data into __pieceShapeBuffer, then call this function
    338  0b18							; The draw can be bracketed by "SaveBitmap" and "RestoreBitmap" to leave screen
    339  0b18							; in original state once text disappears
    340  0b18
    341  0b18		       a0 47		      ldy	#71
    342  0b1a		       b0 0d		      bcs	.rightSide
    343  0b1c
    344  0b1c		       b9 a0 00    .copy      lda	__pieceShapeBuffer,y
    345  0b1f		       19 00 f0 	      ora	ChessBitmap,y
    346  0b22		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    347  0b25		       88		      dey
    348  0b26		       10 f4		      bpl	.copy
    349  0b28
    350  0b28		       60		      rts
    351  0b29
    352  0b29				   .rightSide
    353  0b29
    354  0b29					      SUBROUTINE
    355  0b29
    356  0b29		       b9 a0 00    .copy      lda	__pieceShapeBuffer,y
    357  0b2c		       19 48 f0 	      ora	ChessBitmap+72,y
    358  0b2f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    359  0b32		       88		      dey
    360  0b33		       10 f4		      bpl	.copy
    361  0b35
    362  0b35		       60		      rts
    363  0b36
    364  0b36
    365  0b36							;---------------------------------------------------------------------------------------------------
    366  0b36
      0  0b36					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0b36
      2  0b36
      3  0b36		       03 36	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $336 , FREE= $ca
      4  0b36					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0b36				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0b36				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0b36				  -	      ERR
      8  0b36					      endif
    368  0b36							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  0b36					      include	"BANK_CHESS_INCLUDES.asm"
      1  0b36							; Copyright (c) 2019-2020 Andrew Davie
      2  0b36							; andrew@taswegian.com
      3  0b36
      4  0b36
      5  0b36							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      6  0b36							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      7  0b36							; a single gif of the format..
      8  0b36							; a row of white pieces on black squares
      9  0b36							; a row of white pieces on white squares
     10  0b36							; a row of black pieces on black squares
     11  0b36							; a row of black pieces on white squares
     12  0b36
     13  0b36							; each row has the pieces ordered thus:
     14  0b36							; a blank, then pawn, knight, bishop, rook, queen, king
     15  0b36							; each piece is 5 pixels wide x 8 pixels deep
     16  0b36							; each pixel is from an 8-colour palette.
     17  0b36							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     18  0b36							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     19  0b36							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     20  0b36							; bit "b" becomes the second ICC pixel line (2)
     21  0b36							; bit "c" becomes the third ICC pixel line (3)
     22  0b36							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     23  0b36							; The tool produces 4 variants of the piece; shifted into the 4 squares
     24  0b36							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     25  0b36							; These 4 shifted positions are stored consecutively in the shape definition
     26  0b36
     27  0b36							; Example...
     28  0b36							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     29  0b36							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     30  0b36							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     31  0b36							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     32  0b36
     33  0b36							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     34  0b36							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     35  0b36							; actually have any data in PF1 or PF2.
     36  0b36
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  0b36					      include	"piece_graphics.asm"
      1  0b36							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0b36					      NEWBANK	PIECES_0
      1  17d8 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     12  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000				   TEMPORARY_VAR SET	Overlay
      4  1000				   TEMPORARY_OFFSET SET	0
      5  1000					      SUBROUTINE
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     12  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048				   TEMPORARY_VAR SET	Overlay
      4  1048				   TEMPORARY_OFFSET SET	0
      5  1048					      SUBROUTINE
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     12  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090				   TEMPORARY_VAR SET	Overlay
      4  1090				   TEMPORARY_OFFSET SET	0
      5  1090					      SUBROUTINE
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
     12  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100				   TEMPORARY_VAR SET	Overlay
      4  1100				   TEMPORARY_OFFSET SET	0
      5  1100					      SUBROUTINE
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     12  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148				   TEMPORARY_VAR SET	Overlay
      4  1148				   TEMPORARY_OFFSET SET	0
      5  1148					      SUBROUTINE
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     12  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190				   TEMPORARY_VAR SET	Overlay
      4  1190				   TEMPORARY_OFFSET SET	0
      5  1190					      SUBROUTINE
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
     12  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200				   TEMPORARY_VAR SET	Overlay
      4  1200				   TEMPORARY_OFFSET SET	0
      5  1200					      SUBROUTINE
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     12  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248				   TEMPORARY_VAR SET	Overlay
      4  1248				   TEMPORARY_OFFSET SET	0
      5  1248					      SUBROUTINE
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     12  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290				   TEMPORARY_VAR SET	Overlay
      4  1290				   TEMPORARY_OFFSET SET	0
      5  1290					      SUBROUTINE
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
     12  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300				   TEMPORARY_VAR SET	Overlay
      4  1300				   TEMPORARY_OFFSET SET	0
      5  1300					      SUBROUTINE
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     12  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348				   TEMPORARY_VAR SET	Overlay
      4  1348				   TEMPORARY_OFFSET SET	0
      5  1348					      SUBROUTINE
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     12  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390				   TEMPORARY_VAR SET	Overlay
      4  1390				   TEMPORARY_OFFSET SET	0
      5  1390					      SUBROUTINE
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
     12  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400				   TEMPORARY_VAR SET	Overlay
      4  1400				   TEMPORARY_OFFSET SET	0
      5  1400					      SUBROUTINE
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     12  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448				   TEMPORARY_VAR SET	Overlay
      4  1448				   TEMPORARY_OFFSET SET	0
      5  1448					      SUBROUTINE
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     12  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490				   TEMPORARY_VAR SET	Overlay
      4  1490				   TEMPORARY_OFFSET SET	0
      5  1490					      SUBROUTINE
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
     12  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500				   TEMPORARY_VAR SET	Overlay
      4  1500				   TEMPORARY_OFFSET SET	0
      5  1500					      SUBROUTINE
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     12  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548				   TEMPORARY_VAR SET	Overlay
      4  1548				   TEMPORARY_OFFSET SET	0
      5  1548					      SUBROUTINE
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     12  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590				   TEMPORARY_VAR SET	Overlay
      4  1590				   TEMPORARY_OFFSET SET	0
      5  1590					      SUBROUTINE
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
     12  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600				   TEMPORARY_VAR SET	Overlay
      4  1600				   TEMPORARY_OFFSET SET	0
      5  1600					      SUBROUTINE
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     12  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648				   TEMPORARY_VAR SET	Overlay
      4  1648				   TEMPORARY_OFFSET SET	0
      5  1648					      SUBROUTINE
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     12  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690				   TEMPORARY_VAR SET	Overlay
      4  1690				   TEMPORARY_OFFSET SET	0
      5  1690					      SUBROUTINE
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
     12  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700				   TEMPORARY_VAR SET	Overlay
      4  1700				   TEMPORARY_OFFSET SET	0
      5  1700					      SUBROUTINE
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     12  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748				   TEMPORARY_VAR SET	Overlay
      4  1748				   TEMPORARY_OFFSET SET	0
      5  1748					      SUBROUTINE
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     12  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790				   TEMPORARY_VAR SET	Overlay
      4  1790				   TEMPORARY_OFFSET SET	0
      5  1790					      SUBROUTINE
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  1fd8 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     12  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800				   TEMPORARY_VAR SET	Overlay
      4  1800				   TEMPORARY_OFFSET SET	0
      5  1800					      SUBROUTINE
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$70,$40,$e0,$40,$00,$00,$00,$a0,$80,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     12  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848				   TEMPORARY_VAR SET	Overlay
      4  1848				   TEMPORARY_OFFSET SET	0
      5  1848					      SUBROUTINE
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$70,$10,$38,$10,$00,$00,$00,$28,$08,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     12  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890				   TEMPORARY_VAR SET	Overlay
      4  1890				   TEMPORARY_OFFSET SET	0
      5  1890					      SUBROUTINE
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
     12  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900				   TEMPORARY_VAR SET	Overlay
      4  1900				   TEMPORARY_OFFSET SET	0
      5  1900					      SUBROUTINE
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$38,$20,$70,$20,$00,$00,$00,$50,$40,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     12  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948				   TEMPORARY_VAR SET	Overlay
      4  1948				   TEMPORARY_OFFSET SET	0
      5  1948					      SUBROUTINE
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     12  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990				   TEMPORARY_VAR SET	Overlay
      4  1990				   TEMPORARY_OFFSET SET	0
      5  1990					      SUBROUTINE
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
     12  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00				   TEMPORARY_VAR SET	Overlay
      4  1a00				   TEMPORARY_OFFSET SET	0
      5  1a00					      SUBROUTINE
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     12  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48				   TEMPORARY_VAR SET	Overlay
      4  1a48				   TEMPORARY_OFFSET SET	0
      5  1a48					      SUBROUTINE
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     12  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90				   TEMPORARY_VAR SET	Overlay
      4  1a90				   TEMPORARY_OFFSET SET	0
      5  1a90					      SUBROUTINE
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
     12  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00				   TEMPORARY_VAR SET	Overlay
      4  1b00				   TEMPORARY_OFFSET SET	0
      5  1b00					      SUBROUTINE
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     12  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48				   TEMPORARY_VAR SET	Overlay
      4  1b48				   TEMPORARY_OFFSET SET	0
      5  1b48					      SUBROUTINE
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     12  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90				   TEMPORARY_VAR SET	Overlay
      4  1b90				   TEMPORARY_OFFSET SET	0
      5  1b90					      SUBROUTINE
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
     12  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00				   TEMPORARY_VAR SET	Overlay
      4  1c00				   TEMPORARY_OFFSET SET	0
      5  1c00					      SUBROUTINE
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     12  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48				   TEMPORARY_VAR SET	Overlay
      4  1c48				   TEMPORARY_OFFSET SET	0
      5  1c48					      SUBROUTINE
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     12  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90				   TEMPORARY_VAR SET	Overlay
      4  1c90				   TEMPORARY_OFFSET SET	0
      5  1c90					      SUBROUTINE
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
     12  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00				   TEMPORARY_VAR SET	Overlay
      4  1d00				   TEMPORARY_OFFSET SET	0
      5  1d00					      SUBROUTINE
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     12  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48				   TEMPORARY_VAR SET	Overlay
      4  1d48				   TEMPORARY_OFFSET SET	0
      5  1d48					      SUBROUTINE
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     12  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90				   TEMPORARY_VAR SET	Overlay
      4  1d90				   TEMPORARY_OFFSET SET	0
      5  1d90					      SUBROUTINE
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
     12  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00				   TEMPORARY_VAR SET	Overlay
      4  1e00				   TEMPORARY_OFFSET SET	0
      5  1e00					      SUBROUTINE
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     12  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48				   TEMPORARY_VAR SET	Overlay
      4  1e48				   TEMPORARY_OFFSET SET	0
      5  1e48					      SUBROUTINE
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     12  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90				   TEMPORARY_VAR SET	Overlay
      4  1e90				   TEMPORARY_OFFSET SET	0
      5  1e90					      SUBROUTINE
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
     12  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00				   TEMPORARY_VAR SET	Overlay
      4  1f00				   TEMPORARY_OFFSET SET	0
      5  1f00					      SUBROUTINE
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     12  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48				   TEMPORARY_VAR SET	Overlay
      4  1f48				   TEMPORARY_OFFSET SET	0
      5  1f48					      SUBROUTINE
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     12  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90				   TEMPORARY_VAR SET	Overlay
      4  1f90				   TEMPORARY_OFFSET SET	0
      5  1f90					      SUBROUTINE
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  27d8 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     12  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000				   TEMPORARY_VAR SET	Overlay
      4  2000				   TEMPORARY_OFFSET SET	0
      5  2000					      SUBROUTINE
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     12  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048				   TEMPORARY_VAR SET	Overlay
      4  2048				   TEMPORARY_OFFSET SET	0
      5  2048					      SUBROUTINE
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     12  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090				   TEMPORARY_VAR SET	Overlay
      4  2090				   TEMPORARY_OFFSET SET	0
      5  2090					      SUBROUTINE
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
     12  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100				   TEMPORARY_VAR SET	Overlay
      4  2100				   TEMPORARY_OFFSET SET	0
      5  2100					      SUBROUTINE
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     12  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148				   TEMPORARY_VAR SET	Overlay
      4  2148				   TEMPORARY_OFFSET SET	0
      5  2148					      SUBROUTINE
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$70,$40,$e0,$40,$e0,$e0,$f0,$50,$70,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     12  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190				   TEMPORARY_VAR SET	Overlay
      4  2190				   TEMPORARY_OFFSET SET	0
      5  2190					      SUBROUTINE
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$70,$10,$38,$10,$38,$38,$7c,$54,$74,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
     12  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200				   TEMPORARY_VAR SET	Overlay
      4  2200				   TEMPORARY_OFFSET SET	0
      5  2200					      SUBROUTINE
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$01,$01,$03,$02,$03,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     12  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248				   TEMPORARY_VAR SET	Overlay
      4  2248				   TEMPORARY_OFFSET SET	0
      5  2248					      SUBROUTINE
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$38,$20,$70,$20,$70,$70,$f8,$a8,$b8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     12  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290				   TEMPORARY_VAR SET	Overlay
      4  2290				   TEMPORARY_OFFSET SET	0
      5  2290					      SUBROUTINE
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
     12  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300				   TEMPORARY_VAR SET	Overlay
      4  2300				   TEMPORARY_OFFSET SET	0
      5  2300					      SUBROUTINE
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     12  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348				   TEMPORARY_VAR SET	Overlay
      4  2348				   TEMPORARY_OFFSET SET	0
      5  2348					      SUBROUTINE
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     12  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390				   TEMPORARY_VAR SET	Overlay
      4  2390				   TEMPORARY_OFFSET SET	0
      5  2390					      SUBROUTINE
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
     12  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400				   TEMPORARY_VAR SET	Overlay
      4  2400				   TEMPORARY_OFFSET SET	0
      5  2400					      SUBROUTINE
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     12  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448				   TEMPORARY_VAR SET	Overlay
      4  2448				   TEMPORARY_OFFSET SET	0
      5  2448					      SUBROUTINE
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     12  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490				   TEMPORARY_VAR SET	Overlay
      4  2490				   TEMPORARY_OFFSET SET	0
      5  2490					      SUBROUTINE
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
     12  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500				   TEMPORARY_VAR SET	Overlay
      4  2500				   TEMPORARY_OFFSET SET	0
      5  2500					      SUBROUTINE
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     12  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548				   TEMPORARY_VAR SET	Overlay
      4  2548				   TEMPORARY_OFFSET SET	0
      5  2548					      SUBROUTINE
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     12  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590				   TEMPORARY_VAR SET	Overlay
      4  2590				   TEMPORARY_OFFSET SET	0
      5  2590					      SUBROUTINE
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$70,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
     12  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600				   TEMPORARY_VAR SET	Overlay
      4  2600				   TEMPORARY_OFFSET SET	0
      5  2600					      SUBROUTINE
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$01,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     12  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648				   TEMPORARY_VAR SET	Overlay
      4  2648				   TEMPORARY_OFFSET SET	0
      5  2648					      SUBROUTINE
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$38,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     12  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690				   TEMPORARY_VAR SET	Overlay
      4  2690				   TEMPORARY_OFFSET SET	0
      5  2690					      SUBROUTINE
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
     12  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700				   TEMPORARY_VAR SET	Overlay
      4  2700				   TEMPORARY_OFFSET SET	0
      5  2700					      SUBROUTINE
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     12  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748				   TEMPORARY_VAR SET	Overlay
      4  2748				   TEMPORARY_OFFSET SET	0
      5  2748					      SUBROUTINE
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     12  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790				   TEMPORARY_VAR SET	Overlay
      4  2790				   TEMPORARY_OFFSET SET	0
      5  2790					      SUBROUTINE
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  2fd8 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     12  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800				   TEMPORARY_VAR SET	Overlay
      4  2800				   TEMPORARY_OFFSET SET	0
      5  2800					      SUBROUTINE
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     12  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848				   TEMPORARY_VAR SET	Overlay
      4  2848				   TEMPORARY_OFFSET SET	0
      5  2848					      SUBROUTINE
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     12  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890				   TEMPORARY_VAR SET	Overlay
      4  2890				   TEMPORARY_OFFSET SET	0
      5  2890					      SUBROUTINE
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
     12  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900				   TEMPORARY_VAR SET	Overlay
      4  2900				   TEMPORARY_OFFSET SET	0
      5  2900					      SUBROUTINE
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     12  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948				   TEMPORARY_VAR SET	Overlay
      4  2948				   TEMPORARY_OFFSET SET	0
      5  2948					      SUBROUTINE
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     12  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990				   TEMPORARY_VAR SET	Overlay
      4  2990				   TEMPORARY_OFFSET SET	0
      5  2990					      SUBROUTINE
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
     12  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00				   TEMPORARY_VAR SET	Overlay
      4  2a00				   TEMPORARY_OFFSET SET	0
      5  2a00					      SUBROUTINE
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     12  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48				   TEMPORARY_VAR SET	Overlay
      4  2a48				   TEMPORARY_OFFSET SET	0
      5  2a48					      SUBROUTINE
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     12  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90				   TEMPORARY_VAR SET	Overlay
      4  2a90				   TEMPORARY_OFFSET SET	0
      5  2a90					      SUBROUTINE
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$70,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
     12  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00				   TEMPORARY_VAR SET	Overlay
      4  2b00				   TEMPORARY_OFFSET SET	0
      5  2b00					      SUBROUTINE
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$70,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     12  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48				   TEMPORARY_VAR SET	Overlay
      4  2b48				   TEMPORARY_OFFSET SET	0
      5  2b48					      SUBROUTINE
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     12  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90				   TEMPORARY_VAR SET	Overlay
      4  2b90				   TEMPORARY_OFFSET SET	0
      5  2b90					      SUBROUTINE
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$38,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
     12  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00				   TEMPORARY_VAR SET	Overlay
      4  2c00				   TEMPORARY_OFFSET SET	0
      5  2c00					      SUBROUTINE
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     12  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48				   TEMPORARY_VAR SET	Overlay
      4  2c48				   TEMPORARY_OFFSET SET	0
      5  2c48					      SUBROUTINE
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     12  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90				   TEMPORARY_VAR SET	Overlay
      4  2c90				   TEMPORARY_OFFSET SET	0
      5  2c90					      SUBROUTINE
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
     12  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00				   TEMPORARY_VAR SET	Overlay
      4  2d00				   TEMPORARY_OFFSET SET	0
      5  2d00					      SUBROUTINE
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     12  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48				   TEMPORARY_VAR SET	Overlay
      4  2d48				   TEMPORARY_OFFSET SET	0
      5  2d48					      SUBROUTINE
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     12  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90				   TEMPORARY_VAR SET	Overlay
      4  2d90				   TEMPORARY_OFFSET SET	0
      5  2d90					      SUBROUTINE
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
     12  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00				   TEMPORARY_VAR SET	Overlay
      4  2e00				   TEMPORARY_OFFSET SET	0
      5  2e00					      SUBROUTINE
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     12  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48				   TEMPORARY_VAR SET	Overlay
      4  2e48				   TEMPORARY_OFFSET SET	0
      5  2e48					      SUBROUTINE
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     12  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90				   TEMPORARY_VAR SET	Overlay
      4  2e90				   TEMPORARY_OFFSET SET	0
      5  2e90					      SUBROUTINE
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
     12  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00				   TEMPORARY_VAR SET	Overlay
      4  2f00				   TEMPORARY_OFFSET SET	0
      5  2f00					      SUBROUTINE
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     12  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48				   TEMPORARY_VAR SET	Overlay
      4  2f48				   TEMPORARY_OFFSET SET	0
      5  2f48					      SUBROUTINE
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     12  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90				   TEMPORARY_VAR SET	Overlay
      4  2f90				   TEMPORARY_OFFSET SET	0
      5  2f90					      SUBROUTINE
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
    107  2fd8							;    NEWBANK PIECES_4
    108  2fd8
    109  2fd8							;    CHECK_BANK_SIZE "PIECES_4 (2K)"
    110  2fd8
    111  2fd8							;    NEWBANK PIECES_5
    112  2fd8
    113  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm"
    114  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm"
    115  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm"
    116  2fd8							; include "gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm"
    117  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm"
    118  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm"
    119  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm"
    120  2fd8							; include "gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm"
    121  2fd8
    122  2fd8
    123  2fd8				  -	      if	0
    124  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    125  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    126  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    127  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    128  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    129  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    130  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    131  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    132  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    133  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    134  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    135  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    136  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    137  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    138  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    139  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    140  2fd8					      endif
    141  2fd8							;    CHECK_BANK_SIZE "PIECES_5 (2K)"
    142  2fd8
    143  2fd8				  -	      if	0
    144  2fd8				  -	      NEWBANK	PIECES_6
    145  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    146  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    147  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    148  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    149  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    150  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    151  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    152  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    153  2fd8				  -
    154  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    155  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    156  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    157  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    158  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    159  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    160  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    161  2fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    162  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    163  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    164  2fd8				  -
    165  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    166  2fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    167  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    168  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    169  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    170  2fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    171  2fd8				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    172  2fd8				  -
    173  2fd8				  -
    174  2fd8				  -	      NEWBANK	PIECES_7
    175  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    176  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    177  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    178  2fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    179  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    180  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    181  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    182  2fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    183  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    184  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    185  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    186  2fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    187  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    188  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    189  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    190  2fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    191  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    192  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    193  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    194  2fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    195  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    196  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    197  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    198  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    199  2fd8				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    200  2fd8				  -
    201  2fd8				  -
    202  2fd8				  -	      NEWBANK	PIECES_8
    203  2fd8				  -
    204  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    205  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    206  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    207  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    208  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    209  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    210  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    211  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    212  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    213  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    214  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    215  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    216  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    217  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    218  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    219  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    220  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    221  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    222  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    223  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    224  2fd8				  -
    225  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    226  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    227  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    228  2fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    229  2fd8				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    230  2fd8				  -
    231  2fd8					      endif
    232  2fd8
    233  2fd8							;    NEWBANK PIECES_9
    234  2fd8
    235  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    236  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    237  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    238  2fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    239  2fd8							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    240  2fd8
    241  2fd8				  -	      if	0
    242  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    243  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    244  2fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    245  2fd8					      endif
    246  2fd8
    247  2fd8							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    248  2fd8
    249  2fd8				  -	      if	0
    250  2fd8				  -
    251  2fd8				  -
    252  2fd8				  -
    253  2fd8				  -
    254  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    255  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    256  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    257  2fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    258  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    259  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    260  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    261  2fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    262  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    263  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    264  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    265  2fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    266  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    267  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    268  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    269  2fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    270  2fd8				  -
    271  2fd8				  -
    272  2fd8					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     38  2fd8
     39  2fd8							;    NEWBANK PIECE_VECTORS
     40  2fd8							;    include "piece_vectors.asm"
     41  2fd8							;    CHECK_BANK_SIZE "PIECE_VECTORS (2K)"
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 2
      0  2fd8					      include	"BANK_StateMachine.asm"
      0  2fd8					      NEWBANK	STATEMACHINE
      1  36d8 ????				      SEG	STATEMACHINE
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   STATEMACHINE SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	STATEMACHINE
      2  3000
      3  3000
      4  3000							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
      5  3000
      6  3000		       00 09	   PLAYER     =	RAMBANK_PLY
      7  3000		       00 0a	   OPPONENT   =	PLAYER + 1
      8  3000
      9  3000		       00 10	   CURSOR_MOVE_SPEED =	16
     10  3000		       00 14	   CAP_SPEED  =	20
     11  3000		       00 28	   HOLD_DELAY =	40
     12  3000
     13  3000
     14  3000							;---------------------------------------------------------------------------------------------------
     15  3000
     16  3000				   P	      SET	0
     17  3000					      MAC	ain
     18  3000				   AI_{1}     SET	P
     19  3000				   P	      SET	P+1
     20  3000					      ENDM
     21  3000
     22  3000					      MAC	lo
     23  3000					      .byte	<ai{1}
     24  3000					      ENDM
     25  3000
     26  3000					      MAC	hi
     27  3000					      .byte	>ai{1}
     28  3000					      ENDM
     29  3000
     30  3000					      MAC	bk
     31  3000					      .byte	BANK_ai{1}
     32  3000					      ENDM
     33  3000
     34  3000
     35  3000		       00 28	   ONCEPERFRAME =	40
     36  3000
     37  3000					      MAC	tabdef
     38  3000
     39  3000					      {1}	BeginSelectMovePhase
     40  3000					      {1}	SelectStartSquare
     41  3000					      {1}	StartSquareSelected
     42  3000					      {1}	DrawMoves
     43  3000					      {1}	ShowMoveCaptures
     44  3000					      {1}	SlowFlash
     45  3000					      {1}	UnDrawTargetSquares
     46  3000					      {1}	SelectDestinationSquare
     47  3000					      {1}	Quiescent
     48  3000					      {1}	ReselectDebounce
     49  3000					      {1}	StartMoveGen
     50  3000					      {1}	StepMoveGen
     51  3000					      {1}	LookForCheck
     52  3000					      {1}	StartClearBoard
     53  3000					      {1}	ClearEachRow
     54  3000					      {1}	DrawEntireBoard
     55  3000					      {1}	DrawPart2
     56  3000					      {1}	DrawPart3
     57  3000					      {1}	FlipBuffers
     58  3000					      {1}	GenerateMoves
     59  3000					      {1}	ComputerMove
     60  3000					      {1}	MoveIsSelected
     61  3000					      {1}	WriteStartPieceBlank
     62  3000					      {1}	MarchToTargetA
     63  3000					      {1}	MarchB
     64  3000					      {1}	MarchToTargetB
     65  3000					      {1}	MarchB2
     66  3000					      {1}	FinalFlash
     67  3000					      {1}	SpecialMoveFixup
     68  3000					      {1}	InCheckBackup
     69  3000					      {1}	InCheckDelay
     70  3000					      {1}	PromotePawnStart
     71  3000					      {1}	RollPromotionPiece
     72  3000					      {1}	ChoosePromotePiece
     73  3000					      {1}	ChooseDebounce
     74  3000
     75  3000					      ENDM		; {1} = macro to use
     76  3000
      0  3000					      TABDEF	AIN
      1  3000
      0  3000					      AIN	BeginSelectMovePhase
      1  3000				   AI_BeginSelectMovePhase SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SelectStartSquare
      1  3000				   AI_SelectStartSquare SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StartSquareSelected
      1  3000				   AI_StartSquareSelected SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawMoves
      1  3000				   AI_DrawMoves SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ShowMoveCaptures
      1  3000				   AI_ShowMoveCaptures SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SlowFlash
      1  3000				   AI_SlowFlash SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	UnDrawTargetSquares
      1  3000				   AI_UnDrawTargetSquares SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SelectDestinationSquare
      1  3000				   AI_SelectDestinationSquare SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	Quiescent
      1  3000				   AI_Quiescent SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ReselectDebounce
      1  3000				   AI_ReselectDebounce SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StartMoveGen
      1  3000				   AI_StartMoveGen SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StepMoveGen
      1  3000				   AI_StepMoveGen SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	LookForCheck
      1  3000				   AI_LookForCheck SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	StartClearBoard
      1  3000				   AI_StartClearBoard SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ClearEachRow
      1  3000				   AI_ClearEachRow SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawEntireBoard
      1  3000				   AI_DrawEntireBoard SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawPart2
      1  3000				   AI_DrawPart2 SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	DrawPart3
      1  3000				   AI_DrawPart3 SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	FlipBuffers
      1  3000				   AI_FlipBuffers SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	GenerateMoves
      1  3000				   AI_GenerateMoves SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ComputerMove
      1  3000				   AI_ComputerMove SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MoveIsSelected
      1  3000				   AI_MoveIsSelected SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	WriteStartPieceBlank
      1  3000				   AI_WriteStartPieceBlank SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchToTargetA
      1  3000				   AI_MarchToTargetA SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchB
      1  3000				   AI_MarchB  SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchToTargetB
      1  3000				   AI_MarchToTargetB SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	MarchB2
      1  3000				   AI_MarchB2 SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	FinalFlash
      1  3000				   AI_FinalFlash SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	SpecialMoveFixup
      1  3000				   AI_SpecialMoveFixup SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	InCheckBackup
      1  3000				   AI_InCheckBackup SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	InCheckDelay
      1  3000				   AI_InCheckDelay SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	PromotePawnStart
      1  3000				   AI_PromotePawnStart SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	RollPromotionPiece
      1  3000				   AI_RollPromotionPiece SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ChoosePromotePiece
      1  3000				   AI_ChoosePromotePiece SET	P
      2  3000				   P	      SET	P+1
      0  3000					      AIN	ChooseDebounce
      1  3000				   AI_ChooseDebounce SET	P
      2  3000				   P	      SET	P+1
     37  3000
     78  3000
      0  3000					      DEF	AiVectorLO
      1  3000				   BANK_AiVectorLO SET	_CURRENT_BANK
      2  3000				   AiVectorLO
      3  3000				   TEMPORARY_VAR SET	Overlay
      4  3000				   TEMPORARY_OFFSET SET	0
      5  3000					      SUBROUTINE
      0  3000					      TABDEF	LO
      1  3000
      0  3000					      LO	BeginSelectMovePhase
      1  3000		       e0		      .byte.b	<aiBeginSelectMovePhase
      0  3001					      LO	SelectStartSquare
      1  3001		       f5		      .byte.b	<aiSelectStartSquare
      0  3002					      LO	StartSquareSelected
      1  3002		       53		      .byte.b	<aiStartSquareSelected
      0  3003					      LO	DrawMoves
      1  3003		       6e		      .byte.b	<aiDrawMoves
      0  3004					      LO	ShowMoveCaptures
      1  3004		       19		      .byte.b	<aiShowMoveCaptures
      0  3005					      LO	SlowFlash
      1  3005		       37		      .byte.b	<aiSlowFlash
      0  3006					      LO	UnDrawTargetSquares
      1  3006		       f7		      .byte.b	<aiUnDrawTargetSquares
      0  3007					      LO	SelectDestinationSquare
      1  3007		       9e		      .byte.b	<aiSelectDestinationSquare
      0  3008					      LO	Quiescent
      1  3008		       ea		      .byte.b	<aiQuiescent
      0  3009					      LO	ReselectDebounce
      1  3009		       e1		      .byte.b	<aiReselectDebounce
      0  300a					      LO	StartMoveGen
      1  300a		       7b		      .byte.b	<aiStartMoveGen
      0  300b					      LO	StepMoveGen
      1  300b		       8d		      .byte.b	<aiStepMoveGen
      0  300c					      LO	LookForCheck
      1  300c		       9f		      .byte.b	<aiLookForCheck
      0  300d					      LO	StartClearBoard
      1  300d		       41		      .byte.b	<aiStartClearBoard
      0  300e					      LO	ClearEachRow
      1  300e		       4e		      .byte.b	<aiClearEachRow
      0  300f					      LO	DrawEntireBoard
      1  300f		       bb		      .byte.b	<aiDrawEntireBoard
      0  3010					      LO	DrawPart2
      1  3010		       92		      .byte.b	<aiDrawPart2
      0  3011					      LO	DrawPart3
      1  3011		       95		      .byte.b	<aiDrawPart3
      0  3012					      LO	FlipBuffers
      1  3012		       ef		      .byte.b	<aiFlipBuffers
      0  3013					      LO	GenerateMoves
      1  3013		       35		      .byte.b	<aiGenerateMoves
      0  3014					      LO	ComputerMove
      1  3014		       31		      .byte.b	<aiComputerMove
      0  3015					      LO	MoveIsSelected
      1  3015		       60		      .byte.b	<aiMoveIsSelected
      0  3016					      LO	WriteStartPieceBlank
      1  3016		       74		      .byte.b	<aiWriteStartPieceBlank
      0  3017					      LO	MarchToTargetA
      1  3017		       59		      .byte.b	<aiMarchToTargetA
      0  3018					      LO	MarchB
      1  3018		       a7		      .byte.b	<aiMarchB
      0  3019					      LO	MarchToTargetB
      1  3019		       1e		      .byte.b	<aiMarchToTargetB
      0  301a					      LO	MarchB2
      1  301a		       c8		      .byte.b	<aiMarchB2
      0  301b					      LO	FinalFlash
      1  301b		       b7		      .byte.b	<aiFinalFlash
      0  301c					      LO	SpecialMoveFixup
      1  301c		       0e		      .byte.b	<aiSpecialMoveFixup
      0  301d					      LO	InCheckBackup
      1  301d		       c5		      .byte.b	<aiInCheckBackup
      0  301e					      LO	InCheckDelay
      1  301e		       d3		      .byte.b	<aiInCheckDelay
      0  301f					      LO	PromotePawnStart
      1  301f		       0a		      .byte.b	<aiPromotePawnStart
      0  3020					      LO	RollPromotionPiece
      1  3020		       2a		      .byte.b	<aiRollPromotionPiece
      0  3021					      LO	ChoosePromotePiece
      1  3021		       70		      .byte.b	<aiChoosePromotePiece
      0  3022					      LO	ChooseDebounce
      1  3022		       db		      .byte.b	<aiChooseDebounce
     37  3023
     81  3023
      0  3023					      DEF	AiVectorHI
      1  3023				   BANK_AiVectorHI SET	_CURRENT_BANK
      2  3023				   AiVectorHI
      3  3023				   TEMPORARY_VAR SET	Overlay
      4  3023				   TEMPORARY_OFFSET SET	0
      5  3023					      SUBROUTINE
      0  3023					      TABDEF	HI
      1  3023
      0  3023					      HI	BeginSelectMovePhase
      1  3023		       f0		      .byte.b	>aiBeginSelectMovePhase
      0  3024					      HI	SelectStartSquare
      1  3024		       f0		      .byte.b	>aiSelectStartSquare
      0  3025					      HI	StartSquareSelected
      1  3025		       f1		      .byte.b	>aiStartSquareSelected
      0  3026					      HI	DrawMoves
      1  3026		       f1		      .byte.b	>aiDrawMoves
      0  3027					      HI	ShowMoveCaptures
      1  3027		       f2		      .byte.b	>aiShowMoveCaptures
      0  3028					      HI	SlowFlash
      1  3028		       f2		      .byte.b	>aiSlowFlash
      0  3029					      HI	UnDrawTargetSquares
      1  3029		       f1		      .byte.b	>aiUnDrawTargetSquares
      0  302a					      HI	SelectDestinationSquare
      1  302a		       f2		      .byte.b	>aiSelectDestinationSquare
      0  302b					      HI	Quiescent
      1  302b		       f2		      .byte.b	>aiQuiescent
      0  302c					      HI	ReselectDebounce
      1  302c		       f2		      .byte.b	>aiReselectDebounce
      0  302d					      HI	StartMoveGen
      1  302d		       f0		      .byte.b	>aiStartMoveGen
      0  302e					      HI	StepMoveGen
      1  302e		       f0		      .byte.b	>aiStepMoveGen
      0  302f					      HI	LookForCheck
      1  302f		       f0		      .byte.b	>aiLookForCheck
      0  3030					      HI	StartClearBoard
      1  3030		       f0		      .byte.b	>aiStartClearBoard
      0  3031					      HI	ClearEachRow
      1  3031		       f0		      .byte.b	>aiClearEachRow
      0  3032					      HI	DrawEntireBoard
      1  3032		       f8		      .byte.b	>aiDrawEntireBoard
      0  3033					      HI	DrawPart2
      1  3033		       f0		      .byte.b	>aiDrawPart2
      0  3034					      HI	DrawPart3
      1  3034		       f0		      .byte.b	>aiDrawPart3
      0  3035					      HI	FlipBuffers
      1  3035		       f8		      .byte.b	>aiFlipBuffers
      0  3036					      HI	GenerateMoves
      1  3036		       f1		      .byte.b	>aiGenerateMoves
      0  3037					      HI	ComputerMove
      1  3037		       f9		      .byte.b	>aiComputerMove
      0  3038					      HI	MoveIsSelected
      1  3038		       f0		      .byte.b	>aiMoveIsSelected
      0  3039					      HI	WriteStartPieceBlank
      1  3039		       f0		      .byte.b	>aiWriteStartPieceBlank
      0  303a					      HI	MarchToTargetA
      1  303a		       f0		      .byte.b	>aiMarchToTargetA
      0  303b					      HI	MarchB
      1  303b		       f0		      .byte.b	>aiMarchB
      0  303c					      HI	MarchToTargetB
      1  303c		       f1		      .byte.b	>aiMarchToTargetB
      0  303d					      HI	MarchB2
      1  303d		       f0		      .byte.b	>aiMarchB2
      0  303e					      HI	FinalFlash
      1  303e		       f0		      .byte.b	>aiFinalFlash
      0  303f					      HI	SpecialMoveFixup
      1  303f		       fa		      .byte.b	>aiSpecialMoveFixup
      0  3040					      HI	InCheckBackup
      1  3040		       f0		      .byte.b	>aiInCheckBackup
      0  3041					      HI	InCheckDelay
      1  3041		       f0		      .byte.b	>aiInCheckDelay
      0  3042					      HI	PromotePawnStart
      1  3042		       f3		      .byte.b	>aiPromotePawnStart
      0  3043					      HI	RollPromotionPiece
      1  3043		       f3		      .byte.b	>aiRollPromotionPiece
      0  3044					      HI	ChoosePromotePiece
      1  3044		       f3		      .byte.b	>aiChoosePromotePiece
      0  3045					      HI	ChooseDebounce
      1  3045		       f3		      .byte.b	>aiChooseDebounce
     37  3046
     84  3046
      0  3046					      DEF	AiVectorBANK
      1  3046				   BANK_AiVectorBANK SET	_CURRENT_BANK
      2  3046				   AiVectorBANK
      3  3046				   TEMPORARY_VAR SET	Overlay
      4  3046				   TEMPORARY_OFFSET SET	0
      5  3046					      SUBROUTINE
      0  3046					      TABDEF	BK
      1  3046
      0  3046					      BK	BeginSelectMovePhase
      1  3046		       06		      .byte.b	BANK_aiBeginSelectMovePhase
      0  3047					      BK	SelectStartSquare
      1  3047		       06		      .byte.b	BANK_aiSelectStartSquare
      0  3048					      BK	StartSquareSelected
      1  3048		       06		      .byte.b	BANK_aiStartSquareSelected
      0  3049					      BK	DrawMoves
      1  3049		       06		      .byte.b	BANK_aiDrawMoves
      0  304a					      BK	ShowMoveCaptures
      1  304a		       06		      .byte.b	BANK_aiShowMoveCaptures
      0  304b					      BK	SlowFlash
      1  304b		       06		      .byte.b	BANK_aiSlowFlash
      0  304c					      BK	UnDrawTargetSquares
      1  304c		       06		      .byte.b	BANK_aiUnDrawTargetSquares
      0  304d					      BK	SelectDestinationSquare
      1  304d		       06		      .byte.b	BANK_aiSelectDestinationSquare
      0  304e					      BK	Quiescent
      1  304e		       06		      .byte.b	BANK_aiQuiescent
      0  304f					      BK	ReselectDebounce
      1  304f		       06		      .byte.b	BANK_aiReselectDebounce
      0  3050					      BK	StartMoveGen
      1  3050		       06		      .byte.b	BANK_aiStartMoveGen
      0  3051					      BK	StepMoveGen
      1  3051		       06		      .byte.b	BANK_aiStepMoveGen
      0  3052					      BK	LookForCheck
      1  3052		       06		      .byte.b	BANK_aiLookForCheck
      0  3053					      BK	StartClearBoard
      1  3053		       00		      .byte.b	BANK_aiStartClearBoard
      0  3054					      BK	ClearEachRow
      1  3054		       00		      .byte.b	BANK_aiClearEachRow
      0  3055					      BK	DrawEntireBoard
      1  3055		       0f		      .byte.b	BANK_aiDrawEntireBoard
      0  3056					      BK	DrawPart2
      1  3056		       00		      .byte.b	BANK_aiDrawPart2
      0  3057					      BK	DrawPart3
      1  3057		       00		      .byte.b	BANK_aiDrawPart3
      0  3058					      BK	FlipBuffers
      1  3058		       0f		      .byte.b	BANK_aiFlipBuffers
      0  3059					      BK	GenerateMoves
      1  3059		       09		      .byte.b	BANK_aiGenerateMoves
      0  305a					      BK	ComputerMove
      1  305a		       0f		      .byte.b	BANK_aiComputerMove
      0  305b					      BK	MoveIsSelected
      1  305b		       00		      .byte.b	BANK_aiMoveIsSelected
      0  305c					      BK	WriteStartPieceBlank
      1  305c		       00		      .byte.b	BANK_aiWriteStartPieceBlank
      0  305d					      BK	MarchToTargetA
      1  305d		       09		      .byte.b	BANK_aiMarchToTargetA
      0  305e					      BK	MarchB
      1  305e		       00		      .byte.b	BANK_aiMarchB
      0  305f					      BK	MarchToTargetB
      1  305f		       09		      .byte.b	BANK_aiMarchToTargetB
      0  3060					      BK	MarchB2
      1  3060		       09		      .byte.b	BANK_aiMarchB2
      0  3061					      BK	FinalFlash
      1  3061		       00		      .byte.b	BANK_aiFinalFlash
      0  3062					      BK	SpecialMoveFixup
      1  3062		       0f		      .byte.b	BANK_aiSpecialMoveFixup
      0  3063					      BK	InCheckBackup
      1  3063		       06		      .byte.b	BANK_aiInCheckBackup
      0  3064					      BK	InCheckDelay
      1  3064		       06		      .byte.b	BANK_aiInCheckDelay
      0  3065					      BK	PromotePawnStart
      1  3065		       06		      .byte.b	BANK_aiPromotePawnStart
      0  3066					      BK	RollPromotionPiece
      1  3066		       06		      .byte.b	BANK_aiRollPromotionPiece
      0  3067					      BK	ChoosePromotePiece
      1  3067		       06		      .byte.b	BANK_aiChoosePromotePiece
      0  3068					      BK	ChooseDebounce
      1  3068		       06		      .byte.b	BANK_aiChooseDebounce
     37  3069
     87  3069
     88  3069
     89  3069							;---------------------------------------------------------------------------------------------------
     90  3069
      0  3069					      DEF	AiSetupVectors
      1  3069				   BANK_AiSetupVectors SET	_CURRENT_BANK
      2  3069				   AiSetupVectors
      3  3069				   TEMPORARY_VAR SET	Overlay
      4  3069				   TEMPORARY_OFFSET SET	0
      5  3069					      SUBROUTINE
     92  3069					      SUBROUTINE
     93  3069
     94  3069							; State machine vector setup - points to current routine to execute
     95  3069
     96  3069		       a6 8c		      ldx	aiState
     97  306b		       bd 00 f0 	      lda	AiVectorLO,x
     98  306e		       85 e8		      sta	__ptr
     99  3070		       bd 23 f0 	      lda	AiVectorHI,x
    100  3073		       85 e9		      sta	__ptr+1
    101  3075
    102  3075		       bd 46 f0 	      lda	AiVectorBANK,x
    103  3078		       85 8b		      sta	savedBank
    104  307a
    105  307a		       60		      rts
    106  307b
    107  307b
    108  307b							;---------------------------------------------------------------------------------------------------
    109  307b
      0  307b					      DEF	aiStartMoveGen
      1  307b				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  307b				   aiStartMoveGen
      3  307b				   TEMPORARY_VAR SET	Overlay
      4  307b				   TEMPORARY_OFFSET SET	0
      5  307b					      SUBROUTINE
    111  307b					      SUBROUTINE
    112  307b
    113  307b							; To assist with castling, generate the moves for the opponent, giving us effectively
    114  307b							; a list of squares that are being attacked. The castling can't happen if the king is
    115  307b							; in check or if the squares it would have to move over are in check
    116  307b
    117  307b							; we don't need to worry about this if K has moved, or relevant R has moved or if
    118  307b							; the squares between are occupied. We can tell THAT by examining the movelist to see
    119  307b							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    120  307b
    121  307b		       a9 0a		      lda	#OPPONENT
    122  307d		       85 95		      sta	currentPly
    123  307f		       20 fb f8 	      jsr	InitialiseMoveGeneration
    124  3082
    125  3082		       a5 97		      lda	sideToMove
    126  3084		       49 80		      eor	#128
    127  3086		       85 97		      sta	sideToMove	; for movegen to know
    128  3088
      0  3088					      PHASE	AI_StepMoveGen
      1  3088		       a9 0b		      lda	#AI_StepMoveGen
      2  308a		       85 8c		      sta	aiState
    130  308c		       60		      rts
    131  308d
    132  308d
    133  308d							;---------------------------------------------------------------------------------------------------
    134  308d
      0  308d					      DEF	aiStepMoveGen
      1  308d				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  308d				   aiStepMoveGen
      3  308d				   TEMPORARY_VAR SET	Overlay
      4  308d				   TEMPORARY_OFFSET SET	0
      5  308d					      SUBROUTINE
    136  308d					      SUBROUTINE
    137  308d
    138  308d							; Because we're (possibly) running with the screen on, processing time is very short and
    139  308d							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    140  308d							; this happens over multiple frames.
    141  308d
    142  308d
    143  308d		       20 07 f9 	      jsr	GenerateOneMove
    144  3090		       a5 96		      lda	piecelistIndex
    145  3092		       10 0a		      bpl	.wait	; not finished yet
    146  3094
    147  3094		       a5 97		      lda	sideToMove
    148  3096		       49 80		      eor	#128
    149  3098		       85 97		      sta	sideToMove
    150  309a							;todo: negeval?
    151  309a
      0  309a					      PHASE	AI_LookForCheck
      1  309a		       a9 0c		      lda	#AI_LookForCheck
      2  309c		       85 8c		      sta	aiState
    153  309e		       60	   .wait      rts
    154  309f
    155  309f
    156  309f							;---------------------------------------------------------------------------------------------------
    157  309f
      0  309f					      DEF	aiLookForCheck
      1  309f				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  309f				   aiLookForCheck
      3  309f				   TEMPORARY_VAR SET	Overlay
      4  309f				   TEMPORARY_OFFSET SET	0
      5  309f					      SUBROUTINE
    159  309f					      SUBROUTINE
    160  309f
    161  309f							; now we've finished generating the opponent moves
    162  309f							; See if the square our king is on is an attacked square (that is, it appears as a TO
    163  309f							; square in the opponent's movelist)
    164  309f
    165  309f		       a9 09		      lda	#PLAYER
    166  30a1		       85 95		      sta	currentPly
    167  30a3		       20 d4 fc 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    168  30a6
    169  30a6		       e6 95		      inc	currentPly
    170  30a8		       20 c4 fd 	      jsr	Go_IsSquareUnderAttack
    171  30ab		       c6 95		      dec	currentPly
    172  30ad		       90 11		      bcc	.exit
    173  30af
    174  30af							; in check!
    175  30af
    176  30af		       a9 40		      lda	#$40
    177  30b1		       85 49		      sta	COLUBK
    178  30b3
    179  30b3		       a9 32		      lda	#50
    180  30b5		       85 89		      sta	mdelay
    181  30b7
    182  30b7		       a9 08		      lda	#8
    183  30b9		       85 84		      sta	drawCount	; row #
    184  30bb
      0  30bb					      PHASE	AI_InCheckBackup
      1  30bb		       a9 1d		      lda	#AI_InCheckBackup
      2  30bd		       85 8c		      sta	aiState
    186  30bf		       60		      rts
    187  30c0
      0  30c0				   .exit      PHASE	AI_BeginSelectMovePhase
      1  30c0		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  30c2		       85 8c		      sta	aiState
    189  30c4		       60		      rts
    190  30c5
    191  30c5
    192  30c5							;---------------------------------------------------------------------------------------------------
    193  30c5
      0  30c5					      DEF	aiInCheckBackup
      1  30c5				   BANK_aiInCheckBackup SET	_CURRENT_BANK
      2  30c5				   aiInCheckBackup
      3  30c5				   TEMPORARY_VAR SET	Overlay
      4  30c5				   TEMPORARY_OFFSET SET	0
      5  30c5					      SUBROUTINE
    195  30c5					      SUBROUTINE
    196  30c5
    197  30c5							; We're about to draw some large text on the screen
    198  30c5							; Make a backup copy of all of the row bitmaps, so that we can restore once text is done
    199  30c5
    200  30c5		       c6 84		      dec	drawCount
    201  30c7		       30 05		      bmi	.exit	; done all rows
    202  30c9		       a4 84		      ldy	drawCount
    203  30cb		       4c ba fd 	      jmp	SAFE_BackupBitmaps
    204  30ce
      0  30ce				   .exit      PHASE	AI_InCheckDelay
      1  30ce		       a9 1e		      lda	#AI_InCheckDelay
      2  30d0		       85 8c		      sta	aiState
    206  30d2		       60		      rts
    207  30d3
    208  30d3
    209  30d3							;---------------------------------------------------------------------------------------------------
    210  30d3
      0  30d3					      DEF	aiInCheckDelay
      1  30d3				   BANK_aiInCheckDelay SET	_CURRENT_BANK
      2  30d3				   aiInCheckDelay
      3  30d3				   TEMPORARY_VAR SET	Overlay
      4  30d3				   TEMPORARY_OFFSET SET	0
      5  30d3					      SUBROUTINE
    212  30d3					      SUBROUTINE
    213  30d3
    214  30d3		       c6 89		      dec	mdelay
    215  30d5		       d0 08		      bne	.exit
    216  30d7
    217  30d7		       a9 00		      lda	#0
    218  30d9		       85 49		      sta	COLUBK
    219  30db
      0  30db					      PHASE	AI_BeginSelectMovePhase
      1  30db		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  30dd		       85 8c		      sta	aiState
    221  30df		       60	   .exit      rts
    222  30e0
    223  30e0
    224  30e0							;---------------------------------------------------------------------------------------------------
    225  30e0
      0  30e0					      DEF	aiBeginSelectMovePhase
      1  30e0				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  30e0				   aiBeginSelectMovePhase
      3  30e0				   TEMPORARY_VAR SET	Overlay
      4  30e0				   TEMPORARY_OFFSET SET	0
      5  30e0					      SUBROUTINE
    227  30e0					      SUBROUTINE
    228  30e0
    229  30e0
    230  30e0		       a9 38		      lda	#$38
    231  30e2		       85 88		      sta	cursorX12
    232  30e4
    233  30e4		       a9 00		      lda	#0
    234  30e6		       85 89		      sta	mdelay	;?
    235  30e8		       85 8f		      sta	aiFlashPhase	;?
    236  30ea
    237  30ea		       a9 ff		      lda	#-1
    238  30ec		       85 85		      sta	fromX12
    239  30ee		       85 86		      sta	toX12
    240  30f0
      0  30f0					      PHASE	AI_SelectStartSquare
      1  30f0		       a9 01		      lda	#AI_SelectStartSquare
      2  30f2		       85 8c		      sta	aiState
    242  30f4		       60		      rts
    243  30f5
    244  30f5							;---------------------------------------------------------------------------------------------------
    245  30f5
      0  30f5					      DEF	aiSelectStartSquare
      1  30f5				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  30f5				   aiSelectStartSquare
      3  30f5				   TEMPORARY_VAR SET	Overlay
      4  30f5				   TEMPORARY_OFFSET SET	0
      5  30f5					      SUBROUTINE
    247  30f5					      SUBROUTINE
    248  30f5
    249  30f5		       20 5c f2 	      jsr	moveCursor
    250  30f8		       20 02 fd 	      jsr	IsValidMoveFromSquare
    251  30fb
    252  30fb		       c6 8a		      dec	ccur	; pulse colour for valid squares
    253  30fd		       20 20 f1 	      jsr	setCursorColours
    254  3100
    255  3100		       98		      tya
    256  3101		       05 4c		      ora	INPT4
    257  3103		       30 04		      bmi	.exit	; illegal square or no button press
    258  3105
      0  3105					      PHASE	AI_StartSquareSelected
      1  3105		       a9 02		      lda	#AI_StartSquareSelected
      2  3107		       85 8c		      sta	aiState
    260  3109
    261  3109		       60	   .exit      rts
    262  310a
    263  310a							;---------------------------------------------------------------------------------------------------
    264  310a
      0  310a					      DEF	setCursorPriority
      1  310a				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  310a				   setCursorPriority
      3  310a				   TEMPORARY_VAR SET	Overlay
      4  310a				   TEMPORARY_OFFSET SET	0
      5  310a					      SUBROUTINE
    266  310a					      SUBROUTINE
    267  310a
    268  310a		       98		      tya
    269  310b		       48		      pha
    270  310c
    271  310c		       a2 04		      ldx	#%100
    272  310e
    273  310e		       a4 88		      ldy	cursorX12
    274  3110		       30 09		      bmi	.under
    275  3112		       20 ea fc 	      jsr	GetBoard
    276  3115		       c9 00		      cmp	#0
    277  3117		       d0 02		      bne	.under
    278  3119		       a2 00		      ldx	#0
    279  311b		       86 4a	   .under     stx	CTRLPF	; UNDER
    280  311d
    281  311d		       68		      pla
    282  311e		       a8		      tay
    283  311f		       60		      rts
    284  3120
    285  3120							;---------------------------------------------------------------------------------------------------
    286  3120
      0  3120					      DEF	setCursorColours
      1  3120				   BANK_setCursorColours SET	_CURRENT_BANK
      2  3120				   setCursorColours
      3  3120				   TEMPORARY_VAR SET	Overlay
      4  3120				   TEMPORARY_OFFSET SET	0
      5  3120					      SUBROUTINE
    288  3120					      SUBROUTINE
    289  3120
    290  3120							; pass y=-1 if move is NOT in the movelist
    291  3120							; preserve y
    292  3120
    293  3120		       a9 44		      lda	#$44
    294  3122
    295  3122		       c0 ff		      cpy	#-1
    296  3124		       f0 0a		      beq	.writeCursorCol	; NOT in the movelist
    297  3126
    298  3126		       a5 8a		      lda	ccur
    299  3128		       4a		      lsr
    300  3129		       4a		      lsr
    301  312a		       4a		      lsr
    302  312b		       29 03		      and	#3
    303  312d		       18		      clc
    304  312e		       69 c0		      adc	#$C0	;COLOUR_LINE_1
    305  3130
    306  3130		       85 46	   .writeCursorCol sta	COLUP0
    307  3132		       60		      rts
    308  3133
    309  3133
    310  3133							;---------------------------------------------------------------------------------------------------
    311  3133
    312  3133							;	    RLDU RLD  RL U RL	R DU R D  R  U R     LDU  LD   L U  L	  DU   D     U
    313  3133							;	    0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    314  3133
      0  3133					      ALLOCATE	JoyCombined, 16
      0  3133					      OPTIONAL_PAGEBREAK	"Table", 16
     12  3133					      LIST	ON
      0  3133					      DEF	JoyCombined
      1  3133				   BANK_JoyCombined SET	_CURRENT_BANK
      2  3133				   JoyCombined
      3  3133				   TEMPORARY_VAR SET	Overlay
      4  3133				   TEMPORARY_OFFSET SET	0
      5  3133					      SUBROUTINE
    316  3133		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1, -1, 0
    317  3143
      0  3143					      ALLOCATE	JoyMoveCursor, 16
      0  3143					      OPTIONAL_PAGEBREAK	"Table", 16
     12  3143					      LIST	ON
      0  3143					      DEF	JoyMoveCursor
      1  3143				   BANK_JoyMoveCursor SET	_CURRENT_BANK
      2  3143				   JoyMoveCursor
      3  3143				   TEMPORARY_VAR SET	Overlay
      4  3143				   TEMPORARY_OFFSET SET	0
      5  3143					      SUBROUTINE
    319  3143		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, -9, 11, 1, 0, -11, 9, -1, 0, -10, 10, 0
    320  3153
    321  3153
    322  3153							;---------------------------------------------------------------------------------------------------
    323  3153
      0  3153					      DEF	aiStartSquareSelected
      1  3153				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  3153				   aiStartSquareSelected
      3  3153				   TEMPORARY_VAR SET	Overlay
      4  3153				   TEMPORARY_OFFSET SET	0
      5  3153					      SUBROUTINE
    325  3153					      SUBROUTINE
    326  3153
    327  3153							; Mark all the valid moves for the selected piece on the board
    328  3153							; and then start pulsing the piece
    329  3153							; AND start choosing for selection of TO square
    330  3153
    331  3153							; Iterate the movelist and for all from squares which = drawPieceNumber
    332  3153							; then draw a BLANK at that square
    333  3153							; do 1 by one, when none found then increment state
    334  3153
    335  3153		       a5 88		      lda	cursorX12
    336  3155		       85 80		      sta	squareToDraw
    337  3157
    338  3157		       a9 0a		      lda	#10
    339  3159		       85 8d		      sta	aiFlashDelay
    340  315b
    341  315b		       a9 00		      lda	#0
    342  315d		       85 86		      sta	toX12	;aiToSquareX12
    343  315f		       85 8f		      sta	aiFlashPhase	; for debounce exit timing
    344  3161
    345  3161		       a9 ff		      lda	#-1
    346  3163		       85 8e		      sta	aiMoveIndex
    347  3165
    348  3165		       a9 28		      lda	#HOLD_DELAY
    349  3167		       85 89		      sta	mdelay	; hold-down delay before moves are shown
    350  3169
      0  3169					      PHASE	AI_DrawMoves
      1  3169		       a9 03		      lda	#AI_DrawMoves
      2  316b		       85 8c		      sta	aiState
    352  316d		       60		      rts
    353  316e
    354  316e
    355  316e							;---------------------------------------------------------------------------------------------------
    356  316e
      0  316e					      DEF	aiDrawMoves
      1  316e				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  316e				   aiDrawMoves
      3  316e				   TEMPORARY_VAR SET	Overlay
      4  316e				   TEMPORARY_OFFSET SET	0
      5  316e					      SUBROUTINE
    358  316e					      SUBROUTINE
    359  316e
    360  316e		       c6 8a		      dec	ccur
    361  3170		       20 20 f1 	      jsr	setCursorColours
    362  3173
    363  3173		       c6 89		      dec	mdelay
    364  3175		       d0 21		      bne	.exit
    365  3177		       a9 01		      lda	#1	; larger number will slow the draw of available moves
    366  3179		       85 89		      sta	mdelay	; once triggered, runs always
    367  317b
    368  317b		       a5 8e		      lda	aiMoveIndex
    369  317d		       10 05		      bpl	.valid
    370  317f		       20 8a fd 	      jsr	SAFE_getMoveIndex
    371  3182		       85 8e		      sta	aiMoveIndex
    372  3184				   .valid
    373  3184
    374  3184		       20 a5 f1 	      jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    375  3187		       a5 8e		      lda	aiMoveIndex
    376  3189		       10 19		      bpl	.unsure	; still drawing in this phase
    377  318b
    378  318b		       a9 14		      lda	#CAP_SPEED
    379  318d		       85 89		      sta	mdelay
    380  318f
    381  318f		       a9 00		      lda	#0
    382  3191		       85 8f		      sta	aiFlashPhase	; controls odd/even exit of flashing
    383  3193
      0  3193					      PHASE	AI_ShowMoveCaptures
      1  3193		       a9 04		      lda	#AI_ShowMoveCaptures
      2  3195		       85 8c		      sta	aiState
    385  3197		       60		      rts
    386  3198
    387  3198				   .exit
    388  3198
    389  3198							; Initial piece selection has happened, but the button hasn't been released yet
    390  3198							; AND we're still in the waiting phase to see if the button was held long enough for move show
    391  3198
    392  3198		       a5 4c		      lda	INPT4
    393  319a		       10 08		      bpl	.unsure	; button still pressed, so still unsure what to do
    394  319c
    395  319c							; Aha! Button released, so we know the selected piece and can start flashing it
    396  319c							; and allowing movement of the selector to a destination square...
    397  319c
    398  319c		       a9 18		      lda	#6*4
    399  319e		       85 8a		      sta	ccur	; bright green square for selection
    400  31a0
      0  31a0					      PHASE	AI_SelectDestinationSquare
      1  31a0		       a9 07		      lda	#AI_SelectDestinationSquare
      2  31a2		       85 8c		      sta	aiState
    402  31a4
    403  31a4		       60	   .unsure    rts
    404  31a5
    405  31a5
    406  31a5							;---------------------------------------------------------------------------------------------------
    407  31a5
      0  31a5					      DEF	SAFE_showMoveOptions
      1  31a5				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  31a5				   SAFE_showMoveOptions
      3  31a5				   TEMPORARY_VAR SET	Overlay
      4  31a5				   TEMPORARY_OFFSET SET	0
      5  31a5					      SUBROUTINE
    409  31a5					      SUBROUTINE
    410  31a5
      0  31a5					      VAR	__saveIdx, 1
      1  31a5		       00 a0	   __saveIdx  =	TEMPORARY_VAR
      2  31a5				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  31a5
      4  31a5				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  31a5				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  31a5				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  31a5					      ENDIF
      8  31a5				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  31a5				  -	      ECHO	"Temporary Variable", __saveIdx, "overflow!"
     10  31a5				  -	      ERR
     11  31a5					      ENDIF
     12  31a5					      LIST	ON
      0  31a5					      VAR	__piece, 1
      1  31a5		       00 a1	   __piece    =	TEMPORARY_VAR
      2  31a5				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  31a5
      4  31a5				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  31a5				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  31a5				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  31a5					      ENDIF
      8  31a5				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  31a5				  -	      ECHO	"Temporary Variable", __piece, "overflow!"
     10  31a5				  -	      ERR
     11  31a5					      ENDIF
     12  31a5					      LIST	ON
    413  31a5
    414  31a5							; place a marker on the board for any square matching the piece
    415  31a5							; EXCEPT for squares which are occupied (we'll flash those later)
    416  31a5
    417  31a5		       a6 8e	   .next      ldx	aiMoveIndex
    418  31a7		       86 a0		      stx	__saveIdx
    419  31a9		       30 47		      bmi	.skip
    420  31ab
    421  31ab		       ad 84 02 	      lda	INTIM
    422  31ae		       c9 05		      cmp	#5
    423  31b0		       90 40		      bcc	.skip
    424  31b2
    425  31b2		       c6 8e		      dec	aiMoveIndex
    426  31b4
    427  31b4		       20 dc fd 	      jsr	GetMoveFrom
    428  31b7		       c5 85		      cmp	fromX12
    429  31b9		       d0 ea		      bne	.next
    430  31bb
    431  31bb		       20 e8 fd 	      jsr	GetMoveTo
    432  31be		       85 80		      sta	squareToDraw
    433  31c0
    434  31c0		       20 f4 fd 	      jsr	GetMovePiece
    435  31c3		       85 a1		      sta	__piece
    436  31c5
    437  31c5							; If it's a pawn promote (duplicate "to" AND piece different (TODO) then skip others)
    438  31c5
    439  31c5		       ca	   .sk	      dex
    440  31c6		       30 16		      bmi	.prom
    441  31c8		       20 e8 fd 	      jsr	GetMoveTo
    442  31cb		       c5 80		      cmp	squareToDraw
    443  31cd		       d0 0f		      bne	.prom
    444  31cf		       20 f4 fd 	      jsr	GetMovePiece
    445  31d2		       45 a1		      eor	__piece
    446  31d4		       29 0f		      and	#PIECE_MASK
    447  31d6		       f0 06		      beq	.prom	; same piece type so not a promote
    448  31d8
    449  31d8		       c6 8e		      dec	aiMoveIndex
    450  31da		       c6 8e		      dec	aiMoveIndex
    451  31dc		       c6 8e		      dec	aiMoveIndex
    452  31de				   .prom
    453  31de
    454  31de		       a4 80		      ldy	squareToDraw
    455  31e0		       20 ea fc 	      jsr	GetBoard
    456  31e3		       29 0f		      and	#PIECE_MASK
    457  31e5		       d0 be		      bne	.next	; don't draw dots on captures - they are flashed later
    458  31e7
    459  31e7
    460  31e7		       ad 84 02 	      lda	INTIM
    461  31ea		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    462  31ec		       90 04		      bcc	.skip
    463  31ee
    464  31ee							;lda aiMoveIndex
    465  31ee							;sta __saveIdx
    466  31ee
    467  31ee		       20 a0 fd 	      jsr	markerDraw
    468  31f1		       60		      rts
    469  31f2
    470  31f2		       a5 a0	   .skip      lda	__saveIdx
    471  31f4		       85 8e		      sta	aiMoveIndex
    472  31f6		       60		      rts
    473  31f7
    474  31f7
    475  31f7							;---------------------------------------------------------------------------------------------------
    476  31f7
      0  31f7					      DEF	aiUnDrawTargetSquares
      1  31f7				   BANK_aiUnDrawTargetSquares SET	_CURRENT_BANK
      2  31f7				   aiUnDrawTargetSquares
      3  31f7				   TEMPORARY_VAR SET	Overlay
      4  31f7				   TEMPORARY_OFFSET SET	0
      5  31f7					      SUBROUTINE
    478  31f7					      SUBROUTINE
    479  31f7
    480  31f7		       c6 8a		      dec	ccur
    481  31f9		       20 20 f1 	      jsr	setCursorColours
    482  31fc
    483  31fc		       c6 89		      dec	mdelay
    484  31fe		       d0 18		      bne	.exit
    485  3200		       a9 01		      lda	#1
    486  3202		       85 89		      sta	mdelay	; once triggered, runs always
    487  3204
    488  3204		       a5 8e		      lda	aiMoveIndex
    489  3206		       10 05		      bpl	.valid
    490  3208		       20 8a fd 	      jsr	SAFE_getMoveIndex
    491  320b		       85 8e		      sta	aiMoveIndex
    492  320d				   .valid
    493  320d
    494  320d		       20 a5 f1 	      jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    495  3210		       a5 8e		      lda	aiMoveIndex
    496  3212		       10 04		      bpl	.exit	; still drawing in this phase
    497  3214
      0  3214					      PHASE	AI_SelectStartSquare
      1  3214		       a9 01		      lda	#AI_SelectStartSquare
      2  3216		       85 8c		      sta	aiState
    499  3218
    500  3218		       60	   .exit      rts
    501  3219
    502  3219
    503  3219							;---------------------------------------------------------------------------------------------------
    504  3219
    505  3219
      0  3219					      DEF	aiShowMoveCaptures
      1  3219				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  3219				   aiShowMoveCaptures
      3  3219				   TEMPORARY_VAR SET	Overlay
      4  3219				   TEMPORARY_OFFSET SET	0
      5  3219					      SUBROUTINE
    507  3219					      SUBROUTINE
    508  3219
    509  3219							; draw/undraw ALL captured pieces
    510  3219							; we should do this an even number of times so that pieces don't disappEOR
    511  3219
    512  3219		       c6 8a		      dec	ccur
    513  321b		       20 20 f1 	      jsr	setCursorColours
    514  321e
    515  321e		       c6 89		      dec	mdelay	; flash speed UNVARYING despite draw happening
    516  3220
    517  3220		       a5 8e		      lda	aiMoveIndex
    518  3222		       10 05		      bpl	.valid	; guaranteed -1 on 1st call
    519  3224		       20 8a fd 	      jsr	SAFE_getMoveIndex
    520  3227		       85 8e		      sta	aiMoveIndex
    521  3229				   .valid
    522  3229
    523  3229		       20 d0 fd 	      jsr	SAFE_showMoveCaptures
    524  322c		       a5 8e		      lda	aiMoveIndex
    525  322e		       10 06		      bpl	.exit
    526  3230
    527  3230		       e6 8f		      inc	aiFlashPhase
    528  3232
      0  3232					      PHASE	AI_SlowFlash
      1  3232		       a9 05		      lda	#AI_SlowFlash
      2  3234		       85 8c		      sta	aiState
    530  3236
    531  3236		       60	   .exit      rts
    532  3237
    533  3237
    534  3237							;---------------------------------------------------------------------------------------------------
    535  3237
      0  3237					      DEF	aiSlowFlash
      1  3237				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  3237				   aiSlowFlash
      3  3237				   TEMPORARY_VAR SET	Overlay
      4  3237				   TEMPORARY_OFFSET SET	0
      5  3237					      SUBROUTINE
    537  3237					      SUBROUTINE
    538  3237
    539  3237							; Joystick button is held down, so we're displaying the available moves
    540  3237							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    541  3237
    542  3237		       c6 8a		      dec	ccur
    543  3239		       20 20 f1 	      jsr	setCursorColours
    544  323c
    545  323c		       a5 8f		      lda	aiFlashPhase
    546  323e		       29 01		      and	#1
    547  3240		       d0 04		      bne	.notEven	; only exit after even # EOR-draws
    548  3242
    549  3242		       a5 4c		      lda	INPT4
    550  3244		       30 0d		      bmi	.butpress	; exit on button release
    551  3246
    552  3246				   .notEven
    553  3246
    554  3246							; Wait for delay to expire then back and flash 'em again
    555  3246
    556  3246		       c6 89		      dec	mdelay
    557  3248		       10 08		      bpl	.slowWait
    558  324a
    559  324a		       a9 14		      lda	#CAP_SPEED
    560  324c		       85 89		      sta	mdelay
    561  324e
      0  324e					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  324e		       a9 04		      lda	#AI_ShowMoveCaptures
      2  3250		       85 8c		      sta	aiState
    563  3252
    564  3252		       60	   .slowWait  rts
    565  3253
    566  3253
    567  3253		       a9 01	   .butpress  lda	#1
    568  3255		       85 89		      sta	mdelay
    569  3257
      0  3257					      PHASE	AI_UnDrawTargetSquares
      1  3257		       a9 06		      lda	#AI_UnDrawTargetSquares
      2  3259		       85 8c		      sta	aiState
    571  325b		       60		      rts
    572  325c
    573  325c
    574  325c							;---------------------------------------------------------------------------------------------------
    575  325c
      0  325c					      DEF	moveCursor
      1  325c				   BANK_moveCursor SET	_CURRENT_BANK
      2  325c				   moveCursor
      3  325c				   TEMPORARY_VAR SET	Overlay
      4  325c				   TEMPORARY_OFFSET SET	0
      5  325c					      SUBROUTINE
    577  325c					      SUBROUTINE
    578  325c
      0  325c					      VAR	__newCursor, 1
      1  325c		       00 a0	   __newCursor =	TEMPORARY_VAR
      2  325c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  325c
      4  325c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  325c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  325c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  325c					      ENDIF
      8  325c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  325c				  -	      ECHO	"Temporary Variable", __newCursor, "overflow!"
     10  325c				  -	      ERR
     11  325c					      ENDIF
     12  325c					      LIST	ON
    580  325c
    581  325c							; Part (a) move cursor around the board waiting for joystick press
    582  325c
    583  325c
    584  325c		       ad 80 02 	      lda	SWCHA
    585  325f		       4a		      lsr
    586  3260		       4a		      lsr
    587  3261		       4a		      lsr
    588  3262		       4a		      lsr
    589  3263		       a8		      tay
    590  3264
    591  3264		       c9 0f		      cmp	#15
    592  3266		       f0 20		      beq	.cursor	; nothing pressed - skip delays
    593  3268
    594  3268		       c6 89		      dec	mdelay
    595  326a		       10 23		      bpl	.delaym
    596  326c
    597  326c		       18		      clc
    598  326d		       a5 88		      lda	cursorX12
    599  326f		       79 43 f1 	      adc	JoyMoveCursor,y
    600  3272		       85 a0		      sta	__newCursor
    601  3274		       a8		      tay
    602  3275		       20 de fc 	      jsr	GetValid
    603  3278		       c9 ff		      cmp	#-1
    604  327a		       f0 04		      beq	.invalid
    605  327c		       a5 a0		      lda	__newCursor
    606  327e		       85 88		      sta	cursorX12
    607  3280				   .invalid
    608  3280
    609  3280		       a9 10		      lda	#CURSOR_MOVE_SPEED
    610  3282		       85 89		      sta	mdelay
    611  3284		       20 0a f1 	      jsr	setCursorPriority
    612  3287		       60		      rts
    613  3288
    614  3288
    615  3288		       a9 00	   .cursor    lda	#0
    616  328a		       85 89		      sta	mdelay
    617  328c		       20 0a f1 	      jsr	setCursorPriority
    618  328f
    619  328f		       60	   .delaym    rts
    620  3290
    621  3290
    622  3290							;---------------------------------------------------------------------------------------------------
    623  3290
      0  3290					      DEF	FlashPiece
      1  3290				   BANK_FlashPiece SET	_CURRENT_BANK
      2  3290				   FlashPiece
      3  3290				   TEMPORARY_VAR SET	Overlay
      4  3290				   TEMPORARY_OFFSET SET	0
      5  3290					      SUBROUTINE
    625  3290					      SUBROUTINE
    626  3290
    627  3290							; Flash the selected piece
    628  3290
    629  3290		       c6 8d		      dec	aiFlashDelay
    630  3292		       d0 09		      bne	.exit	; don't flash
    631  3294		       a9 14		      lda	#CAP_SPEED
    632  3296		       85 8d		      sta	aiFlashDelay
    633  3298
    634  3298		       e6 8f		      inc	aiFlashPhase
    635  329a
    636  329a		       20 4e fd 	      jsr	CopySinglePiece
    637  329d
    638  329d		       60	   .exit      rts
    639  329e
    640  329e
    641  329e							;---------------------------------------------------------------------------------------------------
    642  329e
      0  329e					      DEF	aiSelectDestinationSquare
      1  329e				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  329e				   aiSelectDestinationSquare
      3  329e				   TEMPORARY_VAR SET	Overlay
      4  329e				   TEMPORARY_OFFSET SET	0
      5  329e					      SUBROUTINE
    644  329e					      SUBROUTINE
    645  329e
    646  329e							; Piece is selected and now we're looking for a button press on a destination square
    647  329e							; we flash the piece on-and-off while we're doing that
    648  329e
    649  329e		       20 90 f2 	      jsr	FlashPiece
    650  32a1
    651  32a1		       ad 84 02 	      lda	INTIM
    652  32a4		       c9 14		      cmp	#20
    653  32a6		       90 38		      bcc	.noButton
    654  32a8
    655  32a8		       20 5c f2 	      jsr	moveCursor
    656  32ab
    657  32ab		       a4 88		      ldy	cursorX12
    658  32ad		       84 86		      sty	toX12
    659  32af
    660  32af		       20 12 fd 	      jsr	GetPiece
    661  32b2		       20 20 f1 	      jsr	setCursorColours
    662  32b5
    663  32b5
    664  32b5							; y = valid square
    665  32b5
    666  32b5		       a5 4c		      lda	INPT4
    667  32b7		       30 27		      bmi	.noButton
    668  32b9
    669  32b9		       a5 86		      lda	toX12
    670  32bb		       c5 85		      cmp	fromX12
    671  32bd		       f0 0d		      beq	.cancel
    672  32bf
    673  32bf		       c0 ff		      cpy	#-1
    674  32c1		       f0 1d		      beq	.noButton	; not a valid square
    675  32c3
    676  32c3		       a5 8f		      lda	aiFlashPhase
    677  32c5		       29 01		      and	#1
    678  32c7		       f0 13		      beq	.done
    679  32c9		       85 8d		      sta	aiFlashDelay	; EOR-phase incorrect - force quick fix to allow next-frame button detect
    680  32cb		       60		      rts
    681  32cc
    682  32cc				   .cancel
    683  32cc
    684  32cc		       a5 8f		      lda	aiFlashPhase
    685  32ce		       29 01		      and	#1
    686  32d0		       f0 05		      beq	.doCancel
    687  32d2
    688  32d2							; EOR-phase incorrect - force quick fix to allow next-frame button detect
    689  32d2
    690  32d2		       a9 01		      lda	#1
    691  32d4		       85 8d		      sta	aiFlashDelay
    692  32d6		       60		      rts
    693  32d7
    694  32d7
      0  32d7				   .doCancel  PHASE	AI_ReselectDebounce
      1  32d7		       a9 09		      lda	#AI_ReselectDebounce
      2  32d9		       85 8c		      sta	aiState
    696  32db		       60		      rts
    697  32dc
      0  32dc				   .done      PHASE	AI_Quiescent	; destination selected!
      1  32dc		       a9 08		      lda	#AI_Quiescent
      2  32de		       85 8c		      sta	aiState
    699  32e0		       60	   .noButton  rts
    700  32e1
    701  32e1
    702  32e1							;---------------------------------------------------------------------------------------------------
    703  32e1
      0  32e1					      DEF	aiReselectDebounce
      1  32e1				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  32e1				   aiReselectDebounce
      3  32e1				   TEMPORARY_VAR SET	Overlay
      4  32e1				   TEMPORARY_OFFSET SET	0
      5  32e1					      SUBROUTINE
    705  32e1					      SUBROUTINE
    706  32e1
    707  32e1							; We've just cancelled the move. Wait for the button to be released
    708  32e1							; and then go back to selecting a piece to move
    709  32e1
    710  32e1		       a5 4c		      lda	INPT4
    711  32e3		       10 04		      bpl	.exit	; button still pressed, so wait
    712  32e5
      0  32e5					      PHASE	AI_SelectStartSquare
      1  32e5		       a9 01		      lda	#AI_SelectStartSquare
      2  32e7		       85 8c		      sta	aiState
    714  32e9		       60	   .exit      rts
    715  32ea
    716  32ea
    717  32ea							;---------------------------------------------------------------------------------------------------
    718  32ea
      0  32ea					      DEF	aiQuiescent
      1  32ea				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  32ea				   aiQuiescent
      3  32ea				   TEMPORARY_VAR SET	Overlay
      4  32ea				   TEMPORARY_OFFSET SET	0
      5  32ea					      SUBROUTINE
    720  32ea					      SUBROUTINE
    721  32ea
    722  32ea							; Move has been selected
    723  32ea
    724  32ea		       a9 ff		      lda	#-1
    725  32ec		       85 88		      sta	cursorX12
    726  32ee
    727  32ee		       a5 85		      lda	fromX12
    728  32f0		       85 87		      sta	originX12
    729  32f2		       20 12 fd 	      jsr	GetPiece	; from the movelist
    730  32f5
    731  32f5		       a4 85		      ldy	fromX12
    732  32f7		       20 ea fc 	      jsr	GetBoard	; get the piece from the board itself
    733  32fa
    734  32fa		       45 98		      eor	fromPiece
    735  32fc		       29 0f		      and	#PIECE_MASK	; if not the same piece board/movelist...
    736  32fe		       d0 05		      bne	.promote	; promote a pawn
    737  3300
      0  3300					      PHASE	AI_MoveIsSelected
      1  3300		       a9 15		      lda	#AI_MoveIsSelected
      2  3302		       85 8c		      sta	aiState
    739  3304		       60		      rts
    740  3305
      0  3305				   .promote   PHASE	AI_PromotePawnStart
      1  3305		       a9 1f		      lda	#AI_PromotePawnStart
      2  3307		       85 8c		      sta	aiState
    742  3309		       60		      rts
    743  330a
    744  330a
    745  330a							;---------------------------------------------------------------------------------------------------
    746  330a
      0  330a					      DEF	aiPromotePawnStart
      1  330a				   BANK_aiPromotePawnStart SET	_CURRENT_BANK
      2  330a				   aiPromotePawnStart
      3  330a				   TEMPORARY_VAR SET	Overlay
      4  330a				   TEMPORARY_OFFSET SET	0
      5  330a					      SUBROUTINE
    748  330a					      SUBROUTINE
    749  330a
    750  330a		       ad 84 02 	      lda	INTIM
    751  330d		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    752  330f		       90 18		      bcc	.exit
    753  3311
    754  3311		       a9 00		      lda	#0
    755  3313		       85 8f		      sta	aiFlashPhase
    756  3315		       85 8d		      sta	aiFlashDelay
    757  3317
    758  3317		       a4 86		      ldy	toX12
    759  3319		       84 80		      sty	squareToDraw
    760  331b
    761  331b		       20 ea fc 	      jsr	GetBoard
    762  331e		       29 0f		      and	#PIECE_MASK
    763  3320		       f0 03		      beq	.empty
    764  3322
    765  3322		       20 4e fd 	      jsr	CopySinglePiece	; remove any capturable piece for display purposes
    766  3325
      0  3325				   .empty     PHASE	AI_RollPromotionPiece
      1  3325		       a9 20		      lda	#AI_RollPromotionPiece
      2  3327		       85 8c		      sta	aiState
    768  3329		       60	   .exit      rts
    769  332a
    770  332a
    771  332a							;---------------------------------------------------------------------------------------------------
    772  332a
      0  332a					      DEF	aiRollPromotionPiece
      1  332a				   BANK_aiRollPromotionPiece SET	_CURRENT_BANK
      2  332a				   aiRollPromotionPiece
      3  332a				   TEMPORARY_VAR SET	Overlay
      4  332a				   TEMPORARY_OFFSET SET	0
      5  332a					      SUBROUTINE
    774  332a					      SUBROUTINE
    775  332a
    776  332a							; Flash the '?' and wait for an UDLR move
    777  332a
    778  332a		       ad 84 02 	      lda	INTIM
    779  332d		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    780  332f		       90 28		      bcc	.exit
    781  3331
    782  3331		       ad 80 02 	      lda	SWCHA
    783  3334		       29 f0		      and	#$F0
    784  3336		       c9 f0		      cmp	#$F0
    785  3338		       f0 0a		      beq	.nojoy
    786  333a
    787  333a		       a9 00		      lda	#0
    788  333c		       85 8d		      sta	aiFlashDelay
    789  333e
    790  333e		       a5 8f		      lda	aiFlashPhase
    791  3340		       29 01		      and	#1
    792  3342		       f0 16		      beq	.even
    793  3344
    794  3344		       c6 8d	   .nojoy     dec	aiFlashDelay
    795  3346		       10 11		      bpl	.exit
    796  3348
    797  3348		       a9 0a		      lda	#10
    798  334a		       85 8d		      sta	aiFlashDelay
    799  334c
    800  334c		       a2 20		      ldx	#INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0
    801  334e		       a5 97		      lda	sideToMove
    802  3350		       10 02		      bpl	.wtm
    803  3352		       a2 68		      ldx	#INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_0
    804  3354				   .wtm
    805  3354		       20 ac fd 	      jsr	showPromoteOptions
    806  3357
    807  3357		       e6 8f		      inc	aiFlashPhase
    808  3359
    809  3359		       60	   .exit      rts
    810  335a
    811  335a
    812  335a		       a9 03	   .even      lda	#3	; QUEEN
    813  335c		       85 98		      sta	fromPiece	; cycles as index to NBRQ
    814  335e
    815  335e		       e6 8f		      inc	aiFlashPhase
    816  3360
    817  3360
    818  3360		       a2 14		      ldx	#INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0	;TODO: fix for colour
    819  3362		       a5 97		      lda	sideToMove
    820  3364		       10 02		      bpl	.whiteToMove
    821  3366		       a2 5c		      ldx	#INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    822  3368				   .whiteToMove
    823  3368
    824  3368		       20 ac fd 	      jsr	showPromoteOptions
    825  336b
      0  336b					      PHASE	AI_ChooseDebounce
      1  336b		       a9 22		      lda	#AI_ChooseDebounce
      2  336d		       85 8c		      sta	aiState
    827  336f		       60		      rts
    828  3370
    829  3370
    830  3370							;---------------------------------------------------------------------------------------------------
    831  3370
      0  3370					      DEF	aiChoosePromotePiece
      1  3370				   BANK_aiChoosePromotePiece SET	_CURRENT_BANK
      2  3370				   aiChoosePromotePiece
      3  3370				   TEMPORARY_VAR SET	Overlay
      4  3370				   TEMPORARY_OFFSET SET	0
      5  3370					      SUBROUTINE
    833  3370					      SUBROUTINE
    834  3370
    835  3370							; Question-mark phase has exited via joystick direction
    836  3370							; Now we cycle through the selectable pieces
    837  3370
    838  3370		       ad 84 02 	      lda	INTIM
    839  3373		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
    840  3375		       90 40		      bcc	.exit
    841  3377
    842  3377		       a5 4c		      lda	INPT4
    843  3379		       30 0a		      bmi	.nobut	; no press
    844  337b
    845  337b							; button pressed but make sure phase is correct for exit
    846  337b
    847  337b		       a9 00		      lda	#0
    848  337d		       85 8d		      sta	aiFlashDelay
    849  337f
    850  337f		       a5 8f		      lda	aiFlashPhase
    851  3381		       29 01		      and	#1
    852  3383		       f0 33		      beq	.chosen	; button pressed --> selection made
    853  3385
    854  3385				   .nobut
    855  3385		       ad 80 02 	      lda	SWCHA
    856  3388		       29 f0		      and	#$F0
    857  338a		       c9 f0		      cmp	#$F0
    858  338c		       f0 17		      beq	.odd	; no direction pressed
    859  338e
    860  338e		       4a		      lsr
    861  338f		       4a		      lsr
    862  3390		       4a		      lsr
    863  3391		       4a		      lsr
    864  3392		       a8		      tay
    865  3393
    866  3393							; joystick but make sure phase is correct
    867  3393
    868  3393		       a5 8f		      lda	aiFlashPhase
    869  3395		       4a		      lsr
    870  3396		       b0 0d		      bcs	.odd	; must wait until piece undrawn
    871  3398
    872  3398							; cycle to the next promotable piece (N/B/R/Q)
    873  3398							; TODO; use joy table for mod instead of just incrementing all the time
    874  3398
    875  3398							;clc
    876  3398		       a5 98		      lda	fromPiece
    877  339a		       79 33 f1 	      adc	JoyCombined,y
    878  339d		       29 03		      and	#3
    879  339f		       85 98		      sta	fromPiece
    880  33a1
      0  33a1					      PHASE	AI_ChooseDebounce	; wait for release
      1  33a1		       a9 22		      lda	#AI_ChooseDebounce
      2  33a3		       85 8c		      sta	aiState
    882  33a5
    883  33a5		       c6 8d	   .odd       dec	aiFlashDelay
    884  33a7		       10 0e		      bpl	.exit
    885  33a9
    886  33a9		       a9 0a	   .force     lda	#10
    887  33ab		       85 8d		      sta	aiFlashDelay
    888  33ad
    889  33ad		       e6 8f		      inc	aiFlashPhase
    890  33af
    891  33af		       a4 98		      ldy	fromPiece
    892  33b1		       be d3 f3 	      ldx	promotePiece,y
    893  33b4		       20 ac fd 	      jsr	showPromoteOptions
    894  33b7
    895  33b7		       60	   .exit      rts
    896  33b8
    897  33b8
    898  33b8				   .chosen
    899  33b8		       a5 98		      lda	fromPiece
    900  33ba		       29 0f		      and	#PIECE_MASK
    901  33bc		       aa		      tax
    902  33bd
    903  33bd		       bd d7 f3 	      lda	promoteType,x
    904  33c0		       85 98		      sta	fromPiece
    905  33c2
    906  33c2		       a4 86		      ldy	toX12
    907  33c4		       20 ea fc 	      jsr	GetBoard
    908  33c7		       29 0f		      and	#PIECE_MASK
    909  33c9		       f0 03		      beq	.nothing
    910  33cb
    911  33cb		       20 4e fd 	      jsr	CopySinglePiece	; put back whatever was there to start
    912  33ce
      0  33ce				   .nothing   PHASE	AI_MoveIsSelected
      1  33ce		       a9 15		      lda	#AI_MoveIsSelected
      2  33d0		       85 8c		      sta	aiState
    914  33d2		       60		      rts
    915  33d3
      0  33d3					      ALLOCATE	promotePiece, 4
      0  33d3					      OPTIONAL_PAGEBREAK	"Table", 4
     12  33d3					      LIST	ON
      0  33d3					      DEF	promotePiece
      1  33d3				   BANK_promotePiece SET	_CURRENT_BANK
      2  33d3				   promotePiece
      3  33d3				   TEMPORARY_VAR SET	Overlay
      4  33d3				   TEMPORARY_OFFSET SET	0
      5  33d3					      SUBROUTINE
    917  33d3		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    918  33d4		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    919  33d5		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    920  33d6		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    921  33d7
      0  33d7					      ALLOCATE	promoteType,4
      0  33d7					      OPTIONAL_PAGEBREAK	"Table", 4
     12  33d7					      LIST	ON
      0  33d7					      DEF	promoteType
      1  33d7				   BANK_promoteType SET	_CURRENT_BANK
      2  33d7				   promoteType
      3  33d7				   TEMPORARY_VAR SET	Overlay
      4  33d7				   TEMPORARY_OFFSET SET	0
      5  33d7					      SUBROUTINE
    923  33d7		       03 04 05 06	      .byte.b	KNIGHT, BISHOP, ROOK, QUEEN
    924  33db
    925  33db
    926  33db							;---------------------------------------------------------------------------------------------------
    927  33db
      0  33db					      DEF	aiChooseDebounce
      1  33db				   BANK_aiChooseDebounce SET	_CURRENT_BANK
      2  33db				   aiChooseDebounce
      3  33db				   TEMPORARY_VAR SET	Overlay
      4  33db				   TEMPORARY_OFFSET SET	0
      5  33db					      SUBROUTINE
    929  33db					      SUBROUTINE
    930  33db
    931  33db							; We've changed promotion piece, but wait for joystick to be released
    932  33db
    933  33db		       ad 80 02 	      lda	SWCHA
    934  33de		       29 f0		      and	#$F0
    935  33e0		       c9 f0		      cmp	#$F0
    936  33e2		       d0 08		      bne	.exit	; wait while joystick still pressed
    937  33e4
    938  33e4		       a9 01		      lda	#1
    939  33e6		       85 8d		      sta	aiFlashDelay
    940  33e8
      0  33e8					      PHASE	AI_ChoosePromotePiece
      1  33e8		       a9 21		      lda	#AI_ChoosePromotePiece
      2  33ea		       85 8c		      sta	aiState
    942  33ec		       60	   .exit      rts
    943  33ed
    944  33ed
    945  33ed							;---------------------------------------------------------------------------------------------------
    946  33ed
    947  3400		       00 00 00 00*	      align	256
      0  3400					      DEF	PositionSprites
      1  3400				   BANK_PositionSprites SET	_CURRENT_BANK
      2  3400				   PositionSprites
      3  3400				   TEMPORARY_VAR SET	Overlay
      4  3400				   TEMPORARY_OFFSET SET	0
      5  3400					      SUBROUTINE
    949  3400					      SUBROUTINE
    950  3400
    951  3400		       a5 88		      lda	cursorX12
    952  3402		       38		      sec
    953  3403		       e9 0a	   .sub10     sbc	#10
    954  3405		       b0 fc		      bcs	.sub10
    955  3407		       69 08		      adc	#8
    956  3409		       a8		      tay
    957  340a
    958  340a		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    959  340c
    960  340c		       b9 30 f4 	      lda	colToPixel,y
    961  340f
    962  340f		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    963  3410		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    964  3412		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    965  3414
    966  3414		       a8		      tay
    967  3415		       b9 30 f3 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    968  3418		       85 60		      sta	HMP0
    969  341a		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    970  341c
    971  341c		       85 42		      sta	WSYNC
    972  341e		       85 6a		      sta	HMOVE
    973  3420
    974  3420		       60		      rts
    975  3421
    976  3421							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    977  3421							; fine adjustment value. This table is on a page boundary to guarantee the processor
    978  3421							; will cross a page boundary and waste a cycle in order to be at the precise position
    979  3421							; for a RESP0,x write
    980  3421
    981  3421				   fineAdjustBegin
    982  3421
    983  3421		       70		      DC.B	%01110000	; Left 7
    984  3422		       60		      DC.B	%01100000	; Left 6
    985  3423		       50		      DC.B	%01010000	; Left 5
    986  3424		       40		      DC.B	%01000000	; Left 4
    987  3425		       30		      DC.B	%00110000	; Left 3
    988  3426		       20		      DC.B	%00100000	; Left 2
    989  3427		       10		      DC.B	%00010000	; Left 1
    990  3428		       00		      DC.B	%00000000	; No movement.
    991  3429		       f0		      DC.B	%11110000	; Right 1
    992  342a		       e0		      DC.B	%11100000	; Right 2
    993  342b		       d0		      DC.B	%11010000	; Right 3
    994  342c		       c0		      DC.B	%11000000	; Right 4
    995  342d		       b0		      DC.B	%10110000	; Right 5
    996  342e		       a0		      DC.B	%10100000	; Right 6
    997  342f		       90		      DC.B	%10010000	; Right 7
    998  3430
    999  3430		       f3 30	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
   1000  3430
   1001  3430
      0  3430					      ALLOCATE	colToPixel, 8
      0  3430					      OPTIONAL_PAGEBREAK	"Table", 8
     12  3430					      LIST	ON
      0  3430					      DEF	colToPixel
      1  3430				   BANK_colToPixel SET	_CURRENT_BANK
      2  3430				   colToPixel
      3  3430				   TEMPORARY_VAR SET	Overlay
      4  3430				   TEMPORARY_OFFSET SET	0
      5  3430					      SUBROUTINE
   1003  3430		       00 14 28 3c*	      .byte.b	0,20,40,60,80,100,120,140
   1004  3438
   1005  3438							;---------------------------------------------------------------------------------------------------
   1006  3438
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  3438					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3438					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     12  3438					      LIST	ON
      0  3438					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3438				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3438				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3438				   TEMPORARY_VAR SET	Overlay
      4  3438				   TEMPORARY_OFFSET SET	0
      5  3438					      SUBROUTINE
      3  3438		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3450		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3468		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  3480					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3480					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     12  3480					      LIST	ON
      0  3480					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3480				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3480				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3480				   TEMPORARY_VAR SET	Overlay
      4  3480				   TEMPORARY_OFFSET SET	0
      5  3480					      SUBROUTINE
      3  3480		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3498		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  34b0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  34c8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  34c8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     12  3500					      LIST	ON
      0  3500					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3500				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3500				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3500				   TEMPORARY_VAR SET	Overlay
      4  3500				   TEMPORARY_OFFSET SET	0
      5  3500					      SUBROUTINE
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  3548					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
     12  3548					      LIST	ON
      0  3548					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3548				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3548				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3548				   TEMPORARY_VAR SET	Overlay
      4  3548				   TEMPORARY_OFFSET SET	0
      5  3548					      SUBROUTINE
      3  3548		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  3590					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     12  3590					      LIST	ON
      0  3590					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3590				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3590				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3590				   TEMPORARY_VAR SET	Overlay
      4  3590				   TEMPORARY_OFFSET SET	0
      5  3590					      SUBROUTINE
      3  3590		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  35a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  35d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     12  3600					      LIST	ON
      0  3600					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3600				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3600				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3600				   TEMPORARY_VAR SET	Overlay
      4  3600				   TEMPORARY_OFFSET SET	0
      5  3600					      SUBROUTINE
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  3630		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  3648					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
     12  3648					      LIST	ON
      0  3648					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3648				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3648				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3648				   TEMPORARY_VAR SET	Overlay
      4  3648				   TEMPORARY_OFFSET SET	0
      5  3648					      SUBROUTINE
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  3690					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     12  3690					      LIST	ON
      0  3690					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3690				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3690				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3690				   TEMPORARY_VAR SET	Overlay
      4  3690				   TEMPORARY_OFFSET SET	0
      5  3690					      SUBROUTINE
      3  3690		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE BANK_StateMachine.asm
   1015  36d8
   1016  36d8							;---------------------------------------------------------------------------------------------------
   1017  36d8
      0  36d8					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  36d8		       06 d8	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $6d8 , FREE= $128
      2  36d8					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  36d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  36d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  36d8				  -	      ERR
      6  36d8					      endif
   1019  36d8
   1020  36d8
   1021  36d8							;---------------------------------------------------------------------------------------------------
   1022  36d8
   1023  36d8							; EOF
------- FILE ./chess.asm
------- FILE BANK_TEXT_OVERLAYS.asm LEVEL 2 PASS 2
      0  36d8					      include	"BANK_TEXT_OVERLAYS.asm"
      0  36d8					      NEWBANK	TEXT_OVERLAYS
      1  3802 ????				      SEG	TEXT_OVERLAYS
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   TEXT_OVERLAYS SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	TEXT_OVERLAYS
      2  3800
      3  3800
      4  3800
      5  3800
      6  3800				   sample
      7  3800		       48 aa		      .byte.b	72,%10101010
      8  3802
      9  3802
     10  3802
     11  3802							;EOF
------- FILE ./chess.asm
    481  3802
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  3802					      include	"titleScreen.asm"
      0  3802					      NEWBANK	TITLESCREEN
      1  47c0 ????				      SEG	TITLESCREEN
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   TITLESCREEN SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	TITLESCREEN
      2  4000
      3  4000				   OverscanTime2
      4  4000		       1a 1a		      .byte.b	26, 26
      5  4002		       20 20		      .byte.b	32, 32
      6  4004
      7  4004				   colvec
      8  4004		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  4008
     10  4008
     11  4008		       32 32	   VBlankTime .byte.b	50,50
     12  400a
      0  400a					      DEF	TitleScreen
      1  400a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  400a				   TitleScreen
      3  400a				   TEMPORARY_VAR SET	Overlay
      4  400a				   TEMPORARY_OFFSET SET	0
      5  400a					      SUBROUTINE
     14  400a					      SUBROUTINE
     15  400a
      0  400a					      VAR	__colour_table, 2
      1  400a		       00 a0	   __colour_table =	TEMPORARY_VAR
      2  400a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  400a
      4  400a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  400a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  400a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  400a					      ENDIF
      8  400a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  400a				  -	      ECHO	"Temporary Variable", __colour_table, "overflow!"
     10  400a				  -	      ERR
     11  400a					      ENDIF
     12  400a					      LIST	ON
     17  400a
     18  400a							; Start of new frame
     19  400a
     20  400a							; Start of vertical blank processing
     21  400a
     22  400a				   TitleSequence
     23  400a
     24  400a		       a9 00		      lda	#%00000000
     25  400c		       85 4a		      sta	CTRLPF
     26  400e		       85 49		      sta	COLUBK
     27  4010
     28  4010		       a2 00		      ldx	#0	;Platform
     29  4012		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     30  4014		       85 a0		      sta	__colour_table
     31  4016		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     32  4018		       85 a1		      sta	__colour_table+1
     33  401a
     34  401a							;		  sta rndHi
     35  401a							;		  sta rnd
     36  401a
     37  401a
     38  401a				  -	      if	0
     39  401a				  -	      lda	#0
     40  401a				  -	      sta	digit
     41  401a				  -	      lda	#$10
     42  401a				  -	      sta	digit+1
     43  401a				  -	      lda	#$20
     44  401a				  -	      sta	digit+2
     45  401a					      endif
     46  401a
     47  401a
     48  401a
     49  401a
      0  401a					      RESYNC
      1  401a
      2  401a		       a9 02		      lda	#%10
      3  401c		       85 41		      sta	VBLANK
      4  401e
      5  401e		       a2 08		      ldx	#8
      6  4020				   .loopResync
      0  4020					      VERTICAL_SYNC
      1  4020		       a9 0e		      lda	#%1110
      2  4022		       85 42	   .VSLP1     sta	WSYNC
      3  4024		       85 40		      sta	VSYNC
      4  4026		       4a		      lsr
      5  4027		       d0 f9		      bne	.VSLP1
      8  4029
      9  4029		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  402b		       a5 9b		      lda	Platform
     11  402d		       49 02		      eor	#PAL_50
     12  402f		       d0 02		      bne	.ntsc
     13  4031		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  4033				   .ntsc
     15  4033				   .loopWait
     16  4033		       85 42		      sta	WSYNC
     17  4035		       85 42		      sta	WSYNC
     18  4037		       88		      dey
     19  4038		       d0 f9		      bne	.loopWait
     20  403a		       ca		      dex
     21  403b		       d0 e3		      bne	.loopResync
     51  403d
     52  403d				   RestartFrame0
     53  403d
     54  403d				  -	      if	0
     55  403d				  -	      ldx	#2
     56  403d				  -rollcols   clc
     57  403d				  -	      lda	digit+2
     58  403d				  -	      adc	#$10
     59  403d				  -	      sta	digit+2
     60  403d				  -	      bcc	finxc
     61  403d				  -	      dex
     62  403d				  -	      bpl	rollcols
     63  403d				  -finxc
     64  403d					      endif
     65  403d
      0  403d					      DEF	RestartFrame
      1  403d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  403d				   RestartFrame
      3  403d				   TEMPORARY_VAR SET	Overlay
      4  403d				   TEMPORARY_OFFSET SET	0
      5  403d					      SUBROUTINE
     67  403d		       a9 00		      LDA	#0
     68  403f		       a9 0e		      lda	#%1110	; VSYNC ON
     69  4041		       85 42	   .loopVSync2 sta	WSYNC
     70  4043		       85 40		      sta	VSYNC
     71  4045		       4a		      lsr
     72  4046		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     73  4048
     74  4048							;------------------------------------------------------------------
     75  4048
     76  4048		       a6 9b		      ldx	Platform
     77  404a		       bc 08 f0 	      ldy	VBlankTime,x
     78  404d		       8c 96 02 	      sty	TIM64T
     79  4050
     80  4050
     81  4050				  -	      if	0
     82  4050				  -	      lda	SWCHB
     83  4050				  -	      rol
     84  4050				  -	      rol
     85  4050				  -	      rol
     86  4050				  -	      and	#%11
     87  4050				  -	      eor	#PAL
     88  4050				  -	      cmp	Platform
     89  4050				  -	      beq	platOK
     90  4050				  -	      sta	Platform
     91  4050				  -	      jmp	TitleSequence
     92  4050				  -platOK
     93  4050					      endif
     94  4050
     95  4050		       e6 81	   k2	      inc	rnd
     96  4052		       f0 fc		      beq	k2
     97  4054
     98  4054
     99  4054		       85 42	   VerticalBlank sta	WSYNC
    100  4056		       ad 84 02 	      lda	INTIM
    101  4059		       d0 f9		      bne	VerticalBlank
    102  405b		       85 41		      sta	VBLANK
    103  405d
    104  405d							;sta COLUBK
    105  405d
    106  405d							;------------------------------------------------------------------
    107  405d
    108  405d							; Do X scanlines of color-changing (our picture)
    109  405d
    110  405d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    111  405f		       a2 03	   SokoLogo   ldx	#3
    112  4061		       b1 a0	   triplet    lda	(__colour_table),y
    113  4063							;    eor digit-1,x
    114  4063		       85 42		      sta	WSYNC
    115  4065		       85 48		      sta	COLUPF	; 3
    116  4067
    117  4067		       b9 b0 f2 	      lda	COL_0,y	; 5
    118  406a		       85 4d		      sta	PF0	; 3   @11
    119  406c		       b9 88 f3 	      lda	COL_1,y	; 5
    120  406f		       85 4e		      sta	PF1	; 3   @19
    121  4071		       b9 60 f4 	      lda	COL_2,y	; 5
    122  4074		       85 4f		      sta	PF2	; 3   @27
    123  4076
    124  4076		       b9 38 f5 	      lda	COL_3,y	; 5
    125  4079		       85 4d		      sta	PF0	; 3   @35
      0  407b					      SLEEP	2	; @37
      1  407b				   .CYCLES    SET	2
      2  407b
      3  407b				  -	      IF	.CYCLES < 2
      4  407b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  407b				  -	      ERR
      6  407b					      ENDIF
      7  407b
      8  407b				  -	      IF	.CYCLES & 1
      9  407b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  407b				  -	      nop	0
     11  407b				  -	      ELSE
     12  407b				  -	      bit	VSYNC
     13  407b				  -	      ENDIF
     14  407b				  -.CYCLES    SET	.CYCLES - 3
     15  407b					      ENDIF
     16  407b
     17  407b					      REPEAT	.CYCLES / 2
     18  407b		       ea		      nop
     19  407c					      REPEND
    127  407c		       b9 10 f6 	      lda	COL_4,y	; 5
    128  407f		       85 4e		      sta	PF1	; 3   @45
      0  4081					      SLEEP	3	; @45
      1  4081				   .CYCLES    SET	3
      2  4081
      3  4081				  -	      IF	.CYCLES < 2
      4  4081				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4081				  -	      ERR
      6  4081					      ENDIF
      7  4081
      8  4081					      IF	.CYCLES & 1
      9  4081					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4081		       04 00		      nop	0
     11  4083				  -	      ELSE
     12  4083				  -	      bit	VSYNC
     13  4083					      ENDIF
     14  4083				   .CYCLES    SET	.CYCLES - 3
     15  4083					      ENDIF
     16  4083
     17  4083				  -	      REPEAT	.CYCLES / 2
     18  4083				  -	      nop
     19  4083					      REPEND
    130  4083		       b9 e8 f6 	      lda	COL_5,y	; 5
    131  4086		       85 4f		      sta	PF2	; 3
    132  4088
    133  4088		       88		      dey		; 2
    134  4089		       ca		      dex		; 2
    135  408a		       d0 d5		      bne	triplet	; 2(3)
    136  408c
    137  408c		       c0 ff		      cpy	#-1	; 2
    138  408e		       d0 cf		      bne	SokoLogo	; 2(3)
    139  4090
    140  4090							;lda #0
    141  4090							;sta PF0
    142  4090							;sta PF1
    143  4090							;sta PF2
    144  4090
    145  4090		       a6 9b		      ldx	Platform
    146  4092		       bd 00 f0 	      lda	OverscanTime2,x
    147  4095		       8d 96 02 	      sta	TIM64T
    148  4098
    149  4098				  -	      if	0
    150  4098				  -	      sta	WSYNC
    151  4098				  -	      sta	WSYNC
    152  4098				  -	      sta	WSYNC
    153  4098				  -	      sta	WSYNC
    154  4098				  -	      sta	WSYNC
    155  4098				  -	      SLEEP	8
    156  4098				  -	      jsr	SokoScreen
    157  4098				  -
    158  4098				  -	      lda	#0
    159  4098				  -	      sta	BoardScrollX
    160  4098				  -	      sta	BoardScrollY
    161  4098					      endif
    162  4098
    163  4098							;		ldy #63
    164  4098							;bot2		 sta WSYNC
    165  4098							;		dey
    166  4098							;		bpl bot2
    167  4098
    168  4098							;--------------------------------------------------------------------------
    169  4098
    170  4098		       a9 00		      lda	#0
    171  409a		       85 4d		      sta	PF0
    172  409c		       85 4e		      sta	PF1
    173  409e		       85 4f		      sta	PF2
    174  40a0
    175  40a0
      0  40a0					      NEXT_RANDOM
      1  40a0		       a5 81		      lda	rnd
      2  40a2		       4a		      lsr
      3  40a3		       90 02		      bcc	.skipEOR
      4  40a5		       49 fe		      eor	#RND_EOR_VAL
      5  40a7		       85 81	   .skipEOR   sta	rnd
    177  40a9
    178  40a9							; D1 VBLANK turns off beam
    179  40a9							; It needs to be turned on 37 scanlines later
    180  40a9
    181  40a9				   oscan
    182  40a9		       ad 84 02 	      lda	INTIM
    183  40ac		       d0 fb		      bne	oscan
    184  40ae
    185  40ae		       a9 42		      lda	#%01000010	; bit6 is not required
    186  40b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    187  40b2
    188  40b2				  -	      if	0
    189  40b2				  -	      inc	rnd
    190  40b2				  -	      bne	rdd
    191  40b2				  -	      inc	rndHi
    192  40b2				  -rdd
    193  40b2				  -
    194  40b2				  -	      dec	digitick
    195  40b2				  -	      bpl	ret2
    196  40b2				  -	      lda	#40
    197  40b2				  -	      sta	digitick
    198  40b2				  -
    199  40b2				  -	      jsr	Random
    200  40b2				  -	      and	#3
    201  40b2				  -	      beq	ret2
    202  40b2				  -	      tax
    203  40b2				  -	      jsr	Random
    204  40b2				  -	      and	#$F0
    205  40b2				  -	      sta	digit-1,x
    206  40b2				  -	      jmp	RestartFrame0
    207  40b2				  -
    208  40b2				  -ret2
    209  40b2					      endif
    210  40b2
    211  40b2
    212  40b2		       a5 4c		      lda	INPT4
    213  40b4		       10 03		      bpl	ret
    214  40b6
    215  40b6		       4c 3d f0 	      jmp	RestartFrame
    216  40b9
    217  40b9				   ret
    218  40b9		       60		      rts
    219  40ba
    220  40ba
    221  40ba
    222  40ba					      MAC	lumtable
    223  40ba							; {4} MIN LUM 1
    224  40ba							; {5} MIN LUM 2
    225  40ba							; {6} MIN LUM 3
    226  40ba
    227  40ba				   .LUM1      SET	{4}*256
    228  40ba				   .LUM2      SET	{5}*256
    229  40ba				   .LUM3      SET	{6}*256
    230  40ba
    231  40ba				   .STEP1     =	(256*({7}-{4}))/72
    232  40ba				   .STEP2     =	(256*({8}-{5}))/72
    233  40ba				   .STEP3     =	(256*({9}-{6}))/72
    234  40ba
    235  40ba					      REPEAT	72
    236  40ba					      .byte	{1}+(.LUM1/256)
    237  40ba					      .byte	{2}+(.LUM2/256)
    238  40ba					      .byte	{3}+(.LUM3/256)
    239  40ba
    240  40ba							;    ECHO {1}+(.LUM1/256)
    241  40ba							;    ECHO {2}+(.LUM1/256)
    242  40ba							;    ECHO {3}+(.LUM1/256)
    243  40ba
    244  40ba				   .LUM1      SET	.LUM1 + .STEP1
    245  40ba				   .LUM2      SET	.LUM2 + .STEP2
    246  40ba				   .LUM3      SET	.LUM3 + .STEP3
    247  40ba					      REPEND
    248  40ba					      ENDM		;{1}{2}{3} base colours
    249  40ba
    250  40ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    251  40ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    252  40ba
    253  4100		       00 00 00 00*	      align	256
    254  4100							;    ECHO "NTSC LUMS"
    255  4100				   colr_ntsc2
      0  4100					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  4100
      2  4100
      3  4100
      4  4100
      5  4100				   .LUM1      SET	$4*256
      6  4100				   .LUM2      SET	$6*256
      7  4100				   .LUM3      SET	$8*256
      8  4100
      9  4100		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  4100		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  4100		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  4100
     13  4100					      REPEAT	72
     14  4100		       44		      .byte.b	$40+(.LUM1/256)
     15  4101		       26		      .byte.b	$20+(.LUM2/256)
     16  4102		       98		      .byte.b	$90+(.LUM3/256)
     17  4103
     18  4103
     19  4103
     20  4103
     21  4103
     22  4103				   .LUM1      SET	.LUM1 + .STEP1
     23  4103				   .LUM2      SET	.LUM2 + .STEP2
     24  4103				   .LUM3      SET	.LUM3 + .STEP3
     13  4103					      REPEND
     14  4103		       44		      .byte.b	$40+(.LUM1/256)
     15  4104		       26		      .byte.b	$20+(.LUM2/256)
     16  4105		       98		      .byte.b	$90+(.LUM3/256)
     17  4106
     18  4106
     19  4106
     20  4106
     21  4106
     22  4106				   .LUM1      SET	.LUM1 + .STEP1
     23  4106				   .LUM2      SET	.LUM2 + .STEP2
     24  4106				   .LUM3      SET	.LUM3 + .STEP3
     13  4106					      REPEND
     14  4106		       44		      .byte.b	$40+(.LUM1/256)
     15  4107		       26		      .byte.b	$20+(.LUM2/256)
     16  4108		       98		      .byte.b	$90+(.LUM3/256)
     17  4109
     18  4109
     19  4109
     20  4109
     21  4109
     22  4109				   .LUM1      SET	.LUM1 + .STEP1
     23  4109				   .LUM2      SET	.LUM2 + .STEP2
     24  4109				   .LUM3      SET	.LUM3 + .STEP3
     13  4109					      REPEND
     14  4109		       44		      .byte.b	$40+(.LUM1/256)
     15  410a		       26		      .byte.b	$20+(.LUM2/256)
     16  410b		       98		      .byte.b	$90+(.LUM3/256)
     17  410c
     18  410c
     19  410c
     20  410c
     21  410c
     22  410c				   .LUM1      SET	.LUM1 + .STEP1
     23  410c				   .LUM2      SET	.LUM2 + .STEP2
     24  410c				   .LUM3      SET	.LUM3 + .STEP3
     13  410c					      REPEND
     14  410c		       44		      .byte.b	$40+(.LUM1/256)
     15  410d		       26		      .byte.b	$20+(.LUM2/256)
     16  410e		       98		      .byte.b	$90+(.LUM3/256)
     17  410f
     18  410f
     19  410f
     20  410f
     21  410f
     22  410f				   .LUM1      SET	.LUM1 + .STEP1
     23  410f				   .LUM2      SET	.LUM2 + .STEP2
     24  410f				   .LUM3      SET	.LUM3 + .STEP3
     13  410f					      REPEND
     14  410f		       44		      .byte.b	$40+(.LUM1/256)
     15  4110		       26		      .byte.b	$20+(.LUM2/256)
     16  4111		       98		      .byte.b	$90+(.LUM3/256)
     17  4112
     18  4112
     19  4112
     20  4112
     21  4112
     22  4112				   .LUM1      SET	.LUM1 + .STEP1
     23  4112				   .LUM2      SET	.LUM2 + .STEP2
     24  4112				   .LUM3      SET	.LUM3 + .STEP3
     13  4112					      REPEND
     14  4112		       44		      .byte.b	$40+(.LUM1/256)
     15  4113		       26		      .byte.b	$20+(.LUM2/256)
     16  4114		       98		      .byte.b	$90+(.LUM3/256)
     17  4115
     18  4115
     19  4115
     20  4115
     21  4115
     22  4115				   .LUM1      SET	.LUM1 + .STEP1
     23  4115				   .LUM2      SET	.LUM2 + .STEP2
     24  4115				   .LUM3      SET	.LUM3 + .STEP3
     13  4115					      REPEND
     14  4115		       44		      .byte.b	$40+(.LUM1/256)
     15  4116		       26		      .byte.b	$20+(.LUM2/256)
     16  4117		       98		      .byte.b	$90+(.LUM3/256)
     17  4118
     18  4118
     19  4118
     20  4118
     21  4118
     22  4118				   .LUM1      SET	.LUM1 + .STEP1
     23  4118				   .LUM2      SET	.LUM2 + .STEP2
     24  4118				   .LUM3      SET	.LUM3 + .STEP3
     13  4118					      REPEND
     14  4118		       44		      .byte.b	$40+(.LUM1/256)
     15  4119		       26		      .byte.b	$20+(.LUM2/256)
     16  411a		       98		      .byte.b	$90+(.LUM3/256)
     17  411b
     18  411b
     19  411b
     20  411b
     21  411b
     22  411b				   .LUM1      SET	.LUM1 + .STEP1
     23  411b				   .LUM2      SET	.LUM2 + .STEP2
     24  411b				   .LUM3      SET	.LUM3 + .STEP3
     13  411b					      REPEND
     14  411b		       44		      .byte.b	$40+(.LUM1/256)
     15  411c		       26		      .byte.b	$20+(.LUM2/256)
     16  411d		       98		      .byte.b	$90+(.LUM3/256)
     17  411e
     18  411e
     19  411e
     20  411e
     21  411e
     22  411e				   .LUM1      SET	.LUM1 + .STEP1
     23  411e				   .LUM2      SET	.LUM2 + .STEP2
     24  411e				   .LUM3      SET	.LUM3 + .STEP3
     13  411e					      REPEND
     14  411e		       44		      .byte.b	$40+(.LUM1/256)
     15  411f		       26		      .byte.b	$20+(.LUM2/256)
     16  4120		       98		      .byte.b	$90+(.LUM3/256)
     17  4121
     18  4121
     19  4121
     20  4121
     21  4121
     22  4121				   .LUM1      SET	.LUM1 + .STEP1
     23  4121				   .LUM2      SET	.LUM2 + .STEP2
     24  4121				   .LUM3      SET	.LUM3 + .STEP3
     13  4121					      REPEND
     14  4121		       44		      .byte.b	$40+(.LUM1/256)
     15  4122		       26		      .byte.b	$20+(.LUM2/256)
     16  4123		       98		      .byte.b	$90+(.LUM3/256)
     17  4124
     18  4124
     19  4124
     20  4124
     21  4124
     22  4124				   .LUM1      SET	.LUM1 + .STEP1
     23  4124				   .LUM2      SET	.LUM2 + .STEP2
     24  4124				   .LUM3      SET	.LUM3 + .STEP3
     13  4124					      REPEND
     14  4124		       44		      .byte.b	$40+(.LUM1/256)
     15  4125		       26		      .byte.b	$20+(.LUM2/256)
     16  4126		       98		      .byte.b	$90+(.LUM3/256)
     17  4127
     18  4127
     19  4127
     20  4127
     21  4127
     22  4127				   .LUM1      SET	.LUM1 + .STEP1
     23  4127				   .LUM2      SET	.LUM2 + .STEP2
     24  4127				   .LUM3      SET	.LUM3 + .STEP3
     13  4127					      REPEND
     14  4127		       44		      .byte.b	$40+(.LUM1/256)
     15  4128		       26		      .byte.b	$20+(.LUM2/256)
     16  4129		       98		      .byte.b	$90+(.LUM3/256)
     17  412a
     18  412a
     19  412a
     20  412a
     21  412a
     22  412a				   .LUM1      SET	.LUM1 + .STEP1
     23  412a				   .LUM2      SET	.LUM2 + .STEP2
     24  412a				   .LUM3      SET	.LUM3 + .STEP3
     13  412a					      REPEND
     14  412a		       44		      .byte.b	$40+(.LUM1/256)
     15  412b		       26		      .byte.b	$20+(.LUM2/256)
     16  412c		       98		      .byte.b	$90+(.LUM3/256)
     17  412d
     18  412d
     19  412d
     20  412d
     21  412d
     22  412d				   .LUM1      SET	.LUM1 + .STEP1
     23  412d				   .LUM2      SET	.LUM2 + .STEP2
     24  412d				   .LUM3      SET	.LUM3 + .STEP3
     13  412d					      REPEND
     14  412d		       44		      .byte.b	$40+(.LUM1/256)
     15  412e		       26		      .byte.b	$20+(.LUM2/256)
     16  412f		       98		      .byte.b	$90+(.LUM3/256)
     17  4130
     18  4130
     19  4130
     20  4130
     21  4130
     22  4130				   .LUM1      SET	.LUM1 + .STEP1
     23  4130				   .LUM2      SET	.LUM2 + .STEP2
     24  4130				   .LUM3      SET	.LUM3 + .STEP3
     13  4130					      REPEND
     14  4130		       44		      .byte.b	$40+(.LUM1/256)
     15  4131		       26		      .byte.b	$20+(.LUM2/256)
     16  4132		       98		      .byte.b	$90+(.LUM3/256)
     17  4133
     18  4133
     19  4133
     20  4133
     21  4133
     22  4133				   .LUM1      SET	.LUM1 + .STEP1
     23  4133				   .LUM2      SET	.LUM2 + .STEP2
     24  4133				   .LUM3      SET	.LUM3 + .STEP3
     13  4133					      REPEND
     14  4133		       44		      .byte.b	$40+(.LUM1/256)
     15  4134		       26		      .byte.b	$20+(.LUM2/256)
     16  4135		       98		      .byte.b	$90+(.LUM3/256)
     17  4136
     18  4136
     19  4136
     20  4136
     21  4136
     22  4136				   .LUM1      SET	.LUM1 + .STEP1
     23  4136				   .LUM2      SET	.LUM2 + .STEP2
     24  4136				   .LUM3      SET	.LUM3 + .STEP3
     13  4136					      REPEND
     14  4136		       44		      .byte.b	$40+(.LUM1/256)
     15  4137		       26		      .byte.b	$20+(.LUM2/256)
     16  4138		       98		      .byte.b	$90+(.LUM3/256)
     17  4139
     18  4139
     19  4139
     20  4139
     21  4139
     22  4139				   .LUM1      SET	.LUM1 + .STEP1
     23  4139				   .LUM2      SET	.LUM2 + .STEP2
     24  4139				   .LUM3      SET	.LUM3 + .STEP3
     13  4139					      REPEND
     14  4139		       44		      .byte.b	$40+(.LUM1/256)
     15  413a		       26		      .byte.b	$20+(.LUM2/256)
     16  413b		       98		      .byte.b	$90+(.LUM3/256)
     17  413c
     18  413c
     19  413c
     20  413c
     21  413c
     22  413c				   .LUM1      SET	.LUM1 + .STEP1
     23  413c				   .LUM2      SET	.LUM2 + .STEP2
     24  413c				   .LUM3      SET	.LUM3 + .STEP3
     13  413c					      REPEND
     14  413c		       44		      .byte.b	$40+(.LUM1/256)
     15  413d		       26		      .byte.b	$20+(.LUM2/256)
     16  413e		       98		      .byte.b	$90+(.LUM3/256)
     17  413f
     18  413f
     19  413f
     20  413f
     21  413f
     22  413f				   .LUM1      SET	.LUM1 + .STEP1
     23  413f				   .LUM2      SET	.LUM2 + .STEP2
     24  413f				   .LUM3      SET	.LUM3 + .STEP3
     13  413f					      REPEND
     14  413f		       44		      .byte.b	$40+(.LUM1/256)
     15  4140		       26		      .byte.b	$20+(.LUM2/256)
     16  4141		       98		      .byte.b	$90+(.LUM3/256)
     17  4142
     18  4142
     19  4142
     20  4142
     21  4142
     22  4142				   .LUM1      SET	.LUM1 + .STEP1
     23  4142				   .LUM2      SET	.LUM2 + .STEP2
     24  4142				   .LUM3      SET	.LUM3 + .STEP3
     13  4142					      REPEND
     14  4142		       44		      .byte.b	$40+(.LUM1/256)
     15  4143		       26		      .byte.b	$20+(.LUM2/256)
     16  4144		       98		      .byte.b	$90+(.LUM3/256)
     17  4145
     18  4145
     19  4145
     20  4145
     21  4145
     22  4145				   .LUM1      SET	.LUM1 + .STEP1
     23  4145				   .LUM2      SET	.LUM2 + .STEP2
     24  4145				   .LUM3      SET	.LUM3 + .STEP3
     13  4145					      REPEND
     14  4145		       44		      .byte.b	$40+(.LUM1/256)
     15  4146		       26		      .byte.b	$20+(.LUM2/256)
     16  4147		       98		      .byte.b	$90+(.LUM3/256)
     17  4148
     18  4148
     19  4148
     20  4148
     21  4148
     22  4148				   .LUM1      SET	.LUM1 + .STEP1
     23  4148				   .LUM2      SET	.LUM2 + .STEP2
     24  4148				   .LUM3      SET	.LUM3 + .STEP3
     13  4148					      REPEND
     14  4148		       44		      .byte.b	$40+(.LUM1/256)
     15  4149		       26		      .byte.b	$20+(.LUM2/256)
     16  414a		       98		      .byte.b	$90+(.LUM3/256)
     17  414b
     18  414b
     19  414b
     20  414b
     21  414b
     22  414b				   .LUM1      SET	.LUM1 + .STEP1
     23  414b				   .LUM2      SET	.LUM2 + .STEP2
     24  414b				   .LUM3      SET	.LUM3 + .STEP3
     13  414b					      REPEND
     14  414b		       44		      .byte.b	$40+(.LUM1/256)
     15  414c		       26		      .byte.b	$20+(.LUM2/256)
     16  414d		       98		      .byte.b	$90+(.LUM3/256)
     17  414e
     18  414e
     19  414e
     20  414e
     21  414e
     22  414e				   .LUM1      SET	.LUM1 + .STEP1
     23  414e				   .LUM2      SET	.LUM2 + .STEP2
     24  414e				   .LUM3      SET	.LUM3 + .STEP3
     13  414e					      REPEND
     14  414e		       44		      .byte.b	$40+(.LUM1/256)
     15  414f		       26		      .byte.b	$20+(.LUM2/256)
     16  4150		       98		      .byte.b	$90+(.LUM3/256)
     17  4151
     18  4151
     19  4151
     20  4151
     21  4151
     22  4151				   .LUM1      SET	.LUM1 + .STEP1
     23  4151				   .LUM2      SET	.LUM2 + .STEP2
     24  4151				   .LUM3      SET	.LUM3 + .STEP3
     13  4151					      REPEND
     14  4151		       44		      .byte.b	$40+(.LUM1/256)
     15  4152		       26		      .byte.b	$20+(.LUM2/256)
     16  4153		       98		      .byte.b	$90+(.LUM3/256)
     17  4154
     18  4154
     19  4154
     20  4154
     21  4154
     22  4154				   .LUM1      SET	.LUM1 + .STEP1
     23  4154				   .LUM2      SET	.LUM2 + .STEP2
     24  4154				   .LUM3      SET	.LUM3 + .STEP3
     13  4154					      REPEND
     14  4154		       44		      .byte.b	$40+(.LUM1/256)
     15  4155		       26		      .byte.b	$20+(.LUM2/256)
     16  4156		       98		      .byte.b	$90+(.LUM3/256)
     17  4157
     18  4157
     19  4157
     20  4157
     21  4157
     22  4157				   .LUM1      SET	.LUM1 + .STEP1
     23  4157				   .LUM2      SET	.LUM2 + .STEP2
     24  4157				   .LUM3      SET	.LUM3 + .STEP3
     13  4157					      REPEND
     14  4157		       44		      .byte.b	$40+(.LUM1/256)
     15  4158		       26		      .byte.b	$20+(.LUM2/256)
     16  4159		       98		      .byte.b	$90+(.LUM3/256)
     17  415a
     18  415a
     19  415a
     20  415a
     21  415a
     22  415a				   .LUM1      SET	.LUM1 + .STEP1
     23  415a				   .LUM2      SET	.LUM2 + .STEP2
     24  415a				   .LUM3      SET	.LUM3 + .STEP3
     13  415a					      REPEND
     14  415a		       44		      .byte.b	$40+(.LUM1/256)
     15  415b		       26		      .byte.b	$20+(.LUM2/256)
     16  415c		       98		      .byte.b	$90+(.LUM3/256)
     17  415d
     18  415d
     19  415d
     20  415d
     21  415d
     22  415d				   .LUM1      SET	.LUM1 + .STEP1
     23  415d				   .LUM2      SET	.LUM2 + .STEP2
     24  415d				   .LUM3      SET	.LUM3 + .STEP3
     13  415d					      REPEND
     14  415d		       44		      .byte.b	$40+(.LUM1/256)
     15  415e		       26		      .byte.b	$20+(.LUM2/256)
     16  415f		       98		      .byte.b	$90+(.LUM3/256)
     17  4160
     18  4160
     19  4160
     20  4160
     21  4160
     22  4160				   .LUM1      SET	.LUM1 + .STEP1
     23  4160				   .LUM2      SET	.LUM2 + .STEP2
     24  4160				   .LUM3      SET	.LUM3 + .STEP3
     13  4160					      REPEND
     14  4160		       44		      .byte.b	$40+(.LUM1/256)
     15  4161		       26		      .byte.b	$20+(.LUM2/256)
     16  4162		       98		      .byte.b	$90+(.LUM3/256)
     17  4163
     18  4163
     19  4163
     20  4163
     21  4163
     22  4163				   .LUM1      SET	.LUM1 + .STEP1
     23  4163				   .LUM2      SET	.LUM2 + .STEP2
     24  4163				   .LUM3      SET	.LUM3 + .STEP3
     13  4163					      REPEND
     14  4163		       44		      .byte.b	$40+(.LUM1/256)
     15  4164		       26		      .byte.b	$20+(.LUM2/256)
     16  4165		       98		      .byte.b	$90+(.LUM3/256)
     17  4166
     18  4166
     19  4166
     20  4166
     21  4166
     22  4166				   .LUM1      SET	.LUM1 + .STEP1
     23  4166				   .LUM2      SET	.LUM2 + .STEP2
     24  4166				   .LUM3      SET	.LUM3 + .STEP3
     13  4166					      REPEND
     14  4166		       44		      .byte.b	$40+(.LUM1/256)
     15  4167		       26		      .byte.b	$20+(.LUM2/256)
     16  4168		       98		      .byte.b	$90+(.LUM3/256)
     17  4169
     18  4169
     19  4169
     20  4169
     21  4169
     22  4169				   .LUM1      SET	.LUM1 + .STEP1
     23  4169				   .LUM2      SET	.LUM2 + .STEP2
     24  4169				   .LUM3      SET	.LUM3 + .STEP3
     13  4169					      REPEND
     14  4169		       44		      .byte.b	$40+(.LUM1/256)
     15  416a		       26		      .byte.b	$20+(.LUM2/256)
     16  416b		       98		      .byte.b	$90+(.LUM3/256)
     17  416c
     18  416c
     19  416c
     20  416c
     21  416c
     22  416c				   .LUM1      SET	.LUM1 + .STEP1
     23  416c				   .LUM2      SET	.LUM2 + .STEP2
     24  416c				   .LUM3      SET	.LUM3 + .STEP3
     13  416c					      REPEND
     14  416c		       44		      .byte.b	$40+(.LUM1/256)
     15  416d		       26		      .byte.b	$20+(.LUM2/256)
     16  416e		       98		      .byte.b	$90+(.LUM3/256)
     17  416f
     18  416f
     19  416f
     20  416f
     21  416f
     22  416f				   .LUM1      SET	.LUM1 + .STEP1
     23  416f				   .LUM2      SET	.LUM2 + .STEP2
     24  416f				   .LUM3      SET	.LUM3 + .STEP3
     13  416f					      REPEND
     14  416f		       44		      .byte.b	$40+(.LUM1/256)
     15  4170		       26		      .byte.b	$20+(.LUM2/256)
     16  4171		       98		      .byte.b	$90+(.LUM3/256)
     17  4172
     18  4172
     19  4172
     20  4172
     21  4172
     22  4172				   .LUM1      SET	.LUM1 + .STEP1
     23  4172				   .LUM2      SET	.LUM2 + .STEP2
     24  4172				   .LUM3      SET	.LUM3 + .STEP3
     13  4172					      REPEND
     14  4172		       44		      .byte.b	$40+(.LUM1/256)
     15  4173		       26		      .byte.b	$20+(.LUM2/256)
     16  4174		       98		      .byte.b	$90+(.LUM3/256)
     17  4175
     18  4175
     19  4175
     20  4175
     21  4175
     22  4175				   .LUM1      SET	.LUM1 + .STEP1
     23  4175				   .LUM2      SET	.LUM2 + .STEP2
     24  4175				   .LUM3      SET	.LUM3 + .STEP3
     13  4175					      REPEND
     14  4175		       44		      .byte.b	$40+(.LUM1/256)
     15  4176		       26		      .byte.b	$20+(.LUM2/256)
     16  4177		       98		      .byte.b	$90+(.LUM3/256)
     17  4178
     18  4178
     19  4178
     20  4178
     21  4178
     22  4178				   .LUM1      SET	.LUM1 + .STEP1
     23  4178				   .LUM2      SET	.LUM2 + .STEP2
     24  4178				   .LUM3      SET	.LUM3 + .STEP3
     13  4178					      REPEND
     14  4178		       44		      .byte.b	$40+(.LUM1/256)
     15  4179		       26		      .byte.b	$20+(.LUM2/256)
     16  417a		       98		      .byte.b	$90+(.LUM3/256)
     17  417b
     18  417b
     19  417b
     20  417b
     21  417b
     22  417b				   .LUM1      SET	.LUM1 + .STEP1
     23  417b				   .LUM2      SET	.LUM2 + .STEP2
     24  417b				   .LUM3      SET	.LUM3 + .STEP3
     13  417b					      REPEND
     14  417b		       44		      .byte.b	$40+(.LUM1/256)
     15  417c		       26		      .byte.b	$20+(.LUM2/256)
     16  417d		       98		      .byte.b	$90+(.LUM3/256)
     17  417e
     18  417e
     19  417e
     20  417e
     21  417e
     22  417e				   .LUM1      SET	.LUM1 + .STEP1
     23  417e				   .LUM2      SET	.LUM2 + .STEP2
     24  417e				   .LUM3      SET	.LUM3 + .STEP3
     13  417e					      REPEND
     14  417e		       44		      .byte.b	$40+(.LUM1/256)
     15  417f		       26		      .byte.b	$20+(.LUM2/256)
     16  4180		       98		      .byte.b	$90+(.LUM3/256)
     17  4181
     18  4181
     19  4181
     20  4181
     21  4181
     22  4181				   .LUM1      SET	.LUM1 + .STEP1
     23  4181				   .LUM2      SET	.LUM2 + .STEP2
     24  4181				   .LUM3      SET	.LUM3 + .STEP3
     13  4181					      REPEND
     14  4181		       44		      .byte.b	$40+(.LUM1/256)
     15  4182		       26		      .byte.b	$20+(.LUM2/256)
     16  4183		       98		      .byte.b	$90+(.LUM3/256)
     17  4184
     18  4184
     19  4184
     20  4184
     21  4184
     22  4184				   .LUM1      SET	.LUM1 + .STEP1
     23  4184				   .LUM2      SET	.LUM2 + .STEP2
     24  4184				   .LUM3      SET	.LUM3 + .STEP3
     13  4184					      REPEND
     14  4184		       44		      .byte.b	$40+(.LUM1/256)
     15  4185		       26		      .byte.b	$20+(.LUM2/256)
     16  4186		       98		      .byte.b	$90+(.LUM3/256)
     17  4187
     18  4187
     19  4187
     20  4187
     21  4187
     22  4187				   .LUM1      SET	.LUM1 + .STEP1
     23  4187				   .LUM2      SET	.LUM2 + .STEP2
     24  4187				   .LUM3      SET	.LUM3 + .STEP3
     13  4187					      REPEND
     14  4187		       44		      .byte.b	$40+(.LUM1/256)
     15  4188		       26		      .byte.b	$20+(.LUM2/256)
     16  4189		       98		      .byte.b	$90+(.LUM3/256)
     17  418a
     18  418a
     19  418a
     20  418a
     21  418a
     22  418a				   .LUM1      SET	.LUM1 + .STEP1
     23  418a				   .LUM2      SET	.LUM2 + .STEP2
     24  418a				   .LUM3      SET	.LUM3 + .STEP3
     13  418a					      REPEND
     14  418a		       44		      .byte.b	$40+(.LUM1/256)
     15  418b		       26		      .byte.b	$20+(.LUM2/256)
     16  418c		       98		      .byte.b	$90+(.LUM3/256)
     17  418d
     18  418d
     19  418d
     20  418d
     21  418d
     22  418d				   .LUM1      SET	.LUM1 + .STEP1
     23  418d				   .LUM2      SET	.LUM2 + .STEP2
     24  418d				   .LUM3      SET	.LUM3 + .STEP3
     13  418d					      REPEND
     14  418d		       44		      .byte.b	$40+(.LUM1/256)
     15  418e		       26		      .byte.b	$20+(.LUM2/256)
     16  418f		       98		      .byte.b	$90+(.LUM3/256)
     17  4190
     18  4190
     19  4190
     20  4190
     21  4190
     22  4190				   .LUM1      SET	.LUM1 + .STEP1
     23  4190				   .LUM2      SET	.LUM2 + .STEP2
     24  4190				   .LUM3      SET	.LUM3 + .STEP3
     13  4190					      REPEND
     14  4190		       44		      .byte.b	$40+(.LUM1/256)
     15  4191		       26		      .byte.b	$20+(.LUM2/256)
     16  4192		       98		      .byte.b	$90+(.LUM3/256)
     17  4193
     18  4193
     19  4193
     20  4193
     21  4193
     22  4193				   .LUM1      SET	.LUM1 + .STEP1
     23  4193				   .LUM2      SET	.LUM2 + .STEP2
     24  4193				   .LUM3      SET	.LUM3 + .STEP3
     13  4193					      REPEND
     14  4193		       44		      .byte.b	$40+(.LUM1/256)
     15  4194		       26		      .byte.b	$20+(.LUM2/256)
     16  4195		       98		      .byte.b	$90+(.LUM3/256)
     17  4196
     18  4196
     19  4196
     20  4196
     21  4196
     22  4196				   .LUM1      SET	.LUM1 + .STEP1
     23  4196				   .LUM2      SET	.LUM2 + .STEP2
     24  4196				   .LUM3      SET	.LUM3 + .STEP3
     13  4196					      REPEND
     14  4196		       44		      .byte.b	$40+(.LUM1/256)
     15  4197		       26		      .byte.b	$20+(.LUM2/256)
     16  4198		       98		      .byte.b	$90+(.LUM3/256)
     17  4199
     18  4199
     19  4199
     20  4199
     21  4199
     22  4199				   .LUM1      SET	.LUM1 + .STEP1
     23  4199				   .LUM2      SET	.LUM2 + .STEP2
     24  4199				   .LUM3      SET	.LUM3 + .STEP3
     13  4199					      REPEND
     14  4199		       44		      .byte.b	$40+(.LUM1/256)
     15  419a		       26		      .byte.b	$20+(.LUM2/256)
     16  419b		       98		      .byte.b	$90+(.LUM3/256)
     17  419c
     18  419c
     19  419c
     20  419c
     21  419c
     22  419c				   .LUM1      SET	.LUM1 + .STEP1
     23  419c				   .LUM2      SET	.LUM2 + .STEP2
     24  419c				   .LUM3      SET	.LUM3 + .STEP3
     13  419c					      REPEND
     14  419c		       44		      .byte.b	$40+(.LUM1/256)
     15  419d		       26		      .byte.b	$20+(.LUM2/256)
     16  419e		       98		      .byte.b	$90+(.LUM3/256)
     17  419f
     18  419f
     19  419f
     20  419f
     21  419f
     22  419f				   .LUM1      SET	.LUM1 + .STEP1
     23  419f				   .LUM2      SET	.LUM2 + .STEP2
     24  419f				   .LUM3      SET	.LUM3 + .STEP3
     13  419f					      REPEND
     14  419f		       44		      .byte.b	$40+(.LUM1/256)
     15  41a0		       26		      .byte.b	$20+(.LUM2/256)
     16  41a1		       98		      .byte.b	$90+(.LUM3/256)
     17  41a2
     18  41a2
     19  41a2
     20  41a2
     21  41a2
     22  41a2				   .LUM1      SET	.LUM1 + .STEP1
     23  41a2				   .LUM2      SET	.LUM2 + .STEP2
     24  41a2				   .LUM3      SET	.LUM3 + .STEP3
     13  41a2					      REPEND
     14  41a2		       44		      .byte.b	$40+(.LUM1/256)
     15  41a3		       26		      .byte.b	$20+(.LUM2/256)
     16  41a4		       98		      .byte.b	$90+(.LUM3/256)
     17  41a5
     18  41a5
     19  41a5
     20  41a5
     21  41a5
     22  41a5				   .LUM1      SET	.LUM1 + .STEP1
     23  41a5				   .LUM2      SET	.LUM2 + .STEP2
     24  41a5				   .LUM3      SET	.LUM3 + .STEP3
     13  41a5					      REPEND
     14  41a5		       44		      .byte.b	$40+(.LUM1/256)
     15  41a6		       26		      .byte.b	$20+(.LUM2/256)
     16  41a7		       98		      .byte.b	$90+(.LUM3/256)
     17  41a8
     18  41a8
     19  41a8
     20  41a8
     21  41a8
     22  41a8				   .LUM1      SET	.LUM1 + .STEP1
     23  41a8				   .LUM2      SET	.LUM2 + .STEP2
     24  41a8				   .LUM3      SET	.LUM3 + .STEP3
     13  41a8					      REPEND
     14  41a8		       44		      .byte.b	$40+(.LUM1/256)
     15  41a9		       26		      .byte.b	$20+(.LUM2/256)
     16  41aa		       98		      .byte.b	$90+(.LUM3/256)
     17  41ab
     18  41ab
     19  41ab
     20  41ab
     21  41ab
     22  41ab				   .LUM1      SET	.LUM1 + .STEP1
     23  41ab				   .LUM2      SET	.LUM2 + .STEP2
     24  41ab				   .LUM3      SET	.LUM3 + .STEP3
     13  41ab					      REPEND
     14  41ab		       44		      .byte.b	$40+(.LUM1/256)
     15  41ac		       26		      .byte.b	$20+(.LUM2/256)
     16  41ad		       98		      .byte.b	$90+(.LUM3/256)
     17  41ae
     18  41ae
     19  41ae
     20  41ae
     21  41ae
     22  41ae				   .LUM1      SET	.LUM1 + .STEP1
     23  41ae				   .LUM2      SET	.LUM2 + .STEP2
     24  41ae				   .LUM3      SET	.LUM3 + .STEP3
     13  41ae					      REPEND
     14  41ae		       44		      .byte.b	$40+(.LUM1/256)
     15  41af		       26		      .byte.b	$20+(.LUM2/256)
     16  41b0		       98		      .byte.b	$90+(.LUM3/256)
     17  41b1
     18  41b1
     19  41b1
     20  41b1
     21  41b1
     22  41b1				   .LUM1      SET	.LUM1 + .STEP1
     23  41b1				   .LUM2      SET	.LUM2 + .STEP2
     24  41b1				   .LUM3      SET	.LUM3 + .STEP3
     13  41b1					      REPEND
     14  41b1		       44		      .byte.b	$40+(.LUM1/256)
     15  41b2		       26		      .byte.b	$20+(.LUM2/256)
     16  41b3		       98		      .byte.b	$90+(.LUM3/256)
     17  41b4
     18  41b4
     19  41b4
     20  41b4
     21  41b4
     22  41b4				   .LUM1      SET	.LUM1 + .STEP1
     23  41b4				   .LUM2      SET	.LUM2 + .STEP2
     24  41b4				   .LUM3      SET	.LUM3 + .STEP3
     13  41b4					      REPEND
     14  41b4		       44		      .byte.b	$40+(.LUM1/256)
     15  41b5		       26		      .byte.b	$20+(.LUM2/256)
     16  41b6		       98		      .byte.b	$90+(.LUM3/256)
     17  41b7
     18  41b7
     19  41b7
     20  41b7
     21  41b7
     22  41b7				   .LUM1      SET	.LUM1 + .STEP1
     23  41b7				   .LUM2      SET	.LUM2 + .STEP2
     24  41b7				   .LUM3      SET	.LUM3 + .STEP3
     13  41b7					      REPEND
     14  41b7		       44		      .byte.b	$40+(.LUM1/256)
     15  41b8		       26		      .byte.b	$20+(.LUM2/256)
     16  41b9		       98		      .byte.b	$90+(.LUM3/256)
     17  41ba
     18  41ba
     19  41ba
     20  41ba
     21  41ba
     22  41ba				   .LUM1      SET	.LUM1 + .STEP1
     23  41ba				   .LUM2      SET	.LUM2 + .STEP2
     24  41ba				   .LUM3      SET	.LUM3 + .STEP3
     13  41ba					      REPEND
     14  41ba		       44		      .byte.b	$40+(.LUM1/256)
     15  41bb		       26		      .byte.b	$20+(.LUM2/256)
     16  41bc		       98		      .byte.b	$90+(.LUM3/256)
     17  41bd
     18  41bd
     19  41bd
     20  41bd
     21  41bd
     22  41bd				   .LUM1      SET	.LUM1 + .STEP1
     23  41bd				   .LUM2      SET	.LUM2 + .STEP2
     24  41bd				   .LUM3      SET	.LUM3 + .STEP3
     13  41bd					      REPEND
     14  41bd		       44		      .byte.b	$40+(.LUM1/256)
     15  41be		       26		      .byte.b	$20+(.LUM2/256)
     16  41bf		       98		      .byte.b	$90+(.LUM3/256)
     17  41c0
     18  41c0
     19  41c0
     20  41c0
     21  41c0
     22  41c0				   .LUM1      SET	.LUM1 + .STEP1
     23  41c0				   .LUM2      SET	.LUM2 + .STEP2
     24  41c0				   .LUM3      SET	.LUM3 + .STEP3
     13  41c0					      REPEND
     14  41c0		       44		      .byte.b	$40+(.LUM1/256)
     15  41c1		       26		      .byte.b	$20+(.LUM2/256)
     16  41c2		       98		      .byte.b	$90+(.LUM3/256)
     17  41c3
     18  41c3
     19  41c3
     20  41c3
     21  41c3
     22  41c3				   .LUM1      SET	.LUM1 + .STEP1
     23  41c3				   .LUM2      SET	.LUM2 + .STEP2
     24  41c3				   .LUM3      SET	.LUM3 + .STEP3
     13  41c3					      REPEND
     14  41c3		       44		      .byte.b	$40+(.LUM1/256)
     15  41c4		       26		      .byte.b	$20+(.LUM2/256)
     16  41c5		       98		      .byte.b	$90+(.LUM3/256)
     17  41c6
     18  41c6
     19  41c6
     20  41c6
     21  41c6
     22  41c6				   .LUM1      SET	.LUM1 + .STEP1
     23  41c6				   .LUM2      SET	.LUM2 + .STEP2
     24  41c6				   .LUM3      SET	.LUM3 + .STEP3
     13  41c6					      REPEND
     14  41c6		       44		      .byte.b	$40+(.LUM1/256)
     15  41c7		       26		      .byte.b	$20+(.LUM2/256)
     16  41c8		       98		      .byte.b	$90+(.LUM3/256)
     17  41c9
     18  41c9
     19  41c9
     20  41c9
     21  41c9
     22  41c9				   .LUM1      SET	.LUM1 + .STEP1
     23  41c9				   .LUM2      SET	.LUM2 + .STEP2
     24  41c9				   .LUM3      SET	.LUM3 + .STEP3
     13  41c9					      REPEND
     14  41c9		       44		      .byte.b	$40+(.LUM1/256)
     15  41ca		       26		      .byte.b	$20+(.LUM2/256)
     16  41cb		       98		      .byte.b	$90+(.LUM3/256)
     17  41cc
     18  41cc
     19  41cc
     20  41cc
     21  41cc
     22  41cc				   .LUM1      SET	.LUM1 + .STEP1
     23  41cc				   .LUM2      SET	.LUM2 + .STEP2
     24  41cc				   .LUM3      SET	.LUM3 + .STEP3
     13  41cc					      REPEND
     14  41cc		       44		      .byte.b	$40+(.LUM1/256)
     15  41cd		       26		      .byte.b	$20+(.LUM2/256)
     16  41ce		       98		      .byte.b	$90+(.LUM3/256)
     17  41cf
     18  41cf
     19  41cf
     20  41cf
     21  41cf
     22  41cf				   .LUM1      SET	.LUM1 + .STEP1
     23  41cf				   .LUM2      SET	.LUM2 + .STEP2
     24  41cf				   .LUM3      SET	.LUM3 + .STEP3
     13  41cf					      REPEND
     14  41cf		       44		      .byte.b	$40+(.LUM1/256)
     15  41d0		       26		      .byte.b	$20+(.LUM2/256)
     16  41d1		       98		      .byte.b	$90+(.LUM3/256)
     17  41d2
     18  41d2
     19  41d2
     20  41d2
     21  41d2
     22  41d2				   .LUM1      SET	.LUM1 + .STEP1
     23  41d2				   .LUM2      SET	.LUM2 + .STEP2
     24  41d2				   .LUM3      SET	.LUM3 + .STEP3
     13  41d2					      REPEND
     14  41d2		       44		      .byte.b	$40+(.LUM1/256)
     15  41d3		       26		      .byte.b	$20+(.LUM2/256)
     16  41d4		       98		      .byte.b	$90+(.LUM3/256)
     17  41d5
     18  41d5
     19  41d5
     20  41d5
     21  41d5
     22  41d5				   .LUM1      SET	.LUM1 + .STEP1
     23  41d5				   .LUM2      SET	.LUM2 + .STEP2
     24  41d5				   .LUM3      SET	.LUM3 + .STEP3
     13  41d5					      REPEND
     14  41d5		       44		      .byte.b	$40+(.LUM1/256)
     15  41d6		       26		      .byte.b	$20+(.LUM2/256)
     16  41d7		       98		      .byte.b	$90+(.LUM3/256)
     17  41d8
     18  41d8
     19  41d8
     20  41d8
     21  41d8
     22  41d8				   .LUM1      SET	.LUM1 + .STEP1
     23  41d8				   .LUM2      SET	.LUM2 + .STEP2
     24  41d8				   .LUM3      SET	.LUM3 + .STEP3
     25  41d8					      REPEND
    257  41d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    258  41d8
    259  41d8							;    ECHO "PAL LUMS"
    260  41d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  41d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  41d8
      2  41d8
      3  41d8
      4  41d8
      5  41d8				   .LUM1      SET	$6*256
      6  41d8				   .LUM2      SET	$4*256
      7  41d8				   .LUM3      SET	$8*256
      8  41d8
      9  41d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  41d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  41d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  41d8
     13  41d8					      REPEAT	72
     14  41d8		       66		      .byte.b	$60+(.LUM1/256)
     15  41d9		       84		      .byte.b	$80+(.LUM2/256)
     16  41da		       18		      .byte.b	$10+(.LUM3/256)
     17  41db
     18  41db
     19  41db
     20  41db
     21  41db
     22  41db				   .LUM1      SET	.LUM1 + .STEP1
     23  41db				   .LUM2      SET	.LUM2 + .STEP2
     24  41db				   .LUM3      SET	.LUM3 + .STEP3
     13  41db					      REPEND
     14  41db		       66		      .byte.b	$60+(.LUM1/256)
     15  41dc		       84		      .byte.b	$80+(.LUM2/256)
     16  41dd		       18		      .byte.b	$10+(.LUM3/256)
     17  41de
     18  41de
     19  41de
     20  41de
     21  41de
     22  41de				   .LUM1      SET	.LUM1 + .STEP1
     23  41de				   .LUM2      SET	.LUM2 + .STEP2
     24  41de				   .LUM3      SET	.LUM3 + .STEP3
     13  41de					      REPEND
     14  41de		       66		      .byte.b	$60+(.LUM1/256)
     15  41df		       84		      .byte.b	$80+(.LUM2/256)
     16  41e0		       18		      .byte.b	$10+(.LUM3/256)
     17  41e1
     18  41e1
     19  41e1
     20  41e1
     21  41e1
     22  41e1				   .LUM1      SET	.LUM1 + .STEP1
     23  41e1				   .LUM2      SET	.LUM2 + .STEP2
     24  41e1				   .LUM3      SET	.LUM3 + .STEP3
     13  41e1					      REPEND
     14  41e1		       66		      .byte.b	$60+(.LUM1/256)
     15  41e2		       84		      .byte.b	$80+(.LUM2/256)
     16  41e3		       18		      .byte.b	$10+(.LUM3/256)
     17  41e4
     18  41e4
     19  41e4
     20  41e4
     21  41e4
     22  41e4				   .LUM1      SET	.LUM1 + .STEP1
     23  41e4				   .LUM2      SET	.LUM2 + .STEP2
     24  41e4				   .LUM3      SET	.LUM3 + .STEP3
     13  41e4					      REPEND
     14  41e4		       66		      .byte.b	$60+(.LUM1/256)
     15  41e5		       84		      .byte.b	$80+(.LUM2/256)
     16  41e6		       18		      .byte.b	$10+(.LUM3/256)
     17  41e7
     18  41e7
     19  41e7
     20  41e7
     21  41e7
     22  41e7				   .LUM1      SET	.LUM1 + .STEP1
     23  41e7				   .LUM2      SET	.LUM2 + .STEP2
     24  41e7				   .LUM3      SET	.LUM3 + .STEP3
     13  41e7					      REPEND
     14  41e7		       66		      .byte.b	$60+(.LUM1/256)
     15  41e8		       84		      .byte.b	$80+(.LUM2/256)
     16  41e9		       18		      .byte.b	$10+(.LUM3/256)
     17  41ea
     18  41ea
     19  41ea
     20  41ea
     21  41ea
     22  41ea				   .LUM1      SET	.LUM1 + .STEP1
     23  41ea				   .LUM2      SET	.LUM2 + .STEP2
     24  41ea				   .LUM3      SET	.LUM3 + .STEP3
     13  41ea					      REPEND
     14  41ea		       66		      .byte.b	$60+(.LUM1/256)
     15  41eb		       84		      .byte.b	$80+(.LUM2/256)
     16  41ec		       18		      .byte.b	$10+(.LUM3/256)
     17  41ed
     18  41ed
     19  41ed
     20  41ed
     21  41ed
     22  41ed				   .LUM1      SET	.LUM1 + .STEP1
     23  41ed				   .LUM2      SET	.LUM2 + .STEP2
     24  41ed				   .LUM3      SET	.LUM3 + .STEP3
     13  41ed					      REPEND
     14  41ed		       66		      .byte.b	$60+(.LUM1/256)
     15  41ee		       84		      .byte.b	$80+(.LUM2/256)
     16  41ef		       18		      .byte.b	$10+(.LUM3/256)
     17  41f0
     18  41f0
     19  41f0
     20  41f0
     21  41f0
     22  41f0				   .LUM1      SET	.LUM1 + .STEP1
     23  41f0				   .LUM2      SET	.LUM2 + .STEP2
     24  41f0				   .LUM3      SET	.LUM3 + .STEP3
     13  41f0					      REPEND
     14  41f0		       66		      .byte.b	$60+(.LUM1/256)
     15  41f1		       84		      .byte.b	$80+(.LUM2/256)
     16  41f2		       18		      .byte.b	$10+(.LUM3/256)
     17  41f3
     18  41f3
     19  41f3
     20  41f3
     21  41f3
     22  41f3				   .LUM1      SET	.LUM1 + .STEP1
     23  41f3				   .LUM2      SET	.LUM2 + .STEP2
     24  41f3				   .LUM3      SET	.LUM3 + .STEP3
     13  41f3					      REPEND
     14  41f3		       66		      .byte.b	$60+(.LUM1/256)
     15  41f4		       84		      .byte.b	$80+(.LUM2/256)
     16  41f5		       18		      .byte.b	$10+(.LUM3/256)
     17  41f6
     18  41f6
     19  41f6
     20  41f6
     21  41f6
     22  41f6				   .LUM1      SET	.LUM1 + .STEP1
     23  41f6				   .LUM2      SET	.LUM2 + .STEP2
     24  41f6				   .LUM3      SET	.LUM3 + .STEP3
     13  41f6					      REPEND
     14  41f6		       66		      .byte.b	$60+(.LUM1/256)
     15  41f7		       84		      .byte.b	$80+(.LUM2/256)
     16  41f8		       18		      .byte.b	$10+(.LUM3/256)
     17  41f9
     18  41f9
     19  41f9
     20  41f9
     21  41f9
     22  41f9				   .LUM1      SET	.LUM1 + .STEP1
     23  41f9				   .LUM2      SET	.LUM2 + .STEP2
     24  41f9				   .LUM3      SET	.LUM3 + .STEP3
     13  41f9					      REPEND
     14  41f9		       66		      .byte.b	$60+(.LUM1/256)
     15  41fa		       84		      .byte.b	$80+(.LUM2/256)
     16  41fb		       18		      .byte.b	$10+(.LUM3/256)
     17  41fc
     18  41fc
     19  41fc
     20  41fc
     21  41fc
     22  41fc				   .LUM1      SET	.LUM1 + .STEP1
     23  41fc				   .LUM2      SET	.LUM2 + .STEP2
     24  41fc				   .LUM3      SET	.LUM3 + .STEP3
     13  41fc					      REPEND
     14  41fc		       66		      .byte.b	$60+(.LUM1/256)
     15  41fd		       84		      .byte.b	$80+(.LUM2/256)
     16  41fe		       18		      .byte.b	$10+(.LUM3/256)
     17  41ff
     18  41ff
     19  41ff
     20  41ff
     21  41ff
     22  41ff				   .LUM1      SET	.LUM1 + .STEP1
     23  41ff				   .LUM2      SET	.LUM2 + .STEP2
     24  41ff				   .LUM3      SET	.LUM3 + .STEP3
     13  41ff					      REPEND
     14  41ff		       66		      .byte.b	$60+(.LUM1/256)
     15  4200		       84		      .byte.b	$80+(.LUM2/256)
     16  4201		       18		      .byte.b	$10+(.LUM3/256)
     17  4202
     18  4202
     19  4202
     20  4202
     21  4202
     22  4202				   .LUM1      SET	.LUM1 + .STEP1
     23  4202				   .LUM2      SET	.LUM2 + .STEP2
     24  4202				   .LUM3      SET	.LUM3 + .STEP3
     13  4202					      REPEND
     14  4202		       66		      .byte.b	$60+(.LUM1/256)
     15  4203		       84		      .byte.b	$80+(.LUM2/256)
     16  4204		       18		      .byte.b	$10+(.LUM3/256)
     17  4205
     18  4205
     19  4205
     20  4205
     21  4205
     22  4205				   .LUM1      SET	.LUM1 + .STEP1
     23  4205				   .LUM2      SET	.LUM2 + .STEP2
     24  4205				   .LUM3      SET	.LUM3 + .STEP3
     13  4205					      REPEND
     14  4205		       66		      .byte.b	$60+(.LUM1/256)
     15  4206		       84		      .byte.b	$80+(.LUM2/256)
     16  4207		       18		      .byte.b	$10+(.LUM3/256)
     17  4208
     18  4208
     19  4208
     20  4208
     21  4208
     22  4208				   .LUM1      SET	.LUM1 + .STEP1
     23  4208				   .LUM2      SET	.LUM2 + .STEP2
     24  4208				   .LUM3      SET	.LUM3 + .STEP3
     13  4208					      REPEND
     14  4208		       66		      .byte.b	$60+(.LUM1/256)
     15  4209		       84		      .byte.b	$80+(.LUM2/256)
     16  420a		       18		      .byte.b	$10+(.LUM3/256)
     17  420b
     18  420b
     19  420b
     20  420b
     21  420b
     22  420b				   .LUM1      SET	.LUM1 + .STEP1
     23  420b				   .LUM2      SET	.LUM2 + .STEP2
     24  420b				   .LUM3      SET	.LUM3 + .STEP3
     13  420b					      REPEND
     14  420b		       66		      .byte.b	$60+(.LUM1/256)
     15  420c		       84		      .byte.b	$80+(.LUM2/256)
     16  420d		       18		      .byte.b	$10+(.LUM3/256)
     17  420e
     18  420e
     19  420e
     20  420e
     21  420e
     22  420e				   .LUM1      SET	.LUM1 + .STEP1
     23  420e				   .LUM2      SET	.LUM2 + .STEP2
     24  420e				   .LUM3      SET	.LUM3 + .STEP3
     13  420e					      REPEND
     14  420e		       66		      .byte.b	$60+(.LUM1/256)
     15  420f		       84		      .byte.b	$80+(.LUM2/256)
     16  4210		       18		      .byte.b	$10+(.LUM3/256)
     17  4211
     18  4211
     19  4211
     20  4211
     21  4211
     22  4211				   .LUM1      SET	.LUM1 + .STEP1
     23  4211				   .LUM2      SET	.LUM2 + .STEP2
     24  4211				   .LUM3      SET	.LUM3 + .STEP3
     13  4211					      REPEND
     14  4211		       66		      .byte.b	$60+(.LUM1/256)
     15  4212		       84		      .byte.b	$80+(.LUM2/256)
     16  4213		       18		      .byte.b	$10+(.LUM3/256)
     17  4214
     18  4214
     19  4214
     20  4214
     21  4214
     22  4214				   .LUM1      SET	.LUM1 + .STEP1
     23  4214				   .LUM2      SET	.LUM2 + .STEP2
     24  4214				   .LUM3      SET	.LUM3 + .STEP3
     13  4214					      REPEND
     14  4214		       66		      .byte.b	$60+(.LUM1/256)
     15  4215		       84		      .byte.b	$80+(.LUM2/256)
     16  4216		       18		      .byte.b	$10+(.LUM3/256)
     17  4217
     18  4217
     19  4217
     20  4217
     21  4217
     22  4217				   .LUM1      SET	.LUM1 + .STEP1
     23  4217				   .LUM2      SET	.LUM2 + .STEP2
     24  4217				   .LUM3      SET	.LUM3 + .STEP3
     13  4217					      REPEND
     14  4217		       66		      .byte.b	$60+(.LUM1/256)
     15  4218		       84		      .byte.b	$80+(.LUM2/256)
     16  4219		       18		      .byte.b	$10+(.LUM3/256)
     17  421a
     18  421a
     19  421a
     20  421a
     21  421a
     22  421a				   .LUM1      SET	.LUM1 + .STEP1
     23  421a				   .LUM2      SET	.LUM2 + .STEP2
     24  421a				   .LUM3      SET	.LUM3 + .STEP3
     13  421a					      REPEND
     14  421a		       66		      .byte.b	$60+(.LUM1/256)
     15  421b		       84		      .byte.b	$80+(.LUM2/256)
     16  421c		       18		      .byte.b	$10+(.LUM3/256)
     17  421d
     18  421d
     19  421d
     20  421d
     21  421d
     22  421d				   .LUM1      SET	.LUM1 + .STEP1
     23  421d				   .LUM2      SET	.LUM2 + .STEP2
     24  421d				   .LUM3      SET	.LUM3 + .STEP3
     13  421d					      REPEND
     14  421d		       66		      .byte.b	$60+(.LUM1/256)
     15  421e		       84		      .byte.b	$80+(.LUM2/256)
     16  421f		       18		      .byte.b	$10+(.LUM3/256)
     17  4220
     18  4220
     19  4220
     20  4220
     21  4220
     22  4220				   .LUM1      SET	.LUM1 + .STEP1
     23  4220				   .LUM2      SET	.LUM2 + .STEP2
     24  4220				   .LUM3      SET	.LUM3 + .STEP3
     13  4220					      REPEND
     14  4220		       66		      .byte.b	$60+(.LUM1/256)
     15  4221		       84		      .byte.b	$80+(.LUM2/256)
     16  4222		       18		      .byte.b	$10+(.LUM3/256)
     17  4223
     18  4223
     19  4223
     20  4223
     21  4223
     22  4223				   .LUM1      SET	.LUM1 + .STEP1
     23  4223				   .LUM2      SET	.LUM2 + .STEP2
     24  4223				   .LUM3      SET	.LUM3 + .STEP3
     13  4223					      REPEND
     14  4223		       66		      .byte.b	$60+(.LUM1/256)
     15  4224		       84		      .byte.b	$80+(.LUM2/256)
     16  4225		       18		      .byte.b	$10+(.LUM3/256)
     17  4226
     18  4226
     19  4226
     20  4226
     21  4226
     22  4226				   .LUM1      SET	.LUM1 + .STEP1
     23  4226				   .LUM2      SET	.LUM2 + .STEP2
     24  4226				   .LUM3      SET	.LUM3 + .STEP3
     13  4226					      REPEND
     14  4226		       66		      .byte.b	$60+(.LUM1/256)
     15  4227		       84		      .byte.b	$80+(.LUM2/256)
     16  4228		       18		      .byte.b	$10+(.LUM3/256)
     17  4229
     18  4229
     19  4229
     20  4229
     21  4229
     22  4229				   .LUM1      SET	.LUM1 + .STEP1
     23  4229				   .LUM2      SET	.LUM2 + .STEP2
     24  4229				   .LUM3      SET	.LUM3 + .STEP3
     13  4229					      REPEND
     14  4229		       66		      .byte.b	$60+(.LUM1/256)
     15  422a		       84		      .byte.b	$80+(.LUM2/256)
     16  422b		       18		      .byte.b	$10+(.LUM3/256)
     17  422c
     18  422c
     19  422c
     20  422c
     21  422c
     22  422c				   .LUM1      SET	.LUM1 + .STEP1
     23  422c				   .LUM2      SET	.LUM2 + .STEP2
     24  422c				   .LUM3      SET	.LUM3 + .STEP3
     13  422c					      REPEND
     14  422c		       66		      .byte.b	$60+(.LUM1/256)
     15  422d		       84		      .byte.b	$80+(.LUM2/256)
     16  422e		       18		      .byte.b	$10+(.LUM3/256)
     17  422f
     18  422f
     19  422f
     20  422f
     21  422f
     22  422f				   .LUM1      SET	.LUM1 + .STEP1
     23  422f				   .LUM2      SET	.LUM2 + .STEP2
     24  422f				   .LUM3      SET	.LUM3 + .STEP3
     13  422f					      REPEND
     14  422f		       66		      .byte.b	$60+(.LUM1/256)
     15  4230		       84		      .byte.b	$80+(.LUM2/256)
     16  4231		       18		      .byte.b	$10+(.LUM3/256)
     17  4232
     18  4232
     19  4232
     20  4232
     21  4232
     22  4232				   .LUM1      SET	.LUM1 + .STEP1
     23  4232				   .LUM2      SET	.LUM2 + .STEP2
     24  4232				   .LUM3      SET	.LUM3 + .STEP3
     13  4232					      REPEND
     14  4232		       66		      .byte.b	$60+(.LUM1/256)
     15  4233		       84		      .byte.b	$80+(.LUM2/256)
     16  4234		       18		      .byte.b	$10+(.LUM3/256)
     17  4235
     18  4235
     19  4235
     20  4235
     21  4235
     22  4235				   .LUM1      SET	.LUM1 + .STEP1
     23  4235				   .LUM2      SET	.LUM2 + .STEP2
     24  4235				   .LUM3      SET	.LUM3 + .STEP3
     13  4235					      REPEND
     14  4235		       66		      .byte.b	$60+(.LUM1/256)
     15  4236		       84		      .byte.b	$80+(.LUM2/256)
     16  4237		       18		      .byte.b	$10+(.LUM3/256)
     17  4238
     18  4238
     19  4238
     20  4238
     21  4238
     22  4238				   .LUM1      SET	.LUM1 + .STEP1
     23  4238				   .LUM2      SET	.LUM2 + .STEP2
     24  4238				   .LUM3      SET	.LUM3 + .STEP3
     13  4238					      REPEND
     14  4238		       66		      .byte.b	$60+(.LUM1/256)
     15  4239		       84		      .byte.b	$80+(.LUM2/256)
     16  423a		       18		      .byte.b	$10+(.LUM3/256)
     17  423b
     18  423b
     19  423b
     20  423b
     21  423b
     22  423b				   .LUM1      SET	.LUM1 + .STEP1
     23  423b				   .LUM2      SET	.LUM2 + .STEP2
     24  423b				   .LUM3      SET	.LUM3 + .STEP3
     13  423b					      REPEND
     14  423b		       66		      .byte.b	$60+(.LUM1/256)
     15  423c		       84		      .byte.b	$80+(.LUM2/256)
     16  423d		       18		      .byte.b	$10+(.LUM3/256)
     17  423e
     18  423e
     19  423e
     20  423e
     21  423e
     22  423e				   .LUM1      SET	.LUM1 + .STEP1
     23  423e				   .LUM2      SET	.LUM2 + .STEP2
     24  423e				   .LUM3      SET	.LUM3 + .STEP3
     13  423e					      REPEND
     14  423e		       66		      .byte.b	$60+(.LUM1/256)
     15  423f		       84		      .byte.b	$80+(.LUM2/256)
     16  4240		       18		      .byte.b	$10+(.LUM3/256)
     17  4241
     18  4241
     19  4241
     20  4241
     21  4241
     22  4241				   .LUM1      SET	.LUM1 + .STEP1
     23  4241				   .LUM2      SET	.LUM2 + .STEP2
     24  4241				   .LUM3      SET	.LUM3 + .STEP3
     13  4241					      REPEND
     14  4241		       66		      .byte.b	$60+(.LUM1/256)
     15  4242		       84		      .byte.b	$80+(.LUM2/256)
     16  4243		       18		      .byte.b	$10+(.LUM3/256)
     17  4244
     18  4244
     19  4244
     20  4244
     21  4244
     22  4244				   .LUM1      SET	.LUM1 + .STEP1
     23  4244				   .LUM2      SET	.LUM2 + .STEP2
     24  4244				   .LUM3      SET	.LUM3 + .STEP3
     13  4244					      REPEND
     14  4244		       66		      .byte.b	$60+(.LUM1/256)
     15  4245		       84		      .byte.b	$80+(.LUM2/256)
     16  4246		       18		      .byte.b	$10+(.LUM3/256)
     17  4247
     18  4247
     19  4247
     20  4247
     21  4247
     22  4247				   .LUM1      SET	.LUM1 + .STEP1
     23  4247				   .LUM2      SET	.LUM2 + .STEP2
     24  4247				   .LUM3      SET	.LUM3 + .STEP3
     13  4247					      REPEND
     14  4247		       66		      .byte.b	$60+(.LUM1/256)
     15  4248		       84		      .byte.b	$80+(.LUM2/256)
     16  4249		       18		      .byte.b	$10+(.LUM3/256)
     17  424a
     18  424a
     19  424a
     20  424a
     21  424a
     22  424a				   .LUM1      SET	.LUM1 + .STEP1
     23  424a				   .LUM2      SET	.LUM2 + .STEP2
     24  424a				   .LUM3      SET	.LUM3 + .STEP3
     13  424a					      REPEND
     14  424a		       66		      .byte.b	$60+(.LUM1/256)
     15  424b		       84		      .byte.b	$80+(.LUM2/256)
     16  424c		       18		      .byte.b	$10+(.LUM3/256)
     17  424d
     18  424d
     19  424d
     20  424d
     21  424d
     22  424d				   .LUM1      SET	.LUM1 + .STEP1
     23  424d				   .LUM2      SET	.LUM2 + .STEP2
     24  424d				   .LUM3      SET	.LUM3 + .STEP3
     13  424d					      REPEND
     14  424d		       66		      .byte.b	$60+(.LUM1/256)
     15  424e		       84		      .byte.b	$80+(.LUM2/256)
     16  424f		       18		      .byte.b	$10+(.LUM3/256)
     17  4250
     18  4250
     19  4250
     20  4250
     21  4250
     22  4250				   .LUM1      SET	.LUM1 + .STEP1
     23  4250				   .LUM2      SET	.LUM2 + .STEP2
     24  4250				   .LUM3      SET	.LUM3 + .STEP3
     13  4250					      REPEND
     14  4250		       66		      .byte.b	$60+(.LUM1/256)
     15  4251		       84		      .byte.b	$80+(.LUM2/256)
     16  4252		       18		      .byte.b	$10+(.LUM3/256)
     17  4253
     18  4253
     19  4253
     20  4253
     21  4253
     22  4253				   .LUM1      SET	.LUM1 + .STEP1
     23  4253				   .LUM2      SET	.LUM2 + .STEP2
     24  4253				   .LUM3      SET	.LUM3 + .STEP3
     13  4253					      REPEND
     14  4253		       66		      .byte.b	$60+(.LUM1/256)
     15  4254		       84		      .byte.b	$80+(.LUM2/256)
     16  4255		       18		      .byte.b	$10+(.LUM3/256)
     17  4256
     18  4256
     19  4256
     20  4256
     21  4256
     22  4256				   .LUM1      SET	.LUM1 + .STEP1
     23  4256				   .LUM2      SET	.LUM2 + .STEP2
     24  4256				   .LUM3      SET	.LUM3 + .STEP3
     13  4256					      REPEND
     14  4256		       66		      .byte.b	$60+(.LUM1/256)
     15  4257		       84		      .byte.b	$80+(.LUM2/256)
     16  4258		       18		      .byte.b	$10+(.LUM3/256)
     17  4259
     18  4259
     19  4259
     20  4259
     21  4259
     22  4259				   .LUM1      SET	.LUM1 + .STEP1
     23  4259				   .LUM2      SET	.LUM2 + .STEP2
     24  4259				   .LUM3      SET	.LUM3 + .STEP3
     13  4259					      REPEND
     14  4259		       66		      .byte.b	$60+(.LUM1/256)
     15  425a		       84		      .byte.b	$80+(.LUM2/256)
     16  425b		       18		      .byte.b	$10+(.LUM3/256)
     17  425c
     18  425c
     19  425c
     20  425c
     21  425c
     22  425c				   .LUM1      SET	.LUM1 + .STEP1
     23  425c				   .LUM2      SET	.LUM2 + .STEP2
     24  425c				   .LUM3      SET	.LUM3 + .STEP3
     13  425c					      REPEND
     14  425c		       66		      .byte.b	$60+(.LUM1/256)
     15  425d		       84		      .byte.b	$80+(.LUM2/256)
     16  425e		       18		      .byte.b	$10+(.LUM3/256)
     17  425f
     18  425f
     19  425f
     20  425f
     21  425f
     22  425f				   .LUM1      SET	.LUM1 + .STEP1
     23  425f				   .LUM2      SET	.LUM2 + .STEP2
     24  425f				   .LUM3      SET	.LUM3 + .STEP3
     13  425f					      REPEND
     14  425f		       66		      .byte.b	$60+(.LUM1/256)
     15  4260		       84		      .byte.b	$80+(.LUM2/256)
     16  4261		       18		      .byte.b	$10+(.LUM3/256)
     17  4262
     18  4262
     19  4262
     20  4262
     21  4262
     22  4262				   .LUM1      SET	.LUM1 + .STEP1
     23  4262				   .LUM2      SET	.LUM2 + .STEP2
     24  4262				   .LUM3      SET	.LUM3 + .STEP3
     13  4262					      REPEND
     14  4262		       66		      .byte.b	$60+(.LUM1/256)
     15  4263		       84		      .byte.b	$80+(.LUM2/256)
     16  4264		       18		      .byte.b	$10+(.LUM3/256)
     17  4265
     18  4265
     19  4265
     20  4265
     21  4265
     22  4265				   .LUM1      SET	.LUM1 + .STEP1
     23  4265				   .LUM2      SET	.LUM2 + .STEP2
     24  4265				   .LUM3      SET	.LUM3 + .STEP3
     13  4265					      REPEND
     14  4265		       66		      .byte.b	$60+(.LUM1/256)
     15  4266		       84		      .byte.b	$80+(.LUM2/256)
     16  4267		       18		      .byte.b	$10+(.LUM3/256)
     17  4268
     18  4268
     19  4268
     20  4268
     21  4268
     22  4268				   .LUM1      SET	.LUM1 + .STEP1
     23  4268				   .LUM2      SET	.LUM2 + .STEP2
     24  4268				   .LUM3      SET	.LUM3 + .STEP3
     13  4268					      REPEND
     14  4268		       66		      .byte.b	$60+(.LUM1/256)
     15  4269		       84		      .byte.b	$80+(.LUM2/256)
     16  426a		       18		      .byte.b	$10+(.LUM3/256)
     17  426b
     18  426b
     19  426b
     20  426b
     21  426b
     22  426b				   .LUM1      SET	.LUM1 + .STEP1
     23  426b				   .LUM2      SET	.LUM2 + .STEP2
     24  426b				   .LUM3      SET	.LUM3 + .STEP3
     13  426b					      REPEND
     14  426b		       66		      .byte.b	$60+(.LUM1/256)
     15  426c		       84		      .byte.b	$80+(.LUM2/256)
     16  426d		       18		      .byte.b	$10+(.LUM3/256)
     17  426e
     18  426e
     19  426e
     20  426e
     21  426e
     22  426e				   .LUM1      SET	.LUM1 + .STEP1
     23  426e				   .LUM2      SET	.LUM2 + .STEP2
     24  426e				   .LUM3      SET	.LUM3 + .STEP3
     13  426e					      REPEND
     14  426e		       66		      .byte.b	$60+(.LUM1/256)
     15  426f		       84		      .byte.b	$80+(.LUM2/256)
     16  4270		       18		      .byte.b	$10+(.LUM3/256)
     17  4271
     18  4271
     19  4271
     20  4271
     21  4271
     22  4271				   .LUM1      SET	.LUM1 + .STEP1
     23  4271				   .LUM2      SET	.LUM2 + .STEP2
     24  4271				   .LUM3      SET	.LUM3 + .STEP3
     13  4271					      REPEND
     14  4271		       66		      .byte.b	$60+(.LUM1/256)
     15  4272		       84		      .byte.b	$80+(.LUM2/256)
     16  4273		       18		      .byte.b	$10+(.LUM3/256)
     17  4274
     18  4274
     19  4274
     20  4274
     21  4274
     22  4274				   .LUM1      SET	.LUM1 + .STEP1
     23  4274				   .LUM2      SET	.LUM2 + .STEP2
     24  4274				   .LUM3      SET	.LUM3 + .STEP3
     13  4274					      REPEND
     14  4274		       66		      .byte.b	$60+(.LUM1/256)
     15  4275		       84		      .byte.b	$80+(.LUM2/256)
     16  4276		       18		      .byte.b	$10+(.LUM3/256)
     17  4277
     18  4277
     19  4277
     20  4277
     21  4277
     22  4277				   .LUM1      SET	.LUM1 + .STEP1
     23  4277				   .LUM2      SET	.LUM2 + .STEP2
     24  4277				   .LUM3      SET	.LUM3 + .STEP3
     13  4277					      REPEND
     14  4277		       66		      .byte.b	$60+(.LUM1/256)
     15  4278		       84		      .byte.b	$80+(.LUM2/256)
     16  4279		       18		      .byte.b	$10+(.LUM3/256)
     17  427a
     18  427a
     19  427a
     20  427a
     21  427a
     22  427a				   .LUM1      SET	.LUM1 + .STEP1
     23  427a				   .LUM2      SET	.LUM2 + .STEP2
     24  427a				   .LUM3      SET	.LUM3 + .STEP3
     13  427a					      REPEND
     14  427a		       66		      .byte.b	$60+(.LUM1/256)
     15  427b		       84		      .byte.b	$80+(.LUM2/256)
     16  427c		       18		      .byte.b	$10+(.LUM3/256)
     17  427d
     18  427d
     19  427d
     20  427d
     21  427d
     22  427d				   .LUM1      SET	.LUM1 + .STEP1
     23  427d				   .LUM2      SET	.LUM2 + .STEP2
     24  427d				   .LUM3      SET	.LUM3 + .STEP3
     13  427d					      REPEND
     14  427d		       66		      .byte.b	$60+(.LUM1/256)
     15  427e		       84		      .byte.b	$80+(.LUM2/256)
     16  427f		       18		      .byte.b	$10+(.LUM3/256)
     17  4280
     18  4280
     19  4280
     20  4280
     21  4280
     22  4280				   .LUM1      SET	.LUM1 + .STEP1
     23  4280				   .LUM2      SET	.LUM2 + .STEP2
     24  4280				   .LUM3      SET	.LUM3 + .STEP3
     13  4280					      REPEND
     14  4280		       66		      .byte.b	$60+(.LUM1/256)
     15  4281		       84		      .byte.b	$80+(.LUM2/256)
     16  4282		       18		      .byte.b	$10+(.LUM3/256)
     17  4283
     18  4283
     19  4283
     20  4283
     21  4283
     22  4283				   .LUM1      SET	.LUM1 + .STEP1
     23  4283				   .LUM2      SET	.LUM2 + .STEP2
     24  4283				   .LUM3      SET	.LUM3 + .STEP3
     13  4283					      REPEND
     14  4283		       66		      .byte.b	$60+(.LUM1/256)
     15  4284		       84		      .byte.b	$80+(.LUM2/256)
     16  4285		       18		      .byte.b	$10+(.LUM3/256)
     17  4286
     18  4286
     19  4286
     20  4286
     21  4286
     22  4286				   .LUM1      SET	.LUM1 + .STEP1
     23  4286				   .LUM2      SET	.LUM2 + .STEP2
     24  4286				   .LUM3      SET	.LUM3 + .STEP3
     13  4286					      REPEND
     14  4286		       66		      .byte.b	$60+(.LUM1/256)
     15  4287		       84		      .byte.b	$80+(.LUM2/256)
     16  4288		       18		      .byte.b	$10+(.LUM3/256)
     17  4289
     18  4289
     19  4289
     20  4289
     21  4289
     22  4289				   .LUM1      SET	.LUM1 + .STEP1
     23  4289				   .LUM2      SET	.LUM2 + .STEP2
     24  4289				   .LUM3      SET	.LUM3 + .STEP3
     13  4289					      REPEND
     14  4289		       66		      .byte.b	$60+(.LUM1/256)
     15  428a		       84		      .byte.b	$80+(.LUM2/256)
     16  428b		       18		      .byte.b	$10+(.LUM3/256)
     17  428c
     18  428c
     19  428c
     20  428c
     21  428c
     22  428c				   .LUM1      SET	.LUM1 + .STEP1
     23  428c				   .LUM2      SET	.LUM2 + .STEP2
     24  428c				   .LUM3      SET	.LUM3 + .STEP3
     13  428c					      REPEND
     14  428c		       66		      .byte.b	$60+(.LUM1/256)
     15  428d		       84		      .byte.b	$80+(.LUM2/256)
     16  428e		       18		      .byte.b	$10+(.LUM3/256)
     17  428f
     18  428f
     19  428f
     20  428f
     21  428f
     22  428f				   .LUM1      SET	.LUM1 + .STEP1
     23  428f				   .LUM2      SET	.LUM2 + .STEP2
     24  428f				   .LUM3      SET	.LUM3 + .STEP3
     13  428f					      REPEND
     14  428f		       66		      .byte.b	$60+(.LUM1/256)
     15  4290		       84		      .byte.b	$80+(.LUM2/256)
     16  4291		       18		      .byte.b	$10+(.LUM3/256)
     17  4292
     18  4292
     19  4292
     20  4292
     21  4292
     22  4292				   .LUM1      SET	.LUM1 + .STEP1
     23  4292				   .LUM2      SET	.LUM2 + .STEP2
     24  4292				   .LUM3      SET	.LUM3 + .STEP3
     13  4292					      REPEND
     14  4292		       66		      .byte.b	$60+(.LUM1/256)
     15  4293		       84		      .byte.b	$80+(.LUM2/256)
     16  4294		       18		      .byte.b	$10+(.LUM3/256)
     17  4295
     18  4295
     19  4295
     20  4295
     21  4295
     22  4295				   .LUM1      SET	.LUM1 + .STEP1
     23  4295				   .LUM2      SET	.LUM2 + .STEP2
     24  4295				   .LUM3      SET	.LUM3 + .STEP3
     13  4295					      REPEND
     14  4295		       66		      .byte.b	$60+(.LUM1/256)
     15  4296		       84		      .byte.b	$80+(.LUM2/256)
     16  4297		       18		      .byte.b	$10+(.LUM3/256)
     17  4298
     18  4298
     19  4298
     20  4298
     21  4298
     22  4298				   .LUM1      SET	.LUM1 + .STEP1
     23  4298				   .LUM2      SET	.LUM2 + .STEP2
     24  4298				   .LUM3      SET	.LUM3 + .STEP3
     13  4298					      REPEND
     14  4298		       66		      .byte.b	$60+(.LUM1/256)
     15  4299		       84		      .byte.b	$80+(.LUM2/256)
     16  429a		       18		      .byte.b	$10+(.LUM3/256)
     17  429b
     18  429b
     19  429b
     20  429b
     21  429b
     22  429b				   .LUM1      SET	.LUM1 + .STEP1
     23  429b				   .LUM2      SET	.LUM2 + .STEP2
     24  429b				   .LUM3      SET	.LUM3 + .STEP3
     13  429b					      REPEND
     14  429b		       66		      .byte.b	$60+(.LUM1/256)
     15  429c		       84		      .byte.b	$80+(.LUM2/256)
     16  429d		       18		      .byte.b	$10+(.LUM3/256)
     17  429e
     18  429e
     19  429e
     20  429e
     21  429e
     22  429e				   .LUM1      SET	.LUM1 + .STEP1
     23  429e				   .LUM2      SET	.LUM2 + .STEP2
     24  429e				   .LUM3      SET	.LUM3 + .STEP3
     13  429e					      REPEND
     14  429e		       66		      .byte.b	$60+(.LUM1/256)
     15  429f		       84		      .byte.b	$80+(.LUM2/256)
     16  42a0		       18		      .byte.b	$10+(.LUM3/256)
     17  42a1
     18  42a1
     19  42a1
     20  42a1
     21  42a1
     22  42a1				   .LUM1      SET	.LUM1 + .STEP1
     23  42a1				   .LUM2      SET	.LUM2 + .STEP2
     24  42a1				   .LUM3      SET	.LUM3 + .STEP3
     13  42a1					      REPEND
     14  42a1		       66		      .byte.b	$60+(.LUM1/256)
     15  42a2		       84		      .byte.b	$80+(.LUM2/256)
     16  42a3		       18		      .byte.b	$10+(.LUM3/256)
     17  42a4
     18  42a4
     19  42a4
     20  42a4
     21  42a4
     22  42a4				   .LUM1      SET	.LUM1 + .STEP1
     23  42a4				   .LUM2      SET	.LUM2 + .STEP2
     24  42a4				   .LUM3      SET	.LUM3 + .STEP3
     13  42a4					      REPEND
     14  42a4		       66		      .byte.b	$60+(.LUM1/256)
     15  42a5		       84		      .byte.b	$80+(.LUM2/256)
     16  42a6		       18		      .byte.b	$10+(.LUM3/256)
     17  42a7
     18  42a7
     19  42a7
     20  42a7
     21  42a7
     22  42a7				   .LUM1      SET	.LUM1 + .STEP1
     23  42a7				   .LUM2      SET	.LUM2 + .STEP2
     24  42a7				   .LUM3      SET	.LUM3 + .STEP3
     13  42a7					      REPEND
     14  42a7		       66		      .byte.b	$60+(.LUM1/256)
     15  42a8		       84		      .byte.b	$80+(.LUM2/256)
     16  42a9		       18		      .byte.b	$10+(.LUM3/256)
     17  42aa
     18  42aa
     19  42aa
     20  42aa
     21  42aa
     22  42aa				   .LUM1      SET	.LUM1 + .STEP1
     23  42aa				   .LUM2      SET	.LUM2 + .STEP2
     24  42aa				   .LUM3      SET	.LUM3 + .STEP3
     13  42aa					      REPEND
     14  42aa		       66		      .byte.b	$60+(.LUM1/256)
     15  42ab		       84		      .byte.b	$80+(.LUM2/256)
     16  42ac		       18		      .byte.b	$10+(.LUM3/256)
     17  42ad
     18  42ad
     19  42ad
     20  42ad
     21  42ad
     22  42ad				   .LUM1      SET	.LUM1 + .STEP1
     23  42ad				   .LUM2      SET	.LUM2 + .STEP2
     24  42ad				   .LUM3      SET	.LUM3 + .STEP3
     13  42ad					      REPEND
     14  42ad		       66		      .byte.b	$60+(.LUM1/256)
     15  42ae		       84		      .byte.b	$80+(.LUM2/256)
     16  42af		       18		      .byte.b	$10+(.LUM3/256)
     17  42b0
     18  42b0
     19  42b0
     20  42b0
     21  42b0
     22  42b0				   .LUM1      SET	.LUM1 + .STEP1
     23  42b0				   .LUM2      SET	.LUM2 + .STEP2
     24  42b0				   .LUM3      SET	.LUM3 + .STEP3
     25  42b0					      REPEND
    262  42b0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    263  42b0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  42b0					      include	"titleData.asm"
      1  42b0				   COL_0
      2  42b0		       00		      .byte.b	0	;R (71)
      3  42b1		       00		      .byte.b	0	;G
      4  42b2		       00		      .byte.b	0	;B
      5  42b3		       40		      .byte.b	64	;R (70)
      6  42b4		       40		      .byte.b	64	;G
      7  42b5		       00		      .byte.b	0	;B
      8  42b6		       00		      .byte.b	0	;R (69)
      9  42b7		       00		      .byte.b	0	;G
     10  42b8		       00		      .byte.b	0	;B
     11  42b9		       00		      .byte.b	0	;R (68)
     12  42ba		       80		      .byte.b	128	;G
     13  42bb		       00		      .byte.b	0	;B
     14  42bc		       00		      .byte.b	0	;R (67)
     15  42bd		       20		      .byte.b	32	;G
     16  42be		       00		      .byte.b	0	;B
     17  42bf		       80		      .byte.b	128	;R (66)
     18  42c0		       80		      .byte.b	128	;G
     19  42c1		       00		      .byte.b	0	;B
     20  42c2		       c0		      .byte.b	192	;R (65)
     21  42c3		       c0		      .byte.b	192	;G
     22  42c4		       00		      .byte.b	0	;B
     23  42c5		       40		      .byte.b	64	;R (64)
     24  42c6		       c0		      .byte.b	192	;G
     25  42c7		       00		      .byte.b	0	;B
     26  42c8		       00		      .byte.b	0	;R (63)
     27  42c9		       a0		      .byte.b	160	;G
     28  42ca		       00		      .byte.b	0	;B
     29  42cb		       10		      .byte.b	16	;R (62)
     30  42cc		       70		      .byte.b	112	;G
     31  42cd		       00		      .byte.b	0	;B
     32  42ce		       00		      .byte.b	0	;R (61)
     33  42cf		       80		      .byte.b	128	;G
     34  42d0		       40		      .byte.b	64	;B
     35  42d1		       00		      .byte.b	0	;R (60)
     36  42d2		       c0		      .byte.b	192	;G
     37  42d3		       00		      .byte.b	0	;B
     38  42d4		       00		      .byte.b	0	;R (59)
     39  42d5		       c0		      .byte.b	192	;G
     40  42d6		       00		      .byte.b	0	;B
     41  42d7		       00		      .byte.b	0	;R (58)
     42  42d8		       40		      .byte.b	64	;G
     43  42d9		       00		      .byte.b	0	;B
     44  42da		       00		      .byte.b	0	;R (57)
     45  42db		       c0		      .byte.b	192	;G
     46  42dc		       00		      .byte.b	0	;B
     47  42dd		       00		      .byte.b	0	;R (56)
     48  42de		       60		      .byte.b	96	;G
     49  42df		       00		      .byte.b	0	;B
     50  42e0		       00		      .byte.b	0	;R (55)
     51  42e1		       80		      .byte.b	128	;G
     52  42e2		       00		      .byte.b	0	;B
     53  42e3		       00		      .byte.b	0	;R (54)
     54  42e4		       40		      .byte.b	64	;G
     55  42e5		       00		      .byte.b	0	;B
     56  42e6		       00		      .byte.b	0	;R (53)
     57  42e7		       80		      .byte.b	128	;G
     58  42e8		       00		      .byte.b	0	;B
     59  42e9		       00		      .byte.b	0	;R (52)
     60  42ea		       80		      .byte.b	128	;G
     61  42eb		       00		      .byte.b	0	;B
     62  42ec		       00		      .byte.b	0	;R (51)
     63  42ed		       10		      .byte.b	16	;G
     64  42ee		       00		      .byte.b	0	;B
     65  42ef		       00		      .byte.b	0	;R (50)
     66  42f0		       00		      .byte.b	0	;G
     67  42f1		       00		      .byte.b	0	;B
     68  42f2		       00		      .byte.b	0	;R (49)
     69  42f3		       00		      .byte.b	0	;G
     70  42f4		       00		      .byte.b	0	;B
     71  42f5		       00		      .byte.b	0	;R (48)
     72  42f6		       00		      .byte.b	0	;G
     73  42f7		       00		      .byte.b	0	;B
     74  42f8		       00		      .byte.b	0	;R (47)
     75  42f9		       00		      .byte.b	0	;G
     76  42fa		       00		      .byte.b	0	;B
     77  42fb		       00		      .byte.b	0	;R (46)
     78  42fc		       40		      .byte.b	64	;G
     79  42fd		       00		      .byte.b	0	;B
     80  42fe		       00		      .byte.b	0	;R (45)
     81  42ff		       00		      .byte.b	0	;G
     82  4300		       00		      .byte.b	0	;B
     83  4301		       00		      .byte.b	0	;R (44)
     84  4302		       00		      .byte.b	0	;G
     85  4303		       00		      .byte.b	0	;B
     86  4304		       00		      .byte.b	0	;R (43)
     87  4305		       00		      .byte.b	0	;G
     88  4306		       00		      .byte.b	0	;B
     89  4307		       00		      .byte.b	0	;R (42)
     90  4308		       40		      .byte.b	64	;G
     91  4309		       00		      .byte.b	0	;B
     92  430a		       00		      .byte.b	0	;R (41)
     93  430b		       00		      .byte.b	0	;G
     94  430c		       00		      .byte.b	0	;B
     95  430d		       00		      .byte.b	0	;R (40)
     96  430e		       00		      .byte.b	0	;G
     97  430f		       00		      .byte.b	0	;B
     98  4310		       00		      .byte.b	0	;R (39)
     99  4311		       20		      .byte.b	32	;G
    100  4312		       00		      .byte.b	0	;B
    101  4313		       00		      .byte.b	0	;R (38)
    102  4314		       00		      .byte.b	0	;G
    103  4315		       00		      .byte.b	0	;B
    104  4316		       00		      .byte.b	0	;R (37)
    105  4317		       10		      .byte.b	16	;G
    106  4318		       00		      .byte.b	0	;B
    107  4319		       00		      .byte.b	0	;R (36)
    108  431a		       00		      .byte.b	0	;G
    109  431b		       00		      .byte.b	0	;B
    110  431c		       00		      .byte.b	0	;R (35)
    111  431d		       40		      .byte.b	64	;G
    112  431e		       00		      .byte.b	0	;B
    113  431f		       00		      .byte.b	0	;R (34)
    114  4320		       20		      .byte.b	32	;G
    115  4321		       00		      .byte.b	0	;B
    116  4322		       00		      .byte.b	0	;R (33)
    117  4323		       00		      .byte.b	0	;G
    118  4324		       00		      .byte.b	0	;B
    119  4325		       00		      .byte.b	0	;R (32)
    120  4326		       00		      .byte.b	0	;G
    121  4327		       00		      .byte.b	0	;B
    122  4328		       00		      .byte.b	0	;R (31)
    123  4329		       20		      .byte.b	32	;G
    124  432a		       00		      .byte.b	0	;B
    125  432b		       00		      .byte.b	0	;R (30)
    126  432c		       00		      .byte.b	0	;G
    127  432d		       00		      .byte.b	0	;B
    128  432e		       00		      .byte.b	0	;R (29)
    129  432f		       80		      .byte.b	128	;G
    130  4330		       00		      .byte.b	0	;B
    131  4331		       00		      .byte.b	0	;R (28)
    132  4332		       00		      .byte.b	0	;G
    133  4333		       00		      .byte.b	0	;B
    134  4334		       00		      .byte.b	0	;R (27)
    135  4335		       20		      .byte.b	32	;G
    136  4336		       00		      .byte.b	0	;B
    137  4337		       00		      .byte.b	0	;R (26)
    138  4338		       00		      .byte.b	0	;G
    139  4339		       00		      .byte.b	0	;B
    140  433a		       00		      .byte.b	0	;R (25)
    141  433b		       00		      .byte.b	0	;G
    142  433c		       00		      .byte.b	0	;B
    143  433d		       00		      .byte.b	0	;R (24)
    144  433e		       20		      .byte.b	32	;G
    145  433f		       00		      .byte.b	0	;B
    146  4340		       00		      .byte.b	0	;R (23)
    147  4341		       00		      .byte.b	0	;G
    148  4342		       00		      .byte.b	0	;B
    149  4343		       00		      .byte.b	0	;R (22)
    150  4344		       00		      .byte.b	0	;G
    151  4345		       00		      .byte.b	0	;B
    152  4346		       00		      .byte.b	0	;R (21)
    153  4347		       20		      .byte.b	32	;G
    154  4348		       00		      .byte.b	0	;B
    155  4349		       00		      .byte.b	0	;R (20)
    156  434a		       00		      .byte.b	0	;G
    157  434b		       00		      .byte.b	0	;B
    158  434c		       00		      .byte.b	0	;R (19)
    159  434d		       00		      .byte.b	0	;G
    160  434e		       00		      .byte.b	0	;B
    161  434f		       00		      .byte.b	0	;R (18)
    162  4350		       00		      .byte.b	0	;G
    163  4351		       00		      .byte.b	0	;B
    164  4352		       00		      .byte.b	0	;R (17)
    165  4353		       80		      .byte.b	128	;G
    166  4354		       00		      .byte.b	0	;B
    167  4355		       00		      .byte.b	0	;R (16)
    168  4356		       00		      .byte.b	0	;G
    169  4357		       00		      .byte.b	0	;B
    170  4358		       00		      .byte.b	0	;R (15)
    171  4359		       10		      .byte.b	16	;G
    172  435a		       00		      .byte.b	0	;B
    173  435b		       00		      .byte.b	0	;R (14)
    174  435c		       00		      .byte.b	0	;G
    175  435d		       00		      .byte.b	0	;B
    176  435e		       00		      .byte.b	0	;R (13)
    177  435f		       00		      .byte.b	0	;G
    178  4360		       00		      .byte.b	0	;B
    179  4361		       00		      .byte.b	0	;R (12)
    180  4362		       80		      .byte.b	128	;G
    181  4363		       00		      .byte.b	0	;B
    182  4364		       00		      .byte.b	0	;R (11)
    183  4365		       00		      .byte.b	0	;G
    184  4366		       00		      .byte.b	0	;B
    185  4367		       00		      .byte.b	0	;R (10)
    186  4368		       00		      .byte.b	0	;G
    187  4369		       00		      .byte.b	0	;B
    188  436a		       00		      .byte.b	0	;R (9)
    189  436b		       80		      .byte.b	128	;G
    190  436c		       00		      .byte.b	0	;B
    191  436d		       00		      .byte.b	0	;R (8)
    192  436e		       00		      .byte.b	0	;G
    193  436f		       00		      .byte.b	0	;B
    194  4370		       00		      .byte.b	0	;R (7)
    195  4371		       20		      .byte.b	32	;G
    196  4372		       00		      .byte.b	0	;B
    197  4373		       00		      .byte.b	0	;R (6)
    198  4374		       00		      .byte.b	0	;G
    199  4375		       00		      .byte.b	0	;B
    200  4376		       00		      .byte.b	0	;R (5)
    201  4377		       10		      .byte.b	16	;G
    202  4378		       00		      .byte.b	0	;B
    203  4379		       00		      .byte.b	0	;R (4)
    204  437a		       00		      .byte.b	0	;G
    205  437b		       00		      .byte.b	0	;B
    206  437c		       00		      .byte.b	0	;R (3)
    207  437d		       00		      .byte.b	0	;G
    208  437e		       00		      .byte.b	0	;B
    209  437f		       00		      .byte.b	0	;R (2)
    210  4380		       40		      .byte.b	64	;G
    211  4381		       00		      .byte.b	0	;B
    212  4382		       00		      .byte.b	0	;R (1)
    213  4383		       00		      .byte.b	0	;G
    214  4384		       00		      .byte.b	0	;B
    215  4385		       00		      .byte.b	0	;R (0)
    216  4386		       00		      .byte.b	0	;G
    217  4387		       00		      .byte.b	0	;B
    218  4388				   COL_1
    219  4388		       80		      .byte.b	128	;R (71)
    220  4389		       80		      .byte.b	128	;G
    221  438a		       00		      .byte.b	0	;B
    222  438b		       10		      .byte.b	16	;R (70)
    223  438c		       14		      .byte.b	20	;G
    224  438d		       00		      .byte.b	0	;B
    225  438e		       00		      .byte.b	0	;R (69)
    226  438f		       41		      .byte.b	65	;G
    227  4390		       00		      .byte.b	0	;B
    228  4391		       00		      .byte.b	0	;R (68)
    229  4392		       08		      .byte.b	8	;G
    230  4393		       00		      .byte.b	0	;B
    231  4394		       20		      .byte.b	32	;R (67)
    232  4395		       20		      .byte.b	32	;G
    233  4396		       00		      .byte.b	0	;B
    234  4397		       63		      .byte.b	99	;R (66)
    235  4398		       6b		      .byte.b	107	;G
    236  4399		       00		      .byte.b	0	;B
    237  439a		       ff		      .byte.b	255	;R (65)
    238  439b		       f5		      .byte.b	245	;G
    239  439c		       00		      .byte.b	0	;B
    240  439d		       80		      .byte.b	128	;R (64)
    241  439e		       fb		      .byte.b	251	;G
    242  439f		       04		      .byte.b	4	;B
    243  43a0		       00		      .byte.b	0	;R (63)
    244  43a1		       b7		      .byte.b	183	;G
    245  43a2		       00		      .byte.b	0	;B
    246  43a3		       00		      .byte.b	0	;R (62)
    247  43a4		       b5		      .byte.b	181	;G
    248  43a5		       00		      .byte.b	0	;B
    249  43a6		       00		      .byte.b	0	;R (61)
    250  43a7		       ef		      .byte.b	239	;G
    251  43a8		       10		      .byte.b	16	;B
    252  43a9		       00		      .byte.b	0	;R (60)
    253  43aa		       bd		      .byte.b	189	;G
    254  43ab		       42		      .byte.b	66	;B
    255  43ac		       00		      .byte.b	0	;R (59)
    256  43ad		       77		      .byte.b	119	;G
    257  43ae		       00		      .byte.b	0	;B
    258  43af		       00		      .byte.b	0	;R (58)
    259  43b0		       ee		      .byte.b	238	;G
    260  43b1		       00		      .byte.b	0	;B
    261  43b2		       00		      .byte.b	0	;R (57)
    262  43b3		       9b		      .byte.b	155	;G
    263  43b4		       00		      .byte.b	0	;B
    264  43b5		       00		      .byte.b	0	;R (56)
    265  43b6		       f2		      .byte.b	242	;G
    266  43b7		       00		      .byte.b	0	;B
    267  43b8		       00		      .byte.b	0	;R (55)
    268  43b9		       40		      .byte.b	64	;G
    269  43ba		       00		      .byte.b	0	;B
    270  43bb		       00		      .byte.b	0	;R (54)
    271  43bc		       df		      .byte.b	223	;G
    272  43bd		       00		      .byte.b	0	;B
    273  43be		       10		      .byte.b	16	;R (53)
    274  43bf		       69		      .byte.b	105	;G
    275  43c0		       10		      .byte.b	16	;B
    276  43c1		       00		      .byte.b	0	;R (52)
    277  43c2		       4b		      .byte.b	75	;G
    278  43c3		       00		      .byte.b	0	;B
    279  43c4		       00		      .byte.b	0	;R (51)
    280  43c5		       b0		      .byte.b	176	;G
    281  43c6		       00		      .byte.b	0	;B
    282  43c7		       00		      .byte.b	0	;R (50)
    283  43c8		       a7		      .byte.b	167	;G
    284  43c9		       00		      .byte.b	0	;B
    285  43ca		       00		      .byte.b	0	;R (49)
    286  43cb		       7d		      .byte.b	125	;G
    287  43cc		       02		      .byte.b	2	;B
    288  43cd		       00		      .byte.b	0	;R (48)
    289  43ce		       db		      .byte.b	219	;G
    290  43cf		       20		      .byte.b	32	;B
    291  43d0		       00		      .byte.b	0	;R (47)
    292  43d1		       6d		      .byte.b	109	;G
    293  43d2		       00		      .byte.b	0	;B
    294  43d3		       00		      .byte.b	0	;R (46)
    295  43d4		       ea		      .byte.b	234	;G
    296  43d5		       00		      .byte.b	0	;B
    297  43d6		       00		      .byte.b	0	;R (45)
    298  43d7		       13		      .byte.b	19	;G
    299  43d8		       00		      .byte.b	0	;B
    300  43d9		       00		      .byte.b	0	;R (44)
    301  43da		       7e		      .byte.b	126	;G
    302  43db		       01		      .byte.b	1	;B
    303  43dc		       22		      .byte.b	34	;R (43)
    304  43dd		       77		      .byte.b	119	;G
    305  43de		       08		      .byte.b	8	;B
    306  43df		       04		      .byte.b	4	;R (42)
    307  43e0		       5f		      .byte.b	95	;G
    308  43e1		       00		      .byte.b	0	;B
    309  43e2		       00		      .byte.b	0	;R (41)
    310  43e3		       6f		      .byte.b	111	;G
    311  43e4		       00		      .byte.b	0	;B
    312  43e5		       00		      .byte.b	0	;R (40)
    313  43e6		       b5		      .byte.b	181	;G
    314  43e7		       00		      .byte.b	0	;B
    315  43e8		       00		      .byte.b	0	;R (39)
    316  43e9		       5b		      .byte.b	91	;G
    317  43ea		       00		      .byte.b	0	;B
    318  43eb		       00		      .byte.b	0	;R (38)
    319  43ec		       57		      .byte.b	87	;G
    320  43ed		       00		      .byte.b	0	;B
    321  43ee		       20		      .byte.b	32	;R (37)
    322  43ef		       4d		      .byte.b	77	;G
    323  43f0		       22		      .byte.b	34	;B
    324  43f1		       00		      .byte.b	0	;R (36)
    325  43f2		       55		      .byte.b	85	;G
    326  43f3		       00		      .byte.b	0	;B
    327  43f4		       01		      .byte.b	1	;R (35)
    328  43f5		       56		      .byte.b	86	;G
    329  43f6		       00		      .byte.b	0	;B
    330  43f7		       02		      .byte.b	2	;R (34)
    331  43f8		       57		      .byte.b	87	;G
    332  43f9		       00		      .byte.b	0	;B
    333  43fa		       00		      .byte.b	0	;R (33)
    334  43fb		       2a		      .byte.b	42	;G
    335  43fc		       01		      .byte.b	1	;B
    336  43fd		       01		      .byte.b	1	;R (32)
    337  43fe		       ab		      .byte.b	171	;G
    338  43ff		       00		      .byte.b	0	;B
    339  4400		       22		      .byte.b	34	;R (31)
    340  4401		       17		      .byte.b	23	;G
    341  4402		       20		      .byte.b	32	;B
    342  4403		       00		      .byte.b	0	;R (30)
    343  4404		       55		      .byte.b	85	;G
    344  4405		       02		      .byte.b	2	;B
    345  4406		       22		      .byte.b	34	;R (29)
    346  4407		       17		      .byte.b	23	;G
    347  4408		       20		      .byte.b	32	;B
    348  4409		       00		      .byte.b	0	;R (28)
    349  440a		       2b		      .byte.b	43	;G
    350  440b		       00		      .byte.b	0	;B
    351  440c		       00		      .byte.b	0	;R (27)
    352  440d		       95		      .byte.b	149	;G
    353  440e		       02		      .byte.b	2	;B
    354  440f		       00		      .byte.b	0	;R (26)
    355  4410		       17		      .byte.b	23	;G
    356  4411		       00		      .byte.b	0	;B
    357  4412		       00		      .byte.b	0	;R (25)
    358  4413		       2d		      .byte.b	45	;G
    359  4414		       00		      .byte.b	0	;B
    360  4415		       00		      .byte.b	0	;R (24)
    361  4416		       b4		      .byte.b	180	;G
    362  4417		       00		      .byte.b	0	;B
    363  4418		       00		      .byte.b	0	;R (23)
    364  4419		       0a		      .byte.b	10	;G
    365  441a		       00		      .byte.b	0	;B
    366  441b		       10		      .byte.b	16	;R (22)
    367  441c		       3c		      .byte.b	60	;G
    368  441d		       00		      .byte.b	0	;B
    369  441e		       10		      .byte.b	16	;R (21)
    370  441f		       98		      .byte.b	152	;G
    371  4420		       00		      .byte.b	0	;B
    372  4421		       10		      .byte.b	16	;R (20)
    373  4422		       1a		      .byte.b	26	;G
    374  4423		       00		      .byte.b	0	;B
    375  4424		       00		      .byte.b	0	;R (19)
    376  4425		       14		      .byte.b	20	;G
    377  4426		       00		      .byte.b	0	;B
    378  4427		       00		      .byte.b	0	;R (18)
    379  4428		       5a		      .byte.b	90	;G
    380  4429		       00		      .byte.b	0	;B
    381  442a		       00		      .byte.b	0	;R (17)
    382  442b		       09		      .byte.b	9	;G
    383  442c		       00		      .byte.b	0	;B
    384  442d		       08		      .byte.b	8	;R (16)
    385  442e		       1d		      .byte.b	29	;G
    386  442f		       00		      .byte.b	0	;B
    387  4430		       00		      .byte.b	0	;R (15)
    388  4431		       1a		      .byte.b	26	;G
    389  4432		       00		      .byte.b	0	;B
    390  4433		       20		      .byte.b	32	;R (14)
    391  4434		       ba		      .byte.b	186	;G
    392  4435		       00		      .byte.b	0	;B
    393  4436		       00		      .byte.b	0	;R (13)
    394  4437		       12		      .byte.b	18	;G
    395  4438		       00		      .byte.b	0	;B
    396  4439		       00		      .byte.b	0	;R (12)
    397  443a		       1a		      .byte.b	26	;G
    398  443b		       00		      .byte.b	0	;B
    399  443c		       00		      .byte.b	0	;R (11)
    400  443d		       2d		      .byte.b	45	;G
    401  443e		       10		      .byte.b	16	;B
    402  443f		       10		      .byte.b	16	;R (10)
    403  4440		       3b		      .byte.b	59	;G
    404  4441		       00		      .byte.b	0	;B
    405  4442		       24		      .byte.b	36	;R (9)
    406  4443		       39		      .byte.b	57	;G
    407  4444		       04		      .byte.b	4	;B
    408  4445		       20		      .byte.b	32	;R (8)
    409  4446		       35		      .byte.b	53	;G
    410  4447		       00		      .byte.b	0	;B
    411  4448		       00		      .byte.b	0	;R (7)
    412  4449		       3d		      .byte.b	61	;G
    413  444a		       00		      .byte.b	0	;B
    414  444b		       00		      .byte.b	0	;R (6)
    415  444c		       32		      .byte.b	50	;G
    416  444d		       00		      .byte.b	0	;B
    417  444e		       00		      .byte.b	0	;R (5)
    418  444f		       98		      .byte.b	152	;G
    419  4450		       00		      .byte.b	0	;B
    420  4451		       00		      .byte.b	0	;R (4)
    421  4452		       12		      .byte.b	18	;G
    422  4453		       00		      .byte.b	0	;B
    423  4454		       00		      .byte.b	0	;R (3)
    424  4455		       20		      .byte.b	32	;G
    425  4456		       00		      .byte.b	0	;B
    426  4457		       01		      .byte.b	1	;R (2)
    427  4458		       49		      .byte.b	73	;G
    428  4459		       00		      .byte.b	0	;B
    429  445a		       20		      .byte.b	32	;R (1)
    430  445b		       20		      .byte.b	32	;G
    431  445c		       00		      .byte.b	0	;B
    432  445d		       00		      .byte.b	0	;R (0)
    433  445e		       00		      .byte.b	0	;G
    434  445f		       00		      .byte.b	0	;B
    435  4460				   COL_2
    436  4460		       14		      .byte.b	20	;R (71)
    437  4461		       14		      .byte.b	20	;G
    438  4462		       00		      .byte.b	0	;B
    439  4463		       40		      .byte.b	64	;R (70)
    440  4464		       42		      .byte.b	66	;G
    441  4465		       00		      .byte.b	0	;B
    442  4466		       a8		      .byte.b	168	;R (69)
    443  4467		       a8		      .byte.b	168	;G
    444  4468		       00		      .byte.b	0	;B
    445  4469		       fd		      .byte.b	253	;R (68)
    446  446a		       1d		      .byte.b	29	;G
    447  446b		       00		      .byte.b	0	;B
    448  446c		       f0		      .byte.b	240	;R (67)
    449  446d		       44		      .byte.b	68	;G
    450  446e		       08		      .byte.b	8	;B
    451  446f		       ff		      .byte.b	255	;R (66)
    452  4470		       2f		      .byte.b	47	;G
    453  4471		       00		      .byte.b	0	;B
    454  4472		       ff		      .byte.b	255	;R (65)
    455  4473		       0e		      .byte.b	14	;G
    456  4474		       00		      .byte.b	0	;B
    457  4475		       f8		      .byte.b	248	;R (64)
    458  4476		       0f		      .byte.b	15	;G
    459  4477		       00		      .byte.b	0	;B
    460  4478		       f8		      .byte.b	248	;R (63)
    461  4479		       2e		      .byte.b	46	;G
    462  447a		       00		      .byte.b	0	;B
    463  447b		       f8		      .byte.b	248	;R (62)
    464  447c		       1e		      .byte.b	30	;G
    465  447d		       01		      .byte.b	1	;B
    466  447e		       74		      .byte.b	116	;R (61)
    467  447f		       23		      .byte.b	35	;G
    468  4480		       88		      .byte.b	136	;B
    469  4481		       fc		      .byte.b	252	;R (60)
    470  4482		       0f		      .byte.b	15	;G
    471  4483		       00		      .byte.b	0	;B
    472  4484		       f8		      .byte.b	248	;R (59)
    473  4485		       06		      .byte.b	6	;G
    474  4486		       01		      .byte.b	1	;B
    475  4487		       f8		      .byte.b	248	;R (58)
    476  4488		       8f		      .byte.b	143	;G
    477  4489		       00		      .byte.b	0	;B
    478  448a		       e8		      .byte.b	232	;R (57)
    479  448b		       0e		      .byte.b	14	;G
    480  448c		       10		      .byte.b	16	;B
    481  448d		       e0		      .byte.b	224	;R (56)
    482  448e		       97		      .byte.b	151	;G
    483  448f		       00		      .byte.b	0	;B
    484  4490		       f0		      .byte.b	240	;R (55)
    485  4491		       3a		      .byte.b	58	;G
    486  4492		       00		      .byte.b	0	;B
    487  4493		       e0		      .byte.b	224	;R (54)
    488  4494		       bb		      .byte.b	187	;G
    489  4495		       04		      .byte.b	4	;B
    490  4496		       e0		      .byte.b	224	;R (53)
    491  4497		       3e		      .byte.b	62	;G
    492  4498		       00		      .byte.b	0	;B
    493  4499		       c0		      .byte.b	192	;R (52)
    494  449a		       2a		      .byte.b	42	;G
    495  449b		       00		      .byte.b	0	;B
    496  449c		       80		      .byte.b	128	;R (51)
    497  449d		       3f		      .byte.b	63	;G
    498  449e		       40		      .byte.b	64	;B
    499  449f		       f5		      .byte.b	245	;R (50)
    500  44a0		       3f		      .byte.b	63	;G
    501  44a1		       00		      .byte.b	0	;B
    502  44a2		       e8		      .byte.b	232	;R (49)
    503  44a3		       7f		      .byte.b	127	;G
    504  44a4		       00		      .byte.b	0	;B
    505  44a5		       e0		      .byte.b	224	;R (48)
    506  44a6		       7a		      .byte.b	122	;G
    507  44a7		       04		      .byte.b	4	;B
    508  44a8		       c0		      .byte.b	192	;R (47)
    509  44a9		       5f		      .byte.b	95	;G
    510  44aa		       00		      .byte.b	0	;B
    511  44ab		       90		      .byte.b	144	;R (46)
    512  44ac		       dd		      .byte.b	221	;G
    513  44ad		       02		      .byte.b	2	;B
    514  44ae		       84		      .byte.b	132	;R (45)
    515  44af		       9f		      .byte.b	159	;G
    516  44b0		       00		      .byte.b	0	;B
    517  44b1		       c4		      .byte.b	196	;R (44)
    518  44b2		       cf		      .byte.b	207	;G
    519  44b3		       00		      .byte.b	0	;B
    520  44b4		       c5		      .byte.b	197	;R (43)
    521  44b5		       1f		      .byte.b	31	;G
    522  44b6		       00		      .byte.b	0	;B
    523  44b7		       d4		      .byte.b	212	;R (42)
    524  44b8		       9f		      .byte.b	159	;G
    525  44b9		       20		      .byte.b	32	;B
    526  44ba		       c8		      .byte.b	200	;R (41)
    527  44bb		       1e		      .byte.b	30	;G
    528  44bc		       01		      .byte.b	1	;B
    529  44bd		       c8		      .byte.b	200	;R (40)
    530  44be		       5f		      .byte.b	95	;G
    531  44bf		       00		      .byte.b	0	;B
    532  44c0		       cd		      .byte.b	205	;R (39)
    533  44c1		       5e		      .byte.b	94	;G
    534  44c2		       00		      .byte.b	0	;B
    535  44c3		       c7		      .byte.b	199	;R (38)
    536  44c4		       5b		      .byte.b	91	;G
    537  44c5		       00		      .byte.b	0	;B
    538  44c6		       8b		      .byte.b	139	;R (37)
    539  44c7		       1c		      .byte.b	28	;G
    540  44c8		       00		      .byte.b	0	;B
    541  44c9		       81		      .byte.b	129	;R (36)
    542  44ca		       9a		      .byte.b	154	;G
    543  44cb		       04		      .byte.b	4	;B
    544  44cc		       8e		      .byte.b	142	;R (35)
    545  44cd		       9d		      .byte.b	157	;G
    546  44ce		       00		      .byte.b	0	;B
    547  44cf		       2b		      .byte.b	43	;R (34)
    548  44d0		       36		      .byte.b	54	;G
    549  44d1		       00		      .byte.b	0	;B
    550  44d2		       3a		      .byte.b	58	;R (33)
    551  44d3		       0d		      .byte.b	13	;G
    552  44d4		       00		      .byte.b	0	;B
    553  44d5		       3e		      .byte.b	62	;R (32)
    554  44d6		       85		      .byte.b	133	;G
    555  44d7		       40		      .byte.b	64	;B
    556  44d8		       fa		      .byte.b	250	;R (31)
    557  44d9		       17		      .byte.b	23	;G
    558  44da		       00		      .byte.b	0	;B
    559  44db		       ff		      .byte.b	255	;R (30)
    560  44dc		       03		      .byte.b	3	;G
    561  44dd		       00		      .byte.b	0	;B
    562  44de		       fc		      .byte.b	252	;R (29)
    563  44df		       93		      .byte.b	147	;G
    564  44e0		       00		      .byte.b	0	;B
    565  44e1		       f7		      .byte.b	247	;R (28)
    566  44e2		       81		      .byte.b	129	;G
    567  44e3		       08		      .byte.b	8	;B
    568  44e4		       ff		      .byte.b	255	;R (27)
    569  44e5		       03		      .byte.b	3	;G
    570  44e6		       00		      .byte.b	0	;B
    571  44e7		       fe		      .byte.b	254	;R (26)
    572  44e8		       2b		      .byte.b	43	;G
    573  44e9		       00		      .byte.b	0	;B
    574  44ea		       fe		      .byte.b	254	;R (25)
    575  44eb		       0a		      .byte.b	10	;G
    576  44ec		       00		      .byte.b	0	;B
    577  44ed		       fc		      .byte.b	252	;R (24)
    578  44ee		       4f		      .byte.b	79	;G
    579  44ef		       00		      .byte.b	0	;B
    580  44f0		       fc		      .byte.b	252	;R (23)
    581  44f1		       55		      .byte.b	85	;G
    582  44f2		       00		      .byte.b	0	;B
    583  44f3		       f8		      .byte.b	248	;R (22)
    584  44f4		       45		      .byte.b	69	;G
    585  44f5		       00		      .byte.b	0	;B
    586  44f6		       e8		      .byte.b	232	;R (21)
    587  44f7		       05		      .byte.b	5	;G
    588  44f8		       10		      .byte.b	16	;B
    589  44f9		       f8		      .byte.b	248	;R (20)
    590  44fa		       5b		      .byte.b	91	;G
    591  44fb		       00		      .byte.b	0	;B
    592  44fc		       f8		      .byte.b	248	;R (19)
    593  44fd		       1d		      .byte.b	29	;G
    594  44fe		       00		      .byte.b	0	;B
    595  44ff		       f0		      .byte.b	240	;R (18)
    596  4500		       55		      .byte.b	85	;G
    597  4501		       00		      .byte.b	0	;B
    598  4502		       f0		      .byte.b	240	;R (17)
    599  4503		       16		      .byte.b	22	;G
    600  4504		       00		      .byte.b	0	;B
    601  4505		       f0		      .byte.b	240	;R (16)
    602  4506		       b2		      .byte.b	178	;G
    603  4507		       00		      .byte.b	0	;B
    604  4508		       e0		      .byte.b	224	;R (15)
    605  4509		       0e		      .byte.b	14	;G
    606  450a		       10		      .byte.b	16	;B
    607  450b		       f0		      .byte.b	240	;R (14)
    608  450c		       93		      .byte.b	147	;G
    609  450d		       00		      .byte.b	0	;B
    610  450e		       e0		      .byte.b	224	;R (13)
    611  450f		       25		      .byte.b	37	;G
    612  4510		       00		      .byte.b	0	;B
    613  4511		       c0		      .byte.b	192	;R (12)
    614  4512		       e5		      .byte.b	229	;G
    615  4513		       00		      .byte.b	0	;B
    616  4514		       80		      .byte.b	128	;R (11)
    617  4515		       0e		      .byte.b	14	;G
    618  4516		       00		      .byte.b	0	;B
    619  4517		       c0		      .byte.b	192	;R (10)
    620  4518		       ca		      .byte.b	202	;G
    621  4519		       00		      .byte.b	0	;B
    622  451a		       84		      .byte.b	132	;R (9)
    623  451b		       8e		      .byte.b	142	;G
    624  451c		       00		      .byte.b	0	;B
    625  451d		       00		      .byte.b	0	;R (8)
    626  451e		       8e		      .byte.b	142	;G
    627  451f		       00		      .byte.b	0	;B
    628  4520		       00		      .byte.b	0	;R (7)
    629  4521		       15		      .byte.b	21	;G
    630  4522		       00		      .byte.b	0	;B
    631  4523		       00		      .byte.b	0	;R (6)
    632  4524		       14		      .byte.b	20	;G
    633  4525		       00		      .byte.b	0	;B
    634  4526		       00		      .byte.b	0	;R (5)
    635  4527		       14		      .byte.b	20	;G
    636  4528		       00		      .byte.b	0	;B
    637  4529		       00		      .byte.b	0	;R (4)
    638  452a		       0a		      .byte.b	10	;G
    639  452b		       00		      .byte.b	0	;B
    640  452c		       00		      .byte.b	0	;R (3)
    641  452d		       10		      .byte.b	16	;G
    642  452e		       00		      .byte.b	0	;B
    643  452f		       08		      .byte.b	8	;R (2)
    644  4530		       88		      .byte.b	136	;G
    645  4531		       00		      .byte.b	0	;B
    646  4532		       40		      .byte.b	64	;R (1)
    647  4533		       42		      .byte.b	66	;G
    648  4534		       00		      .byte.b	0	;B
    649  4535		       00		      .byte.b	0	;R (0)
    650  4536		       00		      .byte.b	0	;G
    651  4537		       00		      .byte.b	0	;B
    652  4538				   COL_3
    653  4538		       90		      .byte.b	144	;R (71)
    654  4539		       90		      .byte.b	144	;G
    655  453a		       00		      .byte.b	0	;B
    656  453b		       40		      .byte.b	64	;R (70)
    657  453c		       40		      .byte.b	64	;G
    658  453d		       00		      .byte.b	0	;B
    659  453e		       b0		      .byte.b	176	;R (69)
    660  453f		       b0		      .byte.b	176	;G
    661  4540		       00		      .byte.b	0	;B
    662  4541		       d0		      .byte.b	208	;R (68)
    663  4542		       00		      .byte.b	0	;G
    664  4543		       20		      .byte.b	32	;B
    665  4544		       f0		      .byte.b	240	;R (67)
    666  4545		       00		      .byte.b	0	;G
    667  4546		       00		      .byte.b	0	;B
    668  4547		       f0		      .byte.b	240	;R (66)
    669  4548		       d0		      .byte.b	208	;G
    670  4549		       00		      .byte.b	0	;B
    671  454a		       f0		      .byte.b	240	;R (65)
    672  454b		       00		      .byte.b	0	;G
    673  454c		       00		      .byte.b	0	;B
    674  454d		       f0		      .byte.b	240	;R (64)
    675  454e		       00		      .byte.b	0	;G
    676  454f		       00		      .byte.b	0	;B
    677  4550		       f0		      .byte.b	240	;R (63)
    678  4551		       50		      .byte.b	80	;G
    679  4552		       00		      .byte.b	0	;B
    680  4553		       f0		      .byte.b	240	;R (62)
    681  4554		       00		      .byte.b	0	;G
    682  4555		       00		      .byte.b	0	;B
    683  4556		       f0		      .byte.b	240	;R (61)
    684  4557		       a0		      .byte.b	160	;G
    685  4558		       00		      .byte.b	0	;B
    686  4559		       f0		      .byte.b	240	;R (60)
    687  455a		       00		      .byte.b	0	;G
    688  455b		       00		      .byte.b	0	;B
    689  455c		       f0		      .byte.b	240	;R (59)
    690  455d		       d0		      .byte.b	208	;G
    691  455e		       00		      .byte.b	0	;B
    692  455f		       f0		      .byte.b	240	;R (58)
    693  4560		       c0		      .byte.b	192	;G
    694  4561		       00		      .byte.b	0	;B
    695  4562		       f0		      .byte.b	240	;R (57)
    696  4563		       90		      .byte.b	144	;G
    697  4564		       00		      .byte.b	0	;B
    698  4565		       f0		      .byte.b	240	;R (56)
    699  4566		       80		      .byte.b	128	;G
    700  4567		       00		      .byte.b	0	;B
    701  4568		       f0		      .byte.b	240	;R (55)
    702  4569		       40		      .byte.b	64	;G
    703  456a		       00		      .byte.b	0	;B
    704  456b		       70		      .byte.b	112	;R (54)
    705  456c		       00		      .byte.b	0	;G
    706  456d		       80		      .byte.b	128	;B
    707  456e		       d0		      .byte.b	208	;R (53)
    708  456f		       00		      .byte.b	0	;G
    709  4570		       20		      .byte.b	32	;B
    710  4571		       f0		      .byte.b	240	;R (52)
    711  4572		       80		      .byte.b	128	;G
    712  4573		       00		      .byte.b	0	;B
    713  4574		       f0		      .byte.b	240	;R (51)
    714  4575		       00		      .byte.b	0	;G
    715  4576		       00		      .byte.b	0	;B
    716  4577		       f0		      .byte.b	240	;R (50)
    717  4578		       a0		      .byte.b	160	;G
    718  4579		       00		      .byte.b	0	;B
    719  457a		       f0		      .byte.b	240	;R (49)
    720  457b		       80		      .byte.b	128	;G
    721  457c		       00		      .byte.b	0	;B
    722  457d		       f0		      .byte.b	240	;R (48)
    723  457e		       40		      .byte.b	64	;G
    724  457f		       00		      .byte.b	0	;B
    725  4580		       f0		      .byte.b	240	;R (47)
    726  4581		       20		      .byte.b	32	;G
    727  4582		       00		      .byte.b	0	;B
    728  4583		       f0		      .byte.b	240	;R (46)
    729  4584		       00		      .byte.b	0	;G
    730  4585		       00		      .byte.b	0	;B
    731  4586		       f0		      .byte.b	240	;R (45)
    732  4587		       80		      .byte.b	128	;G
    733  4588		       00		      .byte.b	0	;B
    734  4589		       f0		      .byte.b	240	;R (44)
    735  458a		       00		      .byte.b	0	;G
    736  458b		       00		      .byte.b	0	;B
    737  458c		       f0		      .byte.b	240	;R (43)
    738  458d		       40		      .byte.b	64	;G
    739  458e		       00		      .byte.b	0	;B
    740  458f		       f0		      .byte.b	240	;R (42)
    741  4590		       00		      .byte.b	0	;G
    742  4591		       00		      .byte.b	0	;B
    743  4592		       f0		      .byte.b	240	;R (41)
    744  4593		       20		      .byte.b	32	;G
    745  4594		       00		      .byte.b	0	;B
    746  4595		       f0		      .byte.b	240	;R (40)
    747  4596		       20		      .byte.b	32	;G
    748  4597		       00		      .byte.b	0	;B
    749  4598		       f0		      .byte.b	240	;R (39)
    750  4599		       50		      .byte.b	80	;G
    751  459a		       00		      .byte.b	0	;B
    752  459b		       f0		      .byte.b	240	;R (38)
    753  459c		       10		      .byte.b	16	;G
    754  459d		       00		      .byte.b	0	;B
    755  459e		       70		      .byte.b	112	;R (37)
    756  459f		       80		      .byte.b	128	;G
    757  45a0		       80		      .byte.b	128	;B
    758  45a1		       f0		      .byte.b	240	;R (36)
    759  45a2		       50		      .byte.b	80	;G
    760  45a3		       00		      .byte.b	0	;B
    761  45a4		       f0		      .byte.b	240	;R (35)
    762  45a5		       00		      .byte.b	0	;G
    763  45a6		       00		      .byte.b	0	;B
    764  45a7		       f0		      .byte.b	240	;R (34)
    765  45a8		       40		      .byte.b	64	;G
    766  45a9		       00		      .byte.b	0	;B
    767  45aa		       f0		      .byte.b	240	;R (33)
    768  45ab		       10		      .byte.b	16	;G
    769  45ac		       00		      .byte.b	0	;B
    770  45ad		       f0		      .byte.b	240	;R (32)
    771  45ae		       b0		      .byte.b	176	;G
    772  45af		       00		      .byte.b	0	;B
    773  45b0		       e0		      .byte.b	224	;R (31)
    774  45b1		       00		      .byte.b	0	;G
    775  45b2		       10		      .byte.b	16	;B
    776  45b3		       e0		      .byte.b	224	;R (30)
    777  45b4		       40		      .byte.b	64	;G
    778  45b5		       00		      .byte.b	0	;B
    779  45b6		       e0		      .byte.b	224	;R (29)
    780  45b7		       20		      .byte.b	32	;G
    781  45b8		       00		      .byte.b	0	;B
    782  45b9		       c0		      .byte.b	192	;R (28)
    783  45ba		       00		      .byte.b	0	;G
    784  45bb		       00		      .byte.b	0	;B
    785  45bc		       c0		      .byte.b	192	;R (27)
    786  45bd		       10		      .byte.b	16	;G
    787  45be		       00		      .byte.b	0	;B
    788  45bf		       c0		      .byte.b	192	;R (26)
    789  45c0		       40		      .byte.b	64	;G
    790  45c1		       10		      .byte.b	16	;B
    791  45c2		       90		      .byte.b	144	;R (25)
    792  45c3		       00		      .byte.b	0	;G
    793  45c4		       00		      .byte.b	0	;B
    794  45c5		       f0		      .byte.b	240	;R (24)
    795  45c6		       60		      .byte.b	96	;G
    796  45c7		       00		      .byte.b	0	;B
    797  45c8		       f0		      .byte.b	240	;R (23)
    798  45c9		       00		      .byte.b	0	;G
    799  45ca		       00		      .byte.b	0	;B
    800  45cb		       f0		      .byte.b	240	;R (22)
    801  45cc		       40		      .byte.b	64	;G
    802  45cd		       00		      .byte.b	0	;B
    803  45ce		       f0		      .byte.b	240	;R (21)
    804  45cf		       10		      .byte.b	16	;G
    805  45d0		       00		      .byte.b	0	;B
    806  45d1		       f0		      .byte.b	240	;R (20)
    807  45d2		       00		      .byte.b	0	;G
    808  45d3		       00		      .byte.b	0	;B
    809  45d4		       f0		      .byte.b	240	;R (19)
    810  45d5		       60		      .byte.b	96	;G
    811  45d6		       00		      .byte.b	0	;B
    812  45d7		       f0		      .byte.b	240	;R (18)
    813  45d8		       20		      .byte.b	32	;G
    814  45d9		       00		      .byte.b	0	;B
    815  45da		       f0		      .byte.b	240	;R (17)
    816  45db		       50		      .byte.b	80	;G
    817  45dc		       00		      .byte.b	0	;B
    818  45dd		       f0		      .byte.b	240	;R (16)
    819  45de		       40		      .byte.b	64	;G
    820  45df		       00		      .byte.b	0	;B
    821  45e0		       f0		      .byte.b	240	;R (15)
    822  45e1		       80		      .byte.b	128	;G
    823  45e2		       00		      .byte.b	0	;B
    824  45e3		       f0		      .byte.b	240	;R (14)
    825  45e4		       40		      .byte.b	64	;G
    826  45e5		       00		      .byte.b	0	;B
    827  45e6		       f0		      .byte.b	240	;R (13)
    828  45e7		       00		      .byte.b	0	;G
    829  45e8		       00		      .byte.b	0	;B
    830  45e9		       f0		      .byte.b	240	;R (12)
    831  45ea		       10		      .byte.b	16	;G
    832  45eb		       00		      .byte.b	0	;B
    833  45ec		       f0		      .byte.b	240	;R (11)
    834  45ed		       50		      .byte.b	80	;G
    835  45ee		       00		      .byte.b	0	;B
    836  45ef		       f0		      .byte.b	240	;R (10)
    837  45f0		       00		      .byte.b	0	;G
    838  45f1		       00		      .byte.b	0	;B
    839  45f2		       f0		      .byte.b	240	;R (9)
    840  45f3		       b0		      .byte.b	176	;G
    841  45f4		       00		      .byte.b	0	;B
    842  45f5		       f0		      .byte.b	240	;R (8)
    843  45f6		       90		      .byte.b	144	;G
    844  45f7		       00		      .byte.b	0	;B
    845  45f8		       e0		      .byte.b	224	;R (7)
    846  45f9		       e0		      .byte.b	224	;G
    847  45fa		       00		      .byte.b	0	;B
    848  45fb		       f0		      .byte.b	240	;R (6)
    849  45fc		       d0		      .byte.b	208	;G
    850  45fd		       00		      .byte.b	0	;B
    851  45fe		       60		      .byte.b	96	;R (5)
    852  45ff		       00		      .byte.b	0	;G
    853  4600		       00		      .byte.b	0	;B
    854  4601		       60		      .byte.b	96	;R (4)
    855  4602		       40		      .byte.b	64	;G
    856  4603		       00		      .byte.b	0	;B
    857  4604		       40		      .byte.b	64	;R (3)
    858  4605		       50		      .byte.b	80	;G
    859  4606		       00		      .byte.b	0	;B
    860  4607		       00		      .byte.b	0	;R (2)
    861  4608		       00		      .byte.b	0	;G
    862  4609		       00		      .byte.b	0	;B
    863  460a		       00		      .byte.b	0	;R (1)
    864  460b		       80		      .byte.b	128	;G
    865  460c		       00		      .byte.b	0	;B
    866  460d		       00		      .byte.b	0	;R (0)
    867  460e		       00		      .byte.b	0	;G
    868  460f		       00		      .byte.b	0	;B
    869  4610				   COL_4
    870  4610		       25		      .byte.b	37	;R (71)
    871  4611		       25		      .byte.b	37	;G
    872  4612		       00		      .byte.b	0	;B
    873  4613		       48		      .byte.b	72	;R (70)
    874  4614		       48		      .byte.b	72	;G
    875  4615		       00		      .byte.b	0	;B
    876  4616		       25		      .byte.b	37	;R (69)
    877  4617		       25		      .byte.b	37	;G
    878  4618		       88		      .byte.b	136	;B
    879  4619		       ff		      .byte.b	255	;R (68)
    880  461a		       00		      .byte.b	0	;G
    881  461b		       00		      .byte.b	0	;B
    882  461c		       ff		      .byte.b	255	;R (67)
    883  461d		       04		      .byte.b	4	;G
    884  461e		       00		      .byte.b	0	;B
    885  461f		       ef		      .byte.b	239	;R (66)
    886  4620		       40		      .byte.b	64	;G
    887  4621		       10		      .byte.b	16	;B
    888  4622		       ff		      .byte.b	255	;R (65)
    889  4623		       00		      .byte.b	0	;G
    890  4624		       00		      .byte.b	0	;B
    891  4625		       ff		      .byte.b	255	;R (64)
    892  4626		       02		      .byte.b	2	;G
    893  4627		       00		      .byte.b	0	;B
    894  4628		       ff		      .byte.b	255	;R (63)
    895  4629		       20		      .byte.b	32	;G
    896  462a		       00		      .byte.b	0	;B
    897  462b		       ff		      .byte.b	255	;R (62)
    898  462c		       a5		      .byte.b	165	;G
    899  462d		       00		      .byte.b	0	;B
    900  462e		       ff		      .byte.b	255	;R (61)
    901  462f		       09		      .byte.b	9	;G
    902  4630		       00		      .byte.b	0	;B
    903  4631		       ff		      .byte.b	255	;R (60)
    904  4632		       00		      .byte.b	0	;G
    905  4633		       00		      .byte.b	0	;B
    906  4634		       7f		      .byte.b	127	;R (59)
    907  4635		       42		      .byte.b	66	;G
    908  4636		       80		      .byte.b	128	;B
    909  4637		       ff		      .byte.b	255	;R (58)
    910  4638		       88		      .byte.b	136	;G
    911  4639		       00		      .byte.b	0	;B
    912  463a		       ff		      .byte.b	255	;R (57)
    913  463b		       40		      .byte.b	64	;G
    914  463c		       00		      .byte.b	0	;B
    915  463d		       ff		      .byte.b	255	;R (56)
    916  463e		       09		      .byte.b	9	;G
    917  463f		       00		      .byte.b	0	;B
    918  4640		       7f		      .byte.b	127	;R (55)
    919  4641		       01		      .byte.b	1	;G
    920  4642		       80		      .byte.b	128	;B
    921  4643		       ff		      .byte.b	255	;R (54)
    922  4644		       91		      .byte.b	145	;G
    923  4645		       00		      .byte.b	0	;B
    924  4646		       fe		      .byte.b	254	;R (53)
    925  4647		       81		      .byte.b	129	;G
    926  4648		       00		      .byte.b	0	;B
    927  4649		       fe		      .byte.b	254	;R (52)
    928  464a		       20		      .byte.b	32	;G
    929  464b		       00		      .byte.b	0	;B
    930  464c		       ff		      .byte.b	255	;R (51)
    931  464d		       03		      .byte.b	3	;G
    932  464e		       00		      .byte.b	0	;B
    933  464f		       ff		      .byte.b	255	;R (50)
    934  4650		       83		      .byte.b	131	;G
    935  4651		       00		      .byte.b	0	;B
    936  4652		       fe		      .byte.b	254	;R (49)
    937  4653		       90		      .byte.b	144	;G
    938  4654		       00		      .byte.b	0	;B
    939  4655		       fe		      .byte.b	254	;R (48)
    940  4656		       83		      .byte.b	131	;G
    941  4657		       00		      .byte.b	0	;B
    942  4658		       7e		      .byte.b	126	;R (47)
    943  4659		       12		      .byte.b	18	;G
    944  465a		       80		      .byte.b	128	;B
    945  465b		       fc		      .byte.b	252	;R (46)
    946  465c		       00		      .byte.b	0	;G
    947  465d		       00		      .byte.b	0	;B
    948  465e		       fe		      .byte.b	254	;R (45)
    949  465f		       07		      .byte.b	7	;G
    950  4660		       00		      .byte.b	0	;B
    951  4661		       ef		      .byte.b	239	;R (44)
    952  4662		       03		      .byte.b	3	;G
    953  4663		       10		      .byte.b	16	;B
    954  4664		       ff		      .byte.b	255	;R (43)
    955  4665		       40		      .byte.b	64	;G
    956  4666		       00		      .byte.b	0	;B
    957  4667		       ff		      .byte.b	255	;R (42)
    958  4668		       01		      .byte.b	1	;G
    959  4669		       00		      .byte.b	0	;B
    960  466a		       ff		      .byte.b	255	;R (41)
    961  466b		       01		      .byte.b	1	;G
    962  466c		       00		      .byte.b	0	;B
    963  466d		       bf		      .byte.b	191	;R (40)
    964  466e		       01		      .byte.b	1	;G
    965  466f		       40		      .byte.b	64	;B
    966  4670		       f7		      .byte.b	247	;R (39)
    967  4671		       80		      .byte.b	128	;G
    968  4672		       08		      .byte.b	8	;B
    969  4673		       ff		      .byte.b	255	;R (38)
    970  4674		       40		      .byte.b	64	;G
    971  4675		       00		      .byte.b	0	;B
    972  4676		       ff		      .byte.b	255	;R (37)
    973  4677		       00		      .byte.b	0	;G
    974  4678		       00		      .byte.b	0	;B
    975  4679		       ff		      .byte.b	255	;R (36)
    976  467a		       40		      .byte.b	64	;G
    977  467b		       00		      .byte.b	0	;B
    978  467c		       ff		      .byte.b	255	;R (35)
    979  467d		       a1		      .byte.b	161	;G
    980  467e		       00		      .byte.b	0	;B
    981  467f		       7f		      .byte.b	127	;R (34)
    982  4680		       05		      .byte.b	5	;G
    983  4681		       80		      .byte.b	128	;B
    984  4682		       ff		      .byte.b	255	;R (33)
    985  4683		       21		      .byte.b	33	;G
    986  4684		       00		      .byte.b	0	;B
    987  4685		       bf		      .byte.b	191	;R (32)
    988  4686		       40		      .byte.b	64	;G
    989  4687		       40		      .byte.b	64	;B
    990  4688		       ff		      .byte.b	255	;R (31)
    991  4689		       61		      .byte.b	97	;G
    992  468a		       00		      .byte.b	0	;B
    993  468b		       7f		      .byte.b	127	;R (30)
    994  468c		       81		      .byte.b	129	;G
    995  468d		       80		      .byte.b	128	;B
    996  468e		       f7		      .byte.b	247	;R (29)
    997  468f		       60		      .byte.b	96	;G
    998  4690		       08		      .byte.b	8	;B
    999  4691		       ff		      .byte.b	255	;R (28)
   1000  4692		       81		      .byte.b	129	;G
   1001  4693		       00		      .byte.b	0	;B
   1002  4694		       ef		      .byte.b	239	;R (27)
   1003  4695		       40		      .byte.b	64	;G
   1004  4696		       10		      .byte.b	16	;B
   1005  4697		       ff		      .byte.b	255	;R (26)
   1006  4698		       60		      .byte.b	96	;G
   1007  4699		       00		      .byte.b	0	;B
   1008  469a		       ff		      .byte.b	255	;R (25)
   1009  469b		       18		      .byte.b	24	;G
   1010  469c		       00		      .byte.b	0	;B
   1011  469d		       ff		      .byte.b	255	;R (24)
   1012  469e		       20		      .byte.b	32	;G
   1013  469f		       00		      .byte.b	0	;B
   1014  46a0		       ff		      .byte.b	255	;R (23)
   1015  46a1		       8a		      .byte.b	138	;G
   1016  46a2		       00		      .byte.b	0	;B
   1017  46a3		       f7		      .byte.b	247	;R (22)
   1018  46a4		       10		      .byte.b	16	;G
   1019  46a5		       08		      .byte.b	8	;B
   1020  46a6		       ff		      .byte.b	255	;R (21)
   1021  46a7		       04		      .byte.b	4	;G
   1022  46a8		       00		      .byte.b	0	;B
   1023  46a9		       df		      .byte.b	223	;R (20)
   1024  46aa		       10		      .byte.b	16	;G
   1025  46ab		       20		      .byte.b	32	;B
   1026  46ac		       ff		      .byte.b	255	;R (19)
   1027  46ad		       90		      .byte.b	144	;G
   1028  46ae		       00		      .byte.b	0	;B
   1029  46af		       ff		      .byte.b	255	;R (18)
   1030  46b0		       12		      .byte.b	18	;G
   1031  46b1		       00		      .byte.b	0	;B
   1032  46b2		       ff		      .byte.b	255	;R (17)
   1033  46b3		       00		      .byte.b	0	;G
   1034  46b4		       00		      .byte.b	0	;B
   1035  46b5		       ff		      .byte.b	255	;R (16)
   1036  46b6		       45		      .byte.b	69	;G
   1037  46b7		       00		      .byte.b	0	;B
   1038  46b8		       ff		      .byte.b	255	;R (15)
   1039  46b9		       10		      .byte.b	16	;G
   1040  46ba		       00		      .byte.b	0	;B
   1041  46bb		       ff		      .byte.b	255	;R (14)
   1042  46bc		       23		      .byte.b	35	;G
   1043  46bd		       00		      .byte.b	0	;B
   1044  46be		       fc		      .byte.b	252	;R (13)
   1045  46bf		       12		      .byte.b	18	;G
   1046  46c0		       00		      .byte.b	0	;B
   1047  46c1		       fc		      .byte.b	252	;R (12)
   1048  46c2		       20		      .byte.b	32	;G
   1049  46c3		       00		      .byte.b	0	;B
   1050  46c4		       fe		      .byte.b	254	;R (11)
   1051  46c5		       46		      .byte.b	70	;G
   1052  46c6		       00		      .byte.b	0	;B
   1053  46c7		       f8		      .byte.b	248	;R (10)
   1054  46c8		       48		      .byte.b	72	;G
   1055  46c9		       00		      .byte.b	0	;B
   1056  46ca		       f0		      .byte.b	240	;R (9)
   1057  46cb		       04		      .byte.b	4	;G
   1058  46cc		       00		      .byte.b	0	;B
   1059  46cd		       e0		      .byte.b	224	;R (8)
   1060  46ce		       20		      .byte.b	32	;G
   1061  46cf		       00		      .byte.b	0	;B
   1062  46d0		       e0		      .byte.b	224	;R (7)
   1063  46d1		       29		      .byte.b	41	;G
   1064  46d2		       00		      .byte.b	0	;B
   1065  46d3		       e0		      .byte.b	224	;R (6)
   1066  46d4		       20		      .byte.b	32	;G
   1067  46d5		       00		      .byte.b	0	;B
   1068  46d6		       e0		      .byte.b	224	;R (5)
   1069  46d7		       84		      .byte.b	132	;G
   1070  46d8		       00		      .byte.b	0	;B
   1071  46d9		       60		      .byte.b	96	;R (4)
   1072  46da		       40		      .byte.b	64	;G
   1073  46db		       00		      .byte.b	0	;B
   1074  46dc		       00		      .byte.b	0	;R (3)
   1075  46dd		       88		      .byte.b	136	;G
   1076  46de		       00		      .byte.b	0	;B
   1077  46df		       00		      .byte.b	0	;R (2)
   1078  46e0		       11		      .byte.b	17	;G
   1079  46e1		       00		      .byte.b	0	;B
   1080  46e2		       24		      .byte.b	36	;R (1)
   1081  46e3		       24		      .byte.b	36	;G
   1082  46e4		       00		      .byte.b	0	;B
   1083  46e5		       00		      .byte.b	0	;R (0)
   1084  46e6		       00		      .byte.b	0	;G
   1085  46e7		       00		      .byte.b	0	;B
   1086  46e8				   COL_5
   1087  46e8		       02		      .byte.b	2	;R (71)
   1088  46e9		       12		      .byte.b	18	;G
   1089  46ea		       00		      .byte.b	0	;B
   1090  46eb		       00		      .byte.b	0	;R (70)
   1091  46ec		       00		      .byte.b	0	;G
   1092  46ed		       00		      .byte.b	0	;B
   1093  46ee		       00		      .byte.b	0	;R (69)
   1094  46ef		       02		      .byte.b	2	;G
   1095  46f0		       00		      .byte.b	0	;B
   1096  46f1		       03		      .byte.b	3	;R (68)
   1097  46f2		       12		      .byte.b	18	;G
   1098  46f3		       00		      .byte.b	0	;B
   1099  46f4		       0b		      .byte.b	11	;R (67)
   1100  46f5		       09		      .byte.b	9	;G
   1101  46f6		       00		      .byte.b	0	;B
   1102  46f7		       07		      .byte.b	7	;R (66)
   1103  46f8		       05		      .byte.b	5	;G
   1104  46f9		       00		      .byte.b	0	;B
   1105  46fa		       03		      .byte.b	3	;R (65)
   1106  46fb		       06		      .byte.b	6	;G
   1107  46fc		       00		      .byte.b	0	;B
   1108  46fd		       01		      .byte.b	1	;R (64)
   1109  46fe		       20		      .byte.b	32	;G
   1110  46ff		       00		      .byte.b	0	;B
   1111  4700		       03		      .byte.b	3	;R (63)
   1112  4701		       03		      .byte.b	3	;G
   1113  4702		       00		      .byte.b	0	;B
   1114  4703		       03		      .byte.b	3	;R (62)
   1115  4704		       0a		      .byte.b	10	;G
   1116  4705		       00		      .byte.b	0	;B
   1117  4706		       03		      .byte.b	3	;R (61)
   1118  4707		       02		      .byte.b	2	;G
   1119  4708		       00		      .byte.b	0	;B
   1120  4709		       03		      .byte.b	3	;R (60)
   1121  470a		       00		      .byte.b	0	;G
   1122  470b		       00		      .byte.b	0	;B
   1123  470c		       03		      .byte.b	3	;R (59)
   1124  470d		       0a		      .byte.b	10	;G
   1125  470e		       00		      .byte.b	0	;B
   1126  470f		       03		      .byte.b	3	;R (58)
   1127  4710		       02		      .byte.b	2	;G
   1128  4711		       00		      .byte.b	0	;B
   1129  4712		       01		      .byte.b	1	;R (57)
   1130  4713		       03		      .byte.b	3	;G
   1131  4714		       00		      .byte.b	0	;B
   1132  4715		       01		      .byte.b	1	;R (56)
   1133  4716		       01		      .byte.b	1	;G
   1134  4717		       00		      .byte.b	0	;B
   1135  4718		       00		      .byte.b	0	;R (55)
   1136  4719		       25		      .byte.b	37	;G
   1137  471a		       00		      .byte.b	0	;B
   1138  471b		       00		      .byte.b	0	;R (54)
   1139  471c		       00		      .byte.b	0	;G
   1140  471d		       00		      .byte.b	0	;B
   1141  471e		       00		      .byte.b	0	;R (53)
   1142  471f		       20		      .byte.b	32	;G
   1143  4720		       00		      .byte.b	0	;B
   1144  4721		       00		      .byte.b	0	;R (52)
   1145  4722		       08		      .byte.b	8	;G
   1146  4723		       00		      .byte.b	0	;B
   1147  4724		       00		      .byte.b	0	;R (51)
   1148  4725		       02		      .byte.b	2	;G
   1149  4726		       00		      .byte.b	0	;B
   1150  4727		       00		      .byte.b	0	;R (50)
   1151  4728		       40		      .byte.b	64	;G
   1152  4729		       00		      .byte.b	0	;B
   1153  472a		       00		      .byte.b	0	;R (49)
   1154  472b		       11		      .byte.b	17	;G
   1155  472c		       00		      .byte.b	0	;B
   1156  472d		       00		      .byte.b	0	;R (48)
   1157  472e		       00		      .byte.b	0	;G
   1158  472f		       00		      .byte.b	0	;B
   1159  4730		       00		      .byte.b	0	;R (47)
   1160  4731		       20		      .byte.b	32	;G
   1161  4732		       00		      .byte.b	0	;B
   1162  4733		       00		      .byte.b	0	;R (46)
   1163  4734		       08		      .byte.b	8	;G
   1164  4735		       00		      .byte.b	0	;B
   1165  4736		       00		      .byte.b	0	;R (45)
   1166  4737		       00		      .byte.b	0	;G
   1167  4738		       00		      .byte.b	0	;B
   1168  4739		       00		      .byte.b	0	;R (44)
   1169  473a		       24		      .byte.b	36	;G
   1170  473b		       00		      .byte.b	0	;B
   1171  473c		       00		      .byte.b	0	;R (43)
   1172  473d		       00		      .byte.b	0	;G
   1173  473e		       00		      .byte.b	0	;B
   1174  473f		       00		      .byte.b	0	;R (42)
   1175  4740		       04		      .byte.b	4	;G
   1176  4741		       00		      .byte.b	0	;B
   1177  4742		       00		      .byte.b	0	;R (41)
   1178  4743		       21		      .byte.b	33	;G
   1179  4744		       00		      .byte.b	0	;B
   1180  4745		       01		      .byte.b	1	;R (40)
   1181  4746		       01		      .byte.b	1	;G
   1182  4747		       00		      .byte.b	0	;B
   1183  4748		       01		      .byte.b	1	;R (39)
   1184  4749		       25		      .byte.b	37	;G
   1185  474a		       00		      .byte.b	0	;B
   1186  474b		       01		      .byte.b	1	;R (38)
   1187  474c		       01		      .byte.b	1	;G
   1188  474d		       00		      .byte.b	0	;B
   1189  474e		       03		      .byte.b	3	;R (37)
   1190  474f		       23		      .byte.b	35	;G
   1191  4750		       00		      .byte.b	0	;B
   1192  4751		       03		      .byte.b	3	;R (36)
   1193  4752		       13		      .byte.b	19	;G
   1194  4753		       00		      .byte.b	0	;B
   1195  4754		       01		      .byte.b	1	;R (35)
   1196  4755		       02		      .byte.b	2	;G
   1197  4756		       00		      .byte.b	0	;B
   1198  4757		       01		      .byte.b	1	;R (34)
   1199  4758		       10		      .byte.b	16	;G
   1200  4759		       00		      .byte.b	0	;B
   1201  475a		       03		      .byte.b	3	;R (33)
   1202  475b		       02		      .byte.b	2	;G
   1203  475c		       00		      .byte.b	0	;B
   1204  475d		       01		      .byte.b	1	;R (32)
   1205  475e		       08		      .byte.b	8	;G
   1206  475f		       00		      .byte.b	0	;B
   1207  4760		       03		      .byte.b	3	;R (31)
   1208  4761		       20		      .byte.b	32	;G
   1209  4762		       00		      .byte.b	0	;B
   1210  4763		       03		      .byte.b	3	;R (30)
   1211  4764		       00		      .byte.b	0	;G
   1212  4765		       00		      .byte.b	0	;B
   1213  4766		       03		      .byte.b	3	;R (29)
   1214  4767		       10		      .byte.b	16	;G
   1215  4768		       00		      .byte.b	0	;B
   1216  4769		       03		      .byte.b	3	;R (28)
   1217  476a		       00		      .byte.b	0	;G
   1218  476b		       00		      .byte.b	0	;B
   1219  476c		       07		      .byte.b	7	;R (27)
   1220  476d		       0e		      .byte.b	14	;G
   1221  476e		       00		      .byte.b	0	;B
   1222  476f		       03		      .byte.b	3	;R (26)
   1223  4770		       41		      .byte.b	65	;G
   1224  4771		       00		      .byte.b	0	;B
   1225  4772		       07		      .byte.b	7	;R (25)
   1226  4773		       04		      .byte.b	4	;G
   1227  4774		       00		      .byte.b	0	;B
   1228  4775		       03		      .byte.b	3	;R (24)
   1229  4776		       21		      .byte.b	33	;G
   1230  4777		       00		      .byte.b	0	;B
   1231  4778		       03		      .byte.b	3	;R (23)
   1232  4779		       04		      .byte.b	4	;G
   1233  477a		       00		      .byte.b	0	;B
   1234  477b		       03		      .byte.b	3	;R (22)
   1235  477c		       02		      .byte.b	2	;G
   1236  477d		       00		      .byte.b	0	;B
   1237  477e		       03		      .byte.b	3	;R (21)
   1238  477f		       26		      .byte.b	38	;G
   1239  4780		       00		      .byte.b	0	;B
   1240  4781		       01		      .byte.b	1	;R (20)
   1241  4782		       01		      .byte.b	1	;G
   1242  4783		       00		      .byte.b	0	;B
   1243  4784		       00		      .byte.b	0	;R (19)
   1244  4785		       21		      .byte.b	33	;G
   1245  4786		       00		      .byte.b	0	;B
   1246  4787		       01		      .byte.b	1	;R (18)
   1247  4788		       09		      .byte.b	9	;G
   1248  4789		       00		      .byte.b	0	;B
   1249  478a		       23		      .byte.b	35	;R (17)
   1250  478b		       22		      .byte.b	34	;G
   1251  478c		       00		      .byte.b	0	;B
   1252  478d		       01		      .byte.b	1	;R (16)
   1253  478e		       01		      .byte.b	1	;G
   1254  478f		       00		      .byte.b	0	;B
   1255  4790		       00		      .byte.b	0	;R (15)
   1256  4791		       29		      .byte.b	41	;G
   1257  4792		       00		      .byte.b	0	;B
   1258  4793		       00		      .byte.b	0	;R (14)
   1259  4794		       00		      .byte.b	0	;G
   1260  4795		       00		      .byte.b	0	;B
   1261  4796		       00		      .byte.b	0	;R (13)
   1262  4797		       04		      .byte.b	4	;G
   1263  4798		       00		      .byte.b	0	;B
   1264  4799		       00		      .byte.b	0	;R (12)
   1265  479a		       20		      .byte.b	32	;G
   1266  479b		       00		      .byte.b	0	;B
   1267  479c		       10		      .byte.b	16	;R (11)
   1268  479d		       12		      .byte.b	18	;G
   1269  479e		       00		      .byte.b	0	;B
   1270  479f		       00		      .byte.b	0	;R (10)
   1271  47a0		       00		      .byte.b	0	;G
   1272  47a1		       00		      .byte.b	0	;B
   1273  47a2		       00		      .byte.b	0	;R (9)
   1274  47a3		       21		      .byte.b	33	;G
   1275  47a4		       00		      .byte.b	0	;B
   1276  47a5		       00		      .byte.b	0	;R (8)
   1277  47a6		       08		      .byte.b	8	;G
   1278  47a7		       00		      .byte.b	0	;B
   1279  47a8		       00		      .byte.b	0	;R (7)
   1280  47a9		       20		      .byte.b	32	;G
   1281  47aa		       00		      .byte.b	0	;B
   1282  47ab		       00		      .byte.b	0	;R (6)
   1283  47ac		       04		      .byte.b	4	;G
   1284  47ad		       00		      .byte.b	0	;B
   1285  47ae		       20		      .byte.b	32	;R (5)
   1286  47af		       20		      .byte.b	32	;G
   1287  47b0		       00		      .byte.b	0	;B
   1288  47b1		       00		      .byte.b	0	;R (4)
   1289  47b2		       09		      .byte.b	9	;G
   1290  47b3		       00		      .byte.b	0	;B
   1291  47b4		       00		      .byte.b	0	;R (3)
   1292  47b5		       00		      .byte.b	0	;G
   1293  47b6		       00		      .byte.b	0	;B
   1294  47b7		       00		      .byte.b	0	;R (2)
   1295  47b8		       48		      .byte.b	72	;G
   1296  47b9		       00		      .byte.b	0	;B
   1297  47ba		       02		      .byte.b	2	;R (1)
   1298  47bb		       02		      .byte.b	2	;G
   1299  47bc		       00		      .byte.b	0	;B
   1300  47bd		       00		      .byte.b	0	;R (0)
   1301  47be		       00		      .byte.b	0	;G
   1302  47bf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    265  47c0							;    include "pizza.asm"
    266  47c0
      0  47c0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  47c0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  47c0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  47c0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  47c0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  47c0				  -	      ERR
      6  47c0					      endif
------- FILE ./chess.asm
------- FILE BANK_RECON.asm LEVEL 2 PASS 2
      0  47c0					      include	"BANK_RECON.asm"
      0  47c0					      NEWBANK	RECON
      1  4f90 ????				      SEG	RECON
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   RECON      SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	RECON
      2  4800
      3  4800							;---------------------------------------------------------------------------------------------------
      4  4800
      0  4800					      DEF	UNSAFE_showMoveCaptures
      1  4800				   BANK_UNSAFE_showMoveCaptures SET	_CURRENT_BANK
      2  4800				   UNSAFE_showMoveCaptures
      3  4800				   TEMPORARY_VAR SET	Overlay
      4  4800				   TEMPORARY_OFFSET SET	0
      5  4800					      SUBROUTINE
      6  4800					      SUBROUTINE
      7  4800
      0  4800					      VAR	__toSquareX12, 1
      1  4800		       00 a0	   __toSquareX12 =	TEMPORARY_VAR
      2  4800				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4800
      4  4800				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4800				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4800				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4800					      ENDIF
      8  4800				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4800				  -	      ECHO	"Temporary Variable", __toSquareX12, "overflow!"
     10  4800				  -	      ERR
     11  4800					      ENDIF
     12  4800					      LIST	ON
      0  4800					      VAR	__fromPiece, 1
      1  4800		       00 a1	   __fromPiece =	TEMPORARY_VAR
      2  4800				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4800
      4  4800				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4800				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4800				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4800					      ENDIF
      8  4800				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4800				  -	      ECHO	"Temporary Variable", __fromPiece, "overflow!"
     10  4800				  -	      ERR
     11  4800					      ENDIF
     12  4800					      LIST	ON
      0  4800					      VAR	__aiMoveIndex, 1
      1  4800		       00 a2	   __aiMoveIndex =	TEMPORARY_VAR
      2  4800				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4800
      4  4800				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4800				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4800				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4800					      ENDIF
      8  4800				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4800				  -	      ECHO	"Temporary Variable", __aiMoveIndex, "overflow!"
     10  4800				  -	      ERR
     11  4800					      ENDIF
     12  4800					      LIST	ON
     11  4800
     12  4800							; place a marker on the board for any square matching the piece
     13  4800							; EXCEPT for squares which are occupied (we'll flash those later)
     14  4800							; x = movelist item # being checked
     15  4800
     16  4800		       a5 8b		      lda	savedBank
     17  4802		       48		      pha
     18  4803
     19  4803		       a9 09		      lda	#BANK_UNSAFE_showMoveCaptures
     20  4805		       85 8b		      sta	savedBank
     21  4807
     22  4807
     23  4807		       a6 8e	   .next      ldx	aiMoveIndex
     24  4809		       86 a2		      stx	__aiMoveIndex
     25  480b		       30 41		      bmi	.skip	; no moves in list
     26  480d
     27  480d		       ad 84 02 	      lda	INTIM
     28  4810		       c9 14		      cmp	#20
     29  4812		       90 3a		      bcc	.skip
     30  4814
     31  4814		       c6 8e		      dec	aiMoveIndex
     32  4816
     33  4816		       20 dc fd 	      jsr	GetMoveFrom
     34  4819		       c5 85		      cmp	fromX12
     35  481b		       d0 ea		      bne	.next
     36  481d
     37  481d
     38  481d		       20 e8 fd 	      jsr	GetMoveTo
     39  4820		       85 a0		      sta	__toSquareX12
     40  4822		       a8		      tay
     41  4823		       20 ea fc 	      jsr	GetBoard
     42  4826		       29 0f		      and	#PIECE_MASK
     43  4828		       f0 dd		      beq	.next
     44  482a
     45  482a							; There's something on the board at destination, so it's a capture
     46  482a							; Let's see if we are doing a pawn promote...
     47  482a
     48  482a		       a4 85		      ldy	fromX12
     49  482c		       20 ea fc 	      jsr	GetBoard
     50  482f		       85 a1		      sta	__fromPiece
     51  4831
     52  4831		       20 f4 fd 	      jsr	GetMovePiece
     53  4834		       45 a1		      eor	__fromPiece
     54  4836		       29 0f		      and	#PIECE_MASK
     55  4838		       f0 06		      beq	.legit	; from == to, so not a promote
     56  483a
     57  483a							; Have detected a promotion duplicate - skip all 3 of them
     58  483a
     59  483a		       c6 8e		      dec	aiMoveIndex	; skip "KBRQ" promotes
     60  483c		       c6 8e		      dec	aiMoveIndex
     61  483e		       c6 8e		      dec	aiMoveIndex
     62  4840
     63  4840				   .legit
     64  4840
      0  4840					      TIMECHECK	COPYSINGLEPIECE, restoreIndex	; not enough time to draw
      1  4840		       ad 84 02 	      lda	INTIM
      2  4843		       c9 29		      cmp	#SPEEDOF_COPYSINGLEPIECE
      3  4845		       90 0b		      bcc	restoreIndex
     66  4847
     67  4847		       a5 a0		      lda	__toSquareX12
     68  4849		       85 80		      sta	squareToDraw
     69  484b
     70  484b		       20 4e fd 	      jsr	CopySinglePiece
     71  484e
     72  484e		       68	   .skip      pla
     73  484f		       85 8b		      sta	savedBank
     74  4851		       60		      rts
     75  4852
     76  4852		       a5 a2	   restoreIndex lda	__aiMoveIndex
     77  4854		       85 8e		      sta	aiMoveIndex
     78  4856		       4c 4e f0 	      jmp	.skip
     79  4859
     80  4859
     81  4859							;---------------------------------------------------------------------------------------------------
     82  4859
      0  4859					      DEF	aiMarchToTargetA
      1  4859				   BANK_aiMarchToTargetA SET	_CURRENT_BANK
      2  4859				   aiMarchToTargetA
      3  4859				   TEMPORARY_VAR SET	Overlay
      4  4859				   TEMPORARY_OFFSET SET	0
      5  4859					      SUBROUTINE
     84  4859					      SUBROUTINE
     85  4859
      0  4859					      VAR	__fromRow, 1
      1  4859		       00 a0	   __fromRow  =	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __fromRow, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
      0  4859					      VAR	__boardIndex, 1
      1  4859		       00 a1	   __boardIndex =	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __boardIndex, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
      0  4859					      VAR	__fromCol, 1
      1  4859		       00 a2	   __fromCol  =	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __fromCol, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
      0  4859					      VAR	__toCol, 1
      1  4859		       00 a3	   __toCol    =	TEMPORARY_VAR
      2  4859				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4859
      4  4859				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4859				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4859				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4859					      ENDIF
      8  4859				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4859				  -	      ECHO	"Temporary Variable", __toCol, "overflow!"
     10  4859				  -	      ERR
     11  4859					      ENDIF
     12  4859					      LIST	ON
     90  4859
     91  4859
     92  4859							; Now we calculate move to new square
     93  4859
     94  4859		       a5 85		      lda	fromX12
     95  485b		       c5 86		      cmp	toX12
     96  485d		       f0 68		      beq	.unmovedx
     97  485f		       85 83		      sta	lastSquareX12
     98  4861
     99  4861		       38		      sec
    100  4862		       a2 fd		      ldx	#-3
    101  4864		       e9 0a	   .sub10     sbc	#10
    102  4866		       e8		      inx
    103  4867		       b0 fb		      bcs	.sub10
    104  4869		       69 08		      adc	#8
    105  486b		       85 a2		      sta	__fromCol
    106  486d		       86 a0		      stx	__fromRow
    107  486f
    108  486f		       a5 86		      lda	toX12
    109  4871		       38		      sec
    110  4872		       a2 fd		      ldx	#-3
    111  4874		       e9 0a	   .sub10b    sbc	#10
    112  4876		       e8		      inx
    113  4877		       b0 fb		      bcs	.sub10b
    114  4879		       69 08		      adc	#8
    115  487b		       85 a3		      sta	__toCol
    116  487d
    117  487d
    118  487d		       e4 a0		      cpx	__fromRow
    119  487f		       f0 13		      beq	.rowDone
    120  4881
    121  4881		       b0 0a		      bcs	.incRow
    122  4883
    123  4883		       38		      sec
    124  4884		       a5 85		      lda	fromX12
    125  4886		       e9 0a		      sbc	#10
    126  4888		       85 85		      sta	fromX12
    127  488a		       4c 94 f0 	      jmp	.rowDone
    128  488d
    129  488d		       18	   .incRow    clc
    130  488e		       a5 85		      lda	fromX12
    131  4890		       69 0a		      adc	#10
    132  4892		       85 85		      sta	fromX12
    133  4894
    134  4894				   .rowDone
    135  4894
    136  4894		       a5 a3		      lda	__toCol
    137  4896		       c5 a2		      cmp	__fromCol
    138  4898		       f0 09		      beq	.colDone
    139  489a
    140  489a		       b0 05		      bcs	.incCol
    141  489c
    142  489c		       c6 85		      dec	fromX12
    143  489e		       4c a3 f0 	      jmp	.colDone
    144  48a1
    145  48a1		       e6 85	   .incCol    inc	fromX12
    146  48a3				   .colDone
    147  48a3
    148  48a3
    149  48a3
    150  48a3
    151  48a3							; erase object in new sqare --> blank
    152  48a3
    153  48a3		       a4 85		      ldy	fromX12
    154  48a5		       84 80		      sty	squareToDraw
    155  48a7
    156  48a7		       20 ea fc 	      jsr	GetBoard
    157  48aa		       c9 00		      cmp	#0
    158  48ac		       f0 03		      beq	.skipbl
    159  48ae		       20 4e fd 	      jsr	CopySinglePiece	; erase next square along --> blank
    160  48b1
    161  48b1				   .skipbl
    162  48b1		       a4 85		      ldy	fromX12
    163  48b3		       84 a1		      sty	__boardIndex
    164  48b5
    165  48b5		       20 ea fc 	      jsr	GetBoard
    166  48b8		       85 99		      sta	lastPiece	; what we are overwriting
    167  48ba		       a5 98		      lda	fromPiece
    168  48bc							;ora #FLAG_MOVED		 ; prevents usage in castling for K/R
    169  48bc		       29 df		      and	#~FLAG_ENPASSANT
    170  48be		       a4 a1		      ldy	__boardIndex
    171  48c0		       20 f6 fc 	      jsr	PutBoard
    172  48c3
      0  48c3					      PHASE	AI_MarchB
      1  48c3		       a9 18		      lda	#AI_MarchB
      2  48c5		       85 8c		      sta	aiState
    174  48c7
    175  48c7				   .unmovedx
    176  48c7		       60		      rts
    177  48c8
    178  48c8
    179  48c8							;---------------------------------------------------------------------------------------------------
    180  48c8
      0  48c8					      DEF	aiMarchB2
      1  48c8				   BANK_aiMarchB2 SET	_CURRENT_BANK
      2  48c8				   aiMarchB2
      3  48c8				   TEMPORARY_VAR SET	Overlay
      4  48c8				   TEMPORARY_OFFSET SET	0
      5  48c8					      SUBROUTINE
    182  48c8					      SUBROUTINE
    183  48c8
    184  48c8		       a4 83		      ldy	lastSquareX12
    185  48ca		       84 80		      sty	squareToDraw
    186  48cc
    187  48cc		       20 ea fc 	      jsr	GetBoard
    188  48cf		       c9 00		      cmp	#0
    189  48d1		       f0 03		      beq	.skipbl2
    190  48d3
    191  48d3		       20 4e fd 	      jsr	CopySinglePiece	; draw previous piece back in old position
    192  48d6				   .skipbl2
    193  48d6
    194  48d6		       a5 85		      lda	fromX12
    195  48d8		       c5 86		      cmp	toX12
    196  48da		       f0 09		      beq	xhalt
    197  48dc
    198  48dc		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    199  48de		       85 82		      sta	drawDelay
      0  48e0					      PHASE	AI_MarchToTargetA
      1  48e0		       a9 17		      lda	#AI_MarchToTargetA
      2  48e2		       85 8c		      sta	aiState
    201  48e4
    202  48e4		       60		      rts
    203  48e5
    204  48e5				   xhalt
    205  48e5
    206  48e5		       20 f5 f0 	      jsr	FinaliseMove
    207  48e8
    208  48e8		       a9 04		      lda	#4	; on/off count
    209  48ea		       85 84		      sta	drawCount	; flashing for piece about to move
    210  48ec		       a9 00		      lda	#0
    211  48ee		       85 82		      sta	drawDelay
    212  48f0
      0  48f0					      PHASE	AI_FinalFlash
      1  48f0		       a9 1b		      lda	#AI_FinalFlash
      2  48f2		       85 8c		      sta	aiState
    214  48f4		       60		      rts
    215  48f5
    216  48f5
    217  48f5							;---------------------------------------------------------------------------------------------------
    218  48f5
      0  48f5					      DEF	FinaliseMove
      1  48f5				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  48f5				   FinaliseMove
      3  48f5				   TEMPORARY_VAR SET	Overlay
      4  48f5				   TEMPORARY_OFFSET SET	0
      5  48f5					      SUBROUTINE
    220  48f5					      SUBROUTINE
    221  48f5
    222  48f5							; Now the visible movement on the board has happened, fix up the pointers to the pieces
    223  48f5							; for both sides.
    224  48f5
    225  48f5		       a9 09		      lda	#BANK_FinaliseMove
    226  48f7		       85 8b		      sta	savedBank
    227  48f9
    228  48f9		       a5 97		      lda	sideToMove
    229  48fb		       0a		      asl
    230  48fc		       a9 09		      lda	#RAMBANK_PLY
    231  48fe		       69 00		      adc	#0
    232  4900		       20 96 fd 	      jsr	GoFixPieceList
    233  4903
    234  4903		       a5 86		      lda	toX12
    235  4905		       85 85		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
    236  4907		       85 87		      sta	originX12
    237  4909
    238  4909		       a9 00		      lda	#0
    239  490b		       85 86		      sta	toX12	; --> deleted (square=0)
    240  490d
    241  490d		       a5 99		      lda	lastPiece
    242  490f		       f0 0c		      beq	.notake
    243  4911
    244  4911		       a5 97		      lda	sideToMove
    245  4913		       49 80		      eor	#128
    246  4915		       0a		      asl
    247  4916		       a9 09		      lda	#RAMBANK_PLY
    248  4918		       69 00		      adc	#0
    249  491a		       20 96 fd 	      jsr	GoFixPieceList	; REMOVE any captured object
    250  491d
    251  491d		       60	   .notake    rts
    252  491e
    253  491e
    254  491e							;---------------------------------------------------------------------------------------------------
    255  491e
      0  491e					      DEF	aiMarchToTargetB
      1  491e				   BANK_aiMarchToTargetB SET	_CURRENT_BANK
      2  491e				   aiMarchToTargetB
      3  491e				   TEMPORARY_VAR SET	Overlay
      4  491e				   TEMPORARY_OFFSET SET	0
      5  491e					      SUBROUTINE
    257  491e					      SUBROUTINE
    258  491e
    259  491e							; now we want to undraw the piece in the old square
    260  491e
    261  491e		       a5 83		      lda	lastSquareX12
    262  4920		       85 80		      sta	squareToDraw
    263  4922
    264  4922		       20 4e fd 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    265  4925
    266  4925		       a4 83		      ldy	lastSquareX12
    267  4927		       a5 9a		      lda	previousPiece
    268  4929		       20 f6 fc 	      jsr	PutBoard
    269  492c
    270  492c		       a5 99		      lda	lastPiece
    271  492e		       85 9a		      sta	previousPiece
    272  4930
      0  4930					      PHASE	AI_MarchB2
      1  4930		       a9 1a		      lda	#AI_MarchB2
      2  4932		       85 8c		      sta	aiState
    274  4934		       60		      rts
    275  4935
    276  4935
    277  4935							;---------------------------------------------------------------------------------------------------
    278  4935
      0  4935					      DEF	aiGenerateMoves
      1  4935				   BANK_aiGenerateMoves SET	_CURRENT_BANK
      2  4935				   aiGenerateMoves
      3  4935				   TEMPORARY_VAR SET	Overlay
      4  4935				   TEMPORARY_OFFSET SET	0
      5  4935					      SUBROUTINE
    280  4935					      SUBROUTINE
    281  4935
    282  4935		       20 07 f9 	      jsr	GenerateOneMove
    283  4938		       a5 96		      lda	piecelistIndex
    284  493a		       10 0d		      bpl	.wait
    285  493c
    286  493c							;lda currentPly
    287  493c							;sta SET_BANK_RAM
    288  493c							;jsr alphaBeta
    289  493c
    290  493c				  -	      if	PVSP
    291  493c				  -	      jmp	.player	;tmp
    292  493c					      endif
    293  493c
    294  493c		       a6 97		      ldx	sideToMove
    295  493e		       10 05		      bpl	.player
    296  4940
    297  4940
      0  4940				   .computer  PHASE	AI_ComputerMove	; computer select move
      1  4940		       a9 14		      lda	#AI_ComputerMove
      2  4942		       85 8c		      sta	aiState
    299  4944		       60		      rts
    300  4945
    301  4945
      0  4945				   .player    PHASE	AI_StartMoveGen
      1  4945		       a9 0a		      lda	#AI_StartMoveGen
      2  4947		       85 8c		      sta	aiState
    303  4949		       60	   .wait      rts
    304  494a
    305  494a
    306  494a							;---------------------------------------------------------------------------------------------------
    307  494a
      0  494a					      DEF	CopySetupForMarker
      1  494a				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  494a				   CopySetupForMarker
      3  494a				   TEMPORARY_VAR SET	Overlay
      4  494a				   TEMPORARY_OFFSET SET	0
      5  494a					      SUBROUTINE
    309  494a					      SUBROUTINE
    310  494a
      0  494a					      VAR	__pieceColour, 1
      1  494a		       00 a0	   __pieceColour =	TEMPORARY_VAR
      2  494a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  494a
      4  494a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  494a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  494a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  494a					      ENDIF
      8  494a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  494a				  -	      ECHO	"Temporary Variable", __pieceColour, "overflow!"
     10  494a				  -	      ERR
     11  494a					      ENDIF
     12  494a					      LIST	ON
      0  494a					      VAR	__oddeven, 1
      1  494a		       00 a1	   __oddeven  =	TEMPORARY_VAR
      2  494a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  494a
      4  494a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  494a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  494a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  494a					      ENDIF
      8  494a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  494a				  -	      ECHO	"Temporary Variable", __oddeven, "overflow!"
     10  494a				  -	      ERR
     11  494a					      ENDIF
     12  494a					      LIST	ON
      0  494a					      VAR	__pmcol, 1
      1  494a		       00 a2	   __pmcol    =	TEMPORARY_VAR
      2  494a				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  494a
      4  494a				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  494a				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  494a				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  494a					      ENDIF
      8  494a				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  494a				  -	      ECHO	"Temporary Variable", __pmcol, "overflow!"
     10  494a				  -	      ERR
     11  494a					      ENDIF
     12  494a					      LIST	ON
    314  494a
    315  494a		       a5 80		      lda	squareToDraw
    316  494c		       38		      sec
    317  494d		       a0 0a		      ldy	#10
    318  494f		       e9 0a	   .sub10     sbc	#10
    319  4951		       88		      dey
    320  4952		       b0 fb		      bcs	.sub10
    321  4954		       84 a1		      sty	__oddeven
    322  4956		       69 08		      adc	#8
    323  4958		       85 a2		      sta	__pmcol
    324  495a		       65 a1		      adc	__oddeven
    325  495c
    326  495c		       29 01		      and	#1
    327  495e		       49 01		      eor	#1
    328  4960		       f0 02		      beq	.white
    329  4962		       a9 24		      lda	#36
    330  4964				   .white
    331  4964		       85 a0		      sta	__pieceColour	; actually SQUARE black/white
    332  4966
    333  4966		       8a		      txa
    334  4967		       18		      clc
    335  4968		       65 a0		      adc	__pieceColour
    336  496a		       85 a0		      sta	__pieceColour
    337  496c
    338  496c		       a5 a2		      lda	__pmcol
    339  496e		       29 03		      and	#3
    340  4970
    341  4970		       18		      clc
    342  4971		       65 a0		      adc	__pieceColour
    343  4973		       a8		      tay
    344  4974		       60		      rts
    345  4975
    346  4975							;---------------------------------------------------------------------------------------------------
    347  4975
      0  4975					      DEF	CopySetup
      1  4975				   BANK_CopySetup SET	_CURRENT_BANK
      2  4975				   CopySetup
      3  4975				   TEMPORARY_VAR SET	Overlay
      4  4975				   TEMPORARY_OFFSET SET	0
      5  4975					      SUBROUTINE
    349  4975					      SUBROUTINE
    350  4975
      0  4975					      VAR	__tmp, 1
      1  4975		       00 a0	   __tmp      =	TEMPORARY_VAR
      2  4975				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4975
      4  4975				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4975				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4975				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4975					      ENDIF
      8  4975				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4975				  -	      ECHO	"Temporary Variable", __tmp, "overflow!"
     10  4975				  -	      ERR
     11  4975					      ENDIF
     12  4975					      LIST	ON
      0  4975					      VAR	__shiftx, 1
      1  4975		       00 a1	   __shiftx   =	TEMPORARY_VAR
      2  4975				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  4975
      4  4975				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  4975				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  4975				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  4975					      ENDIF
      8  4975				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  4975				  -	      ECHO	"Temporary Variable", __shiftx, "overflow!"
     10  4975				  -	      ERR
     11  4975					      ENDIF
     12  4975					      LIST	ON
    353  4975
    354  4975		       a5 8b		      lda	savedBank
    355  4977		       48		      pha
    356  4978		       a9 09		      lda	#BANK_CopySetup
    357  497a		       85 8b		      sta	savedBank
    358  497c
    359  497c							; figure colouration of square
    360  497c
    361  497c		       a5 80		      lda	squareToDraw
    362  497e		       a2 0a		      ldx	#10
    363  4980		       38		      sec
    364  4981		       e9 0a	   .sub10     sbc	#10
    365  4983		       ca		      dex
    366  4984		       b0 fb		      bcs	.sub10
    367  4986		       69 08		      adc	#8
    368  4988		       85 a1		      sta	__shiftx
    369  498a		       86 a0		      stx	__tmp
    370  498c		       65 a0		      adc	__tmp
    371  498e
    372  498e
    373  498e		       29 01		      and	#1
    374  4990		       49 01		      eor	#1
    375  4992		       f0 02		      beq	.white
    376  4994		       a9 24		      lda	#36
    377  4996		       85 a0	   .white     sta	__pieceColour	; actually SQUARE black/white
    378  4998
    379  4998							; PieceColour = 0 for white square, 36 for black square
    380  4998
    381  4998							;lda #RAMBANK_MOVES_RAM
    382  4998							;sta SET_BANK_RAM
    383  4998
    384  4998		       a4 80		      ldy	squareToDraw
    385  499a		       20 ea fc 	      jsr	GetBoard	;lda Board,x
    386  499d		       0a		      asl
    387  499e		       90 02		      bcc	.blackAdjust
    388  49a0		       09 10		      ora	#16
    389  49a2		       4a	   .blackAdjust lsr
    390  49a3		       29 0f		      and	#%1111
    391  49a5		       aa		      tax
    392  49a6
    393  49a6		       a5 a1		      lda	__shiftx
    394  49a8		       29 03		      and	#3	; shift position in P
    395  49aa
    396  49aa		       18		      clc
    397  49ab		       7d b6 f1 	      adc	PieceToShape,x
    398  49ae		       18		      clc
    399  49af		       65 a0		      adc	__pieceColour
    400  49b1		       a8		      tay
    401  49b2
    402  49b2		       68		      pla
    403  49b3		       85 8b		      sta	savedBank
    404  49b5		       60		      rts
    405  49b6
    406  49b6				   PieceToShape
    407  49b6
    408  49b6		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    409  49b7		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    410  49b8		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    411  49b9		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    412  49ba		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    413  49bb		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    414  49bc		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    415  49bd		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    416  49be
    417  49be		       48		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    418  49bf		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    419  49c0		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    420  49c1		       50		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    421  49c2		       54		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    422  49c3		       58		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    423  49c4		       5c		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    424  49c5		       60		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    425  49c6
    426  49c6							;---------------------------------------------------------------------------------------------------
    427  49c6
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  49c6					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  49c6					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     12  4a00					      LIST	ON
      0  4a00					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  4a00				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4a00				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  4a00				   TEMPORARY_VAR SET	Overlay
      4  4a00				   TEMPORARY_OFFSET SET	0
      5  4a00					      SUBROUTINE
      3  4a00		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  4a18		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4a48					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  4a48					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     12  4a48					      LIST	ON
      0  4a48					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  4a48				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4a48				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  4a48				   TEMPORARY_VAR SET	Overlay
      4  4a48				   TEMPORARY_OFFSET SET	0
      5  4a48					      SUBROUTINE
      3  4a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4a60		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  4a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4a90					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  4a90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     12  4a90					      LIST	ON
      0  4a90					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  4a90				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4a90				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  4a90				   TEMPORARY_VAR SET	Overlay
      4  4a90				   TEMPORARY_OFFSET SET	0
      5  4a90					      SUBROUTINE
      3  4a90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4aa8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4ac0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4ad8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  4ad8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
     12  4b00					      LIST	ON
      0  4b00					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  4b00				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4b00				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  4b00				   TEMPORARY_VAR SET	Overlay
      4  4b00				   TEMPORARY_OFFSET SET	0
      5  4b00					      SUBROUTINE
      3  4b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4b18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4b30		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  4b48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  4b48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     12  4b48					      LIST	ON
      0  4b48					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  4b48				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4b48				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  4b48				   TEMPORARY_VAR SET	Overlay
      4  4b48				   TEMPORARY_OFFSET SET	0
      5  4b48					      SUBROUTINE
      3  4b48		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  4b60		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4b78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4b90					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  4b90					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     12  4b90					      LIST	ON
      0  4b90					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  4b90				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4b90				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  4b90				   TEMPORARY_VAR SET	Overlay
      4  4b90				   TEMPORARY_OFFSET SET	0
      5  4b90					      SUBROUTINE
      3  4b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4ba8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  4bc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4bd8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  4bd8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
     12  4c00					      LIST	ON
      0  4c00					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  4c00				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4c00				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  4c00				   TEMPORARY_VAR SET	Overlay
      4  4c00				   TEMPORARY_OFFSET SET	0
      5  4c00					      SUBROUTINE
      3  4c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4c18		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  4c30		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4c48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  4c48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     12  4c48					      LIST	ON
      0  4c48					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  4c48				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4c48				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  4c48				   TEMPORARY_VAR SET	Overlay
      4  4c48				   TEMPORARY_OFFSET SET	0
      5  4c48					      SUBROUTINE
      3  4c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4c78		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  4c90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  4c90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     12  4c90					      LIST	ON
      0  4c90					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  4c90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4c90				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  4c90				   TEMPORARY_VAR SET	Overlay
      4  4c90				   TEMPORARY_OFFSET SET	0
      5  4c90					      SUBROUTINE
      3  4c90		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4ca8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4cd8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  4cd8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
     12  4d00					      LIST	ON
      0  4d00					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  4d00				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4d00				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  4d00				   TEMPORARY_VAR SET	Overlay
      4  4d00				   TEMPORARY_OFFSET SET	0
      5  4d00					      SUBROUTINE
      3  4d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4d18		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4d48					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  4d48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     12  4d48					      LIST	ON
      0  4d48					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  4d48				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4d48				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  4d48				   TEMPORARY_VAR SET	Overlay
      4  4d48				   TEMPORARY_OFFSET SET	0
      5  4d48					      SUBROUTINE
      3  4d48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4d60		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4d78		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4d90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  4d90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     12  4d90					      LIST	ON
      0  4d90					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  4d90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4d90				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  4d90				   TEMPORARY_VAR SET	Overlay
      4  4d90				   TEMPORARY_OFFSET SET	0
      5  4d90					      SUBROUTINE
      3  4d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4da8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4dc0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  4dd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  4dd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
     12  4e00					      LIST	ON
      0  4e00					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  4e00				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4e00				   BLACK_KING_on_BLACK_SQUARE_0
      3  4e00				   TEMPORARY_VAR SET	Overlay
      4  4e00				   TEMPORARY_OFFSET SET	0
      5  4e00					      SUBROUTINE
      3  4e00		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$70,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  4e18		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  4e30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  4e48					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  4e48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     12  4e48					      LIST	ON
      0  4e48					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  4e48				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4e48				   BLACK_KING_on_BLACK_SQUARE_1
      3  4e48				   TEMPORARY_VAR SET	Overlay
      4  4e48				   TEMPORARY_OFFSET SET	0
      5  4e48					      SUBROUTINE
      3  4e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4e60		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$70,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  4e78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  4e90					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  4e90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     12  4e90					      LIST	ON
      0  4e90					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  4e90				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4e90				   BLACK_KING_on_BLACK_SQUARE_2
      3  4e90				   TEMPORARY_VAR SET	Overlay
      4  4e90				   TEMPORARY_OFFSET SET	0
      5  4e90					      SUBROUTINE
      3  4e90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4ea8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$03,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  4ec0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE BANK_RECON.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  4ed8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  4ed8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
     12  4f00					      LIST	ON
      0  4f00					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  4f00				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4f00				   BLACK_KING_on_BLACK_SQUARE_3
      3  4f00				   TEMPORARY_VAR SET	Overlay
      4  4f00				   TEMPORARY_OFFSET SET	0
      5  4f00					      SUBROUTINE
      3  4f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4f18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4f30		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$38,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE BANK_RECON.asm
    444  4f48
    445  4f48
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  4f48					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  4f48					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     12  4f48					      LIST	ON
      0  4f48					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  4f48				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  4f48				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  4f48				   TEMPORARY_VAR SET	Overlay
      4  4f48				   TEMPORARY_OFFSET SET	0
      5  4f48					      SUBROUTINE
      3  4f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4f60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4f78		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE BANK_RECON.asm
    447  4f90
      0  4f90					      CHECK_BANK_SIZE	"BANK_RECON"
      1  4f90		       07 90	   .TEMP      =	* - BANK_START
 BANK_RECON (2K) SIZE =  $790 , FREE= $70
      2  4f90					      ECHO	"BANK_RECON", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4f90				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4f90				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4f90				  -	      ERR
      6  4f90					      endif
    449  4f90
    450  4f90							; EOF
------- FILE ./chess.asm
    484  4f90
    485  4f90							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  4f90					      include	"Handler_BANK1.asm"
      1  4f90							; Copyright (C)2020 Andrew Davie
      2  4f90
      3  4f90							;---------------------------------------------------------------------------------------------------
      4  4f90
      0  4f90					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  4f90
      2  4f90
      3  4f90
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  5690 ????				      SEG	MOVES
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   MOVES      SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	MOVES
      7  5000
      8  5000							; Board is a 10 x 12 object which simplifies the generation of moves
      9  5000							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     10  5000							; number + the bottom number. Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     11  5000
     12  5000							;     X12 numbering
     13  5000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     14  5000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     15  5000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     16  5000							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃ 8 BLACK
     17  5000							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃ 7 BLACK
     18  5000							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃ 6
     19  5000							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃ 5
     20  5000							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃ 4
     21  5000							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃ 3
     22  5000							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃ 2 WHITE
     23  5000							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃ 1 WHITE
     24  5000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     25  5000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     26  5000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     27  5000							;	0   1	2   3	4   5	6   7	8   9
     28  5000							;		A   B	C   D	E   F	G   H
     29  5000
     30  5000							;     HEX X12
     31  5000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     32  5000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     33  5000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     34  5000							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃ 8
     35  5000							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃ 7
     36  5000							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃ 6
     37  5000							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃ 5
     38  5000							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃ 4
     39  5000							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃ 3
     40  5000							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃ 2
     41  5000							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃ 1
     42  5000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     43  5000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     44  5000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     45  5000							;	0   1	2   3	4   5	6   7	8   9
     46  5000							;		A   B	C   D	E   F	G   H
     47  5000
     48  5000
     49  5000							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     50  5000							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     51  5000							; and sause "segfaults". 21 is the max offset (a knight move). These spare bytes can
     52  5000							; be re-used for something else - we just need to guarantee there are 21 of them there
     53  5000
      0  5000					      ALLOCATE	Valid, 120 + 80 + 21
      0  5000					      OPTIONAL_PAGEBREAK	"Table", 120 + 80 + 21
     12  5000					      LIST	ON
      0  5000					      DEF	Valid
      1  5000				   BANK_Valid SET	_CURRENT_BANK
      2  5000				   Valid
      3  5000				   TEMPORARY_VAR SET	Overlay
      4  5000				   TEMPORARY_OFFSET SET	0
      5  5000					      SUBROUTINE
     55  5000		       00 00 00 00*	      ds	21	; so indexing of "ValidSquare-21,x" won't fail
     56  5015
     57  5015							; Note, we will never index INTO the above bytes - x will always be >= 22
     58  5015							; We just need to make sure that the actual indexing will not have an address before
     59  5015							; the index of outside the page.
     60  5015
      0  5015					      DEF	ValidSquare
      1  5015				   BANK_ValidSquare SET	_CURRENT_BANK
      2  5015				   ValidSquare
      3  5015				   TEMPORARY_VAR SET	Overlay
      4  5015				   TEMPORARY_OFFSET SET	0
      5  5015					      SUBROUTINE
     62  5015
     63  5015
     64  5015							; Use this table to
     65  5015							;   a) Determine if a square is valid (-1 = NO)
     66  5015							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     67  5015							;	if a white pawn on square "x" can move "up" the board.
     68  5015
     69  5015		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     70  501f		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     71  5029		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     72  5033		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     73  503d		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     74  5047		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     75  5051		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     76  505b		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     77  5065		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     78  506f		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     79  5079
      0  5079					      DEF	Board
      1  5079				   BANK_Board SET	_CURRENT_BANK
      2  5079				   Board
      3  5079				   TEMPORARY_VAR SET	Overlay
      4  5079				   TEMPORARY_OFFSET SET	0
      5  5079					      SUBROUTINE
     81  5079
     82  5079							; A 10X10... we should never write using invalid square
     83  5079							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     84  5079							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     85  5079
     86  5079		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     87  5083		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     88  508d
     89  508d					      REPEAT	8
     90  508d		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  508d					      REPEND
     90  5097		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  5097					      REPEND
     90  50a1		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  50a1					      REPEND
     90  50ab		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  50ab					      REPEND
     90  50b5		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  50b5					      REPEND
     90  50bf		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  50bf					      REPEND
     90  50c9		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     89  50c9					      REPEND
     90  50d3		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  50dd					      REPEND
     92  50dd
     93  50dd							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     94  50dd
     95  50dd
     96  50dd							;---------------------------------------------------------------------------------------------------
     97  50dd
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  50dd					      include	"Handler_QUEEN.asm"
      1  50dd							; Copyright (C)2020 Andrew Davie
      2  50dd
      3  50dd							;---------------------------------------------------------------------------------------------------
      4  50dd							; QUEEN
      5  50dd							;---------------------------------------------------------------------------------------------------
      6  50dd
      0  50dd					      DEF	Handle_QUEEN
      1  50dd				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  50dd				   Handle_QUEEN
      3  50dd				   TEMPORARY_VAR SET	Overlay
      4  50dd				   TEMPORARY_OFFSET SET	0
      5  50dd					      SUBROUTINE
      8  50dd					      SUBROUTINE
      9  50dd
     10  50dd							; Pass...
     11  50dd							; x = currentSquare (square the piece is on)
     12  50dd							; currentPiece (with flags/colour attached)
     13  50dd
      0  50dd					      MOVE_TOWARDS	_DOWN+_LEFT
      1  50dd					      SUBROUTINE
      2  50dd
      3  50dd
      4  50dd
      5  50dd		       a6 93		      ldx	currentSquare
      6  50df		       d0 03		      bne	.project
      7  50e1
      8  50e1		       20 f9 fb    .empty     jsr	AddMove
      9  50e4		       bc 0a f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
     10  50e7		       30 0c		      bmi	.invalid
     11  50e9		       b9 79 f0 	      lda	Board,y
     12  50ec		       f0 f3		      beq	.empty
     13  50ee		       45 92		      eor	currentPiece
     14  50f0		       10 03		      bpl	.invalid
     15  50f2		       20 f9 fb 	      jsr	AddMove
     16  50f5
     17  50f5				   .invalid
      0  50f5					      MOVE_TOWARDS	_DOWN
      1  50f5					      SUBROUTINE
      2  50f5
      3  50f5
      4  50f5
      5  50f5		       a6 93		      ldx	currentSquare
      6  50f7		       d0 03		      bne	.project
      7  50f9
      8  50f9		       20 f9 fb    .empty     jsr	AddMove
      9  50fc		       bc 0b f0    .project   ldy	ValidSquare+_DOWN,x
     10  50ff		       30 0c		      bmi	.invalid
     11  5101		       b9 79 f0 	      lda	Board,y
     12  5104		       f0 f3		      beq	.empty
     13  5106		       45 92		      eor	currentPiece
     14  5108		       10 03		      bpl	.invalid
     15  510a		       20 f9 fb 	      jsr	AddMove
     16  510d
     17  510d				   .invalid
      0  510d					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  510d					      SUBROUTINE
      2  510d
      3  510d
      4  510d
      5  510d		       a6 93		      ldx	currentSquare
      6  510f		       d0 03		      bne	.project
      7  5111
      8  5111		       20 f9 fb    .empty     jsr	AddMove
      9  5114		       bc 0c f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
     10  5117		       30 0c		      bmi	.invalid
     11  5119		       b9 79 f0 	      lda	Board,y
     12  511c		       f0 f3		      beq	.empty
     13  511e		       45 92		      eor	currentPiece
     14  5120		       10 03		      bpl	.invalid
     15  5122		       20 f9 fb 	      jsr	AddMove
     16  5125
     17  5125				   .invalid
      0  5125					      MOVE_TOWARDS	_RIGHT
      1  5125					      SUBROUTINE
      2  5125
      3  5125
      4  5125
      5  5125		       a6 93		      ldx	currentSquare
      6  5127		       d0 03		      bne	.project
      7  5129
      8  5129		       20 f9 fb    .empty     jsr	AddMove
      9  512c		       bc 16 f0    .project   ldy	ValidSquare+_RIGHT,x
     10  512f		       30 0c		      bmi	.invalid
     11  5131		       b9 79 f0 	      lda	Board,y
     12  5134		       f0 f3		      beq	.empty
     13  5136		       45 92		      eor	currentPiece
     14  5138		       10 03		      bpl	.invalid
     15  513a		       20 f9 fb 	      jsr	AddMove
     16  513d
     17  513d				   .invalid
      0  513d					      MOVE_TOWARDS	_UP+_RIGHT
      1  513d					      SUBROUTINE
      2  513d
      3  513d
      4  513d
      5  513d		       a6 93		      ldx	currentSquare
      6  513f		       d0 03		      bne	.project
      7  5141
      8  5141		       20 f9 fb    .empty     jsr	AddMove
      9  5144		       bc 20 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
     10  5147		       30 0c		      bmi	.invalid
     11  5149		       b9 79 f0 	      lda	Board,y
     12  514c		       f0 f3		      beq	.empty
     13  514e		       45 92		      eor	currentPiece
     14  5150		       10 03		      bpl	.invalid
     15  5152		       20 f9 fb 	      jsr	AddMove
     16  5155
     17  5155				   .invalid
      0  5155					      MOVE_TOWARDS	_UP
      1  5155					      SUBROUTINE
      2  5155
      3  5155
      4  5155
      5  5155		       a6 93		      ldx	currentSquare
      6  5157		       d0 03		      bne	.project
      7  5159
      8  5159		       20 f9 fb    .empty     jsr	AddMove
      9  515c		       bc 1f f0    .project   ldy	ValidSquare+_UP,x
     10  515f		       30 0c		      bmi	.invalid
     11  5161		       b9 79 f0 	      lda	Board,y
     12  5164		       f0 f3		      beq	.empty
     13  5166		       45 92		      eor	currentPiece
     14  5168		       10 03		      bpl	.invalid
     15  516a		       20 f9 fb 	      jsr	AddMove
     16  516d
     17  516d				   .invalid
      0  516d					      MOVE_TOWARDS	_UP+_LEFT
      1  516d					      SUBROUTINE
      2  516d
      3  516d
      4  516d
      5  516d		       a6 93		      ldx	currentSquare
      6  516f		       d0 03		      bne	.project
      7  5171
      8  5171		       20 f9 fb    .empty     jsr	AddMove
      9  5174		       bc 1e f0    .project   ldy	ValidSquare+_UP+_LEFT,x
     10  5177		       30 0c		      bmi	.invalid
     11  5179		       b9 79 f0 	      lda	Board,y
     12  517c		       f0 f3		      beq	.empty
     13  517e		       45 92		      eor	currentPiece
     14  5180		       10 03		      bpl	.invalid
     15  5182		       20 f9 fb 	      jsr	AddMove
     16  5185
     17  5185				   .invalid
      0  5185					      MOVE_TOWARDS	_LEFT
      1  5185					      SUBROUTINE
      2  5185
      3  5185
      4  5185
      5  5185		       a6 93		      ldx	currentSquare
      6  5187		       d0 03		      bne	.project
      7  5189
      8  5189		       20 f9 fb    .empty     jsr	AddMove
      9  518c		       bc 14 f0    .project   ldy	ValidSquare+_LEFT,x
     10  518f		       30 0c		      bmi	.invalid
     11  5191		       b9 79 f0 	      lda	Board,y
     12  5194		       f0 f3		      beq	.empty
     13  5196		       45 92		      eor	currentPiece
     14  5198		       10 03		      bpl	.invalid
     15  519a		       20 f9 fb 	      jsr	AddMove
     16  519d
     17  519d				   .invalid
     22  519d
     23  519d		       4c 5d fa 	      jmp	MoveReturn
     24  51a0
     25  51a0							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  51a0					      include	"Handler_BISHOP.asm"
      1  51a0							; Copyright (C)2020 Andrew Davie
      2  51a0
      3  51a0							;---------------------------------------------------------------------------------------------------
      4  51a0							; BISHOP
      5  51a0							;---------------------------------------------------------------------------------------------------
      6  51a0
      0  51a0					      DEF	Handle_BISHOP
      1  51a0				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  51a0				   Handle_BISHOP
      3  51a0				   TEMPORARY_VAR SET	Overlay
      4  51a0				   TEMPORARY_OFFSET SET	0
      5  51a0					      SUBROUTINE
      8  51a0					      SUBROUTINE
      9  51a0
     10  51a0							; x = currentSquare (square the piece is on)
     11  51a0							; currentPiece (with flags/colour attached)
     12  51a0
      0  51a0					      MOVE_TOWARDS	_DOWN+_LEFT
      1  51a0					      SUBROUTINE
      2  51a0
      3  51a0
      4  51a0
      5  51a0		       a6 93		      ldx	currentSquare
      6  51a2		       d0 03		      bne	.project
      7  51a4
      8  51a4		       20 f9 fb    .empty     jsr	AddMove
      9  51a7		       bc 0a f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
     10  51aa		       30 0c		      bmi	.invalid
     11  51ac		       b9 79 f0 	      lda	Board,y
     12  51af		       f0 f3		      beq	.empty
     13  51b1		       45 92		      eor	currentPiece
     14  51b3		       10 03		      bpl	.invalid
     15  51b5		       20 f9 fb 	      jsr	AddMove
     16  51b8
     17  51b8				   .invalid
      0  51b8					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  51b8					      SUBROUTINE
      2  51b8
      3  51b8
      4  51b8
      5  51b8		       a6 93		      ldx	currentSquare
      6  51ba		       d0 03		      bne	.project
      7  51bc
      8  51bc		       20 f9 fb    .empty     jsr	AddMove
      9  51bf		       bc 0c f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
     10  51c2		       30 0c		      bmi	.invalid
     11  51c4		       b9 79 f0 	      lda	Board,y
     12  51c7		       f0 f3		      beq	.empty
     13  51c9		       45 92		      eor	currentPiece
     14  51cb		       10 03		      bpl	.invalid
     15  51cd		       20 f9 fb 	      jsr	AddMove
     16  51d0
     17  51d0				   .invalid
      0  51d0					      MOVE_TOWARDS	_UP+_LEFT
      1  51d0					      SUBROUTINE
      2  51d0
      3  51d0
      4  51d0
      5  51d0		       a6 93		      ldx	currentSquare
      6  51d2		       d0 03		      bne	.project
      7  51d4
      8  51d4		       20 f9 fb    .empty     jsr	AddMove
      9  51d7		       bc 1e f0    .project   ldy	ValidSquare+_UP+_LEFT,x
     10  51da		       30 0c		      bmi	.invalid
     11  51dc		       b9 79 f0 	      lda	Board,y
     12  51df		       f0 f3		      beq	.empty
     13  51e1		       45 92		      eor	currentPiece
     14  51e3		       10 03		      bpl	.invalid
     15  51e5		       20 f9 fb 	      jsr	AddMove
     16  51e8
     17  51e8				   .invalid
      0  51e8					      MOVE_TOWARDS	_UP+_RIGHT
      1  51e8					      SUBROUTINE
      2  51e8
      3  51e8
      4  51e8
      5  51e8		       a6 93		      ldx	currentSquare
      6  51ea		       d0 03		      bne	.project
      7  51ec
      8  51ec		       20 f9 fb    .empty     jsr	AddMove
      9  51ef		       bc 20 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
     10  51f2		       30 0c		      bmi	.invalid
     11  51f4		       b9 79 f0 	      lda	Board,y
     12  51f7		       f0 f3		      beq	.empty
     13  51f9		       45 92		      eor	currentPiece
     14  51fb		       10 03		      bpl	.invalid
     15  51fd		       20 f9 fb 	      jsr	AddMove
     16  5200
     17  5200				   .invalid
     17  5200
     18  5200		       4c 5d fa 	      jmp	MoveReturn
     19  5203
     20  5203							;---------------------------------------------------------------------------------------------------
     21  5203							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  5203					      include	"Handler_ROOK.asm"
      1  5203							; Copyright (C)2020 Andrew Davie
      2  5203							; Rook move handler
      3  5203
      4  5203							;---------------------------------------------------------------------------------------------------
      5  5203							; ROOK
      6  5203							;---------------------------------------------------------------------------------------------------
      7  5203
      0  5203					      DEF	Handle_ROOK
      1  5203				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  5203				   Handle_ROOK
      3  5203				   TEMPORARY_VAR SET	Overlay
      4  5203				   TEMPORARY_OFFSET SET	0
      5  5203					      SUBROUTINE
      9  5203					      SUBROUTINE
     10  5203
     11  5203							; Pass...
     12  5203							; x = currentSquare (square the piece is on)
     13  5203							; currentPiece (with flags/colour attached)
     14  5203
      0  5203					      MOVE_TOWARDS	_DOWN
      1  5203					      SUBROUTINE
      2  5203
      3  5203
      4  5203
      5  5203		       a6 93		      ldx	currentSquare
      6  5205		       d0 03		      bne	.project
      7  5207
      8  5207		       20 f9 fb    .empty     jsr	AddMove
      9  520a		       bc 0b f0    .project   ldy	ValidSquare+_DOWN,x
     10  520d		       30 0c		      bmi	.invalid
     11  520f		       b9 79 f0 	      lda	Board,y
     12  5212		       f0 f3		      beq	.empty
     13  5214		       45 92		      eor	currentPiece
     14  5216		       10 03		      bpl	.invalid
     15  5218		       20 f9 fb 	      jsr	AddMove
     16  521b
     17  521b				   .invalid
      0  521b					      MOVE_TOWARDS	_RIGHT
      1  521b					      SUBROUTINE
      2  521b
      3  521b
      4  521b
      5  521b		       a6 93		      ldx	currentSquare
      6  521d		       d0 03		      bne	.project
      7  521f
      8  521f		       20 f9 fb    .empty     jsr	AddMove
      9  5222		       bc 16 f0    .project   ldy	ValidSquare+_RIGHT,x
     10  5225		       30 0c		      bmi	.invalid
     11  5227		       b9 79 f0 	      lda	Board,y
     12  522a		       f0 f3		      beq	.empty
     13  522c		       45 92		      eor	currentPiece
     14  522e		       10 03		      bpl	.invalid
     15  5230		       20 f9 fb 	      jsr	AddMove
     16  5233
     17  5233				   .invalid
      0  5233					      MOVE_TOWARDS	_UP
      1  5233					      SUBROUTINE
      2  5233
      3  5233
      4  5233
      5  5233		       a6 93		      ldx	currentSquare
      6  5235		       d0 03		      bne	.project
      7  5237
      8  5237		       20 f9 fb    .empty     jsr	AddMove
      9  523a		       bc 1f f0    .project   ldy	ValidSquare+_UP,x
     10  523d		       30 0c		      bmi	.invalid
     11  523f		       b9 79 f0 	      lda	Board,y
     12  5242		       f0 f3		      beq	.empty
     13  5244		       45 92		      eor	currentPiece
     14  5246		       10 03		      bpl	.invalid
     15  5248		       20 f9 fb 	      jsr	AddMove
     16  524b
     17  524b				   .invalid
      0  524b					      MOVE_TOWARDS	_LEFT
      1  524b					      SUBROUTINE
      2  524b
      3  524b
      4  524b
      5  524b		       a6 93		      ldx	currentSquare
      6  524d		       d0 03		      bne	.project
      7  524f
      8  524f		       20 f9 fb    .empty     jsr	AddMove
      9  5252		       bc 14 f0    .project   ldy	ValidSquare+_LEFT,x
     10  5255		       30 0c		      bmi	.invalid
     11  5257		       b9 79 f0 	      lda	Board,y
     12  525a		       f0 f3		      beq	.empty
     13  525c		       45 92		      eor	currentPiece
     14  525e		       10 03		      bpl	.invalid
     15  5260		       20 f9 fb 	      jsr	AddMove
     16  5263
     17  5263				   .invalid
     19  5263
     20  5263		       4c 5d fa 	      jmp	MoveReturn
     21  5266
     22  5266							;---------------------------------------------------------------------------------------------------
     23  5266							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  5266					      include	"Handler_KING.asm"
      1  5266							; Copyright (C)2020 Andrew Davie
      2  5266
      3  5266							;---------------------------------------------------------------------------------------------------
      4  5266							; KING
      5  5266							; This is the move handler for a KING
      6  5266							; "Check" is detected in the next ply of the search.
      7  5266
      8  5266
      9  5266							;---------------------------------------------------------------------------------------------------
     10  5266
     11  5266							; MACRO - Castling
     12  5266
     13  5266		       00 03	   KINGSIDE   =	3
     14  5266		       ff ff ff fc QUEENSIDE  =	-4
     15  5266
     16  5266					      MAC	castle
     17  5266							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  5266
     19  5266					      ldx	currentSquare
     20  5266					      lda	Board+{1},x	; kingside/queenside R position
     21  5266					      and	#PIECE_MASK|FLAG_MOVED
     22  5266					      cmp	#ROOK
     23  5266					      bne	.noCastle	; not a R that hasn't moved
     24  5266
     25  5266							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  5266							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  5266
     28  5266					      IF	{1} = QUEENSIDE
     29  5266					      lda	Board-3,x	; N pos
     30  5266					      ora	Board-2,x	; B pos
     31  5266					      ora	Board-1,x	; Q pos
     32  5266					      bne	.noCastle	; not vacant?
     33  5266
     34  5266					      ENDIF
     35  5266
     36  5266					      IF	{1} = KINGSIDE
     37  5266					      lda	Board+2,x	; N pos
     38  5266					      ora	Board+1,x	; B pos
     39  5266					      bne	.noCastle	; not vacant?
     40  5266					      ENDIF
     41  5266
     42  5266							; appropriate N/B/(Q) squares are vacant so we proceed...
     43  5266
     44  5266							; FINALLY -- king can castle
     45  5266							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     46  5266							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     47  5266							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     48  5266
     49  5266					      lda	currentPiece
     50  5266					      ora	#FLAG_CASTLE	; flag it's a castling move
     51  5266					      sta	currentPiece
     52  5266
     53  5266					      IF	{1} = KINGSIDE
     54  5266					      ldy	ValidSquare+2,x
     55  5266					      ENDIF
     56  5266
     57  5266					      IF	{1} = QUEENSIDE
     58  5266					      ldy	ValidSquare-2,x
     59  5266					      ENDIF
     60  5266
     61  5266					      jsr	AddMove	; 57
     62  5266
     63  5266				   .noCastle
     64  5266					      ENDM
     65  5266
     66  5266
     67  5266							;---------------------------------------------------------------------------------------------------
     68  5266
      0  5266					      DEF	Handle_KING
      1  5266				   BANK_Handle_KING SET	_CURRENT_BANK
      2  5266				   Handle_KING
      3  5266				   TEMPORARY_VAR SET	Overlay
      4  5266				   TEMPORARY_OFFSET SET	0
      5  5266					      SUBROUTINE
     70  5266					      SUBROUTINE
     71  5266
     72  5266							; x = currentSquare (square the KING is on)
     73  5266							; currentPiece (KING of course, but with flags/colour attached)
     74  5266
      0  5266					      MOVE_TO	_DOWN+_LEFT
      1  5266					      SUBROUTINE
      2  5266		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  5269		       30 0c		      bmi	.invalid
      4  526b		       b9 79 f0 	      lda	Board,y
      5  526e		       f0 04		      beq	.squareEmpty
      6  5270		       45 92		      eor	currentPiece
      7  5272		       10 03		      bpl	.invalid
      8  5274		       20 f9 fb    .squareEmpty jsr	AddMove
      9  5277				   .invalid
      0  5277					      MOVE_TO_X	_DOWN
      1  5277		       a6 93		      ldx	currentSquare
      0  5279					      MOVE_TO	_DOWN
      1  5279					      SUBROUTINE
      2  5279		       bc 0b f0 	      ldy	ValidSquare+_DOWN,x
      3  527c		       30 0c		      bmi	.invalid
      4  527e		       b9 79 f0 	      lda	Board,y
      5  5281		       f0 04		      beq	.squareEmpty
      6  5283		       45 92		      eor	currentPiece
      7  5285		       10 03		      bpl	.invalid
      8  5287		       20 f9 fb    .squareEmpty jsr	AddMove
      9  528a				   .invalid
      0  528a					      MOVE_TO_X	_DOWN+_RIGHT
      1  528a		       a6 93		      ldx	currentSquare
      0  528c					      MOVE_TO	_DOWN+_RIGHT
      1  528c					      SUBROUTINE
      2  528c		       bc 0c f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  528f		       30 0c		      bmi	.invalid
      4  5291		       b9 79 f0 	      lda	Board,y
      5  5294		       f0 04		      beq	.squareEmpty
      6  5296		       45 92		      eor	currentPiece
      7  5298		       10 03		      bpl	.invalid
      8  529a		       20 f9 fb    .squareEmpty jsr	AddMove
      9  529d				   .invalid
      0  529d					      MOVE_TO_X	_RIGHT
      1  529d		       a6 93		      ldx	currentSquare
      0  529f					      MOVE_TO	_RIGHT
      1  529f					      SUBROUTINE
      2  529f		       bc 16 f0 	      ldy	ValidSquare+_RIGHT,x
      3  52a2		       30 0c		      bmi	.invalid
      4  52a4		       b9 79 f0 	      lda	Board,y
      5  52a7		       f0 04		      beq	.squareEmpty
      6  52a9		       45 92		      eor	currentPiece
      7  52ab		       10 03		      bpl	.invalid
      8  52ad		       20 f9 fb    .squareEmpty jsr	AddMove
      9  52b0				   .invalid
      0  52b0					      MOVE_TO_X	_UP+_RIGHT
      1  52b0		       a6 93		      ldx	currentSquare
      0  52b2					      MOVE_TO	_UP+_RIGHT
      1  52b2					      SUBROUTINE
      2  52b2		       bc 20 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  52b5		       30 0c		      bmi	.invalid
      4  52b7		       b9 79 f0 	      lda	Board,y
      5  52ba		       f0 04		      beq	.squareEmpty
      6  52bc		       45 92		      eor	currentPiece
      7  52be		       10 03		      bpl	.invalid
      8  52c0		       20 f9 fb    .squareEmpty jsr	AddMove
      9  52c3				   .invalid
      0  52c3					      MOVE_TO_X	_UP
      1  52c3		       a6 93		      ldx	currentSquare
      0  52c5					      MOVE_TO	_UP
      1  52c5					      SUBROUTINE
      2  52c5		       bc 1f f0 	      ldy	ValidSquare+_UP,x
      3  52c8		       30 0c		      bmi	.invalid
      4  52ca		       b9 79 f0 	      lda	Board,y
      5  52cd		       f0 04		      beq	.squareEmpty
      6  52cf		       45 92		      eor	currentPiece
      7  52d1		       10 03		      bpl	.invalid
      8  52d3		       20 f9 fb    .squareEmpty jsr	AddMove
      9  52d6				   .invalid
      0  52d6					      MOVE_TO_X	_UP+_LEFT
      1  52d6		       a6 93		      ldx	currentSquare
      0  52d8					      MOVE_TO	_UP+_LEFT
      1  52d8					      SUBROUTINE
      2  52d8		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  52db		       30 0c		      bmi	.invalid
      4  52dd		       b9 79 f0 	      lda	Board,y
      5  52e0		       f0 04		      beq	.squareEmpty
      6  52e2		       45 92		      eor	currentPiece
      7  52e4		       10 03		      bpl	.invalid
      8  52e6		       20 f9 fb    .squareEmpty jsr	AddMove
      9  52e9				   .invalid
      0  52e9					      MOVE_TO_X	_LEFT
      1  52e9		       a6 93		      ldx	currentSquare
      0  52eb					      MOVE_TO	_LEFT
      1  52eb					      SUBROUTINE
      2  52eb		       bc 14 f0 	      ldy	ValidSquare+_LEFT,x
      3  52ee		       30 0c		      bmi	.invalid
      4  52f0		       b9 79 f0 	      lda	Board,y
      5  52f3		       f0 04		      beq	.squareEmpty
      6  52f5		       45 92		      eor	currentPiece
      7  52f7		       10 03		      bpl	.invalid
      8  52f9		       20 f9 fb    .squareEmpty jsr	AddMove
      9  52fc				   .invalid
     83  52fc
     84  52fc		       24 92		      bit	currentPiece
     85  52fe		       70 41		      bvs	.exit	; king has moved, so no castling
     86  5300
      0  5300					      CASTLE	KINGSIDE
      1  5300
      2  5300
      3  5300		       a6 93		      ldx	currentSquare
      4  5302		       bd 7c f0 	      lda	Board+KINGSIDE,x
      5  5305		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5307		       c9 05		      cmp	#ROOK
      7  5309		       d0 14		      bne	.noCastle
      8  530b
      9  530b
     10  530b
     11  530b
     12  530b				  -	      IF	KINGSIDE = QUEENSIDE
     13  530b				  -	      lda	Board-3,x
     14  530b				  -	      ora	Board-2,x
     15  530b				  -	      ora	Board-1,x
     16  530b				  -	      bne	.noCastle
     17  530b				  -
     18  530b					      ENDIF
     19  530b
     20  530b					      IF	KINGSIDE = KINGSIDE
     21  530b		       bd 7b f0 	      lda	Board+2,x
     22  530e		       1d 7a f0 	      ora	Board+1,x
     23  5311		       d0 0c		      bne	.noCastle
     24  5313					      ENDIF
     25  5313
     26  5313
     27  5313
     28  5313
     29  5313
     30  5313
     31  5313
     32  5313
     33  5313		       a5 92		      lda	currentPiece
     34  5315		       09 10		      ora	#FLAG_CASTLE
     35  5317		       85 92		      sta	currentPiece
     36  5319
     37  5319					      IF	KINGSIDE = KINGSIDE
     38  5319		       bc 17 f0 	      ldy	ValidSquare+2,x
     39  531c					      ENDIF
     40  531c
     41  531c				  -	      IF	KINGSIDE = QUEENSIDE
     42  531c				  -	      ldy	ValidSquare-2,x
     43  531c					      ENDIF
     44  531c
     45  531c		       20 f9 fb 	      jsr	AddMove
     46  531f
     47  531f				   .noCastle
      0  531f					      CASTLE	QUEENSIDE
      1  531f
      2  531f
      3  531f		       a6 93		      ldx	currentSquare
      4  5321		       bd 75 f0 	      lda	Board+QUEENSIDE,x
      5  5324		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5326		       c9 05		      cmp	#ROOK
      7  5328		       d0 17		      bne	.noCastle
      8  532a
      9  532a
     10  532a
     11  532a
     12  532a					      IF	QUEENSIDE = QUEENSIDE
     13  532a		       bd 76 f0 	      lda	Board-3,x
     14  532d		       1d 77 f0 	      ora	Board-2,x
     15  5330		       1d 78 f0 	      ora	Board-1,x
     16  5333		       d0 0c		      bne	.noCastle
     17  5335
     18  5335					      ENDIF
     19  5335
     20  5335				  -	      IF	QUEENSIDE = KINGSIDE
     21  5335				  -	      lda	Board+2,x
     22  5335				  -	      ora	Board+1,x
     23  5335				  -	      bne	.noCastle
     24  5335					      ENDIF
     25  5335
     26  5335
     27  5335
     28  5335
     29  5335
     30  5335
     31  5335
     32  5335
     33  5335		       a5 92		      lda	currentPiece
     34  5337		       09 10		      ora	#FLAG_CASTLE
     35  5339		       85 92		      sta	currentPiece
     36  533b
     37  533b				  -	      IF	QUEENSIDE = KINGSIDE
     38  533b				  -	      ldy	ValidSquare+2,x
     39  533b					      ENDIF
     40  533b
     41  533b					      IF	QUEENSIDE = QUEENSIDE
     42  533b		       bc 13 f0 	      ldy	ValidSquare-2,x
     43  533e					      ENDIF
     44  533e
     45  533e		       20 f9 fb 	      jsr	AddMove
     46  5341
     47  5341				   .noCastle
     89  5341
     90  5341		       4c 5d fa    .exit      jmp	MoveReturn
     91  5344
     92  5344							;---------------------------------------------------------------------------------------------------
     93  5344							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  5344					      include	"Handler_KNIGHT.asm"
      1  5344							; Copyright (C)2020 Andrew Davie
      2  5344							; Knight move handler
      3  5344
      4  5344							;---------------------------------------------------------------------------------------------------
      5  5344							; KNIGHT
      6  5344							;---------------------------------------------------------------------------------------------------
      7  5344
      0  5344					      DEF	Handle_KNIGHT
      1  5344				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  5344				   Handle_KNIGHT
      3  5344				   TEMPORARY_VAR SET	Overlay
      4  5344				   TEMPORARY_OFFSET SET	0
      5  5344					      SUBROUTINE
      9  5344					      SUBROUTINE
     10  5344
     11  5344							; x = currentSquare (square the piece is on)
     12  5344							; currentPiece (with flags/colour attached)
     13  5344
      0  5344					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  5344					      SUBROUTINE
      2  5344		       bc 00 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  5347		       30 0c		      bmi	.invalid
      4  5349		       b9 79 f0 	      lda	Board,y
      5  534c		       f0 04		      beq	.squareEmpty
      6  534e		       45 92		      eor	currentPiece
      7  5350		       10 03		      bpl	.invalid
      8  5352		       20 f9 fb    .squareEmpty jsr	AddMove
      9  5355				   .invalid
      0  5355					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  5355		       a6 93		      ldx	currentSquare
      0  5357					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  5357					      SUBROUTINE
      2  5357		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  535a		       30 0c		      bmi	.invalid
      4  535c		       b9 79 f0 	      lda	Board,y
      5  535f		       f0 04		      beq	.squareEmpty
      6  5361		       45 92		      eor	currentPiece
      7  5363		       10 03		      bpl	.invalid
      8  5365		       20 f9 fb    .squareEmpty jsr	AddMove
      9  5368				   .invalid
      0  5368					      MOVE_TO_X	_UP+_UP+_LEFT
      1  5368		       a6 93		      ldx	currentSquare
      0  536a					      MOVE_TO	_UP+_UP+_LEFT
      1  536a					      SUBROUTINE
      2  536a		       bc 28 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  536d		       30 0c		      bmi	.invalid
      4  536f		       b9 79 f0 	      lda	Board,y
      5  5372		       f0 04		      beq	.squareEmpty
      6  5374		       45 92		      eor	currentPiece
      7  5376		       10 03		      bpl	.invalid
      8  5378		       20 f9 fb    .squareEmpty jsr	AddMove
      9  537b				   .invalid
      0  537b					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  537b		       a6 93		      ldx	currentSquare
      0  537d					      MOVE_TO	_UP+_UP+_RIGHT
      1  537d					      SUBROUTINE
      2  537d		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  5380		       30 0c		      bmi	.invalid
      4  5382		       b9 79 f0 	      lda	Board,y
      5  5385		       f0 04		      beq	.squareEmpty
      6  5387		       45 92		      eor	currentPiece
      7  5389		       10 03		      bpl	.invalid
      8  538b		       20 f9 fb    .squareEmpty jsr	AddMove
      9  538e				   .invalid
     18  538e
      0  538e					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  538e		       a6 93		      ldx	currentSquare
      0  5390					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  5390					      SUBROUTINE
      2  5390		       bc 09 f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  5393		       30 0c		      bmi	.invalid
      4  5395		       b9 79 f0 	      lda	Board,y
      5  5398		       f0 04		      beq	.squareEmpty
      6  539a		       45 92		      eor	currentPiece
      7  539c		       10 03		      bpl	.invalid
      8  539e		       20 f9 fb    .squareEmpty jsr	AddMove
      9  53a1				   .invalid
      0  53a1					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  53a1		       a6 93		      ldx	currentSquare
      0  53a3					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  53a3					      SUBROUTINE
      2  53a3		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  53a6		       30 0c		      bmi	.invalid
      4  53a8		       b9 79 f0 	      lda	Board,y
      5  53ab		       f0 04		      beq	.squareEmpty
      6  53ad		       45 92		      eor	currentPiece
      7  53af		       10 03		      bpl	.invalid
      8  53b1		       20 f9 fb    .squareEmpty jsr	AddMove
      9  53b4				   .invalid
      0  53b4					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  53b4		       a6 93		      ldx	currentSquare
      0  53b6					      MOVE_TO	_UP+_LEFT+_LEFT
      1  53b6					      SUBROUTINE
      2  53b6		       bc 1d f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  53b9		       30 0c		      bmi	.invalid
      4  53bb		       b9 79 f0 	      lda	Board,y
      5  53be		       f0 04		      beq	.squareEmpty
      6  53c0		       45 92		      eor	currentPiece
      7  53c2		       10 03		      bpl	.invalid
      8  53c4		       20 f9 fb    .squareEmpty jsr	AddMove
      9  53c7				   .invalid
      0  53c7					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  53c7		       a6 93		      ldx	currentSquare
      0  53c9					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  53c9					      SUBROUTINE
      2  53c9		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  53cc		       30 0c		      bmi	.invalid
      4  53ce		       b9 79 f0 	      lda	Board,y
      5  53d1		       f0 04		      beq	.squareEmpty
      6  53d3		       45 92		      eor	currentPiece
      7  53d5		       10 03		      bpl	.invalid
      8  53d7		       20 f9 fb    .squareEmpty jsr	AddMove
      9  53da				   .invalid
     23  53da
     24  53da		       4c 5d fa 	      jmp	MoveReturn
     25  53dd
     26  53dd							; EOF
------- FILE Handler_BANK1.asm
    103  53dd
    104  53dd
    105  53dd							;---------------------------------------------------------------------------------------------------
    106  53dd
      0  53dd					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  53dd
      2  53dd
      3  53dd		       03 dd	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3dd , FREE= $23
      4  53dd					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  53dd				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  53dd				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  53dd				  -	      ERR
      8  53dd					      endif
    108  53dd
    109  53dd
    110  53dd							; There is space here (1K) for use as ROM
    111  53dd							; but NOT when the above bank is switched in as RAM, of course!
    112  53dd
    113  53dd
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 3 PASS 2
      0  53dd					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  53dd					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_0", 72
     12  5400					      LIST	ON
      0  5400					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_0
      1  5400				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  5400				   WHITE_PROMOTE_on_BLACK_SQUARE_0
      3  5400				   TEMPORARY_VAR SET	Overlay
      4  5400				   TEMPORARY_OFFSET SET	0
      5  5400					      SUBROUTINE
      3  5400		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  5418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 3 PASS 2
      0  5448					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  5448					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_1", 72
     12  5448					      LIST	ON
      0  5448					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_1
      1  5448				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  5448				   WHITE_PROMOTE_on_BLACK_SQUARE_1
      3  5448				   TEMPORARY_VAR SET	Overlay
      4  5448				   TEMPORARY_OFFSET SET	0
      5  5448					      SUBROUTINE
      3  5448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5460		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  5478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 3 PASS 2
      0  5490					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  5490					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_2", 72
     12  5490					      LIST	ON
      0  5490					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_2
      1  5490				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  5490				   WHITE_PROMOTE_on_BLACK_SQUARE_2
      3  5490				   TEMPORARY_VAR SET	Overlay
      4  5490				   TEMPORARY_OFFSET SET	0
      5  5490					      SUBROUTINE
      3  5490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  54a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  54c0		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 3 PASS 2
      0  54d8					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  54d8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_3", 72
     12  5500					      LIST	ON
      0  5500					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_3
      1  5500				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  5500				   WHITE_PROMOTE_on_BLACK_SQUARE_3
      3  5500				   TEMPORARY_VAR SET	Overlay
      4  5500				   TEMPORARY_OFFSET SET	0
      5  5500					      SUBROUTINE
      3  5500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5530		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 3 PASS 2
      0  5548					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  5548					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_0", 72
     12  5548					      LIST	ON
      0  5548					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_0
      1  5548				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  5548				   WHITE_PROMOTE_on_WHITE_SQUARE_0
      3  5548				   TEMPORARY_VAR SET	Overlay
      4  5548				   TEMPORARY_OFFSET SET	0
      5  5548					      SUBROUTINE
      3  5548		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 3 PASS 2
      0  5590					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  5590					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_1", 72
     12  5590					      LIST	ON
      0  5590					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_1
      1  5590				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  5590				   WHITE_PROMOTE_on_WHITE_SQUARE_1
      3  5590				   TEMPORARY_VAR SET	Overlay
      4  5590				   TEMPORARY_OFFSET SET	0
      5  5590					      SUBROUTINE
      3  5590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  55a8		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  55c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 3 PASS 2
      0  55d8					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  55d8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_2", 72
     12  5600					      LIST	ON
      0  5600					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_2
      1  5600				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  5600				   WHITE_PROMOTE_on_WHITE_SQUARE_2
      3  5600				   TEMPORARY_VAR SET	Overlay
      4  5600				   TEMPORARY_OFFSET SET	0
      5  5600					      SUBROUTINE
      3  5600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5630		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 3 PASS 2
      0  5648					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  5648					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_3", 72
     12  5648					      LIST	ON
      0  5648					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_3
      1  5648				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  5648				   WHITE_PROMOTE_on_WHITE_SQUARE_3
      3  5648				   TEMPORARY_VAR SET	Overlay
      4  5648				   TEMPORARY_OFFSET SET	0
      5  5648					      SUBROUTINE
      3  5648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  5660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  5678		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE Handler_BANK1.asm
    122  5690
    123  5690							;---------------------------------------------------------------------------------------------------
    124  5690
      0  5690					      CHECK_BANK_SIZE	"HANDLER_BANK_1 -- full 2K"
      1  5690		       06 90	   .TEMP      =	* - BANK_START
 HANDLER_BANK_1 -- full 2K (2K) SIZE =  $690 , FREE= $170
      2  5690					      ECHO	"HANDLER_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  5690				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  5690				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  5690				  -	      ERR
      6  5690					      endif
    126  5690
    127  5690							;---------------------------------------------------------------------------------------------------
    128  5690							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 2
      0  5690					      include	"ply.asm"
      1  5690							; Copyright (C)2020 Andrew Davie
      2  5690							; andrew@taswegian.com
      3  5690
      4  5690
      5  5690							;---------------------------------------------------------------------------------------------------
      6  5690							; Define the RAM banks
      7  5690							; A "PLY" bank represents all the data required on any single ply of the search tree.
      8  5690							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      9  5690							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
     10  5690							; they act as independant switchable banks usable for data on each ply during the search.
     11  5690							; A ply will hold the move list for that position
     12  5690
     13  5690
     14  5690		       00 06	   MAX_PLY    =	6
      0  5690					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  5690
      2  5690
      3  5690
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     16 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     18 U3800					      REPEND
     19 U3800
     20 U3800
     21 U3800							;---------------------------------------------------------------------------------------------------
     22 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     23 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  5b68 ????				      SEG	BANK_PLY
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   BANK_PLY   SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	BANK_PLY
     25  5800
     26  5800							;---------------------------------------------------------------------------------------------------
     27  5800							; The piece-lists
     28  5800							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     29  5800							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     30  5800							; but this needs to be initialised programatically on new game.
     31  5800
     32  5800							; We have TWO piecelists, in different banks
     33  5800							; WHITE pieces in bank BANK_PLY
     34  5800							; BLACK pieces in bank BANK_PLY+1
     35  5800
     36  5800
     37  5800		       7f ff	   INFINITY   =	32767
     38  5800
     39  5800
      0  5800					      VARIABLE	SortedPieceList, 16	; indexes into PieceSquare, etc. NEG = no piece
      0  5800					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5800					      LIST	ON
      2  5800		       00 00 00 00*SortedPieceList ds	16
      0  5810					      VARIABLE	PieceSquare, 16
      0  5810					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5810					      LIST	ON
      2  5810		       00 00 00 00*PieceSquare ds	16
      0  5820					      VARIABLE	PieceType, 16
      0  5820					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5820					      LIST	ON
      2  5820		       00 00 00 00*PieceType  ds	16
      0  5830					      VARIABLE	PieceMaterialValueLO, 16
      0  5830					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5830					      LIST	ON
      2  5830		       00 00 00 00*PieceMaterialValueLO ds	16
      0  5840					      VARIABLE	PieceMaterialValueHI, 16
      0  5840					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5840					      LIST	ON
      2  5840		       00 00 00 00*PieceMaterialValueHI ds	16
      0  5850					      VARIABLE	PiecePositionValueLO, 16
      0  5850					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5850					      LIST	ON
      2  5850		       00 00 00 00*PiecePositionValueLO ds	16
      0  5860					      VARIABLE	PiecePositionValueHI, 16
      0  5860					      OPTIONAL_PAGEBREAK	"Variable", 16
     12  5860					      LIST	ON
      2  5860		       00 00 00 00*PiecePositionValueHI ds	16
      0  5870					      VARIABLE	PieceListPtr, 1
      0  5870					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  5870					      LIST	ON
      2  5870		       00	   PieceListPtr ds	1
      0  5871					      VARIABLE	plyValue, 2	; 16-bit signed score value from alphabeta
      0  5871					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  5871					      LIST	ON
      2  5871		       00 00	   plyValue   ds	2
      0  5873					      VARIABLE	SavedEvaluation, 2	; THIS node's evaluation - used for reverting moves!
      0  5873					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  5873					      LIST	ON
      2  5873		       00 00	   SavedEvaluation ds	2
     50  5875
     51  5875
     52  5875							;---------------------------------------------------------------------------------------------------
     53  5875
     54  5875		       00 78	   MAX_MOVES  =	120
     55  5875
      0  5875					      VARIABLE	MoveFrom, MAX_MOVES
      0  5875					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     12  5875					      LIST	ON
      2  5875		       00 00 00 00*MoveFrom   ds	MAX_MOVES
      0  58ed					      VARIABLE	MoveTo, MAX_MOVES
      0  58ed					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     12  5900					      LIST	ON
      2  5900		       00 00 00 00*MoveTo     ds	MAX_MOVES
      0  5978					      VARIABLE	MovePiece, MAX_MOVES
      0  5978					      OPTIONAL_PAGEBREAK	"Variable", MAX_MOVES
     12  5978					      LIST	ON
      2  5978		       00 00 00 00*MovePiece  ds	MAX_MOVES
     59  59f0
     60  59f0
     61  59f0							;---------------------------------------------------------------------------------------------------
     62  59f0
     63  59f0							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
     64  59f0							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
     65  59f0
      0  59f0					      VARIABLE	enPassantSquare, 1
      0  59f0					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59f0					      LIST	ON
      2  59f0		       00	   enPassantSquare ds	1
     67  59f1
     68  59f1
     69  59f1							;---------------------------------------------------------------------------------------------------
     70  59f1							; Move tables hold piece moves for this current ply
     71  59f1
      0  59f1					      VARIABLE	moveIndex, 1	; points to first available 'slot' for move storage
      0  59f1					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59f1					      LIST	ON
      2  59f1		       00	   moveIndex  ds	1
      0  59f2					      VARIABLE	movePtr, 1
      0  59f2					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59f2					      LIST	ON
      2  59f2		       00	   movePtr    ds	1
      0  59f3					      VARIABLE	bestMove, 1
      0  59f3					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59f3					      LIST	ON
      2  59f3		       00	   bestMove   ds	1
     75  59f4
      0  59f4					      VARIABLE	alpha, 2
      0  59f4					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  59f4					      LIST	ON
      2  59f4		       00 00	   alpha      ds	2
      0  59f6					      VARIABLE	beta, 2
      0  59f6					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  59f6					      LIST	ON
      2  59f6		       00 00	   beta       ds	2
      0  59f8					      VARIABLE	bestValue, 2
      0  59f8					      OPTIONAL_PAGEBREAK	"Variable", 2
     12  59f8					      LIST	ON
      2  59f8		       00 00	   bestValue  ds	2
      0  59fa					      VARIABLE	depth, 1
      0  59fa					      OPTIONAL_PAGEBREAK	"Variable", 1
     12  59fa					      LIST	ON
      2  59fa		       00	   depth      ds	1
     80  59fb
     81  59fb							;---------------------------------------------------------------------------------------------------
     82  59fb
     83  59fb
     84  59fb				  -	      if	0
     85  59fb				  -			; reverting a move
     86  59fb				  -			; from/to/piece/toOriginal
     87  59fb				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     88  59fb				  -			; en-passant
     89  59fb				  -
     90  59fb				  -from/to/piece
     91  59fb				  -
     92  59fb				  -
     93  59fb				  -from       =	piece
     94  59fb				  -to	      =	originalPiece
     95  59fb				  -from2      =	piece2
     96  59fb				  -to2	      =	originalPiece2
     97  59fb				  -
     98  59fb				  -
     99  59fb				  -
    100  59fb				  -so,	      normal	move (N)
    101  59fb				  -
    102  59fb				  -B1	      =	knight
    103  59fb				  -C3	      =	blank
    104  59fb				  -null/null
    105  59fb				  -
    106  59fb				  -pawn       promot	with capture
    107  59fb				  -A7	      =	WP
    108  59fb				  -B8	      =	BLACK_ROOK
    109  59fb				  -
    110  59fb				  -
    111  59fb				  -castle
    112  59fb				  -E1	      =	king
    113  59fb				  -G1	      =	blank
    114  59fb				  -H1	      =	rook
    115  59fb				  -F1	      =	blank
    116  59fb				  -
    117  59fb				  -
    118  59fb				  -en-passant
    119  59fb				  -B4	      =	P
    120  59fb				  -A3	      =	blank
    121  59fb				  -A4	      =	P
    122  59fb				  -A3	      =	blank
    123  59fb				  -
    124  59fb				  -FROM
    125  59fb				  -TO
    126  59fb				  -CAPTURED_PIECE
    127  59fb				  -ORIG_PIECE
    128  59fb				  -FROM2
    129  59fb				  -TO2
    130  59fb				  -PIECE2
    131  59fb				  -
    132  59fb				  -board[FROM] =	ORIG_PIECE
    133  59fb				  -board[TO]  =	CAPTURED_PIECE
    134  59fb				  -
    135  59fb				  -value      =	-new_piece + orig_piece - captured_piece
    136  59fb				  -
    137  59fb				  -
    138  59fb					      endif
    139  59fb
    140  59fb
    141  59fb
    142  59fb							;---------------------------------------------------------------------------------------------------
    143  59fb
      0  59fb					      DEF	InitPieceLists
      1  59fb				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  59fb				   InitPieceLists
      3  59fb				   TEMPORARY_VAR SET	Overlay
      4  59fb				   TEMPORARY_OFFSET SET	0
      5  59fb					      SUBROUTINE
    145  59fb					      SUBROUTINE
    146  59fb
    147  59fb		       a9 ff		      lda	#-1
    148  59fd		       8d 70 f4 	      sta	PieceListPtr+RAM_WRITE
    149  5a00
    150  5a00		       a2 0f		      ldx	#15
    151  5a02		       a9 00		      lda	#0
    152  5a04		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    153  5a07		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    154  5a0a		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    155  5a0d		       ca		      dex
    156  5a0e		       10 f4		      bpl	.clearLists
    157  5a10
    158  5a10
    159  5a10							; TODO: move the following as they're called 2x due to double-call of InitPiecLists
    160  5a10
    161  5a10		       85 90		      sta	Evaluation
    162  5a12		       85 91		      sta	Evaluation+1	; tracks CURRENT value of everything (signed 16-bit)
    163  5a14
    164  5a14
    165  5a14							; General inits that are moved out of FIXED....
    166  5a14
    167  5a14		       a9 07		      lda	#%111	; 111= quad
    168  5a16		       85 44		      sta	NUSIZ0
    169  5a18		       85 45		      sta	NUSIZ1	; quad-width
    170  5a1a
    171  5a1a		       a9 04		      lda	#%00000100
    172  5a1c		       85 4a		      sta	CTRLPF
    173  5a1e		       a9 00		      lda	#BACKGCOL
    174  5a20		       85 49		      sta	COLUBK
    175  5a22
      0  5a22					      PHASE	AI_StartClearBoard
      1  5a22		       a9 0d		      lda	#AI_StartClearBoard
      2  5a24		       85 8c		      sta	aiState
    177  5a26		       60		      rts
    178  5a27
    179  5a27
    180  5a27							;---------------------------------------------------------------------------------------------------
    181  5a27
    182  5a27				  -	      if	ASSERTS
    183  5a27				  -
    184  5a27				  -	      DEF	checkPiecesBank
    185  5a27				  -	      SUBROUTINE
    186  5a27				  -
    187  5a27				  -	      VAR	__x, 1
    188  5a27				  -	      VAR	__bank, 1
    189  5a27				  -
    190  5a27				  -			; odd usage - switches between concurrent bank code
    191  5a27				  -
    192  5a27				  -	      ldx	#15
    193  5a27				  -.check     lda	__bank
    194  5a27				  -	      sta	SET_BANK_RAM
    195  5a27				  -	      ldy	PieceSquare,x
    196  5a27				  -	      beq	.nonehere
    197  5a27				  -
    198  5a27				  -	      stx	__x
    199  5a27				  -
    200  5a27				  -	      jsr	GetBoard
    201  5a27				  -.fail      beq	.fail
    202  5a27				  -	      cmp	#-1
    203  5a27				  -.fail2     beq	.fail2
    204  5a27				  -
    205  5a27				  -	      ldx	__x
    206  5a27				  -
    207  5a27				  -.nonehere  dex
    208  5a27				  -	      bpl	.check
    209  5a27				  -	      rts
    210  5a27				  -
    211  5a27					      endif
    212  5a27
    213  5a27
    214  5a27							;---------------------------------------------------------------------------------------------------
    215  5a27
    216  5a27				  -	      if	ASSERTS
    217  5a27				  -
    218  5a27				  -	      DEF	DIAGNOSTIC_checkPieces
    219  5a27				  -	      SUBROUTINE
    220  5a27				  -
    221  5a27				  -			; SAFE call
    222  5a27				  -			; DIAGNOSTIC ONLY
    223  5a27				  -			; Scan the piecelist and the board square it points to and make sure non blank, non -1
    224  5a27				  -
    225  5a27				  -	      lda	#RAMBANK_PLY
    226  5a27				  -	      sta	__bank
    227  5a27				  -	      jsr	checkPiecesBank
    228  5a27				  -	      inc	__bank
    229  5a27				  -	      jsr	checkPiecesBank
    230  5a27				  -	      rts
    231  5a27				  -
    232  5a27					      endif
    233  5a27
    234  5a27
    235  5a27							;---------------------------------------------------------------------------------------------------
    236  5a27
    237  5a27				   InitPieceList
    238  5a27
------- FILE setup_board.asm LEVEL 3 PASS 2
      0  5a27					      include	"setup_board.asm"
      1  5a27					      if	!TEST_POSITION
      2  5a27
      3  5a27		       06 19		      .byte.b	WHITE|Q, 25
      4  5a29		       04 18		      .byte.b	WHITE|B, 24
      5  5a2b		       04 1b		      .byte.b	WHITE|B, 27
      6  5a2d		       05 16		      .byte.b	WHITE|R, 22
      7  5a2f		       05 1d		      .byte.b	WHITE|R, 29
      8  5a31		       03 17		      .byte.b	WHITE|N, 23
      9  5a33		       03 1c		      .byte.b	WHITE|N, 28
     10  5a35
     11  5a35		       01 23		      .byte.b	WHITE|WP, 35
     12  5a37		       01 24		      .byte.b	WHITE|WP, 36
     13  5a39		       01 22		      .byte.b	WHITE|WP, 34
     14  5a3b		       01 25		      .byte.b	WHITE|WP, 37
     15  5a3d		       01 21		      .byte.b	WHITE|WP, 33
     16  5a3f		       01 26		      .byte.b	WHITE|WP, 38
     17  5a41		       01 20		      .byte.b	WHITE|WP, 32
     18  5a43		       01 27		      .byte.b	WHITE|WP, 39
     19  5a45
     20  5a45		       07 1a		      .byte.b	WHITE|K, 26
     21  5a47
     22  5a47		       86 5f		      .byte.b	BLACK|Q, 95
     23  5a49		       84 5e		      .byte.b	BLACK|B, 94
     24  5a4b		       84 61		      .byte.b	BLACK|B, 97
     25  5a4d		       85 5c		      .byte.b	BLACK|R, 92
     26  5a4f		       85 63		      .byte.b	BLACK|R, 99
     27  5a51		       83 5d		      .byte.b	BLACK|N, 93
     28  5a53		       83 62		      .byte.b	BLACK|N, 98
     29  5a55
     30  5a55		       82 55		      .byte.b	BLACK|BP, 85
     31  5a57		       82 56		      .byte.b	BLACK|BP, 86
     32  5a59		       82 54		      .byte.b	BLACK|BP, 84
     33  5a5b		       82 57		      .byte.b	BLACK|BP, 87
     34  5a5d		       82 53		      .byte.b	BLACK|BP, 83
     35  5a5f		       82 58		      .byte.b	BLACK|BP, 88
     36  5a61		       82 52		      .byte.b	BLACK|BP, 82
     37  5a63		       82 59		      .byte.b	BLACK|BP, 89
     38  5a65
     39  5a65		       87 60		      .byte.b	BLACK|K, 96
     40  5a67
     41  5a67		       00		      .byte.b	0	;end
     42  5a68
     43  5a68				  -	      else		; test position...
     44  5a68				  -
     45  5a68				  -	      .byte	WHITE|WP, 57
     46  5a68				  -	      .byte	WHITE|WP|FLAG_MOVED, 69
     47  5a68				  -	      .byte	BLACK|BP, 88
     48  5a68				  -	      .byte	BLACK|BP, 86
     49  5a68				  -	      .byte	WHITE|Q, 65
     50  5a68				  -
     51  5a68				  -	      .byte	0	;end
     52  5a68				  -
     53  5a68					      endif
------- FILE ply.asm
    240  5a68
    241  5a68
    242  5a68							;---------------------------------------------------------------------------------------------------
    243  5a68
      0  5a68					      DEF	NewPlyInitialise
      1  5a68				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  5a68				   NewPlyInitialise
      3  5a68				   TEMPORARY_VAR SET	Overlay
      4  5a68				   TEMPORARY_OFFSET SET	0
      5  5a68					      SUBROUTINE
    245  5a68					      SUBROUTINE
    246  5a68
    247  5a68							; This MUST be called at the start of a new ply
    248  5a68							; It initialises the movelist to empty
    249  5a68
    250  5a68		       a2 ff		      ldx	#-1
    251  5a6a		       8e f1 f5 	      stx	moveIndex+RAM_WRITE	; no valid moves
    252  5a6d		       8d f3 f5 	      sta	bestMove+RAM_WRITE
    253  5a70
    254  5a70		       a5 94		      lda	enPassantPawn	; flag/square from last actual move made
    255  5a72		       8d f0 f5 	      sta	enPassantSquare+RAM_WRITE	; used for backtracking, to reset the flag
    256  5a75
    257  5a75							; The evaluation of the current position is a signed 16-bit number
    258  5a75							; +ve is good for the current side.
    259  5a75							; This is used during the alpha-beta search for finding best position
    260  5a75							; Note, this is not the same as the 'Evaluation' which is the current value at ply -- it is the
    261  5a75							; alphabeta best/worst value of the node!!
    262  5a75
    263  5a75		       a9 01		      lda	#<(-INFINITY)
    264  5a77		       8d 71 f4 	      sta	plyValue+RAM_WRITE
    265  5a7a		       a9 80		      lda	#>(-INFINITY)
    266  5a7c		       8d 72 f4 	      sta	plyValue+RAM_WRITE+1
    267  5a7f
    268  5a7f							; The value of the material (signed, 16-bit) is restored to the saved value at the reversion
    269  5a7f							; of a move. It's quicker to restore than to re-sum. So we save the current evaluation at the
    270  5a7f							; start of each new ply.
    271  5a7f
    272  5a7f		       a5 90		      lda	Evaluation
    273  5a81		       8d 73 f4 	      sta	SavedEvaluation+RAM_WRITE
    274  5a84		       a5 91		      lda	Evaluation+1
    275  5a86		       8d 74 f4 	      sta	SavedEvaluation+RAM_WRITE+1
    276  5a89
    277  5a89		       a9 0f		      lda	#15
    278  5a8b		       85 96		      sta	piecelistIndex	; move traversing
    279  5a8d
    280  5a8d		       60		      rts
    281  5a8e
    282  5a8e
    283  5a8e							;---------------------------------------------------------------------------------------------------
    284  5a8e
      0  5a8e					      DEF	GenerateNextPiece
      1  5a8e				   BANK_GenerateNextPiece SET	_CURRENT_BANK
      2  5a8e				   GenerateNextPiece
      3  5a8e				   TEMPORARY_VAR SET	Overlay
      4  5a8e				   TEMPORARY_OFFSET SET	0
      5  5a8e					      SUBROUTINE
    286  5a8e					      SUBROUTINE
    287  5a8e
    288  5a8e		       86 96		      stx	piecelistIndex
    289  5a90		       85 93		      sta	currentSquare
    290  5a92		       20 42 fa 	      jsr	MoveForSinglePiece
    291  5a95
    292  5a95		       c6 96		      dec	piecelistIndex
    293  5a97		       30 1c		      bmi	.exit
    294  5a99
      0  5a99					      DEF	GenerateMovesForNextPiece
      1  5a99				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  5a99				   GenerateMovesForNextPiece
      3  5a99				   TEMPORARY_VAR SET	Overlay
      4  5a99				   TEMPORARY_OFFSET SET	0
      5  5a99					      SUBROUTINE
    296  5a99
    297  5a99		       ad 84 02 	      lda	INTIM
    298  5a9c		       c9 16		      cmp	#22
    299  5a9e		       90 15		      bcc	.exit
    300  5aa0
    301  5aa0		       a5 97		      lda	sideToMove
    302  5aa2		       0a		      asl
    303  5aa3		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    304  5aa5		       69 00		      adc	#0
    305  5aa7		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    306  5aa9
    307  5aa9		       a6 96		      ldx	piecelistIndex
    308  5aab		       bd 10 f0    .next      lda	PieceSquare,x
    309  5aae		       d0 de		      bne	GenerateNextPiece
    310  5ab0		       ca		      dex
    311  5ab1		       10 f8		      bpl	.next
    312  5ab3
    313  5ab3		       86 96		      stx	piecelistIndex
    314  5ab5		       60	   .exit      rts
    315  5ab6
    316  5ab6
    317  5ab6							;---------------------------------------------------------------------------------------------------
    318  5ab6
      0  5ab6					      DEF	FixPieceList
      1  5ab6				   BANK_FixPieceList SET	_CURRENT_BANK
      2  5ab6				   FixPieceList
      3  5ab6				   TEMPORARY_VAR SET	Overlay
      4  5ab6				   TEMPORARY_OFFSET SET	0
      5  5ab6					      SUBROUTINE
    320  5ab6					      SUBROUTINE
    321  5ab6
    322  5ab6							; originX12	      X12 square piece moved from
    323  5ab6							; toX12	      X12 square piece moved to (0 to erase piece from list)
    324  5ab6
    325  5ab6							; It scans the piece list looking for the 'from' square and sets it to the 'to' square
    326  5ab6							; TODO: this is slow and should use a pointer to pieces instead
    327  5ab6
    328  5ab6
    329  5ab6		       a2 0f		      ldx	#15
    330  5ab8		       a5 87		      lda	originX12
    331  5aba		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    332  5abd		       f0 04		      beq	.adjustPiece
    333  5abf		       ca		      dex
    334  5ac0		       10 f8		      bpl	.pieceCheck
    335  5ac2		       60		      rts
    336  5ac3
    337  5ac3		       a5 86	   .adjustPiece lda	toX12
    338  5ac5		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    339  5ac8		       60		      rts
    340  5ac9
    341  5ac9
    342  5ac9							;---------------------------------------------------------------------------------------------------
    343  5ac9
      0  5ac9					      DEF	GenerateAllMoves
      1  5ac9				   BANK_GenerateAllMoves SET	_CURRENT_BANK
      2  5ac9				   GenerateAllMoves
      3  5ac9				   TEMPORARY_VAR SET	Overlay
      4  5ac9				   TEMPORARY_OFFSET SET	0
      5  5ac9					      SUBROUTINE
    345  5ac9					      SUBROUTINE
    346  5ac9		       a9 0f		      lda	#15
    347  5acb		       85 96		      sta	piecelistIndex
    348  5acd		       20 99 f2    .next      jsr	GenerateMovesForNextPiece
    349  5ad0		       a5 96		      lda	piecelistIndex
    350  5ad2		       10 f9		      bpl	.next
    351  5ad4		       60		      rts
    352  5ad5
    353  5ad5							;---------------------------------------------------------------------------------------------------
    354  5ad5
    355  5ad5				  -	      if	0
    356  5ad5				  -	      DEF	alphaBeta
    357  5ad5				  -	      SUBROUTINE
    358  5ad5				  -
    359  5ad5				  -	      rts
    360  5ad5				  -
    361  5ad5				  -	      inc	currentPly
    362  5ad5				  -	      lda	currentPly
    363  5ad5				  -
    364  5ad5				  -	      cmp	#MAX_PLY+RAMBANK_PLY
    365  5ad5				  -	      beq	.bottomOut	; at a leaf node of the search?
    366  5ad5				  -	      sta	SET_BANK_RAM	; self-referential weirdness!
    367  5ad5				  -
    368  5ad5				  -	      lda	sideToMove
    369  5ad5				  -	      eor	#128
    370  5ad5				  -	      sta	sideToMove
    371  5ad5				  -			;todo: NEGEVAL?
    372  5ad5				  -
    373  5ad5				  -	      jsr	NewPlyInitialise
    374  5ad5				  -
    375  5ad5				  -	      lda	currentPly
    376  5ad5				  -	      sta	SET_BANK_RAM
    377  5ad5				  -
    378  5ad5				  -	      lda	#15
    379  5ad5				  -	      sta	piecelistIndex
    380  5ad5				  -iterPieces jsr	GenerateMovesForNextPiece
    381  5ad5				  -	      lda	piecelistIndex
    382  5ad5				  -	      bpl	iterPieces
    383  5ad5				  -
    384  5ad5				  -			; Perform a recursive search
    385  5ad5				  -			; simulate alpha-beta cull to just 7 moves per node
    386  5ad5				  -
    387  5ad5				  -	      REPEAT	7
    388  5ad5				  -			;jsr PhysicallyMovePiece
    389  5ad5				  -			;jsr FinaliseMove
    390  5ad5				  -	      jsr	alphaBeta
    391  5ad5				  -	      REPEND
    392  5ad5				  -
    393  5ad5				  -.bottomOut
    394  5ad5				  -
    395  5ad5				  -			; TODO: evaluate board position
    396  5ad5				  -			; reverse move to previous position
    397  5ad5				  -			; check the results, update scores and move pointers
    398  5ad5				  -			; and return vars to expected
    399  5ad5				  -
    400  5ad5				  -	      lda	sideToMove
    401  5ad5				  -	      eor	#128
    402  5ad5				  -	      sta	sideToMove
    403  5ad5				  -			;todo: negeval
    404  5ad5				  -
    405  5ad5				  -	      dec	currentPly
    406  5ad5				  -	      lda	currentPly
    407  5ad5				  -	      sta	SET_BANK_RAM	; self-referential weirdness!
    408  5ad5				  -
    409  5ad5				  -	      rts
    410  5ad5					      endif
    411  5ad5
    412  5ad5
    413  5ad5							;---------------------------------------------------------------------------------------------------
    414  5ad5
      0  5ad5					      DEF	RevertMove
      1  5ad5				   BANK_RevertMove SET	_CURRENT_BANK
      2  5ad5				   RevertMove
      3  5ad5				   TEMPORARY_VAR SET	Overlay
      4  5ad5				   TEMPORARY_OFFSET SET	0
      5  5ad5					      SUBROUTINE
    416  5ad5					      SUBROUTINE
    417  5ad5
    418  5ad5							; backtrack after a move, restoring things to the way they were
    419  5ad5
    420  5ad5
    421  5ad5							; piecelist
    422  5ad5							; piece1, piece2
    423  5ad5							; board
    424  5ad5							; enpassantpawn
    425  5ad5							; materialvalue
    426  5ad5							; positionvalue
    427  5ad5							; score?
    428  5ad5
    429  5ad5
    430  5ad5							; restore the board evaluation to what it was at the start of this ply
    431  5ad5
    432  5ad5		       ad 73 f0 	      lda	SavedEvaluation
    433  5ad8		       85 90		      sta	Evaluation
    434  5ada		       ad 74 f0 	      lda	SavedEvaluation+1
    435  5add		       85 91		      sta	Evaluation+1
    436  5adf
    437  5adf		       60		      rts
    438  5ae0
    439  5ae0
    440  5ae0							;---------------------------------------------------------------------------------------------------
    441  5ae0
      0  5ae0					      DEF	MoveViaListAtPly
      1  5ae0				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  5ae0				   MoveViaListAtPly
      3  5ae0				   TEMPORARY_VAR SET	Overlay
      4  5ae0				   TEMPORARY_OFFSET SET	0
      5  5ae0					      SUBROUTINE
    443  5ae0					      SUBROUTINE
    444  5ae0
    445  5ae0		       ac f1 f1 	      ldy	moveIndex
    446  5ae3		       30 27		      bmi	.exit	; no valid moves (stalemate if not in check)
    447  5ae5
      0  5ae5					      NEXT_RANDOM
      1  5ae5		       a5 81		      lda	rnd
      2  5ae7		       4a		      lsr
      3  5ae8		       90 02		      bcc	.skipEOR
      4  5aea		       49 fe		      eor	#RND_EOR_VAL
      5  5aec		       85 81	   .skipEOR   sta	rnd
    449  5aee
    450  5aee							; int(random * # moves) --> a random move #
    451  5aee
    452  5aee		       a9 00		      lda	#0
    453  5af0		       aa		      tax		; selected move
    454  5af1		       18		      clc
    455  5af2		       65 81	   .mulxcc    adc	rnd
    456  5af4		       90 02		      bcc	.mulx
    457  5af6		       18		      clc
    458  5af7		       e8		      inx
    459  5af8		       88	   .mulx      dey
    460  5af9		       10 f7		      bpl	.mulxcc
    461  5afb
    462  5afb		       bd 75 f0 	      lda	MoveFrom,x
    463  5afe		       85 85		      sta	fromX12
    464  5b00		       85 87		      sta	originX12
    465  5b02
    466  5b02		       bd 00 f1 	      lda	MoveTo,x
    467  5b05		       85 86		      sta	toX12
    468  5b07
    469  5b07		       bd 78 f1 	      lda	MovePiece,x
    470  5b0a		       85 98		      sta	fromPiece
    471  5b0c
    472  5b0c		       60	   .exit      rts
    473  5b0d
    474  5b0d
    475  5b0d							;---------------------------------------------------------------------------------------------------
    476  5b0d
      0  5b0d					      DEF	CheckMoveListFromSquare
      1  5b0d				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  5b0d				   CheckMoveListFromSquare
      3  5b0d				   TEMPORARY_VAR SET	Overlay
      4  5b0d				   TEMPORARY_OFFSET SET	0
      5  5b0d					      SUBROUTINE
    478  5b0d					      SUBROUTINE
    479  5b0d
    480  5b0d							; X12 in A
    481  5b0d							; y = -1 on return if NOT FOUND
    482  5b0d
    483  5b0d		       ac f1 f1 	      ldy	moveIndex
    484  5b10		       30 08		      bmi	.exit
    485  5b12
    486  5b12		       d9 75 f0    .scan      cmp	MoveFrom,y
    487  5b15		       f0 04		      beq	.scanned
    488  5b17		       88		      dey
    489  5b18		       10 f8		      bpl	.scan
    490  5b1a		       60	   .exit      rts
    491  5b1b
    492  5b1b		       b9 78 f1    .scanned   lda	MovePiece,y
    493  5b1e		       85 98		      sta	fromPiece
    494  5b20		       60		      rts
    495  5b21
    496  5b21
    497  5b21							;---------------------------------------------------------------------------------------------------
    498  5b21
      0  5b21					      DEF	IsSquareUnderAttack
      1  5b21				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  5b21				   IsSquareUnderAttack
      3  5b21				   TEMPORARY_VAR SET	Overlay
      4  5b21				   TEMPORARY_OFFSET SET	0
      5  5b21					      SUBROUTINE
    500  5b21					      SUBROUTINE
    501  5b21
    502  5b21							; Scan the movelist to find if given square is under attack
    503  5b21
    504  5b21							; Pass:	 A = X12 square to check
    505  5b21							; Return:	 CC = no
    506  5b21
    507  5b21		       ac f1 f1 	      ldy	moveIndex
    508  5b24		       30 08		      bmi	.exit
    509  5b26		       d9 00 f1    .scan      cmp	MoveTo,y
    510  5b29		       f0 04		      beq	.found	; YES!
    511  5b2b		       88		      dey
    512  5b2c		       10 f8		      bpl	.scan
    513  5b2e
    514  5b2e		       18	   .exit      clc
    515  5b2f		       60	   .found     rts
    516  5b30
    517  5b30
    518  5b30							;---------------------------------------------------------------------------------------------------
    519  5b30
      0  5b30					      DEF	GetKingSquare
      1  5b30				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  5b30				   GetKingSquare
      3  5b30				   TEMPORARY_VAR SET	Overlay
      4  5b30				   TEMPORARY_OFFSET SET	0
      5  5b30					      SUBROUTINE
    521  5b30					      SUBROUTINE
    522  5b30
    523  5b30							; Return:	 a = square king is on (or -1)
    524  5b30							;		 x = piece type
    525  5b30
    526  5b30		       ac 70 f0 	      ldy	PieceListPtr
    527  5b33		       30 0c		      bmi	.exit	; no pieces?!
    528  5b35		       b9 20 f0    .find      lda	PieceType,y
    529  5b38		       29 0f		      and	#PIECE_MASK
    530  5b3a		       c9 07		      cmp	#KING
    531  5b3c		       f0 06		      beq	.found
    532  5b3e		       88		      dey
    533  5b3f		       10 f4		      bpl	.find
    534  5b41
    535  5b41		       a9 ff	   .exit      lda	#-1	; not found/no king square
    536  5b43		       60		      rts
    537  5b44
    538  5b44		       b9 10 f0    .found     lda	PieceSquare,y
    539  5b47		       be 20 f0 	      ldx	PieceType,y
    540  5b4a		       60		      rts
    541  5b4b
    542  5b4b
    543  5b4b							;---------------------------------------------------------------------------------------------------
    544  5b4b
      0  5b4b					      DEF	GetPieceGivenFromToSquares
      1  5b4b				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  5b4b				   GetPieceGivenFromToSquares
      3  5b4b				   TEMPORARY_VAR SET	Overlay
      4  5b4b				   TEMPORARY_OFFSET SET	0
      5  5b4b					      SUBROUTINE
    546  5b4b					      SUBROUTINE
    547  5b4b
    548  5b4b							; returns piece in A+fromPiece
    549  5b4b							; or Y=-1 if not found
    550  5b4b
    551  5b4b							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    552  5b4b							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    553  5b4b							; This fixes the move with/without castle flag
    554  5b4b
    555  5b4b		       ac f1 f1 	      ldy	moveIndex
    556  5b4e		       30 11		      bmi	.fail	; shouldn't happen
    557  5b50		       a5 85	   .scan      lda	fromX12
    558  5b52		       d9 75 f0 	      cmp	MoveFrom,y
    559  5b55		       d0 07		      bne	.next
    560  5b57		       a5 86		      lda	toX12
    561  5b59		       d9 00 f1 	      cmp	MoveTo,y
    562  5b5c		       f0 04		      beq	.found
    563  5b5e		       88	   .next      dey
    564  5b5f		       10 ef		      bpl	.scan
    565  5b61		       60	   .fail      rts
    566  5b62
    567  5b62		       b9 78 f1    .found     lda	MovePiece,y
    568  5b65		       85 98		      sta	fromPiece
    569  5b67		       60		      rts
    570  5b68
    571  5b68
    572  5b68
    573  5b68							;---------------------------------------------------------------------------------------------------
    574  5b68
    575  5b68				  -	      if	0
    576  5b68				  -	      DEF	CheckMoveListToSquare
    577  5b68				  -	      SUBROUTINE
    578  5b68				  -
    579  5b68				  -			; y = -1 on return if NOT FOUND
    580  5b68				  -
    581  5b68				  -	      ldy	moveIndex
    582  5b68				  -	      bmi	.exit
    583  5b68				  -.scan      lda	toX12
    584  5b68				  -	      cmp	MoveTo,y
    585  5b68				  -	      bne	.xscanned
    586  5b68				  -	      lda	MoveFrom,y
    587  5b68				  -	      cmp	fromX12
    588  5b68				  -	      beq	.exit
    589  5b68				  -.xscanned  dey
    590  5b68				  -	      bpl	.scan
    591  5b68				  -
    592  5b68				  -.exit      rts
    593  5b68					      endif
    594  5b68
    595  5b68							;---------------------------------------------------------------------------------------------------
    596  5b68
      0  5b68					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  5b68
      2  5b68
      3  5b68		       03 68	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $368 , FREE= $98
      4  5b68					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  5b68				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  5b68				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  5b68				  -	      ERR
      8  5b68					      endif
    598  5b68
    599  5b68							;---------------------------------------------------------------------------------------------------
    600  5b68
    601  5b68							; There is space here (1K) for use as ROM
    602  5b68							; but NOT when the above bank is switched in as RAM, of course!
    603  5b68
    604  5b68
    605  5b68
    606  5b68
    607  5b68							;---------------------------------------------------------------------------------------------------
    608  5b68							; EOF
------- FILE ./chess.asm
------- FILE BANK_EVAL.asm LEVEL 2 PASS 2
      0  5b68					      include	"BANK_EVAL.asm"
      0  5b68					      NEWBANK	EVAL
      1  632d ????				      SEG	EVAL
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   EVAL       SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	EVAL
      2  6000
      3  6000
      4  6000							; see https://www.chessprogramming.org/Simplified_Evaluation_Function
      5  6000
      6  6000
      7  6000		       00 64	   VALUE_P    =	100
      8  6000		       01 40	   VALUE_N    =	320
      9  6000		       01 4a	   VALUE_B    =	330
     10  6000		       01 f4	   VALUE_R    =	500
     11  6000		       03 84	   VALUE_Q    =	900
     12  6000		       4e 20	   VALUE_K    =	20000
     13  6000
     14  6000
     15  6000					      MAC	vequ
     16  6000				   VALUE_{1}  =	{2}
     17  6000					      ENDM
     18  6000
     19  6000					      MAC	lobyte
     20  6000					      .byte	<{2}
     21  6000					      ENDM
     22  6000
     23  6000					      MAC	hibyte
     24  6000					      .byte	>{2}
     25  6000					      ENDM
     26  6000
     27  6000
     28  6000					      MAC	valuetable
     29  6000					      {1}	BLANK, 0
     30  6000					      {1}	PAWN, 100	; white
     31  6000					      {1}	PAWN, 100	; black
     32  6000					      {1}	KNIGHT, 320
     33  6000					      {1}	BISHOP, 330
     34  6000					      {1}	ROOK, 500
     35  6000					      {1}	QUEEN, 900
     36  6000					      {1}	KING, 20000
     37  6000					      ENDM
     38  6000
     39  6000
      0  6000					      VALUETABLE	VEQU
      0  6000					      VEQU	BLANK, 0
      1  6000		       00 00	   VALUE_BLANK =	0
      0  6000					      VEQU	PAWN, 100
      1  6000		       00 64	   VALUE_PAWN =	100
      0  6000					      VEQU	PAWN, 100
      1  6000		       00 64	   VALUE_PAWN =	100
      0  6000					      VEQU	KNIGHT, 320
      1  6000		       01 40	   VALUE_KNIGHT =	320
      0  6000					      VEQU	BISHOP, 330
      1  6000		       01 4a	   VALUE_BISHOP =	330
      0  6000					      VEQU	ROOK, 500
      1  6000		       01 f4	   VALUE_ROOK =	500
      0  6000					      VEQU	QUEEN, 900
      1  6000		       03 84	   VALUE_QUEEN =	900
      0  6000					      VEQU	KING, 20000
      1  6000		       4e 20	   VALUE_KING =	20000
     41  6000
      0  6000					      DEF	PieceValueLO
      1  6000				   BANK_PieceValueLO SET	_CURRENT_BANK
      2  6000				   PieceValueLO
      3  6000				   TEMPORARY_VAR SET	Overlay
      4  6000				   TEMPORARY_OFFSET SET	0
      5  6000					      SUBROUTINE
      0  6000					      VALUETABLE	LOBYTE
      0  6000					      LOBYTE	BLANK, 0
      1  6000		       00		      .byte.b	<0
      0  6001					      LOBYTE	PAWN, 100
      1  6001		       64		      .byte.b	<100
      0  6002					      LOBYTE	PAWN, 100
      1  6002		       64		      .byte.b	<100
      0  6003					      LOBYTE	KNIGHT, 320
      1  6003		       40		      .byte.b	<320
      0  6004					      LOBYTE	BISHOP, 330
      1  6004		       4a		      .byte.b	<330
      0  6005					      LOBYTE	ROOK, 500
      1  6005		       f4		      .byte.b	<500
      0  6006					      LOBYTE	QUEEN, 900
      1  6006		       84		      .byte.b	<900
      0  6007					      LOBYTE	KING, 20000
      1  6007		       20		      .byte.b	<20000
     44  6008
      0  6008					      DEF	PieceValueHI
      1  6008				   BANK_PieceValueHI SET	_CURRENT_BANK
      2  6008				   PieceValueHI
      3  6008				   TEMPORARY_VAR SET	Overlay
      4  6008				   TEMPORARY_OFFSET SET	0
      5  6008					      SUBROUTINE
      0  6008					      VALUETABLE	HIBYTE
      0  6008					      HIBYTE	BLANK, 0
      1  6008		       00		      .byte.b	>0
      0  6009					      HIBYTE	PAWN, 100
      1  6009		       00		      .byte.b	>100
      0  600a					      HIBYTE	PAWN, 100
      1  600a		       00		      .byte.b	>100
      0  600b					      HIBYTE	KNIGHT, 320
      1  600b		       01		      .byte.b	>320
      0  600c					      HIBYTE	BISHOP, 330
      1  600c		       01		      .byte.b	>330
      0  600d					      HIBYTE	ROOK, 500
      1  600d		       01		      .byte.b	>500
      0  600e					      HIBYTE	QUEEN, 900
      1  600e		       03		      .byte.b	>900
      0  600f					      HIBYTE	KING, 20000
      1  600f		       4e		      .byte.b	>20000
     47  6010
     48  6010
     49  6010							;---------------------------------------------------------------------------------------------------
     50  6010
      0  6010					      DEF	AddPieceMaterialValue
      1  6010				   BANK_AddPieceMaterialValue SET	_CURRENT_BANK
      2  6010				   AddPieceMaterialValue
      3  6010				   TEMPORARY_VAR SET	Overlay
      4  6010				   TEMPORARY_OFFSET SET	0
      5  6010					      SUBROUTINE
     52  6010					      SUBROUTINE
     53  6010
     54  6010							; Adjust the material score based on the piece
     55  6010							; y = piece type
     56  6010
     57  6010		       18		      clc
     58  6011		       b9 00 f0 	      lda	PieceValueLO,y
     59  6014		       65 90		      adc	Evaluation
     60  6016		       85 90		      sta	Evaluation
     61  6018		       b9 08 f0 	      lda	PieceValueHI,y
     62  601b		       65 91		      adc	Evaluation+1
     63  601d		       85 91		      sta	Evaluation+1
     64  601f		       60		      rts
     65  6020
     66  6020
     67  6020							;---------------------------------------------------------------------------------------------------
     68  6020
      0  6020					      DEF	AddPiecePositionValue
      1  6020				   BANK_AddPiecePositionValue SET	_CURRENT_BANK
      2  6020				   AddPiecePositionValue
      3  6020				   TEMPORARY_VAR SET	Overlay
      4  6020				   TEMPORARY_OFFSET SET	0
      5  6020					      SUBROUTINE
     70  6020					      SUBROUTINE
     71  6020
      0  6020					      VAR	__pval, 2
      1  6020		       00 a0	   __pval     =	TEMPORARY_VAR
      2  6020				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  6020
      4  6020				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  6020				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  6020				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  6020					      ENDIF
      8  6020				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  6020				  -	      ECHO	"Temporary Variable", __pval, "overflow!"
     10  6020				  -	      ERR
     11  6020					      ENDIF
     12  6020					      LIST	ON
     73  6020
     74  6020
     75  6020							; adds value of square piece is on to the evaluation
     76  6020							; note to do the subtraction as -( -x + val) == x - val
     77  6020
     78  6020							; y = square
     79  6020							; a = piece type (+flags)
     80  6020
     81  6020
     82  6020
     83  6020		       c9 80		      cmp	#128	; black = CS
     84  6022		       29 0f		      and	#PIECE_MASK
     85  6024		       aa		      tax
     86  6025
     87  6025				  -	      IF	ASSERTS
     88  6025				  -.kill      beq	.kill	; can't have a 0-piece. something is wrong.
     89  6025					      ENDIF
     90  6025
     91  6025							; black pieces flip rows so we can use the same eval tables
     92  6025
     93  6025		       98		      tya
     94  6026		       90 04		      bcc	.white
     95  6028		       b9 49 f0 	      lda	FlipSquareIndex,y
     96  602b		       18		      clc
     97  602c				   .white
     98  602c		       7d ad f0 	      adc	PosValVecLO,x
     99  602f		       85 a0		      sta	__pval
    100  6031		       bd b5 f0 	      lda	PosValVecHI,x
    101  6034		       69 00		      adc	#0
    102  6036		       85 a1		      sta	__pval+1
    103  6038
    104  6038		       a0 00		      ldy	#0
    105  603a		       b1 a0		      lda	(__pval),y
    106  603c		       10 01		      bpl	.pos
    107  603e		       88		      dey		; odd double-usage of y - now it's hi byte
    108  603f				   .pos
    109  603f
    110  603f							;clc
    111  603f		       65 90		      adc	Evaluation
    112  6041		       85 90		      sta	Evaluation
    113  6043		       98		      tya
    114  6044		       65 91		      adc	Evaluation+1
    115  6046		       85 91		      sta	Evaluation+1
    116  6048		       60		      rts
    117  6049
    118  6049
    119  6049							;---------------------------------------------------------------------------------------------------
    120  6049
      0  6049					      ALLOCATE	FlipSquareIndex, 100
      0  6049					      OPTIONAL_PAGEBREAK	"Table", 100
     12  6049					      LIST	ON
      0  6049					      DEF	FlipSquareIndex
      1  6049				   BANK_FlipSquareIndex SET	_CURRENT_BANK
      2  6049				   FlipSquareIndex
      3  6049				   TEMPORARY_VAR SET	Overlay
      4  6049				   TEMPORARY_OFFSET SET	0
      5  6049					      SUBROUTINE
    122  6049
    123  6049		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0
    124  6053		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0
    125  605d
    126  605d				   .SQBASE    SET	90
    127  605d					      REPEAT	8
    128  605d		       00 00		      .byte.b	0,0
    129  605d				   .SQX       SET	2
    130  605f					      REPEAT	8
    131  605f		       5c		      .byte.b	(.SQBASE+.SQX)
    132  605f				   .SQX       SET	.SQX + 1
    130  605f					      REPEND
    131  6060		       5d		      .byte.b	(.SQBASE+.SQX)
    132  6060				   .SQX       SET	.SQX + 1
    130  6060					      REPEND
    131  6061		       5e		      .byte.b	(.SQBASE+.SQX)
    132  6061				   .SQX       SET	.SQX + 1
    130  6061					      REPEND
    131  6062		       5f		      .byte.b	(.SQBASE+.SQX)
    132  6062				   .SQX       SET	.SQX + 1
    130  6062					      REPEND
    131  6063		       60		      .byte.b	(.SQBASE+.SQX)
    132  6063				   .SQX       SET	.SQX + 1
    130  6063					      REPEND
    131  6064		       61		      .byte.b	(.SQBASE+.SQX)
    132  6064				   .SQX       SET	.SQX + 1
    130  6064					      REPEND
    131  6065		       62		      .byte.b	(.SQBASE+.SQX)
    132  6065				   .SQX       SET	.SQX + 1
    130  6065					      REPEND
    131  6066		       63		      .byte.b	(.SQBASE+.SQX)
    132  6066				   .SQX       SET	.SQX + 1
    133  6067					      REPEND
    134  6067				   .SQBASE    SET	.SQBASE - 10
    127  6067					      REPEND
    128  6067		       00 00		      .byte.b	0,0
    129  6067				   .SQX       SET	2
    130  6069					      REPEAT	8
    131  6069		       52		      .byte.b	(.SQBASE+.SQX)
    132  6069				   .SQX       SET	.SQX + 1
    130  6069					      REPEND
    131  606a		       53		      .byte.b	(.SQBASE+.SQX)
    132  606a				   .SQX       SET	.SQX + 1
    130  606a					      REPEND
    131  606b		       54		      .byte.b	(.SQBASE+.SQX)
    132  606b				   .SQX       SET	.SQX + 1
    130  606b					      REPEND
    131  606c		       55		      .byte.b	(.SQBASE+.SQX)
    132  606c				   .SQX       SET	.SQX + 1
    130  606c					      REPEND
    131  606d		       56		      .byte.b	(.SQBASE+.SQX)
    132  606d				   .SQX       SET	.SQX + 1
    130  606d					      REPEND
    131  606e		       57		      .byte.b	(.SQBASE+.SQX)
    132  606e				   .SQX       SET	.SQX + 1
    130  606e					      REPEND
    131  606f		       58		      .byte.b	(.SQBASE+.SQX)
    132  606f				   .SQX       SET	.SQX + 1
    130  606f					      REPEND
    131  6070		       59		      .byte.b	(.SQBASE+.SQX)
    132  6070				   .SQX       SET	.SQX + 1
    133  6071					      REPEND
    134  6071				   .SQBASE    SET	.SQBASE - 10
    127  6071					      REPEND
    128  6071		       00 00		      .byte.b	0,0
    129  6071				   .SQX       SET	2
    130  6073					      REPEAT	8
    131  6073		       48		      .byte.b	(.SQBASE+.SQX)
    132  6073				   .SQX       SET	.SQX + 1
    130  6073					      REPEND
    131  6074		       49		      .byte.b	(.SQBASE+.SQX)
    132  6074				   .SQX       SET	.SQX + 1
    130  6074					      REPEND
    131  6075		       4a		      .byte.b	(.SQBASE+.SQX)
    132  6075				   .SQX       SET	.SQX + 1
    130  6075					      REPEND
    131  6076		       4b		      .byte.b	(.SQBASE+.SQX)
    132  6076				   .SQX       SET	.SQX + 1
    130  6076					      REPEND
    131  6077		       4c		      .byte.b	(.SQBASE+.SQX)
    132  6077				   .SQX       SET	.SQX + 1
    130  6077					      REPEND
    131  6078		       4d		      .byte.b	(.SQBASE+.SQX)
    132  6078				   .SQX       SET	.SQX + 1
    130  6078					      REPEND
    131  6079		       4e		      .byte.b	(.SQBASE+.SQX)
    132  6079				   .SQX       SET	.SQX + 1
    130  6079					      REPEND
    131  607a		       4f		      .byte.b	(.SQBASE+.SQX)
    132  607a				   .SQX       SET	.SQX + 1
    133  607b					      REPEND
    134  607b				   .SQBASE    SET	.SQBASE - 10
    127  607b					      REPEND
    128  607b		       00 00		      .byte.b	0,0
    129  607b				   .SQX       SET	2
    130  607d					      REPEAT	8
    131  607d		       3e		      .byte.b	(.SQBASE+.SQX)
    132  607d				   .SQX       SET	.SQX + 1
    130  607d					      REPEND
    131  607e		       3f		      .byte.b	(.SQBASE+.SQX)
    132  607e				   .SQX       SET	.SQX + 1
    130  607e					      REPEND
    131  607f		       40		      .byte.b	(.SQBASE+.SQX)
    132  607f				   .SQX       SET	.SQX + 1
    130  607f					      REPEND
    131  6080		       41		      .byte.b	(.SQBASE+.SQX)
    132  6080				   .SQX       SET	.SQX + 1
    130  6080					      REPEND
    131  6081		       42		      .byte.b	(.SQBASE+.SQX)
    132  6081				   .SQX       SET	.SQX + 1
    130  6081					      REPEND
    131  6082		       43		      .byte.b	(.SQBASE+.SQX)
    132  6082				   .SQX       SET	.SQX + 1
    130  6082					      REPEND
    131  6083		       44		      .byte.b	(.SQBASE+.SQX)
    132  6083				   .SQX       SET	.SQX + 1
    130  6083					      REPEND
    131  6084		       45		      .byte.b	(.SQBASE+.SQX)
    132  6084				   .SQX       SET	.SQX + 1
    133  6085					      REPEND
    134  6085				   .SQBASE    SET	.SQBASE - 10
    127  6085					      REPEND
    128  6085		       00 00		      .byte.b	0,0
    129  6085				   .SQX       SET	2
    130  6087					      REPEAT	8
    131  6087		       34		      .byte.b	(.SQBASE+.SQX)
    132  6087				   .SQX       SET	.SQX + 1
    130  6087					      REPEND
    131  6088		       35		      .byte.b	(.SQBASE+.SQX)
    132  6088				   .SQX       SET	.SQX + 1
    130  6088					      REPEND
    131  6089		       36		      .byte.b	(.SQBASE+.SQX)
    132  6089				   .SQX       SET	.SQX + 1
    130  6089					      REPEND
    131  608a		       37		      .byte.b	(.SQBASE+.SQX)
    132  608a				   .SQX       SET	.SQX + 1
    130  608a					      REPEND
    131  608b		       38		      .byte.b	(.SQBASE+.SQX)
    132  608b				   .SQX       SET	.SQX + 1
    130  608b					      REPEND
    131  608c		       39		      .byte.b	(.SQBASE+.SQX)
    132  608c				   .SQX       SET	.SQX + 1
    130  608c					      REPEND
    131  608d		       3a		      .byte.b	(.SQBASE+.SQX)
    132  608d				   .SQX       SET	.SQX + 1
    130  608d					      REPEND
    131  608e		       3b		      .byte.b	(.SQBASE+.SQX)
    132  608e				   .SQX       SET	.SQX + 1
    133  608f					      REPEND
    134  608f				   .SQBASE    SET	.SQBASE - 10
    127  608f					      REPEND
    128  608f		       00 00		      .byte.b	0,0
    129  608f				   .SQX       SET	2
    130  6091					      REPEAT	8
    131  6091		       2a		      .byte.b	(.SQBASE+.SQX)
    132  6091				   .SQX       SET	.SQX + 1
    130  6091					      REPEND
    131  6092		       2b		      .byte.b	(.SQBASE+.SQX)
    132  6092				   .SQX       SET	.SQX + 1
    130  6092					      REPEND
    131  6093		       2c		      .byte.b	(.SQBASE+.SQX)
    132  6093				   .SQX       SET	.SQX + 1
    130  6093					      REPEND
    131  6094		       2d		      .byte.b	(.SQBASE+.SQX)
    132  6094				   .SQX       SET	.SQX + 1
    130  6094					      REPEND
    131  6095		       2e		      .byte.b	(.SQBASE+.SQX)
    132  6095				   .SQX       SET	.SQX + 1
    130  6095					      REPEND
    131  6096		       2f		      .byte.b	(.SQBASE+.SQX)
    132  6096				   .SQX       SET	.SQX + 1
    130  6096					      REPEND
    131  6097		       30		      .byte.b	(.SQBASE+.SQX)
    132  6097				   .SQX       SET	.SQX + 1
    130  6097					      REPEND
    131  6098		       31		      .byte.b	(.SQBASE+.SQX)
    132  6098				   .SQX       SET	.SQX + 1
    133  6099					      REPEND
    134  6099				   .SQBASE    SET	.SQBASE - 10
    127  6099					      REPEND
    128  6099		       00 00		      .byte.b	0,0
    129  6099				   .SQX       SET	2
    130  609b					      REPEAT	8
    131  609b		       20		      .byte.b	(.SQBASE+.SQX)
    132  609b				   .SQX       SET	.SQX + 1
    130  609b					      REPEND
    131  609c		       21		      .byte.b	(.SQBASE+.SQX)
    132  609c				   .SQX       SET	.SQX + 1
    130  609c					      REPEND
    131  609d		       22		      .byte.b	(.SQBASE+.SQX)
    132  609d				   .SQX       SET	.SQX + 1
    130  609d					      REPEND
    131  609e		       23		      .byte.b	(.SQBASE+.SQX)
    132  609e				   .SQX       SET	.SQX + 1
    130  609e					      REPEND
    131  609f		       24		      .byte.b	(.SQBASE+.SQX)
    132  609f				   .SQX       SET	.SQX + 1
    130  609f					      REPEND
    131  60a0		       25		      .byte.b	(.SQBASE+.SQX)
    132  60a0				   .SQX       SET	.SQX + 1
    130  60a0					      REPEND
    131  60a1		       26		      .byte.b	(.SQBASE+.SQX)
    132  60a1				   .SQX       SET	.SQX + 1
    130  60a1					      REPEND
    131  60a2		       27		      .byte.b	(.SQBASE+.SQX)
    132  60a2				   .SQX       SET	.SQX + 1
    133  60a3					      REPEND
    134  60a3				   .SQBASE    SET	.SQBASE - 10
    127  60a3					      REPEND
    128  60a3		       00 00		      .byte.b	0,0
    129  60a3				   .SQX       SET	2
    130  60a5					      REPEAT	8
    131  60a5		       16		      .byte.b	(.SQBASE+.SQX)
    132  60a5				   .SQX       SET	.SQX + 1
    130  60a5					      REPEND
    131  60a6		       17		      .byte.b	(.SQBASE+.SQX)
    132  60a6				   .SQX       SET	.SQX + 1
    130  60a6					      REPEND
    131  60a7		       18		      .byte.b	(.SQBASE+.SQX)
    132  60a7				   .SQX       SET	.SQX + 1
    130  60a7					      REPEND
    131  60a8		       19		      .byte.b	(.SQBASE+.SQX)
    132  60a8				   .SQX       SET	.SQX + 1
    130  60a8					      REPEND
    131  60a9		       1a		      .byte.b	(.SQBASE+.SQX)
    132  60a9				   .SQX       SET	.SQX + 1
    130  60a9					      REPEND
    131  60aa		       1b		      .byte.b	(.SQBASE+.SQX)
    132  60aa				   .SQX       SET	.SQX + 1
    130  60aa					      REPEND
    131  60ab		       1c		      .byte.b	(.SQBASE+.SQX)
    132  60ab				   .SQX       SET	.SQX + 1
    130  60ab					      REPEND
    131  60ac		       1d		      .byte.b	(.SQBASE+.SQX)
    132  60ac				   .SQX       SET	.SQX + 1
    133  60ad					      REPEND
    134  60ad				   .SQBASE    SET	.SQBASE - 10
    135  60ad					      REPEND
    136  60ad
    137  60ad
    138  60ad							;---------------------------------------------------------------------------------------------------
    139  60ad							; Vectors to the position value tables for each piece
    140  60ad
    141  60ad					      MAC	posval
    142  60ad					      .byte	0
    143  60ad					      .byte	{1}(PositionalValue_PAWN - 22)
    144  60ad					      .byte	{1}(PositionalValue_PAWN - 22)
    145  60ad					      .byte	{1}(PositionalValue_KNIGHT - 22)
    146  60ad					      .byte	{1}(PositionalValue_BISHOP - 22)
    147  60ad					      .byte	{1}(PositionalValue_ROOK - 22)
    148  60ad					      .byte	{1}(PositionalValue_QUEEN - 22)
    149  60ad					      .byte	{1}(PositionalValue_KING_MIDGAME - 22)
    150  60ad					      ENDM
    151  60ad
      0  60ad					      ALLOCATE	PosValVecLO, 8
      0  60ad					      OPTIONAL_PAGEBREAK	"Table", 8
     12  60ad					      LIST	ON
      0  60ad					      DEF	PosValVecLO
      1  60ad				   BANK_PosValVecLO SET	_CURRENT_BANK
      2  60ad				   PosValVecLO
      3  60ad				   TEMPORARY_VAR SET	Overlay
      4  60ad				   TEMPORARY_OFFSET SET	0
      5  60ad					      SUBROUTINE
      0  60ad					      POSVAL	<
      1  60ad		       00		      .byte.b	0
      2  60ae		       a7		      .byte.b	<(PositionalValue_PAWN - 22)
      3  60af		       a7		      .byte.b	<(PositionalValue_PAWN - 22)
      4  60b0		       43		      .byte.b	<(PositionalValue_KNIGHT - 22)
      5  60b1		       91		      .byte.b	<(PositionalValue_BISHOP - 22)
      6  60b2		       df		      .byte.b	<(PositionalValue_ROOK - 22)
      7  60b3		       2d		      .byte.b	<(PositionalValue_QUEEN - 22)
      8  60b4		       7b		      .byte.b	<(PositionalValue_KING_MIDGAME - 22)
      0  60b5					      ALLOCATE	PosValVecHI, 8
      0  60b5					      OPTIONAL_PAGEBREAK	"Table", 8
     12  60b5					      LIST	ON
      0  60b5					      DEF	PosValVecHI
      1  60b5				   BANK_PosValVecHI SET	_CURRENT_BANK
      2  60b5				   PosValVecHI
      3  60b5				   TEMPORARY_VAR SET	Overlay
      4  60b5				   TEMPORARY_OFFSET SET	0
      5  60b5					      SUBROUTINE
      0  60b5					      POSVAL	>
      1  60b5		       00		      .byte.b	0
      2  60b6		       f0		      .byte.b	>(PositionalValue_PAWN - 22)
      3  60b7		       f0		      .byte.b	>(PositionalValue_PAWN - 22)
      4  60b8		       f1		      .byte.b	>(PositionalValue_KNIGHT - 22)
      5  60b9		       f1		      .byte.b	>(PositionalValue_BISHOP - 22)
      6  60ba		       f1		      .byte.b	>(PositionalValue_ROOK - 22)
      7  60bb		       f2		      .byte.b	>(PositionalValue_QUEEN - 22)
      8  60bc		       f2		      .byte.b	>(PositionalValue_KING_MIDGAME - 22)
    156  60bd
    157  60bd
    158  60bd							;---------------------------------------------------------------------------------------------------
    159  60bd
    160  60bd				   PositionalValue_PAWN
    161  60bd
    162  60bd		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0, 0	; 20-29
    163  60c5		       00 00 05 0a*	      .byte.b	0,0, 5, 10, 10,-20,-20, 10, 10, 5	; 30-
    164  60cf		       00 00 05 fb*	      .byte.b	0,0, 5, -5,-10, 0, 0,-10, -5, 5	; 40-
    165  60d9		       00 00 00 00*	      .byte.b	0,0, 0, 0, 0, 20, 20, 0, 0, 0	; 50-
    166  60e3		       00 00 05 05*	      .byte.b	0,0, 5, 5, 10, 25, 25, 10, 5, 5	; 60-
    167  60ed		       00 00 0a 0a*	      .byte.b	0,0, 10, 10, 20, 30, 30, 20, 10, 10	; 70-
    168  60f7		       00 00 32 32*	      .byte.b	0,0, 50, 50, 50, 50, 50, 50, 50, 50	; 80-
    169  6101		       00 00 00 00*	      .byte.b	0,0, 0, 0, 0, 0, 0, 0, 0, 0	; 90-
    170  610b
    171  610b				   PositionalValue_PAWN_BLACK
    172  610b
    173  610b		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 0, 0, 0, 0	; 20-29
    174  6113		       00 00 32 32*	      .byte.b	0,0, 50, 50, 50, 50, 50, 50, 50, 50	; 30-
    175  611d		       00 00 0a 0a*	      .byte.b	0,0, 10, 10, 20, 30, 30, 20, 10, 10	; 40-
    176  6127		       00 00 05 05*	      .byte.b	0,0, 5, 5, 10, 25, 25, 10, 5, 5	; 50-
    177  6131		       00 00 00 00*	      .byte.b	0,0, 0, 0, 0, 20, 20, 0, 0, 0	; 60-
    178  613b		       00 00 05 fb*	      .byte.b	0,0, 5, -5,-10, 0, 0,-10, -5, 5	; 70-
    179  6145		       00 00 05 0a*	      .byte.b	0,0, 5, 10, 10,-20,-20, 10, 10, 5	; 80-
    180  614f		       00 00 00 00*	      .byte.b	0,0, 0, 0, 0, 0, 0, 0, 0, 0	; 90-
    181  6159
    182  6159							;---------------------------------------------------------------------------------------------------
    183  6159
    184  6159				   PositionalValue_KNIGHT
    185  6159
    186  6159		       ce d8 e2 e2*	      .byte.b	-50,-40,-30,-30,-30,-30,-40,-50
    187  6161		       00 00 d8 ec*	      .byte.b	0,0, -40,-20, 0, 5, 5, 0,-20,-40
    188  616b		       00 00 e2 05*	      .byte.b	0,0, -30, 5, 10, 15, 15, 10, 5,-30
    189  6175		       00 00 e2 00*	      .byte.b	0,0, -30, 0, 15, 20, 20, 15, 0,-30
    190  617f		       00 00 e2 05*	      .byte.b	0,0, -30, 5, 15, 20, 20, 15, 5,-30
    191  6189		       00 00 e2 00*	      .byte.b	0,0, -30, 0, 10, 15, 15, 10, 0,-30
    192  6193		       00 00 d8 ec*	      .byte.b	0,0, -40,-20, 0, 0, 0, 0,-20,-40
    193  619d		       00 00 ce d8*	      .byte.b	0,0, -50,-40,-30,-30,-30,-30,-40,-50
    194  61a7
    195  61a7
    196  61a7							;---------------------------------------------------------------------------------------------------
    197  61a7
    198  61a7				   PositionalValue_BISHOP
    199  61a7
    200  61a7		       ec f6 f6 f6*	      .byte.b	-20,-10,-10,-10,-10,-10,-10,-20
    201  61af		       00 00 f6 05*	      .byte.b	0,0, -10, 5, 0, 0, 0, 0, 5,-10
    202  61b9		       00 00 f6 0a*	      .byte.b	0,0, -10, 10, 10, 10, 10, 10, 10,-10
    203  61c3		       00 00 f6 00*	      .byte.b	0,0, -10, 0, 10, 10, 10, 10, 0,-10
    204  61cd		       00 00 f6 05*	      .byte.b	0,0, -10, 5, 5, 10, 10, 5, 5,-10
    205  61d7		       00 00 f6 00*	      .byte.b	0,0, -10, 0, 5, 10, 10, 5, 0,-10
    206  61e1		       00 00 f6 00*	      .byte.b	0,0, -10, 0, 0, 0, 0, 0, 0,-10
    207  61eb		       00 00 ec f6*	      .byte.b	0,0, -20,-10,-10,-10,-10,-10,-10,-20
    208  61f5
    209  61f5
    210  61f5							;---------------------------------------------------------------------------------------------------
    211  61f5
    212  61f5				   PositionalValue_ROOK
    213  61f5
    214  61f5		       00 00 00 05*	      .byte.b	0, 0, 0, 5, 5, 0, 0, 0
    215  61fd		       00 00 fb 00*	      .byte.b	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    216  6207		       00 00 fb 00*	      .byte.b	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    217  6211		       00 00 fb 00*	      .byte.b	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    218  621b		       00 00 fb 00*	      .byte.b	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    219  6225		       00 00 fb 00*	      .byte.b	0,0, -5, 0, 0, 0, 0, 0, 0, -5
    220  622f		       00 00 05 0a*	      .byte.b	0,0, 5, 10, 10, 10, 10, 10, 10, 5
    221  6239		       00 00 00 00*	      .byte.b	0,0, 0, 0, 0, 0, 0, 0, 0, 0
    222  6243
    223  6243
    224  6243							;---------------------------------------------------------------------------------------------------
    225  6243
    226  6243				   PositionalValue_QUEEN
    227  6243
    228  6243		       ec f6 f6 fb*	      .byte.b	-20,-10,-10, -5, -5,-10,-10,-20
    229  624b		       00 00 f6 00*	      .byte.b	0,0, -10, 0, 5, 0, 0, 0, 0,-10
    230  6255		       00 00 f6 05*	      .byte.b	0,0, -10, 5, 5, 5, 5, 5, 0,-10
    231  625f		       00 00 00 00*	      .byte.b	0,0, 0, 0, 5, 5, 5, 5, 0, -5
    232  6269		       00 00 fb 00*	      .byte.b	0,0, -5, 0, 5, 5, 5, 5, 0, -5
    233  6273		       00 00 f6 00*	      .byte.b	0,0, -10, 0, 5, 5, 5, 5, 0,-10
    234  627d		       00 00 f6 00*	      .byte.b	0,0, -10, 0, 0, 0, 0, 0, 0,-10
    235  6287		       00 00 ec f6*	      .byte.b	0,0, -20,-10,-10, -5, -5,-10,-10,-20
    236  6291
    237  6291
    238  6291							;---------------------------------------------------------------------------------------------------
    239  6291
    240  6291				   PositionalValue_KING_MIDGAME
    241  6291
    242  6291		       14 1e 0a 00*	      .byte.b	20, 30, 10, 0, 0, 10, 30, 20
    243  6299		       00 00 14 14*	      .byte.b	0,0, 20, 20, 0, 0, 0, 0, 20, 20
    244  62a3		       00 00 f6 ec*	      .byte.b	0,0, -10,-20,-20,-20,-20,-20,-20,-10
    245  62ad		       00 00 ec e2*	      .byte.b	0,0, -20,-30,-30,-40,-40,-30,-30,-20
    246  62b7		       00 00 e2 d8*	      .byte.b	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    247  62c1		       00 00 e2 d8*	      .byte.b	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    248  62cb		       00 00 e2 d8*	      .byte.b	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    249  62d5		       00 00 e2 d8*	      .byte.b	0,0, -30,-40,-40,-50,-50,-40,-40,-30
    250  62df
    251  62df
    252  62df							;---------------------------------------------------------------------------------------------------
    253  62df
    254  62df				   PositionalValue_KING_ENDGAME
    255  62df
    256  62df		       ce e2 e2 e2*	      .byte.b	-50,-30,-30,-30,-30,-30,-30,-50
    257  62e7		       00 00 e2 e2*	      .byte.b	0,0, -30,-30, 0, 0, 0, 0,-30,-30
    258  62f1		       00 00 e2 f6*	      .byte.b	0,0, -30,-10, 20, 30, 30, 20,-10,-30
    259  62fb		       00 00 e2 f6*	      .byte.b	0,0, -30,-10, 30, 40, 40, 30,-10,-30
    260  6305		       00 00 e2 f6*	      .byte.b	0,0, -30,-10, 30, 40, 40, 30,-10,-30
    261  630f		       00 00 e2 f6*	      .byte.b	0,0, -30,-10, 20, 30, 30, 20,-10,-30
    262  6319		       00 00 e2 ec*	      .byte.b	0,0, -30,-20,-10, 0, 0,-10,-20,-30
    263  6323		       00 00 ce d8*	      .byte.b	0,0, -50,-40,-30,-20,-20,-30,-40,-50
    264  632d
    265  632d
      0  632d					      CHECK_BANK_SIZE	"BANK_EVAL"
      1  632d		       03 2d	   .TEMP      =	* - BANK_START
 BANK_EVAL (2K) SIZE =  $32d , FREE= $4d3
      2  632d					      ECHO	"BANK_EVAL", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  632d				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  632d				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  632d				  -	      ERR
      6  632d					      endif
    267  632d
    268  632d							;---------------------------------------------------------------------------------------------------
    269  632d
    270  632d
    271  632d					      MAC	negate
    272  632d
    273  632d					      sec
    274  632d					      lda	#0
    275  632d					      sbc	{1}
    276  632d					      sta	{1}
    277  632d					      lda	#0
    278  632d					      sbc	{1}+1
    279  632d					      sta	{1}+1
    280  632d
    281  632d					      ENDM		;{1}
    282  632d
    283  632d
    284  632d					      MAC	return
    285  632d
    286  632d					      lda	{1}
    287  632d					      sta	return
    288  632d					      lda	{1}+1
    289  632d					      sta	return+1
    290  632d
    291  632d					      rts
    292  632d					      ENDM		;{1}
    293  632d
    294  632d					      MAC	ifnotge
    295  632d
    296  632d							; branch if NOT >=
    297  632d
    298  632d					      sec
    299  632d					      lda	{1}
    300  632d					      sbc	{2}
    301  632d					      lda	{1}+1
    302  632d					      sbc	{2}+1
    303  632d					      bcc	{3}
    304  632d					      ENDM		; {1},{2}, {3}
    305  632d
    306  632d					      MAC	ifnotlt
    307  632d
    308  632d							; branch if NOT <
    309  632d
    310  632d					      clc		;!!
    311  632d					      lda	{1}
    312  632d					      sbc	{2}
    313  632d					      lda	{1}+1
    314  632d					      sbc	{2}+1
    315  632d					      bcs	{3}
    316  632d					      ENDM		; {1}, {2}, {3}
    317  632d
    318  632d
    319  632d
    320  632d
    321  632d
    322  632d					      MAC	equals
    323  632d
    324  632d					      lda	{2}
    325  632d					      sta	{1}
    326  632d					      lda	{2}+1
    327  632d					      sta	{1}+1
    328  632d
    329  632d					      ENDM		; {1}, {2}
    330  632d
    331  632d							;DEF quiesce
    332  632d					      SUBROUTINE
    333  632d
    334  632d
    335  632d
    336  632d				  -	      if	0
    337  632d				  -			; alpha, beta
    338  632d				  -
    339  632d				  -			;def quiesce( alpha, beta ):
    340  632d				  -			;    stand_pat = evaluate_board()
    341  632d				  -
    342  632d				  -			;--------------------------------------
    343  632d				  -			;    if( stand_pat >= beta ):
    344  632d				  -			;	  return beta
    345  632d				  -
    346  632d				  -			;--------------------------------------
    347  632d				  -			;    if( alpha < stand_pat ):
    348  632d				  -			;	  alpha = stand_pat
    349  632d				  -
    350  632d				  -			;--------------------------------------
    351  632d				  -			; TODO
    352  632d				  -			;    for move in board.legal_moves:
    353  632d				  -			;    {
    354  632d				  -			;	  if board.is_capture(move):
    355  632d				  -			;	      make_move(move)
    356  632d				  -
    357  632d				  -			;--------------------------------------
    358  632d				  -			;	      score = -quiesce( -beta, -alpha )
    359  632d				  -
    360  632d				  -	      NEGATE	beta
    361  632d				  -	      NEGATE	alpha
    362  632d				  -
    363  632d				  -	      jsr	quiesce
    364  632d				  -
    365  632d				  -	      EQUALS	score, return
    366  632d				  -	      NEGATE	score
    367  632d				  -
    368  632d				  -	      NEGATE	beta
    369  632d				  -	      NEGATE	alpha
    370  632d				  -
    371  632d				  -			; TODO:
    372  632d				  -			;	      unmake_move()
    373  632d				  -
    374  632d				  -			;--------------------------------------
    375  632d				  -			;	      if( score >= beta ):
    376  632d				  -			;		  return beta
    377  632d				  -
    378  632d				  -	      IFNOTGE	score, beta, cont24
    379  632d				  -	      RETURN	beta
    380  632d				  -
    381  632d				  -cont24
    382  632d				  -			;	      if( score > alpha ):
    383  632d				  -			;		  alpha = score
    384  632d				  -
    385  632d				  -	      IFNOTLT	alpha, score, cont25
    386  632d				  -	      EQUALS	alpha, score
    387  632d				  -cont25
    388  632d				  -			; } end of for ;oop
    389  632d				  -
    390  632d				  -			;    return alpha
    391  632d				  -	      RETURN	alpha
    392  632d				  -
    393  632d				  -
    394  632d				  -
    395  632d					      endif
    396  632d
    397  632d
    398  632d
    399  632d				  -	      if	0
    400  632d				  -
    401  632d				  -def	      quiesce(	alpha, beta ):
    402  632d				  -	      stand_pat	= evaluate_board()
    403  632d				  -	      if(	stand_pat >= beta ):
    404  632d				  -	      return	beta
    405  632d				  -	      if(	alpha < stand_pat ):
    406  632d				  -	      alpha	= stand_pat
    407  632d				  -
    408  632d				  -	      for	move in board.legal_moves:
    409  632d				  -	      if	board.is_capture(move):
    410  632d				  -	      make_move(move)
    411  632d				  -	      score	= -quiesce( -beta, -alpha )
    412  632d				  -	      unmake_move()
    413  632d				  -
    414  632d				  -	      if(	score >= beta ):
    415  632d				  -	      return	beta
    416  632d				  -	      if(	score > alpha ):
    417  632d				  -	      alpha	= score
    418  632d				  -	      return	alpha
    419  632d				  -
    420  632d				  -	      DEF	alphaBeta
    421  632d				  -			; pass alpha[2], beta[2], depthleft
    422  632d				  -
    423  632d				  -
    424  632d				  -
    425  632d				  -			;def alphabeta( alpha, beta, depthleft ):
    426  632d				  -			;    bestscore = -9999
    427  632d				  -			;    if( depthleft == 0 ):
    428  632d				  -			;	  return quiesce( alpha, beta )
    429  632d				  -			;    for move in board.legal_moves:
    430  632d				  -			;	  make_move(move)
    431  632d				  -			;	  score = -alphabeta( -beta, -alpha, depthleft - 1 )
    432  632d				  -			;	  unmake_move()
    433  632d				  -			;	  if( score >= beta ):
    434  632d				  -			;	      return score
    435  632d				  -			;	  if( score > bestscore ):
    436  632d				  -			;	      bestscore = score
    437  632d				  -			;	  if( score > alpha ):
    438  632d				  -			;	      alpha = score
    439  632d				  -			;    return bestscore
    440  632d				  -
    441  632d				  -
    442  632d				  -	      VAR	__bestScore, 2
    443  632d				  -	      VAR	__score, 2
    444  632d				  -
    445  632d				  -	      lda	#<-infinity
    446  632d				  -	      sta	__bestScore
    447  632d				  -	      lda	#>-infinity
    448  632d				  -	      sta	__bestScore+1
    449  632d				  -
    450  632d				  -	      lda	depthLeft
    451  632d				  -	      bne	.moreDepth
    452  632d				  -
    453  632d				  -	      jsr	quiesce	; --> return
    454  632d				  -	      rts
    455  632d				  -
    456  632d				  -
    457  632d				  -.moreDepth
    458  632d				  -
    459  632d				  -			; for move
    460  632d				  -			; make move
    461  632d				  -
    462  632d				  -
    463  632d				  -			;	  score = -alphabeta( -beta, -alpha, depthleft - 1 )
    464  632d				  -
    465  632d				  -	      lda	alpha
    466  632d				  -	      pha
    467  632d				  -	      lda	alpha+1
    468  632d				  -	      pha
    469  632d				  -	      lda	beta
    470  632d				  -	      pha
    471  632d				  -	      lda	beta+1
    472  632d				  -	      pha
    473  632d				  -
    474  632d				  -
    475  632d				  -	      sec
    476  632d				  -	      lda	#0
    477  632d				  -	      sbc	alpha
    478  632d				  -	      pha
    479  632d				  -	      lda	#0
    480  632d				  -	      sbc	alpha+1
    481  632d				  -	      pha
    482  632d				  -
    483  632d				  -	      sec
    484  632d				  -	      lda	#0
    485  632d				  -	      sbc	beta
    486  632d				  -	      sta	alpha
    487  632d				  -	      lda	#0
    488  632d				  -	      sbc	beta+1
    489  632d				  -	      sta	alpha+1	; --> -beta
    490  632d				  -
    491  632d				  -	      pla
    492  632d				  -	      sta	beta+1
    493  632d				  -	      pla
    494  632d				  -	      sta	beta	; --> -alpha
    495  632d				  -
    496  632d				  -	      lda	depthLeft
    497  632d				  -	      pha
    498  632d				  -	      dec	depthLeft
    499  632d				  -
    500  632d				  -	      lda	__bestScore
    501  632d				  -	      pha
    502  632d				  -	      lda	__bestScore+1
    503  632d				  -	      pha
    504  632d				  -
    505  632d				  -	      jsr	alphaBeta
    506  632d				  -
    507  632d				  -	      sec
    508  632d				  -	      lda	#0
    509  632d				  -	      sbc	result
    510  632d				  -	      sta	__score
    511  632d				  -	      lda	#0
    512  632d				  -	      sbc	result+1
    513  632d				  -	      sta	__score+1
    514  632d				  -
    515  632d				  -	      pla
    516  632d				  -	      sta	__bestScore+1
    517  632d				  -	      pla
    518  632d				  -	      sta	__bestScore
    519  632d				  -
    520  632d				  -	      pla
    521  632d				  -	      sta	depthLeft
    522  632d				  -
    523  632d				  -	      pla
    524  632d				  -	      sta	beta+1
    525  632d				  -	      pla
    526  632d				  -	      sta	beta
    527  632d				  -	      pla
    528  632d				  -	      sta	alpha+1
    529  632d				  -	      pla
    530  632d				  -	      sta	alpha
    531  632d				  -
    532  632d				  -
    533  632d				  -			; TODO: unmake move
    534  632d				  -
    535  632d				  -
    536  632d				  -			;	  if( score >= beta ):
    537  632d				  -			;	      return score
    538  632d				  -
    539  632d				  -	      sec
    540  632d				  -	      lda	__score
    541  632d				  -	      sbc	beta
    542  632d				  -	      lda	__score+1
    543  632d				  -	      sbc	beta+1
    544  632d				  -	      bcc	.notScoreGteBeta
    545  632d				  -
    546  632d				  -	      lda	__score
    547  632d				  -	      sta	result
    548  632d				  -	      lda	__score+1
    549  632d				  -	      sta	result+1
    550  632d				  -	      rts
    551  632d				  -
    552  632d				  -.notScoreGteBeta
    553  632d				  -
    554  632d				  -			;	  if( score > bestscore ):
    555  632d				  -			;	      bestscore = score
    556  632d				  -
    557  632d				  -	      clc		; !!
    558  632d				  -	      lda	__bestScore
    559  632d				  -	      sbc	__score
    560  632d				  -	      lda	__bestScore+1
    561  632d				  -	      sbc	__score+1
    562  632d				  -	      bcs	.notScoreGtBestScore
    563  632d				  -
    564  632d				  -	      lda	__score
    565  632d				  -	      sta	__bestScore
    566  632d				  -	      lda	__score+1
    567  632d				  -	      sta	__bestScore+1
    568  632d				  -
    569  632d				  -.notScoreGtBestScore
    570  632d				  -
    571  632d				  -			;	  if( score > alpha ):
    572  632d				  -			;	      alpha = score
    573  632d				  -
    574  632d				  -	      clc		; !!
    575  632d				  -	      lda	alpha
    576  632d				  -	      sbc	__score
    577  632d				  -	      lda	alpha+1
    578  632d				  -	      sbc	__score+1
    579  632d				  -	      bcs	.notScoreGtAlpha
    580  632d				  -
    581  632d				  -	      lda	__score
    582  632d				  -	      sta	alpha
    583  632d				  -	      lda	__score+1
    584  632d				  -	      sta	alpha+1
    585  632d				  -
    586  632d				  -			; TODO end move loop here
    587  632d				  -
    588  632d				  -			;    return bestscore
    589  632d				  -
    590  632d				  -	      lda	__bestScore
    591  632d				  -	      sta	return
    592  632d				  -	      lda	__bestScore+1
    593  632d				  -	      sta	return+1
    594  632d				  -	      rts
    595  632d				  -
    596  632d				  -
    597  632d				  -
    598  632d				  -
    599  632d				  -
    600  632d				  -
    601  632d				  -import     chess.polyglot
    602  632d				  -
    603  632d				  -def	      selectmove(depth):
    604  632d				  -	      try:
    605  632d				  -	      move	= chess.polyglot.MemoryMappedReader("bookfish.bin").weighted_choice(board).move()
    606  632d				  -	      movehistory.append(move)
    607  632d				  -	      return	move
    608  632d				  -	      except:
    609  632d				  -
    610  632d				  -
    611  632d				  -
    612  632d				  -			;	  bestMove = chess.Move.null()
    613  632d				  -			;	  bestValue = -99999
    614  632d				  -			;	  alpha = -100000
    615  632d				  -			;	  beta = 100000
    616  632d				  -
    617  632d				  -
    618  632d				  -
    619  632d				  -	      lda	#-1
    620  632d				  -	      sta	bestMove
    621  632d				  -
    622  632d				  -	      lda	#<(-infinity)
    623  632d				  -	      sta	alpha
    624  632d				  -	      lda	#>(-infinity)
    625  632d				  -	      sta	alpha+1
    626  632d				  -
    627  632d				  -	      lda	#<infinity
    628  632d				  -	      sta	beta
    629  632d				  -	      lda	#>infinity
    630  632d				  -	      sta	beta+1
    631  632d				  -
    632  632d				  -	      lda	#<(-(infinity-1))
    633  632d				  -	      sta	bestValue
    634  632d				  -	      lda	#<(-(infinity-1))
    635  632d				  -	      sta	bestValue+1
    636  632d				  -
    637  632d				  -			;	  for move in board.legal_moves:
    638  632d				  -			;	      make_move(move)
    639  632d				  -
    640  632d				  -			;	      boardValue = -alphabeta(-beta, -alpha, depth-1)
    641  632d				  -
    642  632d				  -	      lda	alpha
    643  632d				  -	      pha
    644  632d				  -	      lda	alpha+1
    645  632d				  -	      pha
    646  632d				  -	      lda	beta
    647  632d				  -	      pha
    648  632d				  -	      lda	beta+1
    649  632d				  -	      pha
    650  632d				  -	      lda	depth
    651  632d				  -	      pha
    652  632d				  -
    653  632d				  -	      dec	depth
    654  632d				  -
    655  632d				  -	      sec
    656  632d				  -	      lda	#0
    657  632d				  -	      sbc	beta
    658  632d				  -
    659  632d				  -
    660  632d				  -
    661  632d				  -	      if	boardValue > bestValue:
    662  632d				  -	      bestValue	= boardValue	;
    663  632d				  -	      bestMove	= move
    664  632d				  -	      if(	boardValue > alpha ):
    665  632d				  -	      alpha	= boardValue
    666  632d				  -	      unmake_move()
    667  632d				  -	      movehistory.append(bestMove)
    668  632d				  -	      return	bestMove
    669  632d				  -
    670  632d				  -
    671  632d				  -	      endif
    672  632d				  -
    673  632d				  -
    674  632d				  -
    675  632d				  -
    676  632d				  -
    677  632d				  -			; EOF
------- FILE ./chess.asm
------- FILE BANK_SPEAK.asm LEVEL 2 PASS 2
      0  632d					      include	"BANK_SPEAK.asm"
      0  632d					      NEWBANK	SPEAK
      1  6879 ????				      SEG	SPEAK
      2  6800					      ORG	ORIGIN
      3  6800					      RORG	$F000
      4  6800				   BANK_START SET	*
      5  6800				   SPEAK      SET	ORIGIN / 2048
      6  6800				   ORIGIN     SET	ORIGIN + 2048
      7  6800				   _CURRENT_BANK SET	SPEAK
      2  6800
      3  6800							;
      4  6800							; speakjet.inc
      5  6800							;
      6  6800							;
      7  6800							; AtariVox Speech Synth Driver
      8  6800							;
      9  6800							; By Alex Herbert, 2004
     10  6800							;
     11  6800
     12  6800
     13  6800
     14  6800
     15  6800							; Constants
     16  6800
     17  6800
     18  6800		       00 01	   SERIAL_OUTMASK equ	$01
     19  6800		       00 02	   SERIAL_RDYMASK equ	$02
     20  6800
     21  6800
     22  6800
     23  6800							;---------------------------------------------------------------------------------------------------
     24  6800
     25  6800					      mac	speak
     26  6800
     27  6800					      lda	#<{1}
     28  6800					      sta	speech_addr
     29  6800					      lda	#>{1}
     30  6800					      sta	speech_addr+1
     31  6800
     32  6800					      endm
     33  6800
     34  6800
     35  6800							;---------------------------------------------------------------------------------------------------
     36  6800
      0  6800					      DEF	ShutYourMouth
      1  6800				   BANK_ShutYourMouth SET	_CURRENT_BANK
      2  6800				   ShutYourMouth
      3  6800				   TEMPORARY_VAR SET	Overlay
      4  6800				   TEMPORARY_OFFSET SET	0
      5  6800					      SUBROUTINE
     38  6800					      SUBROUTINE
     39  6800
      0  6800					      SPEAK	silence_speech
      1  6800
      2  6800		       a9 77		      lda	#<silence_speech
      3  6802		       85 9c		      sta	speech_addr
      4  6804		       a9 f0		      lda	#>silence_speech
      5  6806		       85 9d		      sta	speech_addr+1
      6  6808
     41  6808		       60		      rts
     42  6809
     43  6809
     44  6809							;---------------------------------------------------------------------------------------------------
     45  6809
      0  6809					      DEF	GameSpeak
      1  6809				   BANK_GameSpeak SET	_CURRENT_BANK
      2  6809				   GameSpeak
      3  6809				   TEMPORARY_VAR SET	Overlay
      4  6809				   TEMPORARY_OFFSET SET	0
      5  6809					      SUBROUTINE
     47  6809					      SUBROUTINE
     48  6809
     49  6809		       20 c1 f9 	      jsr	debug
     50  680c
     51  680c		       a0 00		      ldy	#0
     52  680e		       b1 9c		      lda	(speech_addr),y
     53  6810		       c9 ff		      cmp	#$ff
     54  6812		       d0 08		      bne	.talk
     55  6814
      0  6814					      SPEAK	left_speech
      1  6814
      2  6814		       a9 4d		      lda	#<left_speech
      3  6816		       85 9c		      sta	speech_addr
      4  6818		       a9 f0		      lda	#>left_speech
      5  681a		       85 9d		      sta	speech_addr+1
      6  681c
     57  681c
     58  681c
     59  681c				   .talk
     60  681c
     61  681c							; check buffer-full status
     62  681c
     63  681c		       ad 80 02 	      lda	SWCHA
     64  681f		       29 02		      and	#SERIAL_RDYMASK
     65  6821		       f0 29		      beq	.speech_done
     66  6823
     67  6823		       a0 00		      ldy	#0
     68  6825		       b1 9c		      lda	(speech_addr),y
     69  6827
     70  6827		       49 ff		      eor	#$ff
     71  6829		       f0 21		      beq	.speech_done
     72  682b		       85 9e		      sta	temp
     73  682d
     74  682d		       e6 9c		      inc	speech_addr
     75  682f		       d0 02		      bne	.incaddr_skip
     76  6831		       e6 9d		      inc	speech_addr+1
     77  6833				   .incaddr_skip
     78  6833
     79  6833		       38		      sec		; start bit
     80  6834				   .byteout_loop
     81  6834
     82  6834							; put carry flag into bit 0 of SWACNT, perserving other bits
     83  6834
     84  6834		       ad 81 02 	      lda	SWACNT	; 4
     85  6837		       29 fe		      and	#$fe	; 2 6
     86  6839		       69 00		      adc	#$00	; 2 8
     87  683b		       8d 81 02 	      sta	SWACNT	; 4 12
     88  683e
     89  683e							; 10 bits sent? (1 start bit, 8 data bits, 1 stop bit)
     90  683e
     91  683e		       c0 09		      cpy	#$09	; 2 14
     92  6840		       f0 0a		      beq	.speech_done	; 2 16
     93  6842		       c8		      iny		; 2 18
     94  6843
     95  6843
     96  6843		       a2 07		      ldx	#$07	; 2 20
     97  6845		       ca	   .delay_loop dex		; { 2
     98  6846		       d0 fd		      bne	.delay_loop	;   3
     99  6848							; } = 7 * 5 - 1 = 34
    100  6848							; @54
    101  6848
    102  6848		       46 9e		      lsr	temp	; 5 59
    103  684a		       10 e8		      bpl	.byteout_loop	; 3 62 cycles for loop
    104  684c
    105  684c		       60	   .speech_done rts
    106  684d
    107  684d
    108  684d							;---------------------------------------------------------------------------------------------------
    109  684d
    110  684d							; Speech Data
    111  684d
    112  684d							;Dec. SpeakJet Use
    113  684d							;----- ------------------
    114  684d							;000 Pause 0
    115  684d							;001 Pause 1
    116  684d							;002 Pause 2
    117  684d							;003 Pause 3
    118  684d							;004 Pause 4
    119  684d							;005 Pause 5
    120  684d							;006 Pause 6
    121  684d							;007 Play Next Sound Fast
    122  684d							;008 Play Next Sound Slow
    123  684d							;014 Play Next Sound High Tone
    124  684d							;015 Play Next Sound Low Tone
    125  684d							;016 Wait
    126  684d							;020 Volume, X
    127  684d							;021 Speed, X
    128  684d							;022 Pitch, X
    129  684d							;023 Bend, X
    130  684d							;024 PortCtr, X
    131  684d							;025 Port, X
    132  684d							;026 Repeat, X
    133  684d							;028 Call Phrase, X
    134  684d							;029 Goto Phrase, X
    135  684d							;030 Delay, X
    136  684d							;031 Reset Defaults
    137  684d							;--------------------------------------------------------
    138  684d							;032 Reserved
    139  684d							;- to -
    140  684d							;127
    141  684d							;--------------------------------------------------------
    142  684d							;128 127 Sound codes
    143  684d							;- to -
    144  684d							;254
    145  684d							;--------------------------------------------------------
    146  684d							;255 End of Phrase.
    147  684d
    148  684d
    149  684d
    150  684d				   left_speech
    151  684d
    152  684d
    153  684d		       1f		      dc.b	31
    154  684e							;	  dc.b $ff
    155  684e
    156  684e
    157  684e
    158  684e
    159  684e
    160  684e
    161  684e
    162  684e		       15 74		      dc.b	21,116	; speed 116
    163  6850		       17 04		      dc.b	23,4	; bend, 4
    164  6852		       16 37		      dc.b	22,55	; pitch, 55
    165  6854		       b6		      dc.b	182	;CH
    166  6855		       81		      dc.b	129	;IH
    167  6856		       c2		      dc.b	194	;KE
    168  6857		       83		      dc.b	131	;EH
    169  6858		       8d		      dc.b	141	;NE
    170  6859		       02		      dc.b	2	; pause 2
    171  685a		       02		      dc.b	2	; pause 2
    172  685b
    173  685b
    174  685b		       08		      dc.b	8	; play next sound slow
    175  685c		       ba		      dc.b	186	;FF
    176  685d		       07		      dc.b	7	; play fast
    177  685e		       9b		      dc.b	155	;OHIY
    178  685f		       04		      dc.b	4	; pause 4
    179  6860		       bf		      dc.b	191	;TT
    180  6861		       06		      dc.b	6	; pause 6
    181  6862		       91		      dc.b	145	;LE
    182  6863		       07		      dc.b	7	; fast
    183  6864		       88		      dc.b	136	;AW
    184  6865		       07		      dc.b	7	; fast
    185  6866		       9b		      dc.b	155	;OHIY
    186  6867		       c4		      dc.b	196	;EK
    187  6868		       06		      dc.b	6	; pause 6
    188  6869		       9a		      dc.b	154	;EYIY
    189  686a		       80		      dc.b	128	;IY
    190  686b		       06		      dc.b	6	; pause 6
    191  686c		       94		      dc.b	148	;GR?
    192  686d		       07		      dc.b	7	; fast
    193  686e		       89		      dc.b	137	;OW
    194  686f		       07		      dc.b	7	; fast
    195  6870		       a4		      dc.b	164	;OWW
    196  6871		       12		      dc.b	18	;???
    197  6872		       ab		      dc.b	171	;BO
    198  6873		       88		      dc.b	136	;AW
    199  6874		       bf		      dc.b	191	;TT
    200  6875		       1f		      dc.b	31	; reset defaults
    201  6876		       ff		      dc.b	$ff
    202  6877
    203  6877
    204  6877				   silence_speech
    205  6877
    206  6877
    207  6877
    208  6877		       1f		      dc.b	31	;31
    209  6878
    210  6878
    211  6878		       ff		      dc.b	$ff
    212  6879
      0  6879					      CHECK_BANK_SIZE	"BANK_SPEAK"
      1  6879		       00 79	   .TEMP      =	* - BANK_START
 BANK_SPEAK (2K) SIZE =  $79 , FREE= $787
      2  6879					      ECHO	"BANK_SPEAK", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  6879				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  6879				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  6879				  -	      ERR
      6  6879					      endif
    214  6879
    215  6879				  -	      if	0
    216  6879				  -typedef    enum
    217  6879				  -	      182	{
    218  6879				  -	      183	Pause0 = 0, ///< Pause 0ms
    219  6879				  -	      184	Pause1 = 1, ///< Pause 100ms
    220  6879				  -	      185	Pause2 = 2, ///< Pause 200ms
    221  6879				  -	      186	Pause3 = 3, ///< Pause 700ms
    222  6879				  -	      187	Pause4 = 4, ///< Pause 30ms
    223  6879				  -	      188	Pause5 = 5, ///< Pause 60ms
    224  6879				  -	      189	Pause6 = 6, ///< Pause 90ms
    225  6879				  -	      190	Fast = 7, ///< Next phoneme at 0.5 speed
    226  6879				  -	      191	Slow = 8, ///< Next phoneme at 1.5 speed
    227  6879				  -	      192	Stress = 14, ///< Next phoneme with some stress
    228  6879				  -	      193	Relax = 15, ///< Next phoneme with relaxation
    229  6879				  -	      194	Wait = 16, ///< Stops and waits for a Start (see manual)
    230  6879				  -	      195	Soft = 18, ///< Stops and waits for a Start (see manual)
    231  6879				  -	      196	Volume = 20, ///< Next octet is volume 0 to 127. Default 96
    232  6879				  -	      197	Speed = 21, ///< Next octet is speed 0 to 127. Default 114
    233  6879				  -	      198	Pitch = 22, ///< Next octet is pitch in Hz = to 255
    234  6879				  -	      199	Bend = 23, ///< Next octet is frequency bend to 15. Default is 5
    235  6879				  -	      200	PortCtr = 24, ///< Next octet is port control value. See manual. Default is 7
    236  6879				  -	      201	Port = 25, ///< Next octet is Port Output Value. See manual. Default is 0
    237  6879				  -	      202	Repeat = 26, ///< Next octet is repeat count. 0 to 255
    238  6879				  -	      203	CallPhrase = 28, ///< Next octet is EEPROM phrase to play and return. See manual.
    239  6879				  -	      204	GotoPhrase = 29, ///< Next octet is EEPROM phgrase to go to. See manual.
    240  6879				  -	      205	Delay = 30, ///< Next octet is delay in multiples of 10ms. 0 to 255.
    241  6879				  -	      206	Reset = 31, ///< Reset Volume Speed, Pitch, Bend to defaults.
    242  6879				  -	      207
    243  6879				  -	      208	// 32 to 127 reserved
    244  6879				  -	      209
    245  6879				  -	      210	// 128 to 254 Sound codes
    246  6879				  -	      211	// Phonemes, standard names
    247  6879				  -	      212	Phoneme_IY = 128, ///< 70ms Voiced Long Vowel
    248  6879				  -	      213	Phoneme_IH = 129, ///< 70ms Voiced Long Vowel
    249  6879				  -	      214	Phoneme_EY = 130, ///< 70ms Voiced Long Vowel
    250  6879				  -	      215	Phoneme_EH = 131, ///< 70ms Voiced Long Vowel
    251  6879				  -	      216	Phoneme_AY = 132, ///< 70ms Voiced Long Vowel
    252  6879				  -	      217	Phoneme_AX = 133, ///< 70ms Voiced Long Vowel
    253  6879				  -	      218	Phoneme_UX = 134, ///< 70ms Voiced Long Vowel
    254  6879				  -	      219	Phoneme_OH = 135, ///< 70ms Voiced Long Vowel
    255  6879				  -	      220	Phoneme_AW = 136, ///< 70ms Voiced Long Vowel
    256  6879				  -	      221	Phoneme_OW = 137, ///< 70ms Voiced Long Vowel
    257  6879				  -	      222	Phoneme_UH = 138, ///< 70ms Voiced Long Vowel
    258  6879				  -	      223	Phoneme_UW = 139, ///< 70ms Voiced Long Vowel
    259  6879				  -	      224	Phoneme_MM = 140, ///< 70ms Voiced Nasal
    260  6879				  -	      225	Phoneme_NE = 141, ///< 70ms Voiced Nasal
    261  6879				  -	      226	Phoneme_NO = 142, ///< 70ms Voiced Nasal
    262  6879				  -	      227	Phoneme_NGE = 143, ///< 70ms Voiced Nasal
    263  6879				  -	      228	Phoneme_NGO = 144, ///< 70ms Voiced Nasal
    264  6879				  -	      229	Phoneme_LE = 145, ///< 70ms Voiced Resonate
    265  6879				  -	      230	Phoneme_LO = 146, ///< 70ms Voiced Resonate
    266  6879				  -	      231	Phoneme_WW = 147, ///< 70ms Voiced Resonate
    267  6879				  -	      232	Phoneme_RR = 149, //148? ///< 70ms Voiced Resonate
    268  6879				  -	      233	Phoneme_IYRR = 149, ///< 200ms Voiced R Color Vowel
    269  6879				  -	      234	Phoneme_EYRR = 150, ///< 200ms Voiced R Color Vowel
    270  6879				  -	      235	Phoneme_AXRR = 151, ///< 190ms Voiced R Color Vowel
    271  6879				  -	      236	Phoneme_AWRR = 152, ///< 200ms Voiced R Color Vowel
    272  6879				  -	      237	Phoneme_OWRR = 153, ///< 185ms Voiced R Color Vowel
    273  6879				  -	      238	Phoneme_EYIY = 154, ///< 165ms Voiced Diphthong
    274  6879				  -	      239	Phoneme_OHIY = 155, ///< 200ms Voiced Diphthong
    275  6879				  -	      240	Phoneme_OWIY = 156, ///< 225ms Voiced Diphthong
    276  6879				  -	      241	Phoneme_OHIH = 157, ///< 185ms Voiced Diphthong
    277  6879				  -	      242	Phoneme_IYEH = 158, ///< 170ms Voiced Diphthong
    278  6879				  -	      243	Phoneme_EHLE = 159, ///< 140ms Voiced Diphthong
    279  6879				  -	      244	Phoneme_IYUW = 160, ///< 180ms Voiced Diphthong
    280  6879				  -	      245	Phoneme_AXUW = 161, ///< 170ms Voiced Diphthong
    281  6879				  -	      246	Phoneme_IHWW = 162, ///< 170ms Voiced Diphthong
    282  6879				  -	      247	Phoneme_AYWW = 163, ///< 200ms Voiced Diphthong
    283  6879				  -	      248	Phoneme_OWWW = 164, ///< 131ms Voiced Diphthong
    284  6879				  -	      249	Phoneme_JH = 165, ///< 70ms Voiced Affricate
    285  6879				  -	      250	Phoneme_VV = 166, ///< 70ms Voiced Fricative
    286  6879				  -	      251	Phoneme_ZZ = 167, ///< 70ms Voiced Fricative
    287  6879				  -	      252	Phoneme_ZH = 168, ///< 70ms Voiced Fricative
    288  6879				  -	      253	Phoneme_DH = 169, ///< 70ms Voiced Fricative
    289  6879				  -	      254	Phoneme_BE = 170, ///< 45ms Voiced Stop
    290  6879				  -	      255	Phoneme_BO = 171, ///< 45ms Voiced Stop
    291  6879				  -	      256	Phoneme_EB = 172, ///< 10ms Voiced Stop
    292  6879				  -	      257	Phoneme_OB = 173, ///< 10ms Voiced Stop
    293  6879				  -	      258	Phoneme_DE = 174, ///< 45ms Voiced Stop
    294  6879				  -	      259	Phoneme_DO = 174, ///< 45ms Voiced Stop
    295  6879				  -	      260	Phoneme_ED = 176, ///< 10ms Voiced Stop
    296  6879				  -	      261	Phoneme_OD = 177, ///< 10ms Voiced Stop
    297  6879				  -	      262	Phoneme_GE = 178, ///< 55ms Voiced Stop
    298  6879				  -	      263	Phoneme_GO = 179, ///< 55ms Voiced Stop
    299  6879				  -	      264	Phoneme_EG = 180, ///< 55ms Voiced Stop
    300  6879				  -	      265	Phoneme_OG = 181, ///< 55ms Voiced Stop
    301  6879				  -	      266	Phoneme_CH = 182, ///< 70ms Voiceless Affricate
    302  6879				  -	      267	Phoneme_HE = 183, ///< 70ms Voiceless Fricative
    303  6879				  -	      268	Phoneme_HO = 184, ///< 70ms Voiceless Fricative
    304  6879				  -	      269	Phoneme_WH = 185, ///< 70ms Voiceless Fricative
    305  6879				  -	      270	Phoneme_FF = 186, ///< 70ms Voiceless Fricative
    306  6879				  -	      271	Phoneme_SE = 187, ///< 40ms Voiceless Fricative
    307  6879				  -	      272	Phoneme_SO = 188, ///< 40ms Voiceless Fricative
    308  6879				  -	      273	Phoneme_SH = 189, ///< 50ms Voiceless Fricative
    309  6879				  -	      274	Phoneme_TH = 190, ///< 40ms Voiceless Fricative
    310  6879				  -	      275	Phoneme_TT = 191, ///< 50ms Voiceless Stop
    311  6879				  -	      276	Phoneme_TU = 192, ///< 70ms Voiceless Stop
    312  6879				  -	      277	Phoneme_TS = 193, ///< 170ms Voiceless Stop
    313  6879				  -	      278	Phoneme_KE = 194, ///< 55ms Voiceless Stop
    314  6879				  -	      279	Phoneme_KO = 195, ///< 55ms Voiceless Stop
    315  6879				  -	      280	Phoneme_EK = 196, ///< 55ms Voiceless Stop
    316  6879				  -	      281	Phoneme_OK = 197, ///< 45ms Voiceless Stop
    317  6879				  -	      282	Phoneme_PE = 198, ///< 99ms Voiceless Stop
    318  6879				  -	      283	Phoneme_PO = 199, ///< 99ms Voiceless Stop
    319  6879				  -	      284	// Robot sound
    320  6879				  -	      285	Sound_R0 = 200, ///< 80ms Robot
    321  6879				  -	      286	Sound_R1 = 201, ///< 80ms Robot
    322  6879				  -	      287	Sound_R2 = 202, ///< 80ms Robot
    323  6879				  -	      288	Sound_R3 = 203, ///< 80ms Robot
    324  6879				  -	      289	Sound_R4 = 204, ///< 80ms Robot
    325  6879				  -	      290	Sound_R5 = 205, ///< 80ms Robot
    326  6879				  -	      291	Sound_R6 = 206, ///< 80ms Robot
    327  6879				  -	      292	Sound_R7 = 207, ///< 80ms Robot
    328  6879				  -	      293	Sound_R8 = 208, ///< 80ms Robot
    329  6879				  -	      294	Sound_R9 = 209, ///< 80ms Robot
    330  6879				  -	      295	// Alarm sound
    331  6879				  -	      296	Sound_A0 = 210, ///< 300ms Alarm
    332  6879				  -	      297	Sound_A1 = 211, ///< 101ms Alarm
    333  6879				  -	      298	Sound_A2 = 212, ///< 102ms Alarm
    334  6879				  -	      299	Sound_A3 = 213, ///< 540ms Alarm
    335  6879				  -	      300	Sound_A4 = 214, ///< 530ms Alarm
    336  6879				  -	      301	Sound_A5 = 215, ///< 500ms Alarm
    337  6879				  -	      302	Sound_A6 = 216, ///< 135ms Alarm
    338  6879				  -	      303	Sound_A7 = 217, ///< 600ms Alarm
    339  6879				  -	      304	Sound_A8 = 218, ///< 300ms Alarm
    340  6879				  -	      305	Sound_A9 = 219, ///< 250ms Alarm
    341  6879				  -	      306	// Beeps
    342  6879				  -	      307	Sound_B0 = 220, ///< 200ms Beep
    343  6879				  -	      308	Sound_B1 = 221, ///< 270ms Beep
    344  6879				  -	      309	Sound_B2 = 222, ///< 280ms Beep
    345  6879				  -	      310	Sound_B3 = 223, ///< 260ms Beep
    346  6879				  -	      311	Sound_B4 = 224, ///< 300ms Beep
    347  6879				  -	      312	Sound_B5 = 225, ///< 100ms Beep
    348  6879				  -	      313	Sound_B6 = 226, ///< 104ms Beep
    349  6879				  -	      314	Sound_B7 = 227, ///< 100ms Beep
    350  6879				  -	      315	Sound_B8 = 228, ///< 270ms Beep
    351  6879				  -	      316	Sound_B9 = 229, ///< 262ms Beep
    352  6879				  -	      317	// Biological
    353  6879				  -	      318	Sound_C0 = 230, ///< 160ms Biological
    354  6879				  -	      319	Sound_C1 = 231, ///< 300ms Biological
    355  6879				  -	      320	Sound_C2 = 232, ///< 182ms Biological
    356  6879				  -	      321	Sound_C3 = 233, ///< 120ms Biological
    357  6879				  -	      322	Sound_C4 = 234, ///< 175ms Biological
    358  6879				  -	      323	Sound_C5 = 235, ///< 350ms Biological
    359  6879				  -	      324	Sound_C6 = 236, ///< 160ms Biological
    360  6879				  -	      325	Sound_C7 = 237, ///< 260ms Biological
    361  6879				  -	      326	Sound_C8 = 238, ///< 95ms Biological
    362  6879				  -	      327	Sound_C9 = 239, ///< 75ms Biological
    363  6879				  -	      328	// DTMF
    364  6879				  -	      329	DTMF_0 = 240, ///< DTMF 0 95ms
    365  6879				  -	      330	DTMF_1 = 241, ///< DTMF 1 95ms
    366  6879				  -	      331	DTMF_2 = 242, ///< DTMF 2 95ms
    367  6879				  -	      332	DTMF_3 = 243, ///< DTMF 3 95ms
    368  6879				  -	      333	DTMF_4 = 244, ///< DTMF 4 95ms
    369  6879				  -	      334	DTMF_5 = 245, ///< DTMF 5 95ms
    370  6879				  -	      335	DTMF_6 = 246, ///< DTMF 6 95ms
    371  6879				  -	      336	DTMF_7 = 247, ///< DTMF 7 95ms
    372  6879				  -	      337	DTMF_8 = 248, ///< DTMF 8 95ms
    373  6879				  -	      338	DTMF_9 = 249, ///< DTMF 9 95ms
    374  6879				  -	      339	DTMF_STAR = 250, ///< DTMF * 95ms
    375  6879				  -	      340	DTMF_HASH = 251, ///< DTMF # 95ms
    376  6879				  -	      341	// Miscellaneous
    377  6879				  -	      342	Sound_M0 = 252, ///< Sonar ping 125ms
    378  6879				  -	      343	Sound_M1 = 253, ///< Pistol shot 250ms
    379  6879				  -	      344	Sound_M2 = 254, ///< WOW 530ms
    380  6879				  -	      345
    381  6879				  -	      346	EndOfPhrase = 255, ///< End of phrase marker. Required at end of code arrays
    382  6879				  -	      347
    383  6879				  -	      348	} CommandCodes	;
    384  6879				  -	      349
    385  6879					      endif
------- FILE ./chess.asm
    490  6879
    491  6879							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  6879					      include	"BANK_FIXED.asm"
      1  6879							; Chess
      2  6879							; Copyright (c) 2019-2020 Andrew Davie
      3  6879							; andrew@taswegian.com
      4  6879
      5  6879
      6  6879							;---------------------------------------------------------------------------------------------------
      7  6879							;#########################################  FIXED BANK  ############################################
      8  6879							;---------------------------------------------------------------------------------------------------
      9  6879
     10  6879				   ORIGIN     SET	FIXED_BANK
     11  6879
      0  6879					      NEWBANK	THE_FIXED_BANK
      1  7fc5 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800							;---------------------------------------------------------------------------------------------------
     16  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800				   Reset
      3  7800				   TEMPORARY_VAR SET	Overlay
      4  7800				   TEMPORARY_OFFSET SET	0
      5  7800					      SUBROUTINE
     18  7800					      SUBROUTINE
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 02		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;JSROM TitleScreen
     34  780e
      0  780e					      JSROM	ShutYourMouth
      1  780e
      2  780e		       a9 0d		      lda	#BANK_ShutYourMouth
      3  7810		       85 3f		      sta	SET_BANK
      4  7812		       20 00 f0 	      jsr	ShutYourMouth
     36  7815
     37  7815							; Move a copy of the row bank template to the first 8 banks of RAM
     38  7815							; and then terminate the draw subroutine by substituting in a RTS on the last one
     39  7815
      0  7815					      JSROM_SAFE	SetupBanks
      1  7815
      2  7815
      3  7815
      4  7815		       a9 00		      lda	#BANK_SetupBanks
      5  7817		       85 8b		      sta	savedBank
      6  7819		       85 3f		      sta	SET_BANK
      7  781b		       20 24 f1 	      jsr	SetupBanks
     41  781e
     42  781e							; Patch the final row's "loop" to a RTS
     43  781e
     44  781e		       a2 07		      ldx	#7
     45  7820		       86 3e		      stx	SET_BANK_RAM
     46  7822		       a9 60		      lda	#$60	; "rts"
     47  7824		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     48  7827
     49  7827
     50  7827		       a5 95		      lda	currentPly
     51  7829		       85 3e		      sta	SET_BANK_RAM
     52  782b		       20 68 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     53  782e
      0  782e					      JSROM	InitialisePieceSquares
      1  782e
      2  782e		       a9 0f		      lda	#BANK_InitialisePieceSquares
      3  7830		       85 3f		      sta	SET_BANK
      4  7832		       20 18 fc 	      jsr	InitialisePieceSquares
     55  7835
     56  7835		       a9 00		      lda	#WHITE
     57  7837		       85 97		      sta	sideToMove
     58  7839
     59  7839							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     60  7839
     61  7839							;---------------------------------------------------------------------------------------------------
     62  7839
     63  7839							;RESYNC
     64  7839				   .StartFrame
     65  7839
     66  7839
     67  7839							; START OF FRAME
     68  7839
     69  7839		       a9 0e		      lda	#%1110	; VSYNC ON
     70  783b		       85 42	   .loopVSync3 sta	WSYNC
     71  783d		       85 40		      sta	VSYNC
     72  783f		       4a		      lsr
     73  7840		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     74  7842
     75  7842		       a0 2f		      ldy	#TIME_PART_1
     76  7844		       8c 96 02 	      sty	TIM64T
     77  7847
     78  7847							; LOTS OF PROCESSING TIME - USE IT
     79  7847
     80  7847		       a2 00		      ldx	#0
     81  7849		       86 41		      stx	VBLANK
     82  784b
     83  784b
     84  784b				  -	      IF	ASSERTS
     85  784b				  -			;		      lda #$C2
     86  784b				  -			;		      sta COLUBK		     ; colour timing band top of screen
     87  784b					      ENDIF
     88  784b
     89  784b		       20 a8 f8 	      jsr	AiStateMachine
     90  784e
     91  784e							;jsr SAFE_PhasedProcessor
     92  784e
     93  784e				  -	      IF	ASSERTS
     94  784e				  -			;		      lda #0
     95  784e				  -			;		      sta COLUBK		     ; end of timing band
     96  784e					      ENDIF
     97  784e
     98  784e				  -	      if	ASSERTS
     99  784e				  -			; Catch timer expired already
    100  784e				  -	      bit	TIMINT
    101  784e				  -			;.whoops	      bmi .whoops
    102  784e					      endif
    103  784e
    104  784e
    105  784e		       2c 85 02    .wait      bit	TIMINT
    106  7851		       10 fb		      bpl	.wait
    107  7853
    108  7853
    109  7853
    110  7853							; START OF VISIBLE SCANLINES
    111  7853
    112  7853		       85 42		      sta	WSYNC
    113  7855
    114  7855		       20 a7 f8 	      jsr	_rts
    115  7858		       20 a7 f8 	      jsr	_rts
    116  785b		       20 a7 f8 	      jsr	_rts
    117  785e		       20 a7 f8 	      jsr	_rts
      0  7861					      SLEEP	3
      1  7861				   .CYCLES    SET	3
      2  7861
      3  7861				  -	      IF	.CYCLES < 2
      4  7861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  7861				  -	      ERR
      6  7861					      ENDIF
      7  7861
      8  7861					      IF	.CYCLES & 1
      9  7861					      IFNCONST	NO_ILLEGAL_OPCODES
     10  7861		       04 00		      nop	0
     11  7863				  -	      ELSE
     12  7863				  -	      bit	VSYNC
     13  7863					      ENDIF
     14  7863				   .CYCLES    SET	.CYCLES - 3
     15  7863					      ENDIF
     16  7863
     17  7863				  -	      REPEAT	.CYCLES / 2
     18  7863				  -	      nop
     19  7863					      REPEND
    119  7863
    120  7863		       a2 00		      ldx	#0
    121  7865		       86 41		      stx	VBLANK
    122  7867
    123  7867		       86 3e		      stx	SET_BANK_RAM
    124  7869		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    125  786c
    126  786c
    127  786c
    128  786c
    129  786c		       a9 00		      lda	#0
    130  786e		       85 4d		      sta	PF0
    131  7870		       85 4e		      sta	PF1
    132  7872		       85 4f		      sta	PF2
    133  7874		       85 5b		      sta	GRP0
    134  7876		       85 5c		      sta	GRP1
    135  7878
    136  7878		       a9 42		      lda	#%01000010	; bit6 is not required
    137  787a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    138  787c
    139  787c
    140  787c							; END OF VISIBLE SCREEN
    141  787c							; HERE'S SOME TIME TO DO STUFF
    142  787c
    143  787c		       a9 2e		      lda	#TIME_PART_2
    144  787e		       8d 96 02 	      sta	TIM64T
    145  7881
      0  7881					      JSROM	GameSpeak
      1  7881
      2  7881		       a9 0d		      lda	#BANK_GameSpeak
      3  7883		       85 3f		      sta	SET_BANK
      4  7885		       20 09 f0 	      jsr	GameSpeak
    147  7888		       20 a8 f8 	      jsr	AiStateMachine
    148  788b
      0  788b					      JSROM	PositionSprites
      1  788b
      2  788b		       a9 06		      lda	#BANK_PositionSprites
      3  788d		       85 3f		      sta	SET_BANK
      4  788f		       20 00 f4 	      jsr	PositionSprites
    150  7892
    151  7892
    152  7892
    153  7892							; "draw" sprite shapes into row banks
    154  7892
    155  7892		       a2 07		      ldx	#7
    156  7894		       86 3e	   zapem      stx	SET_BANK_RAM
    157  7896		       20 a6 f2 	      jsr	WriteBlank
    158  7899		       ca		      dex
    159  789a		       10 f8		      bpl	zapem
    160  789c
    161  789c		       20 cf f2 	      jsr	WriteCursor
    162  789f
    163  789f
    164  789f		       2c 85 02    Waitforit  bit	TIMINT
    165  78a2		       10 fb		      bpl	Waitforit
    166  78a4
    167  78a4		       4c 39 f8 	      jmp	.StartFrame
    168  78a7
    169  78a7
    170  78a7		       60	   _rts       rts
    171  78a8
    172  78a8
    173  78a8							;---------------------------------------------------------------------------------------------------
    174  78a8
      0  78a8					      DEF	AiStateMachine
      1  78a8				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  78a8				   AiStateMachine
      3  78a8				   TEMPORARY_VAR SET	Overlay
      4  78a8				   TEMPORARY_OFFSET SET	0
      5  78a8					      SUBROUTINE
    176  78a8					      SUBROUTINE
    177  78a8
      0  78a8					      JSROM	AiSetupVectors
      1  78a8
      2  78a8		       a9 06		      lda	#BANK_AiSetupVectors
      3  78aa		       85 3f		      sta	SET_BANK
      4  78ac		       20 69 f0 	      jsr	AiSetupVectors
    179  78af							;bcs .exit		      ; not enough time
    180  78af		       85 3f		      sta	SET_BANK
    181  78b1		       6c e8 00 	      jmp	(__ptr)	; TODO: OR branch back to squeeze cycles
    182  78b4
    183  78b4		       60	   .exit      rts
    184  78b5
    185  78b5
    186  78b5							;---------------------------------------------------------------------------------------------------
    187  78b5
      0  78b5					      DEF	CallClear
      1  78b5				   BANK_CallClear SET	_CURRENT_BANK
      2  78b5				   CallClear
      3  78b5				   TEMPORARY_VAR SET	Overlay
      4  78b5				   TEMPORARY_OFFSET SET	0
      5  78b5					      SUBROUTINE
    189  78b5					      SUBROUTINE
    190  78b5
    191  78b5		       84 3e		      sty	SET_BANK_RAM
    192  78b7		       20 90 f1 	      jsr	ClearRowBitmap
    193  78ba		       60		      rts
    194  78bb
    195  78bb							;---------------------------------------------------------------------------------------------------
    196  78bb
    197  78bb
      0  78bb					      DEF	aiDrawEntireBoard
      1  78bb				   BANK_aiDrawEntireBoard SET	_CURRENT_BANK
      2  78bb				   aiDrawEntireBoard
      3  78bb				   TEMPORARY_VAR SET	Overlay
      4  78bb				   TEMPORARY_OFFSET SET	0
      5  78bb					      SUBROUTINE
    199  78bb					      SUBROUTINE
    200  78bb
    201  78bb
    202  78bb		       ad 84 02 	      lda	INTIM
    203  78be		       c9 2d		      cmp	#SPEEDOF_COPYSINGLEPIECE+4
    204  78c0		       90 2c		      bcc	.exit
    205  78c2
    206  78c2		       a9 08		      lda	#RAMBANK_MOVES_RAM
    207  78c4		       85 3e		      sta	SET_BANK_RAM
    208  78c6		       a4 80		      ldy	squareToDraw
    209  78c8		       b9 15 f0 	      lda	ValidSquare,y
    210  78cb		       30 1d		      bmi	.isablank2
    211  78cd
    212  78cd		       b9 79 f0 	      lda	Board,y
    213  78d0		       f0 13		      beq	.isablank
    214  78d2		       48		      pha
    215  78d3		       a9 00		      lda	#BLANK
    216  78d5		       99 79 f4 	      sta	Board+RAM_WRITE,y
    217  78d8
    218  78d8		       20 4e fd 	      jsr	CopySinglePiece
    219  78db
    220  78db		       a9 08		      lda	#RAMBANK_MOVES_RAM
    221  78dd		       85 3e		      sta	SET_BANK_RAM
    222  78df
    223  78df		       a4 80		      ldy	squareToDraw
    224  78e1		       68		      pla
    225  78e2		       99 79 f4 	      sta	Board+RAM_WRITE,y
    226  78e5
      0  78e5				   .isablank  PHASE	AI_DrawPart2
      1  78e5		       a9 10		      lda	#AI_DrawPart2
      2  78e7		       85 8c		      sta	aiState
    228  78e9		       60		      rts
    229  78ea
      0  78ea				   .isablank2 PHASE	AI_DrawPart3
      1  78ea		       a9 11		      lda	#AI_DrawPart3
      2  78ec		       85 8c		      sta	aiState
    231  78ee		       60	   .exit      rts
    232  78ef
    233  78ef							;---------------------------------------------------------------------------------------------------
    234  78ef
      0  78ef					      DEF	aiFlipBuffers
      1  78ef				   BANK_aiFlipBuffers SET	_CURRENT_BANK
      2  78ef				   aiFlipBuffers
      3  78ef				   TEMPORARY_VAR SET	Overlay
      4  78ef				   TEMPORARY_OFFSET SET	0
      5  78ef					      SUBROUTINE
    236  78ef					      SUBROUTINE
    237  78ef
    238  78ef							; Initialise for a new move
    239  78ef
    240  78ef		       a5 95		      lda	currentPly
    241  78f1		       85 3e		      sta	SET_BANK_RAM
    242  78f3
    243  78f3		       20 68 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    244  78f6
      0  78f6					      PHASE	AI_GenerateMoves
      1  78f6		       a9 13		      lda	#AI_GenerateMoves
      2  78f8		       85 8c		      sta	aiState
    246  78fa		       60		      rts
    247  78fb
    248  78fb
    249  78fb							;---------------------------------------------------------------------------------------------------
    250  78fb
      0  78fb					      DEF	InitialiseMoveGeneration
      1  78fb				   BANK_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  78fb				   InitialiseMoveGeneration
      3  78fb				   TEMPORARY_VAR SET	Overlay
      4  78fb				   TEMPORARY_OFFSET SET	0
      5  78fb					      SUBROUTINE
    252  78fb					      SUBROUTINE
    253  78fb
    254  78fb		       a5 95		      lda	currentPly
    255  78fd		       85 3e		      sta	SET_BANK_RAM
    256  78ff
    257  78ff		       20 68 f2 	      jsr	NewPlyInitialise
    258  7902
    259  7902		       a5 8b		      lda	savedBank
    260  7904		       85 3f		      sta	SET_BANK
    261  7906		       60		      rts
    262  7907
    263  7907
    264  7907							;---------------------------------------------------------------------------------------------------
    265  7907
      0  7907					      DEF	GenerateOneMove
      1  7907				   BANK_GenerateOneMove SET	_CURRENT_BANK
      2  7907				   GenerateOneMove
      3  7907				   TEMPORARY_VAR SET	Overlay
      4  7907				   TEMPORARY_OFFSET SET	0
      5  7907					      SUBROUTINE
    267  7907					      SUBROUTINE
    268  7907
    269  7907		       a5 95		      lda	currentPly
    270  7909		       85 3e		      sta	SET_BANK_RAM
    271  790b		       20 99 f2 	      jsr	GenerateMovesForNextPiece
    272  790e
    273  790e		       a5 8b		      lda	savedBank
    274  7910		       85 3f		      sta	SET_BANK
    275  7912		       60		      rts
    276  7913
    277  7913
    278  7913							;---------------------------------------------------------------------------------------------------
    279  7913
    280  7913							;TODO...
      0  7913					      DEF	SAFE_LookForCheck
      1  7913				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  7913				   SAFE_LookForCheck
      3  7913				   TEMPORARY_VAR SET	Overlay
      4  7913				   TEMPORARY_OFFSET SET	0
      5  7913					      SUBROUTINE
    282  7913					      SUBROUTINE
    283  7913
    284  7913		       a5 95		      lda	currentPly
    285  7915		       85 3e		      sta	SET_BANK_RAM
    286  7917
    287  7917		       ac f1 f1 	      ldy	moveIndex
    288  791a		       30 0f		      bmi	.failed
    289  791c
    290  791c		       be 00 f1    .scan      ldx	MoveTo,y
    291  791f		       bd 79 f0 	      lda	Board,x
    292  7922		       29 0f		      and	#PIECE_MASK
    293  7924		       c9 07		      cmp	#KING
    294  7926		       f0 04		      beq	.inCheck	; --> CS too
    295  7928		       88		      dey
    296  7929		       10 f1		      bpl	.scan
    297  792b
    298  792b		       18	   .failed    clc
    299  792c
    300  792c		       a5 8b	   .inCheck   lda	savedBank	; CS or CC
    301  792e		       85 3f		      sta	SET_BANK
    302  7930		       60		      rts
    303  7931
    304  7931
    305  7931							;---------------------------------------------------------------------------------------------------
    306  7931
      0  7931					      DEF	aiComputerMove
      1  7931				   BANK_aiComputerMove SET	_CURRENT_BANK
      2  7931				   aiComputerMove
      3  7931				   TEMPORARY_VAR SET	Overlay
      4  7931				   TEMPORARY_OFFSET SET	0
      5  7931					      SUBROUTINE
    308  7931					      SUBROUTINE
    309  7931
    310  7931							; Choose one of the moves
    311  7931
    312  7931		       a5 95		      lda	currentPly
    313  7933		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    314  7935
    315  7935		       a9 ff		      lda	#-1
    316  7937		       cd f1 f1 	      cmp	moveIndex
    317  793a		       f0 0f		      beq	.halted	; no valid moves
    318  793c
    319  793c							;sta fromX12
    320  793c		       85 87		      sta	originX12
    321  793e		       85 86		      sta	toX12
    322  7940
    323  7940		       a5 97		      lda	sideToMove
    324  7942		       10 03		      bpl	.notComputer
    325  7944
    326  7944		       20 e0 f2 	      jsr	MoveViaListAtPly
    327  7947
      0  7947				   .notComputer PHASE	AI_MoveIsSelected
      1  7947		       a9 15		      lda	#AI_MoveIsSelected
      2  7949		       85 8c		      sta	aiState
    329  794b		       60	   .halted    rts
    330  794c
    331  794c
    332  794c							;---------------------------------------------------------------------------------------------------
    333  794c
      0  794c					      DEF	AdjustMaterialPositionalValue
      1  794c				   BANK_AdjustMaterialPositionalValue SET	_CURRENT_BANK
      2  794c				   AdjustMaterialPositionalValue
      3  794c				   TEMPORARY_VAR SET	Overlay
      4  794c				   TEMPORARY_OFFSET SET	0
      5  794c					      SUBROUTINE
    335  794c					      SUBROUTINE
    336  794c
    337  794c							; A move is about to be made, so  adjust material and positional values based on from/to and
    338  794c							; capture.
    339  794c
      0  794c					      VAR	__pval, 2
      1  794c		       00 a0	   __pval     =	TEMPORARY_VAR
      2  794c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  794c
      4  794c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  794c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  794c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  794c					      ENDIF
      8  794c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  794c				  -	      ECHO	"Temporary Variable", __pval, "overflow!"
     10  794c				  -	      ERR
     11  794c					      ENDIF
     12  794c					      LIST	ON
      0  794c					      VAR	__originalPiece, 1
      1  794c		       00 a2	   __originalPiece =	TEMPORARY_VAR
      2  794c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  794c
      4  794c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  794c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  794c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  794c					      ENDIF
      8  794c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  794c				  -	      ECHO	"Temporary Variable", __originalPiece, "overflow!"
     10  794c				  -	      ERR
     11  794c					      ENDIF
     12  794c					      LIST	ON
      0  794c					      VAR	__capturedPiece, 1
      1  794c		       00 a3	   __capturedPiece =	TEMPORARY_VAR
      2  794c				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  794c
      4  794c				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  794c				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  794c				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  794c					      ENDIF
      8  794c				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  794c				  -	      ECHO	"Temporary Variable", __capturedPiece, "overflow!"
     10  794c				  -	      ERR
     11  794c					      ENDIF
     12  794c					      LIST	ON
    343  794c
    344  794c							; fromPiece	 piece doing the move (promoted type)
    345  794c							; fromX12	 current square
    346  794c							; originX12	 starting square
    347  794c							; toX12	 ending square
    348  794c
    349  794c
    350  794c							; get the piece types from the board
    351  794c
    352  794c		       a9 08		      lda	#RAMBANK_MOVES_RAM
    353  794e		       85 3e		      sta	SET_BANK_RAM
    354  7950		       a4 87		      ldy	originX12
    355  7952		       b9 79 f0 	      lda	Board,y
    356  7955		       85 a2		      sta	__originalPiece
    357  7957		       a4 86		      ldy	toX12
    358  7959		       b9 79 f0 	      lda	Board,y
    359  795c		       85 a3		      sta	__capturedPiece
    360  795e
    361  795e							; {
    362  795e							;   adjust the positional value  (originX12 --> fromX12)
    363  795e
    364  795e		       a9 0c		      lda	#BANK_AddPiecePositionValue
    365  7960		       85 3f		      sta	SET_BANK
    366  7962
    367  7962
    368  7962		       a4 86		      ldy	toX12
    369  7964		       a5 98		      lda	fromPiece
    370  7966		       20 20 f0 	      jsr	AddPiecePositionValue	; add pos value for new position
    371  7969
    372  7969
    373  7969		       a5 a2		      lda	__originalPiece
    374  796b		       45 98		      eor	fromPiece	; the new piece
    375  796d		       29 0f		      and	#PIECE_MASK
    376  796f		       f0 08		      beq	.same1	; unchanged, so skip
    377  7971
    378  7971		       a5 98		      lda	fromPiece	; new piece
    379  7973		       29 0f		      and	#PIECE_MASK
    380  7975		       a8		      tay
    381  7976		       20 10 f0 	      jsr	AddPieceMaterialValue
    382  7979
    383  7979				   .same1
    384  7979
    385  7979							; and now the 'subtracts'
    386  7979
      0  7979					      NEGEVAL
      1  7979
      2  7979		       18		      clc
      3  797a		       a5 90		      lda	Evaluation
      4  797c		       49 ff		      eor	#$FF
      5  797e		       69 01		      adc	#1
      6  7980		       85 90		      sta	Evaluation
      7  7982		       a5 91		      lda	Evaluation+1
      8  7984		       49 ff		      eor	#$FF
      9  7986		       69 00		      adc	#0
     10  7988		       85 91		      sta	Evaluation+1
     11  798a
    388  798a
    389  798a		       a4 87		      ldy	originX12
    390  798c		       a5 a2		      lda	__originalPiece
    391  798e		       20 20 f0 	      jsr	AddPiecePositionValue	; remove pos value for original position
    392  7991
    393  7991
    394  7991		       a5 a2		      lda	__originalPiece
    395  7993		       45 98		      eor	fromPiece	; the new piece
    396  7995		       29 0f		      and	#PIECE_MASK
    397  7997		       f0 08		      beq	.same2	; unchanged, so skip
    398  7999
    399  7999		       a5 a2		      lda	__originalPiece
    400  799b		       29 0f		      and	#PIECE_MASK
    401  799d		       a8		      tay
    402  799e		       20 10 f0 	      jsr	AddPieceMaterialValue	; remove material for original type
    403  79a1				   .same2
    404  79a1
      0  79a1					      NEGEVAL
      1  79a1
      2  79a1		       18		      clc
      3  79a2		       a5 90		      lda	Evaluation
      4  79a4		       49 ff		      eor	#$FF
      5  79a6		       69 01		      adc	#1
      6  79a8		       85 90		      sta	Evaluation
      7  79aa		       a5 91		      lda	Evaluation+1
      8  79ac		       49 ff		      eor	#$FF
      9  79ae		       69 00		      adc	#0
     10  79b0		       85 91		      sta	Evaluation+1
     11  79b2
    406  79b2
    407  79b2							; If there's a capture, we adjust the material value
    408  79b2
    409  79b2		       a5 a3		      lda	__capturedPiece
    410  79b4		       29 0f		      and	#PIECE_MASK
    411  79b6		       f0 04		      beq	.noCapture
    412  79b8		       a8		      tay
    413  79b9		       20 10 f0 	      jsr	AddPieceMaterialValue	; -other colour = + my colour!
    414  79bc				   .noCapture
    415  79bc
    416  79bc							; }
    417  79bc		       a5 8b		      lda	savedBank
    418  79be		       85 3f		      sta	SET_BANK
    419  79c0		       60		      rts
    420  79c1
    421  79c1
    422  79c1							;---------------------------------------------------------------------------------------------------
    423  79c1
      0  79c1					      DEF	debug
      1  79c1				   BANK_debug SET	_CURRENT_BANK
      2  79c1				   debug
      3  79c1				   TEMPORARY_VAR SET	Overlay
      4  79c1				   TEMPORARY_OFFSET SET	0
      5  79c1					      SUBROUTINE
    425  79c1					      SUBROUTINE
    426  79c1
    427  79c1							; Use this to trap breakpoints in "unknown" banks. Just "jsr debug" from wherever you want
    428  79c1							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    429  79c1							; you wanted to see, without knowing the bank.
    430  79c1
    431  79c1		       60		      rts
    432  79c2
    433  79c2
    434  79c2							;---------------------------------------------------------------------------------------------------
    435  79c2
      0  79c2					      DEF	SpecialBody
      1  79c2				   BANK_SpecialBody SET	_CURRENT_BANK
      2  79c2				   SpecialBody
      3  79c2				   TEMPORARY_VAR SET	Overlay
      4  79c2				   TEMPORARY_OFFSET SET	0
      5  79c2					      SUBROUTINE
    437  79c2					      SUBROUTINE
    438  79c2
    439  79c2
    440  79c2
    441  79c2							; Handle en-passant captures
    442  79c2							; The (dual-use) FLAG_ENPASSANT will have been cleared if it was set for a home-rank move
    443  79c2							; but if we're here and the flag is still set, then it's an actual en-passant CAPTURE and we
    444  79c2							; need to do the appropriate things...
    445  79c2
    446  79c2
    447  79c2							; {
    448  79c2							; With en-passant flag, it is essentially dual-use.
    449  79c2							; First, it marks if the move is *involved* somehow in an en-passant
    450  79c2							; if the piece has MOVED already, then it's an en-passant capture
    451  79c2							; if it has NOT moved, then it's a pawn leaving home rank, and sets the en-passant square
    452  79c2
    453  79c2		       a4 94		      ldy	enPassantPawn	; save from previous side move
    454  79c4
    455  79c4		       a2 00		      ldx	#0	; (probably) NO en-passant this time
    456  79c6		       a5 98		      lda	fromPiece
    457  79c8		       29 60		      and	#FLAG_ENPASSANT|FLAG_MOVED
    458  79ca		       c9 20		      cmp	#FLAG_ENPASSANT
    459  79cc		       d0 06		      bne	.noep	; HAS moved, or not en-passant
    460  79ce
    461  79ce		       45 98		      eor	fromPiece	; clear FLAG_ENPASSANT
    462  79d0		       85 98		      sta	fromPiece
    463  79d2
    464  79d2		       a6 85		      ldx	fromX12	; this IS an en-passantable opening, so record the square
    465  79d4		       86 94	   .noep      stx	enPassantPawn	; capturable square for en-passant move (or none)
    466  79d6
    467  79d6							; }
    468  79d6
    469  79d6
    470  79d6							; {
    471  79d6							; Check to see if we are doing an actual en-passant capture...
    472  79d6
    473  79d6							; NOTE: If using test boards for debugging, the FLAG_MOVED flag is IMPORTANT
    474  79d6							;  as the en-passant will fail if the taking piece does not have this flag set correctly
    475  79d6
    476  79d6		       a5 98		      lda	fromPiece
    477  79d8		       29 20		      and	#FLAG_ENPASSANT
    478  79da		       f0 1a		      beq	.notEnPassant	; not an en-passant, or it's enpassant by a MOVED piece
    479  79dc
    480  79dc							; Here we are the aggressor and we need to take the pawn 'en passant' fashion
    481  79dc							; y = the square containing the pawn to capture (i.e., previous value of 'enPassantPawn')
    482  79dc
    483  79dc							; Remove the pawn from the board and piecelist, and undraw
    484  79dc
    485  79dc		       84 87		      sty	originX12	; rqd for FixPieceList
    486  79de		       84 80		      sty	squareToDraw
    487  79e0
    488  79e0		       20 4e fd 	      jsr	CopySinglePiece	; undraw captured pawn
    489  79e3
    490  79e3		       a4 87		      ldy	originX12	; taken pawn's square
    491  79e5		       20 25 fa 	      jsr	DeletePiece	; adjust material/position evaluation
    492  79e8
    493  79e8		       a5 97		      lda	sideToMove
    494  79ea		       49 80		      eor	#128
    495  79ec		       0a		      asl		; --> C
    496  79ed		       a9 00		      lda	#0
    497  79ef		       69 09		      adc	#RAMBANK_PLY	; <-- C
    498  79f1		       85 3e		      sta	SET_BANK_RAM
    499  79f3
    500  79f3		       20 b6 f2 	      jsr	FixPieceList	; from the piecelist
    501  79f6
    502  79f6				   .notEnPassant
    503  79f6
    504  79f6							; }
    505  79f6
      0  79f6					      JSROM	CastleFixup
      1  79f6
      2  79f6		       a9 00		      lda	#BANK_CastleFixup
      3  79f8		       85 3f		      sta	SET_BANK
      4  79fa		       20 d5 f0 	      jsr	CastleFixup
    507  79fd
    508  79fd							; Mark the piece as MOVED
    509  79fd
    510  79fd		       a9 08		      lda	#RAMBANK_MOVES_RAM
    511  79ff		       85 3e		      sta	SET_BANK_RAM
    512  7a01		       a4 85		      ldy	fromX12	; final square
    513  7a03		       b9 79 f0 	      lda	Board,y
    514  7a06		       29 df		      and	#~FLAG_ENPASSANT	; probably superflous
    515  7a08		       09 40		      ora	#FLAG_MOVED
    516  7a0a		       99 79 f4 	      sta	Board+RAM_WRITE,y
    517  7a0d
    518  7a0d
    519  7a0d		       60		      rts
    520  7a0e
    521  7a0e
    522  7a0e							;---------------------------------------------------------------------------------------------------
    523  7a0e
      0  7a0e					      DEF	aiSpecialMoveFixup
      1  7a0e				   BANK_aiSpecialMoveFixup SET	_CURRENT_BANK
      2  7a0e				   aiSpecialMoveFixup
      3  7a0e				   TEMPORARY_VAR SET	Overlay
      4  7a0e				   TEMPORARY_OFFSET SET	0
      5  7a0e					      SUBROUTINE
    525  7a0e					      SUBROUTINE
    526  7a0e
    527  7a0e		       ad 84 02 	      lda	INTIM
    528  7a11		       c9 2d		      cmp	#SPEEDOF_COPYSINGLEPIECE+4
    529  7a13		       b0 01		      bcs	.cont
    530  7a15		       60		      rts
    531  7a16
    532  7a16				   .cont
      0  7a16					      PHASE	AI_FlipBuffers
      1  7a16		       a9 12		      lda	#AI_FlipBuffers
      2  7a18		       85 8c		      sta	aiState
    534  7a1a
    535  7a1a
    536  7a1a		       20 c2 f9 	      jsr	SpecialBody
    537  7a1d
    538  7a1d
    539  7a1d
    540  7a1d				  -	      if	ASSERTS
    541  7a1d				  -			;		      JSROM_SAFE DIAGNOSTIC_checkPieces
    542  7a1d					      endif
    543  7a1d
    544  7a1d		       60		      rts
    545  7a1e
    546  7a1e
    547  7a1e							;---------------------------------------------------------------------------------------------------
    548  7a1e
      0  7a1e					      DEF	HeadlessMove
      1  7a1e				   BANK_HeadlessMove SET	_CURRENT_BANK
      2  7a1e				   HeadlessMove
      3  7a1e				   TEMPORARY_VAR SET	Overlay
      4  7a1e				   TEMPORARY_OFFSET SET	0
      5  7a1e					      SUBROUTINE
    550  7a1e					      SUBROUTINE
    551  7a1e
    552  7a1e							; Do a move without any GUI stuff
    553  7a1e
    554  7a1e							; fromPiece	 piece doing the move
    555  7a1e							; fromSquare	 starting square BASE64
    556  7a1e							; toSquare	 ending square BASE64
    557  7a1e							; fromX12	 current square X12
    558  7a1e							; originX12	 starting square X12
    559  7a1e							; toX12	 ending square X12
    560  7a1e
    561  7a1e
    562  7a1e		       20 4c f9 	      jsr	AdjustMaterialPositionalValue
    563  7a21		       20 c2 f9 	      jsr	SpecialBody	;TODO: stop draw of enpassant delete
    564  7a24
    565  7a24		       60		      rts
    566  7a25
    567  7a25
    568  7a25							;---------------------------------------------------------------------------------------------------
    569  7a25
      0  7a25					      DEF	DeletePiece
      1  7a25				   BANK_DeletePiece SET	_CURRENT_BANK
      2  7a25				   DeletePiece
      3  7a25				   TEMPORARY_VAR SET	Overlay
      4  7a25				   TEMPORARY_OFFSET SET	0
      5  7a25					      SUBROUTINE
    571  7a25					      SUBROUTINE
    572  7a25
    573  7a25							; Based on piece square, adjust material and position value with piece deleted
    574  7a25							; y = piece square
    575  7a25
      0  7a25					      VAR	__y, 1
      1  7a25		       00 a0	   __y	      =	TEMPORARY_VAR
      2  7a25				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7a25
      4  7a25				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7a25				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7a25				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7a25					      ENDIF
      8  7a25				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7a25				  -	      ECHO	"Temporary Variable", __y, "overflow!"
     10  7a25				  -	      ERR
     11  7a25					      ENDIF
     12  7a25					      LIST	ON
      0  7a25					      VAR	__col, 1
      1  7a25		       00 a1	   __col      =	TEMPORARY_VAR
      2  7a25				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7a25
      4  7a25				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7a25				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7a25				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7a25					      ENDIF
      8  7a25				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7a25				  -	      ECHO	"Temporary Variable", __col, "overflow!"
     10  7a25				  -	      ERR
     11  7a25					      ENDIF
     12  7a25					      LIST	ON
    578  7a25
    579  7a25		       84 a0		      sty	__y
    580  7a27
    581  7a27		       a9 08		      lda	#RAMBANK_MOVES_RAM
    582  7a29		       85 3e		      sta	SET_BANK_RAM
    583  7a2b		       b9 79 f0 	      lda	Board,y	; piece type
    584  7a2e
    585  7a2e		       85 a1		      sta	__col
    586  7a30		       29 0f		      and	#PIECE_MASK
    587  7a32		       a8		      tay
    588  7a33
    589  7a33							; NEGEVAL
    590  7a33
    591  7a33		       a9 0c		      lda	#BANK_AddPieceMaterialValue
    592  7a35		       85 3f		      sta	SET_BANK
    593  7a37		       20 10 f0 	      jsr	AddPieceMaterialValue	; adding for opponent = taking
    594  7a3a
    595  7a3a		       a5 a1		      lda	__col
    596  7a3c		       a4 a0		      ldy	__y
    597  7a3e		       20 20 f0 	      jsr	AddPiecePositionValue	; adding for opponent = taking
    598  7a41
    599  7a41							; NEGEVAL
    600  7a41
    601  7a41		       60		      rts
    602  7a42
    603  7a42
    604  7a42							;---------------------------------------------------------------------------------------------------
    605  7a42
      0  7a42					      DEF	MoveForSinglePiece
      1  7a42				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  7a42				   MoveForSinglePiece
      3  7a42				   TEMPORARY_VAR SET	Overlay
      4  7a42				   TEMPORARY_OFFSET SET	0
      5  7a42					      SUBROUTINE
    607  7a42					      SUBROUTINE
    608  7a42
    609  7a42
    610  7a42		       a9 08		      lda	#RAMBANK_MOVES_RAM
    611  7a44		       85 3e		      sta	SET_BANK_RAM
    612  7a46
    613  7a46		       a6 93		      ldx	currentSquare	; used in move handlers
    614  7a48		       bd 79 f0 	      lda	Board,x
    615  7a4b		       85 92		      sta	currentPiece
    616  7a4d
    617  7a4d				  -	      IF	ASSERTS
    618  7a4d				  -	      SUBROUTINE
    619  7a4d				  -			; DEBUG: Make sure we're looking at correct colour
    620  7a4d				  -	      eor	sideToMove
    621  7a4d				  -.lock      bmi	.lock
    622  7a4d				  -	      lda	currentPiece
    623  7a4d					      ENDIF
    624  7a4d
    625  7a4d		       29 0f		      and	#PIECE_MASK
    626  7a4f		       a8		      tay
    627  7a50
    628  7a50				  -	      IF	ASSERTS
    629  7a50				  -			; DEBUG: Make sure we have an actual piece, not an empty square
    630  7a50				  -	      SUBROUTINE
    631  7a50				  -.lock      beq	.lock	; catch errors
    632  7a50					      ENDIF
    633  7a50
      0  7a50					      VAR	__vector, 2
      1  7a50		       00 a0	   __vector   =	TEMPORARY_VAR
      2  7a50				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  7a50
      4  7a50				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7a50				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7a50				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7a50					      ENDIF
      8  7a50				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7a50				  -	      ECHO	"Temporary Variable", __vector, "overflow!"
     10  7a50				  -	      ERR
     11  7a50					      ENDIF
     12  7a50					      LIST	ON
    635  7a50
    636  7a50		       b9 62 fa 	      lda	HandlerVectorLO-1,y
    637  7a53		       85 a0		      sta	__vector
    638  7a55		       b9 69 fa 	      lda	HandlerVectorHI-1,y
    639  7a58		       85 a1		      sta	__vector+1
    640  7a5a		       6c a0 00 	      jmp	(__vector)
    641  7a5d
    642  7a5d		       a5 95	   MoveReturn lda	currentPly
    643  7a5f		       85 3e		      sta	SET_BANK_RAM
    644  7a61
    645  7a61		       60		      rts
    646  7a62
    647  7a62					      MAC	handlevec
    648  7a62					      .byte	{1}Handle_WHITE_PAWN	; 1
    649  7a62					      .byte	{1}Handle_BLACK_PAWN	; 2
    650  7a62					      .byte	{1}Handle_KNIGHT	; 3
    651  7a62					      .byte	{1}Handle_BISHOP	; 4
    652  7a62					      .byte	{1}Handle_ROOK	; 5
    653  7a62					      .byte	{1}Handle_QUEEN	; 6
    654  7a62					      .byte	{1}Handle_KING	; 7
    655  7a62					      ENDM
    656  7a62
    657  7a62
      0  7a62					      ALLOCATE	Handlers, 15
      0  7a62					      OPTIONAL_PAGEBREAK	"Table", 15
     12  7a62					      LIST	ON
      0  7a62					      DEF	Handlers
      1  7a62				   BANK_Handlers SET	_CURRENT_BANK
      2  7a62				   Handlers
      3  7a62				   TEMPORARY_VAR SET	Overlay
      4  7a62				   TEMPORARY_OFFSET SET	0
      5  7a62					      SUBROUTINE
    659  7a62
    660  7a62		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    661  7a63
      0  7a63				   HandlerVectorLO HANDLEVEC	<
      1  7a63		       9a		      .byte.b	<Handle_WHITE_PAWN
      2  7a64		       5e		      .byte.b	<Handle_BLACK_PAWN
      3  7a65		       44		      .byte.b	<Handle_KNIGHT
      4  7a66		       a0		      .byte.b	<Handle_BISHOP
      5  7a67		       03		      .byte.b	<Handle_ROOK
      6  7a68		       dd		      .byte.b	<Handle_QUEEN
      7  7a69		       66		      .byte.b	<Handle_KING
      0  7a6a				   HandlerVectorHI HANDLEVEC	>
      1  7a6a		       fa		      .byte.b	>Handle_WHITE_PAWN
      2  7a6b		       fb		      .byte.b	>Handle_BLACK_PAWN
      3  7a6c		       f3		      .byte.b	>Handle_KNIGHT
      4  7a6d		       f1		      .byte.b	>Handle_BISHOP
      5  7a6e		       f2		      .byte.b	>Handle_ROOK
      6  7a6f		       f0		      .byte.b	>Handle_QUEEN
      7  7a70		       f2		      .byte.b	>Handle_KING
    664  7a71
    665  7a71							;---------------------------------------------------------------------------------------------------
    666  7a71
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  7a71					      include	"Handler_PAWN.asm"
      1  7a71							; Copyright (C)2020 Andrew Davie
      2  7a71							; Pawn move handlers
      3  7a71
      4  7a71							;---------------------------------------------------------------------------------------------------
      5  7a71							; WHITE PAWN
      6  7a71							;---------------------------------------------------------------------------------------------------
      7  7a71
      8  7a71		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  7a71		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  7a71
     11  7a71							;---------------------------------------------------------------------------------------------------
     12  7a71
     13  7a71					      MAC	en_passant
     14  7a71					      SUBROUTINE
     15  7a71							; {1} = _LEFT or _RIGHT
     16  7a71
     17  7a71					      ldx	currentSquare
     18  7a71					      ldy	ValidSquare+{1},x
     19  7a71					      cpy	enPassantPawn
     20  7a71					      bne	.invalid
     21  7a71					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     22  7a71					      lda	Board,y
     23  7a71					      bne	.invalid
     24  7a71					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     25  7a71				   .invalid
     26  7a71					      ENDM
     27  7a71
     28  7a71							;---------------------------------------------------------------------------------------------------
     29  7a71
     30  7a71					      MAC	promote_pawn
     31  7a71							;SUBROUTINE
     32  7a71
     33  7a71							;{1} = BLACK or WHITE
     34  7a71
     35  7a71					      VAR	__temp, 1
     36  7a71
     37  7a71					      sty	__temp
     38  7a71					      lda	#{1}|QUEEN
     39  7a71					      sta	currentPiece
     40  7a71					      jsr	AddMove
     41  7a71
     42  7a71					      lda	#{1}|ROOK
     43  7a71					      sta	currentPiece
     44  7a71					      ldy	__temp
     45  7a71					      jsr	AddMove
     46  7a71
     47  7a71					      lda	#{1}|BISHOP
     48  7a71					      sta	currentPiece
     49  7a71					      ldy	__temp
     50  7a71					      jsr	AddMove
     51  7a71
     52  7a71					      lda	#{1}|KNIGHT
     53  7a71					      sta	currentPiece
     54  7a71					      ldy	__temp
     55  7a71					      jsr	AddMove
     56  7a71
     57  7a71					      IF	{1} = WHITE
     58  7a71					      lda	#WHITE|WP
     59  7a71					      ENDIF
     60  7a71					      IF	{1} = BLACK
     61  7a71					      lda	#BLACK|BP
     62  7a71					      ENDIF
     63  7a71					      sta	currentPiece
     64  7a71					      ENDM
     65  7a71
     66  7a71							;---------------------------------------------------------------------------------------------------
     67  7a71
     68  7a71					      MAC	move_or_promote_pawn
     69  7a71							;SUBROUTINE
     70  7a71							; {1} = BLACK or WHITE
     71  7a71
     72  7a71					      IF	{1} = WHITE
     73  7a71					      cpy	#90	; last rank?
     74  7a71					      bcc	.standard
     75  7a71					      jsr	PromoteWhitePawn
     76  7a71					      jmp	.pMoved
     77  7a71					      ENDIF
     78  7a71
     79  7a71					      IF	{1} = BLACK
     80  7a71					      cpy	#30	; last rank?
     81  7a71					      bcs	.standard
     82  7a71					      jsr	PromoteBlackPawn
     83  7a71					      jmp	.pMoved
     84  7a71					      ENDIF
     85  7a71
     86  7a71				   .standard  jsr	AddMove	; add +1UP move
     87  7a71				   .pMoved
     88  7a71
     89  7a71					      ENDM
     90  7a71
     91  7a71							;---------------------------------------------------------------------------------------------------
     92  7a71
     93  7a71					      MAC	take
     94  7a71							;SUBROUTINE
     95  7a71							; {1} = capture square offset
     96  7a71
     97  7a71					      ldx	currentSquare
     98  7a71					      ldy	ValidSquare+{1},x
     99  7a71					      bmi	.invalid
    100  7a71					      lda	Board,y
    101  7a71					      beq	.invalid	; square empty
    102  7a71					      eor	currentPiece
    103  7a71					      bpl	.invalid	; same colour
    104  7a71
    105  7a71					      MOVE_OR_PROMOTE_PAWN	{2}
    106  7a71				   .invalid
    107  7a71					      ENDM
    108  7a71
    109  7a71							;---------------------------------------------------------------------------------------------------
    110  7a71
      0  7a71					      DEF	PromoteWhitePawn
      1  7a71				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7a71				   PromoteWhitePawn
      3  7a71				   TEMPORARY_VAR SET	Overlay
      4  7a71				   TEMPORARY_OFFSET SET	0
      5  7a71					      SUBROUTINE
    112  7a71					      SUBROUTINE
    113  7a71
      0  7a71					      PROMOTE_PAWN	WHITE
      1  7a71
      2  7a71
      3  7a71
      4  7a71
      0  7a71					      VAR	__temp, 1
      1  7a71		       00 a0	   __temp     =	TEMPORARY_VAR
      2  7a71				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7a71
      4  7a71				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7a71				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7a71				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7a71					      ENDIF
      8  7a71				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7a71				  -	      ECHO	"Temporary Variable", __temp, "overflow!"
     10  7a71				  -	      ERR
     11  7a71					      ENDIF
     12  7a71					      LIST	ON
      6  7a71
      7  7a71		       84 a0		      sty	__temp
      8  7a73		       a9 06		      lda	#WHITE|QUEEN
      9  7a75		       85 92		      sta	currentPiece
     10  7a77		       20 f9 fb 	      jsr	AddMove
     11  7a7a
     12  7a7a		       a9 05		      lda	#WHITE|ROOK
     13  7a7c		       85 92		      sta	currentPiece
     14  7a7e		       a4 a0		      ldy	__temp
     15  7a80		       20 f9 fb 	      jsr	AddMove
     16  7a83
     17  7a83		       a9 04		      lda	#WHITE|BISHOP
     18  7a85		       85 92		      sta	currentPiece
     19  7a87		       a4 a0		      ldy	__temp
     20  7a89		       20 f9 fb 	      jsr	AddMove
     21  7a8c
     22  7a8c		       a9 03		      lda	#WHITE|KNIGHT
     23  7a8e		       85 92		      sta	currentPiece
     24  7a90		       a4 a0		      ldy	__temp
     25  7a92		       20 f9 fb 	      jsr	AddMove
     26  7a95
     27  7a95					      IF	WHITE = WHITE
     28  7a95		       a9 01		      lda	#WHITE|WP
     29  7a97					      ENDIF
     30  7a97				  -	      IF	WHITE = BLACK
     31  7a97				  -	      lda	#BLACK|BP
     32  7a97					      ENDIF
     33  7a97		       85 92		      sta	currentPiece
    115  7a99		       60		      rts
    116  7a9a
    117  7a9a							;---------------------------------------------------------------------------------------------------
    118  7a9a
      0  7a9a					      DEF	Handle_WHITE_PAWN
      1  7a9a				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7a9a				   Handle_WHITE_PAWN
      3  7a9a				   TEMPORARY_VAR SET	Overlay
      4  7a9a				   TEMPORARY_OFFSET SET	0
      5  7a9a					      SUBROUTINE
    120  7a9a					      SUBROUTINE
    121  7a9a
    122  7a9a		       bc 1f f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    123  7a9d		       b9 79 f0 	      lda	Board,y
    124  7aa0		       d0 24		      bne	.pMoved	; occupied
    125  7aa2
    126  7aa2							; we may need to promote the pawn
    127  7aa2							; All possibilites (Q/R/B/N) are added as individual moves
    128  7aa2
      0  7aa2					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7aa2
      2  7aa2
      3  7aa2
      4  7aa2					      IF	WHITE = WHITE
      5  7aa2		       c0 5a		      cpy	#90
      6  7aa4		       90 06		      bcc	.standard
      7  7aa6		       20 71 fa 	      jsr	PromoteWhitePawn
      8  7aa9		       4c af fa 	      jmp	.pMoved
      9  7aac					      ENDIF
     10  7aac
     11  7aac				  -	      IF	WHITE = BLACK
     12  7aac				  -	      cpy	#30
     13  7aac				  -	      bcs	.standard
     14  7aac				  -	      jsr	PromoteBlackPawn
     15  7aac				  -	      jmp	.pMoved
     16  7aac					      ENDIF
     17  7aac
     18  7aac		       20 f9 fb    .standard  jsr	AddMove
     19  7aaf				   .pMoved
     20  7aaf
    130  7aaf
    131  7aaf							; the +2 move off the home rank...
    132  7aaf
    133  7aaf		       a6 93		      ldx	currentSquare
    134  7ab1		       e0 28		      cpx	#WHITE_HOME_ROW
    135  7ab3		       b0 11		      bcs	.pMoved	; pawn has moved so can't do +2
    136  7ab5		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    137  7ab8		       b9 79 f0 	      lda	Board,y
    138  7abb		       d0 09		      bne	.pMoved	; destination square occupied
    139  7abd
    140  7abd		       a5 92		      lda	currentPiece
    141  7abf		       09 20		      ora	#FLAG_ENPASSANT
    142  7ac1		       85 92		      sta	currentPiece	; GENERATE en-passant opportunity
    143  7ac3
    144  7ac3		       20 f9 fb 	      jsr	AddMove	; add the +2UP move off home row
    145  7ac6
    146  7ac6				   .pMoved
    147  7ac6
    148  7ac6							; regular captures...
    149  7ac6
      0  7ac6					      TAKE	_UP+_LEFT, WHITE
      1  7ac6
      2  7ac6
      3  7ac6
      4  7ac6		       a6 93		      ldx	currentSquare
      5  7ac8		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT,x
      6  7acb		       30 16		      bmi	.invalid
      7  7acd		       b9 79 f0 	      lda	Board,y
      8  7ad0		       f0 11		      beq	.invalid
      9  7ad2		       45 92		      eor	currentPiece
     10  7ad4		       10 0d		      bpl	.invalid
     11  7ad6
      0  7ad6					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7ad6
      2  7ad6
      3  7ad6
      4  7ad6					      IF	WHITE = WHITE
      5  7ad6		       c0 5a		      cpy	#90
      6  7ad8		       90 06		      bcc	.standard
      7  7ada		       20 71 fa 	      jsr	PromoteWhitePawn
      8  7add		       4c e3 fa 	      jmp	.pMoved
      9  7ae0					      ENDIF
     10  7ae0
     11  7ae0				  -	      IF	WHITE = BLACK
     12  7ae0				  -	      cpy	#30
     13  7ae0				  -	      bcs	.standard
     14  7ae0				  -	      jsr	PromoteBlackPawn
     15  7ae0				  -	      jmp	.pMoved
     16  7ae0					      ENDIF
     17  7ae0
     18  7ae0		       20 f9 fb    .standard  jsr	AddMove
     19  7ae3				   .pMoved
     20  7ae3
     13  7ae3				   .invalid
      0  7ae3					      TAKE	_UP+_RIGHT, WHITE
      1  7ae3
      2  7ae3
      3  7ae3
      4  7ae3		       a6 93		      ldx	currentSquare
      5  7ae5		       bc 20 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      6  7ae8		       30 16		      bmi	.invalid
      7  7aea		       b9 79 f0 	      lda	Board,y
      8  7aed		       f0 11		      beq	.invalid
      9  7aef		       45 92		      eor	currentPiece
     10  7af1		       10 0d		      bpl	.invalid
     11  7af3
      0  7af3					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7af3
      2  7af3
      3  7af3
      4  7af3					      IF	WHITE = WHITE
      5  7af3		       c0 5a		      cpy	#90
      6  7af5		       90 06		      bcc	.standard
      7  7af7		       20 71 fa 	      jsr	PromoteWhitePawn
      8  7afa		       4c 00 fb 	      jmp	.pMoved
      9  7afd					      ENDIF
     10  7afd
     11  7afd				  -	      IF	WHITE = BLACK
     12  7afd				  -	      cpy	#30
     13  7afd				  -	      bcs	.standard
     14  7afd				  -	      jsr	PromoteBlackPawn
     15  7afd				  -	      jmp	.pMoved
     16  7afd					      ENDIF
     17  7afd
     18  7afd		       20 f9 fb    .standard  jsr	AddMove
     19  7b00				   .pMoved
     20  7b00
     13  7b00				   .invalid
    152  7b00
    153  7b00
    154  7b00							; en-passant captures...
    155  7b00
    156  7b00		       a5 94		      lda	enPassantPawn
    157  7b02		       f0 2e		      beq	.noEnPassant	; previous move (opponent) enpassant square?
    158  7b04
    159  7b04		       a5 92		      lda	currentPiece
    160  7b06		       09 20		      ora	#FLAG_ENPASSANT
    161  7b08		       85 92		      sta	currentPiece	; CONSUME en-passant opportunity
    162  7b0a
      0  7b0a					      EN_PASSANT	_LEFT, _UP
      1  7b0a					      SUBROUTINE
      2  7b0a
      3  7b0a
      4  7b0a		       a6 93		      ldx	currentSquare
      5  7b0c		       bc 14 f0 	      ldy	ValidSquare+_LEFT,x
      6  7b0f		       c4 94		      cpy	enPassantPawn
      7  7b11		       d0 0b		      bne	.invalid
      8  7b13		       bc 1e f0 	      ldy	ValidSquare+_LEFT+_UP,x
      9  7b16		       b9 79 f0 	      lda	Board,y
     10  7b19		       d0 03		      bne	.invalid
     11  7b1b		       20 f9 fb 	      jsr	AddMove
     12  7b1e				   .invalid
      0  7b1e					      EN_PASSANT	_RIGHT, _UP
      1  7b1e					      SUBROUTINE
      2  7b1e
      3  7b1e
      4  7b1e		       a6 93		      ldx	currentSquare
      5  7b20		       bc 16 f0 	      ldy	ValidSquare+_RIGHT,x
      6  7b23		       c4 94		      cpy	enPassantPawn
      7  7b25		       d0 0b		      bne	.invalid
      8  7b27		       bc 20 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      9  7b2a		       b9 79 f0 	      lda	Board,y
     10  7b2d		       d0 03		      bne	.invalid
     11  7b2f		       20 f9 fb 	      jsr	AddMove
     12  7b32				   .invalid
    165  7b32
    166  7b32		       4c 5d fa    .noEnPassant jmp	MoveReturn
    167  7b35
    168  7b35
    169  7b35							;---------------------------------------------------------------------------------------------------
    170  7b35							; BLACK PAWN
    171  7b35							;---------------------------------------------------------------------------------------------------
    172  7b35
      0  7b35					      DEF	PromoteBlackPawn
      1  7b35				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7b35				   PromoteBlackPawn
      3  7b35				   TEMPORARY_VAR SET	Overlay
      4  7b35				   TEMPORARY_OFFSET SET	0
      5  7b35					      SUBROUTINE
    174  7b35					      SUBROUTINE
    175  7b35
      0  7b35					      PROMOTE_PAWN	BLACK
      1  7b35
      2  7b35
      3  7b35
      4  7b35
      0  7b35					      VAR	__temp, 1
      1  7b35		       00 a0	   __temp     =	TEMPORARY_VAR
      2  7b35				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7b35
      4  7b35				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7b35				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7b35				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7b35					      ENDIF
      8  7b35				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7b35				  -	      ECHO	"Temporary Variable", __temp, "overflow!"
     10  7b35				  -	      ERR
     11  7b35					      ENDIF
     12  7b35					      LIST	ON
      6  7b35
      7  7b35		       84 a0		      sty	__temp
      8  7b37		       a9 86		      lda	#BLACK|QUEEN
      9  7b39		       85 92		      sta	currentPiece
     10  7b3b		       20 f9 fb 	      jsr	AddMove
     11  7b3e
     12  7b3e		       a9 85		      lda	#BLACK|ROOK
     13  7b40		       85 92		      sta	currentPiece
     14  7b42		       a4 a0		      ldy	__temp
     15  7b44		       20 f9 fb 	      jsr	AddMove
     16  7b47
     17  7b47		       a9 84		      lda	#BLACK|BISHOP
     18  7b49		       85 92		      sta	currentPiece
     19  7b4b		       a4 a0		      ldy	__temp
     20  7b4d		       20 f9 fb 	      jsr	AddMove
     21  7b50
     22  7b50		       a9 83		      lda	#BLACK|KNIGHT
     23  7b52		       85 92		      sta	currentPiece
     24  7b54		       a4 a0		      ldy	__temp
     25  7b56		       20 f9 fb 	      jsr	AddMove
     26  7b59
     27  7b59				  -	      IF	BLACK = WHITE
     28  7b59				  -	      lda	#WHITE|WP
     29  7b59					      ENDIF
     30  7b59					      IF	BLACK = BLACK
     31  7b59		       a9 82		      lda	#BLACK|BP
     32  7b5b					      ENDIF
     33  7b5b		       85 92		      sta	currentPiece
    177  7b5d		       60		      rts
    178  7b5e
      0  7b5e					      DEF	Handle_BLACK_PAWN
      1  7b5e				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7b5e				   Handle_BLACK_PAWN
      3  7b5e				   TEMPORARY_VAR SET	Overlay
      4  7b5e				   TEMPORARY_OFFSET SET	0
      5  7b5e					      SUBROUTINE
    180  7b5e					      SUBROUTINE
    181  7b5e
    182  7b5e		       bc 0b f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    183  7b61		       b9 79 f0 	      lda	Board,y
    184  7b64		       d0 24		      bne	.pMoved	; occupied
    185  7b66
    186  7b66
    187  7b66							; we may need to promote the pawn
    188  7b66							; All possibilites (Q/R/B/N) are added as individual moves
    189  7b66
      0  7b66					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7b66
      2  7b66
      3  7b66
      4  7b66				  -	      IF	BLACK = WHITE
      5  7b66				  -	      cpy	#90
      6  7b66				  -	      bcc	.standard
      7  7b66				  -	      jsr	PromoteWhitePawn
      8  7b66				  -	      jmp	.pMoved
      9  7b66					      ENDIF
     10  7b66
     11  7b66					      IF	BLACK = BLACK
     12  7b66		       c0 1e		      cpy	#30
     13  7b68		       b0 06		      bcs	.standard
     14  7b6a		       20 35 fb 	      jsr	PromoteBlackPawn
     15  7b6d		       4c 73 fb 	      jmp	.pMoved
     16  7b70					      ENDIF
     17  7b70
     18  7b70		       20 f9 fb    .standard  jsr	AddMove
     19  7b73				   .pMoved
     20  7b73
    191  7b73
    192  7b73							; the +2 move off the home rank...
    193  7b73
    194  7b73		       a6 93		      ldx	currentSquare
    195  7b75		       e0 52		      cpx	#BLACK_HOME_ROW
    196  7b77		       90 11		      bcc	.pMoved	; pawn has moved so can't do +2
    197  7b79
    198  7b79
    199  7b79		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    200  7b7c		       b9 79 f0 	      lda	Board,y
    201  7b7f		       d0 09		      bne	.pMoved	; destination square occupied
    202  7b81
    203  7b81		       a5 92		      lda	currentPiece
    204  7b83		       09 20		      ora	#FLAG_ENPASSANT
    205  7b85		       85 92		      sta	currentPiece	; CAN en-passant
    206  7b87
    207  7b87		       20 f9 fb 	      jsr	AddMove	; add the +2DOWN move off home row
    208  7b8a
    209  7b8a				   .pMoved
    210  7b8a
    211  7b8a							; regular captures... (with promotion)
    212  7b8a
      0  7b8a					      TAKE	_DOWN+_LEFT, BLACK
      1  7b8a
      2  7b8a
      3  7b8a
      4  7b8a		       a6 93		      ldx	currentSquare
      5  7b8c		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      6  7b8f		       30 16		      bmi	.invalid
      7  7b91		       b9 79 f0 	      lda	Board,y
      8  7b94		       f0 11		      beq	.invalid
      9  7b96		       45 92		      eor	currentPiece
     10  7b98		       10 0d		      bpl	.invalid
     11  7b9a
      0  7b9a					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7b9a
      2  7b9a
      3  7b9a
      4  7b9a				  -	      IF	BLACK = WHITE
      5  7b9a				  -	      cpy	#90
      6  7b9a				  -	      bcc	.standard
      7  7b9a				  -	      jsr	PromoteWhitePawn
      8  7b9a				  -	      jmp	.pMoved
      9  7b9a					      ENDIF
     10  7b9a
     11  7b9a					      IF	BLACK = BLACK
     12  7b9a		       c0 1e		      cpy	#30
     13  7b9c		       b0 06		      bcs	.standard
     14  7b9e		       20 35 fb 	      jsr	PromoteBlackPawn
     15  7ba1		       4c a7 fb 	      jmp	.pMoved
     16  7ba4					      ENDIF
     17  7ba4
     18  7ba4		       20 f9 fb    .standard  jsr	AddMove
     19  7ba7				   .pMoved
     20  7ba7
     13  7ba7				   .invalid
      0  7ba7					      TAKE	_DOWN+_RIGHT, BLACK
      1  7ba7
      2  7ba7
      3  7ba7
      4  7ba7		       a6 93		      ldx	currentSquare
      5  7ba9		       bc 0c f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      6  7bac		       30 16		      bmi	.invalid
      7  7bae		       b9 79 f0 	      lda	Board,y
      8  7bb1		       f0 11		      beq	.invalid
      9  7bb3		       45 92		      eor	currentPiece
     10  7bb5		       10 0d		      bpl	.invalid
     11  7bb7
      0  7bb7					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bb7
      2  7bb7
      3  7bb7
      4  7bb7				  -	      IF	BLACK = WHITE
      5  7bb7				  -	      cpy	#90
      6  7bb7				  -	      bcc	.standard
      7  7bb7				  -	      jsr	PromoteWhitePawn
      8  7bb7				  -	      jmp	.pMoved
      9  7bb7					      ENDIF
     10  7bb7
     11  7bb7					      IF	BLACK = BLACK
     12  7bb7		       c0 1e		      cpy	#30
     13  7bb9		       b0 06		      bcs	.standard
     14  7bbb		       20 35 fb 	      jsr	PromoteBlackPawn
     15  7bbe		       4c c4 fb 	      jmp	.pMoved
     16  7bc1					      ENDIF
     17  7bc1
     18  7bc1		       20 f9 fb    .standard  jsr	AddMove
     19  7bc4				   .pMoved
     20  7bc4
     13  7bc4				   .invalid
    215  7bc4
    216  7bc4							; en-passant captures...
    217  7bc4
    218  7bc4		       a5 94		      lda	enPassantPawn
    219  7bc6		       f0 2e		      beq	.noEnPassant	; was last move en-passantable?
    220  7bc8
    221  7bc8		       a5 92		      lda	currentPiece
    222  7bca		       09 20		      ora	#FLAG_ENPASSANT
    223  7bcc		       85 92		      sta	currentPiece	; any en-passant move added will have flag set
    224  7bce
      0  7bce					      EN_PASSANT	_LEFT, _DOWN
      1  7bce					      SUBROUTINE
      2  7bce
      3  7bce
      4  7bce		       a6 93		      ldx	currentSquare
      5  7bd0		       bc 14 f0 	      ldy	ValidSquare+_LEFT,x
      6  7bd3		       c4 94		      cpy	enPassantPawn
      7  7bd5		       d0 0b		      bne	.invalid
      8  7bd7		       bc 0a f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      9  7bda		       b9 79 f0 	      lda	Board,y
     10  7bdd		       d0 03		      bne	.invalid
     11  7bdf		       20 f9 fb 	      jsr	AddMove
     12  7be2				   .invalid
      0  7be2					      EN_PASSANT	_RIGHT, _DOWN
      1  7be2					      SUBROUTINE
      2  7be2
      3  7be2
      4  7be2		       a6 93		      ldx	currentSquare
      5  7be4		       bc 16 f0 	      ldy	ValidSquare+_RIGHT,x
      6  7be7		       c4 94		      cpy	enPassantPawn
      7  7be9		       d0 0b		      bne	.invalid
      8  7beb		       bc 0c f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      9  7bee		       b9 79 f0 	      lda	Board,y
     10  7bf1		       d0 03		      bne	.invalid
     11  7bf3		       20 f9 fb 	      jsr	AddMove
     12  7bf6				   .invalid
    227  7bf6
    228  7bf6				   .noEnPassant
    229  7bf6		       4c 5d fa 	      jmp	MoveReturn
    230  7bf9
    231  7bf9							; EOF
------- FILE BANK_FIXED.asm
    668  7bf9
    669  7bf9							;---------------------------------------------------------------------------------------------------
    670  7bf9
      0  7bf9					      DEF	AddMove
      1  7bf9				   BANK_AddMove SET	_CURRENT_BANK
      2  7bf9				   AddMove
      3  7bf9				   TEMPORARY_VAR SET	Overlay
      4  7bf9				   TEMPORARY_OFFSET SET	0
      5  7bf9					      SUBROUTINE
    672  7bf9					      SUBROUTINE
    673  7bf9							; =57 including call
    674  7bf9
    675  7bf9							; add square in y register to movelist as destination (X12 format)
    676  7bf9							; currentPiece = piece moving
    677  7bf9							; currentSquare = start square (X12)
    678  7bf9
    679  7bf9		       a5 95		      lda	currentPly	; 3
    680  7bfb		       85 3e		      sta	SET_BANK_RAM	; 3
    681  7bfd
    682  7bfd							; [y]		     to square (X12)
    683  7bfd							; currentSquare     from square (X12)
    684  7bfd							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    685  7bfd
    686  7bfd		       98		      tya		; 2
    687  7bfe
    688  7bfe		       ac f1 f1 	      ldy	moveIndex	; 3
    689  7c01		       c8		      iny		; 2
    690  7c02		       8c f1 f5 	      sty	moveIndex+RAM_WRITE	; 4
    691  7c05
    692  7c05		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    693  7c08		       aa		      tax		; 2 new square (for projections)
    694  7c09
    695  7c09		       a5 93		      lda	currentSquare	; 3
    696  7c0b		       99 75 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    697  7c0e		       a5 92		      lda	currentPiece	; 3
    698  7c10		       99 78 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    699  7c13
    700  7c13		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2 TODO: NOT NEEDED IF FIXED BANK CALLED THIS
    701  7c15		       85 3e		      sta	SET_BANK_RAM	; 3
    702  7c17		       60		      rts		; 6
    703  7c18
    704  7c18
    705  7c18							;---------------------------------------------------------------------------------------------------
    706  7c18
      0  7c18					      DEF	InitialisePieceSquares
      1  7c18				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7c18				   InitialisePieceSquares
      3  7c18				   TEMPORARY_VAR SET	Overlay
      4  7c18				   TEMPORARY_OFFSET SET	0
      5  7c18					      SUBROUTINE
    708  7c18					      SUBROUTINE
    709  7c18
    710  7c18							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    711  7c18
    712  7c18		       a9 09		      lda	#RAMBANK_PLY
    713  7c1a		       85 3e		      sta	SET_BANK_RAM
    714  7c1c		       20 fb f1 	      jsr	InitPieceLists	; for white
    715  7c1f		       a9 0a		      lda	#RAMBANK_PLY+1
    716  7c21		       85 3e		      sta	SET_BANK_RAM
    717  7c23		       20 fb f1 	      jsr	InitPieceLists	; for black
    718  7c26
    719  7c26
    720  7c26
    721  7c26		       a2 00		      ldx	#0
    722  7c28		       86 94		      stx	enPassantPawn	; no en-passant
    723  7c2a
    724  7c2a
    725  7c2a							; We init evaluation as "white"
    726  7c2a
    727  7c2a							; Now setup the board/piecelists
    728  7c2a
    729  7c2a		       a9 09	   .fillPieceLists lda	#RAMBANK_PLY
    730  7c2c		       85 3e		      sta	SET_BANK_RAM
    731  7c2e
    732  7c2e		       bd 27 f2 	      lda	InitPieceList,x	; colour/-1
    733  7c31		       d0 03		      bne	.go
    734  7c33		       4c d3 fc 	      jmp	.exit
    735  7c36		       85 a2	   .go	      sta	__originalPiece	; type
    736  7c38
    737  7c38		       0a		      asl
    738  7c39		       a9 09		      lda	#RAMBANK_PLY
    739  7c3b		       69 00		      adc	#0
    740  7c3d		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    741  7c3f
    742  7c3f		       ac 70 f0 	      ldy	PieceListPtr	; init'd in InitPieceLists
    743  7c42		       c8		      iny
    744  7c43
    745  7c43		       bd 28 f2 	      lda	InitPieceList+1,x	; square
    746  7c46		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    747  7c49		       98		      tya
    748  7c4a		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    749  7c4d
    750  7c4d		       a5 a2		      lda	__originalPiece	; piece type
    751  7c4f		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    752  7c52		       48		      pha
    753  7c53
    754  7c53		       8c 70 f4 	      sty	PieceListPtr+RAM_WRITE
    755  7c56
    756  7c56
    757  7c56		       bc 28 f2 	      ldy	InitPieceList+1,x	; square
    758  7c59
    759  7c59		       a9 08		      lda	#RAMBANK_MOVES_RAM
    760  7c5b		       85 3e		      sta	SET_BANK_RAM
    761  7c5d		       68		      pla
    762  7c5e		       99 79 f4 	      sta	Board+RAM_WRITE,y
    763  7c61
    764  7c61
    765  7c61							; TODO: if black, toggle eval
    766  7c61
    767  7c61		       a5 a2		      lda	__originalPiece	; type/colour
    768  7c63		       10 11		      bpl	.white
      0  7c65					      NEGEVAL
      1  7c65
      2  7c65		       18		      clc
      3  7c66		       a5 90		      lda	Evaluation
      4  7c68		       49 ff		      eor	#$FF
      5  7c6a		       69 01		      adc	#1
      6  7c6c		       85 90		      sta	Evaluation
      7  7c6e		       a5 91		      lda	Evaluation+1
      8  7c70		       49 ff		      eor	#$FF
      9  7c72		       69 00		      adc	#0
     10  7c74		       85 91		      sta	Evaluation+1
     11  7c76
    770  7c76				   .white
    771  7c76
    772  7c76							; Add the material value of the piece to the evaluation
    773  7c76
    774  7c76		       a5 a2		      lda	__originalPiece
    775  7c78		       29 0f		      and	#PIECE_MASK
    776  7c7a		       a8		      tay
    777  7c7b
      0  7c7b					      JSROM	AddPieceMaterialValue
      1  7c7b
      2  7c7b		       a9 0c		      lda	#BANK_AddPieceMaterialValue
      3  7c7d		       85 3f		      sta	SET_BANK
      4  7c7f		       20 10 f0 	      jsr	AddPieceMaterialValue
    779  7c82
    780  7c82		       8a		      txa
    781  7c83		       48		      pha
    782  7c84
    783  7c84		       a9 09		      lda	#RAMBANK_PLY
    784  7c86		       85 3e		      sta	SET_BANK_RAM
    785  7c88
    786  7c88							; add the positional value of the piece to the evaluation
    787  7c88
    788  7c88		       bc 28 f2 	      ldy	InitPieceList+1,x	; square
    789  7c8b		       a5 a2		      lda	__originalPiece	; type
    790  7c8d
    791  7c8d		       a2 0c		      ldx	#BANK_AddPiecePositionValue
    792  7c8f		       86 3f		      stx	SET_BANK
    793  7c91		       20 20 f0 	      jsr	AddPiecePositionValue
    794  7c94
    795  7c94
    796  7c94		       68		      pla
    797  7c95		       aa		      tax
    798  7c96
    799  7c96		       a5 a2		      lda	__originalPiece	; type/colour
    800  7c98		       10 11		      bpl	.white2
      0  7c9a					      NEGEVAL
      1  7c9a
      2  7c9a		       18		      clc
      3  7c9b		       a5 90		      lda	Evaluation
      4  7c9d		       49 ff		      eor	#$FF
      5  7c9f		       69 01		      adc	#1
      6  7ca1		       85 90		      sta	Evaluation
      7  7ca3		       a5 91		      lda	Evaluation+1
      8  7ca5		       49 ff		      eor	#$FF
      9  7ca7		       69 00		      adc	#0
     10  7ca9		       85 91		      sta	Evaluation+1
     11  7cab
    802  7cab				   .white2
    803  7cab
    804  7cab							; Store the piece's value with the piece itself, so it doesn't have to
    805  7cab							; be looked-up everytime it's added/removed
    806  7cab							; this may be overkill and more effort than it's worth...
    807  7cab
    808  7cab		       a9 0c		      lda	#BANK_PieceValueLO
    809  7cad		       85 3f		      sta	SET_BANK
    810  7caf
    811  7caf		       b9 08 f0 	      lda	PieceValueHI,y
    812  7cb2		       48		      pha
    813  7cb3		       b9 00 f0 	      lda	PieceValueLO,y
    814  7cb6		       48		      pha
    815  7cb7
    816  7cb7		       a5 a2		      lda	__originalPiece	; colour/-1
    817  7cb9		       0a		      asl
    818  7cba		       a9 09		      lda	#RAMBANK_PLY
    819  7cbc		       69 00		      adc	#0
    820  7cbe		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    821  7cc0
    822  7cc0		       ac 70 f0 	      ldy	PieceListPtr
    823  7cc3		       c8		      iny
    824  7cc4
    825  7cc4
    826  7cc4		       68		      pla
    827  7cc5		       99 30 f4 	      sta	PieceMaterialValueLO+RAM_WRITE,y
    828  7cc8		       68		      pla
    829  7cc9		       99 40 f4 	      sta	PieceMaterialValueHI+RAM_WRITE,y
    830  7ccc
    831  7ccc		       e8		      inx
    832  7ccd		       e8		      inx
    833  7cce		       30 03		      bmi	.exit
    834  7cd0		       4c 2a fc 	      jmp	.fillPieceLists
    835  7cd3
    836  7cd3		       60	   .exit      rts
    837  7cd4
    838  7cd4
    839  7cd4							;---------------------------------------------------------------------------------------------------
    840  7cd4
      0  7cd4					      DEF	SAFE_GetKingSquare
      1  7cd4				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  7cd4				   SAFE_GetKingSquare
      3  7cd4				   TEMPORARY_VAR SET	Overlay
      4  7cd4				   TEMPORARY_OFFSET SET	0
      5  7cd4					      SUBROUTINE
    842  7cd4					      SUBROUTINE
    843  7cd4
    844  7cd4							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    845  7cd4							; Return:	 A = square king is on (or -1)
    846  7cd4
    847  7cd4		       85 3e		      sta	SET_BANK_RAM
    848  7cd6		       20 30 f3 	      jsr	GetKingSquare
    849  7cd9		       a4 8b		      ldy	savedBank
    850  7cdb		       84 3f		      sty	SET_BANK
    851  7cdd		       60		      rts
    852  7cde
    853  7cde
    854  7cde							;---------------------------------------------------------------------------------------------------
    855  7cde
      0  7cde					      DEF	GetValid
      1  7cde				   BANK_GetValid SET	_CURRENT_BANK
      2  7cde				   GetValid
      3  7cde				   TEMPORARY_VAR SET	Overlay
      4  7cde				   TEMPORARY_OFFSET SET	0
      5  7cde					      SUBROUTINE
    857  7cde		       a9 08		      lda	#RAMBANK_MOVES_RAM
    858  7ce0		       85 3e		      sta	SET_BANK_RAM
    859  7ce2		       b9 15 f0 	      lda	ValidSquare,y
    860  7ce5		       a4 8b		      ldy	savedBank
    861  7ce7		       84 3f		      sty	SET_BANK
    862  7ce9		       60		      rts
    863  7cea
    864  7cea
    865  7cea							;---------------------------------------------------------------------------------------------------
    866  7cea
      0  7cea					      DEF	GetBoard
      1  7cea				   BANK_GetBoard SET	_CURRENT_BANK
      2  7cea				   GetBoard
      3  7cea				   TEMPORARY_VAR SET	Overlay
      4  7cea				   TEMPORARY_OFFSET SET	0
      5  7cea					      SUBROUTINE
    868  7cea		       a9 08		      lda	#RAMBANK_MOVES_RAM
    869  7cec		       85 3e		      sta	SET_BANK_RAM
    870  7cee		       b9 79 f0 	      lda	Board,y
    871  7cf1		       a4 8b		      ldy	savedBank
    872  7cf3		       84 3f		      sty	SET_BANK
    873  7cf5		       60		      rts
    874  7cf6
    875  7cf6
    876  7cf6							;---------------------------------------------------------------------------------------------------
    877  7cf6
      0  7cf6					      DEF	PutBoard
      1  7cf6				   BANK_PutBoard SET	_CURRENT_BANK
      2  7cf6				   PutBoard
      3  7cf6				   TEMPORARY_VAR SET	Overlay
      4  7cf6				   TEMPORARY_OFFSET SET	0
      5  7cf6					      SUBROUTINE
    879  7cf6		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    880  7cf8		       86 3e		      stx	SET_BANK_RAM
    881  7cfa		       99 79 f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    882  7cfd		       a6 8b		      ldx	savedBank
    883  7cff		       86 3f		      stx	SET_BANK
    884  7d01		       60		      rts
    885  7d02
    886  7d02
    887  7d02							;---------------------------------------------------------------------------------------------------
    888  7d02
      0  7d02					      DEF	IsValidMoveFromSquare
      1  7d02				   BANK_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7d02				   IsValidMoveFromSquare
      3  7d02				   TEMPORARY_VAR SET	Overlay
      4  7d02				   TEMPORARY_OFFSET SET	0
      5  7d02					      SUBROUTINE
    890  7d02					      SUBROUTINE
    891  7d02
    892  7d02							; Does the square exist in the movelist?
    893  7d02							; Return: y = -1 if NOT FOUND
    894  7d02
    895  7d02		       a5 88		      lda	cursorX12
    896  7d04		       85 85		      sta	fromX12
    897  7d06
    898  7d06		       a4 95		      ldy	currentPly
    899  7d08		       84 3e		      sty	SET_BANK_RAM
    900  7d0a		       20 0d f3 	      jsr	CheckMoveListFromSquare
    901  7d0d
    902  7d0d		       a5 8b		      lda	savedBank
    903  7d0f		       85 3f		      sta	SET_BANK
    904  7d11		       60		      rts
    905  7d12
    906  7d12
    907  7d12							;---------------------------------------------------------------------------------------------------
    908  7d12
      0  7d12					      DEF	GetPiece
      1  7d12				   BANK_GetPiece SET	_CURRENT_BANK
      2  7d12				   GetPiece
      3  7d12				   TEMPORARY_VAR SET	Overlay
      4  7d12				   TEMPORARY_OFFSET SET	0
      5  7d12					      SUBROUTINE
    910  7d12					      SUBROUTINE
    911  7d12
    912  7d12							; Retrieve the piece+flags from the movelist, given from/to squares
    913  7d12							; Required as moves have different flags but same origin squares (e.g., castling)
    914  7d12
    915  7d12		       a5 95		      lda	currentPly
    916  7d14		       85 3e		      sta	SET_BANK_RAM
    917  7d16
    918  7d16		       20 4b f3 	      jsr	GetPieceGivenFromToSquares
    919  7d19
    920  7d19		       a5 8b		      lda	savedBank
    921  7d1b		       85 3f		      sta	SET_BANK
    922  7d1d		       60		      rts
    923  7d1e
    924  7d1e
    925  7d1e							;---------------------------------------------------------------------------------------------------
    926  7d1e
    927  7d1e
      0  7d1e					      DEF	CopyShadowROMtoRAM
      1  7d1e				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7d1e				   CopyShadowROMtoRAM
      3  7d1e				   TEMPORARY_VAR SET	Overlay
      4  7d1e				   TEMPORARY_OFFSET SET	0
      5  7d1e					      SUBROUTINE
    929  7d1e					      SUBROUTINE
    930  7d1e
      0  7d1e					      VAR	__destinationBank, 1
      1  7d1e		       00 a0	   __destinationBank =	TEMPORARY_VAR
      2  7d1e				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7d1e
      4  7d1e				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7d1e				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7d1e				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7d1e					      ENDIF
      8  7d1e				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7d1e				  -	      ECHO	"Temporary Variable", __destinationBank, "overflow!"
     10  7d1e				  -	      ERR
     11  7d1e					      ENDIF
     12  7d1e					      LIST	ON
      0  7d1e					      VAR	__sourceBank, 1
      1  7d1e		       00 a1	   __sourceBank =	TEMPORARY_VAR
      2  7d1e				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 1
      3  7d1e
      4  7d1e				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7d1e				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7d1e				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7d1e					      ENDIF
      8  7d1e				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7d1e				  -	      ECHO	"Temporary Variable", __sourceBank, "overflow!"
     10  7d1e				  -	      ERR
     11  7d1e					      ENDIF
     12  7d1e					      LIST	ON
    933  7d1e
    934  7d1e
    935  7d1e							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    936  7d1e							; used to setup callable RAM code from ROM templates
    937  7d1e
    938  7d1e							; x = source ROM bank
    939  7d1e							; y = destination RAM bank (preserved)
    940  7d1e
    941  7d1e		       86 a1		      stx	__sourceBank
    942  7d20
    943  7d20		       a2 00		      ldx	#0
    944  7d22		       a5 a1	   .copyPage  lda	__sourceBank
    945  7d24		       85 3f		      sta	SET_BANK
    946  7d26
    947  7d26		       bd 00 f0 	      lda	$F000,x
    948  7d29		       48		      pha
    949  7d2a		       bd 00 f1 	      lda	$F100,x
    950  7d2d		       48		      pha
    951  7d2e		       bd 00 f2 	      lda	$F200,x
    952  7d31		       48		      pha
    953  7d32		       bd 00 f3 	      lda	$F300,x
    954  7d35
    955  7d35		       84 3e		      sty	SET_BANK_RAM
    956  7d37
    957  7d37		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    958  7d3a		       68		      pla
    959  7d3b		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    960  7d3e		       68		      pla
    961  7d3f		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    962  7d42		       68		      pla
    963  7d43		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    964  7d46
    965  7d46		       ca		      dex
    966  7d47		       d0 d9		      bne	.copyPage
    967  7d49
    968  7d49		       a5 8b		      lda	savedBank
    969  7d4b		       85 3f		      sta	SET_BANK
    970  7d4d		       60		      rts
    971  7d4e
    972  7d4e
    973  7d4e							;---------------------------------------------------------------------------------------------------
    974  7d4e
      0  7d4e					      DEF	CopySinglePiece
      1  7d4e				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7d4e				   CopySinglePiece
      3  7d4e				   TEMPORARY_VAR SET	Overlay
      4  7d4e				   TEMPORARY_OFFSET SET	0
      5  7d4e					      SUBROUTINE
    976  7d4e					      SUBROUTINE
      0  7d4e					      TIMING	COPYSINGLEPIECE, (2600)
      1  7d4e		       00 29	   SPEEDOF_COPYSINGLEPIECE =	((2600)/64) + 1
    978  7d4e
    979  7d4e							; WARNING: CANNOT USE VAR/OVERLAY IN ANY ROUTINE CALLING THIS!!
    980  7d4e							; ALSO CAN'T USE IN THIS ROUTINE
    981  7d4e							; This routine will STOMP on those vars due to __pieceShapeBuffer occupying whole overlay
    982  7d4e							; @2150 max
    983  7d4e							; = 33 TIM64T
    984  7d4e
      0  7d4e					      JSROM	CopySetup
      1  7d4e
      2  7d4e		       a9 09		      lda	#BANK_CopySetup
      3  7d50		       85 3f		      sta	SET_BANK
      4  7d52		       20 75 f1 	      jsr	CopySetup
    986  7d55
      0  7d55					      DEF	InterceptMarkerCopy
      1  7d55				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7d55				   InterceptMarkerCopy
      3  7d55				   TEMPORARY_VAR SET	Overlay
      4  7d55				   TEMPORARY_OFFSET SET	0
      5  7d55					      SUBROUTINE
    988  7d55					      SUBROUTINE
    989  7d55
    990  7d55
    991  7d55							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    992  7d55							; y = piece index
    993  7d55
    994  7d55		       a9 00		      lda	#BANK_PIECE_VECTOR_BANK
    995  7d57		       85 3f		      sta	SET_BANK
    996  7d59
    997  7d59		       b9 48 f1 	      lda	PIECE_VECTOR_LO,y
    998  7d5c		       85 e8		      sta	__ptr
    999  7d5e		       b9 d8 f1 	      lda	PIECE_VECTOR_HI,y
   1000  7d61		       85 e9		      sta	__ptr+1
   1001  7d63		       b9 68 f2 	      lda	PIECE_VECTOR_BANK,y
   1002  7d66		       85 3f		      sta	SET_BANK
   1003  7d68
   1004  7d68		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
   1005  7d6a		       b1 e8	   .copy      lda	(__ptr),y
   1006  7d6c		       99 a0 00 	      sta	__pieceShapeBuffer,y
   1007  7d6f		       88		      dey
   1008  7d70		       10 f8		      bpl	.copy
   1009  7d72
   1010  7d72		       a5 80		      lda	squareToDraw
   1011  7d74		       38		      sec
   1012  7d75		       a2 0a		      ldx	#10
   1013  7d77		       e9 0a	   .sub10     sbc	#10
   1014  7d79		       ca		      dex
   1015  7d7a		       b0 fb		      bcs	.sub10
   1016  7d7c
   1017  7d7c		       86 3e		      stx	SET_BANK_RAM	; row
   1018  7d7e
   1019  7d7e		       69 08		      adc	#8
   1020  7d80		       c9 04		      cmp	#4	; CS = right side of screen
   1021  7d82
   1022  7d82		       20 9b f1 	      jsr	CopyPieceToRowBitmap
   1023  7d85
   1024  7d85		       a5 8b		      lda	savedBank
   1025  7d87		       85 3f		      sta	SET_BANK
   1026  7d89		       60		      rts
   1027  7d8a
   1028  7d8a
   1029  7d8a							;---------------------------------------------------------------------------------------------------
   1030  7d8a
      0  7d8a					      DEF	SAFE_getMoveIndex
      1  7d8a				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7d8a				   SAFE_getMoveIndex
      3  7d8a				   TEMPORARY_VAR SET	Overlay
      4  7d8a				   TEMPORARY_OFFSET SET	0
      5  7d8a					      SUBROUTINE
   1032  7d8a					      SUBROUTINE
   1033  7d8a
   1034  7d8a		       a9 09		      lda	#RAMBANK_PLY
   1035  7d8c		       85 3e		      sta	SET_BANK_RAM
   1036  7d8e		       ad f1 f1 	      lda	moveIndex
   1037  7d91		       a6 8b		      ldx	savedBank
   1038  7d93		       86 3f		      stx	SET_BANK
   1039  7d95		       60		      rts
   1040  7d96
   1041  7d96
   1042  7d96							;---------------------------------------------------------------------------------------------------
   1043  7d96
      0  7d96					      DEF	GoFixPieceList
      1  7d96				   BANK_GoFixPieceList SET	_CURRENT_BANK
      2  7d96				   GoFixPieceList
      3  7d96				   TEMPORARY_VAR SET	Overlay
      4  7d96				   TEMPORARY_OFFSET SET	0
      5  7d96					      SUBROUTINE
   1045  7d96
   1046  7d96		       85 3e		      sta	SET_BANK_RAM
   1047  7d98		       20 b6 f2 	      jsr	FixPieceList
   1048  7d9b		       a5 8b		      lda	savedBank
   1049  7d9d		       85 3f		      sta	SET_BANK
   1050  7d9f		       60		      rts
   1051  7da0
   1052  7da0
   1053  7da0							;---------------------------------------------------------------------------------------------------
   1054  7da0
      0  7da0					      DEF	markerDraw
      1  7da0				   BANK_markerDraw SET	_CURRENT_BANK
      2  7da0				   markerDraw
      3  7da0				   TEMPORARY_VAR SET	Overlay
      4  7da0				   TEMPORARY_OFFSET SET	0
      5  7da0					      SUBROUTINE
   1056  7da0
   1057  7da0		       a2 1c		      ldx	#INDEX_WHITE_MARKER_on_WHITE_SQUARE_0
      0  7da2					      JSROM	CopySetupForMarker
      1  7da2
      2  7da2		       a9 09		      lda	#BANK_CopySetupForMarker
      3  7da4		       85 3f		      sta	SET_BANK
      4  7da6		       20 4a f1 	      jsr	CopySetupForMarker
   1059  7da9		       4c 55 fd 	      jmp	InterceptMarkerCopy
   1060  7dac
   1061  7dac
   1062  7dac							;---------------------------------------------------------------------------------------------------
   1063  7dac
      0  7dac					      DEF	showPromoteOptions
      1  7dac				   BANK_showPromoteOptions SET	_CURRENT_BANK
      2  7dac				   showPromoteOptions
      3  7dac				   TEMPORARY_VAR SET	Overlay
      4  7dac				   TEMPORARY_OFFSET SET	0
      5  7dac					      SUBROUTINE
   1065  7dac					      SUBROUTINE
   1066  7dac
   1067  7dac							; X = character shape # (?/N/B/R/Q)
   1068  7dac
   1069  7dac		       a4 86		      ldy	toX12
   1070  7dae		       84 80		      sty	squareToDraw
   1071  7db0
      0  7db0					      JSROM	CopySetupForMarker
      1  7db0
      2  7db0		       a9 09		      lda	#BANK_CopySetupForMarker
      3  7db2		       85 3f		      sta	SET_BANK
      4  7db4		       20 4a f1 	      jsr	CopySetupForMarker
   1073  7db7		       4c 55 fd 	      jmp	InterceptMarkerCopy
   1074  7dba
   1075  7dba
   1076  7dba							;---------------------------------------------------------------------------------------------------
   1077  7dba
      0  7dba					      DEF	SAFE_BackupBitmaps
      1  7dba				   BANK_SAFE_BackupBitmaps SET	_CURRENT_BANK
      2  7dba				   SAFE_BackupBitmaps
      3  7dba				   TEMPORARY_VAR SET	Overlay
      4  7dba				   TEMPORARY_OFFSET SET	0
      5  7dba					      SUBROUTINE
   1079  7dba
   1080  7dba		       84 3e		      sty	SET_BANK_RAM
   1081  7dbc		       20 f4 f2 	      jsr	SaveBitmap
   1082  7dbf		       a5 8b		      lda	savedBank
   1083  7dc1		       85 3f		      sta	SET_BANK
   1084  7dc3		       60		      rts
   1085  7dc4
   1086  7dc4
   1087  7dc4							;---------------------------------------------------------------------------------------------------
   1088  7dc4
      0  7dc4					      DEF	Go_IsSquareUnderAttack
      1  7dc4				   BANK_Go_IsSquareUnderAttack SET	_CURRENT_BANK
      2  7dc4				   Go_IsSquareUnderAttack
      3  7dc4				   TEMPORARY_VAR SET	Overlay
      4  7dc4				   TEMPORARY_OFFSET SET	0
      5  7dc4					      SUBROUTINE
   1090  7dc4
   1091  7dc4							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
   1092  7dc4
   1093  7dc4							; Pass:	 currentPly = which movelist to check
   1094  7dc4							;		 A = X12 square to check
   1095  7dc4							; Return:	 CC = No, CS = Yes
   1096  7dc4
   1097  7dc4		       a6 95		      ldx	currentPly
   1098  7dc6		       86 3e		      stx	SET_BANK_RAM
   1099  7dc8		       20 21 f3 	      jsr	IsSquareUnderAttack
   1100  7dcb		       a5 8b		      lda	savedBank
   1101  7dcd		       85 3f		      sta	SET_BANK
   1102  7dcf		       60		      rts
   1103  7dd0
   1104  7dd0
   1105  7dd0							;---------------------------------------------------------------------------------------------------
   1106  7dd0
      0  7dd0					      DEF	SAFE_showMoveCaptures
      1  7dd0				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7dd0				   SAFE_showMoveCaptures
      3  7dd0				   TEMPORARY_VAR SET	Overlay
      4  7dd0				   TEMPORARY_OFFSET SET	0
      5  7dd0					      SUBROUTINE
   1108  7dd0					      SUBROUTINE
   1109  7dd0
      0  7dd0					      JSROM	UNSAFE_showMoveCaptures
      1  7dd0
      2  7dd0		       a9 09		      lda	#BANK_UNSAFE_showMoveCaptures
      3  7dd2		       85 3f		      sta	SET_BANK
      4  7dd4		       20 00 f0 	      jsr	UNSAFE_showMoveCaptures
   1111  7dd7		       a5 8b		      lda	savedBank
   1112  7dd9		       85 3f		      sta	SET_BANK
   1113  7ddb		       60		      rts
   1114  7ddc
   1115  7ddc
   1116  7ddc							;---------------------------------------------------------------------------------------------------
   1117  7ddc
      0  7ddc					      DEF	GetMoveFrom
      1  7ddc				   BANK_GetMoveFrom SET	_CURRENT_BANK
      2  7ddc				   GetMoveFrom
      3  7ddc				   TEMPORARY_VAR SET	Overlay
      4  7ddc				   TEMPORARY_OFFSET SET	0
      5  7ddc					      SUBROUTINE
   1119  7ddc		       a9 09		      lda	#RAMBANK_PLY
   1120  7dde		       85 3e		      sta	SET_BANK_RAM
   1121  7de0		       a4 8b		      ldy	savedBank
   1122  7de2		       bd 75 f0 	      lda	MoveFrom,x
   1123  7de5		       84 3f		      sty	SET_BANK
   1124  7de7		       60		      rts
   1125  7de8
   1126  7de8
   1127  7de8							;---------------------------------------------------------------------------------------------------
   1128  7de8
      0  7de8					      DEF	GetMoveTo
      1  7de8				   BANK_GetMoveTo SET	_CURRENT_BANK
      2  7de8				   GetMoveTo
      3  7de8				   TEMPORARY_VAR SET	Overlay
      4  7de8				   TEMPORARY_OFFSET SET	0
      5  7de8					      SUBROUTINE
   1130  7de8					      SUBROUTINE
   1131  7de8
   1132  7de8		       a9 09		      lda	#RAMBANK_PLY
   1133  7dea		       85 3e		      sta	SET_BANK_RAM
   1134  7dec		       a4 8b		      ldy	savedBank
   1135  7dee		       bd 00 f1 	      lda	MoveTo,x
   1136  7df1		       84 3f		      sty	SET_BANK
   1137  7df3		       60		      rts
   1138  7df4
   1139  7df4
   1140  7df4							;---------------------------------------------------------------------------------------------------
   1141  7df4
      0  7df4					      DEF	GetMovePiece
      1  7df4				   BANK_GetMovePiece SET	_CURRENT_BANK
      2  7df4				   GetMovePiece
      3  7df4				   TEMPORARY_VAR SET	Overlay
      4  7df4				   TEMPORARY_OFFSET SET	0
      5  7df4					      SUBROUTINE
   1143  7df4					      SUBROUTINE
   1144  7df4
   1145  7df4		       a9 09		      lda	#RAMBANK_PLY
   1146  7df6		       85 3e		      sta	SET_BANK_RAM
   1147  7df8		       a4 8b		      ldy	savedBank
   1148  7dfa		       bd 78 f1 	      lda	MovePiece,x
   1149  7dfd		       84 3f		      sty	SET_BANK
   1150  7dff		       60		      rts
   1151  7e00
   1152  7e00
   1153  7e00							;---------------------------------------------------------------------------------------------------
   1154  7e00
      0  7e00					      DEF	MakeMove
      1  7e00				   BANK_MakeMove SET	_CURRENT_BANK
      2  7e00				   MakeMove
      3  7e00				   TEMPORARY_VAR SET	Overlay
      4  7e00				   TEMPORARY_OFFSET SET	0
      5  7e00					      SUBROUTINE
   1156  7e00					      SUBROUTINE
   1157  7e00
   1158  7e00		       ae f2 f1 	      ldx	movePtr
   1159  7e03
   1160  7e03		       bd 75 f0 	      lda	MoveFrom,x
   1161  7e06		       85 85		      sta	fromX12
   1162  7e08		       85 87		      sta	originX12
   1163  7e0a		       bd 00 f1 	      lda	MoveTo,x
   1164  7e0d		       85 86		      sta	toX12
   1165  7e0f		       bd 78 f1 	      lda	MovePiece,x
   1166  7e12		       85 98		      sta	fromPiece
   1167  7e14
   1168  7e14		       60		      rts
   1169  7e15
   1170  7e15
   1171  7e15							;---------------------------------------------------------------------------------------------------
   1172  7e15
   1173  7e15
      0  7e15					      DEF	unmake_move
      1  7e15				   BANK_unmake_move SET	_CURRENT_BANK
      2  7e15				   unmake_move
      3  7e15				   TEMPORARY_VAR SET	Overlay
      4  7e15				   TEMPORARY_OFFSET SET	0
      5  7e15					      SUBROUTINE
   1175  7e15		       60		      rts
   1176  7e16
   1177  7e16							;---------------------------------------------------------------------------------------------------
   1178  7e16
   1179  7e16							;def quiesce( alpha, beta ):
   1180  7e16							;    stand_pat = evaluate_board()
   1181  7e16							;    if( stand_pat >= beta ):
   1182  7e16							;	  return beta
   1183  7e16							;    if( alpha < stand_pat ):
   1184  7e16							;	  alpha = stand_pat
   1185  7e16							;
   1186  7e16							;    for move in board.legal_moves:
   1187  7e16							;	  if board.is_capture(move):
   1188  7e16							;	      make_move(move)
   1189  7e16							;	      score = -quiesce( -beta, -alpha )
   1190  7e16							;	      unmake_move()
   1191  7e16							;	      if( score >= beta ):
   1192  7e16							;		  return beta
   1193  7e16							;	      if( score > alpha ):
   1194  7e16							;		  alpha = score
   1195  7e16							;    return alpha
   1196  7e16
   1197  7e16
      0  7e16					      DEF	quiesce
      1  7e16				   BANK_quiesce SET	_CURRENT_BANK
      2  7e16				   quiesce
      3  7e16				   TEMPORARY_VAR SET	Overlay
      4  7e16				   TEMPORARY_OFFSET SET	0
      5  7e16					      SUBROUTINE
   1199  7e16					      SUBROUTINE
   1200  7e16
   1201  7e16							; We are at the lowest level of the tree search, so we want to only continue if there
   1202  7e16							; are captures in effect. Keep going until there are no captures.
   1203  7e16
   1204  7e16							; requriement: correct PLY bank already switched in
   1205  7e16							; --> savedBank too
   1206  7e16
      0  7e16					      VAR	__return, 2
      1  7e16		       00 a0	   __return   =	TEMPORARY_VAR
      2  7e16				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  7e16
      4  7e16				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7e16				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7e16				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7e16					      ENDIF
      8  7e16				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7e16				  -	      ECHO	"Temporary Variable", __return, "overflow!"
     10  7e16				  -	      ERR
     11  7e16					      ENDIF
     12  7e16					      LIST	ON
      0  7e16					      VAR	__bestValue, 2
      1  7e16		       00 a2	   __bestValue =	TEMPORARY_VAR
      2  7e16				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  7e16
      4  7e16				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7e16				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7e16				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7e16					      ENDIF
      8  7e16				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7e16				  -	      ECHO	"Temporary Variable", __bestValue, "overflow!"
     10  7e16				  -	      ERR
     11  7e16					      ENDIF
     12  7e16					      LIST	ON
   1209  7e16
   1210  7e16							; we have already done the Evaluation (incrementally)
   1211  7e16
   1212  7e16
   1213  7e16
   1214  7e16							;    if( stand_pat >= beta ):
   1215  7e16							;	  return beta
   1216  7e16
   1217  7e16		       38		      sec
   1218  7e17		       a5 90		      lda	Evaluation
   1219  7e19		       ed f6 f1 	      sbc	beta
   1220  7e1c		       a5 91		      lda	Evaluation+1
   1221  7e1e		       ed f7 f1 	      sbc	beta+1
   1222  7e21		       90 0b		      bcc	.endif0
   1223  7e23
   1224  7e23		       ad f7 f1 	      lda	beta+1
   1225  7e26		       85 a1		      sta	__return+1
   1226  7e28		       ad f6 f1 	      lda	beta
   1227  7e2b		       85 a0		      sta	__return
   1228  7e2d		       60		      rts
   1229  7e2e				   .endif0
   1230  7e2e
   1231  7e2e							;    if( alpha < stand_pat ):
   1232  7e2e							;	  alpha = stand_pat
   1233  7e2e
   1234  7e2e		       18		      clc		;!!
   1235  7e2f		       ad f4 f1 	      lda	alpha
   1236  7e32		       e5 90		      sbc	Evaluation
   1237  7e34		       ad f5 f1 	      lda	alpha+1
   1238  7e37		       e5 91		      sbc	Evaluation+1
   1239  7e39		       b0 0a		      bcs	.endif1
   1240  7e3b
   1241  7e3b		       a5 90		      lda	Evaluation
   1242  7e3d		       8d f4 f5 	      sta	alpha [+RAM_WRITE]
   1243  7e40		       a5 91		      lda	Evaluation+1
   1244  7e42		       8d f5 f5 	      sta	alpha+1 [+RAM_WRITE]
   1245  7e45
   1246  7e45				   .endif1
   1247  7e45
   1248  7e45
   1249  7e45							;   generate all moves
   1250  7e45
   1251  7e45		       20 c9 f2 	      jsr	GenerateAllMoves
   1252  7e48
   1253  7e48		       ad f1 f1 	      lda	moveIndex
   1254  7e4b		       8d f2 f5 	      sta	movePtr [+RAM_WRITE]
   1255  7e4e
   1256  7e4e							;    for move in board.legal_moves:
   1257  7e4e							;    {
   1258  7e4e
   1259  7e4e		       ac f2 f1    .loopMoves ldy	movePtr
   1260  7e51		       10 0b		      bpl	.cont
   1261  7e53
   1262  7e53							;    return alpha
   1263  7e53		       ad f4 f1 	      lda	alpha
   1264  7e56		       85 a0		      sta	__return
   1265  7e58		       ad f5 f1 	      lda	alpha+1
   1266  7e5b		       85 a1		      sta	__return+1
   1267  7e5d		       60		      rts
   1268  7e5e
   1269  7e5e				   .cont
   1270  7e5e
   1271  7e5e		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1272  7e60		       85 3e		      sta	SET_BANK_RAM
   1273  7e62		       b9 79 f0 	      lda	Board,y
   1274  7e65		       a6 95		      ldx	currentPly
   1275  7e67		       86 3e		      stx	SET_BANK_RAM
   1276  7e69		       29 0f		      and	#PIECE_MASK
   1277  7e6b		       f0 7b		      beq	.nextMove	; only process capture moves
   1278  7e6d
   1279  7e6d
   1280  7e6d		       20 00 fe 	      jsr	MakeMove
   1281  7e70
   1282  7e70							;	  if board.is_capture(move):
   1283  7e70							;	      make_move(move)
   1284  7e70
   1285  7e70							;	      score = -quiesce( -beta, -alpha )
   1286  7e70
   1287  7e70		       38		      sec
   1288  7e71		       a9 00		      lda	#0
   1289  7e73		       ed f6 f1 	      sbc	beta
   1290  7e76		       48		      pha
   1291  7e77		       a9 00		      lda	#0
   1292  7e79		       ed f7 f1 	      sbc	beta+1
   1293  7e7c		       48		      pha
   1294  7e7d
   1295  7e7d		       38		      sec
   1296  7e7e		       a9 00		      lda	#0
   1297  7e80		       ed f4 f1 	      sbc	alpha
   1298  7e83		       48		      pha
   1299  7e84		       a9 00		      lda	#0
   1300  7e86		       ed f5 f1 	      sbc	alpha+1
   1301  7e89		       48		      pha
   1302  7e8a
   1303  7e8a		       e6 95		      inc	currentPly
   1304  7e8c		       a5 95		      lda	currentPly
   1305  7e8e		       85 3e		      sta	SET_BANK_RAM
   1306  7e90		       20 68 f2 	      jsr	NewPlyInitialise
   1307  7e93
   1308  7e93		       68		      pla
   1309  7e94		       8d f7 f5 	      sta	beta+1 [+RAM_WRITE]
   1310  7e97		       68		      pla
   1311  7e98		       8d f6 f5 	      sta	beta [+RAM_WRITE]	; -alpha
   1312  7e9b
   1313  7e9b		       68		      pla
   1314  7e9c		       8d f5 f5 	      sta	alpha+1 [+RAM_WRITE]
   1315  7e9f		       68		      pla
   1316  7ea0		       8d f4 f5 	      sta	alpha [+RAM_WRITE]	; -beta
   1317  7ea3
   1318  7ea3		       20 16 fe 	      jsr	quiesce
   1319  7ea6
   1320  7ea6		       c6 95		      dec	currentPly
   1321  7ea8		       a5 95		      lda	currentPly
   1322  7eaa		       85 3e		      sta	SET_BANK_RAM
   1323  7eac
   1324  7eac		       38		      sec
   1325  7ead		       a9 00		      lda	#0
   1326  7eaf		       e5 a0		      sbc	__return
   1327  7eb1		       85 a0		      sta	__return
   1328  7eb3		       a9 00		      lda	#0
   1329  7eb5		       e5 a1		      sbc	__return+1
   1330  7eb7		       85 a1		      sta	__return+1	; score = -quiesce( -beta, -alpha)
   1331  7eb9
   1332  7eb9
   1333  7eb9							; TODO:
   1334  7eb9							;	      unmake_move()
   1335  7eb9
   1336  7eb9
   1337  7eb9							;	      if( score >= beta ):
   1338  7eb9							;		  return beta
   1339  7eb9
   1340  7eb9		       38		      sec
   1341  7eba		       a5 a0		      lda	__return
   1342  7ebc		       ed f6 f1 	      sbc	beta
   1343  7ebf		       a5 a1		      lda	__return+1
   1344  7ec1		       ed f7 f1 	      sbc	beta+1
   1345  7ec4		       90 0b		      bcc	.endif2
   1346  7ec6
   1347  7ec6		       ad f6 f1 	      lda	beta
   1348  7ec9		       85 a0		      sta	__return
   1349  7ecb		       ad f7 f1 	      lda	beta+1
   1350  7ece		       85 a1		      sta	__return+1
   1351  7ed0		       60		      rts
   1352  7ed1
   1353  7ed1				   .endif2
   1354  7ed1
   1355  7ed1							;	      if( score > alpha ):
   1356  7ed1							;		  alpha = score
   1357  7ed1
   1358  7ed1		       18		      clc		; !!
   1359  7ed2		       ad f4 f1 	      lda	alpha
   1360  7ed5		       e5 a0		      sbc	__return
   1361  7ed7		       ad f5 f1 	      lda	alpha+1
   1362  7eda		       e5 a1		      sbc	__return+1
   1363  7edc		       b0 0a		      bcs	.endif3
   1364  7ede
   1365  7ede		       a5 a0		      lda	__return
   1366  7ee0		       8d f4 f5 	      sta	alpha [+RAM_WRITE]
   1367  7ee3		       a5 a1		      lda	__return+1
   1368  7ee5		       8d f5 f5 	      sta	alpha+1 [+RAM_WRITE]
   1369  7ee8				   .endif3
   1370  7ee8
   1371  7ee8
   1372  7ee8							; end of move iteration/loop
   1373  7ee8
   1374  7ee8		       38	   .nextMove  sec
   1375  7ee9		       ad f2 f1 	      lda	movePtr
   1376  7eec		       e9 01		      sbc	#1
   1377  7eee		       8d f2 f5 	      sta	movePtr+RAM_WRITE
   1378  7ef1		       4c 4e fe 	      jmp	.loopMoves
   1379  7ef4
   1380  7ef4
   1381  7ef4
   1382  7ef4
   1383  7ef4
   1384  7ef4
   1385  7ef4							;---------------------------------------------------------------------------------------------------
   1386  7ef4
      0  7ef4					      DEF	selectmove
      1  7ef4				   BANK_selectmove SET	_CURRENT_BANK
      2  7ef4				   selectmove
      3  7ef4				   TEMPORARY_VAR SET	Overlay
      4  7ef4				   TEMPORARY_OFFSET SET	0
      5  7ef4					      SUBROUTINE
   1388  7ef4					      SUBROUTINE
   1389  7ef4
   1390  7ef4							; x = depth to go to
   1391  7ef4
   1392  7ef4							;	  bestMove = chess.Move.null()
   1393  7ef4							;	  bestValue = -99999
   1394  7ef4							;	  alpha = -100000
   1395  7ef4							;	  beta = 100000
   1396  7ef4
      0  7ef4					      VAR	__return, 2
      1  7ef4		       00 a0	   __return   =	TEMPORARY_VAR
      2  7ef4				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  7ef4
      4  7ef4				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7ef4				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7ef4				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7ef4					      ENDIF
      8  7ef4				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7ef4				  -	      ECHO	"Temporary Variable", __return, "overflow!"
     10  7ef4				  -	      ERR
     11  7ef4					      ENDIF
     12  7ef4					      LIST	ON
      0  7ef4					      VAR	__boardValue, 2
      1  7ef4		       00 a2	   __boardValue =	TEMPORARY_VAR
      2  7ef4				   TEMPORARY_VAR SET	TEMPORARY_VAR + TEMPORARY_OFFSET + 2
      3  7ef4
      4  7ef4				   OVERLAY_DELTA SET	TEMPORARY_VAR - Overlay
      5  7ef4				  -	      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
      6  7ef4				  -MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
      7  7ef4					      ENDIF
      8  7ef4				  -	      IF	OVERLAY_DELTA > OVERLAY_SIZE
      9  7ef4				  -	      ECHO	"Temporary Variable", __boardValue, "overflow!"
     10  7ef4				  -	      ERR
     11  7ef4					      ENDIF
     12  7ef4					      LIST	ON
   1399  7ef4
   1400  7ef4		       a5 95		      lda	currentPly
   1401  7ef6		       85 3e		      sta	SET_BANK_RAM
   1402  7ef8
   1403  7ef8		       8e fa f5 	      stx	depth [+RAM_WRITE]
   1404  7efb
   1405  7efb		       a9 ff		      lda	#-1
   1406  7efd		       8d f3 f5 	      sta	bestMove [+RAM_WRITE]
   1407  7f00
   1408  7f00		       a9 01		      lda	#<(-INFINITY)
   1409  7f02		       8d f4 f5 	      sta	alpha [+RAM_WRITE]
   1410  7f05		       a9 80		      lda	#>(-INFINITY)
   1411  7f07		       8d f5 f5 	      sta	alpha+1 [+RAM_WRITE]
   1412  7f0a
   1413  7f0a		       a9 ff		      lda	#<INFINITY
   1414  7f0c		       8d f6 f5 	      sta	beta [+RAM_WRITE]
   1415  7f0f		       a9 7f		      lda	#>INFINITY
   1416  7f11		       8d f7 f5 	      sta	beta+1 [+RAM_WRITE]
   1417  7f14
   1418  7f14		       a9 02		      lda	#<(-(INFINITY-1))
   1419  7f16		       8d f8 f5 	      sta	bestValue [+RAM_WRITE]
   1420  7f19		       a9 02		      lda	#<(-(INFINITY-1))
   1421  7f1b		       8d f9 f5 	      sta	bestValue+1 [+RAM_WRITE]
   1422  7f1e
   1423  7f1e							;	  for move in board.legal_moves:
   1424  7f1e							; TODO: we should have generated moves at this point!
   1425  7f1e
   1426  7f1e		       20 c9 f2 	      jsr	GenerateAllMoves
   1427  7f21
   1428  7f21
   1429  7f21		       ad f1 f1 	      lda	moveIndex
   1430  7f24		       8d f2 f5 	      sta	movePtr [+RAM_WRITE]
   1431  7f27
   1432  7f27		       ae f2 f1    .loopMoves ldx	movePtr
   1433  7f2a		       10 06		      bpl	.validMove
   1434  7f2c
   1435  7f2c							;	  movehistory.append(bestMove)
   1436  7f2c							;	  return bestMove
   1437  7f2c
   1438  7f2c		       ad f3 f1 	      lda	bestMove
   1439  7f2f		       85 a0		      sta	__return
   1440  7f31		       60		      rts
   1441  7f32
   1442  7f32				   .validMove
   1443  7f32
   1444  7f32							;	      make_move(move)
   1445  7f32
   1446  7f32		       20 00 fe 	      jsr	MakeMove
   1447  7f35
   1448  7f35		       38		      sec
   1449  7f36		       a9 00		      lda	#0
   1450  7f38		       ed f4 f1 	      sbc	alpha
   1451  7f3b		       48		      pha
   1452  7f3c		       a9 00		      lda	#0
   1453  7f3e		       ed f5 f1 	      sbc	alpha+1
   1454  7f41		       48		      pha		; -alpha
   1455  7f42
   1456  7f42		       38		      sec
   1457  7f43		       a9 00		      lda	#0
   1458  7f45		       ed f6 f1 	      sbc	beta
   1459  7f48		       48		      pha
   1460  7f49		       a9 00		      lda	#0
   1461  7f4b		       ed f7 f1 	      sbc	beta+1
   1462  7f4e		       48		      pha		; -beta
   1463  7f4f
   1464  7f4f		       ae fa f1 	      ldx	depth
   1465  7f52
   1466  7f52		       e6 95		      inc	currentPly
   1467  7f54		       a5 95		      lda	currentPly
   1468  7f56		       85 3e		      sta	SET_BANK_RAM
   1469  7f58
   1470  7f58		       ca		      dex
   1471  7f59		       8e fa f5 	      stx	depth [+RAM_WRITE]
   1472  7f5c
   1473  7f5c		       68		      pla
   1474  7f5d		       8d f5 f5 	      sta	alpha+1 [+RAM_WRITE]
   1475  7f60		       68		      pla
   1476  7f61		       8d f4 f5 	      sta	alpha [+RAM_WRITE]	; alpha = -beta
   1477  7f64
   1478  7f64		       68		      pla
   1479  7f65		       8d f7 f5 	      sta	beta+1 [+RAM_WRITE]
   1480  7f68		       68		      pla
   1481  7f69		       8d f6 f5 	      sta	beta [+RAM_WRITE]	; beta  = -alpha
   1482  7f6c
   1483  7f6c							;tmp jsr alphaBeta
   1484  7f6c
   1485  7f6c							;	      boardValue = -alphabeta(-beta, -alpha, depth-1)
   1486  7f6c
   1487  7f6c		       38		      sec
   1488  7f6d		       a9 00		      lda	#0
   1489  7f6f		       e5 a0		      sbc	__return
   1490  7f71		       85 a2		      sta	__boardValue
   1491  7f73		       a9 00		      lda	#0
   1492  7f75		       e5 a1		      sbc	__return+1
   1493  7f77		       85 a3		      sta	__boardValue+1
   1494  7f79
   1495  7f79		       c6 95		      dec	currentPly
   1496  7f7b		       a5 95		      lda	currentPly
   1497  7f7d		       85 3e		      sta	SET_BANK_RAM
   1498  7f7f
   1499  7f7f
   1500  7f7f							;	      if boardValue > bestValue:
   1501  7f7f							;		  bestValue = boardValue;
   1502  7f7f
   1503  7f7f		       18		      clc		; !!
   1504  7f80		       ad f8 f1 	      lda	bestValue
   1505  7f83		       e5 a2		      sbc	__boardValue
   1506  7f85		       ad f9 f1 	      lda	bestValue+1
   1507  7f88		       e5 a3		      sbc	__boardValue+1
   1508  7f8a		       b0 10		      bcs	.endif20
   1509  7f8c
   1510  7f8c		       a5 a2		      lda	__boardValue
   1511  7f8e		       8d f8 f1 	      sta	bestValue
   1512  7f91		       a5 a3		      lda	__boardValue+1
   1513  7f93		       8d f9 f1 	      sta	bestValue+1
   1514  7f96
   1515  7f96							;		  bestMove = move
   1516  7f96
   1517  7f96		       ad f2 f1 	      lda	movePtr
   1518  7f99		       8d f3 f1 	      sta	bestMove
   1519  7f9c
   1520  7f9c				   .endif20
   1521  7f9c							;	      if( boardValue > alpha ):
   1522  7f9c							;		  alpha = boardValue
   1523  7f9c
   1524  7f9c		       18		      clc		; !!
   1525  7f9d		       a5 a2		      lda	__boardValue
   1526  7f9f		       ed f4 f1 	      sbc	alpha
   1527  7fa2		       a5 a3		      lda	__boardValue+1
   1528  7fa4		       ed f5 f1 	      sbc	alpha+1
   1529  7fa7		       90 0a		      bcc	.endif23
   1530  7fa9
   1531  7fa9		       a5 a2		      lda	__boardValue
   1532  7fab		       8d f4 f1 	      sta	alpha
   1533  7fae		       a5 a3		      lda	__boardValue+1
   1534  7fb0		       8d f5 f1 	      sta	alpha+1
   1535  7fb3				   .endif23
   1536  7fb3
   1537  7fb3							;	      unmake_move()
   1538  7fb3		       20 15 fe 	      jsr	unmake_move
   1539  7fb6
   1540  7fb6		       38		      sec
   1541  7fb7		       ad f2 f1 	      lda	movePtr
   1542  7fba		       e9 01		      sbc	#1
   1543  7fbc		       8d f2 f5 	      sta	movePtr [+RAM_WRITE]
   1544  7fbf		       8d f2 f1 	      sta	movePtr
   1545  7fc2
   1546  7fc2		       4c 27 ff 	      jmp	.loopMoves
   1547  7fc5
   1548  7fc5
   1549  7fc5							;---------------------------------------------------------------------------------------------------
   1550  7fc5
 FREE BYTES IN FIXED BANK =  $37
   1551  7fc5					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1552  7fc5
   1553  7fc5
   1554  7fc5							;---------------------------------------------------------------------------------------------------
   1555  7fc5							; The reset vectors
   1556  7fc5							; these must live in the fixed bank (last 2K of any ROM image in "3E" scheme)
   1557  7fc5
   1558  8000 ????				      SEG	InterruptVectors
   1559  7ffc					      ORG	FIXED_BANK + $7FC
   1560  7ffc					      RORG	$7ffC
   1561  7ffc
   1562  7ffc		       00 f8		      .word.w	Reset	; RESET
   1563  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1564  8000
   1565  8000							;---------------------------------------------------------------------------------------------------
   1566  8000							; EOF
------- FILE ./chess.asm
    493  8000
    494  8000							;END
