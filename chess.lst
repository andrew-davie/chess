------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   PIECE_COLOUR =	128	; mask
      7  0000 ????	       00 40	   MOVED      =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   ENPASSANT  =	32
     10  0000 ????	       00 10	   CASTLE     =	16
     11  0000 ????
     12  0000 ????						;PHANTOM	      = 32		  ; a phantom king (via castling)  -- requires bigger movelist OR DOES IT
     13  0000 ????						;HELPER	      = 16
     14  0000 ????
     15  0000 ????						;---------------------------------------------------------------------------------------------------
     16  0000 ????						; DEFINE THE PIECES
     17  0000 ????						; ID lives in bits 0-2
     18  0000 ????
     19  0000 ????	       00 00	   BLANK      =	0
     20  0000 ????	       00 00	   ███  =	BLANK
     21  0000 ????
     22  0000 ????	       00 01	   WPAWN      =	1
     23  0000 ????	       00 01	   WP	      =	WPAWN
     24  0000 ????	       00 02	   BPAWN      =	2
     25  0000 ????	       00 02	   BP	      =	BPAWN
     26  0000 ????	       00 03	   KNIGHT     =	3
     27  0000 ????	       00 03	   N	      =	KNIGHT
     28  0000 ????	       00 04	   BISHOP     =	4
     29  0000 ????	       00 04	   B	      =	BISHOP
     30  0000 ????	       00 05	   ROOK       =	5
     31  0000 ????	       00 05	   R	      =	ROOK
     32  0000 ????	       00 06	   QUEEN      =	6
     33  0000 ????	       00 06	   Q	      =	QUEEN
     34  0000 ????	       00 07	   KING       =	7
     35  0000 ????	       00 07	   K	      =	KING
     36  0000 ????	       00 08	   MARKER     =	8
     37  0000 ????
     38  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     39  0000 ????
     40  0000 ????						;---------------------------------------------------------------------------------------------------
     41  0000 ????
     42  0000 ????						; Movements
     43  0000 ????
     44  0000 ????	       00 0a	   _UP	      =	10	; up
     45  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     46  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     47  0000 ????	       00 01	   _RIGHT     =	1	; right
     48  0000 ????
     49  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						; assemble diagnostics. Remove for release.
     31  0000 ????	       00 01	   ASSERTS    =	1
     32  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     33  0000 ????
     34  0000 ????						;===================================
     35  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     36  0000 ????						;===================================
     37  0000 ????
     38  0000 ????						;-------------------------------------------------------------------------------
     39  0000 ????						; The following are optional YES/NO depending on phase of the moon
     40  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     41  0000 ????						;-------------------------------------------------------------------------------
     42  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     43  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     44  0000 ????			  -	      IF	FINAL_VERSION = YES
     45  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     46  0000 ????				      ENDIF
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????
     50  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     51  0000 ????
     52  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     53  0000 ????
     54  0000 ????						;------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????	       00 01	   PLUSCART   =	YES
     57  0000 ????
     58  0000 ????						;------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????
     61  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     62  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     63  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     64  0000 ????
     65  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     66  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     67  0000 ????
     68  0000 ????
     69  0000 ????	       10 00	   RAM_3E     =	$1000
     70  0000 ????	       04 00	   RAM_SIZE   =	$400
     71  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     72  0000 ????
     73  0000 ????
     74  0000 ????						; Platform constants:
     75  0000 ????	       00 02	   PAL	      =	%10
     76  0000 ????	       00 02	   PAL_50     =	PAL|0
     77  0000 ????	       00 03	   PAL_60     =	PAL|1
     78  0000 ????
     79  0000 ????
     80  0000 ????				      IF	L276
     81  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     82  0000 ????			  -	      ELSE
     83  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     84  0000 ????				      ENDIF
     85  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     86  0000 ????
     87  0000 ????				      IF	L276
     88  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     89  0000 ????			  -	      ELSE
     90  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     91  0000 ????				      ENDIF
     92  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     93  0000 ????
     94  0000 ????				      IF	L276
     95  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     96  0000 ????			  -	      ELSE
     97  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     98  0000 ????				      ENDIF
     99  0000 ????	       01 38	   SCANLINES_PAL =	312
    100  0000 ????
    101  0000 ????
    102  0000 ????						;------------------------------------------------------------------------------
    103  0000 ????						; MACRO definitions
    104  0000 ????
    105  0000 ????
    106  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    107  0000 ????
    108  0000 ????				      MAC	newbank
    109  0000 ????				      SEG	{1}
    110  0000 ????				      ORG	ORIGIN
    111  0000 ????				      RORG	$F000
    112  0000 ????			   BANK_START SET	*
    113  0000 ????			   {1}	      SET	ORIGIN / 2048
    114  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    115  0000 ????			   _CURRENT_BANK SET	{1}
    116  0000 ????				      ENDM		; bank name
    117  0000 ????
    118  0000 ????				      MAC	define_1k_segment
    119  0000 ????				      ALIGN	$400
    120  0000 ????			   SEGMENT_{1} SET	*
    121  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    122  0000 ????				      ENDM		; {seg name}
    123  0000 ????
    124  0000 ????				      MAC	check_bank_size
    125  0000 ????			   .TEMP      =	* - BANK_START
    126  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    127  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    128  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    129  0000 ????				      ERR
    130  0000 ????				      endif
    131  0000 ????				      ENDM		; name
    132  0000 ????
    133  0000 ????
    134  0000 ????				      MAC	check_half_bank_size
    135  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    136  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    137  0000 ????			   .TEMP      =	* - BANK_START
    138  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    139  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    140  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    141  0000 ????				      ERR
    142  0000 ????				      endif
    143  0000 ????				      ENDM		; name
    144  0000 ????
    145  0000 ????
    146  0000 ????						;---------------------------------------------------------------------------------------------------
    147  0000 ????
    148  0000 ????						; Macro inserts a page break if the object would overlap a page
    149  0000 ????
    150  0000 ????				      MAC	optional_pagebreak
    151  0000 ????				      LIST	OFF
    152  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    153  0000 ????			   EARLY_LOCATION SET	*
    154  0000 ????				      ALIGN	256
    155  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    156  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    157  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    158  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    159  0000 ????				      ENDIF
    160  0000 ????				      LIST	ON
    161  0000 ????				      ENDM		; { string, size }
    162  0000 ????
    163  0000 ????
    164  0000 ????				      MAC	check_page_crossing
    165  0000 ????				      LIST	OFF
    166  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    167  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    168  0000 ????				      endif
    169  0000 ????				      LIST	ON
    170  0000 ????				      ENDM
    171  0000 ????
    172  0000 ????				      MAC	checkpage
    173  0000 ????				      LIST	OFF
    174  0000 ????				      IF	>. != >{1}
    175  0000 ????				      ECHO	""
    176  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    177  0000 ????				      ECHO	""
    178  0000 ????				      ERR
    179  0000 ????				      ENDIF
    180  0000 ????				      LIST	ON
    181  0000 ????				      ENDM
    182  0000 ????
    183  0000 ????				      MAC	checkpagex
    184  0000 ????				      LIST	OFF
    185  0000 ????				      IF	>. != >{1}
    186  0000 ????				      ECHO	""
    187  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    188  0000 ????				      ECHO	{2}
    189  0000 ????				      ECHO	""
    190  0000 ????				      ERR
    191  0000 ????				      ENDIF
    192  0000 ????				      LIST	ON
    193  0000 ????				      ENDM
    194  0000 ????
    195  0000 ????
    196  0000 ????						;---------------------------------------------------------------------------------------------------
    197  0000 ????
    198  0000 ????				      MAC	def
    199  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    200  0000 ????						;    SUBROUTINE      ; doesn't work in a macro!
    201  0000 ????			   {1}			; entry point
    202  0000 ????				      ENDM		; name of subroutine
    203  0000 ????
    204  0000 ????						;---------------------------------------------------------------------------------------------------
    205  0000 ????
    206  0000 ????				      MAC	newrambank
    207  0000 ????						; {1}	     bank name
    208  0000 ????						; {2}	     RAM bank number
    209  0000 ????
    210  0000 ????				      SEG.U	{1}
    211  0000 ????				      ORG	ORIGIN_RAM
    212  0000 ????				      RORG	RAM_3E
    213  0000 ????			   BANK_START SET	*
    214  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    215  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    216  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    217  0000 ????				      ENDM		; bank name
    218  0000 ????
    219  0000 ????						; TODO - fix - this is faulty....
    220  0000 ????				      MAC	validate_ram_size
    221  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    222  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    223  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    224  0000 ????				      ERR
    225  0000 ????				      ENDIF
    226  0000 ????				      ENDM
    227  0000 ????
    228  0000 ????						;---------------------------------------------------------------------------------------------------
    229  0000 ????
    230  0000 ????				      MAC	resync
    231  0000 ????						; resync screen, X and Y == 0 afterwards
    232  0000 ????				      lda	#%10	; make sure VBLANK is ON
    233  0000 ????				      sta	VBLANK
    234  0000 ????
    235  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    236  0000 ????			   .loopResync
    237  0000 ????				      VERTICAL_SYNC
    238  0000 ????
    239  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    240  0000 ????				      lda	Platform
    241  0000 ????				      eor	#PAL_50	; PAL-50?
    242  0000 ????				      bne	.ntsc
    243  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    244  0000 ????			   .ntsc
    245  0000 ????			   .loopWait
    246  0000 ????				      sta	WSYNC
    247  0000 ????				      sta	WSYNC
    248  0000 ????				      dey
    249  0000 ????				      bne	.loopWait
    250  0000 ????				      dex
    251  0000 ????				      bne	.loopResync
    252  0000 ????				      ENDM
    253  0000 ????
    254  0000 ????				      MAC	set_platform
    255  0000 ????						; 00 = NTSC
    256  0000 ????						; 01 = NTSC
    257  0000 ????						; 10 = PAL-50
    258  0000 ????						; 11 = PAL-60
    259  0000 ????				      lda	SWCHB
    260  0000 ????				      rol
    261  0000 ????				      rol
    262  0000 ????				      rol
    263  0000 ????				      and	#%11
    264  0000 ????				      eor	#PAL
    265  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    266  0000 ????				      ENDM
    267  0000 ????
    268  0000 ????
    269  0000 ????						;---------------------------------------------------------------------------------------------------
    270  0000 ????
    271  0000 ????				      MAC	jsram_safe
    272  0000 ????						; Saves bank of routine to variable for later restore.
    273  0000 ????						; Switches to the bank and does a JSR to the routine.
    274  0000 ????
    275  0000 ????				      lda	#BANK_{1}
    276  0000 ????				      sta	savedBank
    277  0000 ????				      sta	SET_BANK
    278  0000 ????				      jsr	{1}
    279  0000 ????				      ENDM		; {routine}
    280  0000 ????
    281  0000 ????
    282  0000 ????				      MAC	jsram
    283  0000 ????
    284  0000 ????				      lda	#BANK_{1}
    285  0000 ????				      sta	SET_BANK
    286  0000 ????				      jsr	{1}
    287  0000 ????				      ENDM		; {routine}
    288  0000 ????
    289  0000 ????						;---------------------------------------------------------------------------------------------------
    290  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00f3 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawPhase  ds	1	; ticks through the board draw process
     12 U0083		       00	   drawDelay  ds	1
     13 U0084		       00	   lastSquare ds	1
     14 U0085		       00	   drawCount  ds	1
     15 U0086		       00	   fromX12    ds	1
     16 U0087		       00	   toX12      ds	1
     17 U0088		       00 00	   highlight_row ds	2
     18 U008a		       00 00	   highlight_col ds	2
     19 U008c		       00	   mdelay     ds	1
     20 U008d		       00	   ccur       ds	1
     21 U008e		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     22 U008f		       00	   aiPhase    ds	1	; human/computer state machine
     23 U0090		       00	   aiFlashDelay ds	1
     24 U0091		       00	   aiFromSquare ds	1
     25 U0092		       00	   aiToSquare ds	1
     26 U0093		       00	   aiFromSquareX12 ds	1
     27 U0094		       00	   aiToSquareX12 ds	1
     28 U0095		       00	   aiMoveIndex ds	1
     29 U0096
     30 U0096		       00	   aiFlashPhase ds	1
     31 U0097
     32 U0097		       00	   currentPiece ds	1
     33 U0098		       00	   currentSquare ds	1
     34 U0099		       00	   returnBank ds	1
     35 U009a		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     36 U009b		       00	   followPiece ds	1
     37 U009c		       00	   currentPly ds	1
     38 U009d		       00	   piecelistIndex ds	1
     39 U009e		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     40 U009f		       00	   fromSquare ds	1
     41 U00a0		       00	   fromPiece  ds	1
     42 U00a1		       00	   toSquare   ds	1
     43 U00a2		       00	   toPiece    ds	1
     44 U00a3		       00	   lastPiece  ds	1
     45 U00a4		       00	   previousPiece ds	1
     46 U00a5
     47 U00a5		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     48 U00a6							;BufferedJoystick		  ds 1	      ; player joystick input
     49 U00a6							;PreviousJoystick		  ds 1
     50 U00a6							;BGColour			  ds 1
     51 U00a6		       00	   aiPiece    ds	1
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a7					      include	"overlays.asm"
      1 U00a7							; Chess
      2 U00a7							; Atari 2600 Chess display system
      3 U00a7							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a7							; andrew@taswegian.com
      5 U00a7
      6 U00a7							;---------------------------------------------------------------------------------------------------
      7 U00a7							; OVERLAYS!
      8 U00a7							; These variables are overlays, and should be managed with care
      9 U00a7							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a7							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a7							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a7							; overlay #2
     13 U00a7
     14 U00a7							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a7
     16 U00a7							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a7							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a7							;---------------------------------------------------------------------------------------------------
     19 U00a7
     20 U00a7					      MAC	overlay
     21 U00a7				   OVERLAY_NAME SET	{1}
     22 U00a7					      SEG.U	OVERLAY_{1}
     23 U00a7					      org	Overlay
     24 U00a7					      ENDM		; {name}
     25 U00a7
     26 U00a7							;---------------------------------------------------------------------------------------------------
     27 U00a7
     28 U00a7					      MAC	validate_overlay
     29 U00a7					      LIST	OFF
     30 U00a7				   OVERLAY_DELTA SET	* - Overlay
     31 U00a7					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a7					      ENDIF
     34 U00a7					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a7					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a7					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a7					      ERR
     38 U00a7					      ENDIF
     39 U00a7					      LIST	ON
     40 U00a7					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a7					      ENDM
     42 U00a7
     43 U00a7							;---------------------------------------------------------------------------------------------------
     44 U00a7
     45 U00a7				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a7
     48 U00a7
     49 U00a7							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a7							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a7							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a7							; (especially the latter ones) are only used in rare occasions.
     53 U00a7
     54 U00a7							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a7							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a7
     57 U00a7		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00f3				   END_OF_OVERLAY
     59 U00f3
     60 U00f3							;---------------------------------------------------------------------------------------------------
     61 U00f3							; And now... the overlays....
     62 U00f3
 ---- OVERLAYS ( $4c bytes ) ----
     63 U00f3					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     64 U00f3
     65 U00f3							;---------------------------------------------------------------------------------------------------
     66 U00f3
      0 U00f3					      OVERLAY	"PieceBufferOverlay"
      1 U00f3				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00f3 ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a7					      org	Overlay
     68 U00a7							; used in CopyPieceFromRAMBufferToScreen
     69 U00a7							; used in CopyPieceToRAMBuffer
     70 U00a7							; used in ClearChessBitmap
     71 U00a7							; used in CopyPieceToRowBitmap
     72 U00a7		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     73 U00ef		       00 00	   __ptr      ds	2	; pointer to data
     74 U00f1		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00f3					      VALIDATE_OVERLAY
     11 U00f3					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00f3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     76 U00f3
     77 U00f3							;---------------------------------------------------------------------------------------------------
     78 U00f3
      0 U00f3					      OVERLAY	"CopyROMShadowToRAM"
      1 U00f3				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U00aa ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a7					      org	Overlay
     80 U00a7		       00	   __CopyCount ds	1
     81 U00a8		       00	   __ROM_SourceBank ds	1
     82 U00a9		       00	   __index    ds	1
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     84 U00aa
     85 U00aa							;---------------------------------------------------------------------------------------------------
     86 U00aa
      0 U00aa					      OVERLAY	"DrawTheChessScreen"
      1 U00aa				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U00a8 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a7					      org	Overlay
     88 U00a7		       00	   __rows     ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     90 U00a8
     91 U00a8							;---------------------------------------------------------------------------------------------------
     92 U00a8
      0 U00a8					      OVERLAY	"SetupShadowRAM"
      1 U00a8				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U00a9 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a7					      org	Overlay
     94 U00a7		       00	   __destinationBank ds	1
     95 U00a8		       00	   __sourceBank ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     97 U00a9
     98 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"DrawPiece"
      1 U00a9				   OVERLAY_NAME SET	"DrawPiece"
      2 U00a9 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a7					      org	Overlay
    100 U00a7		       00	   __pieceColour ds	1
    101 U00a8		       00	   __boardc   ds	1
    102 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 DrawPiece - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    104 U00a9
    105 U00a9
    106 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"InitPly"
      1 U00a9				   OVERLAY_NAME SET	"InitPly"
      2 U00a8 ????				      SEG.U	OVERLAY_"InitPly"
      3 U00a7					      org	Overlay
    108 U00a7		       00	   __plyBank  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 InitPly - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    110 U00a8
    111 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"RandomPiece"
      1 U00a8				   OVERLAY_NAME SET	"RandomPiece"
      2 U00a8 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a7					      org	Overlay
    113 U00a7		       00	   __tempx    ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    115 U00a8
      0 U00a8					      OVERLAY	"Overlay000"
      1 U00a8				   OVERLAY_NAME SET	"Overlay000"
      2 U00a8 ????				      SEG.U	OVERLAY_"Overlay000"
      3 U00a7					      org	Overlay
    117 U00a7		       00	   __fromRow  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 Overlay000 - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    119 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"Overlay001"
      1 U00a8				   OVERLAY_NAME SET	"Overlay001"
      2 U00a9 ????				      SEG.U	OVERLAY_"Overlay001"
      3 U00a7					      org	Overlay
    121 U00a7		       00	   __from     ds	1
    122 U00a8		       00	   __to       ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 Overlay001 - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    124 U00a9							;---------------------------------------------------------------------------------------------------
    125 U00a9
      0 U00a9					      OVERLAY	"Handlers"
      1 U00a9				   OVERLAY_NAME SET	"Handlers"
      2 U00aa ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a7					      org	Overlay
    127 U00a7		       00	   __piece    ds	1
    128 U00a8		       00 00	   __vector   ds	2
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Handlers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    130 U00aa
    131 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"Movers"
      1 U00aa				   OVERLAY_NAME SET	"Movers"
      2 U00aa ????				      SEG.U	OVERLAY_"Movers"
      3 U00a7					      org	Overlay
    133 U00a7		       00	   __fromCol  ds	1
    134 U00a8		       00	   __toCol    ds	1
    135 U00a9		       00	   __temp     ds	1
    136 U00aa
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Movers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    138 U00aa
    139 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"checkPieces"
      1 U00aa				   OVERLAY_NAME SET	"checkPieces"
      2 U00a9 ????				      SEG.U	OVERLAY_"checkPieces"
      3 U00a7					      org	Overlay
    141 U00a7		       00	   __x	      ds	1
    142 U00a8		       00	   __bank     ds	1
    143 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 checkPieces - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    145 U00a9
    146 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"aiSelectStartSquare"
      1 U00a9				   OVERLAY_NAME SET	"aiSelectStartSquare"
      2 U00a8 ????				      SEG.U	OVERLAY_"aiSelectStartSquare"
      3 U00a7					      org	Overlay
    148 U00a7		       00	   __cursorColour ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 aiSelectStartSquare - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    150 U00a8
    151 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"TitleScreen"
      1 U00a8				   OVERLAY_NAME SET	"TitleScreen"
      2 U00a9 ????				      SEG.U	OVERLAY_"TitleScreen"
      3 U00a7					      org	Overlay
    153 U00a7		       00 00	   __colour_table ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 TitleScreen - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    155 U00a9							;---------------------------------------------------------------------------------------------------
    156 U00a9
      0 U00a9					      OVERLAY	"SAFE_showMoveOptions"
      1 U00a9				   OVERLAY_NAME SET	"SAFE_showMoveOptions"
      2 U00ff ????				      SEG.U	OVERLAY_"SAFE_showMoveOptions"
      3 U00a7					      org	Overlay
    158 U00a7		       00 00	   __moveDotColour ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SAFE_showMoveOptions - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    160 U00a9							;---------------------------------------------------------------------------------------------------
    161 U00a9
    162 U00f3					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
    163 U00f3					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    164 U00f3					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    165 U00f3
    166 U00f3							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00f3					      include	"stack.asm"
      1 U00f3							; Chess
      2 U00f3							; Atari 2600 Chess display system
      3 U00f3							; Copyright (c) 2019-2020 Andrew Davie
      4 U00f3							; andrew@taswegian.com
      5 U00f3
      6 U00f3
      7 U00f3		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00f3
      9 U00f3		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00ff
     11 U00ff							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00ff							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00ff							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    294 U00ff
 FREE BYTES IN ZERO PAGE =  $0
    295 U00ff					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    296 U00ff				  -	      IF	* > $FF
    297 U00ff				  -	      ERR	"Zero Page overflow!"
    298 U00ff					      ENDIF
    299 U00ff
    300 U00ff							;------------------------------------------------------------------------------
    301 U00ff							;##############################################################################
    302 U00ff							;------------------------------------------------------------------------------
    303 U00ff
    304 U00ff							; NOW THE VERY INTERESTING '3E' RAM BANKS
    305 U00ff							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    306 U00ff							; IN A 2K MEMORY SPACE
    307 U00ff
      0 U00ff					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00ff
      2 U00ff
      3 U00ff
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    309 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    309 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    309 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    309 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    309 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    309 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    309 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    312 U1c00					      REPEND
    313 U1c00
    314 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    315 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    316 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    317 U1c00
    318 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    319 U1c00							; is that we can use that code to switch between banks, and the system will happily
    320 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    321 U1c00
    322 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    323 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    324 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    325 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    326 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    327 U1c00
    328 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    329 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    330 U1c00
    331 U1c00							;------------------------------------------------------------------------------
    332 U1c00
    333 U1c00
    334 U1c00							;---------------------------------------------------------------------------------------------------
    335 U1c00
    336 U1c00
    337 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    338 U1c00
    339 U1c00					      MAC	next_random
    340 U1c00					      lda	rnd
    341 U1c00					      lsr
    342 U1c00					      bcc	.skipEOR
    343 U1c00					      eor	#RND_EOR_VAL
    344 U1c00				   .skipEOR   sta	rnd
    345 U1c00					      ENDM
    346 U1c00
    347 U1c00							;--------------------------------------------------------------------------------
    348 U1c00
    349 U1c00							;ORIGIN      SET 0
    350 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00
     12 U1c00					      ldx	currentSquare
     13 U1c00					      bne	.project	; unconditional
     14 U1c00
     15 U1c00				   .empty     jsr	AddMove
     16 U1c00				   .project   ldy	ValidSquare+{1},x
     17 U1c00					      bmi	.invalid	; off board!
     18 U1c00					      lda	Board,y	; piece @ destination
     19 U1c00					      beq	.empty
     20 U1c00					      eor	currentPiece
     21 U1c00					      bpl	.invalid	; same colour
     22 U1c00					      jsr	AddMove	; and exit
     23 U1c00
     24 U1c00				   .invalid
     25 U1c00					      ENDM
     26 U1c00
     27 U1c00							;---------------------------------------------------------------------------------------------------
     28 U1c00
     29 U1c00					      MAC	move_to
     30 U1c00					      SUBROUTINE
     31 U1c00					      ldy	ValidSquare+{1},x
     32 U1c00					      bmi	.invalid	; off board!
     33 U1c00					      lda	Board,y	; piece @ destination
     34 U1c00					      beq	.squareEmpty
     35 U1c00					      eor	currentPiece
     36 U1c00					      bpl	.invalid	; same colour
     37 U1c00				   .squareEmpty jsr	AddMove
     38 U1c00				   .invalid
     39 U1c00					      ENDM
     40 U1c00
     41 U1c00
     42 U1c00					      MAC	move_to_x
     43 U1c00					      ldx	currentSquare
     44 U1c00					      MOVE_TO	{1}
     45 U1c00					      ENDM
     46 U1c00
     47 U1c00
     48 U1c00							;---------------------------------------------------------------------------------------------------
     49 U1c00							; EOF
------- FILE ./chess.asm
    352 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  013c ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;------------------------------------------------------------------------------
     18  0004							; ... the above is a RAM-copied section -- the following is ROM-only.	Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;------------------------------------------------------------------------------
     22  0004
      0  0004					      DEF	Cart_Init	; in GENERIC_BANK_1
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004
      3  0004				   Cart_Init
     24  0004
     25  0004							; Note the variables from the title selection are incredibly transient an can be stomped
     26  0004							; at any time.  So they need to be used immediately.
     27  0004
     28  0004
     29  0004							; odd usage below is to prevent any possibility of variable stomping/assumptions
     30  0004
     31  0004		       a9 00		      lda	#0
     32  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     33  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     34  000c		       85 6b		      sta	HMCLR
     35  000e
     36  000e							; cleanup remains of title screen
     37  000e		       85 5b		      sta	GRP0
     38  0010		       85 5c		      sta	GRP1
     39  0012
     40  0012		       a9 10		      lda	#%00010000	; 2	 double width missile, double width player
     41  0014		       85 44		      sta	NUSIZ0	; 3
     42  0016		       85 45		      sta	NUSIZ1
     43  0018
     44  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     45  001a		       85 4a		      sta	CTRLPF
     46  001c
     47  001c							;		  lda #$FF
     48  001c							;		  sta BufferedJoystick
     49  001c
     50  001c							;lda #DIRECTION_BITS		  ;???
     51  001c							;sta ManLastDirection
     52  001c
     53  001c							;lda #0
     54  001c							;		  sta ObjStackPtr		  ; object stack index of last entry
     55  001c							;		  sta ObjStackPtr+1
     56  001c							;		  sta ObjStackNum
     57  001c							;		  sta ObjIterator
     58  001c
     59  001c							;sta sortPtr
     60  001c							;lda #<(-1)
     61  001c							;sta sortRequired
     62  001c
     63  001c		       60		      rts
     64  001d
     65  001d							;-------------------------------------------------------------------------------------
     66  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d
      3  001d				   Resync
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 a5		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     69  0040		       60	   Ret	      rts
     70  0041
     71  0041							;------------------------------------------------------------------------------
     72  0041
     73  0041
     74  0041				   OverscanTime
     75  0041		       23 23		      .byte.b	OVERSCAN_TIM_NTSC, OVERSCAN_TIM_NTSC
     76  0043		       29 23		      .byte.b	OVERSCAN_TIM_PAL, OVERSCAN_TIM_NTSC
     77  0045
     78  0045
     79  0045		       00 12	   THROT_BASE =	18
     80  0045				   theThrottler
     81  0045		       12 12 15 12	      .byte.b	THROT_BASE, THROT_BASE, THROT_BASE*60/50, THROT_BASE
     82  0049
      0  0049					      DEF	PostScreenCleanup
      1  0049				   BANK_PostScreenCleanup SET	_CURRENT_BANK
      2  0049
      3  0049				   PostScreenCleanup
     84  0049
     85  0049		       c8		      iny		; --> 0
     86  004a
     87  004a		       84 49		      sty	COLUBK	; starts colour change bottom score area, wraps to top score area
     88  004c							; + moved here so we don't see a minor colour artefact bottom of screen when look-arounding
     89  004c
     90  004c		       84 4d		      sty	PF0	; why wasn't this here?  I saw colour glitching in score area!
     91  004e							; TJ: no idea why, but you had removed it in revision 758 ;)
     92  004e							; completely accidental -- one of our cats may have deleted it.
     93  004e		       84 4e		      sty	PF1
     94  0050		       84 4f		      sty	PF2
     95  0052		       84 5d		      sty	ENAM0
     96  0054		       84 5b		      sty	GRP0	; when look-scrolling, we can see feet at the top if these aren't here
     97  0056		       84 5c		      sty	GRP1	; 30/12/2011 -- fix dots @ top!
     98  0058
     99  0058							; D1 VBLANK turns off beam
    100  0058
    101  0058		       a9 42		      lda	#%01000010	; bit6 is not required
    102  005a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    103  005c
    104  005c							;------------------------------------------------------------------------------
    105  005c							; This is where the PAL system has a bit of extra time on a per-frame basis.
    106  005c
    107  005c		       a6 a5		      ldx	Platform
    108  005e		       bd 41 f0 	      lda	OverscanTime,x
    109  0061		       8d 96 02 	      sta	TIM64T
    110  0064
    111  0064
    112  0064							;----------------------------------------------------------------------------------------------
    113  0064
    114  0064							; has to be done AFTER screen display, because it disables the effect!
    115  0064							;SLEEP 6
    116  0064							;lda rnd		      ; 3     randomly reposition the Cosmic Ark missile
    117  0064							;sta HMM0		      ; 3     this assumes that HMOVE is called at least once/frame
    118  0064
    119  0064				   noFlashBG
    120  0064							;	 sta BGColour
    121  0064
    122  0064							; Create a 'standardised' joystick with D4-D7 having bits CLEAR if the appropriate direction is chosen.
    123  0064
    124  0064							;		  lda SWCHA
    125  0064							;		  and BufferedJoystick
    126  0064							;		  sta BufferedJoystick
    127  0064
    128  0064		       60		      rts
    129  0065
    130  0065							;---------------------------------------------------------------------------------------------------
    131  0065
      0  0065					      DEF	StartClearBoard
      1  0065				   BANK_StartClearBoard SET	_CURRENT_BANK
      2  0065
      3  0065				   StartClearBoard
    133  0065
    134  0065		       a2 08		      ldx	#8
    135  0067		       86 85		      stx	drawCount	; = bank
    136  0069		       e6 82		      inc	drawPhase
    137  006b		       60		      rts
    138  006c
    139  006c							;---------------------------------------------------------------------------------------------------
    140  006c
      0  006c					      DEF	ClearEachRow
      1  006c				   BANK_ClearEachRow SET	_CURRENT_BANK
      2  006c
      3  006c				   ClearEachRow
    142  006c
    143  006c		       c6 85		      dec	drawCount
    144  006e		       30 05		      bmi	.bitmapCleared
    145  0070		       a4 85		      ldy	drawCount
    146  0072		       4c 06 f9 	      jmp	CallClear
    147  0075
    148  0075				   .bitmapCleared
    149  0075
    150  0075		       a9 3f		      lda	#63
    151  0077		       85 80		      sta	drawPieceNumber
    152  0079
    153  0079		       e6 82		      inc	drawPhase
    154  007b		       60		      rts
    155  007c
    156  007c							;---------------------------------------------------------------------------------------------------
    157  007c
    158  007c
      0  007c					      DEF	FB3
      1  007c				   BANK_FB3   SET	_CURRENT_BANK
      2  007c
      3  007c				   FB3
    160  007c		       a9 00		      lda	#BLANK
    161  007e		       85 a4		      sta	previousPiece
    162  0080
    163  0080		       e6 82		      inc	drawPhase
    164  0082		       60		      rts
    165  0083
    166  0083							;---------------------------------------------------------------------------------------------------
    167  0083
      0  0083					      DEF	EraseStartPiece
      1  0083				   BANK_EraseStartPiece SET	_CURRENT_BANK
      2  0083
      3  0083				   EraseStartPiece
    169  0083
    170  0083
    171  0083		       a5 a1		      lda	toSquare
    172  0085		       c5 9f		      cmp	fromSquare
    173  0087		       f0 0a		      beq	.idleErase
    174  0089
    175  0089		       a9 06		      lda	#6	; on/off count
    176  008b		       85 85		      sta	drawCount	; flashing for piece about to move
    177  008d		       a9 00		      lda	#0
    178  008f		       85 83		      sta	drawDelay
    179  0091
    180  0091		       e6 82		      inc	drawPhase
    181  0093		       60	   .idleErase rts
    182  0094
    183  0094							;---------------------------------------------------------------------------------------------------
    184  0094
      0  0094					      DEF	WriteStartPieceBlank
      1  0094				   BANK_WriteStartPieceBlank SET	_CURRENT_BANK
      2  0094
      3  0094				   WriteStartPieceBlank
    186  0094
    187  0094
    188  0094							; Flash the piece in-place preparatory to moving it.
    189  0094							; drawDelay = flash speed
    190  0094							; drawCount = # of flashes
    191  0094
    192  0094		       a5 83		      lda	drawDelay
    193  0096		       f0 03		      beq	deCount
    194  0098		       c6 83		      dec	drawDelay
    195  009a		       60		      rts
    196  009b
    197  009b				   deCount
    198  009b
    199  009b		       a5 85		      lda	drawCount
    200  009d		       f0 0e		      beq	flashDone
    201  009f		       c6 85		      dec	drawCount
    202  00a1
    203  00a1		       a9 04		      lda	#4
    204  00a3		       85 83		      sta	drawDelay	; "getting ready to move" flash
    205  00a5
    206  00a5		       a5 9f		      lda	fromSquare
    207  00a7		       85 80		      sta	drawPieceNumber
    208  00a9		       20 cf fd 	      jsr	SAFE_CopySinglePiece	; EOR-draw = flash
    209  00ac		       60		      rts
    210  00ad
    211  00ad		       e6 82	   flashDone  inc	drawPhase
    212  00af		       60		      rts
    213  00b0
    214  00b0							;---------------------------------------------------------------------------------------------------
    215  00b0
    216  00b0
      0  00b0					      DEF	DEB2
      1  00b0				   BANK_DEB2  SET	_CURRENT_BANK
      2  00b0
      3  00b0				   DEB2
    218  00b0
    219  00b0		       20 cf fd 	      jsr	SAFE_CopySinglePiece
    220  00b3		       c6 80		      dec	drawPieceNumber
    221  00b5		       30 03		      bmi	.comp
    222  00b7
    223  00b7		       c6 82		      dec	drawPhase
    224  00b9		       60		      rts
    225  00ba
    226  00ba		       e6 82	   .comp      inc	drawPhase
    227  00bc		       60		      rts
    228  00bd
    229  00bd
    230  00bd							;---------------------------------------------------------------------------------------------------
    231  00bd
      0  00bd					      DEF	MarchB
      1  00bd				   BANK_MarchB SET	_CURRENT_BANK
      2  00bd
      3  00bd				   MarchB
    233  00bd
    234  00bd							; Draw the piece in the new square
    235  00bd
    236  00bd		       a5 9f		      lda	fromSquare
    237  00bf		       85 80		      sta	drawPieceNumber
    238  00c1		       20 cf fd 	      jsr	SAFE_CopySinglePiece	; draw the moving piece into the new square
    239  00c4
    240  00c4		       a9 06		      lda	#6	; snail trail delay
    241  00c6		       85 83		      sta	drawDelay
    242  00c8
    243  00c8		       e6 82		      inc	drawPhase
    244  00ca		       60		      rts
    245  00cb
    246  00cb							;---------------------------------------------------------------------------------------------------
    247  00cb
      0  00cb					      DEF	FinalFlash
      1  00cb				   BANK_FinalFlash SET	_CURRENT_BANK
      2  00cb
      3  00cb				   FinalFlash
    249  00cb
    250  00cb		       a5 83		      lda	drawDelay
    251  00cd		       f0 03		      beq	.deCount
    252  00cf		       c6 83		      dec	drawDelay
    253  00d1		       60		      rts
    254  00d2
    255  00d2		       a5 85	   .deCount   lda	drawCount
    256  00d4		       f0 0e		      beq	flashDone2
    257  00d6		       c6 85		      dec	drawCount
    258  00d8
    259  00d8		       a9 0a		      lda	#10
    260  00da		       85 83		      sta	drawDelay	; "getting ready to move" flash
    261  00dc
    262  00dc		       a5 9f		      lda	fromSquare
    263  00de		       85 80		      sta	drawPieceNumber
    264  00e0		       20 cf fd 	      jsr	SAFE_CopySinglePiece
    265  00e3		       60		      rts
    266  00e4
    267  00e4
    268  00e4		       e6 82	   flashDone2 inc	drawPhase
    269  00e6		       60		      rts
    270  00e7
    271  00e7
    272  00e7							;---------------------------------------------------------------------------------------------------
    273  00e7
      0  00e7					      DEF	CastleFixup
      1  00e7				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00e7
      3  00e7				   CastleFixup
    275  00e7
    276  00e7							; fixup any castling issues
    277  00e7							; at this point the king has finished his two-square march
    278  00e7							; based on the finish square, we determine which rook we're interacting with
    279  00e7							; and generate a 'move' for the rook to position on the other side of the king
    280  00e7
    281  00e7
    282  00e7		       a5 a0		      lda	fromPiece
    283  00e9		       29 10		      and	#CASTLE
    284  00eb		       f0 2a		      beq	.noCast
    285  00ed
    286  00ed		       a2 ff		      ldx	#-1
    287  00ef		       a5 a1		      lda	toSquare
    288  00f1		       e8	   .findCast  inx
    289  00f2		       dd 37 fa 	      cmp	KSquare,x
    290  00f5		       d0 fa		      bne	.findCast
    291  00f7
    292  00f7		       bd 3f fa 	      lda	RSquareEnd,x
    293  00fa		       85 87		      sta	toX12
    294  00fc		       bd 43 fa 	      lda	RSquareStart64,x
    295  00ff		       85 9f		      sta	fromSquare
    296  0101		       bd 47 fa 	      lda	RSquareEnd64,x
    297  0104		       85 a1		      sta	toSquare
    298  0106
    299  0106		       bc 3b fa 	      ldy	RSquareStart,x
    300  0109		       84 86		      sty	fromX12
    301  010b
    302  010b		       a5 a0		      lda	fromPiece
    303  010d		       29 80		      and	#128
    304  010f		       09 05		      ora	#ROOK
    305  0111		       85 a0		      sta	fromPiece
    306  0113
    307  0113		       a9 07		      lda	#CSL
    308  0115		       85 82		      sta	drawPhase
    309  0117		       60	   .noCast    rts
    310  0118
    311  0118
    312  0118							;---------------------------------------------------------------------------------------------------
    313  0118
      0  0118					      DEF	SetupBanks
      1  0118				   BANK_SetupBanks SET	_CURRENT_BANK
      2  0118
      3  0118				   SetupBanks
    315  0118							; SAFE
    316  0118
    317  0118		       a0 07		      ldy	#7
    318  011a		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    319  011c		       20 9b fd 	      jsr	SAFE_CopyShadowROMtoRAM
    320  011f		       88		      dey
    321  0120		       10 f8		      bpl	.copyRowBanks
    322  0122
    323  0122							; copy the BOARD/MOVES bank
    324  0122
    325  0122		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    326  0124		       a2 0c		      ldx	#MOVES
    327  0126		       20 9b fd 	      jsr	SAFE_CopyShadowROMtoRAM	; this auto-initialises Board too
    328  0129
    329  0129							; copy the PLY banks
    330  0129
    331  0129		       a9 06		      lda	#MAX_PLY
    332  012b		       85 a7		      sta	__plyBank
    333  012d		       a0 09		      ldy	#RAMBANK_PLY
    334  012f		       84 9c		      sty	currentPly
    335  0131		       a2 0d	   .copyPlyBanks ldx	#BANK_PLY
    336  0133		       20 9b fd 	      jsr	SAFE_CopyShadowROMtoRAM
    337  0136		       c8		      iny
    338  0137		       c6 a7		      dec	__plyBank
    339  0139		       d0 f6		      bne	.copyPlyBanks
    340  013b
    341  013b							; The state machine bank
    342  013b
    343  013b							;		  ldy #RAMBANK_STATEMACHINE
    344  013b							;		  ldx #STATEMACHINE
    345  013b							;		  jsr SAFE_CopyShadowROMtoRAM
    346  013b
    347  013b		       60		      rts
    348  013c
    349  013c
    350  013c							;---------------------------------------------------------------------------------------------------
    351  013c
    352  013c
      0  013c					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  013c		       01 3c	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $13c , FREE= $6c4
      2  013c					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  013c				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  013c				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  013c				  -	      ERR
      6  013c					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  013c					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  013c
      0  013c					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0aec ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 94	   COLOUR_LINE_1 =	$94
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 28	   COLOUR_LINE_3 =	$28
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800							; good 94/46/28/0
     18  0800							; good 94/44/26/0
     19  0800
     20  0800
     21  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     22  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     24  0800
     25  0800				   ChessBitmap
     26  0800		       00 00 00 00*ChessBitmap0 ds	24
     27  0818		       00 00 00 00*ChessBitmap1 ds	24
     28  0830		       00 00 00 00*ChessBitmap2 ds	24
     29  0848		       00 00 00 00*ChessBitmap3 ds	24
     30  0860		       00 00 00 00*ChessBitmap4 ds	24
     31  0878		       00 00 00 00*ChessBitmap5 ds	24
     32  0890
     33  0890
     34  0890				   BlankSprite
     35  0890		       00 00 00 00*	      ds	8,0
     36  0898
     37  0898				   SpriteBuffer
     38  0898					      REPEAT	24
     39  0898		       f8		      .byte.b	%11111000	;%00011111
     38  0898					      REPEND
     39  0899		       f8		      .byte.b	%11111000	;%00011111
     38  0899					      REPEND
     39  089a		       f8		      .byte.b	%11111000	;%00011111
     38  089a					      REPEND
     39  089b		       f8		      .byte.b	%11111000	;%00011111
     38  089b					      REPEND
     39  089c		       f8		      .byte.b	%11111000	;%00011111
     38  089c					      REPEND
     39  089d		       f8		      .byte.b	%11111000	;%00011111
     38  089d					      REPEND
     39  089e		       f8		      .byte.b	%11111000	;%00011111
     38  089e					      REPEND
     39  089f		       f8		      .byte.b	%11111000	;%00011111
     38  089f					      REPEND
     39  08a0		       f8		      .byte.b	%11111000	;%00011111
     38  08a0					      REPEND
     39  08a1		       f8		      .byte.b	%11111000	;%00011111
     38  08a1					      REPEND
     39  08a2		       f8		      .byte.b	%11111000	;%00011111
     38  08a2					      REPEND
     39  08a3		       f8		      .byte.b	%11111000	;%00011111
     38  08a3					      REPEND
     39  08a4		       f8		      .byte.b	%11111000	;%00011111
     38  08a4					      REPEND
     39  08a5		       f8		      .byte.b	%11111000	;%00011111
     38  08a5					      REPEND
     39  08a6		       f8		      .byte.b	%11111000	;%00011111
     38  08a6					      REPEND
     39  08a7		       f8		      .byte.b	%11111000	;%00011111
     38  08a7					      REPEND
     39  08a8		       f8		      .byte.b	%11111000	;%00011111
     38  08a8					      REPEND
     39  08a9		       f8		      .byte.b	%11111000	;%00011111
     38  08a9					      REPEND
     39  08aa		       f8		      .byte.b	%11111000	;%00011111
     38  08aa					      REPEND
     39  08ab		       f8		      .byte.b	%11111000	;%00011111
     38  08ab					      REPEND
     39  08ac		       f8		      .byte.b	%11111000	;%00011111
     38  08ac					      REPEND
     39  08ad		       f8		      .byte.b	%11111000	;%00011111
     38  08ad					      REPEND
     39  08ae		       f8		      .byte.b	%11111000	;%00011111
     38  08ae					      REPEND
     39  08af		       f8		      .byte.b	%11111000	;%00011111
     40  08b0					      REPEND
     41  08b0
     42  08b0				   SpriteBuffer2
     43  08b0					      REPEAT	24
     44  08b0		       f8		      .byte.b	%11111000	;%00011111
     43  08b0					      REPEND
     44  08b1		       f8		      .byte.b	%11111000	;%00011111
     43  08b1					      REPEND
     44  08b2		       f8		      .byte.b	%11111000	;%00011111
     43  08b2					      REPEND
     44  08b3		       f8		      .byte.b	%11111000	;%00011111
     43  08b3					      REPEND
     44  08b4		       f8		      .byte.b	%11111000	;%00011111
     43  08b4					      REPEND
     44  08b5		       f8		      .byte.b	%11111000	;%00011111
     43  08b5					      REPEND
     44  08b6		       f8		      .byte.b	%11111000	;%00011111
     43  08b6					      REPEND
     44  08b7		       f8		      .byte.b	%11111000	;%00011111
     43  08b7					      REPEND
     44  08b8		       f8		      .byte.b	%11111000	;%00011111
     43  08b8					      REPEND
     44  08b9		       f8		      .byte.b	%11111000	;%00011111
     43  08b9					      REPEND
     44  08ba		       f8		      .byte.b	%11111000	;%00011111
     43  08ba					      REPEND
     44  08bb		       f8		      .byte.b	%11111000	;%00011111
     43  08bb					      REPEND
     44  08bc		       f8		      .byte.b	%11111000	;%00011111
     43  08bc					      REPEND
     44  08bd		       f8		      .byte.b	%11111000	;%00011111
     43  08bd					      REPEND
     44  08be		       f8		      .byte.b	%11111000	;%00011111
     43  08be					      REPEND
     44  08bf		       f8		      .byte.b	%11111000	;%00011111
     43  08bf					      REPEND
     44  08c0		       f8		      .byte.b	%11111000	;%00011111
     43  08c0					      REPEND
     44  08c1		       f8		      .byte.b	%11111000	;%00011111
     43  08c1					      REPEND
     44  08c2		       f8		      .byte.b	%11111000	;%00011111
     43  08c2					      REPEND
     44  08c3		       f8		      .byte.b	%11111000	;%00011111
     43  08c3					      REPEND
     44  08c4		       f8		      .byte.b	%11111000	;%00011111
     43  08c4					      REPEND
     44  08c5		       f8		      .byte.b	%11111000	;%00011111
     43  08c5					      REPEND
     44  08c6		       f8		      .byte.b	%11111000	;%00011111
     43  08c6					      REPEND
     44  08c7		       f8		      .byte.b	%11111000	;%00011111
     45  08c8					      REPEND
     46  08c8				  -	      if	0
     47  08c8				  -	      .byte	%00011111
     48  08c8				  -	      .byte	%00011111
     49  08c8				  -	      .byte	%00011111
     50  08c8				  -	      .byte	%00011111
     51  08c8				  -	      .byte	%00011111
     52  08c8				  -	      .byte	%00011111
     53  08c8				  -	      .byte	%00011111
     54  08c8				  -	      .byte	%00011111
     55  08c8				  -
     56  08c8				  -	      .byte	%00011111
     57  08c8				  -	      .byte	%00011111
     58  08c8				  -	      .byte	%00011111
     59  08c8				  -	      .byte	%00011111
     60  08c8				  -	      .byte	%00011111
     61  08c8				  -	      .byte	%00011111
     62  08c8				  -	      .byte	%00011111
     63  08c8				  -	      .byte	%00011111
     64  08c8				  -
     65  08c8				  -	      .byte	%00011111
     66  08c8				  -	      .byte	%00011111
     67  08c8				  -	      .byte	%00011111
     68  08c8				  -	      .byte	%00011111
     69  08c8				  -	      .byte	%00011111
     70  08c8				  -	      .byte	%00011111
     71  08c8				  -	      .byte	%00011111
     72  08c8				  -	      .byte	%00011111
     73  08c8					      endif
     74  08c8
     75  08c8
     76  08c8							;---------------------------------------------------------------------------------------------------
     77  08c8					      if	1
      0  08c8					      DEF	ClearRowBitmap
      1  08c8				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  08c8
      3  08c8				   ClearRowBitmap
     79  08c8
     80  08c8		       a9 00		      lda	#0
     81  08ca		       a0 90		      ldy	#ROW_BITMAP_SIZE
     82  08cc		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     83  08cf		       88		      dey
     84  08d0		       d0 fa		      bne	.clearRow
     85  08d2		       60		      rts
     86  08d3					      endif
     87  08d3
     88  08d3							;---------------------------------------------------------------------------------------------------
     89  08d3
      0  08d3					      DEF	CopyPieceToRowBitmap
      1  08d3				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  08d3
      3  08d3				   CopyPieceToRowBitmap
     91  08d3
     92  08d3		       a0 11		      ldy	#17
     93  08d5		       b0 30		      bcs	.rightSide
     94  08d7
     95  08d7				   .copyPiece
     96  08d7		       b9 a7 00 	      lda	__pieceShapeBuffer,y
     97  08da		       f0 06		      beq	.blank1
     98  08dc		       59 00 f0 	      eor	ChessBitmap,y
     99  08df		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    100  08e2
    101  08e2		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    102  08e5		       f0 06		      beq	.blank2
    103  08e7		       59 12 f0 	      eor	ChessBitmap+18,y
    104  08ea		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
    105  08ed
    106  08ed		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    107  08f0		       f0 06		      beq	.blank3
    108  08f2		       59 24 f0 	      eor	ChessBitmap+36,y
    109  08f5		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
    110  08f8
    111  08f8		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    112  08fb		       f0 06		      beq	.blank4
    113  08fd		       59 36 f0 	      eor	ChessBitmap+54,y
    114  0900		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
    115  0903
    116  0903		       88	   .blank4    dey
    117  0904		       10 d1		      bpl	.copyPiece
    118  0906
    119  0906		       60		      rts
    120  0907
    121  0907				   .rightSide
    122  0907
    123  0907					      SUBROUTINE
    124  0907
    125  0907				   .copyPieceR
    126  0907
    127  0907		       b9 a7 00 	      lda	__pieceShapeBuffer,y
    128  090a		       f0 06		      beq	.blank1
    129  090c		       59 48 f0 	      eor	ChessBitmap+72,y
    130  090f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    131  0912
    132  0912		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    133  0915		       f0 06		      beq	.blank2
    134  0917		       59 5a f0 	      eor	ChessBitmap+72+18,y
    135  091a		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    136  091d
    137  091d		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    138  0920		       f0 06		      beq	.blank3
    139  0922		       59 6c f0 	      eor	ChessBitmap+72+36,y
    140  0925		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    141  0928
    142  0928		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    143  092b		       f0 06		      beq	.blank4
    144  092d		       59 7e f0 	      eor	ChessBitmap+72+54,y
    145  0930		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    146  0933
    147  0933				   .blank4
    148  0933		       88		      dey
    149  0934		       10 d1		      bpl	.copyPieceR
    150  0936
    151  0936		       60		      rts
    152  0937
    153  0937							;---------------------------------------------------------------------------------------------------
    154  0937
    155  0a00		       00 00 00 00*	      ALIGN	256
    156  0a00
    157  0a00							; x = row # (and bank#)
    158  0a00
    159  0a00				   .endline
    160  0a00
    161  0a00							;@59
    162  0a00
    163  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    164  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    165  0a00				   SELFMOD_RTS_ON_LAST_ROW
    166  0a00		       e8		      inx		; 2
    167  0a01
    168  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    169  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03
      3  0a03				   DrawRow
    171  0a03
    172  0a03							;@64
    173  0a03		       a0 07		      ldy	#7	; 2
    174  0a05		       10 3b		      bpl	.dl2	; 3   (must be 69 here)
    175  0a07
    176  0a07							;@58...
    177  0a07
    178  0a07				   .l3
    179  0a07
    180  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    181  0a0a		       85 5b		      sta	GRP0	; 3
    182  0a0c		       b9 c0 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    183  0a0f		       85 5c		      sta	GRP1	; 3
    184  0a11
    185  0a11							;@-4
    186  0a11
    187  0a11		       a9 94		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    188  0a13		       85 48		      sta	COLUPF	; 3 @1
    189  0a15
    190  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    191  0a18		       85 4d		      sta	PF0	; 3
    192  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    193  0a1d		       85 4e		      sta	PF1	; 3
    194  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    195  0a22		       85 4f		      sta	PF2	; 3 @22
    196  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    198  0a27
    199  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    200  0a2a		       85 4d		      sta	PF0	; 3
    201  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    202  0a2f		       85 4e		      sta	PF1	; 3
    203  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    204  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    205  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    207  0a39
    208  0a39		       88		      dey		; 2
    209  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    210  0a3c
    211  0a3c							;@57
    212  0a3c				   .drawLine
    213  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    215  0a42
    216  0a42				   .dl2
    217  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    218  0a45		       85 5b		      sta	GRP0	; 3
    219  0a47		       b9 b0 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    220  0a4a		       85 5c		      sta	GRP1	; 3
    221  0a4c
    222  0a4c							;@7
    223  0a4c
    224  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    225  0a4e		       85 48		      sta	COLUPF	; 3 @12
    226  0a50
    227  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    228  0a53		       85 4d		      sta	PF0	; 3
    229  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    230  0a58		       85 4e		      sta	PF1	; 3
    231  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    232  0a5d		       85 4f		      sta	PF2	; 3 @33
    233  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    235  0a61
    236  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    237  0a64		       85 4d		      sta	PF0	; 3
    238  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    239  0a69		       85 4e		      sta	PF1	; 3
    240  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    241  0a6e		       85 4f		      sta	PF2	; 3 @57
    242  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    244  0a73
    245  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    246  0a76		       85 5b		      sta	GRP0	; 3
    247  0a78		       b9 b8 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    248  0a7b		       85 5c		      sta	GRP1	; 3
    249  0a7d
    250  0a7d							;@0
    251  0a7d		       a9 28		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    252  0a7f		       85 48		      sta	COLUPF	; 3 @5
    253  0a81
    254  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    255  0a84		       85 4d		      sta	PF0	; 3
    256  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    257  0a89		       85 4e		      sta	PF1	; 3
    258  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    259  0a8e		       85 4f		      sta	PF2	; 3 @26
    260  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    262  0a94
    263  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    264  0a97		       85 4d		      sta	PF0	; 3
    265  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    266  0a9c		       85 4e		      sta	PF1	; 3
    267  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    268  0aa1		       85 4f		      sta	PF2	; 3 @55
    269  0aa3
    270  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    271  0aa6
    272  0aa6
    273  0aa6							;.LineColour
    274  0aa6							; The ICC triplet colour definitions for a single row of the chessboard
    275  0aa6							;    REPEAT 8
    276  0aa6							;	  .byte $4A, $28, $94
    277  0aa6							;    REPEND
    278  0aa6
    279  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6
      3  0aa6				   WriteBlank
    281  0aa6
    282  0aa6		       a9 90		      lda	#<BlankSprite
    283  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    284  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    285  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    286  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    287  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    288  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    289  0aba
    290  0aba		       a9 f0		      lda	#>BlankSprite
    291  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    292  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    293  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    294  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    295  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    296  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    297  0ace
    298  0ace		       60		      rts
    299  0acf
    300  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf
      3  0acf				   WriteCursor
    302  0acf
    303  0acf		       a6 88		      ldx	highlight_row
    304  0ad1		       30 18		      bmi	.noCursor
    305  0ad3
    306  0ad3		       86 3e		      stx	SET_BANK_RAM
    307  0ad5		       a9 98		      lda	#<SpriteBuffer
    308  0ad7		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    309  0ada		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    310  0add		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    311  0ae0		       a9 f0		      lda	#>SpriteBuffer
    312  0ae2		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    313  0ae5		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    314  0ae8		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    315  0aeb
    316  0aeb				  -	      if	0
    317  0aeb				  -	      ldx	highlight_row+1
    318  0aeb				  -	      stx	SET_BANK_RAM
    319  0aeb				  -	      lda	#<SpriteBuffer
    320  0aeb				  -	      sta	SMSPRITE0_1+1+RAM_WRITE
    321  0aeb				  -	      sta	SMSPRITE8_1+1+RAM_WRITE
    322  0aeb				  -	      sta	SMSPRITE16_1+1+RAM_WRITE
    323  0aeb				  -	      lda	#>SpriteBuffer
    324  0aeb				  -	      sta	SMSPRITE0_1+2+RAM_WRITE
    325  0aeb				  -	      sta	SMSPRITE8_1+2+RAM_WRITE
    326  0aeb				  -	      sta	SMSPRITE16_1+2+RAM_WRITE
    327  0aeb					      endif
    328  0aeb
    329  0aeb				   .noCursor
    330  0aeb		       60		      rts
    331  0aec
      0  0aec					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0aec
      2  0aec
      3  0aec		       02 ec	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $2ec , FREE= $114
      4  0aec					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0aec				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0aec				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0aec				  -	      ERR
      8  0aec					      endif
    333  0aec							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_INITBANK.asm LEVEL 2 PASS 2
      0  0aec					      include	"BANK_INITBANK.asm"	; MUST be after banks that include levels -- otherwise MAX_LEVELBANK is not calculated properly
      1  0aec							; Chess
      2  0aec							; Atari 2600 Chess display system
      3  0aec							; Copyright (c) 2019-2020 Andrew Davie
      4  0aec							; andrew@taswegian.com
      5  0aec
      0  0aec					      NEWBANK	INITBANK
      1  1007 ????				      SEG	INITBANK
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   INITBANK   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	INITBANK
      7  1000
      8  1000
      9  1000							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
     10  1000							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
     11  1000							;JoyMoveX	  .byte     0,	 0,   0,   0,	0,   1,   1,   1,   0,	-1,  -1,  -1,	0,   0,   0,   0
     12  1000							;JoyMoveY	  .byte     0,	 0,   0,   0,	0,   1,  -1,   0,   0,	 1,  -1,   0,	0,   1,  -1,   0
     13  1000
     14  1000				   JoyDirY
     15  1000		       00 00		      .byte.b	0,0	;,1,-1,0
     16  1002				   JoyDirX
     17  1002		       01 ff 00 00*	      .byte.b	1,-1,0,0,0
     18  1007
     19  1007							;Data Bit  Direction Player
     20  1007							;		 D7	   right	  P0  D4
     21  1007							;		 D6	   left      P0  D3
     22  1007							;		 D5	   down      P0  D2
     23  1007							;		 D4	   up	     P0  D1
     24  1007							;     A "0" in a data bit indicates the joystick has been moved
     25  1007							;     to close that switch.  All "1's" in a player's nibble
     26  1007							;     indicates that joystick is not moving.
     27  1007
     28  1007							;0  0000 x
     29  1007							;1  0001 x
     30  1007							;2  0010 x
     31  1007							;3  0011 x
     32  1007							;4  0100 x
     33  1007							;5  0101 right down
     34  1007							;6  0110 right up
     35  1007							;7  0111 right
     36  1007							;8  1000 x
     37  1007							;9  1001 left down
     38  1007							;10  1010 left up
     39  1007							;11  1011 left
     40  1007							;12  1100 x
     41  1007							;13  1101 down
     42  1007							;14  1110 up
     43  1007							;15  1111 none
     44  1007
     45  1007
     46  1007							;------------------------------------------------------------------------------
     47  1007
     48  1007							;------------------------------------------------------------------------------
     49  1007
     50  1007
      0  1007					      CHECK_BANK_SIZE	"INITBANK"
      1  1007		       00 07	   .TEMP      =	* - BANK_START
 INITBANK (2K) SIZE =  $7 , FREE= $7f9
      2  1007					      ECHO	"INITBANK", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1007				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1007				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1007				  -	      ERR
      6  1007					      endif
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  1007					      include	"BANK_CHESS_INCLUDES.asm"
      1  1007							; Chess
      2  1007							; Atari 2600 Chess display system
      3  1007							; Copyright (c) 2019-2020 Andrew Davie
      4  1007							; andrew@taswegian.com
      5  1007
      6  1007
      7  1007							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  1007							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  1007							; a single gif of the format..
     10  1007							; a row of white pieces on black squares
     11  1007							; a row of white pieces on white squares
     12  1007							; a row of black pieces on black squares
     13  1007							; a row of black pieces on white squares
     14  1007
     15  1007							; each row has the pieces ordered thus:
     16  1007							; a blank, then pawn, knight, bishop, rook, queen, king
     17  1007							; each piece is 5 pixels wide x 8 pixels deep
     18  1007							; each pixel is from an 8-colour palette.
     19  1007							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  1007							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  1007							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  1007							; bit "b" becomes the second ICC pixel line (2)
     23  1007							; bit "c" becomes the third ICC pixel line (3)
     24  1007							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  1007							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  1007							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  1007							; These 4 shifted positions are stored consecutively in the shape definition
     28  1007
     29  1007							; Example...
     30  1007							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     31  1007							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  1007							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  1007							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  1007
     35  1007							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  1007							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  1007							; actually have any data in PF1 or PF2.
     38  1007
     39  1007
     40  1007
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  1007					      include	"piece_graphics.asm"
      1  1007							; Import the graphics definitions generated by ConvertChessPieces.py
      0  1007					      NEWBANK	PIECES_0
      1  1fd8 ????				      SEG	PIECES_0
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_0   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_0
      3  1800
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800
      3  1800				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1800		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848
      3  1848				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890
      3  1890				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  18c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900
      3  1900				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1948				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1948
      3  1948				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1948		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1990				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1990
      3  1990				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1a00				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1a00
      3  1a00				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1a48				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1a48
      3  1a48				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1a90				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1a90
      3  1a90				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1a90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1aa8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1b00				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1b00
      3  1b00				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1b48				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1b48
      3  1b48				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1b78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1b90				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1b90
      3  1b90				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1c00				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1c00
      3  1c00				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1c00		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1c18		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1c48				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1c48
      3  1c48				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1c90				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1c90
      3  1c90				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  1cc0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1d00				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1d00
      3  1d00				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1d48				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1d48
      3  1d48				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1d48		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d60		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1d90				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1d90
      3  1d90				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1e00				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1e00
      3  1e00				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e30		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1e48				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1e48
      3  1e48				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1e90				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1e90
      3  1e90				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1e90		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ea8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1f00				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1f00
      3  1f00				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1f48				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1f48
      3  1f48				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1f78		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1f90				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1f90
      3  1f90				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_1
      1  27d8 ????				      SEG	PIECES_1
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_1   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  2000				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2000
      3  2000				   WHITE_KING_on_WHITE_SQUARE_0
      3  2000		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$00,$a0,$a0,$40,$00,$00	;PF0
      4  2018		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  2048				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2048
      3  2048				   WHITE_KING_on_WHITE_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$00,$28,$28,$10,$00,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  2090				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2090
      3  2090				   WHITE_KING_on_WHITE_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF1
      5  20c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  2100				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2100
      3  2100				   WHITE_KING_on_WHITE_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$00,$50,$50,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148
      3  2148				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  2148		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190
      3  2190				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200
      3  2200				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2230		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248
      3  2248				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  2290				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2290
      3  2290				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  2290		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  2300				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2300
      3  2300				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  2348				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2348
      3  2348				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  2378		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  2390				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2390
      3  2390				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  2400				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2400
      3  2400				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  2400		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  2418		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  2448				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2448
      3  2448				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  2490				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2490
      3  2490				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  24c0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  2500				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2500
      3  2500				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  2548				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2548
      3  2548				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  2548		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  2560		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  2590				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2590
      3  2590				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$7c,$6c,$5c,$38,$10,$10	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  2600				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2600
      3  2600				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  2630		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$07,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  2648				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2648
      3  2648				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$f8,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  2690				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2690
      3  2690				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  2690		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  26a8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  2700				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2700
      3  2700				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  2748				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2748
      3  2748				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  2778		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  2790				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2790
      3  2790				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_2
      1  2fd8 ????				      SEG	PIECES_2
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_2   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2800				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2800
      3  2800				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2800		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2818		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2848				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2848
      3  2848				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2890				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2890
      3  2890				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  28c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2900				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2900
      3  2900				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2948				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2948
      3  2948				   WHITE_KING_on_BLACK_SQUARE_0
      3  2948		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$f0,$50,$50,$b0,$e0,$40	;PF0
      4  2960		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2990				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2990
      3  2990				   WHITE_KING_on_BLACK_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$7c,$54,$54,$6c,$38,$10	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2a00				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2a00
      3  2a00				   WHITE_KING_on_BLACK_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$03,$02,$02,$03,$01,$00	;PF1
      5  2a30		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2a48				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2a48
      3  2a48				   WHITE_KING_on_BLACK_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$f8,$a8,$a8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90
      3  2a90				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2a90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  2aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00
      3  2b00				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48
      3  2b48				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2b78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90
      3  2b90				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2c00				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2c00
      3  2c00				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2c00		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2c48				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2c48
      3  2c48				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2c90				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2c90
      3  2c90				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  2cc0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2d00				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2d00
      3  2d00				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2d48				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2d48
      3  2d48				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2d48		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2d60		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2d90				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2d90
      3  2d90				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$70,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2e00				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2e00
      3  2e00				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2e30		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$01,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2e48				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2e48
      3  2e48				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$38,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2e90				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2e90
      3  2e90				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2e90		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  2ea8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2f00				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2f00
      3  2f00				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$7c,$7c,$7c,$38,$00,$10	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2f48				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2f48
      3  2f48				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2f78		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$07,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2f90				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2f90
      3  2f90				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$f8,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_3
      1  37d8 ????				      SEG	PIECES_3
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_3   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  3000				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3000
      3  3000				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  3000		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  3018		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  3048				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3048
      3  3048				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  3090				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3090
      3  3090				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  30c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  3100				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3100
      3  3100				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  3148				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3148
      3  3148				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  3148		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  3160		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  3190				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3190
      3  3190				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  3200				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3200
      3  3200				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  3230		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  3248				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3248
      3  3248				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  3290				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3290
      3  3290				   BLACK_KING_on_WHITE_SQUARE_0
      3  3290		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  32a8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  3300				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3300
      3  3300				   BLACK_KING_on_WHITE_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  3348				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3348
      3  3348				   BLACK_KING_on_WHITE_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  3378		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  3390				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3390
      3  3390				   BLACK_KING_on_WHITE_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400
      3  3400				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  3400		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448
      3  3448				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490
      3  3490				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  34c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500
      3  3500				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  3548				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548
      3  3548				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  3548		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  3590				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590
      3  3590				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  3600				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600
      3  3600				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3630		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  3648				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648
      3  3648				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  3690				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3690
      3  3690				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  3690		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$80,$00,$20,$00,$40,$00,$00	;PF0
      4  36a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  3700				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3700
      3  3700				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$08,$00,$20,$00,$10,$00,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  3748				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3748
      3  3748				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  3778		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$02,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  3790				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3790
      3  3790				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$40,$00,$10,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
      0  37d8					      NEWBANK	PIECES_4
      1  3fd8 ????				      SEG	PIECES_4
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_4   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800
      3  3800				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3800		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  3818		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848
      3  3848				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890
      3  3890				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  38c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900
      3  3900				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3948				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3948
      3  3948				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3948		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  3960		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3990				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3990
      3  3990				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3a00				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3a00
      3  3a00				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  3a30		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3a48				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3a48
      3  3a48				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3a90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3a90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3a90					      LIST	ON
      0  3a90					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3a90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3a90
      3  3a90				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3a90		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3aa8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ad8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  3ad8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3b00					      LIST	ON
      0  3b00					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3b00				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3b00
      3  3b00				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b18		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3b48					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3b48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3b48					      LIST	ON
      0  3b48					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3b48				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3b48
      3  3b48				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b60		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3b78		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3b90					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3b90					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3b90					      LIST	ON
      0  3b90					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3b90				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3b90
      3  3b90				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3bc0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3bd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  3bd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3c00					      LIST	ON
      0  3c00					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  3c00				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3c00
      3  3c00				   BLACK_KING_on_BLACK_SQUARE_0
      3  3c00		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  3c18		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  3c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3c48					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3c48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3c48					      LIST	ON
      0  3c48					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  3c48				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3c48
      3  3c48				   BLACK_KING_on_BLACK_SQUARE_1
      3  3c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c60		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  3c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3c90					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3c90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3c90					      LIST	ON
      0  3c90					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  3c90				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3c90
      3  3c90				   BLACK_KING_on_BLACK_SQUARE_2
      3  3c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ca8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  3cc0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3cd8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  3cd8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3d00					      LIST	ON
      0  3d00					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  3d00				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3d00
      3  3d00				   BLACK_KING_on_BLACK_SQUARE_3
      3  3d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d30		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE piece_graphics.asm
    124  3d48
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3d48					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  3d48					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     10  3d48					      LIST	ON
      0  3d48					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  3d48				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3d48
      3  3d48				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  3d48		       00 40 e0 e0*	      .byte.b	$00,$40,$e0,$e0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3d90					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  3d90					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     10  3d90					      LIST	ON
      0  3d90					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  3d90				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3d90
      3  3d90				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  3d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3da8		       00 10 38 38*	      .byte.b	$00,$10,$38,$38,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3dd8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  3dd8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3e00					      LIST	ON
      0  3e00					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  3e00				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3e00
      3  3e00				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  3e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3e18		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3e30		       00 01 03 03*	      .byte.b	$00,$01,$03,$03,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3e48					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  3e48					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     10  3e48					      LIST	ON
      0  3e48					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  3e48				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3e48
      3  3e48				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  3e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3e78		       00 20 70 70*	      .byte.b	$00,$20,$70,$70,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3e90					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  3e90					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     10  3e90					      LIST	ON
      0  3e90					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  3e90				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3e90
      3  3e90				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  3e90		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ea8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ed8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  3ed8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3f00					      LIST	ON
      0  3f00					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  3f00				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3f00
      3  3f00				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  3f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3f18		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3f48					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  3f48					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     10  3f48					      LIST	ON
      0  3f48					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  3f48				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3f48
      3  3f48				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  3f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3f60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3f78		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3f90					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  3f90					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     10  3f90					      LIST	ON
      0  3f90					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  3f90				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3f90
      3  3f90				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  3f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3fc0		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  3fd8					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  3fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  3fd8					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3fd8				  -	      ERR
      6  3fd8					      endif
    134  3fd8
      0  3fd8					      NEWBANK	PIECES_5
      1  4290 ????				      SEG	PIECES_5
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECES_5   SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECES_5
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  4000					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  4000					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     10  4000					      LIST	ON
      0  4000					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  4000				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  4000
      3  4000				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  4000		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00	;PF0
      4  4018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  4048					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  4048					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     10  4048					      LIST	ON
      0  4048					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  4048				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  4048
      3  4048				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  4048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4060		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00	;PF1
      5  4078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  4090					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  4090					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     10  4090					      LIST	ON
      0  4090					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  4090				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  4090
      3  4090				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  4090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  40a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  40c0		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  40d8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  40d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  4100					      LIST	ON
      0  4100					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  4100				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  4100
      3  4100				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  4100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4130		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  4148					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  4148					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     10  4148					      LIST	ON
      0  4148					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  4148				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  4148
      3  4148				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  4148		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  4190					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  4190					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     10  4190					      LIST	ON
      0  4190					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  4190				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  4190
      3  4190				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  4190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  41a8		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  41c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  41d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  41d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  4200					      LIST	ON
      0  4200					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  4200				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  4200
      3  4200				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  4200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4218		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4230		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  4248					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  4248					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     10  4248					      LIST	ON
      0  4248					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  4248				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  4248
      3  4248				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  4248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  4260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  4278		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    144  4290
    145  4290				  -	      if	0
    146  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    147  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    148  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    149  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    150  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    151  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    152  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    153  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    154  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    155  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    156  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    157  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    158  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    159  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    160  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    161  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    162  4290					      endif
      0  4290					      CHECK_BANK_SIZE	"PIECES_5 (2K)"
      1  4290		       02 90	   .TEMP      =	* - BANK_START
 PIECES_5 (2K) (2K) SIZE =  $290 , FREE= $570
      2  4290					      ECHO	"PIECES_5 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4290				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4290				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4290				  -	      ERR
      6  4290					      endif
    164  4290
    165  4290				  -	      if	0
    166  4290				  -	      NEWBANK	PIECES_6
    167  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    168  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    169  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    170  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    171  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    172  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    173  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    174  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    175  4290				  -
    176  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    177  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    178  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    179  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    180  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    181  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    182  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    183  4290				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    184  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    185  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    186  4290				  -
    187  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    188  4290				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    189  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    190  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    191  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    192  4290				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    193  4290				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    194  4290				  -
    195  4290				  -
    196  4290				  -	      NEWBANK	PIECES_7
    197  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    198  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    199  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    200  4290				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    201  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    202  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    203  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    204  4290				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    205  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    206  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    207  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    208  4290				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    209  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    210  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    211  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    212  4290				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    213  4290				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    214  4290				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    215  4290				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    216  4290				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    217  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    218  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    219  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    220  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    221  4290				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    222  4290				  -
    223  4290				  -
    224  4290				  -	      NEWBANK	PIECES_8
    225  4290				  -
    226  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    227  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    228  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    229  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    230  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    231  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    232  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    233  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    234  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    235  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    236  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    237  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    238  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    239  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    240  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    241  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    242  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    243  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    244  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    245  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    246  4290				  -
    247  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    248  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    249  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    250  4290				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    251  4290				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    252  4290				  -
    253  4290					      endif
    254  4290
    255  4290							;    NEWBANK PIECES_9
    256  4290
    257  4290							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    258  4290							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    259  4290							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    260  4290							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    261  4290							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    262  4290
    263  4290				  -	      if	0
    264  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    265  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    266  4290				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    267  4290					      endif
    268  4290
    269  4290							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    270  4290
    271  4290				  -	      if	0
    272  4290				  -
    273  4290				  -
    274  4290				  -
    275  4290				  -
    276  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    277  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    278  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    279  4290				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    280  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    281  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    282  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    283  4290				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    284  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    285  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    286  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    287  4290				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    288  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    289  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    290  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    291  4290				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    292  4290				  -
    293  4290				  -
    294  4290					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  4290
      0  4290					      NEWBANK	PIECE_VECTORS
      1  4980 ????				      SEG	PIECE_VECTORS
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4800					      include	"piece_vectors.asm"
      1  4800							; Created by ConvertChessPieces.py
      0  4800					      DEF	PIECE_VECTOR_LO
      1  4800				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4800
      3  4800				   PIECE_VECTOR_LO
      3  4800		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4801		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4802		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4803		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4804		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4805		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4806		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4807		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4808		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4809		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  480a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  480b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  480c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  480d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  480e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  480f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4810		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4811		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4812		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4813		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4814		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4815		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4816		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4817		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4818		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4819		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  481a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  481b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  481c		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  481d		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  481e		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  481f		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  4820		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     36  4821		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     37  4822		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     38  4823		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     39  4824		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     40  4825		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     41  4826		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     42  4827		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     43  4828		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     44  4829		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     45  482a		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     46  482b		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     47  482c		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     48  482d		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     49  482e		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     50  482f		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     51  4830		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     52  4831		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     53  4832		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     54  4833		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     55  4834		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     56  4835		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     57  4836		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     58  4837		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     59  4838		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     60  4839		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     61  483a		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     62  483b		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     63  483c		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     64  483d		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     65  483e		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     66  483f		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     67  4840		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     68  4841		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     69  4842		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     70  4843		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     71  4844		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     72  4845		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     73  4846		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     74  4847		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     75  4848		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     76  4849		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     77  484a		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     78  484b		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     79  484c		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     80  484d		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     81  484e		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     82  484f		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     83  4850		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     84  4851		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     85  4852		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     86  4853		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     87  4854		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     88  4855		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     89  4856		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     90  4857		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     91  4858		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     92  4859		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     93  485a		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     94  485b		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     95  485c		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
     96  485d		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
     97  485e		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
     98  485f		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
     99  4860		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    100  4861		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    101  4862		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    102  4863		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    103  4864		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    104  4865		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    105  4866		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    106  4867		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    107  4868		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    108  4869		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    109  486a		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    110  486b		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    111  486c		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    112  486d		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    113  486e		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    114  486f		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    115  4870		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    116  4871		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    117  4872		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    118  4873		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    119  4874		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    120  4875		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    121  4876		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    122  4877		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    123  4878		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    124  4879		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    125  487a		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    126  487b		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    127  487c		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    128  487d		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    129  487e		       90		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    130  487f		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
      0  4880					      DEF	PIECE_VECTOR_HI
      1  4880				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4880
      3  4880				   PIECE_VECTOR_HI
    132  4880		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    133  4881		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    134  4882		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    135  4883		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    136  4884		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    137  4885		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    138  4886		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    139  4887		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    140  4888		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    141  4889		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    142  488a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    143  488b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    144  488c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    145  488d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    146  488e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    147  488f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    148  4890		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    149  4891		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    150  4892		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    151  4893		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    152  4894		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    153  4895		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    154  4896		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    155  4897		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    156  4898		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    157  4899		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    158  489a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    159  489b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    160  489c		       f6		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    161  489d		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    162  489e		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    163  489f		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    164  48a0		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    165  48a1		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    166  48a2		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    167  48a3		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    168  48a4		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    169  48a5		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    170  48a6		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    171  48a7		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    172  48a8		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    173  48a9		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    174  48aa		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    175  48ab		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    176  48ac		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    177  48ad		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    178  48ae		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    179  48af		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    180  48b0		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    181  48b1		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    182  48b2		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    183  48b3		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    184  48b4		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    185  48b5		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    186  48b6		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    187  48b7		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    188  48b8		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    189  48b9		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    190  48ba		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    191  48bb		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    192  48bc		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    193  48bd		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    194  48be		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    195  48bf		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    196  48c0		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    197  48c1		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    198  48c2		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    199  48c3		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    200  48c4		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    201  48c5		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    202  48c6		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    203  48c7		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    204  48c8		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    205  48c9		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    206  48ca		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    207  48cb		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    208  48cc		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    209  48cd		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    210  48ce		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    211  48cf		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    212  48d0		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    213  48d1		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    214  48d2		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    215  48d3		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    216  48d4		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    217  48d5		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    218  48d6		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    219  48d7		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    220  48d8		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    221  48d9		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    222  48da		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    223  48db		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    224  48dc		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    225  48dd		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    226  48de		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    227  48df		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    228  48e0		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    229  48e1		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    230  48e2		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    231  48e3		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    232  48e4		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    233  48e5		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    234  48e6		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    235  48e7		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    236  48e8		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    237  48e9		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    238  48ea		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    239  48eb		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    240  48ec		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    241  48ed		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    242  48ee		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    243  48ef		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    244  48f0		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    245  48f1		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    246  48f2		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    247  48f3		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    248  48f4		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    249  48f5		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    250  48f6		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    251  48f7		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    252  48f8		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    253  48f9		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    254  48fa		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    255  48fb		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    256  48fc		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    257  48fd		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    258  48fe		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    259  48ff		       f1		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
      0  4900					      DEF	PIECE_VECTOR_BANK
      1  4900				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  4900
      3  4900				   PIECE_VECTOR_BANK
    261  4900		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    262  4901		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    263  4902		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    264  4903		       03		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    265  4904		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    266  4905		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    267  4906		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    268  4907		       03		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    269  4908		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    270  4909		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    271  490a		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    272  490b		       03		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    273  490c		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    274  490d		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    275  490e		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    276  490f		       03		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    277  4910		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    278  4911		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    279  4912		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    280  4913		       03		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    281  4914		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    282  4915		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    283  4916		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    284  4917		       03		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    285  4918		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    286  4919		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    287  491a		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    288  491b		       04		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    289  491c		       07		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    290  491d		       07		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    291  491e		       07		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    292  491f		       07		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    293  4920		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    294  4921		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    295  4922		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    296  4923		       04		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    297  4924		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    298  4925		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    299  4926		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    300  4927		       04		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    301  4928		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    302  4929		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    303  492a		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    304  492b		       04		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    305  492c		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    306  492d		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    307  492e		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    308  492f		       04		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    309  4930		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    310  4931		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    311  4932		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    312  4933		       04		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    313  4934		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    314  4935		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    315  4936		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    316  4937		       05		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    317  4938		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    318  4939		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    319  493a		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    320  493b		       05		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    321  493c		       07		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    322  493d		       07		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    323  493e		       07		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    324  493f		       07		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    325  4940		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    326  4941		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    327  4942		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    328  4943		       05		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    329  4944		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    330  4945		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    331  4946		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    332  4947		       05		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    333  4948		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    334  4949		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    335  494a		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    336  494b		       05		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    337  494c		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    338  494d		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    339  494e		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    340  494f		       05		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    341  4950		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    342  4951		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    343  4952		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    344  4953		       06		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    345  4954		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    346  4955		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    347  4956		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    348  4957		       06		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    349  4958		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    350  4959		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    351  495a		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    352  495b		       06		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    353  495c		       08		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    354  495d		       08		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    355  495e		       08		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    356  495f		       08		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    357  4960		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    358  4961		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    359  4962		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    360  4963		       06		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    361  4964		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    362  4965		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    363  4966		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    364  4967		       06		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    365  4968		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    366  4969		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    367  496a		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    368  496b		       06		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    369  496c		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    370  496d		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    371  496e		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    372  496f		       07		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    373  4970		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    374  4971		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    375  4972		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    376  4973		       07		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    377  4974		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    378  4975		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    379  4976		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    380  4977		       07		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    381  4978		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    382  4979		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    383  497a		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    384  497b		       07		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    385  497c		       08		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    386  497d		       08		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    387  497e		       08		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    388  497f		       08		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    389  4980
    390  4980							; piece index equates...
    391  4980		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    392  4980		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    393  4980		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    394  4980		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    395  4980		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    396  4980		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    397  4980		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    398  4980		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    399  4980		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    400  4980		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    401  4980		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    402  4980		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    403  4980		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    404  4980		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    405  4980		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    406  4980		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    407  4980		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    408  4980		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    409  4980		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    410  4980		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    411  4980		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    412  4980		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    413  4980		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    414  4980		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    415  4980		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    416  4980		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    417  4980		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    418  4980		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    419  4980		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    420  4980		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    421  4980		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    422  4980		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    423  4980		       00 20	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	32
    424  4980		       00 21	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	33
    425  4980		       00 22	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	34
    426  4980		       00 23	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	35
    427  4980		       00 24	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	36
    428  4980		       00 25	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	37
    429  4980		       00 26	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	38
    430  4980		       00 27	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	39
    431  4980		       00 28	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	40
    432  4980		       00 29	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	41
    433  4980		       00 2a	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	42
    434  4980		       00 2b	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	43
    435  4980		       00 2c	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	44
    436  4980		       00 2d	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	45
    437  4980		       00 2e	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	46
    438  4980		       00 2f	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	47
    439  4980		       00 30	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	48
    440  4980		       00 31	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	49
    441  4980		       00 32	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	50
    442  4980		       00 33	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	51
    443  4980		       00 34	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	52
    444  4980		       00 35	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	53
    445  4980		       00 36	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	54
    446  4980		       00 37	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	55
    447  4980		       00 38	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	56
    448  4980		       00 39	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	57
    449  4980		       00 3a	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	58
    450  4980		       00 3b	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	59
    451  4980		       00 3c	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	60
    452  4980		       00 3d	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	61
    453  4980		       00 3e	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	62
    454  4980		       00 3f	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	63
    455  4980		       00 40	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	64
    456  4980		       00 41	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	65
    457  4980		       00 42	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	66
    458  4980		       00 43	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	67
    459  4980		       00 44	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	68
    460  4980		       00 45	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	69
    461  4980		       00 46	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	70
    462  4980		       00 47	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	71
    463  4980		       00 48	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	72
    464  4980		       00 49	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	73
    465  4980		       00 4a	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	74
    466  4980		       00 4b	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	75
    467  4980		       00 4c	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	76
    468  4980		       00 4d	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	77
    469  4980		       00 4e	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	78
    470  4980		       00 4f	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	79
    471  4980		       00 50	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	80
    472  4980		       00 51	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	81
    473  4980		       00 52	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	82
    474  4980		       00 53	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	83
    475  4980		       00 54	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	84
    476  4980		       00 55	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	85
    477  4980		       00 56	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	86
    478  4980		       00 57	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	87
    479  4980		       00 58	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	88
    480  4980		       00 59	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	89
    481  4980		       00 5a	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	90
    482  4980		       00 5b	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	91
    483  4980		       00 5c	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	92
    484  4980		       00 5d	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	93
    485  4980		       00 5e	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	94
    486  4980		       00 5f	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	95
    487  4980		       00 60	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	96
    488  4980		       00 61	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	97
    489  4980		       00 62	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	98
    490  4980		       00 63	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	99
    491  4980		       00 64	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	100
    492  4980		       00 65	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	101
    493  4980		       00 66	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	102
    494  4980		       00 67	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	103
    495  4980		       00 68	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	104
    496  4980		       00 69	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	105
    497  4980		       00 6a	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	106
    498  4980		       00 6b	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	107
    499  4980		       00 6c	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	108
    500  4980		       00 6d	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	109
    501  4980		       00 6e	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	110
    502  4980		       00 6f	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	111
    503  4980		       00 70	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	112
    504  4980		       00 71	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	113
    505  4980		       00 72	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	114
    506  4980		       00 73	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	115
    507  4980		       00 74	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	116
    508  4980		       00 75	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	117
    509  4980		       00 76	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	118
    510  4980		       00 77	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	119
    511  4980		       00 78	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	120
    512  4980		       00 79	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	121
    513  4980		       00 7a	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	122
    514  4980		       00 7b	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	123
    515  4980		       00 7c	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	124
    516  4980		       00 7d	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	125
    517  4980		       00 7e	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	126
    518  4980		       00 7f	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	127
------- FILE BANK_CHESS_INCLUDES.asm
      0  4980					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4980		       01 80	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $180 , FREE= $680
      2  4980					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4980				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4980				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4980				  -	      ERR
      6  4980					      endif
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 2
      0  4980					      include	"BANK_StateMachine.asm"
      1  4980
      2  4980
      0  4980					      NEWBANK	STATEMACHINE
      1  5217 ????				      SEG	STATEMACHINE
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   STATEMACHINE SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	STATEMACHINE
      4  5000
      5  5000
      6  5000							;---------------------------------------------------------------------------------------------------
      7  5000
      8  5000		       00 01	   STARTSELECTPIECE =	1
      9  5000
     10  5000		       00 00	   AI_BeginSelectMovePhase =	0
     11  5000		       00 01	   AI_SelectStartSquare =	1
     12  5000		       00 02	   AI_StartSquareSelected =	2
     13  5000		       00 03	   AI_DrawMoves =	3
     14  5000		       00 04	   AI_ShowMoveCaptures =	4
     15  5000		       00 05	   AI_SlowFlash =	5
     16  5000		       00 06	   AI_DrawTargetSquares =	6
     17  5000		       00 07	   AI_SelectDestinationSquare =	7
     18  5000		       00 08	   AI_Quiescent =	8
     19  5000		       00 09	   AI_Halt    =	9
     20  5000		       00 0a	   AI_ReselectDebounce =	10
     21  5000
     22  5000					      MAC	phase
     23  5000					      lda	#{1}
     24  5000					      sta	aiPhase
     25  5000					      ENDM		;#
     26  5000
     27  5000
     28  5000		       16	   AiVectorLO .byte.b	<aiBeginSelectMovePhase	; 0
     29  5001		       31		      .byte.b	<aiSelectStartSquare	; 1
     30  5002		       9c		      .byte.b	<aiStartSquareSelected	; 2
     31  5003		       be		      .byte.b	<aiDrawMoves	; 3
     32  5004		       13		      .byte.b	<aiShowMoveCaptures	; 4
     33  5005		       31		      .byte.b	<aiSlowFlash	; 5
     34  5006		       f1		      .byte.b	<aiDrawTargetSquares	; 6
     35  5007		       90		      .byte.b	<aiSelectDestinationSquare	; 7
     36  5008		       c3		      .byte.b	<aiQuiescent	; 9
     37  5009		       e2		      .byte.b	<aiHalt	; 10
     38  500a		       ba		      .byte.b	<aiReselectDebounce	; 11
     39  500b
     40  500b		       f0	   AiVectorHI .byte.b	>aiBeginSelectMovePhase	; 0
     41  500c		       f0		      .byte.b	>aiSelectStartSquare	; 1
     42  500d		       f0		      .byte.b	>aiStartSquareSelected	; 2
     43  500e		       f0		      .byte.b	>aiDrawMoves	; 3
     44  500f		       f1		      .byte.b	>aiShowMoveCaptures	; 4
     45  5010		       f1		      .byte.b	>aiSlowFlash	; 5
     46  5011		       f0		      .byte.b	>aiDrawTargetSquares	; 6
     47  5012		       f1		      .byte.b	>aiSelectDestinationSquare	; 7
     48  5013		       f1		      .byte.b	>aiQuiescent	; 9
     49  5014		       f1		      .byte.b	>aiHalt	; 10
     50  5015		       f1		      .byte.b	>aiReselectDebounce	; 11
     51  5016
     52  5016							;---------------------------------------------------------------------------------------------------
     53  5016
      0  5016					      DEF	aiBeginSelectMovePhase	;#0
      1  5016				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  5016
      3  5016				   aiBeginSelectMovePhase
     55  5016					      SUBROUTINE
     56  5016
     57  5016		       a9 04		      lda	#4
     58  5018		       85 88		      sta	highlight_row
     59  501a		       85 89		      sta	highlight_row+1
     60  501c		       85 8a		      sta	highlight_col
     61  501e		       85 8b		      sta	highlight_col+1
     62  5020
     63  5020		       a9 00		      lda	#0
     64  5022		       85 8c		      sta	mdelay	;?
     65  5024		       85 96		      sta	aiFlashPhase	;?
     66  5026
     67  5026		       a9 ff		      lda	#-1
     68  5028		       85 91		      sta	aiFromSquare
     69  502a		       85 92		      sta	aiToSquare
     70  502c
      0  502c					      PHASE	AI_SelectStartSquare
      1  502c		       a9 01		      lda	#AI_SelectStartSquare
      2  502e		       85 8f		      sta	aiPhase
     72  5030		       60		      rts
     73  5031
     74  5031							;---------------------------------------------------------------------------------------------------
     75  5031
      0  5031					      DEF	aiSelectStartSquare
      1  5031				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  5031
      3  5031				   aiSelectStartSquare
     77  5031					      SUBROUTINE
     78  5031
     79  5031		       20 56 f1 	      jsr	moveCursor
     80  5034		       20 55 fd 	      jsr	SAFE_IsValidMoveFromSquare
     81  5037
     82  5037		       c6 8d		      dec	ccur	; pulse colour for valid squares
     83  5039		       20 6b f0 	      jsr	setCursorColours
     84  503c
     85  503c		       c0 ff		      cpy	#-1
     86  503e		       f0 0e		      beq	.noButton	; illegal square
     87  5040
     88  5040		       a5 96		      lda	aiFlashPhase
     89  5042		       29 01		      and	#1
     90  5044		       d0 08		      bne	.noButton	; prevent EOR-error on flashing selected piece
     91  5046
     92  5046		       a5 4c		      lda	INPT4
     93  5048		       30 04		      bmi	.noButton
      0  504a					      PHASE	AI_StartSquareSelected
      1  504a		       a9 02		      lda	#AI_StartSquareSelected
      2  504c		       85 8f		      sta	aiPhase
     95  504e				   .noButton
     96  504e
     97  504e		       60		      rts
     98  504f
     99  504f							;---------------------------------------------------------------------------------------------------
    100  504f
      0  504f					      DEF	setCursorPriority
      1  504f				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  504f
      3  504f				   setCursorPriority
    102  504f					      SUBROUTINE
    103  504f
    104  504f		       98		      tya
    105  5050		       48		      pha
    106  5051
    107  5051					      if	1
    108  5051
    109  5051		       a5 88		      lda	highlight_row
    110  5053		       49 07		      eor	#7
    111  5055		       0a		      asl
    112  5056		       0a		      asl
    113  5057		       0a		      asl
    114  5058		       05 8a		      ora	highlight_col
    115  505a		       aa		      tax
    116  505b
    117  505b		       20 0c f9 	      jsr	SAFE_Get64toX12Board
    118  505e		       a2 04		      ldx	#%100
    119  5060		       c9 00		      cmp	#0
    120  5062		       d0 02		      bne	.under
    121  5064		       a2 00		      ldx	#0
    122  5066		       86 4a	   .under     stx	CTRLPF	; UNDER
    123  5068					      endif
    124  5068
    125  5068		       68		      pla
    126  5069		       a8		      tay
    127  506a		       60		      rts
    128  506b
    129  506b							;---------------------------------------------------------------------------------------------------
    130  506b
      0  506b					      DEF	setCursorColours
      1  506b				   BANK_setCursorColours SET	_CURRENT_BANK
      2  506b
      3  506b				   setCursorColours
    132  506b					      SUBROUTINE
    133  506b
    134  506b							; pass y=-1 if move is NOT in the movelist
    135  506b							; preserve y
    136  506b
    137  506b		       a9 44		      lda	#$44
    138  506d
    139  506d		       c0 ff		      cpy	#-1
    140  506f		       f0 08		      beq	.writeCursorCol	; NOT in the movelist
    141  5071
    142  5071		       a5 8d		      lda	ccur
    143  5073		       4a		      lsr
    144  5074		       4a		      lsr
    145  5075		       29 07		      and	#7
    146  5077		       09 c0		      ora	#$C0
    147  5079
    148  5079		       85 46	   .writeCursorCol sta	COLUP0
    149  507b		       60		      rts
    150  507c
    151  507c
      0  507c					      OPTIONAL_PAGEBREAK	"Joystik Tables", 32
     10  507c					      LIST	ON
    153  507c
    154  507c							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
    155  507c							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    156  507c		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
    157  508c		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
    158  509c
    159  509c							;---------------------------------------------------------------------------------------------------
    160  509c
      0  509c					      DEF	aiStartSquareSelected	;#2
      1  509c				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  509c
      3  509c				   aiStartSquareSelected
    162  509c					      SUBROUTINE
    163  509c
    164  509c							; Mark all the valid moves for the selected piece on the board
    165  509c							; and then start pulsing the piece
    166  509c							; AND start choosing for selection of TO square
    167  509c
    168  509c
    169  509c
    170  509c							; Iterate the movelist and for all from squares which = drawPieceNumber
    171  509c							; then draw a BLANK at that square
    172  509c							; do 1 by one, when none found then increment state
    173  509c
    174  509c		       a5 88		      lda	highlight_row
    175  509e		       49 07		      eor	#7
    176  50a0		       0a		      asl
    177  50a1		       0a		      asl
    178  50a2		       0a		      asl
    179  50a3		       05 8a		      ora	highlight_col
    180  50a5		       85 80		      sta	drawPieceNumber
    181  50a7
    182  50a7		       a9 0a		      lda	#10
    183  50a9		       85 90		      sta	aiFlashDelay
    184  50ab		       a9 00		      lda	#0
    185  50ad		       85 92		      sta	aiToSquare
    186  50af		       85 96		      sta	aiFlashPhase	; for debounce exit timing
    187  50b1
    188  50b1		       a9 ff		      lda	#-1
    189  50b3		       85 95		      sta	aiMoveIndex
    190  50b5
    191  50b5		       a9 0f		      lda	#15
    192  50b7		       85 8c		      sta	mdelay	; hold-down delay before moves are shown
    193  50b9
      0  50b9					      PHASE	AI_DrawMoves
      1  50b9		       a9 03		      lda	#AI_DrawMoves
      2  50bb		       85 8f		      sta	aiPhase
    195  50bd		       60		      rts
    196  50be
    197  50be							;---------------------------------------------------------------------------------------------------
    198  50be
      0  50be					      DEF	aiDrawMoves
      1  50be				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  50be
      3  50be				   aiDrawMoves
    200  50be					      SUBROUTINE
    201  50be
    202  50be
    203  50be		       c6 8d		      dec	ccur
    204  50c0		       20 6b f0 	      jsr	setCursorColours
    205  50c3
    206  50c3		       c6 8c		      dec	mdelay
    207  50c5		       d0 21		      bne	.exit
    208  50c7		       a9 01		      lda	#1
    209  50c9		       85 8c		      sta	mdelay	; once triggered, runs always
    210  50cb
    211  50cb
    212  50cb		       a5 95		      lda	aiMoveIndex
    213  50cd		       10 05		      bpl	.valid
    214  50cf
    215  50cf		       20 48 fe 	      jsr	SAFE_getMoveIndex
    216  50d2		       85 95		      sta	aiMoveIndex
    217  50d4
    218  50d4		       20 54 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    219  50d7		       a5 95		      lda	aiMoveIndex
    220  50d9		       10 15		      bpl	.unsure	; still drawing in this phase
    221  50db
    222  50db		       a9 08		      lda	#CAP_SPEED
    223  50dd		       85 8c		      sta	mdelay
    224  50df
    225  50df		       a9 00		      lda	#0
    226  50e1		       85 96		      sta	aiFlashPhase	; controls odd/even exit of flashing
    227  50e3
      0  50e3					      PHASE	AI_ShowMoveCaptures
      1  50e3		       a9 04		      lda	#AI_ShowMoveCaptures
      2  50e5		       85 8f		      sta	aiPhase
    229  50e7		       60		      rts
    230  50e8
    231  50e8				   .exit
    232  50e8
    233  50e8							; Initial piece selection has happened, but the button hasn't been released yet
    234  50e8							; AND we're still in the waiting phase to see if the button was held long enough for move show
    235  50e8
    236  50e8		       a5 4c		      lda	INPT4
    237  50ea		       10 04		      bpl	.unsure	; button still pressed, so still unsure what to do
    238  50ec
    239  50ec							; Aha! Button released, so we know the selected piece and can start flashing it
    240  50ec							; and allowing movement of the selector to a destination square...
    241  50ec
      0  50ec					      PHASE	AI_SelectDestinationSquare
      1  50ec		       a9 07		      lda	#AI_SelectDestinationSquare
      2  50ee		       85 8f		      sta	aiPhase
    243  50f0
    244  50f0		       60	   .unsure    rts
    245  50f1
    246  50f1							;---------------------------------------------------------------------------------------------------
    247  50f1
      0  50f1					      DEF	aiDrawTargetSquares
      1  50f1				   BANK_aiDrawTargetSquares SET	_CURRENT_BANK
      2  50f1
      3  50f1				   aiDrawTargetSquares
    249  50f1					      SUBROUTINE
    250  50f1
    251  50f1		       c6 8d		      dec	ccur
    252  50f3		       20 6b f0 	      jsr	setCursorColours
    253  50f6
    254  50f6		       c6 8c		      dec	mdelay
    255  50f8		       d0 18		      bne	.exit
    256  50fa		       a9 01		      lda	#1
    257  50fc		       85 8c		      sta	mdelay	; once triggered, runs always
    258  50fe
    259  50fe		       a5 95		      lda	aiMoveIndex
    260  5100		       10 05		      bpl	.valid
    261  5102
    262  5102		       20 48 fe 	      jsr	SAFE_getMoveIndex
    263  5105		       85 95		      sta	aiMoveIndex
    264  5107
    265  5107		       20 54 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    266  510a		       a5 95		      lda	aiMoveIndex
    267  510c		       10 04		      bpl	.exit	; still drawing in this phase
    268  510e
      0  510e					      PHASE	AI_SelectStartSquare
      1  510e		       a9 01		      lda	#AI_SelectStartSquare
      2  5110		       85 8f		      sta	aiPhase
    270  5112
    271  5112		       60	   .exit      rts
    272  5113
    273  5113							;---------------------------------------------------------------------------------------------------
    274  5113
    275  5113		       00 08	   CAP_SPEED  =	8
    276  5113
      0  5113					      DEF	aiShowMoveCaptures	;#4
      1  5113				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  5113
      3  5113				   aiShowMoveCaptures
    278  5113					      SUBROUTINE
    279  5113
    280  5113							; draw/undraw ALL captured pieces
    281  5113							; we should do this an even number of times so that pieces don't disappEOR
    282  5113
    283  5113		       c6 8d		      dec	ccur
    284  5115		       20 6b f0 	      jsr	setCursorColours
    285  5118
    286  5118		       c6 8c		      dec	mdelay	; flash speed UNVARYING despite draw happening
    287  511a
    288  511a		       a5 95		      lda	aiMoveIndex
    289  511c		       10 05		      bpl	.valid	; guaranteed -1 on 1st call
    290  511e		       20 48 fe 	      jsr	SAFE_getMoveIndex
    291  5121		       85 95		      sta	aiMoveIndex
    292  5123
    293  5123				   .valid		;lda INTIM
    294  5123							;cmp #22
    295  5123							;bcc .exit		     ; try to prevent time overflows
    296  5123
    297  5123		       20 8e fe 	      jsr	SAFE_showMoveCaptures
    298  5126		       a5 95		      lda	aiMoveIndex
    299  5128		       10 06		      bpl	.exit
    300  512a
    301  512a		       e6 96		      inc	aiFlashPhase
    302  512c
      0  512c					      PHASE	AI_SlowFlash
      1  512c		       a9 05		      lda	#AI_SlowFlash
      2  512e		       85 8f		      sta	aiPhase
    304  5130
    305  5130		       60	   .exit      rts
    306  5131
    307  5131							;---------------------------------------------------------------------------------------------------
    308  5131
      0  5131					      DEF	aiSlowFlash	;#5
      1  5131				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  5131
      3  5131				   aiSlowFlash
    310  5131					      SUBROUTINE
    311  5131
    312  5131							; Joystick button is held down, so we're displaying the available moves
    313  5131							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    314  5131
    315  5131		       c6 8d		      dec	ccur
    316  5133		       20 6b f0 	      jsr	setCursorColours
    317  5136
    318  5136		       a5 96		      lda	aiFlashPhase
    319  5138		       29 01		      and	#1
    320  513a		       d0 04		      bne	.notEven	; only exit after even # EOR-draws
    321  513c
    322  513c		       a5 4c		      lda	INPT4
    323  513e		       30 0d		      bmi	.butpress	; exit on button release
    324  5140
    325  5140				   .notEven
    326  5140
    327  5140							; Wait for delay to expire then back and flash 'em again
    328  5140
    329  5140		       c6 8c		      dec	mdelay
    330  5142		       10 08		      bpl	.slowWait
    331  5144
    332  5144		       a9 08		      lda	#CAP_SPEED
    333  5146		       85 8c		      sta	mdelay
    334  5148
      0  5148					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  5148		       a9 04		      lda	#AI_ShowMoveCaptures
      2  514a		       85 8f		      sta	aiPhase
    336  514c
    337  514c		       60	   .slowWait  rts
    338  514d
    339  514d
    340  514d		       a9 01	   .butpress  lda	#1
    341  514f		       85 8c		      sta	mdelay
    342  5151
      0  5151					      PHASE	AI_DrawTargetSquares
      1  5151		       a9 06		      lda	#AI_DrawTargetSquares
      2  5153		       85 8f		      sta	aiPhase
    344  5155		       60		      rts
    345  5156
    346  5156
    347  5156							;---------------------------------------------------------------------------------------------------
    348  5156
    349  5156
      0  5156					      DEF	moveCursor
      1  5156				   BANK_moveCursor SET	_CURRENT_BANK
      2  5156
      3  5156				   moveCursor
    351  5156					      SUBROUTINE
    352  5156
    353  5156							; Part (a) move cursor around the board waiting for joystick press
    354  5156
    355  5156		       c6 8c		      dec	mdelay
    356  5158		       10 27		      bpl	.delaym
    357  515a
    358  515a		       ad 80 02 	      lda	SWCHA
    359  515d		       4a		      lsr
    360  515e		       4a		      lsr
    361  515f		       4a		      lsr
    362  5160		       4a		      lsr
    363  5161		       a8		      tay
    364  5162
    365  5162		       18		      clc
    366  5163		       a5 88		      lda	highlight_row
    367  5165		       79 8c f0 	      adc	JoyMoveY,y
    368  5168		       c9 08		      cmp	#$8
    369  516a		       b0 02		      bcs	.abandon
    370  516c		       85 88		      sta	highlight_row
    371  516e				   .abandon
    372  516e		       18		      clc
    373  516f		       a5 8a		      lda	highlight_col
    374  5171		       79 7c f0 	      adc	JoyMoveX,y
    375  5174		       c9 08		      cmp	#$8
    376  5176		       b0 02		      bcs	.abandon2
    377  5178		       85 8a		      sta	highlight_col
    378  517a				   .abandon2
    379  517a
    380  517a		       a9 05		      lda	#5
    381  517c		       85 8c		      sta	mdelay
    382  517e
    383  517e		       20 4f f0 	      jsr	setCursorPriority
    384  5181
    385  5181
    386  5181		       60	   .delaym    rts
    387  5182
    388  5182
    389  5182							;---------------------------------------------------------------------------------------------------
    390  5182
      0  5182					      DEF	FlashPiece
      1  5182				   BANK_FlashPiece SET	_CURRENT_BANK
      2  5182
      3  5182				   FlashPiece
    392  5182					      SUBROUTINE
    393  5182
    394  5182							; Flash the selected piece
    395  5182
    396  5182		       c6 90		      dec	aiFlashDelay
    397  5184		       d0 09		      bne	.noFlashAi
    398  5186
    399  5186		       e6 96		      inc	aiFlashPhase
    400  5188
    401  5188		       a9 0a		      lda	#10
    402  518a		       85 90		      sta	aiFlashDelay
    403  518c
    404  518c		       20 cf fd 	      jsr	SAFE_CopySinglePiece
    405  518f
    406  518f		       60	   .noFlashAi rts
    407  5190
    408  5190							;---------------------------------------------------------------------------------------------------
    409  5190
      0  5190					      DEF	aiSelectDestinationSquare
      1  5190				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  5190
      3  5190				   aiSelectDestinationSquare
    411  5190					      SUBROUTINE
    412  5190
    413  5190							; Piece is selected and now we're looking for a button press on a destination square
    414  5190							; we flash the piece on-and-off while we're doing that
    415  5190
    416  5190		       20 82 f1 	      jsr	FlashPiece
    417  5193		       20 56 f1 	      jsr	moveCursor
    418  5196		       20 6e fd 	      jsr	SAFE_IsValidMoveToSquare
    419  5199		       20 6b f0 	      jsr	setCursorColours
    420  519c
    421  519c							; y = valid square
    422  519c
    423  519c		       a5 96		      lda	aiFlashPhase
    424  519e		       29 01		      and	#1
    425  51a0		       d0 17		      bne	.noButton	; prevent EOR-error on flashing selected piece
    426  51a2
    427  51a2		       a5 4c		      lda	INPT4
    428  51a4		       30 13		      bmi	.noButton
    429  51a6
    430  51a6		       c0 ff		      cpy	#-1
    431  51a8		       d0 0b		      bne	.done	; valid square
    432  51aa
    433  51aa		       a5 92		      lda	aiToSquare
    434  51ac		       c5 91		      cmp	aiFromSquare	; is to==from?  that's a cancelllation
    435  51ae		       d0 09		      bne	.noButton	; no, so it's an INVALID square
    436  51b0
      0  51b0					      PHASE	AI_ReselectDebounce
      1  51b0		       a9 0a		      lda	#AI_ReselectDebounce
      2  51b2		       85 8f		      sta	aiPhase
    438  51b4		       60		      rts
    439  51b5
      0  51b5				   .done      PHASE	AI_Quiescent	; destination selected!
      1  51b5		       a9 08		      lda	#AI_Quiescent
      2  51b7		       85 8f		      sta	aiPhase
    441  51b9
    442  51b9		       60	   .noButton  rts
    443  51ba
    444  51ba
    445  51ba							;---------------------------------------------------------------------------------------------------
    446  51ba
      0  51ba					      DEF	aiReselectDebounce
      1  51ba				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  51ba
      3  51ba				   aiReselectDebounce
    448  51ba					      SUBROUTINE
    449  51ba
    450  51ba							; We've just cancelled the move. Wait for the button to be released
    451  51ba							; and then go back to selecting a piece to move
    452  51ba
    453  51ba		       a5 4c		      lda	INPT4
    454  51bc		       10 04		      bpl	.exit	; button still pressed, so wait
    455  51be
      0  51be					      PHASE	AI_SelectStartSquare
      1  51be		       a9 01		      lda	#AI_SelectStartSquare
      2  51c0		       85 8f		      sta	aiPhase
    457  51c2		       60	   .exit      rts
    458  51c3
    459  51c3							;---------------------------------------------------------------------------------------------------
    460  51c3
      0  51c3					      DEF	aiQuiescent	;#10
      1  51c3				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  51c3
      3  51c3				   aiQuiescent
    462  51c3					      SUBROUTINE
    463  51c3
    464  51c3		       a9 ff		      lda	#-1
    465  51c5		       85 88		      sta	highlight_row	;??? piece move error when removed...???!
    466  51c7
    467  51c7		       a5 91		      lda	aiFromSquare
    468  51c9		       85 9f		      sta	fromSquare
    469  51cb		       a5 92		      lda	aiToSquare
    470  51cd		       85 a1		      sta	toSquare
    471  51cf		       a5 a6		      lda	aiPiece
    472  51d1		       85 a0		      sta	fromPiece
    473  51d3		       85 a2		      sta	toPiece
    474  51d5
    475  51d5		       a5 93		      lda	aiFromSquareX12
    476  51d7		       85 86		      sta	fromX12
    477  51d9		       a5 94		      lda	aiToSquareX12
    478  51db		       85 87		      sta	toX12
    479  51dd
      0  51dd					      PHASE	AI_Halt
      1  51dd		       a9 09		      lda	#AI_Halt
      2  51df		       85 8f		      sta	aiPhase
    481  51e1		       60		      rts
    482  51e2
    483  51e2							;---------------------------------------------------------------------------------------------------
    484  51e2
      0  51e2					      DEF	aiHalt
      1  51e2				   BANK_aiHalt SET	_CURRENT_BANK
      2  51e2
      3  51e2				   aiHalt
    486  51e2					      SUBROUTINE
    487  51e2
    488  51e2							; Effectively halt at this point until the other state machine resets the AI state machine
    489  51e2
    490  51e2		       60		      rts
    491  51e3
    492  51e3							;---------------------------------------------------------------------------------------------------
    493  51e3
    494  51e3							;    align 256
      0  51e3					      DEF	PositionSprites
      1  51e3				   BANK_PositionSprites SET	_CURRENT_BANK
      2  51e3
      3  51e3				   PositionSprites
    496  51e3					      SUBROUTINE
    497  51e3
    498  51e3		       a4 8a		      ldy	highlight_col
    499  51e5
    500  51e5		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    501  51e7
    502  51e7		       b9 0f f2 	      lda	colToPixel,y
    503  51ea
    504  51ea		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    505  51eb		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    506  51ed		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    507  51ef
    508  51ef		       a8		      tay
    509  51f0		       b9 0f f1 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    510  51f3		       85 60		      sta	HMP0
    511  51f5		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    512  51f7
    513  51f7		       85 42		      sta	WSYNC
    514  51f9		       85 6a		      sta	HMOVE
    515  51fb
    516  51fb		       60		      rts
    517  51fc
    518  51fc							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    519  51fc							; fine adjustment value. This table is on a page boundary to guarantee the processor
    520  51fc							; will cross a page boundary and waste a cycle in order to be at the precise position
    521  51fc							; for a RESP0,x write
    522  51fc
    523  51fc
    524  5200		       00 00 00 00	      align	256
    525  5200
    526  5200				   fineAdjustBegin
    527  5200
    528  5200		       70		      DC.B	%01110000	; Left 7
    529  5201		       60		      DC.B	%01100000	; Left 6
    530  5202		       50		      DC.B	%01010000	; Left 5
    531  5203		       40		      DC.B	%01000000	; Left 4
    532  5204		       30		      DC.B	%00110000	; Left 3
    533  5205		       20		      DC.B	%00100000	; Left 2
    534  5206		       10		      DC.B	%00010000	; Left 1
    535  5207		       00		      DC.B	%00000000	; No movement.
    536  5208		       f0		      DC.B	%11110000	; Right 1
    537  5209		       e0		      DC.B	%11100000	; Right 2
    538  520a		       d0		      DC.B	%11010000	; Right 3
    539  520b		       c0		      DC.B	%11000000	; Right 4
    540  520c		       b0		      DC.B	%10110000	; Right 5
    541  520d		       a0		      DC.B	%10100000	; Right 6
    542  520e		       90		      DC.B	%10010000	; Right 7
    543  520f
    544  520f		       f1 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    545  520f
    546  520f
      0  520f					      OPTIONAL_PAGEBREAK	"colToPixel", 8
     10  520f					      LIST	ON
    548  520f		       00 14 28 3c*colToPixel .byte.b	0,20,40,60,80,100,120,140
    549  5217
      0  5217					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  5217		       02 17	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $217 , FREE= $5e9
      2  5217					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  5217				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  5217				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  5217				  -	      ERR
      6  5217					      endif
    551  5217
    552  5217
    553  5217							; EOF
------- FILE ./chess.asm
    358  5217
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  5217					      include	"titleScreen.asm"
      0  5217					      NEWBANK	TITLESCREEN
      1  5fc0 ????				      SEG	TITLESCREEN
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   TITLESCREEN SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	TITLESCREEN
      2  5800
      3  5800				   OverscanTime2
      4  5800		       1a 1a		      .byte.b	26, 26
      5  5802		       20 20		      .byte.b	32, 32
      6  5804
      7  5804				   colvec
      8  5804		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  5808
     10  5808
     11  5808		       32 32	   VBlankTime .byte.b	50,50
     12  580a
      0  580a					      DEF	TitleScreen
      1  580a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  580a
      3  580a				   TitleScreen
     14  580a
     15  580a							; Start of new frame
     16  580a
     17  580a							; Start of vertical blank processing
     18  580a
     19  580a				   TitleSequence
     20  580a
     21  580a		       a9 00		      lda	#%00000000
     22  580c		       85 4a		      sta	CTRLPF
     23  580e		       85 49		      sta	COLUBK
     24  5810
     25  5810		       a2 00		      ldx	#0	;Platform
     26  5812		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  5814		       85 a7		      sta	__colour_table
     28  5816		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     29  5818		       85 a8		      sta	__colour_table+1
     30  581a
     31  581a							;		  sta rndHi
     32  581a							;		  sta rnd
     33  581a
     34  581a
     35  581a				  -	      if	0
     36  581a				  -	      lda	#0
     37  581a				  -	      sta	digit
     38  581a				  -	      lda	#$10
     39  581a				  -	      sta	digit+1
     40  581a				  -	      lda	#$20
     41  581a				  -	      sta	digit+2
     42  581a					      endif
     43  581a
     44  581a
     45  581a
     46  581a
      0  581a					      RESYNC
      1  581a
      2  581a		       a9 02		      lda	#%10
      3  581c		       85 41		      sta	VBLANK
      4  581e
      5  581e		       a2 08		      ldx	#8
      6  5820				   .loopResync
      0  5820					      VERTICAL_SYNC
      1  5820		       a9 0e		      lda	#%1110
      2  5822		       85 42	   .VSLP1     sta	WSYNC
      3  5824		       85 40		      sta	VSYNC
      4  5826		       4a		      lsr
      5  5827		       d0 f9		      bne	.VSLP1
      8  5829
      9  5829		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  582b		       a5 a5		      lda	Platform
     11  582d		       49 02		      eor	#PAL_50
     12  582f		       d0 02		      bne	.ntsc
     13  5831		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  5833				   .ntsc
     15  5833				   .loopWait
     16  5833		       85 42		      sta	WSYNC
     17  5835		       85 42		      sta	WSYNC
     18  5837		       88		      dey
     19  5838		       d0 f9		      bne	.loopWait
     20  583a		       ca		      dex
     21  583b		       d0 e3		      bne	.loopResync
     48  583d
     49  583d				   RestartFrame0
     50  583d
     51  583d				  -	      if	0
     52  583d				  -	      ldx	#2
     53  583d				  -rollcols   clc
     54  583d				  -	      lda	digit+2
     55  583d				  -	      adc	#$10
     56  583d				  -	      sta	digit+2
     57  583d				  -	      bcc	finxc
     58  583d				  -	      dex
     59  583d				  -	      bpl	rollcols
     60  583d				  -finxc
     61  583d					      endif
     62  583d
      0  583d					      DEF	RestartFrame
      1  583d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  583d
      3  583d				   RestartFrame
     64  583d		       a9 00		      LDA	#0
     65  583f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  5841		       85 42	   .loopVSync2 sta	WSYNC
     67  5843		       85 40		      sta	VSYNC
     68  5845		       4a		      lsr
     69  5846		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  5848
     71  5848							;------------------------------------------------------------------
     72  5848
     73  5848		       a6 a5		      ldx	Platform
     74  584a		       bc 08 f0 	      ldy	VBlankTime,x
     75  584d		       8c 96 02 	      sty	TIM64T
     76  5850
     77  5850
     78  5850				  -	      if	0
     79  5850				  -	      lda	SWCHB
     80  5850				  -	      rol
     81  5850				  -	      rol
     82  5850				  -	      rol
     83  5850				  -	      and	#%11
     84  5850				  -	      eor	#PAL
     85  5850				  -	      cmp	Platform
     86  5850				  -	      beq	platOK
     87  5850				  -	      sta	Platform
     88  5850				  -	      jmp	TitleSequence
     89  5850				  -platOK
     90  5850					      endif
     91  5850
     92  5850		       e6 81	   k2	      inc	rnd
     93  5852		       f0 fc		      beq	k2
     94  5854
     95  5854
     96  5854		       85 42	   VerticalBlank sta	WSYNC
     97  5856		       ad 84 02 	      lda	INTIM
     98  5859		       d0 f9		      bne	VerticalBlank
     99  585b		       85 41		      sta	VBLANK
    100  585d
    101  585d							;sta COLUBK
    102  585d
    103  585d							;------------------------------------------------------------------
    104  585d
    105  585d							; Do X scanlines of color-changing (our picture)
    106  585d
    107  585d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  585f		       a2 03	   SokoLogo   ldx	#3
    109  5861		       b1 a7	   triplet    lda	(__colour_table),y
    110  5863							;    eor digit-1,x
    111  5863		       85 42		      sta	WSYNC
    112  5865		       85 48		      sta	COLUPF	; 3
    113  5867
    114  5867		       b9 b0 f2 	      lda	COL_0,y	; 5
    115  586a		       85 4d		      sta	PF0	; 3   @11
    116  586c		       b9 88 f3 	      lda	COL_1,y	; 5
    117  586f		       85 4e		      sta	PF1	; 3   @19
    118  5871		       b9 60 f4 	      lda	COL_2,y	; 5
    119  5874		       85 4f		      sta	PF2	; 3   @27
    120  5876
    121  5876		       b9 38 f5 	      lda	COL_3,y	; 5
    122  5879		       85 4d		      sta	PF0	; 3   @35
      0  587b					      SLEEP	2	; @37
      1  587b				   .CYCLES    SET	2
      2  587b
      3  587b				  -	      IF	.CYCLES < 2
      4  587b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  587b				  -	      ERR
      6  587b					      ENDIF
      7  587b
      8  587b				  -	      IF	.CYCLES & 1
      9  587b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  587b				  -	      nop	0
     11  587b				  -	      ELSE
     12  587b				  -	      bit	VSYNC
     13  587b				  -	      ENDIF
     14  587b				  -.CYCLES    SET	.CYCLES - 3
     15  587b					      ENDIF
     16  587b
     17  587b					      REPEAT	.CYCLES / 2
     18  587b		       ea		      nop
     19  587c					      REPEND
    124  587c		       b9 10 f6 	      lda	COL_4,y	; 5
    125  587f		       85 4e		      sta	PF1	; 3   @45
      0  5881					      SLEEP	3	; @45
      1  5881				   .CYCLES    SET	3
      2  5881
      3  5881				  -	      IF	.CYCLES < 2
      4  5881				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  5881				  -	      ERR
      6  5881					      ENDIF
      7  5881
      8  5881					      IF	.CYCLES & 1
      9  5881					      IFNCONST	NO_ILLEGAL_OPCODES
     10  5881		       04 00		      nop	0
     11  5883				  -	      ELSE
     12  5883				  -	      bit	VSYNC
     13  5883					      ENDIF
     14  5883				   .CYCLES    SET	.CYCLES - 3
     15  5883					      ENDIF
     16  5883
     17  5883				  -	      REPEAT	.CYCLES / 2
     18  5883				  -	      nop
     19  5883					      REPEND
    127  5883		       b9 e8 f6 	      lda	COL_5,y	; 5
    128  5886		       85 4f		      sta	PF2	; 3
    129  5888
    130  5888		       88		      dey		; 2
    131  5889		       ca		      dex		; 2
    132  588a		       d0 d5		      bne	triplet	; 2(3)
    133  588c
    134  588c		       c0 ff		      cpy	#-1	; 2
    135  588e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  5890
    137  5890							;lda #0
    138  5890							;sta PF0
    139  5890							;sta PF1
    140  5890							;sta PF2
    141  5890
    142  5890		       a6 a5		      ldx	Platform
    143  5892		       bd 00 f0 	      lda	OverscanTime2,x
    144  5895		       8d 96 02 	      sta	TIM64T
    145  5898
    146  5898				  -	      if	0
    147  5898				  -	      sta	WSYNC
    148  5898				  -	      sta	WSYNC
    149  5898				  -	      sta	WSYNC
    150  5898				  -	      sta	WSYNC
    151  5898				  -	      sta	WSYNC
    152  5898				  -	      SLEEP	8
    153  5898				  -	      jsr	SokoScreen
    154  5898				  -
    155  5898				  -	      lda	#0
    156  5898				  -	      sta	BoardScrollX
    157  5898				  -	      sta	BoardScrollY
    158  5898					      endif
    159  5898
    160  5898							;		ldy #63
    161  5898							;bot2		 sta WSYNC
    162  5898							;		dey
    163  5898							;		bpl bot2
    164  5898
    165  5898							;--------------------------------------------------------------------------
    166  5898
    167  5898		       a9 00		      lda	#0
    168  589a		       85 4d		      sta	PF0
    169  589c		       85 4e		      sta	PF1
    170  589e		       85 4f		      sta	PF2
    171  58a0
    172  58a0
      0  58a0					      NEXT_RANDOM
      1  58a0		       a5 81		      lda	rnd
      2  58a2		       4a		      lsr
      3  58a3		       90 02		      bcc	.skipEOR
      4  58a5		       49 fe		      eor	#RND_EOR_VAL
      5  58a7		       85 81	   .skipEOR   sta	rnd
    174  58a9
    175  58a9							; D1 VBLANK turns off beam
    176  58a9							; It needs to be turned on 37 scanlines later
    177  58a9
    178  58a9				   oscan
    179  58a9		       ad 84 02 	      lda	INTIM
    180  58ac		       d0 fb		      bne	oscan
    181  58ae
    182  58ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  58b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  58b2
    185  58b2				  -	      if	0
    186  58b2				  -	      inc	rnd
    187  58b2				  -	      bne	rdd
    188  58b2				  -	      inc	rndHi
    189  58b2				  -rdd
    190  58b2				  -
    191  58b2				  -	      dec	digitick
    192  58b2				  -	      bpl	ret2
    193  58b2				  -	      lda	#40
    194  58b2				  -	      sta	digitick
    195  58b2				  -
    196  58b2				  -	      jsr	Random
    197  58b2				  -	      and	#3
    198  58b2				  -	      beq	ret2
    199  58b2				  -	      tax
    200  58b2				  -	      jsr	Random
    201  58b2				  -	      and	#$F0
    202  58b2				  -	      sta	digit-1,x
    203  58b2				  -	      jmp	RestartFrame0
    204  58b2				  -
    205  58b2				  -ret2
    206  58b2					      endif
    207  58b2
    208  58b2
    209  58b2		       a5 4c		      lda	INPT4
    210  58b4		       10 03		      bpl	ret
    211  58b6
    212  58b6		       4c 3d f0 	      jmp	RestartFrame
    213  58b9
    214  58b9				   ret
    215  58b9		       60		      rts
    216  58ba
    217  58ba
    218  58ba
    219  58ba					      MAC	lumtable
    220  58ba							; {4} MIN LUM 1
    221  58ba							; {5} MIN LUM 2
    222  58ba							; {6} MIN LUM 3
    223  58ba
    224  58ba				   .LUM1      SET	{4}*256
    225  58ba				   .LUM2      SET	{5}*256
    226  58ba				   .LUM3      SET	{6}*256
    227  58ba
    228  58ba				   .STEP1     =	(256*({7}-{4}))/72
    229  58ba				   .STEP2     =	(256*({8}-{5}))/72
    230  58ba				   .STEP3     =	(256*({9}-{6}))/72
    231  58ba
    232  58ba					      REPEAT	72
    233  58ba					      .byte	{1}+(.LUM1/256)
    234  58ba					      .byte	{2}+(.LUM2/256)
    235  58ba					      .byte	{3}+(.LUM3/256)
    236  58ba
    237  58ba							;    ECHO {1}+(.LUM1/256)
    238  58ba							;    ECHO {2}+(.LUM1/256)
    239  58ba							;    ECHO {3}+(.LUM1/256)
    240  58ba
    241  58ba				   .LUM1      SET	.LUM1 + .STEP1
    242  58ba				   .LUM2      SET	.LUM2 + .STEP2
    243  58ba				   .LUM3      SET	.LUM3 + .STEP3
    244  58ba					      REPEND
    245  58ba					      ENDM		;{1}{2}{3} base colours
    246  58ba
    247  58ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  58ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  58ba
    250  5900		       00 00 00 00*	      align	256
    251  5900							;    ECHO "NTSC LUMS"
    252  5900				   colr_ntsc2
      0  5900					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  5900
      2  5900
      3  5900
      4  5900
      5  5900				   .LUM1      SET	$4*256
      6  5900				   .LUM2      SET	$6*256
      7  5900				   .LUM3      SET	$8*256
      8  5900
      9  5900		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  5900		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  5900		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  5900
     13  5900					      REPEAT	72
     14  5900		       44		      .byte.b	$40+(.LUM1/256)
     15  5901		       26		      .byte.b	$20+(.LUM2/256)
     16  5902		       98		      .byte.b	$90+(.LUM3/256)
     17  5903
     18  5903
     19  5903
     20  5903
     21  5903
     22  5903				   .LUM1      SET	.LUM1 + .STEP1
     23  5903				   .LUM2      SET	.LUM2 + .STEP2
     24  5903				   .LUM3      SET	.LUM3 + .STEP3
     13  5903					      REPEND
     14  5903		       44		      .byte.b	$40+(.LUM1/256)
     15  5904		       26		      .byte.b	$20+(.LUM2/256)
     16  5905		       98		      .byte.b	$90+(.LUM3/256)
     17  5906
     18  5906
     19  5906
     20  5906
     21  5906
     22  5906				   .LUM1      SET	.LUM1 + .STEP1
     23  5906				   .LUM2      SET	.LUM2 + .STEP2
     24  5906				   .LUM3      SET	.LUM3 + .STEP3
     13  5906					      REPEND
     14  5906		       44		      .byte.b	$40+(.LUM1/256)
     15  5907		       26		      .byte.b	$20+(.LUM2/256)
     16  5908		       98		      .byte.b	$90+(.LUM3/256)
     17  5909
     18  5909
     19  5909
     20  5909
     21  5909
     22  5909				   .LUM1      SET	.LUM1 + .STEP1
     23  5909				   .LUM2      SET	.LUM2 + .STEP2
     24  5909				   .LUM3      SET	.LUM3 + .STEP3
     13  5909					      REPEND
     14  5909		       44		      .byte.b	$40+(.LUM1/256)
     15  590a		       26		      .byte.b	$20+(.LUM2/256)
     16  590b		       98		      .byte.b	$90+(.LUM3/256)
     17  590c
     18  590c
     19  590c
     20  590c
     21  590c
     22  590c				   .LUM1      SET	.LUM1 + .STEP1
     23  590c				   .LUM2      SET	.LUM2 + .STEP2
     24  590c				   .LUM3      SET	.LUM3 + .STEP3
     13  590c					      REPEND
     14  590c		       44		      .byte.b	$40+(.LUM1/256)
     15  590d		       26		      .byte.b	$20+(.LUM2/256)
     16  590e		       98		      .byte.b	$90+(.LUM3/256)
     17  590f
     18  590f
     19  590f
     20  590f
     21  590f
     22  590f				   .LUM1      SET	.LUM1 + .STEP1
     23  590f				   .LUM2      SET	.LUM2 + .STEP2
     24  590f				   .LUM3      SET	.LUM3 + .STEP3
     13  590f					      REPEND
     14  590f		       44		      .byte.b	$40+(.LUM1/256)
     15  5910		       26		      .byte.b	$20+(.LUM2/256)
     16  5911		       98		      .byte.b	$90+(.LUM3/256)
     17  5912
     18  5912
     19  5912
     20  5912
     21  5912
     22  5912				   .LUM1      SET	.LUM1 + .STEP1
     23  5912				   .LUM2      SET	.LUM2 + .STEP2
     24  5912				   .LUM3      SET	.LUM3 + .STEP3
     13  5912					      REPEND
     14  5912		       44		      .byte.b	$40+(.LUM1/256)
     15  5913		       26		      .byte.b	$20+(.LUM2/256)
     16  5914		       98		      .byte.b	$90+(.LUM3/256)
     17  5915
     18  5915
     19  5915
     20  5915
     21  5915
     22  5915				   .LUM1      SET	.LUM1 + .STEP1
     23  5915				   .LUM2      SET	.LUM2 + .STEP2
     24  5915				   .LUM3      SET	.LUM3 + .STEP3
     13  5915					      REPEND
     14  5915		       44		      .byte.b	$40+(.LUM1/256)
     15  5916		       26		      .byte.b	$20+(.LUM2/256)
     16  5917		       98		      .byte.b	$90+(.LUM3/256)
     17  5918
     18  5918
     19  5918
     20  5918
     21  5918
     22  5918				   .LUM1      SET	.LUM1 + .STEP1
     23  5918				   .LUM2      SET	.LUM2 + .STEP2
     24  5918				   .LUM3      SET	.LUM3 + .STEP3
     13  5918					      REPEND
     14  5918		       44		      .byte.b	$40+(.LUM1/256)
     15  5919		       26		      .byte.b	$20+(.LUM2/256)
     16  591a		       98		      .byte.b	$90+(.LUM3/256)
     17  591b
     18  591b
     19  591b
     20  591b
     21  591b
     22  591b				   .LUM1      SET	.LUM1 + .STEP1
     23  591b				   .LUM2      SET	.LUM2 + .STEP2
     24  591b				   .LUM3      SET	.LUM3 + .STEP3
     13  591b					      REPEND
     14  591b		       44		      .byte.b	$40+(.LUM1/256)
     15  591c		       26		      .byte.b	$20+(.LUM2/256)
     16  591d		       98		      .byte.b	$90+(.LUM3/256)
     17  591e
     18  591e
     19  591e
     20  591e
     21  591e
     22  591e				   .LUM1      SET	.LUM1 + .STEP1
     23  591e				   .LUM2      SET	.LUM2 + .STEP2
     24  591e				   .LUM3      SET	.LUM3 + .STEP3
     13  591e					      REPEND
     14  591e		       44		      .byte.b	$40+(.LUM1/256)
     15  591f		       26		      .byte.b	$20+(.LUM2/256)
     16  5920		       98		      .byte.b	$90+(.LUM3/256)
     17  5921
     18  5921
     19  5921
     20  5921
     21  5921
     22  5921				   .LUM1      SET	.LUM1 + .STEP1
     23  5921				   .LUM2      SET	.LUM2 + .STEP2
     24  5921				   .LUM3      SET	.LUM3 + .STEP3
     13  5921					      REPEND
     14  5921		       44		      .byte.b	$40+(.LUM1/256)
     15  5922		       26		      .byte.b	$20+(.LUM2/256)
     16  5923		       98		      .byte.b	$90+(.LUM3/256)
     17  5924
     18  5924
     19  5924
     20  5924
     21  5924
     22  5924				   .LUM1      SET	.LUM1 + .STEP1
     23  5924				   .LUM2      SET	.LUM2 + .STEP2
     24  5924				   .LUM3      SET	.LUM3 + .STEP3
     13  5924					      REPEND
     14  5924		       44		      .byte.b	$40+(.LUM1/256)
     15  5925		       26		      .byte.b	$20+(.LUM2/256)
     16  5926		       98		      .byte.b	$90+(.LUM3/256)
     17  5927
     18  5927
     19  5927
     20  5927
     21  5927
     22  5927				   .LUM1      SET	.LUM1 + .STEP1
     23  5927				   .LUM2      SET	.LUM2 + .STEP2
     24  5927				   .LUM3      SET	.LUM3 + .STEP3
     13  5927					      REPEND
     14  5927		       44		      .byte.b	$40+(.LUM1/256)
     15  5928		       26		      .byte.b	$20+(.LUM2/256)
     16  5929		       98		      .byte.b	$90+(.LUM3/256)
     17  592a
     18  592a
     19  592a
     20  592a
     21  592a
     22  592a				   .LUM1      SET	.LUM1 + .STEP1
     23  592a				   .LUM2      SET	.LUM2 + .STEP2
     24  592a				   .LUM3      SET	.LUM3 + .STEP3
     13  592a					      REPEND
     14  592a		       44		      .byte.b	$40+(.LUM1/256)
     15  592b		       26		      .byte.b	$20+(.LUM2/256)
     16  592c		       98		      .byte.b	$90+(.LUM3/256)
     17  592d
     18  592d
     19  592d
     20  592d
     21  592d
     22  592d				   .LUM1      SET	.LUM1 + .STEP1
     23  592d				   .LUM2      SET	.LUM2 + .STEP2
     24  592d				   .LUM3      SET	.LUM3 + .STEP3
     13  592d					      REPEND
     14  592d		       44		      .byte.b	$40+(.LUM1/256)
     15  592e		       26		      .byte.b	$20+(.LUM2/256)
     16  592f		       98		      .byte.b	$90+(.LUM3/256)
     17  5930
     18  5930
     19  5930
     20  5930
     21  5930
     22  5930				   .LUM1      SET	.LUM1 + .STEP1
     23  5930				   .LUM2      SET	.LUM2 + .STEP2
     24  5930				   .LUM3      SET	.LUM3 + .STEP3
     13  5930					      REPEND
     14  5930		       44		      .byte.b	$40+(.LUM1/256)
     15  5931		       26		      .byte.b	$20+(.LUM2/256)
     16  5932		       98		      .byte.b	$90+(.LUM3/256)
     17  5933
     18  5933
     19  5933
     20  5933
     21  5933
     22  5933				   .LUM1      SET	.LUM1 + .STEP1
     23  5933				   .LUM2      SET	.LUM2 + .STEP2
     24  5933				   .LUM3      SET	.LUM3 + .STEP3
     13  5933					      REPEND
     14  5933		       44		      .byte.b	$40+(.LUM1/256)
     15  5934		       26		      .byte.b	$20+(.LUM2/256)
     16  5935		       98		      .byte.b	$90+(.LUM3/256)
     17  5936
     18  5936
     19  5936
     20  5936
     21  5936
     22  5936				   .LUM1      SET	.LUM1 + .STEP1
     23  5936				   .LUM2      SET	.LUM2 + .STEP2
     24  5936				   .LUM3      SET	.LUM3 + .STEP3
     13  5936					      REPEND
     14  5936		       44		      .byte.b	$40+(.LUM1/256)
     15  5937		       26		      .byte.b	$20+(.LUM2/256)
     16  5938		       98		      .byte.b	$90+(.LUM3/256)
     17  5939
     18  5939
     19  5939
     20  5939
     21  5939
     22  5939				   .LUM1      SET	.LUM1 + .STEP1
     23  5939				   .LUM2      SET	.LUM2 + .STEP2
     24  5939				   .LUM3      SET	.LUM3 + .STEP3
     13  5939					      REPEND
     14  5939		       44		      .byte.b	$40+(.LUM1/256)
     15  593a		       26		      .byte.b	$20+(.LUM2/256)
     16  593b		       98		      .byte.b	$90+(.LUM3/256)
     17  593c
     18  593c
     19  593c
     20  593c
     21  593c
     22  593c				   .LUM1      SET	.LUM1 + .STEP1
     23  593c				   .LUM2      SET	.LUM2 + .STEP2
     24  593c				   .LUM3      SET	.LUM3 + .STEP3
     13  593c					      REPEND
     14  593c		       44		      .byte.b	$40+(.LUM1/256)
     15  593d		       26		      .byte.b	$20+(.LUM2/256)
     16  593e		       98		      .byte.b	$90+(.LUM3/256)
     17  593f
     18  593f
     19  593f
     20  593f
     21  593f
     22  593f				   .LUM1      SET	.LUM1 + .STEP1
     23  593f				   .LUM2      SET	.LUM2 + .STEP2
     24  593f				   .LUM3      SET	.LUM3 + .STEP3
     13  593f					      REPEND
     14  593f		       44		      .byte.b	$40+(.LUM1/256)
     15  5940		       26		      .byte.b	$20+(.LUM2/256)
     16  5941		       98		      .byte.b	$90+(.LUM3/256)
     17  5942
     18  5942
     19  5942
     20  5942
     21  5942
     22  5942				   .LUM1      SET	.LUM1 + .STEP1
     23  5942				   .LUM2      SET	.LUM2 + .STEP2
     24  5942				   .LUM3      SET	.LUM3 + .STEP3
     13  5942					      REPEND
     14  5942		       44		      .byte.b	$40+(.LUM1/256)
     15  5943		       26		      .byte.b	$20+(.LUM2/256)
     16  5944		       98		      .byte.b	$90+(.LUM3/256)
     17  5945
     18  5945
     19  5945
     20  5945
     21  5945
     22  5945				   .LUM1      SET	.LUM1 + .STEP1
     23  5945				   .LUM2      SET	.LUM2 + .STEP2
     24  5945				   .LUM3      SET	.LUM3 + .STEP3
     13  5945					      REPEND
     14  5945		       44		      .byte.b	$40+(.LUM1/256)
     15  5946		       26		      .byte.b	$20+(.LUM2/256)
     16  5947		       98		      .byte.b	$90+(.LUM3/256)
     17  5948
     18  5948
     19  5948
     20  5948
     21  5948
     22  5948				   .LUM1      SET	.LUM1 + .STEP1
     23  5948				   .LUM2      SET	.LUM2 + .STEP2
     24  5948				   .LUM3      SET	.LUM3 + .STEP3
     13  5948					      REPEND
     14  5948		       44		      .byte.b	$40+(.LUM1/256)
     15  5949		       26		      .byte.b	$20+(.LUM2/256)
     16  594a		       98		      .byte.b	$90+(.LUM3/256)
     17  594b
     18  594b
     19  594b
     20  594b
     21  594b
     22  594b				   .LUM1      SET	.LUM1 + .STEP1
     23  594b				   .LUM2      SET	.LUM2 + .STEP2
     24  594b				   .LUM3      SET	.LUM3 + .STEP3
     13  594b					      REPEND
     14  594b		       44		      .byte.b	$40+(.LUM1/256)
     15  594c		       26		      .byte.b	$20+(.LUM2/256)
     16  594d		       98		      .byte.b	$90+(.LUM3/256)
     17  594e
     18  594e
     19  594e
     20  594e
     21  594e
     22  594e				   .LUM1      SET	.LUM1 + .STEP1
     23  594e				   .LUM2      SET	.LUM2 + .STEP2
     24  594e				   .LUM3      SET	.LUM3 + .STEP3
     13  594e					      REPEND
     14  594e		       44		      .byte.b	$40+(.LUM1/256)
     15  594f		       26		      .byte.b	$20+(.LUM2/256)
     16  5950		       98		      .byte.b	$90+(.LUM3/256)
     17  5951
     18  5951
     19  5951
     20  5951
     21  5951
     22  5951				   .LUM1      SET	.LUM1 + .STEP1
     23  5951				   .LUM2      SET	.LUM2 + .STEP2
     24  5951				   .LUM3      SET	.LUM3 + .STEP3
     13  5951					      REPEND
     14  5951		       44		      .byte.b	$40+(.LUM1/256)
     15  5952		       26		      .byte.b	$20+(.LUM2/256)
     16  5953		       98		      .byte.b	$90+(.LUM3/256)
     17  5954
     18  5954
     19  5954
     20  5954
     21  5954
     22  5954				   .LUM1      SET	.LUM1 + .STEP1
     23  5954				   .LUM2      SET	.LUM2 + .STEP2
     24  5954				   .LUM3      SET	.LUM3 + .STEP3
     13  5954					      REPEND
     14  5954		       44		      .byte.b	$40+(.LUM1/256)
     15  5955		       26		      .byte.b	$20+(.LUM2/256)
     16  5956		       98		      .byte.b	$90+(.LUM3/256)
     17  5957
     18  5957
     19  5957
     20  5957
     21  5957
     22  5957				   .LUM1      SET	.LUM1 + .STEP1
     23  5957				   .LUM2      SET	.LUM2 + .STEP2
     24  5957				   .LUM3      SET	.LUM3 + .STEP3
     13  5957					      REPEND
     14  5957		       44		      .byte.b	$40+(.LUM1/256)
     15  5958		       26		      .byte.b	$20+(.LUM2/256)
     16  5959		       98		      .byte.b	$90+(.LUM3/256)
     17  595a
     18  595a
     19  595a
     20  595a
     21  595a
     22  595a				   .LUM1      SET	.LUM1 + .STEP1
     23  595a				   .LUM2      SET	.LUM2 + .STEP2
     24  595a				   .LUM3      SET	.LUM3 + .STEP3
     13  595a					      REPEND
     14  595a		       44		      .byte.b	$40+(.LUM1/256)
     15  595b		       26		      .byte.b	$20+(.LUM2/256)
     16  595c		       98		      .byte.b	$90+(.LUM3/256)
     17  595d
     18  595d
     19  595d
     20  595d
     21  595d
     22  595d				   .LUM1      SET	.LUM1 + .STEP1
     23  595d				   .LUM2      SET	.LUM2 + .STEP2
     24  595d				   .LUM3      SET	.LUM3 + .STEP3
     13  595d					      REPEND
     14  595d		       44		      .byte.b	$40+(.LUM1/256)
     15  595e		       26		      .byte.b	$20+(.LUM2/256)
     16  595f		       98		      .byte.b	$90+(.LUM3/256)
     17  5960
     18  5960
     19  5960
     20  5960
     21  5960
     22  5960				   .LUM1      SET	.LUM1 + .STEP1
     23  5960				   .LUM2      SET	.LUM2 + .STEP2
     24  5960				   .LUM3      SET	.LUM3 + .STEP3
     13  5960					      REPEND
     14  5960		       44		      .byte.b	$40+(.LUM1/256)
     15  5961		       26		      .byte.b	$20+(.LUM2/256)
     16  5962		       98		      .byte.b	$90+(.LUM3/256)
     17  5963
     18  5963
     19  5963
     20  5963
     21  5963
     22  5963				   .LUM1      SET	.LUM1 + .STEP1
     23  5963				   .LUM2      SET	.LUM2 + .STEP2
     24  5963				   .LUM3      SET	.LUM3 + .STEP3
     13  5963					      REPEND
     14  5963		       44		      .byte.b	$40+(.LUM1/256)
     15  5964		       26		      .byte.b	$20+(.LUM2/256)
     16  5965		       98		      .byte.b	$90+(.LUM3/256)
     17  5966
     18  5966
     19  5966
     20  5966
     21  5966
     22  5966				   .LUM1      SET	.LUM1 + .STEP1
     23  5966				   .LUM2      SET	.LUM2 + .STEP2
     24  5966				   .LUM3      SET	.LUM3 + .STEP3
     13  5966					      REPEND
     14  5966		       44		      .byte.b	$40+(.LUM1/256)
     15  5967		       26		      .byte.b	$20+(.LUM2/256)
     16  5968		       98		      .byte.b	$90+(.LUM3/256)
     17  5969
     18  5969
     19  5969
     20  5969
     21  5969
     22  5969				   .LUM1      SET	.LUM1 + .STEP1
     23  5969				   .LUM2      SET	.LUM2 + .STEP2
     24  5969				   .LUM3      SET	.LUM3 + .STEP3
     13  5969					      REPEND
     14  5969		       44		      .byte.b	$40+(.LUM1/256)
     15  596a		       26		      .byte.b	$20+(.LUM2/256)
     16  596b		       98		      .byte.b	$90+(.LUM3/256)
     17  596c
     18  596c
     19  596c
     20  596c
     21  596c
     22  596c				   .LUM1      SET	.LUM1 + .STEP1
     23  596c				   .LUM2      SET	.LUM2 + .STEP2
     24  596c				   .LUM3      SET	.LUM3 + .STEP3
     13  596c					      REPEND
     14  596c		       44		      .byte.b	$40+(.LUM1/256)
     15  596d		       26		      .byte.b	$20+(.LUM2/256)
     16  596e		       98		      .byte.b	$90+(.LUM3/256)
     17  596f
     18  596f
     19  596f
     20  596f
     21  596f
     22  596f				   .LUM1      SET	.LUM1 + .STEP1
     23  596f				   .LUM2      SET	.LUM2 + .STEP2
     24  596f				   .LUM3      SET	.LUM3 + .STEP3
     13  596f					      REPEND
     14  596f		       44		      .byte.b	$40+(.LUM1/256)
     15  5970		       26		      .byte.b	$20+(.LUM2/256)
     16  5971		       98		      .byte.b	$90+(.LUM3/256)
     17  5972
     18  5972
     19  5972
     20  5972
     21  5972
     22  5972				   .LUM1      SET	.LUM1 + .STEP1
     23  5972				   .LUM2      SET	.LUM2 + .STEP2
     24  5972				   .LUM3      SET	.LUM3 + .STEP3
     13  5972					      REPEND
     14  5972		       44		      .byte.b	$40+(.LUM1/256)
     15  5973		       26		      .byte.b	$20+(.LUM2/256)
     16  5974		       98		      .byte.b	$90+(.LUM3/256)
     17  5975
     18  5975
     19  5975
     20  5975
     21  5975
     22  5975				   .LUM1      SET	.LUM1 + .STEP1
     23  5975				   .LUM2      SET	.LUM2 + .STEP2
     24  5975				   .LUM3      SET	.LUM3 + .STEP3
     13  5975					      REPEND
     14  5975		       44		      .byte.b	$40+(.LUM1/256)
     15  5976		       26		      .byte.b	$20+(.LUM2/256)
     16  5977		       98		      .byte.b	$90+(.LUM3/256)
     17  5978
     18  5978
     19  5978
     20  5978
     21  5978
     22  5978				   .LUM1      SET	.LUM1 + .STEP1
     23  5978				   .LUM2      SET	.LUM2 + .STEP2
     24  5978				   .LUM3      SET	.LUM3 + .STEP3
     13  5978					      REPEND
     14  5978		       44		      .byte.b	$40+(.LUM1/256)
     15  5979		       26		      .byte.b	$20+(.LUM2/256)
     16  597a		       98		      .byte.b	$90+(.LUM3/256)
     17  597b
     18  597b
     19  597b
     20  597b
     21  597b
     22  597b				   .LUM1      SET	.LUM1 + .STEP1
     23  597b				   .LUM2      SET	.LUM2 + .STEP2
     24  597b				   .LUM3      SET	.LUM3 + .STEP3
     13  597b					      REPEND
     14  597b		       44		      .byte.b	$40+(.LUM1/256)
     15  597c		       26		      .byte.b	$20+(.LUM2/256)
     16  597d		       98		      .byte.b	$90+(.LUM3/256)
     17  597e
     18  597e
     19  597e
     20  597e
     21  597e
     22  597e				   .LUM1      SET	.LUM1 + .STEP1
     23  597e				   .LUM2      SET	.LUM2 + .STEP2
     24  597e				   .LUM3      SET	.LUM3 + .STEP3
     13  597e					      REPEND
     14  597e		       44		      .byte.b	$40+(.LUM1/256)
     15  597f		       26		      .byte.b	$20+(.LUM2/256)
     16  5980		       98		      .byte.b	$90+(.LUM3/256)
     17  5981
     18  5981
     19  5981
     20  5981
     21  5981
     22  5981				   .LUM1      SET	.LUM1 + .STEP1
     23  5981				   .LUM2      SET	.LUM2 + .STEP2
     24  5981				   .LUM3      SET	.LUM3 + .STEP3
     13  5981					      REPEND
     14  5981		       44		      .byte.b	$40+(.LUM1/256)
     15  5982		       26		      .byte.b	$20+(.LUM2/256)
     16  5983		       98		      .byte.b	$90+(.LUM3/256)
     17  5984
     18  5984
     19  5984
     20  5984
     21  5984
     22  5984				   .LUM1      SET	.LUM1 + .STEP1
     23  5984				   .LUM2      SET	.LUM2 + .STEP2
     24  5984				   .LUM3      SET	.LUM3 + .STEP3
     13  5984					      REPEND
     14  5984		       44		      .byte.b	$40+(.LUM1/256)
     15  5985		       26		      .byte.b	$20+(.LUM2/256)
     16  5986		       98		      .byte.b	$90+(.LUM3/256)
     17  5987
     18  5987
     19  5987
     20  5987
     21  5987
     22  5987				   .LUM1      SET	.LUM1 + .STEP1
     23  5987				   .LUM2      SET	.LUM2 + .STEP2
     24  5987				   .LUM3      SET	.LUM3 + .STEP3
     13  5987					      REPEND
     14  5987		       44		      .byte.b	$40+(.LUM1/256)
     15  5988		       26		      .byte.b	$20+(.LUM2/256)
     16  5989		       98		      .byte.b	$90+(.LUM3/256)
     17  598a
     18  598a
     19  598a
     20  598a
     21  598a
     22  598a				   .LUM1      SET	.LUM1 + .STEP1
     23  598a				   .LUM2      SET	.LUM2 + .STEP2
     24  598a				   .LUM3      SET	.LUM3 + .STEP3
     13  598a					      REPEND
     14  598a		       44		      .byte.b	$40+(.LUM1/256)
     15  598b		       26		      .byte.b	$20+(.LUM2/256)
     16  598c		       98		      .byte.b	$90+(.LUM3/256)
     17  598d
     18  598d
     19  598d
     20  598d
     21  598d
     22  598d				   .LUM1      SET	.LUM1 + .STEP1
     23  598d				   .LUM2      SET	.LUM2 + .STEP2
     24  598d				   .LUM3      SET	.LUM3 + .STEP3
     13  598d					      REPEND
     14  598d		       44		      .byte.b	$40+(.LUM1/256)
     15  598e		       26		      .byte.b	$20+(.LUM2/256)
     16  598f		       98		      .byte.b	$90+(.LUM3/256)
     17  5990
     18  5990
     19  5990
     20  5990
     21  5990
     22  5990				   .LUM1      SET	.LUM1 + .STEP1
     23  5990				   .LUM2      SET	.LUM2 + .STEP2
     24  5990				   .LUM3      SET	.LUM3 + .STEP3
     13  5990					      REPEND
     14  5990		       44		      .byte.b	$40+(.LUM1/256)
     15  5991		       26		      .byte.b	$20+(.LUM2/256)
     16  5992		       98		      .byte.b	$90+(.LUM3/256)
     17  5993
     18  5993
     19  5993
     20  5993
     21  5993
     22  5993				   .LUM1      SET	.LUM1 + .STEP1
     23  5993				   .LUM2      SET	.LUM2 + .STEP2
     24  5993				   .LUM3      SET	.LUM3 + .STEP3
     13  5993					      REPEND
     14  5993		       44		      .byte.b	$40+(.LUM1/256)
     15  5994		       26		      .byte.b	$20+(.LUM2/256)
     16  5995		       98		      .byte.b	$90+(.LUM3/256)
     17  5996
     18  5996
     19  5996
     20  5996
     21  5996
     22  5996				   .LUM1      SET	.LUM1 + .STEP1
     23  5996				   .LUM2      SET	.LUM2 + .STEP2
     24  5996				   .LUM3      SET	.LUM3 + .STEP3
     13  5996					      REPEND
     14  5996		       44		      .byte.b	$40+(.LUM1/256)
     15  5997		       26		      .byte.b	$20+(.LUM2/256)
     16  5998		       98		      .byte.b	$90+(.LUM3/256)
     17  5999
     18  5999
     19  5999
     20  5999
     21  5999
     22  5999				   .LUM1      SET	.LUM1 + .STEP1
     23  5999				   .LUM2      SET	.LUM2 + .STEP2
     24  5999				   .LUM3      SET	.LUM3 + .STEP3
     13  5999					      REPEND
     14  5999		       44		      .byte.b	$40+(.LUM1/256)
     15  599a		       26		      .byte.b	$20+(.LUM2/256)
     16  599b		       98		      .byte.b	$90+(.LUM3/256)
     17  599c
     18  599c
     19  599c
     20  599c
     21  599c
     22  599c				   .LUM1      SET	.LUM1 + .STEP1
     23  599c				   .LUM2      SET	.LUM2 + .STEP2
     24  599c				   .LUM3      SET	.LUM3 + .STEP3
     13  599c					      REPEND
     14  599c		       44		      .byte.b	$40+(.LUM1/256)
     15  599d		       26		      .byte.b	$20+(.LUM2/256)
     16  599e		       98		      .byte.b	$90+(.LUM3/256)
     17  599f
     18  599f
     19  599f
     20  599f
     21  599f
     22  599f				   .LUM1      SET	.LUM1 + .STEP1
     23  599f				   .LUM2      SET	.LUM2 + .STEP2
     24  599f				   .LUM3      SET	.LUM3 + .STEP3
     13  599f					      REPEND
     14  599f		       44		      .byte.b	$40+(.LUM1/256)
     15  59a0		       26		      .byte.b	$20+(.LUM2/256)
     16  59a1		       98		      .byte.b	$90+(.LUM3/256)
     17  59a2
     18  59a2
     19  59a2
     20  59a2
     21  59a2
     22  59a2				   .LUM1      SET	.LUM1 + .STEP1
     23  59a2				   .LUM2      SET	.LUM2 + .STEP2
     24  59a2				   .LUM3      SET	.LUM3 + .STEP3
     13  59a2					      REPEND
     14  59a2		       44		      .byte.b	$40+(.LUM1/256)
     15  59a3		       26		      .byte.b	$20+(.LUM2/256)
     16  59a4		       98		      .byte.b	$90+(.LUM3/256)
     17  59a5
     18  59a5
     19  59a5
     20  59a5
     21  59a5
     22  59a5				   .LUM1      SET	.LUM1 + .STEP1
     23  59a5				   .LUM2      SET	.LUM2 + .STEP2
     24  59a5				   .LUM3      SET	.LUM3 + .STEP3
     13  59a5					      REPEND
     14  59a5		       44		      .byte.b	$40+(.LUM1/256)
     15  59a6		       26		      .byte.b	$20+(.LUM2/256)
     16  59a7		       98		      .byte.b	$90+(.LUM3/256)
     17  59a8
     18  59a8
     19  59a8
     20  59a8
     21  59a8
     22  59a8				   .LUM1      SET	.LUM1 + .STEP1
     23  59a8				   .LUM2      SET	.LUM2 + .STEP2
     24  59a8				   .LUM3      SET	.LUM3 + .STEP3
     13  59a8					      REPEND
     14  59a8		       44		      .byte.b	$40+(.LUM1/256)
     15  59a9		       26		      .byte.b	$20+(.LUM2/256)
     16  59aa		       98		      .byte.b	$90+(.LUM3/256)
     17  59ab
     18  59ab
     19  59ab
     20  59ab
     21  59ab
     22  59ab				   .LUM1      SET	.LUM1 + .STEP1
     23  59ab				   .LUM2      SET	.LUM2 + .STEP2
     24  59ab				   .LUM3      SET	.LUM3 + .STEP3
     13  59ab					      REPEND
     14  59ab		       44		      .byte.b	$40+(.LUM1/256)
     15  59ac		       26		      .byte.b	$20+(.LUM2/256)
     16  59ad		       98		      .byte.b	$90+(.LUM3/256)
     17  59ae
     18  59ae
     19  59ae
     20  59ae
     21  59ae
     22  59ae				   .LUM1      SET	.LUM1 + .STEP1
     23  59ae				   .LUM2      SET	.LUM2 + .STEP2
     24  59ae				   .LUM3      SET	.LUM3 + .STEP3
     13  59ae					      REPEND
     14  59ae		       44		      .byte.b	$40+(.LUM1/256)
     15  59af		       26		      .byte.b	$20+(.LUM2/256)
     16  59b0		       98		      .byte.b	$90+(.LUM3/256)
     17  59b1
     18  59b1
     19  59b1
     20  59b1
     21  59b1
     22  59b1				   .LUM1      SET	.LUM1 + .STEP1
     23  59b1				   .LUM2      SET	.LUM2 + .STEP2
     24  59b1				   .LUM3      SET	.LUM3 + .STEP3
     13  59b1					      REPEND
     14  59b1		       44		      .byte.b	$40+(.LUM1/256)
     15  59b2		       26		      .byte.b	$20+(.LUM2/256)
     16  59b3		       98		      .byte.b	$90+(.LUM3/256)
     17  59b4
     18  59b4
     19  59b4
     20  59b4
     21  59b4
     22  59b4				   .LUM1      SET	.LUM1 + .STEP1
     23  59b4				   .LUM2      SET	.LUM2 + .STEP2
     24  59b4				   .LUM3      SET	.LUM3 + .STEP3
     13  59b4					      REPEND
     14  59b4		       44		      .byte.b	$40+(.LUM1/256)
     15  59b5		       26		      .byte.b	$20+(.LUM2/256)
     16  59b6		       98		      .byte.b	$90+(.LUM3/256)
     17  59b7
     18  59b7
     19  59b7
     20  59b7
     21  59b7
     22  59b7				   .LUM1      SET	.LUM1 + .STEP1
     23  59b7				   .LUM2      SET	.LUM2 + .STEP2
     24  59b7				   .LUM3      SET	.LUM3 + .STEP3
     13  59b7					      REPEND
     14  59b7		       44		      .byte.b	$40+(.LUM1/256)
     15  59b8		       26		      .byte.b	$20+(.LUM2/256)
     16  59b9		       98		      .byte.b	$90+(.LUM3/256)
     17  59ba
     18  59ba
     19  59ba
     20  59ba
     21  59ba
     22  59ba				   .LUM1      SET	.LUM1 + .STEP1
     23  59ba				   .LUM2      SET	.LUM2 + .STEP2
     24  59ba				   .LUM3      SET	.LUM3 + .STEP3
     13  59ba					      REPEND
     14  59ba		       44		      .byte.b	$40+(.LUM1/256)
     15  59bb		       26		      .byte.b	$20+(.LUM2/256)
     16  59bc		       98		      .byte.b	$90+(.LUM3/256)
     17  59bd
     18  59bd
     19  59bd
     20  59bd
     21  59bd
     22  59bd				   .LUM1      SET	.LUM1 + .STEP1
     23  59bd				   .LUM2      SET	.LUM2 + .STEP2
     24  59bd				   .LUM3      SET	.LUM3 + .STEP3
     13  59bd					      REPEND
     14  59bd		       44		      .byte.b	$40+(.LUM1/256)
     15  59be		       26		      .byte.b	$20+(.LUM2/256)
     16  59bf		       98		      .byte.b	$90+(.LUM3/256)
     17  59c0
     18  59c0
     19  59c0
     20  59c0
     21  59c0
     22  59c0				   .LUM1      SET	.LUM1 + .STEP1
     23  59c0				   .LUM2      SET	.LUM2 + .STEP2
     24  59c0				   .LUM3      SET	.LUM3 + .STEP3
     13  59c0					      REPEND
     14  59c0		       44		      .byte.b	$40+(.LUM1/256)
     15  59c1		       26		      .byte.b	$20+(.LUM2/256)
     16  59c2		       98		      .byte.b	$90+(.LUM3/256)
     17  59c3
     18  59c3
     19  59c3
     20  59c3
     21  59c3
     22  59c3				   .LUM1      SET	.LUM1 + .STEP1
     23  59c3				   .LUM2      SET	.LUM2 + .STEP2
     24  59c3				   .LUM3      SET	.LUM3 + .STEP3
     13  59c3					      REPEND
     14  59c3		       44		      .byte.b	$40+(.LUM1/256)
     15  59c4		       26		      .byte.b	$20+(.LUM2/256)
     16  59c5		       98		      .byte.b	$90+(.LUM3/256)
     17  59c6
     18  59c6
     19  59c6
     20  59c6
     21  59c6
     22  59c6				   .LUM1      SET	.LUM1 + .STEP1
     23  59c6				   .LUM2      SET	.LUM2 + .STEP2
     24  59c6				   .LUM3      SET	.LUM3 + .STEP3
     13  59c6					      REPEND
     14  59c6		       44		      .byte.b	$40+(.LUM1/256)
     15  59c7		       26		      .byte.b	$20+(.LUM2/256)
     16  59c8		       98		      .byte.b	$90+(.LUM3/256)
     17  59c9
     18  59c9
     19  59c9
     20  59c9
     21  59c9
     22  59c9				   .LUM1      SET	.LUM1 + .STEP1
     23  59c9				   .LUM2      SET	.LUM2 + .STEP2
     24  59c9				   .LUM3      SET	.LUM3 + .STEP3
     13  59c9					      REPEND
     14  59c9		       44		      .byte.b	$40+(.LUM1/256)
     15  59ca		       26		      .byte.b	$20+(.LUM2/256)
     16  59cb		       98		      .byte.b	$90+(.LUM3/256)
     17  59cc
     18  59cc
     19  59cc
     20  59cc
     21  59cc
     22  59cc				   .LUM1      SET	.LUM1 + .STEP1
     23  59cc				   .LUM2      SET	.LUM2 + .STEP2
     24  59cc				   .LUM3      SET	.LUM3 + .STEP3
     13  59cc					      REPEND
     14  59cc		       44		      .byte.b	$40+(.LUM1/256)
     15  59cd		       26		      .byte.b	$20+(.LUM2/256)
     16  59ce		       98		      .byte.b	$90+(.LUM3/256)
     17  59cf
     18  59cf
     19  59cf
     20  59cf
     21  59cf
     22  59cf				   .LUM1      SET	.LUM1 + .STEP1
     23  59cf				   .LUM2      SET	.LUM2 + .STEP2
     24  59cf				   .LUM3      SET	.LUM3 + .STEP3
     13  59cf					      REPEND
     14  59cf		       44		      .byte.b	$40+(.LUM1/256)
     15  59d0		       26		      .byte.b	$20+(.LUM2/256)
     16  59d1		       98		      .byte.b	$90+(.LUM3/256)
     17  59d2
     18  59d2
     19  59d2
     20  59d2
     21  59d2
     22  59d2				   .LUM1      SET	.LUM1 + .STEP1
     23  59d2				   .LUM2      SET	.LUM2 + .STEP2
     24  59d2				   .LUM3      SET	.LUM3 + .STEP3
     13  59d2					      REPEND
     14  59d2		       44		      .byte.b	$40+(.LUM1/256)
     15  59d3		       26		      .byte.b	$20+(.LUM2/256)
     16  59d4		       98		      .byte.b	$90+(.LUM3/256)
     17  59d5
     18  59d5
     19  59d5
     20  59d5
     21  59d5
     22  59d5				   .LUM1      SET	.LUM1 + .STEP1
     23  59d5				   .LUM2      SET	.LUM2 + .STEP2
     24  59d5				   .LUM3      SET	.LUM3 + .STEP3
     13  59d5					      REPEND
     14  59d5		       44		      .byte.b	$40+(.LUM1/256)
     15  59d6		       26		      .byte.b	$20+(.LUM2/256)
     16  59d7		       98		      .byte.b	$90+(.LUM3/256)
     17  59d8
     18  59d8
     19  59d8
     20  59d8
     21  59d8
     22  59d8				   .LUM1      SET	.LUM1 + .STEP1
     23  59d8				   .LUM2      SET	.LUM2 + .STEP2
     24  59d8				   .LUM3      SET	.LUM3 + .STEP3
     25  59d8					      REPEND
    254  59d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  59d8
    256  59d8							;    ECHO "PAL LUMS"
    257  59d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  59d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  59d8
      2  59d8
      3  59d8
      4  59d8
      5  59d8				   .LUM1      SET	$6*256
      6  59d8				   .LUM2      SET	$4*256
      7  59d8				   .LUM3      SET	$8*256
      8  59d8
      9  59d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  59d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  59d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  59d8
     13  59d8					      REPEAT	72
     14  59d8		       66		      .byte.b	$60+(.LUM1/256)
     15  59d9		       84		      .byte.b	$80+(.LUM2/256)
     16  59da		       18		      .byte.b	$10+(.LUM3/256)
     17  59db
     18  59db
     19  59db
     20  59db
     21  59db
     22  59db				   .LUM1      SET	.LUM1 + .STEP1
     23  59db				   .LUM2      SET	.LUM2 + .STEP2
     24  59db				   .LUM3      SET	.LUM3 + .STEP3
     13  59db					      REPEND
     14  59db		       66		      .byte.b	$60+(.LUM1/256)
     15  59dc		       84		      .byte.b	$80+(.LUM2/256)
     16  59dd		       18		      .byte.b	$10+(.LUM3/256)
     17  59de
     18  59de
     19  59de
     20  59de
     21  59de
     22  59de				   .LUM1      SET	.LUM1 + .STEP1
     23  59de				   .LUM2      SET	.LUM2 + .STEP2
     24  59de				   .LUM3      SET	.LUM3 + .STEP3
     13  59de					      REPEND
     14  59de		       66		      .byte.b	$60+(.LUM1/256)
     15  59df		       84		      .byte.b	$80+(.LUM2/256)
     16  59e0		       18		      .byte.b	$10+(.LUM3/256)
     17  59e1
     18  59e1
     19  59e1
     20  59e1
     21  59e1
     22  59e1				   .LUM1      SET	.LUM1 + .STEP1
     23  59e1				   .LUM2      SET	.LUM2 + .STEP2
     24  59e1				   .LUM3      SET	.LUM3 + .STEP3
     13  59e1					      REPEND
     14  59e1		       66		      .byte.b	$60+(.LUM1/256)
     15  59e2		       84		      .byte.b	$80+(.LUM2/256)
     16  59e3		       18		      .byte.b	$10+(.LUM3/256)
     17  59e4
     18  59e4
     19  59e4
     20  59e4
     21  59e4
     22  59e4				   .LUM1      SET	.LUM1 + .STEP1
     23  59e4				   .LUM2      SET	.LUM2 + .STEP2
     24  59e4				   .LUM3      SET	.LUM3 + .STEP3
     13  59e4					      REPEND
     14  59e4		       66		      .byte.b	$60+(.LUM1/256)
     15  59e5		       84		      .byte.b	$80+(.LUM2/256)
     16  59e6		       18		      .byte.b	$10+(.LUM3/256)
     17  59e7
     18  59e7
     19  59e7
     20  59e7
     21  59e7
     22  59e7				   .LUM1      SET	.LUM1 + .STEP1
     23  59e7				   .LUM2      SET	.LUM2 + .STEP2
     24  59e7				   .LUM3      SET	.LUM3 + .STEP3
     13  59e7					      REPEND
     14  59e7		       66		      .byte.b	$60+(.LUM1/256)
     15  59e8		       84		      .byte.b	$80+(.LUM2/256)
     16  59e9		       18		      .byte.b	$10+(.LUM3/256)
     17  59ea
     18  59ea
     19  59ea
     20  59ea
     21  59ea
     22  59ea				   .LUM1      SET	.LUM1 + .STEP1
     23  59ea				   .LUM2      SET	.LUM2 + .STEP2
     24  59ea				   .LUM3      SET	.LUM3 + .STEP3
     13  59ea					      REPEND
     14  59ea		       66		      .byte.b	$60+(.LUM1/256)
     15  59eb		       84		      .byte.b	$80+(.LUM2/256)
     16  59ec		       18		      .byte.b	$10+(.LUM3/256)
     17  59ed
     18  59ed
     19  59ed
     20  59ed
     21  59ed
     22  59ed				   .LUM1      SET	.LUM1 + .STEP1
     23  59ed				   .LUM2      SET	.LUM2 + .STEP2
     24  59ed				   .LUM3      SET	.LUM3 + .STEP3
     13  59ed					      REPEND
     14  59ed		       66		      .byte.b	$60+(.LUM1/256)
     15  59ee		       84		      .byte.b	$80+(.LUM2/256)
     16  59ef		       18		      .byte.b	$10+(.LUM3/256)
     17  59f0
     18  59f0
     19  59f0
     20  59f0
     21  59f0
     22  59f0				   .LUM1      SET	.LUM1 + .STEP1
     23  59f0				   .LUM2      SET	.LUM2 + .STEP2
     24  59f0				   .LUM3      SET	.LUM3 + .STEP3
     13  59f0					      REPEND
     14  59f0		       66		      .byte.b	$60+(.LUM1/256)
     15  59f1		       84		      .byte.b	$80+(.LUM2/256)
     16  59f2		       18		      .byte.b	$10+(.LUM3/256)
     17  59f3
     18  59f3
     19  59f3
     20  59f3
     21  59f3
     22  59f3				   .LUM1      SET	.LUM1 + .STEP1
     23  59f3				   .LUM2      SET	.LUM2 + .STEP2
     24  59f3				   .LUM3      SET	.LUM3 + .STEP3
     13  59f3					      REPEND
     14  59f3		       66		      .byte.b	$60+(.LUM1/256)
     15  59f4		       84		      .byte.b	$80+(.LUM2/256)
     16  59f5		       18		      .byte.b	$10+(.LUM3/256)
     17  59f6
     18  59f6
     19  59f6
     20  59f6
     21  59f6
     22  59f6				   .LUM1      SET	.LUM1 + .STEP1
     23  59f6				   .LUM2      SET	.LUM2 + .STEP2
     24  59f6				   .LUM3      SET	.LUM3 + .STEP3
     13  59f6					      REPEND
     14  59f6		       66		      .byte.b	$60+(.LUM1/256)
     15  59f7		       84		      .byte.b	$80+(.LUM2/256)
     16  59f8		       18		      .byte.b	$10+(.LUM3/256)
     17  59f9
     18  59f9
     19  59f9
     20  59f9
     21  59f9
     22  59f9				   .LUM1      SET	.LUM1 + .STEP1
     23  59f9				   .LUM2      SET	.LUM2 + .STEP2
     24  59f9				   .LUM3      SET	.LUM3 + .STEP3
     13  59f9					      REPEND
     14  59f9		       66		      .byte.b	$60+(.LUM1/256)
     15  59fa		       84		      .byte.b	$80+(.LUM2/256)
     16  59fb		       18		      .byte.b	$10+(.LUM3/256)
     17  59fc
     18  59fc
     19  59fc
     20  59fc
     21  59fc
     22  59fc				   .LUM1      SET	.LUM1 + .STEP1
     23  59fc				   .LUM2      SET	.LUM2 + .STEP2
     24  59fc				   .LUM3      SET	.LUM3 + .STEP3
     13  59fc					      REPEND
     14  59fc		       66		      .byte.b	$60+(.LUM1/256)
     15  59fd		       84		      .byte.b	$80+(.LUM2/256)
     16  59fe		       18		      .byte.b	$10+(.LUM3/256)
     17  59ff
     18  59ff
     19  59ff
     20  59ff
     21  59ff
     22  59ff				   .LUM1      SET	.LUM1 + .STEP1
     23  59ff				   .LUM2      SET	.LUM2 + .STEP2
     24  59ff				   .LUM3      SET	.LUM3 + .STEP3
     13  59ff					      REPEND
     14  59ff		       66		      .byte.b	$60+(.LUM1/256)
     15  5a00		       84		      .byte.b	$80+(.LUM2/256)
     16  5a01		       18		      .byte.b	$10+(.LUM3/256)
     17  5a02
     18  5a02
     19  5a02
     20  5a02
     21  5a02
     22  5a02				   .LUM1      SET	.LUM1 + .STEP1
     23  5a02				   .LUM2      SET	.LUM2 + .STEP2
     24  5a02				   .LUM3      SET	.LUM3 + .STEP3
     13  5a02					      REPEND
     14  5a02		       66		      .byte.b	$60+(.LUM1/256)
     15  5a03		       84		      .byte.b	$80+(.LUM2/256)
     16  5a04		       18		      .byte.b	$10+(.LUM3/256)
     17  5a05
     18  5a05
     19  5a05
     20  5a05
     21  5a05
     22  5a05				   .LUM1      SET	.LUM1 + .STEP1
     23  5a05				   .LUM2      SET	.LUM2 + .STEP2
     24  5a05				   .LUM3      SET	.LUM3 + .STEP3
     13  5a05					      REPEND
     14  5a05		       66		      .byte.b	$60+(.LUM1/256)
     15  5a06		       84		      .byte.b	$80+(.LUM2/256)
     16  5a07		       18		      .byte.b	$10+(.LUM3/256)
     17  5a08
     18  5a08
     19  5a08
     20  5a08
     21  5a08
     22  5a08				   .LUM1      SET	.LUM1 + .STEP1
     23  5a08				   .LUM2      SET	.LUM2 + .STEP2
     24  5a08				   .LUM3      SET	.LUM3 + .STEP3
     13  5a08					      REPEND
     14  5a08		       66		      .byte.b	$60+(.LUM1/256)
     15  5a09		       84		      .byte.b	$80+(.LUM2/256)
     16  5a0a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a0b
     18  5a0b
     19  5a0b
     20  5a0b
     21  5a0b
     22  5a0b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a0b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a0b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a0b					      REPEND
     14  5a0b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a0c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a0d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a0e
     18  5a0e
     19  5a0e
     20  5a0e
     21  5a0e
     22  5a0e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a0e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a0e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a0e					      REPEND
     14  5a0e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a0f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a10		       18		      .byte.b	$10+(.LUM3/256)
     17  5a11
     18  5a11
     19  5a11
     20  5a11
     21  5a11
     22  5a11				   .LUM1      SET	.LUM1 + .STEP1
     23  5a11				   .LUM2      SET	.LUM2 + .STEP2
     24  5a11				   .LUM3      SET	.LUM3 + .STEP3
     13  5a11					      REPEND
     14  5a11		       66		      .byte.b	$60+(.LUM1/256)
     15  5a12		       84		      .byte.b	$80+(.LUM2/256)
     16  5a13		       18		      .byte.b	$10+(.LUM3/256)
     17  5a14
     18  5a14
     19  5a14
     20  5a14
     21  5a14
     22  5a14				   .LUM1      SET	.LUM1 + .STEP1
     23  5a14				   .LUM2      SET	.LUM2 + .STEP2
     24  5a14				   .LUM3      SET	.LUM3 + .STEP3
     13  5a14					      REPEND
     14  5a14		       66		      .byte.b	$60+(.LUM1/256)
     15  5a15		       84		      .byte.b	$80+(.LUM2/256)
     16  5a16		       18		      .byte.b	$10+(.LUM3/256)
     17  5a17
     18  5a17
     19  5a17
     20  5a17
     21  5a17
     22  5a17				   .LUM1      SET	.LUM1 + .STEP1
     23  5a17				   .LUM2      SET	.LUM2 + .STEP2
     24  5a17				   .LUM3      SET	.LUM3 + .STEP3
     13  5a17					      REPEND
     14  5a17		       66		      .byte.b	$60+(.LUM1/256)
     15  5a18		       84		      .byte.b	$80+(.LUM2/256)
     16  5a19		       18		      .byte.b	$10+(.LUM3/256)
     17  5a1a
     18  5a1a
     19  5a1a
     20  5a1a
     21  5a1a
     22  5a1a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a1a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a1a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a1a					      REPEND
     14  5a1a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a1b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a1c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a1d
     18  5a1d
     19  5a1d
     20  5a1d
     21  5a1d
     22  5a1d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a1d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a1d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a1d					      REPEND
     14  5a1d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a1e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a1f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a20
     18  5a20
     19  5a20
     20  5a20
     21  5a20
     22  5a20				   .LUM1      SET	.LUM1 + .STEP1
     23  5a20				   .LUM2      SET	.LUM2 + .STEP2
     24  5a20				   .LUM3      SET	.LUM3 + .STEP3
     13  5a20					      REPEND
     14  5a20		       66		      .byte.b	$60+(.LUM1/256)
     15  5a21		       84		      .byte.b	$80+(.LUM2/256)
     16  5a22		       18		      .byte.b	$10+(.LUM3/256)
     17  5a23
     18  5a23
     19  5a23
     20  5a23
     21  5a23
     22  5a23				   .LUM1      SET	.LUM1 + .STEP1
     23  5a23				   .LUM2      SET	.LUM2 + .STEP2
     24  5a23				   .LUM3      SET	.LUM3 + .STEP3
     13  5a23					      REPEND
     14  5a23		       66		      .byte.b	$60+(.LUM1/256)
     15  5a24		       84		      .byte.b	$80+(.LUM2/256)
     16  5a25		       18		      .byte.b	$10+(.LUM3/256)
     17  5a26
     18  5a26
     19  5a26
     20  5a26
     21  5a26
     22  5a26				   .LUM1      SET	.LUM1 + .STEP1
     23  5a26				   .LUM2      SET	.LUM2 + .STEP2
     24  5a26				   .LUM3      SET	.LUM3 + .STEP3
     13  5a26					      REPEND
     14  5a26		       66		      .byte.b	$60+(.LUM1/256)
     15  5a27		       84		      .byte.b	$80+(.LUM2/256)
     16  5a28		       18		      .byte.b	$10+(.LUM3/256)
     17  5a29
     18  5a29
     19  5a29
     20  5a29
     21  5a29
     22  5a29				   .LUM1      SET	.LUM1 + .STEP1
     23  5a29				   .LUM2      SET	.LUM2 + .STEP2
     24  5a29				   .LUM3      SET	.LUM3 + .STEP3
     13  5a29					      REPEND
     14  5a29		       66		      .byte.b	$60+(.LUM1/256)
     15  5a2a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a2b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a2c
     18  5a2c
     19  5a2c
     20  5a2c
     21  5a2c
     22  5a2c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a2c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a2c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a2c					      REPEND
     14  5a2c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a2d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a2e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a2f
     18  5a2f
     19  5a2f
     20  5a2f
     21  5a2f
     22  5a2f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a2f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a2f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a2f					      REPEND
     14  5a2f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a30		       84		      .byte.b	$80+(.LUM2/256)
     16  5a31		       18		      .byte.b	$10+(.LUM3/256)
     17  5a32
     18  5a32
     19  5a32
     20  5a32
     21  5a32
     22  5a32				   .LUM1      SET	.LUM1 + .STEP1
     23  5a32				   .LUM2      SET	.LUM2 + .STEP2
     24  5a32				   .LUM3      SET	.LUM3 + .STEP3
     13  5a32					      REPEND
     14  5a32		       66		      .byte.b	$60+(.LUM1/256)
     15  5a33		       84		      .byte.b	$80+(.LUM2/256)
     16  5a34		       18		      .byte.b	$10+(.LUM3/256)
     17  5a35
     18  5a35
     19  5a35
     20  5a35
     21  5a35
     22  5a35				   .LUM1      SET	.LUM1 + .STEP1
     23  5a35				   .LUM2      SET	.LUM2 + .STEP2
     24  5a35				   .LUM3      SET	.LUM3 + .STEP3
     13  5a35					      REPEND
     14  5a35		       66		      .byte.b	$60+(.LUM1/256)
     15  5a36		       84		      .byte.b	$80+(.LUM2/256)
     16  5a37		       18		      .byte.b	$10+(.LUM3/256)
     17  5a38
     18  5a38
     19  5a38
     20  5a38
     21  5a38
     22  5a38				   .LUM1      SET	.LUM1 + .STEP1
     23  5a38				   .LUM2      SET	.LUM2 + .STEP2
     24  5a38				   .LUM3      SET	.LUM3 + .STEP3
     13  5a38					      REPEND
     14  5a38		       66		      .byte.b	$60+(.LUM1/256)
     15  5a39		       84		      .byte.b	$80+(.LUM2/256)
     16  5a3a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a3b
     18  5a3b
     19  5a3b
     20  5a3b
     21  5a3b
     22  5a3b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a3b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a3b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a3b					      REPEND
     14  5a3b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a3c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a3d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a3e
     18  5a3e
     19  5a3e
     20  5a3e
     21  5a3e
     22  5a3e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a3e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a3e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a3e					      REPEND
     14  5a3e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a3f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a40		       18		      .byte.b	$10+(.LUM3/256)
     17  5a41
     18  5a41
     19  5a41
     20  5a41
     21  5a41
     22  5a41				   .LUM1      SET	.LUM1 + .STEP1
     23  5a41				   .LUM2      SET	.LUM2 + .STEP2
     24  5a41				   .LUM3      SET	.LUM3 + .STEP3
     13  5a41					      REPEND
     14  5a41		       66		      .byte.b	$60+(.LUM1/256)
     15  5a42		       84		      .byte.b	$80+(.LUM2/256)
     16  5a43		       18		      .byte.b	$10+(.LUM3/256)
     17  5a44
     18  5a44
     19  5a44
     20  5a44
     21  5a44
     22  5a44				   .LUM1      SET	.LUM1 + .STEP1
     23  5a44				   .LUM2      SET	.LUM2 + .STEP2
     24  5a44				   .LUM3      SET	.LUM3 + .STEP3
     13  5a44					      REPEND
     14  5a44		       66		      .byte.b	$60+(.LUM1/256)
     15  5a45		       84		      .byte.b	$80+(.LUM2/256)
     16  5a46		       18		      .byte.b	$10+(.LUM3/256)
     17  5a47
     18  5a47
     19  5a47
     20  5a47
     21  5a47
     22  5a47				   .LUM1      SET	.LUM1 + .STEP1
     23  5a47				   .LUM2      SET	.LUM2 + .STEP2
     24  5a47				   .LUM3      SET	.LUM3 + .STEP3
     13  5a47					      REPEND
     14  5a47		       66		      .byte.b	$60+(.LUM1/256)
     15  5a48		       84		      .byte.b	$80+(.LUM2/256)
     16  5a49		       18		      .byte.b	$10+(.LUM3/256)
     17  5a4a
     18  5a4a
     19  5a4a
     20  5a4a
     21  5a4a
     22  5a4a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a4a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a4a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a4a					      REPEND
     14  5a4a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a4b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a4c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a4d
     18  5a4d
     19  5a4d
     20  5a4d
     21  5a4d
     22  5a4d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a4d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a4d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a4d					      REPEND
     14  5a4d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a4e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a4f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a50
     18  5a50
     19  5a50
     20  5a50
     21  5a50
     22  5a50				   .LUM1      SET	.LUM1 + .STEP1
     23  5a50				   .LUM2      SET	.LUM2 + .STEP2
     24  5a50				   .LUM3      SET	.LUM3 + .STEP3
     13  5a50					      REPEND
     14  5a50		       66		      .byte.b	$60+(.LUM1/256)
     15  5a51		       84		      .byte.b	$80+(.LUM2/256)
     16  5a52		       18		      .byte.b	$10+(.LUM3/256)
     17  5a53
     18  5a53
     19  5a53
     20  5a53
     21  5a53
     22  5a53				   .LUM1      SET	.LUM1 + .STEP1
     23  5a53				   .LUM2      SET	.LUM2 + .STEP2
     24  5a53				   .LUM3      SET	.LUM3 + .STEP3
     13  5a53					      REPEND
     14  5a53		       66		      .byte.b	$60+(.LUM1/256)
     15  5a54		       84		      .byte.b	$80+(.LUM2/256)
     16  5a55		       18		      .byte.b	$10+(.LUM3/256)
     17  5a56
     18  5a56
     19  5a56
     20  5a56
     21  5a56
     22  5a56				   .LUM1      SET	.LUM1 + .STEP1
     23  5a56				   .LUM2      SET	.LUM2 + .STEP2
     24  5a56				   .LUM3      SET	.LUM3 + .STEP3
     13  5a56					      REPEND
     14  5a56		       66		      .byte.b	$60+(.LUM1/256)
     15  5a57		       84		      .byte.b	$80+(.LUM2/256)
     16  5a58		       18		      .byte.b	$10+(.LUM3/256)
     17  5a59
     18  5a59
     19  5a59
     20  5a59
     21  5a59
     22  5a59				   .LUM1      SET	.LUM1 + .STEP1
     23  5a59				   .LUM2      SET	.LUM2 + .STEP2
     24  5a59				   .LUM3      SET	.LUM3 + .STEP3
     13  5a59					      REPEND
     14  5a59		       66		      .byte.b	$60+(.LUM1/256)
     15  5a5a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a5b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a5c
     18  5a5c
     19  5a5c
     20  5a5c
     21  5a5c
     22  5a5c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a5c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a5c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a5c					      REPEND
     14  5a5c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a5d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a5e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a5f
     18  5a5f
     19  5a5f
     20  5a5f
     21  5a5f
     22  5a5f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a5f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a5f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a5f					      REPEND
     14  5a5f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a60		       84		      .byte.b	$80+(.LUM2/256)
     16  5a61		       18		      .byte.b	$10+(.LUM3/256)
     17  5a62
     18  5a62
     19  5a62
     20  5a62
     21  5a62
     22  5a62				   .LUM1      SET	.LUM1 + .STEP1
     23  5a62				   .LUM2      SET	.LUM2 + .STEP2
     24  5a62				   .LUM3      SET	.LUM3 + .STEP3
     13  5a62					      REPEND
     14  5a62		       66		      .byte.b	$60+(.LUM1/256)
     15  5a63		       84		      .byte.b	$80+(.LUM2/256)
     16  5a64		       18		      .byte.b	$10+(.LUM3/256)
     17  5a65
     18  5a65
     19  5a65
     20  5a65
     21  5a65
     22  5a65				   .LUM1      SET	.LUM1 + .STEP1
     23  5a65				   .LUM2      SET	.LUM2 + .STEP2
     24  5a65				   .LUM3      SET	.LUM3 + .STEP3
     13  5a65					      REPEND
     14  5a65		       66		      .byte.b	$60+(.LUM1/256)
     15  5a66		       84		      .byte.b	$80+(.LUM2/256)
     16  5a67		       18		      .byte.b	$10+(.LUM3/256)
     17  5a68
     18  5a68
     19  5a68
     20  5a68
     21  5a68
     22  5a68				   .LUM1      SET	.LUM1 + .STEP1
     23  5a68				   .LUM2      SET	.LUM2 + .STEP2
     24  5a68				   .LUM3      SET	.LUM3 + .STEP3
     13  5a68					      REPEND
     14  5a68		       66		      .byte.b	$60+(.LUM1/256)
     15  5a69		       84		      .byte.b	$80+(.LUM2/256)
     16  5a6a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a6b
     18  5a6b
     19  5a6b
     20  5a6b
     21  5a6b
     22  5a6b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a6b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a6b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a6b					      REPEND
     14  5a6b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a6c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a6d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a6e
     18  5a6e
     19  5a6e
     20  5a6e
     21  5a6e
     22  5a6e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a6e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a6e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a6e					      REPEND
     14  5a6e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a6f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a70		       18		      .byte.b	$10+(.LUM3/256)
     17  5a71
     18  5a71
     19  5a71
     20  5a71
     21  5a71
     22  5a71				   .LUM1      SET	.LUM1 + .STEP1
     23  5a71				   .LUM2      SET	.LUM2 + .STEP2
     24  5a71				   .LUM3      SET	.LUM3 + .STEP3
     13  5a71					      REPEND
     14  5a71		       66		      .byte.b	$60+(.LUM1/256)
     15  5a72		       84		      .byte.b	$80+(.LUM2/256)
     16  5a73		       18		      .byte.b	$10+(.LUM3/256)
     17  5a74
     18  5a74
     19  5a74
     20  5a74
     21  5a74
     22  5a74				   .LUM1      SET	.LUM1 + .STEP1
     23  5a74				   .LUM2      SET	.LUM2 + .STEP2
     24  5a74				   .LUM3      SET	.LUM3 + .STEP3
     13  5a74					      REPEND
     14  5a74		       66		      .byte.b	$60+(.LUM1/256)
     15  5a75		       84		      .byte.b	$80+(.LUM2/256)
     16  5a76		       18		      .byte.b	$10+(.LUM3/256)
     17  5a77
     18  5a77
     19  5a77
     20  5a77
     21  5a77
     22  5a77				   .LUM1      SET	.LUM1 + .STEP1
     23  5a77				   .LUM2      SET	.LUM2 + .STEP2
     24  5a77				   .LUM3      SET	.LUM3 + .STEP3
     13  5a77					      REPEND
     14  5a77		       66		      .byte.b	$60+(.LUM1/256)
     15  5a78		       84		      .byte.b	$80+(.LUM2/256)
     16  5a79		       18		      .byte.b	$10+(.LUM3/256)
     17  5a7a
     18  5a7a
     19  5a7a
     20  5a7a
     21  5a7a
     22  5a7a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a7a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a7a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a7a					      REPEND
     14  5a7a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a7b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a7c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a7d
     18  5a7d
     19  5a7d
     20  5a7d
     21  5a7d
     22  5a7d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a7d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a7d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a7d					      REPEND
     14  5a7d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a7e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a7f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a80
     18  5a80
     19  5a80
     20  5a80
     21  5a80
     22  5a80				   .LUM1      SET	.LUM1 + .STEP1
     23  5a80				   .LUM2      SET	.LUM2 + .STEP2
     24  5a80				   .LUM3      SET	.LUM3 + .STEP3
     13  5a80					      REPEND
     14  5a80		       66		      .byte.b	$60+(.LUM1/256)
     15  5a81		       84		      .byte.b	$80+(.LUM2/256)
     16  5a82		       18		      .byte.b	$10+(.LUM3/256)
     17  5a83
     18  5a83
     19  5a83
     20  5a83
     21  5a83
     22  5a83				   .LUM1      SET	.LUM1 + .STEP1
     23  5a83				   .LUM2      SET	.LUM2 + .STEP2
     24  5a83				   .LUM3      SET	.LUM3 + .STEP3
     13  5a83					      REPEND
     14  5a83		       66		      .byte.b	$60+(.LUM1/256)
     15  5a84		       84		      .byte.b	$80+(.LUM2/256)
     16  5a85		       18		      .byte.b	$10+(.LUM3/256)
     17  5a86
     18  5a86
     19  5a86
     20  5a86
     21  5a86
     22  5a86				   .LUM1      SET	.LUM1 + .STEP1
     23  5a86				   .LUM2      SET	.LUM2 + .STEP2
     24  5a86				   .LUM3      SET	.LUM3 + .STEP3
     13  5a86					      REPEND
     14  5a86		       66		      .byte.b	$60+(.LUM1/256)
     15  5a87		       84		      .byte.b	$80+(.LUM2/256)
     16  5a88		       18		      .byte.b	$10+(.LUM3/256)
     17  5a89
     18  5a89
     19  5a89
     20  5a89
     21  5a89
     22  5a89				   .LUM1      SET	.LUM1 + .STEP1
     23  5a89				   .LUM2      SET	.LUM2 + .STEP2
     24  5a89				   .LUM3      SET	.LUM3 + .STEP3
     13  5a89					      REPEND
     14  5a89		       66		      .byte.b	$60+(.LUM1/256)
     15  5a8a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a8b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a8c
     18  5a8c
     19  5a8c
     20  5a8c
     21  5a8c
     22  5a8c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a8c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a8c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a8c					      REPEND
     14  5a8c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a8d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a8e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a8f
     18  5a8f
     19  5a8f
     20  5a8f
     21  5a8f
     22  5a8f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a8f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a8f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a8f					      REPEND
     14  5a8f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a90		       84		      .byte.b	$80+(.LUM2/256)
     16  5a91		       18		      .byte.b	$10+(.LUM3/256)
     17  5a92
     18  5a92
     19  5a92
     20  5a92
     21  5a92
     22  5a92				   .LUM1      SET	.LUM1 + .STEP1
     23  5a92				   .LUM2      SET	.LUM2 + .STEP2
     24  5a92				   .LUM3      SET	.LUM3 + .STEP3
     13  5a92					      REPEND
     14  5a92		       66		      .byte.b	$60+(.LUM1/256)
     15  5a93		       84		      .byte.b	$80+(.LUM2/256)
     16  5a94		       18		      .byte.b	$10+(.LUM3/256)
     17  5a95
     18  5a95
     19  5a95
     20  5a95
     21  5a95
     22  5a95				   .LUM1      SET	.LUM1 + .STEP1
     23  5a95				   .LUM2      SET	.LUM2 + .STEP2
     24  5a95				   .LUM3      SET	.LUM3 + .STEP3
     13  5a95					      REPEND
     14  5a95		       66		      .byte.b	$60+(.LUM1/256)
     15  5a96		       84		      .byte.b	$80+(.LUM2/256)
     16  5a97		       18		      .byte.b	$10+(.LUM3/256)
     17  5a98
     18  5a98
     19  5a98
     20  5a98
     21  5a98
     22  5a98				   .LUM1      SET	.LUM1 + .STEP1
     23  5a98				   .LUM2      SET	.LUM2 + .STEP2
     24  5a98				   .LUM3      SET	.LUM3 + .STEP3
     13  5a98					      REPEND
     14  5a98		       66		      .byte.b	$60+(.LUM1/256)
     15  5a99		       84		      .byte.b	$80+(.LUM2/256)
     16  5a9a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a9b
     18  5a9b
     19  5a9b
     20  5a9b
     21  5a9b
     22  5a9b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a9b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a9b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a9b					      REPEND
     14  5a9b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a9c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a9d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a9e
     18  5a9e
     19  5a9e
     20  5a9e
     21  5a9e
     22  5a9e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a9e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a9e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a9e					      REPEND
     14  5a9e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a9f		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa0		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa1
     18  5aa1
     19  5aa1
     20  5aa1
     21  5aa1
     22  5aa1				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa1				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa1				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa1					      REPEND
     14  5aa1		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa2		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa3		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa4
     18  5aa4
     19  5aa4
     20  5aa4
     21  5aa4
     22  5aa4				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa4				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa4				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa4					      REPEND
     14  5aa4		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa5		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa6		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa7
     18  5aa7
     19  5aa7
     20  5aa7
     21  5aa7
     22  5aa7				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa7				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa7				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa7					      REPEND
     14  5aa7		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa8		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa9		       18		      .byte.b	$10+(.LUM3/256)
     17  5aaa
     18  5aaa
     19  5aaa
     20  5aaa
     21  5aaa
     22  5aaa				   .LUM1      SET	.LUM1 + .STEP1
     23  5aaa				   .LUM2      SET	.LUM2 + .STEP2
     24  5aaa				   .LUM3      SET	.LUM3 + .STEP3
     13  5aaa					      REPEND
     14  5aaa		       66		      .byte.b	$60+(.LUM1/256)
     15  5aab		       84		      .byte.b	$80+(.LUM2/256)
     16  5aac		       18		      .byte.b	$10+(.LUM3/256)
     17  5aad
     18  5aad
     19  5aad
     20  5aad
     21  5aad
     22  5aad				   .LUM1      SET	.LUM1 + .STEP1
     23  5aad				   .LUM2      SET	.LUM2 + .STEP2
     24  5aad				   .LUM3      SET	.LUM3 + .STEP3
     13  5aad					      REPEND
     14  5aad		       66		      .byte.b	$60+(.LUM1/256)
     15  5aae		       84		      .byte.b	$80+(.LUM2/256)
     16  5aaf		       18		      .byte.b	$10+(.LUM3/256)
     17  5ab0
     18  5ab0
     19  5ab0
     20  5ab0
     21  5ab0
     22  5ab0				   .LUM1      SET	.LUM1 + .STEP1
     23  5ab0				   .LUM2      SET	.LUM2 + .STEP2
     24  5ab0				   .LUM3      SET	.LUM3 + .STEP3
     25  5ab0					      REPEND
    259  5ab0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  5ab0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  5ab0					      include	"titleData.asm"
      1  5ab0				   COL_0
      2  5ab0		       00		      .byte.b	0	;R (71)
      3  5ab1		       00		      .byte.b	0	;G
      4  5ab2		       00		      .byte.b	0	;B
      5  5ab3		       40		      .byte.b	64	;R (70)
      6  5ab4		       40		      .byte.b	64	;G
      7  5ab5		       00		      .byte.b	0	;B
      8  5ab6		       00		      .byte.b	0	;R (69)
      9  5ab7		       00		      .byte.b	0	;G
     10  5ab8		       00		      .byte.b	0	;B
     11  5ab9		       00		      .byte.b	0	;R (68)
     12  5aba		       80		      .byte.b	128	;G
     13  5abb		       00		      .byte.b	0	;B
     14  5abc		       00		      .byte.b	0	;R (67)
     15  5abd		       20		      .byte.b	32	;G
     16  5abe		       00		      .byte.b	0	;B
     17  5abf		       80		      .byte.b	128	;R (66)
     18  5ac0		       80		      .byte.b	128	;G
     19  5ac1		       00		      .byte.b	0	;B
     20  5ac2		       c0		      .byte.b	192	;R (65)
     21  5ac3		       c0		      .byte.b	192	;G
     22  5ac4		       00		      .byte.b	0	;B
     23  5ac5		       40		      .byte.b	64	;R (64)
     24  5ac6		       c0		      .byte.b	192	;G
     25  5ac7		       00		      .byte.b	0	;B
     26  5ac8		       00		      .byte.b	0	;R (63)
     27  5ac9		       a0		      .byte.b	160	;G
     28  5aca		       00		      .byte.b	0	;B
     29  5acb		       10		      .byte.b	16	;R (62)
     30  5acc		       70		      .byte.b	112	;G
     31  5acd		       00		      .byte.b	0	;B
     32  5ace		       00		      .byte.b	0	;R (61)
     33  5acf		       80		      .byte.b	128	;G
     34  5ad0		       40		      .byte.b	64	;B
     35  5ad1		       00		      .byte.b	0	;R (60)
     36  5ad2		       c0		      .byte.b	192	;G
     37  5ad3		       00		      .byte.b	0	;B
     38  5ad4		       00		      .byte.b	0	;R (59)
     39  5ad5		       c0		      .byte.b	192	;G
     40  5ad6		       00		      .byte.b	0	;B
     41  5ad7		       00		      .byte.b	0	;R (58)
     42  5ad8		       40		      .byte.b	64	;G
     43  5ad9		       00		      .byte.b	0	;B
     44  5ada		       00		      .byte.b	0	;R (57)
     45  5adb		       c0		      .byte.b	192	;G
     46  5adc		       00		      .byte.b	0	;B
     47  5add		       00		      .byte.b	0	;R (56)
     48  5ade		       60		      .byte.b	96	;G
     49  5adf		       00		      .byte.b	0	;B
     50  5ae0		       00		      .byte.b	0	;R (55)
     51  5ae1		       80		      .byte.b	128	;G
     52  5ae2		       00		      .byte.b	0	;B
     53  5ae3		       00		      .byte.b	0	;R (54)
     54  5ae4		       40		      .byte.b	64	;G
     55  5ae5		       00		      .byte.b	0	;B
     56  5ae6		       00		      .byte.b	0	;R (53)
     57  5ae7		       80		      .byte.b	128	;G
     58  5ae8		       00		      .byte.b	0	;B
     59  5ae9		       00		      .byte.b	0	;R (52)
     60  5aea		       80		      .byte.b	128	;G
     61  5aeb		       00		      .byte.b	0	;B
     62  5aec		       00		      .byte.b	0	;R (51)
     63  5aed		       10		      .byte.b	16	;G
     64  5aee		       00		      .byte.b	0	;B
     65  5aef		       00		      .byte.b	0	;R (50)
     66  5af0		       00		      .byte.b	0	;G
     67  5af1		       00		      .byte.b	0	;B
     68  5af2		       00		      .byte.b	0	;R (49)
     69  5af3		       00		      .byte.b	0	;G
     70  5af4		       00		      .byte.b	0	;B
     71  5af5		       00		      .byte.b	0	;R (48)
     72  5af6		       00		      .byte.b	0	;G
     73  5af7		       00		      .byte.b	0	;B
     74  5af8		       00		      .byte.b	0	;R (47)
     75  5af9		       00		      .byte.b	0	;G
     76  5afa		       00		      .byte.b	0	;B
     77  5afb		       00		      .byte.b	0	;R (46)
     78  5afc		       40		      .byte.b	64	;G
     79  5afd		       00		      .byte.b	0	;B
     80  5afe		       00		      .byte.b	0	;R (45)
     81  5aff		       00		      .byte.b	0	;G
     82  5b00		       00		      .byte.b	0	;B
     83  5b01		       00		      .byte.b	0	;R (44)
     84  5b02		       00		      .byte.b	0	;G
     85  5b03		       00		      .byte.b	0	;B
     86  5b04		       00		      .byte.b	0	;R (43)
     87  5b05		       00		      .byte.b	0	;G
     88  5b06		       00		      .byte.b	0	;B
     89  5b07		       00		      .byte.b	0	;R (42)
     90  5b08		       40		      .byte.b	64	;G
     91  5b09		       00		      .byte.b	0	;B
     92  5b0a		       00		      .byte.b	0	;R (41)
     93  5b0b		       00		      .byte.b	0	;G
     94  5b0c		       00		      .byte.b	0	;B
     95  5b0d		       00		      .byte.b	0	;R (40)
     96  5b0e		       00		      .byte.b	0	;G
     97  5b0f		       00		      .byte.b	0	;B
     98  5b10		       00		      .byte.b	0	;R (39)
     99  5b11		       20		      .byte.b	32	;G
    100  5b12		       00		      .byte.b	0	;B
    101  5b13		       00		      .byte.b	0	;R (38)
    102  5b14		       00		      .byte.b	0	;G
    103  5b15		       00		      .byte.b	0	;B
    104  5b16		       00		      .byte.b	0	;R (37)
    105  5b17		       10		      .byte.b	16	;G
    106  5b18		       00		      .byte.b	0	;B
    107  5b19		       00		      .byte.b	0	;R (36)
    108  5b1a		       00		      .byte.b	0	;G
    109  5b1b		       00		      .byte.b	0	;B
    110  5b1c		       00		      .byte.b	0	;R (35)
    111  5b1d		       40		      .byte.b	64	;G
    112  5b1e		       00		      .byte.b	0	;B
    113  5b1f		       00		      .byte.b	0	;R (34)
    114  5b20		       20		      .byte.b	32	;G
    115  5b21		       00		      .byte.b	0	;B
    116  5b22		       00		      .byte.b	0	;R (33)
    117  5b23		       00		      .byte.b	0	;G
    118  5b24		       00		      .byte.b	0	;B
    119  5b25		       00		      .byte.b	0	;R (32)
    120  5b26		       00		      .byte.b	0	;G
    121  5b27		       00		      .byte.b	0	;B
    122  5b28		       00		      .byte.b	0	;R (31)
    123  5b29		       20		      .byte.b	32	;G
    124  5b2a		       00		      .byte.b	0	;B
    125  5b2b		       00		      .byte.b	0	;R (30)
    126  5b2c		       00		      .byte.b	0	;G
    127  5b2d		       00		      .byte.b	0	;B
    128  5b2e		       00		      .byte.b	0	;R (29)
    129  5b2f		       80		      .byte.b	128	;G
    130  5b30		       00		      .byte.b	0	;B
    131  5b31		       00		      .byte.b	0	;R (28)
    132  5b32		       00		      .byte.b	0	;G
    133  5b33		       00		      .byte.b	0	;B
    134  5b34		       00		      .byte.b	0	;R (27)
    135  5b35		       20		      .byte.b	32	;G
    136  5b36		       00		      .byte.b	0	;B
    137  5b37		       00		      .byte.b	0	;R (26)
    138  5b38		       00		      .byte.b	0	;G
    139  5b39		       00		      .byte.b	0	;B
    140  5b3a		       00		      .byte.b	0	;R (25)
    141  5b3b		       00		      .byte.b	0	;G
    142  5b3c		       00		      .byte.b	0	;B
    143  5b3d		       00		      .byte.b	0	;R (24)
    144  5b3e		       20		      .byte.b	32	;G
    145  5b3f		       00		      .byte.b	0	;B
    146  5b40		       00		      .byte.b	0	;R (23)
    147  5b41		       00		      .byte.b	0	;G
    148  5b42		       00		      .byte.b	0	;B
    149  5b43		       00		      .byte.b	0	;R (22)
    150  5b44		       00		      .byte.b	0	;G
    151  5b45		       00		      .byte.b	0	;B
    152  5b46		       00		      .byte.b	0	;R (21)
    153  5b47		       20		      .byte.b	32	;G
    154  5b48		       00		      .byte.b	0	;B
    155  5b49		       00		      .byte.b	0	;R (20)
    156  5b4a		       00		      .byte.b	0	;G
    157  5b4b		       00		      .byte.b	0	;B
    158  5b4c		       00		      .byte.b	0	;R (19)
    159  5b4d		       00		      .byte.b	0	;G
    160  5b4e		       00		      .byte.b	0	;B
    161  5b4f		       00		      .byte.b	0	;R (18)
    162  5b50		       00		      .byte.b	0	;G
    163  5b51		       00		      .byte.b	0	;B
    164  5b52		       00		      .byte.b	0	;R (17)
    165  5b53		       80		      .byte.b	128	;G
    166  5b54		       00		      .byte.b	0	;B
    167  5b55		       00		      .byte.b	0	;R (16)
    168  5b56		       00		      .byte.b	0	;G
    169  5b57		       00		      .byte.b	0	;B
    170  5b58		       00		      .byte.b	0	;R (15)
    171  5b59		       10		      .byte.b	16	;G
    172  5b5a		       00		      .byte.b	0	;B
    173  5b5b		       00		      .byte.b	0	;R (14)
    174  5b5c		       00		      .byte.b	0	;G
    175  5b5d		       00		      .byte.b	0	;B
    176  5b5e		       00		      .byte.b	0	;R (13)
    177  5b5f		       00		      .byte.b	0	;G
    178  5b60		       00		      .byte.b	0	;B
    179  5b61		       00		      .byte.b	0	;R (12)
    180  5b62		       80		      .byte.b	128	;G
    181  5b63		       00		      .byte.b	0	;B
    182  5b64		       00		      .byte.b	0	;R (11)
    183  5b65		       00		      .byte.b	0	;G
    184  5b66		       00		      .byte.b	0	;B
    185  5b67		       00		      .byte.b	0	;R (10)
    186  5b68		       00		      .byte.b	0	;G
    187  5b69		       00		      .byte.b	0	;B
    188  5b6a		       00		      .byte.b	0	;R (9)
    189  5b6b		       80		      .byte.b	128	;G
    190  5b6c		       00		      .byte.b	0	;B
    191  5b6d		       00		      .byte.b	0	;R (8)
    192  5b6e		       00		      .byte.b	0	;G
    193  5b6f		       00		      .byte.b	0	;B
    194  5b70		       00		      .byte.b	0	;R (7)
    195  5b71		       20		      .byte.b	32	;G
    196  5b72		       00		      .byte.b	0	;B
    197  5b73		       00		      .byte.b	0	;R (6)
    198  5b74		       00		      .byte.b	0	;G
    199  5b75		       00		      .byte.b	0	;B
    200  5b76		       00		      .byte.b	0	;R (5)
    201  5b77		       10		      .byte.b	16	;G
    202  5b78		       00		      .byte.b	0	;B
    203  5b79		       00		      .byte.b	0	;R (4)
    204  5b7a		       00		      .byte.b	0	;G
    205  5b7b		       00		      .byte.b	0	;B
    206  5b7c		       00		      .byte.b	0	;R (3)
    207  5b7d		       00		      .byte.b	0	;G
    208  5b7e		       00		      .byte.b	0	;B
    209  5b7f		       00		      .byte.b	0	;R (2)
    210  5b80		       40		      .byte.b	64	;G
    211  5b81		       00		      .byte.b	0	;B
    212  5b82		       00		      .byte.b	0	;R (1)
    213  5b83		       00		      .byte.b	0	;G
    214  5b84		       00		      .byte.b	0	;B
    215  5b85		       00		      .byte.b	0	;R (0)
    216  5b86		       00		      .byte.b	0	;G
    217  5b87		       00		      .byte.b	0	;B
    218  5b88				   COL_1
    219  5b88		       80		      .byte.b	128	;R (71)
    220  5b89		       80		      .byte.b	128	;G
    221  5b8a		       00		      .byte.b	0	;B
    222  5b8b		       10		      .byte.b	16	;R (70)
    223  5b8c		       14		      .byte.b	20	;G
    224  5b8d		       00		      .byte.b	0	;B
    225  5b8e		       00		      .byte.b	0	;R (69)
    226  5b8f		       41		      .byte.b	65	;G
    227  5b90		       00		      .byte.b	0	;B
    228  5b91		       00		      .byte.b	0	;R (68)
    229  5b92		       08		      .byte.b	8	;G
    230  5b93		       00		      .byte.b	0	;B
    231  5b94		       20		      .byte.b	32	;R (67)
    232  5b95		       20		      .byte.b	32	;G
    233  5b96		       00		      .byte.b	0	;B
    234  5b97		       63		      .byte.b	99	;R (66)
    235  5b98		       6b		      .byte.b	107	;G
    236  5b99		       00		      .byte.b	0	;B
    237  5b9a		       ff		      .byte.b	255	;R (65)
    238  5b9b		       f5		      .byte.b	245	;G
    239  5b9c		       00		      .byte.b	0	;B
    240  5b9d		       80		      .byte.b	128	;R (64)
    241  5b9e		       fb		      .byte.b	251	;G
    242  5b9f		       04		      .byte.b	4	;B
    243  5ba0		       00		      .byte.b	0	;R (63)
    244  5ba1		       b7		      .byte.b	183	;G
    245  5ba2		       00		      .byte.b	0	;B
    246  5ba3		       00		      .byte.b	0	;R (62)
    247  5ba4		       b5		      .byte.b	181	;G
    248  5ba5		       00		      .byte.b	0	;B
    249  5ba6		       00		      .byte.b	0	;R (61)
    250  5ba7		       ef		      .byte.b	239	;G
    251  5ba8		       10		      .byte.b	16	;B
    252  5ba9		       00		      .byte.b	0	;R (60)
    253  5baa		       bd		      .byte.b	189	;G
    254  5bab		       42		      .byte.b	66	;B
    255  5bac		       00		      .byte.b	0	;R (59)
    256  5bad		       77		      .byte.b	119	;G
    257  5bae		       00		      .byte.b	0	;B
    258  5baf		       00		      .byte.b	0	;R (58)
    259  5bb0		       ee		      .byte.b	238	;G
    260  5bb1		       00		      .byte.b	0	;B
    261  5bb2		       00		      .byte.b	0	;R (57)
    262  5bb3		       9b		      .byte.b	155	;G
    263  5bb4		       00		      .byte.b	0	;B
    264  5bb5		       00		      .byte.b	0	;R (56)
    265  5bb6		       f2		      .byte.b	242	;G
    266  5bb7		       00		      .byte.b	0	;B
    267  5bb8		       00		      .byte.b	0	;R (55)
    268  5bb9		       40		      .byte.b	64	;G
    269  5bba		       00		      .byte.b	0	;B
    270  5bbb		       00		      .byte.b	0	;R (54)
    271  5bbc		       df		      .byte.b	223	;G
    272  5bbd		       00		      .byte.b	0	;B
    273  5bbe		       10		      .byte.b	16	;R (53)
    274  5bbf		       69		      .byte.b	105	;G
    275  5bc0		       10		      .byte.b	16	;B
    276  5bc1		       00		      .byte.b	0	;R (52)
    277  5bc2		       4b		      .byte.b	75	;G
    278  5bc3		       00		      .byte.b	0	;B
    279  5bc4		       00		      .byte.b	0	;R (51)
    280  5bc5		       b0		      .byte.b	176	;G
    281  5bc6		       00		      .byte.b	0	;B
    282  5bc7		       00		      .byte.b	0	;R (50)
    283  5bc8		       a7		      .byte.b	167	;G
    284  5bc9		       00		      .byte.b	0	;B
    285  5bca		       00		      .byte.b	0	;R (49)
    286  5bcb		       7d		      .byte.b	125	;G
    287  5bcc		       02		      .byte.b	2	;B
    288  5bcd		       00		      .byte.b	0	;R (48)
    289  5bce		       db		      .byte.b	219	;G
    290  5bcf		       20		      .byte.b	32	;B
    291  5bd0		       00		      .byte.b	0	;R (47)
    292  5bd1		       6d		      .byte.b	109	;G
    293  5bd2		       00		      .byte.b	0	;B
    294  5bd3		       00		      .byte.b	0	;R (46)
    295  5bd4		       ea		      .byte.b	234	;G
    296  5bd5		       00		      .byte.b	0	;B
    297  5bd6		       00		      .byte.b	0	;R (45)
    298  5bd7		       13		      .byte.b	19	;G
    299  5bd8		       00		      .byte.b	0	;B
    300  5bd9		       00		      .byte.b	0	;R (44)
    301  5bda		       7e		      .byte.b	126	;G
    302  5bdb		       01		      .byte.b	1	;B
    303  5bdc		       22		      .byte.b	34	;R (43)
    304  5bdd		       77		      .byte.b	119	;G
    305  5bde		       08		      .byte.b	8	;B
    306  5bdf		       04		      .byte.b	4	;R (42)
    307  5be0		       5f		      .byte.b	95	;G
    308  5be1		       00		      .byte.b	0	;B
    309  5be2		       00		      .byte.b	0	;R (41)
    310  5be3		       6f		      .byte.b	111	;G
    311  5be4		       00		      .byte.b	0	;B
    312  5be5		       00		      .byte.b	0	;R (40)
    313  5be6		       b5		      .byte.b	181	;G
    314  5be7		       00		      .byte.b	0	;B
    315  5be8		       00		      .byte.b	0	;R (39)
    316  5be9		       5b		      .byte.b	91	;G
    317  5bea		       00		      .byte.b	0	;B
    318  5beb		       00		      .byte.b	0	;R (38)
    319  5bec		       57		      .byte.b	87	;G
    320  5bed		       00		      .byte.b	0	;B
    321  5bee		       20		      .byte.b	32	;R (37)
    322  5bef		       4d		      .byte.b	77	;G
    323  5bf0		       22		      .byte.b	34	;B
    324  5bf1		       00		      .byte.b	0	;R (36)
    325  5bf2		       55		      .byte.b	85	;G
    326  5bf3		       00		      .byte.b	0	;B
    327  5bf4		       01		      .byte.b	1	;R (35)
    328  5bf5		       56		      .byte.b	86	;G
    329  5bf6		       00		      .byte.b	0	;B
    330  5bf7		       02		      .byte.b	2	;R (34)
    331  5bf8		       57		      .byte.b	87	;G
    332  5bf9		       00		      .byte.b	0	;B
    333  5bfa		       00		      .byte.b	0	;R (33)
    334  5bfb		       2a		      .byte.b	42	;G
    335  5bfc		       01		      .byte.b	1	;B
    336  5bfd		       01		      .byte.b	1	;R (32)
    337  5bfe		       ab		      .byte.b	171	;G
    338  5bff		       00		      .byte.b	0	;B
    339  5c00		       22		      .byte.b	34	;R (31)
    340  5c01		       17		      .byte.b	23	;G
    341  5c02		       20		      .byte.b	32	;B
    342  5c03		       00		      .byte.b	0	;R (30)
    343  5c04		       55		      .byte.b	85	;G
    344  5c05		       02		      .byte.b	2	;B
    345  5c06		       22		      .byte.b	34	;R (29)
    346  5c07		       17		      .byte.b	23	;G
    347  5c08		       20		      .byte.b	32	;B
    348  5c09		       00		      .byte.b	0	;R (28)
    349  5c0a		       2b		      .byte.b	43	;G
    350  5c0b		       00		      .byte.b	0	;B
    351  5c0c		       00		      .byte.b	0	;R (27)
    352  5c0d		       95		      .byte.b	149	;G
    353  5c0e		       02		      .byte.b	2	;B
    354  5c0f		       00		      .byte.b	0	;R (26)
    355  5c10		       17		      .byte.b	23	;G
    356  5c11		       00		      .byte.b	0	;B
    357  5c12		       00		      .byte.b	0	;R (25)
    358  5c13		       2d		      .byte.b	45	;G
    359  5c14		       00		      .byte.b	0	;B
    360  5c15		       00		      .byte.b	0	;R (24)
    361  5c16		       b4		      .byte.b	180	;G
    362  5c17		       00		      .byte.b	0	;B
    363  5c18		       00		      .byte.b	0	;R (23)
    364  5c19		       0a		      .byte.b	10	;G
    365  5c1a		       00		      .byte.b	0	;B
    366  5c1b		       10		      .byte.b	16	;R (22)
    367  5c1c		       3c		      .byte.b	60	;G
    368  5c1d		       00		      .byte.b	0	;B
    369  5c1e		       10		      .byte.b	16	;R (21)
    370  5c1f		       98		      .byte.b	152	;G
    371  5c20		       00		      .byte.b	0	;B
    372  5c21		       10		      .byte.b	16	;R (20)
    373  5c22		       1a		      .byte.b	26	;G
    374  5c23		       00		      .byte.b	0	;B
    375  5c24		       00		      .byte.b	0	;R (19)
    376  5c25		       14		      .byte.b	20	;G
    377  5c26		       00		      .byte.b	0	;B
    378  5c27		       00		      .byte.b	0	;R (18)
    379  5c28		       5a		      .byte.b	90	;G
    380  5c29		       00		      .byte.b	0	;B
    381  5c2a		       00		      .byte.b	0	;R (17)
    382  5c2b		       09		      .byte.b	9	;G
    383  5c2c		       00		      .byte.b	0	;B
    384  5c2d		       08		      .byte.b	8	;R (16)
    385  5c2e		       1d		      .byte.b	29	;G
    386  5c2f		       00		      .byte.b	0	;B
    387  5c30		       00		      .byte.b	0	;R (15)
    388  5c31		       1a		      .byte.b	26	;G
    389  5c32		       00		      .byte.b	0	;B
    390  5c33		       20		      .byte.b	32	;R (14)
    391  5c34		       ba		      .byte.b	186	;G
    392  5c35		       00		      .byte.b	0	;B
    393  5c36		       00		      .byte.b	0	;R (13)
    394  5c37		       12		      .byte.b	18	;G
    395  5c38		       00		      .byte.b	0	;B
    396  5c39		       00		      .byte.b	0	;R (12)
    397  5c3a		       1a		      .byte.b	26	;G
    398  5c3b		       00		      .byte.b	0	;B
    399  5c3c		       00		      .byte.b	0	;R (11)
    400  5c3d		       2d		      .byte.b	45	;G
    401  5c3e		       10		      .byte.b	16	;B
    402  5c3f		       10		      .byte.b	16	;R (10)
    403  5c40		       3b		      .byte.b	59	;G
    404  5c41		       00		      .byte.b	0	;B
    405  5c42		       24		      .byte.b	36	;R (9)
    406  5c43		       39		      .byte.b	57	;G
    407  5c44		       04		      .byte.b	4	;B
    408  5c45		       20		      .byte.b	32	;R (8)
    409  5c46		       35		      .byte.b	53	;G
    410  5c47		       00		      .byte.b	0	;B
    411  5c48		       00		      .byte.b	0	;R (7)
    412  5c49		       3d		      .byte.b	61	;G
    413  5c4a		       00		      .byte.b	0	;B
    414  5c4b		       00		      .byte.b	0	;R (6)
    415  5c4c		       32		      .byte.b	50	;G
    416  5c4d		       00		      .byte.b	0	;B
    417  5c4e		       00		      .byte.b	0	;R (5)
    418  5c4f		       98		      .byte.b	152	;G
    419  5c50		       00		      .byte.b	0	;B
    420  5c51		       00		      .byte.b	0	;R (4)
    421  5c52		       12		      .byte.b	18	;G
    422  5c53		       00		      .byte.b	0	;B
    423  5c54		       00		      .byte.b	0	;R (3)
    424  5c55		       20		      .byte.b	32	;G
    425  5c56		       00		      .byte.b	0	;B
    426  5c57		       01		      .byte.b	1	;R (2)
    427  5c58		       49		      .byte.b	73	;G
    428  5c59		       00		      .byte.b	0	;B
    429  5c5a		       20		      .byte.b	32	;R (1)
    430  5c5b		       20		      .byte.b	32	;G
    431  5c5c		       00		      .byte.b	0	;B
    432  5c5d		       00		      .byte.b	0	;R (0)
    433  5c5e		       00		      .byte.b	0	;G
    434  5c5f		       00		      .byte.b	0	;B
    435  5c60				   COL_2
    436  5c60		       14		      .byte.b	20	;R (71)
    437  5c61		       14		      .byte.b	20	;G
    438  5c62		       00		      .byte.b	0	;B
    439  5c63		       40		      .byte.b	64	;R (70)
    440  5c64		       42		      .byte.b	66	;G
    441  5c65		       00		      .byte.b	0	;B
    442  5c66		       a8		      .byte.b	168	;R (69)
    443  5c67		       a8		      .byte.b	168	;G
    444  5c68		       00		      .byte.b	0	;B
    445  5c69		       fd		      .byte.b	253	;R (68)
    446  5c6a		       1d		      .byte.b	29	;G
    447  5c6b		       00		      .byte.b	0	;B
    448  5c6c		       f0		      .byte.b	240	;R (67)
    449  5c6d		       44		      .byte.b	68	;G
    450  5c6e		       08		      .byte.b	8	;B
    451  5c6f		       ff		      .byte.b	255	;R (66)
    452  5c70		       2f		      .byte.b	47	;G
    453  5c71		       00		      .byte.b	0	;B
    454  5c72		       ff		      .byte.b	255	;R (65)
    455  5c73		       0e		      .byte.b	14	;G
    456  5c74		       00		      .byte.b	0	;B
    457  5c75		       f8		      .byte.b	248	;R (64)
    458  5c76		       0f		      .byte.b	15	;G
    459  5c77		       00		      .byte.b	0	;B
    460  5c78		       f8		      .byte.b	248	;R (63)
    461  5c79		       2e		      .byte.b	46	;G
    462  5c7a		       00		      .byte.b	0	;B
    463  5c7b		       f8		      .byte.b	248	;R (62)
    464  5c7c		       1e		      .byte.b	30	;G
    465  5c7d		       01		      .byte.b	1	;B
    466  5c7e		       74		      .byte.b	116	;R (61)
    467  5c7f		       23		      .byte.b	35	;G
    468  5c80		       88		      .byte.b	136	;B
    469  5c81		       fc		      .byte.b	252	;R (60)
    470  5c82		       0f		      .byte.b	15	;G
    471  5c83		       00		      .byte.b	0	;B
    472  5c84		       f8		      .byte.b	248	;R (59)
    473  5c85		       06		      .byte.b	6	;G
    474  5c86		       01		      .byte.b	1	;B
    475  5c87		       f8		      .byte.b	248	;R (58)
    476  5c88		       8f		      .byte.b	143	;G
    477  5c89		       00		      .byte.b	0	;B
    478  5c8a		       e8		      .byte.b	232	;R (57)
    479  5c8b		       0e		      .byte.b	14	;G
    480  5c8c		       10		      .byte.b	16	;B
    481  5c8d		       e0		      .byte.b	224	;R (56)
    482  5c8e		       97		      .byte.b	151	;G
    483  5c8f		       00		      .byte.b	0	;B
    484  5c90		       f0		      .byte.b	240	;R (55)
    485  5c91		       3a		      .byte.b	58	;G
    486  5c92		       00		      .byte.b	0	;B
    487  5c93		       e0		      .byte.b	224	;R (54)
    488  5c94		       bb		      .byte.b	187	;G
    489  5c95		       04		      .byte.b	4	;B
    490  5c96		       e0		      .byte.b	224	;R (53)
    491  5c97		       3e		      .byte.b	62	;G
    492  5c98		       00		      .byte.b	0	;B
    493  5c99		       c0		      .byte.b	192	;R (52)
    494  5c9a		       2a		      .byte.b	42	;G
    495  5c9b		       00		      .byte.b	0	;B
    496  5c9c		       80		      .byte.b	128	;R (51)
    497  5c9d		       3f		      .byte.b	63	;G
    498  5c9e		       40		      .byte.b	64	;B
    499  5c9f		       f5		      .byte.b	245	;R (50)
    500  5ca0		       3f		      .byte.b	63	;G
    501  5ca1		       00		      .byte.b	0	;B
    502  5ca2		       e8		      .byte.b	232	;R (49)
    503  5ca3		       7f		      .byte.b	127	;G
    504  5ca4		       00		      .byte.b	0	;B
    505  5ca5		       e0		      .byte.b	224	;R (48)
    506  5ca6		       7a		      .byte.b	122	;G
    507  5ca7		       04		      .byte.b	4	;B
    508  5ca8		       c0		      .byte.b	192	;R (47)
    509  5ca9		       5f		      .byte.b	95	;G
    510  5caa		       00		      .byte.b	0	;B
    511  5cab		       90		      .byte.b	144	;R (46)
    512  5cac		       dd		      .byte.b	221	;G
    513  5cad		       02		      .byte.b	2	;B
    514  5cae		       84		      .byte.b	132	;R (45)
    515  5caf		       9f		      .byte.b	159	;G
    516  5cb0		       00		      .byte.b	0	;B
    517  5cb1		       c4		      .byte.b	196	;R (44)
    518  5cb2		       cf		      .byte.b	207	;G
    519  5cb3		       00		      .byte.b	0	;B
    520  5cb4		       c5		      .byte.b	197	;R (43)
    521  5cb5		       1f		      .byte.b	31	;G
    522  5cb6		       00		      .byte.b	0	;B
    523  5cb7		       d4		      .byte.b	212	;R (42)
    524  5cb8		       9f		      .byte.b	159	;G
    525  5cb9		       20		      .byte.b	32	;B
    526  5cba		       c8		      .byte.b	200	;R (41)
    527  5cbb		       1e		      .byte.b	30	;G
    528  5cbc		       01		      .byte.b	1	;B
    529  5cbd		       c8		      .byte.b	200	;R (40)
    530  5cbe		       5f		      .byte.b	95	;G
    531  5cbf		       00		      .byte.b	0	;B
    532  5cc0		       cd		      .byte.b	205	;R (39)
    533  5cc1		       5e		      .byte.b	94	;G
    534  5cc2		       00		      .byte.b	0	;B
    535  5cc3		       c7		      .byte.b	199	;R (38)
    536  5cc4		       5b		      .byte.b	91	;G
    537  5cc5		       00		      .byte.b	0	;B
    538  5cc6		       8b		      .byte.b	139	;R (37)
    539  5cc7		       1c		      .byte.b	28	;G
    540  5cc8		       00		      .byte.b	0	;B
    541  5cc9		       81		      .byte.b	129	;R (36)
    542  5cca		       9a		      .byte.b	154	;G
    543  5ccb		       04		      .byte.b	4	;B
    544  5ccc		       8e		      .byte.b	142	;R (35)
    545  5ccd		       9d		      .byte.b	157	;G
    546  5cce		       00		      .byte.b	0	;B
    547  5ccf		       2b		      .byte.b	43	;R (34)
    548  5cd0		       36		      .byte.b	54	;G
    549  5cd1		       00		      .byte.b	0	;B
    550  5cd2		       3a		      .byte.b	58	;R (33)
    551  5cd3		       0d		      .byte.b	13	;G
    552  5cd4		       00		      .byte.b	0	;B
    553  5cd5		       3e		      .byte.b	62	;R (32)
    554  5cd6		       85		      .byte.b	133	;G
    555  5cd7		       40		      .byte.b	64	;B
    556  5cd8		       fa		      .byte.b	250	;R (31)
    557  5cd9		       17		      .byte.b	23	;G
    558  5cda		       00		      .byte.b	0	;B
    559  5cdb		       ff		      .byte.b	255	;R (30)
    560  5cdc		       03		      .byte.b	3	;G
    561  5cdd		       00		      .byte.b	0	;B
    562  5cde		       fc		      .byte.b	252	;R (29)
    563  5cdf		       93		      .byte.b	147	;G
    564  5ce0		       00		      .byte.b	0	;B
    565  5ce1		       f7		      .byte.b	247	;R (28)
    566  5ce2		       81		      .byte.b	129	;G
    567  5ce3		       08		      .byte.b	8	;B
    568  5ce4		       ff		      .byte.b	255	;R (27)
    569  5ce5		       03		      .byte.b	3	;G
    570  5ce6		       00		      .byte.b	0	;B
    571  5ce7		       fe		      .byte.b	254	;R (26)
    572  5ce8		       2b		      .byte.b	43	;G
    573  5ce9		       00		      .byte.b	0	;B
    574  5cea		       fe		      .byte.b	254	;R (25)
    575  5ceb		       0a		      .byte.b	10	;G
    576  5cec		       00		      .byte.b	0	;B
    577  5ced		       fc		      .byte.b	252	;R (24)
    578  5cee		       4f		      .byte.b	79	;G
    579  5cef		       00		      .byte.b	0	;B
    580  5cf0		       fc		      .byte.b	252	;R (23)
    581  5cf1		       55		      .byte.b	85	;G
    582  5cf2		       00		      .byte.b	0	;B
    583  5cf3		       f8		      .byte.b	248	;R (22)
    584  5cf4		       45		      .byte.b	69	;G
    585  5cf5		       00		      .byte.b	0	;B
    586  5cf6		       e8		      .byte.b	232	;R (21)
    587  5cf7		       05		      .byte.b	5	;G
    588  5cf8		       10		      .byte.b	16	;B
    589  5cf9		       f8		      .byte.b	248	;R (20)
    590  5cfa		       5b		      .byte.b	91	;G
    591  5cfb		       00		      .byte.b	0	;B
    592  5cfc		       f8		      .byte.b	248	;R (19)
    593  5cfd		       1d		      .byte.b	29	;G
    594  5cfe		       00		      .byte.b	0	;B
    595  5cff		       f0		      .byte.b	240	;R (18)
    596  5d00		       55		      .byte.b	85	;G
    597  5d01		       00		      .byte.b	0	;B
    598  5d02		       f0		      .byte.b	240	;R (17)
    599  5d03		       16		      .byte.b	22	;G
    600  5d04		       00		      .byte.b	0	;B
    601  5d05		       f0		      .byte.b	240	;R (16)
    602  5d06		       b2		      .byte.b	178	;G
    603  5d07		       00		      .byte.b	0	;B
    604  5d08		       e0		      .byte.b	224	;R (15)
    605  5d09		       0e		      .byte.b	14	;G
    606  5d0a		       10		      .byte.b	16	;B
    607  5d0b		       f0		      .byte.b	240	;R (14)
    608  5d0c		       93		      .byte.b	147	;G
    609  5d0d		       00		      .byte.b	0	;B
    610  5d0e		       e0		      .byte.b	224	;R (13)
    611  5d0f		       25		      .byte.b	37	;G
    612  5d10		       00		      .byte.b	0	;B
    613  5d11		       c0		      .byte.b	192	;R (12)
    614  5d12		       e5		      .byte.b	229	;G
    615  5d13		       00		      .byte.b	0	;B
    616  5d14		       80		      .byte.b	128	;R (11)
    617  5d15		       0e		      .byte.b	14	;G
    618  5d16		       00		      .byte.b	0	;B
    619  5d17		       c0		      .byte.b	192	;R (10)
    620  5d18		       ca		      .byte.b	202	;G
    621  5d19		       00		      .byte.b	0	;B
    622  5d1a		       84		      .byte.b	132	;R (9)
    623  5d1b		       8e		      .byte.b	142	;G
    624  5d1c		       00		      .byte.b	0	;B
    625  5d1d		       00		      .byte.b	0	;R (8)
    626  5d1e		       8e		      .byte.b	142	;G
    627  5d1f		       00		      .byte.b	0	;B
    628  5d20		       00		      .byte.b	0	;R (7)
    629  5d21		       15		      .byte.b	21	;G
    630  5d22		       00		      .byte.b	0	;B
    631  5d23		       00		      .byte.b	0	;R (6)
    632  5d24		       14		      .byte.b	20	;G
    633  5d25		       00		      .byte.b	0	;B
    634  5d26		       00		      .byte.b	0	;R (5)
    635  5d27		       14		      .byte.b	20	;G
    636  5d28		       00		      .byte.b	0	;B
    637  5d29		       00		      .byte.b	0	;R (4)
    638  5d2a		       0a		      .byte.b	10	;G
    639  5d2b		       00		      .byte.b	0	;B
    640  5d2c		       00		      .byte.b	0	;R (3)
    641  5d2d		       10		      .byte.b	16	;G
    642  5d2e		       00		      .byte.b	0	;B
    643  5d2f		       08		      .byte.b	8	;R (2)
    644  5d30		       88		      .byte.b	136	;G
    645  5d31		       00		      .byte.b	0	;B
    646  5d32		       40		      .byte.b	64	;R (1)
    647  5d33		       42		      .byte.b	66	;G
    648  5d34		       00		      .byte.b	0	;B
    649  5d35		       00		      .byte.b	0	;R (0)
    650  5d36		       00		      .byte.b	0	;G
    651  5d37		       00		      .byte.b	0	;B
    652  5d38				   COL_3
    653  5d38		       90		      .byte.b	144	;R (71)
    654  5d39		       90		      .byte.b	144	;G
    655  5d3a		       00		      .byte.b	0	;B
    656  5d3b		       40		      .byte.b	64	;R (70)
    657  5d3c		       40		      .byte.b	64	;G
    658  5d3d		       00		      .byte.b	0	;B
    659  5d3e		       b0		      .byte.b	176	;R (69)
    660  5d3f		       b0		      .byte.b	176	;G
    661  5d40		       00		      .byte.b	0	;B
    662  5d41		       d0		      .byte.b	208	;R (68)
    663  5d42		       00		      .byte.b	0	;G
    664  5d43		       20		      .byte.b	32	;B
    665  5d44		       f0		      .byte.b	240	;R (67)
    666  5d45		       00		      .byte.b	0	;G
    667  5d46		       00		      .byte.b	0	;B
    668  5d47		       f0		      .byte.b	240	;R (66)
    669  5d48		       d0		      .byte.b	208	;G
    670  5d49		       00		      .byte.b	0	;B
    671  5d4a		       f0		      .byte.b	240	;R (65)
    672  5d4b		       00		      .byte.b	0	;G
    673  5d4c		       00		      .byte.b	0	;B
    674  5d4d		       f0		      .byte.b	240	;R (64)
    675  5d4e		       00		      .byte.b	0	;G
    676  5d4f		       00		      .byte.b	0	;B
    677  5d50		       f0		      .byte.b	240	;R (63)
    678  5d51		       50		      .byte.b	80	;G
    679  5d52		       00		      .byte.b	0	;B
    680  5d53		       f0		      .byte.b	240	;R (62)
    681  5d54		       00		      .byte.b	0	;G
    682  5d55		       00		      .byte.b	0	;B
    683  5d56		       f0		      .byte.b	240	;R (61)
    684  5d57		       a0		      .byte.b	160	;G
    685  5d58		       00		      .byte.b	0	;B
    686  5d59		       f0		      .byte.b	240	;R (60)
    687  5d5a		       00		      .byte.b	0	;G
    688  5d5b		       00		      .byte.b	0	;B
    689  5d5c		       f0		      .byte.b	240	;R (59)
    690  5d5d		       d0		      .byte.b	208	;G
    691  5d5e		       00		      .byte.b	0	;B
    692  5d5f		       f0		      .byte.b	240	;R (58)
    693  5d60		       c0		      .byte.b	192	;G
    694  5d61		       00		      .byte.b	0	;B
    695  5d62		       f0		      .byte.b	240	;R (57)
    696  5d63		       90		      .byte.b	144	;G
    697  5d64		       00		      .byte.b	0	;B
    698  5d65		       f0		      .byte.b	240	;R (56)
    699  5d66		       80		      .byte.b	128	;G
    700  5d67		       00		      .byte.b	0	;B
    701  5d68		       f0		      .byte.b	240	;R (55)
    702  5d69		       40		      .byte.b	64	;G
    703  5d6a		       00		      .byte.b	0	;B
    704  5d6b		       70		      .byte.b	112	;R (54)
    705  5d6c		       00		      .byte.b	0	;G
    706  5d6d		       80		      .byte.b	128	;B
    707  5d6e		       d0		      .byte.b	208	;R (53)
    708  5d6f		       00		      .byte.b	0	;G
    709  5d70		       20		      .byte.b	32	;B
    710  5d71		       f0		      .byte.b	240	;R (52)
    711  5d72		       80		      .byte.b	128	;G
    712  5d73		       00		      .byte.b	0	;B
    713  5d74		       f0		      .byte.b	240	;R (51)
    714  5d75		       00		      .byte.b	0	;G
    715  5d76		       00		      .byte.b	0	;B
    716  5d77		       f0		      .byte.b	240	;R (50)
    717  5d78		       a0		      .byte.b	160	;G
    718  5d79		       00		      .byte.b	0	;B
    719  5d7a		       f0		      .byte.b	240	;R (49)
    720  5d7b		       80		      .byte.b	128	;G
    721  5d7c		       00		      .byte.b	0	;B
    722  5d7d		       f0		      .byte.b	240	;R (48)
    723  5d7e		       40		      .byte.b	64	;G
    724  5d7f		       00		      .byte.b	0	;B
    725  5d80		       f0		      .byte.b	240	;R (47)
    726  5d81		       20		      .byte.b	32	;G
    727  5d82		       00		      .byte.b	0	;B
    728  5d83		       f0		      .byte.b	240	;R (46)
    729  5d84		       00		      .byte.b	0	;G
    730  5d85		       00		      .byte.b	0	;B
    731  5d86		       f0		      .byte.b	240	;R (45)
    732  5d87		       80		      .byte.b	128	;G
    733  5d88		       00		      .byte.b	0	;B
    734  5d89		       f0		      .byte.b	240	;R (44)
    735  5d8a		       00		      .byte.b	0	;G
    736  5d8b		       00		      .byte.b	0	;B
    737  5d8c		       f0		      .byte.b	240	;R (43)
    738  5d8d		       40		      .byte.b	64	;G
    739  5d8e		       00		      .byte.b	0	;B
    740  5d8f		       f0		      .byte.b	240	;R (42)
    741  5d90		       00		      .byte.b	0	;G
    742  5d91		       00		      .byte.b	0	;B
    743  5d92		       f0		      .byte.b	240	;R (41)
    744  5d93		       20		      .byte.b	32	;G
    745  5d94		       00		      .byte.b	0	;B
    746  5d95		       f0		      .byte.b	240	;R (40)
    747  5d96		       20		      .byte.b	32	;G
    748  5d97		       00		      .byte.b	0	;B
    749  5d98		       f0		      .byte.b	240	;R (39)
    750  5d99		       50		      .byte.b	80	;G
    751  5d9a		       00		      .byte.b	0	;B
    752  5d9b		       f0		      .byte.b	240	;R (38)
    753  5d9c		       10		      .byte.b	16	;G
    754  5d9d		       00		      .byte.b	0	;B
    755  5d9e		       70		      .byte.b	112	;R (37)
    756  5d9f		       80		      .byte.b	128	;G
    757  5da0		       80		      .byte.b	128	;B
    758  5da1		       f0		      .byte.b	240	;R (36)
    759  5da2		       50		      .byte.b	80	;G
    760  5da3		       00		      .byte.b	0	;B
    761  5da4		       f0		      .byte.b	240	;R (35)
    762  5da5		       00		      .byte.b	0	;G
    763  5da6		       00		      .byte.b	0	;B
    764  5da7		       f0		      .byte.b	240	;R (34)
    765  5da8		       40		      .byte.b	64	;G
    766  5da9		       00		      .byte.b	0	;B
    767  5daa		       f0		      .byte.b	240	;R (33)
    768  5dab		       10		      .byte.b	16	;G
    769  5dac		       00		      .byte.b	0	;B
    770  5dad		       f0		      .byte.b	240	;R (32)
    771  5dae		       b0		      .byte.b	176	;G
    772  5daf		       00		      .byte.b	0	;B
    773  5db0		       e0		      .byte.b	224	;R (31)
    774  5db1		       00		      .byte.b	0	;G
    775  5db2		       10		      .byte.b	16	;B
    776  5db3		       e0		      .byte.b	224	;R (30)
    777  5db4		       40		      .byte.b	64	;G
    778  5db5		       00		      .byte.b	0	;B
    779  5db6		       e0		      .byte.b	224	;R (29)
    780  5db7		       20		      .byte.b	32	;G
    781  5db8		       00		      .byte.b	0	;B
    782  5db9		       c0		      .byte.b	192	;R (28)
    783  5dba		       00		      .byte.b	0	;G
    784  5dbb		       00		      .byte.b	0	;B
    785  5dbc		       c0		      .byte.b	192	;R (27)
    786  5dbd		       10		      .byte.b	16	;G
    787  5dbe		       00		      .byte.b	0	;B
    788  5dbf		       c0		      .byte.b	192	;R (26)
    789  5dc0		       40		      .byte.b	64	;G
    790  5dc1		       10		      .byte.b	16	;B
    791  5dc2		       90		      .byte.b	144	;R (25)
    792  5dc3		       00		      .byte.b	0	;G
    793  5dc4		       00		      .byte.b	0	;B
    794  5dc5		       f0		      .byte.b	240	;R (24)
    795  5dc6		       60		      .byte.b	96	;G
    796  5dc7		       00		      .byte.b	0	;B
    797  5dc8		       f0		      .byte.b	240	;R (23)
    798  5dc9		       00		      .byte.b	0	;G
    799  5dca		       00		      .byte.b	0	;B
    800  5dcb		       f0		      .byte.b	240	;R (22)
    801  5dcc		       40		      .byte.b	64	;G
    802  5dcd		       00		      .byte.b	0	;B
    803  5dce		       f0		      .byte.b	240	;R (21)
    804  5dcf		       10		      .byte.b	16	;G
    805  5dd0		       00		      .byte.b	0	;B
    806  5dd1		       f0		      .byte.b	240	;R (20)
    807  5dd2		       00		      .byte.b	0	;G
    808  5dd3		       00		      .byte.b	0	;B
    809  5dd4		       f0		      .byte.b	240	;R (19)
    810  5dd5		       60		      .byte.b	96	;G
    811  5dd6		       00		      .byte.b	0	;B
    812  5dd7		       f0		      .byte.b	240	;R (18)
    813  5dd8		       20		      .byte.b	32	;G
    814  5dd9		       00		      .byte.b	0	;B
    815  5dda		       f0		      .byte.b	240	;R (17)
    816  5ddb		       50		      .byte.b	80	;G
    817  5ddc		       00		      .byte.b	0	;B
    818  5ddd		       f0		      .byte.b	240	;R (16)
    819  5dde		       40		      .byte.b	64	;G
    820  5ddf		       00		      .byte.b	0	;B
    821  5de0		       f0		      .byte.b	240	;R (15)
    822  5de1		       80		      .byte.b	128	;G
    823  5de2		       00		      .byte.b	0	;B
    824  5de3		       f0		      .byte.b	240	;R (14)
    825  5de4		       40		      .byte.b	64	;G
    826  5de5		       00		      .byte.b	0	;B
    827  5de6		       f0		      .byte.b	240	;R (13)
    828  5de7		       00		      .byte.b	0	;G
    829  5de8		       00		      .byte.b	0	;B
    830  5de9		       f0		      .byte.b	240	;R (12)
    831  5dea		       10		      .byte.b	16	;G
    832  5deb		       00		      .byte.b	0	;B
    833  5dec		       f0		      .byte.b	240	;R (11)
    834  5ded		       50		      .byte.b	80	;G
    835  5dee		       00		      .byte.b	0	;B
    836  5def		       f0		      .byte.b	240	;R (10)
    837  5df0		       00		      .byte.b	0	;G
    838  5df1		       00		      .byte.b	0	;B
    839  5df2		       f0		      .byte.b	240	;R (9)
    840  5df3		       b0		      .byte.b	176	;G
    841  5df4		       00		      .byte.b	0	;B
    842  5df5		       f0		      .byte.b	240	;R (8)
    843  5df6		       90		      .byte.b	144	;G
    844  5df7		       00		      .byte.b	0	;B
    845  5df8		       e0		      .byte.b	224	;R (7)
    846  5df9		       e0		      .byte.b	224	;G
    847  5dfa		       00		      .byte.b	0	;B
    848  5dfb		       f0		      .byte.b	240	;R (6)
    849  5dfc		       d0		      .byte.b	208	;G
    850  5dfd		       00		      .byte.b	0	;B
    851  5dfe		       60		      .byte.b	96	;R (5)
    852  5dff		       00		      .byte.b	0	;G
    853  5e00		       00		      .byte.b	0	;B
    854  5e01		       60		      .byte.b	96	;R (4)
    855  5e02		       40		      .byte.b	64	;G
    856  5e03		       00		      .byte.b	0	;B
    857  5e04		       40		      .byte.b	64	;R (3)
    858  5e05		       50		      .byte.b	80	;G
    859  5e06		       00		      .byte.b	0	;B
    860  5e07		       00		      .byte.b	0	;R (2)
    861  5e08		       00		      .byte.b	0	;G
    862  5e09		       00		      .byte.b	0	;B
    863  5e0a		       00		      .byte.b	0	;R (1)
    864  5e0b		       80		      .byte.b	128	;G
    865  5e0c		       00		      .byte.b	0	;B
    866  5e0d		       00		      .byte.b	0	;R (0)
    867  5e0e		       00		      .byte.b	0	;G
    868  5e0f		       00		      .byte.b	0	;B
    869  5e10				   COL_4
    870  5e10		       25		      .byte.b	37	;R (71)
    871  5e11		       25		      .byte.b	37	;G
    872  5e12		       00		      .byte.b	0	;B
    873  5e13		       48		      .byte.b	72	;R (70)
    874  5e14		       48		      .byte.b	72	;G
    875  5e15		       00		      .byte.b	0	;B
    876  5e16		       25		      .byte.b	37	;R (69)
    877  5e17		       25		      .byte.b	37	;G
    878  5e18		       88		      .byte.b	136	;B
    879  5e19		       ff		      .byte.b	255	;R (68)
    880  5e1a		       00		      .byte.b	0	;G
    881  5e1b		       00		      .byte.b	0	;B
    882  5e1c		       ff		      .byte.b	255	;R (67)
    883  5e1d		       04		      .byte.b	4	;G
    884  5e1e		       00		      .byte.b	0	;B
    885  5e1f		       ef		      .byte.b	239	;R (66)
    886  5e20		       40		      .byte.b	64	;G
    887  5e21		       10		      .byte.b	16	;B
    888  5e22		       ff		      .byte.b	255	;R (65)
    889  5e23		       00		      .byte.b	0	;G
    890  5e24		       00		      .byte.b	0	;B
    891  5e25		       ff		      .byte.b	255	;R (64)
    892  5e26		       02		      .byte.b	2	;G
    893  5e27		       00		      .byte.b	0	;B
    894  5e28		       ff		      .byte.b	255	;R (63)
    895  5e29		       20		      .byte.b	32	;G
    896  5e2a		       00		      .byte.b	0	;B
    897  5e2b		       ff		      .byte.b	255	;R (62)
    898  5e2c		       a5		      .byte.b	165	;G
    899  5e2d		       00		      .byte.b	0	;B
    900  5e2e		       ff		      .byte.b	255	;R (61)
    901  5e2f		       09		      .byte.b	9	;G
    902  5e30		       00		      .byte.b	0	;B
    903  5e31		       ff		      .byte.b	255	;R (60)
    904  5e32		       00		      .byte.b	0	;G
    905  5e33		       00		      .byte.b	0	;B
    906  5e34		       7f		      .byte.b	127	;R (59)
    907  5e35		       42		      .byte.b	66	;G
    908  5e36		       80		      .byte.b	128	;B
    909  5e37		       ff		      .byte.b	255	;R (58)
    910  5e38		       88		      .byte.b	136	;G
    911  5e39		       00		      .byte.b	0	;B
    912  5e3a		       ff		      .byte.b	255	;R (57)
    913  5e3b		       40		      .byte.b	64	;G
    914  5e3c		       00		      .byte.b	0	;B
    915  5e3d		       ff		      .byte.b	255	;R (56)
    916  5e3e		       09		      .byte.b	9	;G
    917  5e3f		       00		      .byte.b	0	;B
    918  5e40		       7f		      .byte.b	127	;R (55)
    919  5e41		       01		      .byte.b	1	;G
    920  5e42		       80		      .byte.b	128	;B
    921  5e43		       ff		      .byte.b	255	;R (54)
    922  5e44		       91		      .byte.b	145	;G
    923  5e45		       00		      .byte.b	0	;B
    924  5e46		       fe		      .byte.b	254	;R (53)
    925  5e47		       81		      .byte.b	129	;G
    926  5e48		       00		      .byte.b	0	;B
    927  5e49		       fe		      .byte.b	254	;R (52)
    928  5e4a		       20		      .byte.b	32	;G
    929  5e4b		       00		      .byte.b	0	;B
    930  5e4c		       ff		      .byte.b	255	;R (51)
    931  5e4d		       03		      .byte.b	3	;G
    932  5e4e		       00		      .byte.b	0	;B
    933  5e4f		       ff		      .byte.b	255	;R (50)
    934  5e50		       83		      .byte.b	131	;G
    935  5e51		       00		      .byte.b	0	;B
    936  5e52		       fe		      .byte.b	254	;R (49)
    937  5e53		       90		      .byte.b	144	;G
    938  5e54		       00		      .byte.b	0	;B
    939  5e55		       fe		      .byte.b	254	;R (48)
    940  5e56		       83		      .byte.b	131	;G
    941  5e57		       00		      .byte.b	0	;B
    942  5e58		       7e		      .byte.b	126	;R (47)
    943  5e59		       12		      .byte.b	18	;G
    944  5e5a		       80		      .byte.b	128	;B
    945  5e5b		       fc		      .byte.b	252	;R (46)
    946  5e5c		       00		      .byte.b	0	;G
    947  5e5d		       00		      .byte.b	0	;B
    948  5e5e		       fe		      .byte.b	254	;R (45)
    949  5e5f		       07		      .byte.b	7	;G
    950  5e60		       00		      .byte.b	0	;B
    951  5e61		       ef		      .byte.b	239	;R (44)
    952  5e62		       03		      .byte.b	3	;G
    953  5e63		       10		      .byte.b	16	;B
    954  5e64		       ff		      .byte.b	255	;R (43)
    955  5e65		       40		      .byte.b	64	;G
    956  5e66		       00		      .byte.b	0	;B
    957  5e67		       ff		      .byte.b	255	;R (42)
    958  5e68		       01		      .byte.b	1	;G
    959  5e69		       00		      .byte.b	0	;B
    960  5e6a		       ff		      .byte.b	255	;R (41)
    961  5e6b		       01		      .byte.b	1	;G
    962  5e6c		       00		      .byte.b	0	;B
    963  5e6d		       bf		      .byte.b	191	;R (40)
    964  5e6e		       01		      .byte.b	1	;G
    965  5e6f		       40		      .byte.b	64	;B
    966  5e70		       f7		      .byte.b	247	;R (39)
    967  5e71		       80		      .byte.b	128	;G
    968  5e72		       08		      .byte.b	8	;B
    969  5e73		       ff		      .byte.b	255	;R (38)
    970  5e74		       40		      .byte.b	64	;G
    971  5e75		       00		      .byte.b	0	;B
    972  5e76		       ff		      .byte.b	255	;R (37)
    973  5e77		       00		      .byte.b	0	;G
    974  5e78		       00		      .byte.b	0	;B
    975  5e79		       ff		      .byte.b	255	;R (36)
    976  5e7a		       40		      .byte.b	64	;G
    977  5e7b		       00		      .byte.b	0	;B
    978  5e7c		       ff		      .byte.b	255	;R (35)
    979  5e7d		       a1		      .byte.b	161	;G
    980  5e7e		       00		      .byte.b	0	;B
    981  5e7f		       7f		      .byte.b	127	;R (34)
    982  5e80		       05		      .byte.b	5	;G
    983  5e81		       80		      .byte.b	128	;B
    984  5e82		       ff		      .byte.b	255	;R (33)
    985  5e83		       21		      .byte.b	33	;G
    986  5e84		       00		      .byte.b	0	;B
    987  5e85		       bf		      .byte.b	191	;R (32)
    988  5e86		       40		      .byte.b	64	;G
    989  5e87		       40		      .byte.b	64	;B
    990  5e88		       ff		      .byte.b	255	;R (31)
    991  5e89		       61		      .byte.b	97	;G
    992  5e8a		       00		      .byte.b	0	;B
    993  5e8b		       7f		      .byte.b	127	;R (30)
    994  5e8c		       81		      .byte.b	129	;G
    995  5e8d		       80		      .byte.b	128	;B
    996  5e8e		       f7		      .byte.b	247	;R (29)
    997  5e8f		       60		      .byte.b	96	;G
    998  5e90		       08		      .byte.b	8	;B
    999  5e91		       ff		      .byte.b	255	;R (28)
   1000  5e92		       81		      .byte.b	129	;G
   1001  5e93		       00		      .byte.b	0	;B
   1002  5e94		       ef		      .byte.b	239	;R (27)
   1003  5e95		       40		      .byte.b	64	;G
   1004  5e96		       10		      .byte.b	16	;B
   1005  5e97		       ff		      .byte.b	255	;R (26)
   1006  5e98		       60		      .byte.b	96	;G
   1007  5e99		       00		      .byte.b	0	;B
   1008  5e9a		       ff		      .byte.b	255	;R (25)
   1009  5e9b		       18		      .byte.b	24	;G
   1010  5e9c		       00		      .byte.b	0	;B
   1011  5e9d		       ff		      .byte.b	255	;R (24)
   1012  5e9e		       20		      .byte.b	32	;G
   1013  5e9f		       00		      .byte.b	0	;B
   1014  5ea0		       ff		      .byte.b	255	;R (23)
   1015  5ea1		       8a		      .byte.b	138	;G
   1016  5ea2		       00		      .byte.b	0	;B
   1017  5ea3		       f7		      .byte.b	247	;R (22)
   1018  5ea4		       10		      .byte.b	16	;G
   1019  5ea5		       08		      .byte.b	8	;B
   1020  5ea6		       ff		      .byte.b	255	;R (21)
   1021  5ea7		       04		      .byte.b	4	;G
   1022  5ea8		       00		      .byte.b	0	;B
   1023  5ea9		       df		      .byte.b	223	;R (20)
   1024  5eaa		       10		      .byte.b	16	;G
   1025  5eab		       20		      .byte.b	32	;B
   1026  5eac		       ff		      .byte.b	255	;R (19)
   1027  5ead		       90		      .byte.b	144	;G
   1028  5eae		       00		      .byte.b	0	;B
   1029  5eaf		       ff		      .byte.b	255	;R (18)
   1030  5eb0		       12		      .byte.b	18	;G
   1031  5eb1		       00		      .byte.b	0	;B
   1032  5eb2		       ff		      .byte.b	255	;R (17)
   1033  5eb3		       00		      .byte.b	0	;G
   1034  5eb4		       00		      .byte.b	0	;B
   1035  5eb5		       ff		      .byte.b	255	;R (16)
   1036  5eb6		       45		      .byte.b	69	;G
   1037  5eb7		       00		      .byte.b	0	;B
   1038  5eb8		       ff		      .byte.b	255	;R (15)
   1039  5eb9		       10		      .byte.b	16	;G
   1040  5eba		       00		      .byte.b	0	;B
   1041  5ebb		       ff		      .byte.b	255	;R (14)
   1042  5ebc		       23		      .byte.b	35	;G
   1043  5ebd		       00		      .byte.b	0	;B
   1044  5ebe		       fc		      .byte.b	252	;R (13)
   1045  5ebf		       12		      .byte.b	18	;G
   1046  5ec0		       00		      .byte.b	0	;B
   1047  5ec1		       fc		      .byte.b	252	;R (12)
   1048  5ec2		       20		      .byte.b	32	;G
   1049  5ec3		       00		      .byte.b	0	;B
   1050  5ec4		       fe		      .byte.b	254	;R (11)
   1051  5ec5		       46		      .byte.b	70	;G
   1052  5ec6		       00		      .byte.b	0	;B
   1053  5ec7		       f8		      .byte.b	248	;R (10)
   1054  5ec8		       48		      .byte.b	72	;G
   1055  5ec9		       00		      .byte.b	0	;B
   1056  5eca		       f0		      .byte.b	240	;R (9)
   1057  5ecb		       04		      .byte.b	4	;G
   1058  5ecc		       00		      .byte.b	0	;B
   1059  5ecd		       e0		      .byte.b	224	;R (8)
   1060  5ece		       20		      .byte.b	32	;G
   1061  5ecf		       00		      .byte.b	0	;B
   1062  5ed0		       e0		      .byte.b	224	;R (7)
   1063  5ed1		       29		      .byte.b	41	;G
   1064  5ed2		       00		      .byte.b	0	;B
   1065  5ed3		       e0		      .byte.b	224	;R (6)
   1066  5ed4		       20		      .byte.b	32	;G
   1067  5ed5		       00		      .byte.b	0	;B
   1068  5ed6		       e0		      .byte.b	224	;R (5)
   1069  5ed7		       84		      .byte.b	132	;G
   1070  5ed8		       00		      .byte.b	0	;B
   1071  5ed9		       60		      .byte.b	96	;R (4)
   1072  5eda		       40		      .byte.b	64	;G
   1073  5edb		       00		      .byte.b	0	;B
   1074  5edc		       00		      .byte.b	0	;R (3)
   1075  5edd		       88		      .byte.b	136	;G
   1076  5ede		       00		      .byte.b	0	;B
   1077  5edf		       00		      .byte.b	0	;R (2)
   1078  5ee0		       11		      .byte.b	17	;G
   1079  5ee1		       00		      .byte.b	0	;B
   1080  5ee2		       24		      .byte.b	36	;R (1)
   1081  5ee3		       24		      .byte.b	36	;G
   1082  5ee4		       00		      .byte.b	0	;B
   1083  5ee5		       00		      .byte.b	0	;R (0)
   1084  5ee6		       00		      .byte.b	0	;G
   1085  5ee7		       00		      .byte.b	0	;B
   1086  5ee8				   COL_5
   1087  5ee8		       02		      .byte.b	2	;R (71)
   1088  5ee9		       12		      .byte.b	18	;G
   1089  5eea		       00		      .byte.b	0	;B
   1090  5eeb		       00		      .byte.b	0	;R (70)
   1091  5eec		       00		      .byte.b	0	;G
   1092  5eed		       00		      .byte.b	0	;B
   1093  5eee		       00		      .byte.b	0	;R (69)
   1094  5eef		       02		      .byte.b	2	;G
   1095  5ef0		       00		      .byte.b	0	;B
   1096  5ef1		       03		      .byte.b	3	;R (68)
   1097  5ef2		       12		      .byte.b	18	;G
   1098  5ef3		       00		      .byte.b	0	;B
   1099  5ef4		       0b		      .byte.b	11	;R (67)
   1100  5ef5		       09		      .byte.b	9	;G
   1101  5ef6		       00		      .byte.b	0	;B
   1102  5ef7		       07		      .byte.b	7	;R (66)
   1103  5ef8		       05		      .byte.b	5	;G
   1104  5ef9		       00		      .byte.b	0	;B
   1105  5efa		       03		      .byte.b	3	;R (65)
   1106  5efb		       06		      .byte.b	6	;G
   1107  5efc		       00		      .byte.b	0	;B
   1108  5efd		       01		      .byte.b	1	;R (64)
   1109  5efe		       20		      .byte.b	32	;G
   1110  5eff		       00		      .byte.b	0	;B
   1111  5f00		       03		      .byte.b	3	;R (63)
   1112  5f01		       03		      .byte.b	3	;G
   1113  5f02		       00		      .byte.b	0	;B
   1114  5f03		       03		      .byte.b	3	;R (62)
   1115  5f04		       0a		      .byte.b	10	;G
   1116  5f05		       00		      .byte.b	0	;B
   1117  5f06		       03		      .byte.b	3	;R (61)
   1118  5f07		       02		      .byte.b	2	;G
   1119  5f08		       00		      .byte.b	0	;B
   1120  5f09		       03		      .byte.b	3	;R (60)
   1121  5f0a		       00		      .byte.b	0	;G
   1122  5f0b		       00		      .byte.b	0	;B
   1123  5f0c		       03		      .byte.b	3	;R (59)
   1124  5f0d		       0a		      .byte.b	10	;G
   1125  5f0e		       00		      .byte.b	0	;B
   1126  5f0f		       03		      .byte.b	3	;R (58)
   1127  5f10		       02		      .byte.b	2	;G
   1128  5f11		       00		      .byte.b	0	;B
   1129  5f12		       01		      .byte.b	1	;R (57)
   1130  5f13		       03		      .byte.b	3	;G
   1131  5f14		       00		      .byte.b	0	;B
   1132  5f15		       01		      .byte.b	1	;R (56)
   1133  5f16		       01		      .byte.b	1	;G
   1134  5f17		       00		      .byte.b	0	;B
   1135  5f18		       00		      .byte.b	0	;R (55)
   1136  5f19		       25		      .byte.b	37	;G
   1137  5f1a		       00		      .byte.b	0	;B
   1138  5f1b		       00		      .byte.b	0	;R (54)
   1139  5f1c		       00		      .byte.b	0	;G
   1140  5f1d		       00		      .byte.b	0	;B
   1141  5f1e		       00		      .byte.b	0	;R (53)
   1142  5f1f		       20		      .byte.b	32	;G
   1143  5f20		       00		      .byte.b	0	;B
   1144  5f21		       00		      .byte.b	0	;R (52)
   1145  5f22		       08		      .byte.b	8	;G
   1146  5f23		       00		      .byte.b	0	;B
   1147  5f24		       00		      .byte.b	0	;R (51)
   1148  5f25		       02		      .byte.b	2	;G
   1149  5f26		       00		      .byte.b	0	;B
   1150  5f27		       00		      .byte.b	0	;R (50)
   1151  5f28		       40		      .byte.b	64	;G
   1152  5f29		       00		      .byte.b	0	;B
   1153  5f2a		       00		      .byte.b	0	;R (49)
   1154  5f2b		       11		      .byte.b	17	;G
   1155  5f2c		       00		      .byte.b	0	;B
   1156  5f2d		       00		      .byte.b	0	;R (48)
   1157  5f2e		       00		      .byte.b	0	;G
   1158  5f2f		       00		      .byte.b	0	;B
   1159  5f30		       00		      .byte.b	0	;R (47)
   1160  5f31		       20		      .byte.b	32	;G
   1161  5f32		       00		      .byte.b	0	;B
   1162  5f33		       00		      .byte.b	0	;R (46)
   1163  5f34		       08		      .byte.b	8	;G
   1164  5f35		       00		      .byte.b	0	;B
   1165  5f36		       00		      .byte.b	0	;R (45)
   1166  5f37		       00		      .byte.b	0	;G
   1167  5f38		       00		      .byte.b	0	;B
   1168  5f39		       00		      .byte.b	0	;R (44)
   1169  5f3a		       24		      .byte.b	36	;G
   1170  5f3b		       00		      .byte.b	0	;B
   1171  5f3c		       00		      .byte.b	0	;R (43)
   1172  5f3d		       00		      .byte.b	0	;G
   1173  5f3e		       00		      .byte.b	0	;B
   1174  5f3f		       00		      .byte.b	0	;R (42)
   1175  5f40		       04		      .byte.b	4	;G
   1176  5f41		       00		      .byte.b	0	;B
   1177  5f42		       00		      .byte.b	0	;R (41)
   1178  5f43		       21		      .byte.b	33	;G
   1179  5f44		       00		      .byte.b	0	;B
   1180  5f45		       01		      .byte.b	1	;R (40)
   1181  5f46		       01		      .byte.b	1	;G
   1182  5f47		       00		      .byte.b	0	;B
   1183  5f48		       01		      .byte.b	1	;R (39)
   1184  5f49		       25		      .byte.b	37	;G
   1185  5f4a		       00		      .byte.b	0	;B
   1186  5f4b		       01		      .byte.b	1	;R (38)
   1187  5f4c		       01		      .byte.b	1	;G
   1188  5f4d		       00		      .byte.b	0	;B
   1189  5f4e		       03		      .byte.b	3	;R (37)
   1190  5f4f		       23		      .byte.b	35	;G
   1191  5f50		       00		      .byte.b	0	;B
   1192  5f51		       03		      .byte.b	3	;R (36)
   1193  5f52		       13		      .byte.b	19	;G
   1194  5f53		       00		      .byte.b	0	;B
   1195  5f54		       01		      .byte.b	1	;R (35)
   1196  5f55		       02		      .byte.b	2	;G
   1197  5f56		       00		      .byte.b	0	;B
   1198  5f57		       01		      .byte.b	1	;R (34)
   1199  5f58		       10		      .byte.b	16	;G
   1200  5f59		       00		      .byte.b	0	;B
   1201  5f5a		       03		      .byte.b	3	;R (33)
   1202  5f5b		       02		      .byte.b	2	;G
   1203  5f5c		       00		      .byte.b	0	;B
   1204  5f5d		       01		      .byte.b	1	;R (32)
   1205  5f5e		       08		      .byte.b	8	;G
   1206  5f5f		       00		      .byte.b	0	;B
   1207  5f60		       03		      .byte.b	3	;R (31)
   1208  5f61		       20		      .byte.b	32	;G
   1209  5f62		       00		      .byte.b	0	;B
   1210  5f63		       03		      .byte.b	3	;R (30)
   1211  5f64		       00		      .byte.b	0	;G
   1212  5f65		       00		      .byte.b	0	;B
   1213  5f66		       03		      .byte.b	3	;R (29)
   1214  5f67		       10		      .byte.b	16	;G
   1215  5f68		       00		      .byte.b	0	;B
   1216  5f69		       03		      .byte.b	3	;R (28)
   1217  5f6a		       00		      .byte.b	0	;G
   1218  5f6b		       00		      .byte.b	0	;B
   1219  5f6c		       07		      .byte.b	7	;R (27)
   1220  5f6d		       0e		      .byte.b	14	;G
   1221  5f6e		       00		      .byte.b	0	;B
   1222  5f6f		       03		      .byte.b	3	;R (26)
   1223  5f70		       41		      .byte.b	65	;G
   1224  5f71		       00		      .byte.b	0	;B
   1225  5f72		       07		      .byte.b	7	;R (25)
   1226  5f73		       04		      .byte.b	4	;G
   1227  5f74		       00		      .byte.b	0	;B
   1228  5f75		       03		      .byte.b	3	;R (24)
   1229  5f76		       21		      .byte.b	33	;G
   1230  5f77		       00		      .byte.b	0	;B
   1231  5f78		       03		      .byte.b	3	;R (23)
   1232  5f79		       04		      .byte.b	4	;G
   1233  5f7a		       00		      .byte.b	0	;B
   1234  5f7b		       03		      .byte.b	3	;R (22)
   1235  5f7c		       02		      .byte.b	2	;G
   1236  5f7d		       00		      .byte.b	0	;B
   1237  5f7e		       03		      .byte.b	3	;R (21)
   1238  5f7f		       26		      .byte.b	38	;G
   1239  5f80		       00		      .byte.b	0	;B
   1240  5f81		       01		      .byte.b	1	;R (20)
   1241  5f82		       01		      .byte.b	1	;G
   1242  5f83		       00		      .byte.b	0	;B
   1243  5f84		       00		      .byte.b	0	;R (19)
   1244  5f85		       21		      .byte.b	33	;G
   1245  5f86		       00		      .byte.b	0	;B
   1246  5f87		       01		      .byte.b	1	;R (18)
   1247  5f88		       09		      .byte.b	9	;G
   1248  5f89		       00		      .byte.b	0	;B
   1249  5f8a		       23		      .byte.b	35	;R (17)
   1250  5f8b		       22		      .byte.b	34	;G
   1251  5f8c		       00		      .byte.b	0	;B
   1252  5f8d		       01		      .byte.b	1	;R (16)
   1253  5f8e		       01		      .byte.b	1	;G
   1254  5f8f		       00		      .byte.b	0	;B
   1255  5f90		       00		      .byte.b	0	;R (15)
   1256  5f91		       29		      .byte.b	41	;G
   1257  5f92		       00		      .byte.b	0	;B
   1258  5f93		       00		      .byte.b	0	;R (14)
   1259  5f94		       00		      .byte.b	0	;G
   1260  5f95		       00		      .byte.b	0	;B
   1261  5f96		       00		      .byte.b	0	;R (13)
   1262  5f97		       04		      .byte.b	4	;G
   1263  5f98		       00		      .byte.b	0	;B
   1264  5f99		       00		      .byte.b	0	;R (12)
   1265  5f9a		       20		      .byte.b	32	;G
   1266  5f9b		       00		      .byte.b	0	;B
   1267  5f9c		       10		      .byte.b	16	;R (11)
   1268  5f9d		       12		      .byte.b	18	;G
   1269  5f9e		       00		      .byte.b	0	;B
   1270  5f9f		       00		      .byte.b	0	;R (10)
   1271  5fa0		       00		      .byte.b	0	;G
   1272  5fa1		       00		      .byte.b	0	;B
   1273  5fa2		       00		      .byte.b	0	;R (9)
   1274  5fa3		       21		      .byte.b	33	;G
   1275  5fa4		       00		      .byte.b	0	;B
   1276  5fa5		       00		      .byte.b	0	;R (8)
   1277  5fa6		       08		      .byte.b	8	;G
   1278  5fa7		       00		      .byte.b	0	;B
   1279  5fa8		       00		      .byte.b	0	;R (7)
   1280  5fa9		       20		      .byte.b	32	;G
   1281  5faa		       00		      .byte.b	0	;B
   1282  5fab		       00		      .byte.b	0	;R (6)
   1283  5fac		       04		      .byte.b	4	;G
   1284  5fad		       00		      .byte.b	0	;B
   1285  5fae		       20		      .byte.b	32	;R (5)
   1286  5faf		       20		      .byte.b	32	;G
   1287  5fb0		       00		      .byte.b	0	;B
   1288  5fb1		       00		      .byte.b	0	;R (4)
   1289  5fb2		       09		      .byte.b	9	;G
   1290  5fb3		       00		      .byte.b	0	;B
   1291  5fb4		       00		      .byte.b	0	;R (3)
   1292  5fb5		       00		      .byte.b	0	;G
   1293  5fb6		       00		      .byte.b	0	;B
   1294  5fb7		       00		      .byte.b	0	;R (2)
   1295  5fb8		       48		      .byte.b	72	;G
   1296  5fb9		       00		      .byte.b	0	;B
   1297  5fba		       02		      .byte.b	2	;R (1)
   1298  5fbb		       02		      .byte.b	2	;G
   1299  5fbc		       00		      .byte.b	0	;B
   1300  5fbd		       00		      .byte.b	0	;R (0)
   1301  5fbe		       00		      .byte.b	0	;G
   1302  5fbf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  5fc0							;    include "pizza.asm"
    263  5fc0
      0  5fc0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  5fc0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  5fc0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  5fc0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  5fc0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  5fc0				  -	      ERR
      6  5fc0					      endif
------- FILE ./chess.asm
    360  5fc0
    361  5fc0							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  5fc0					      include	"Handler_BANK1.asm"
      1  5fc0							; Copyright (C)2020 Andrew Davie
      2  5fc0							; andrew@taswegian.com
      3  5fc0
      4  5fc0							;---------------------------------------------------------------------------------------------------
      5  5fc0
      6  5fc0
      7  5fc0
      0  5fc0					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  5fc0
      2  5fc0
      3  5fc0
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  63fa ????				      SEG	MOVES
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   MOVES      SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	MOVES
     10  6000
     11  6000
     12  6000							; Board is a 10 x 12 object which simplifies the generation of moves
     13  6000							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     14  6000							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     15  6000							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     16  6000
     17  6000							;     X12 numbering
     18  6000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     19  6000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     20  6000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     21  6000							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     22  6000							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     23  6000							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     24  6000							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     25  6000							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     26  6000							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     27  6000							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     28  6000							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     29  6000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     30  6000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     31  6000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     32  6000							;	0   1	2   3	4   5	6   7	8   9
     33  6000							;		A   B	C   D	E   F	G   H
     34  6000
     35  6000							;     HEX X12
     36  6000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     37  6000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     38  6000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     39  6000							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     40  6000							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     41  6000							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     42  6000							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     43  6000							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     44  6000							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     45  6000							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     46  6000							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     47  6000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     48  6000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     49  6000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     50  6000							;	0   1	2   3	4   5	6   7	8   9
     51  6000							;		A   B	C   D	E   F	G   H
     52  6000
     53  6000
     54  6000							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     55  6000							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     56  6000							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     57  6000							; be re-used for something else - we just need to guarantee there are 22 of them there
     58  6000
     59  6000		       00 00 00 00*	      ds	22	; so indexing of "ValidSquare-22,x" won't fail
     60  6016
     61  6016							; Note, we will never index INTO the above bytes - x will always be >= 22
     62  6016							; We just need to make sure that the actual indexing will not have an address before
     63  6016							; the index of outside the page.
     64  6016
      0  6016					      OPTIONAL_PAGEBREAK	"ValidSquare", 120 + 80
     10  6016					      LIST	ON
      0  6016					      DEF	ValidSquare
      1  6016				   BANK_ValidSquare SET	_CURRENT_BANK
      2  6016
      3  6016				   ValidSquare
     67  6016
     68  6016
     69  6016							; Use this table to
     70  6016							;   a) Determine if a square is valid (-1 = NO)
     71  6016							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     72  6016							;	if a white pawn on square "x" can move "up" the board.
     73  6016
     74  6016		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     75  6020		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     76  602a		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     77  6034		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     78  603e		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     79  6048		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     80  6052		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     81  605c		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     82  6066		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     83  6070		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     84  607a
      0  607a					      DEF	Board
      1  607a				   BANK_Board SET	_CURRENT_BANK
      2  607a
      3  607a				   Board
     86  607a
     87  607a							; A 10X10... we should never write using invalid square
     88  607a							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     89  607a							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     90  607a
     91  607a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     92  6084		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     93  608e
     94  608e					      REPEAT	8
     95  608e		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  608e					      REPEND
     95  6098		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  6098					      REPEND
     95  60a2		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  60a2					      REPEND
     95  60ac		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  60ac					      REPEND
     95  60b6		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  60b6					      REPEND
     95  60c0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  60c0					      REPEND
     95  60ca		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     94  60ca					      REPEND
     95  60d4		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     96  60de					      REPEND
     97  60de
     98  60de							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     99  60de
    100  60de							; PARANOIA... following not used, but there in case above violated
    101  60de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    102  60de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    103  60de
    104  60de							;---------------------------------------------------------------------------------------------------
    105  60de
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  60de					      include	"Handler_QUEEN.asm"
      1  60de							; Copyright (C)2020 Andrew Davie
      2  60de
      3  60de							;---------------------------------------------------------------------------------------------------
      4  60de							; QUEEN
      5  60de							;---------------------------------------------------------------------------------------------------
      6  60de
      0  60de					      DEF	Handle_QUEEN
      1  60de				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  60de
      3  60de				   Handle_QUEEN
      8  60de
      9  60de							; Pass...
     10  60de							; x = currentSquare (square the piece is on)
     11  60de							; currentPiece (with flags/colour attached)
     12  60de
      0  60de					      MOVE_TOWARDS	_DOWN+_LEFT
      1  60de					      SUBROUTINE
      2  60de
      3  60de		       a6 98		      ldx	currentSquare
      4  60e0		       d0 03		      bne	.project
      5  60e2
      6  60e2		       20 cc fc    .empty     jsr	AddMove
      7  60e5		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      8  60e8		       30 0c		      bmi	.invalid
      9  60ea		       b9 7a f0 	      lda	Board,y
     10  60ed		       f0 f3		      beq	.empty
     11  60ef		       45 97		      eor	currentPiece
     12  60f1		       10 03		      bpl	.invalid
     13  60f3		       20 cc fc 	      jsr	AddMove
     14  60f6
     15  60f6				   .invalid
      0  60f6					      MOVE_TOWARDS	_DOWN
      1  60f6					      SUBROUTINE
      2  60f6
      3  60f6		       a6 98		      ldx	currentSquare
      4  60f8		       d0 03		      bne	.project
      5  60fa
      6  60fa		       20 cc fc    .empty     jsr	AddMove
      7  60fd		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      8  6100		       30 0c		      bmi	.invalid
      9  6102		       b9 7a f0 	      lda	Board,y
     10  6105		       f0 f3		      beq	.empty
     11  6107		       45 97		      eor	currentPiece
     12  6109		       10 03		      bpl	.invalid
     13  610b		       20 cc fc 	      jsr	AddMove
     14  610e
     15  610e				   .invalid
      0  610e					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  610e					      SUBROUTINE
      2  610e
      3  610e		       a6 98		      ldx	currentSquare
      4  6110		       d0 03		      bne	.project
      5  6112
      6  6112		       20 cc fc    .empty     jsr	AddMove
      7  6115		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      8  6118		       30 0c		      bmi	.invalid
      9  611a		       b9 7a f0 	      lda	Board,y
     10  611d		       f0 f3		      beq	.empty
     11  611f		       45 97		      eor	currentPiece
     12  6121		       10 03		      bpl	.invalid
     13  6123		       20 cc fc 	      jsr	AddMove
     14  6126
     15  6126				   .invalid
      0  6126					      MOVE_TOWARDS	_RIGHT
      1  6126					      SUBROUTINE
      2  6126
      3  6126		       a6 98		      ldx	currentSquare
      4  6128		       d0 03		      bne	.project
      5  612a
      6  612a		       20 cc fc    .empty     jsr	AddMove
      7  612d		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      8  6130		       30 0c		      bmi	.invalid
      9  6132		       b9 7a f0 	      lda	Board,y
     10  6135		       f0 f3		      beq	.empty
     11  6137		       45 97		      eor	currentPiece
     12  6139		       10 03		      bpl	.invalid
     13  613b		       20 cc fc 	      jsr	AddMove
     14  613e
     15  613e				   .invalid
      0  613e					      MOVE_TOWARDS	_UP+_RIGHT
      1  613e					      SUBROUTINE
      2  613e
      3  613e		       a6 98		      ldx	currentSquare
      4  6140		       d0 03		      bne	.project
      5  6142
      6  6142		       20 cc fc    .empty     jsr	AddMove
      7  6145		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      8  6148		       30 0c		      bmi	.invalid
      9  614a		       b9 7a f0 	      lda	Board,y
     10  614d		       f0 f3		      beq	.empty
     11  614f		       45 97		      eor	currentPiece
     12  6151		       10 03		      bpl	.invalid
     13  6153		       20 cc fc 	      jsr	AddMove
     14  6156
     15  6156				   .invalid
      0  6156					      MOVE_TOWARDS	_UP
      1  6156					      SUBROUTINE
      2  6156
      3  6156		       a6 98		      ldx	currentSquare
      4  6158		       d0 03		      bne	.project
      5  615a
      6  615a		       20 cc fc    .empty     jsr	AddMove
      7  615d		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      8  6160		       30 0c		      bmi	.invalid
      9  6162		       b9 7a f0 	      lda	Board,y
     10  6165		       f0 f3		      beq	.empty
     11  6167		       45 97		      eor	currentPiece
     12  6169		       10 03		      bpl	.invalid
     13  616b		       20 cc fc 	      jsr	AddMove
     14  616e
     15  616e				   .invalid
      0  616e					      MOVE_TOWARDS	_UP+_LEFT
      1  616e					      SUBROUTINE
      2  616e
      3  616e		       a6 98		      ldx	currentSquare
      4  6170		       d0 03		      bne	.project
      5  6172
      6  6172		       20 cc fc    .empty     jsr	AddMove
      7  6175		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      8  6178		       30 0c		      bmi	.invalid
      9  617a		       b9 7a f0 	      lda	Board,y
     10  617d		       f0 f3		      beq	.empty
     11  617f		       45 97		      eor	currentPiece
     12  6181		       10 03		      bpl	.invalid
     13  6183		       20 cc fc 	      jsr	AddMove
     14  6186
     15  6186				   .invalid
      0  6186					      MOVE_TOWARDS	_LEFT
      1  6186					      SUBROUTINE
      2  6186
      3  6186		       a6 98		      ldx	currentSquare
      4  6188		       d0 03		      bne	.project
      5  618a
      6  618a		       20 cc fc    .empty     jsr	AddMove
      7  618d		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      8  6190		       30 0c		      bmi	.invalid
      9  6192		       b9 7a f0 	      lda	Board,y
     10  6195		       f0 f3		      beq	.empty
     11  6197		       45 97		      eor	currentPiece
     12  6199		       10 03		      bpl	.invalid
     13  619b		       20 cc fc 	      jsr	AddMove
     14  619e
     15  619e				   .invalid
     21  619e
     22  619e		       4c a1 fa 	      jmp	MoveReturn
     23  61a1
     24  61a1							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  61a1					      include	"Handler_BISHOP.asm"
      1  61a1							; Copyright (C)2020 Andrew Davie
      2  61a1
      3  61a1							;---------------------------------------------------------------------------------------------------
      4  61a1							; BISHOP
      5  61a1							;---------------------------------------------------------------------------------------------------
      6  61a1
      0  61a1					      DEF	Handle_BISHOP
      1  61a1				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  61a1
      3  61a1				   Handle_BISHOP
      8  61a1
      9  61a1							; Pass...
     10  61a1							; x = currentSquare (square the piece is on)
     11  61a1							; currentPiece (with flags/colour attached)
     12  61a1
      0  61a1					      MOVE_TOWARDS	_DOWN+_LEFT
      1  61a1					      SUBROUTINE
      2  61a1
      3  61a1		       a6 98		      ldx	currentSquare
      4  61a3		       d0 03		      bne	.project
      5  61a5
      6  61a5		       20 cc fc    .empty     jsr	AddMove
      7  61a8		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      8  61ab		       30 0c		      bmi	.invalid
      9  61ad		       b9 7a f0 	      lda	Board,y
     10  61b0		       f0 f3		      beq	.empty
     11  61b2		       45 97		      eor	currentPiece
     12  61b4		       10 03		      bpl	.invalid
     13  61b6		       20 cc fc 	      jsr	AddMove
     14  61b9
     15  61b9				   .invalid
      0  61b9					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  61b9					      SUBROUTINE
      2  61b9
      3  61b9		       a6 98		      ldx	currentSquare
      4  61bb		       d0 03		      bne	.project
      5  61bd
      6  61bd		       20 cc fc    .empty     jsr	AddMove
      7  61c0		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      8  61c3		       30 0c		      bmi	.invalid
      9  61c5		       b9 7a f0 	      lda	Board,y
     10  61c8		       f0 f3		      beq	.empty
     11  61ca		       45 97		      eor	currentPiece
     12  61cc		       10 03		      bpl	.invalid
     13  61ce		       20 cc fc 	      jsr	AddMove
     14  61d1
     15  61d1				   .invalid
      0  61d1					      MOVE_TOWARDS	_UP+_LEFT
      1  61d1					      SUBROUTINE
      2  61d1
      3  61d1		       a6 98		      ldx	currentSquare
      4  61d3		       d0 03		      bne	.project
      5  61d5
      6  61d5		       20 cc fc    .empty     jsr	AddMove
      7  61d8		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      8  61db		       30 0c		      bmi	.invalid
      9  61dd		       b9 7a f0 	      lda	Board,y
     10  61e0		       f0 f3		      beq	.empty
     11  61e2		       45 97		      eor	currentPiece
     12  61e4		       10 03		      bpl	.invalid
     13  61e6		       20 cc fc 	      jsr	AddMove
     14  61e9
     15  61e9				   .invalid
      0  61e9					      MOVE_TOWARDS	_UP+_RIGHT
      1  61e9					      SUBROUTINE
      2  61e9
      3  61e9		       a6 98		      ldx	currentSquare
      4  61eb		       d0 03		      bne	.project
      5  61ed
      6  61ed		       20 cc fc    .empty     jsr	AddMove
      7  61f0		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      8  61f3		       30 0c		      bmi	.invalid
      9  61f5		       b9 7a f0 	      lda	Board,y
     10  61f8		       f0 f3		      beq	.empty
     11  61fa		       45 97		      eor	currentPiece
     12  61fc		       10 03		      bpl	.invalid
     13  61fe		       20 cc fc 	      jsr	AddMove
     14  6201
     15  6201				   .invalid
     17  6201
     18  6201		       4c a1 fa 	      jmp	MoveReturn
     19  6204
     20  6204							;CHECK_HALF_BANK_SIZE "HANDLER_MOVE -- 1K"
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  6204					      include	"Handler_ROOK.asm"
      1  6204							; Copyright (C)2020 Andrew Davie
      2  6204							; Rook move handler
      3  6204
      4  6204							;---------------------------------------------------------------------------------------------------
      5  6204							; ROOK
      6  6204							;---------------------------------------------------------------------------------------------------
      7  6204
      0  6204					      DEF	Handle_ROOK
      1  6204				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  6204
      3  6204				   Handle_ROOK
      9  6204
     10  6204							; Pass...
     11  6204							; x = currentSquare (square the piece is on)
     12  6204							; currentPiece (with flags/colour attached)
     13  6204
      0  6204					      MOVE_TOWARDS	_DOWN
      1  6204					      SUBROUTINE
      2  6204
      3  6204		       a6 98		      ldx	currentSquare
      4  6206		       d0 03		      bne	.project
      5  6208
      6  6208		       20 cc fc    .empty     jsr	AddMove
      7  620b		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      8  620e		       30 0c		      bmi	.invalid
      9  6210		       b9 7a f0 	      lda	Board,y
     10  6213		       f0 f3		      beq	.empty
     11  6215		       45 97		      eor	currentPiece
     12  6217		       10 03		      bpl	.invalid
     13  6219		       20 cc fc 	      jsr	AddMove
     14  621c
     15  621c				   .invalid
      0  621c					      MOVE_TOWARDS	_RIGHT
      1  621c					      SUBROUTINE
      2  621c
      3  621c		       a6 98		      ldx	currentSquare
      4  621e		       d0 03		      bne	.project
      5  6220
      6  6220		       20 cc fc    .empty     jsr	AddMove
      7  6223		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      8  6226		       30 0c		      bmi	.invalid
      9  6228		       b9 7a f0 	      lda	Board,y
     10  622b		       f0 f3		      beq	.empty
     11  622d		       45 97		      eor	currentPiece
     12  622f		       10 03		      bpl	.invalid
     13  6231		       20 cc fc 	      jsr	AddMove
     14  6234
     15  6234				   .invalid
      0  6234					      MOVE_TOWARDS	_UP
      1  6234					      SUBROUTINE
      2  6234
      3  6234		       a6 98		      ldx	currentSquare
      4  6236		       d0 03		      bne	.project
      5  6238
      6  6238		       20 cc fc    .empty     jsr	AddMove
      7  623b		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      8  623e		       30 0c		      bmi	.invalid
      9  6240		       b9 7a f0 	      lda	Board,y
     10  6243		       f0 f3		      beq	.empty
     11  6245		       45 97		      eor	currentPiece
     12  6247		       10 03		      bpl	.invalid
     13  6249		       20 cc fc 	      jsr	AddMove
     14  624c
     15  624c				   .invalid
      0  624c					      MOVE_TOWARDS	_LEFT
      1  624c					      SUBROUTINE
      2  624c
      3  624c		       a6 98		      ldx	currentSquare
      4  624e		       d0 03		      bne	.project
      5  6250
      6  6250		       20 cc fc    .empty     jsr	AddMove
      7  6253		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      8  6256		       30 0c		      bmi	.invalid
      9  6258		       b9 7a f0 	      lda	Board,y
     10  625b		       f0 f3		      beq	.empty
     11  625d		       45 97		      eor	currentPiece
     12  625f		       10 03		      bpl	.invalid
     13  6261		       20 cc fc 	      jsr	AddMove
     14  6264
     15  6264				   .invalid
     18  6264
     19  6264		       4c a1 fa 	      jmp	MoveReturn
     20  6267
     21  6267							;---------------------------------------------------------------------------------------------------
     22  6267							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  6267					      include	"Handler_KING.asm"
      1  6267							; Copyright (C)2020 Andrew Davie
      2  6267							; Piece move handler for king
      3  6267
      4  6267
      5  6267							; This is the move handler for a KING
      6  6267							; "Check" is detected in the next ply of the search, so the move generation doesn't have to
      7  6267							; be concerned about that. To assist with castling over squares in check (which is illegal)
      8  6267							; the concept of a phantom king is introduced. Phantom kings are effectively blank squares
      9  6267							; but need to be checked when moving opposite-colour pieces to a square. Messy.
     10  6267
     11  6267							;---------------------------------------------------------------------------------------------------
     12  6267							; MACRO - Castling
     13  6267
     14  6267		       00 03	   KINGSIDE   =	3
     15  6267		       ff ff ff fc QUEENSIDE  =	-4
     16  6267
     17  6267					      MAC	castle
     18  6267							; {1} == KINGSIDE or QUEENSIDE
     19  6267
     20  6267
     21  6267							; Most likely failure trigger is there are pieces in the way (N or B) (or Q)
     22  6267							; Check these squares first as it's the cheapest "exit" from castle check
     23  6267
     24  6267							; Note: castling with squares that are "in check" is problematic
     25  6267							; TODO: next ply have a "phantom" king on the positions king moves over...?
     26  6267
     27  6267					      ldx	currentSquare
     28  6267					      lda	Board+{1},x	; we expect a R
     29  6267					      sta	__piece
     30  6267
     31  6267					      and	#PIECE_MASK
     32  6267					      cmp	#ROOK
     33  6267					      bne	.noCastle	; not a R
     34  6267
     35  6267					      lda	__piece
     36  6267					      eor	currentPiece
     37  6267					      bmi	.noCastle	; not correct colour
     38  6267
     39  6267					      bit	__piece
     40  6267					      bvs	.noCastle	; it's previously moved so we can't castle
     41  6267
     42  6267							; Check for vacant squares between K and R
     43  6267
     44  6267					      IF	{1} = QUEENSIDE
     45  6267					      lda	Board-3,x	; nothing in N pos
     46  6267					      bne	.noCastle
     47  6267					      lda	Board-2,x	; nothing in B pos
     48  6267					      bne	.noCastle
     49  6267					      lda	Board-1,x	; nothing in Q pos
     50  6267					      bne	.noCastle
     51  6267
     52  6267					      ENDIF
     53  6267
     54  6267					      IF	{1} = KINGSIDE
     55  6267					      lda	Board+2,x	; check N pos
     56  6267					      bne	.noCastle
     57  6267					      lda	Board+1,x	; check B pos
     58  6267					      bne	.noCastle
     59  6267					      ENDIF
     60  6267
     61  6267							; appropriate N/B/(Q) squares are vacant so we proceed with more checks...
     62  6267
     63  6267							; FINALLY -- king can castle
     64  6267							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     65  6267							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     66  6267							; next move. Castling will be detected by K moving > 1 square.
     67  6267
     68  6267					      lda	currentPiece
     69  6267					      ora	#CASTLE
     70  6267					      sta	currentPiece
     71  6267
     72  6267					      ldy	ValidSquare+{2},x
     73  6267
     74  6267					      jsr	AddMove
     75  6267				   .noCastle
     76  6267					      ENDM
     77  6267
     78  6267
     79  6267							;---------------------------------------------------------------------------------------------------
     80  6267
      0  6267					      DEF	Handle_KING
      1  6267				   BANK_Handle_KING SET	_CURRENT_BANK
      2  6267
      3  6267				   Handle_KING
     82  6267
     83  6267							; Pass...
     84  6267							; x = currentSquare (square the KING is on)
     85  6267							; currentPiece (KING of course, but with flags/colour attached)
     86  6267
     87  6267							; regular moving...
     88  6267
      0  6267					      MOVE_TO	_DOWN+_LEFT
      1  6267					      SUBROUTINE
      2  6267		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  626a		       30 0c		      bmi	.invalid
      4  626c		       b9 7a f0 	      lda	Board,y
      5  626f		       f0 04		      beq	.squareEmpty
      6  6271		       45 97		      eor	currentPiece
      7  6273		       10 03		      bpl	.invalid
      8  6275		       20 cc fc    .squareEmpty jsr	AddMove
      9  6278				   .invalid
      0  6278					      MOVE_TO_X	_DOWN
      1  6278		       a6 98		      ldx	currentSquare
      0  627a					      MOVE_TO	_DOWN
      1  627a					      SUBROUTINE
      2  627a		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x
      3  627d		       30 0c		      bmi	.invalid
      4  627f		       b9 7a f0 	      lda	Board,y
      5  6282		       f0 04		      beq	.squareEmpty
      6  6284		       45 97		      eor	currentPiece
      7  6286		       10 03		      bpl	.invalid
      8  6288		       20 cc fc    .squareEmpty jsr	AddMove
      9  628b				   .invalid
      0  628b					      MOVE_TO_X	_DOWN+_RIGHT
      1  628b		       a6 98		      ldx	currentSquare
      0  628d					      MOVE_TO	_DOWN+_RIGHT
      1  628d					      SUBROUTINE
      2  628d		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  6290		       30 0c		      bmi	.invalid
      4  6292		       b9 7a f0 	      lda	Board,y
      5  6295		       f0 04		      beq	.squareEmpty
      6  6297		       45 97		      eor	currentPiece
      7  6299		       10 03		      bpl	.invalid
      8  629b		       20 cc fc    .squareEmpty jsr	AddMove
      9  629e				   .invalid
      0  629e					      MOVE_TO_X	_RIGHT
      1  629e		       a6 98		      ldx	currentSquare
      0  62a0					      MOVE_TO	_RIGHT
      1  62a0					      SUBROUTINE
      2  62a0		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      3  62a3		       30 0c		      bmi	.invalid
      4  62a5		       b9 7a f0 	      lda	Board,y
      5  62a8		       f0 04		      beq	.squareEmpty
      6  62aa		       45 97		      eor	currentPiece
      7  62ac		       10 03		      bpl	.invalid
      8  62ae		       20 cc fc    .squareEmpty jsr	AddMove
      9  62b1				   .invalid
      0  62b1					      MOVE_TO_X	_UP+_RIGHT
      1  62b1		       a6 98		      ldx	currentSquare
      0  62b3					      MOVE_TO	_UP+_RIGHT
      1  62b3					      SUBROUTINE
      2  62b3		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  62b6		       30 0c		      bmi	.invalid
      4  62b8		       b9 7a f0 	      lda	Board,y
      5  62bb		       f0 04		      beq	.squareEmpty
      6  62bd		       45 97		      eor	currentPiece
      7  62bf		       10 03		      bpl	.invalid
      8  62c1		       20 cc fc    .squareEmpty jsr	AddMove
      9  62c4				   .invalid
      0  62c4					      MOVE_TO_X	_UP
      1  62c4		       a6 98		      ldx	currentSquare
      0  62c6					      MOVE_TO	_UP
      1  62c6					      SUBROUTINE
      2  62c6		       bc 20 f0 	      ldy	ValidSquare+_UP,x
      3  62c9		       30 0c		      bmi	.invalid
      4  62cb		       b9 7a f0 	      lda	Board,y
      5  62ce		       f0 04		      beq	.squareEmpty
      6  62d0		       45 97		      eor	currentPiece
      7  62d2		       10 03		      bpl	.invalid
      8  62d4		       20 cc fc    .squareEmpty jsr	AddMove
      9  62d7				   .invalid
      0  62d7					      MOVE_TO_X	_UP+_LEFT
      1  62d7		       a6 98		      ldx	currentSquare
      0  62d9					      MOVE_TO	_UP+_LEFT
      1  62d9					      SUBROUTINE
      2  62d9		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  62dc		       30 0c		      bmi	.invalid
      4  62de		       b9 7a f0 	      lda	Board,y
      5  62e1		       f0 04		      beq	.squareEmpty
      6  62e3		       45 97		      eor	currentPiece
      7  62e5		       10 03		      bpl	.invalid
      8  62e7		       20 cc fc    .squareEmpty jsr	AddMove
      9  62ea				   .invalid
      0  62ea					      MOVE_TO_X	_LEFT
      1  62ea		       a6 98		      ldx	currentSquare
      0  62ec					      MOVE_TO	_LEFT
      1  62ec					      SUBROUTINE
      2  62ec		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      3  62ef		       30 0c		      bmi	.invalid
      4  62f1		       b9 7a f0 	      lda	Board,y
      5  62f4		       f0 04		      beq	.squareEmpty
      6  62f6		       45 97		      eor	currentPiece
      7  62f8		       10 03		      bpl	.invalid
      8  62fa		       20 cc fc    .squareEmpty jsr	AddMove
      9  62fd				   .invalid
     97  62fd
     98  62fd		       24 97		      bit	currentPiece	; has king moved moved?
     99  62ff		       50 03		      bvc	.castleKing	; no, so try castling
    100  6301
    101  6301		       4c a1 fa 	      jmp	MoveReturn
    102  6304
      0  6304				   .castleKing CASTLE	KINGSIDE, 2
      1  6304
      2  6304
      3  6304
      4  6304
      5  6304
      6  6304
      7  6304
      8  6304
      9  6304
     10  6304		       a6 98		      ldx	currentSquare
     11  6306		       bd 7d f0 	      lda	Board+KINGSIDE,x
     12  6309		       85 a7		      sta	__piece
     13  630b
     14  630b		       29 0f		      and	#PIECE_MASK
     15  630d		       c9 05		      cmp	#ROOK
     16  630f		       d0 20		      bne	.noCastle
     17  6311
     18  6311		       a5 a7		      lda	__piece
     19  6313		       45 97		      eor	currentPiece
     20  6315		       30 1a		      bmi	.noCastle
     21  6317
     22  6317		       24 a7		      bit	__piece
     23  6319		       70 16		      bvs	.noCastle
     24  631b
     25  631b
     26  631b
     27  631b				  -	      IF	KINGSIDE = QUEENSIDE
     28  631b				  -	      lda	Board-3,x
     29  631b				  -	      bne	.noCastle
     30  631b				  -	      lda	Board-2,x
     31  631b				  -	      bne	.noCastle
     32  631b				  -	      lda	Board-1,x
     33  631b				  -	      bne	.noCastle
     34  631b				  -
     35  631b					      ENDIF
     36  631b
     37  631b					      IF	KINGSIDE = KINGSIDE
     38  631b		       bd 7c f0 	      lda	Board+2,x
     39  631e		       d0 11		      bne	.noCastle
     40  6320		       bd 7b f0 	      lda	Board+1,x
     41  6323		       d0 0c		      bne	.noCastle
     42  6325					      ENDIF
     43  6325
     44  6325
     45  6325
     46  6325
     47  6325
     48  6325
     49  6325
     50  6325
     51  6325		       a5 97		      lda	currentPiece
     52  6327		       09 10		      ora	#CASTLE
     53  6329		       85 97		      sta	currentPiece
     54  632b
     55  632b		       bc 18 f0 	      ldy	ValidSquare+2,x
     56  632e
     57  632e		       20 cc fc 	      jsr	AddMove
     58  6331				   .noCastle
      0  6331					      CASTLE	QUEENSIDE, -2
      1  6331
      2  6331
      3  6331
      4  6331
      5  6331
      6  6331
      7  6331
      8  6331
      9  6331
     10  6331		       a6 98		      ldx	currentSquare
     11  6333		       bd 76 f0 	      lda	Board+QUEENSIDE,x
     12  6336		       85 a7		      sta	__piece
     13  6338
     14  6338		       29 0f		      and	#PIECE_MASK
     15  633a		       c9 05		      cmp	#ROOK
     16  633c		       d0 25		      bne	.noCastle
     17  633e
     18  633e		       a5 a7		      lda	__piece
     19  6340		       45 97		      eor	currentPiece
     20  6342		       30 1f		      bmi	.noCastle
     21  6344
     22  6344		       24 a7		      bit	__piece
     23  6346		       70 1b		      bvs	.noCastle
     24  6348
     25  6348
     26  6348
     27  6348					      IF	QUEENSIDE = QUEENSIDE
     28  6348		       bd 77 f0 	      lda	Board-3,x
     29  634b		       d0 16		      bne	.noCastle
     30  634d		       bd 78 f0 	      lda	Board-2,x
     31  6350		       d0 11		      bne	.noCastle
     32  6352		       bd 79 f0 	      lda	Board-1,x
     33  6355		       d0 0c		      bne	.noCastle
     34  6357
     35  6357					      ENDIF
     36  6357
     37  6357				  -	      IF	QUEENSIDE = KINGSIDE
     38  6357				  -	      lda	Board+2,x
     39  6357				  -	      bne	.noCastle
     40  6357				  -	      lda	Board+1,x
     41  6357				  -	      bne	.noCastle
     42  6357					      ENDIF
     43  6357
     44  6357
     45  6357
     46  6357
     47  6357
     48  6357
     49  6357
     50  6357
     51  6357		       a5 97		      lda	currentPiece
     52  6359		       09 10		      ora	#CASTLE
     53  635b		       85 97		      sta	currentPiece
     54  635d
     55  635d		       bc 14 f0 	      ldy	ValidSquare+-2,x
     56  6360
     57  6360		       20 cc fc 	      jsr	AddMove
     58  6363				   .noCastle
    105  6363
    106  6363		       4c a1 fa 	      jmp	MoveReturn
    107  6366
    108  6366							;---------------------------------------------------------------------------------------------------
    109  6366							; EOF
------- FILE Handler_BANK1.asm
    110  6366
    111  6366
      0  6366					      OPTIONAL_PAGEBREAK	"Base64ToIndex", 64
     10  6366					      LIST	ON
      0  6366					      DEF	Base64ToIndex
      1  6366				   BANK_Base64ToIndex SET	_CURRENT_BANK
      2  6366
      3  6366				   Base64ToIndex
    114  6366							; Convert from 0-63 numbering into an index into the Chessboard
    115  6366
    116  6366		       16 17 18 19*	      .byte.b	22,23,24,25,26,27,28,29
    117  636e		       20 21 22 23*	      .byte.b	32,33,34,35,36,37,38,39
    118  6376		       2a 2b 2c 2d*	      .byte.b	42,43,44,45,46,47,48,49
    119  637e		       34 35 36 37*	      .byte.b	52,53,54,55,56,57,58,59
    120  6386		       3e 3f 40 41*	      .byte.b	62,63,64,65,66,67,68,69
    121  638e		       48 49 4a 4b*	      .byte.b	72,73,74,75,76,77,78,79
    122  6396		       52 53 54 55*	      .byte.b	82,83,84,85,86,87,88,89
    123  639e		       5c 5d 5e 5f*	      .byte.b	92,93,94,95,96,97,98,99
    124  63a6
    125  63a6
    126  63a6							;---------------------------------------------------------------------------------------------------
    127  63a6
      0  63a6					      DEF	PutAllPieces
      1  63a6				   BANK_PutAllPieces SET	_CURRENT_BANK
      2  63a6
      3  63a6				   PutAllPieces
    129  63a6							; Call SAFEly
    130  63a6
    131  63a6		       a0 63		      ldy	#99
    132  63a8				   .zeroBoard
    133  63a8		       b9 7a f0 	      lda	Board,y
    134  63ab		       20 8f fd 	      jsr	SAFE_PutPieceToBoard
    135  63ae
    136  63ae		       88		      dey
    137  63af		       10 f7		      bpl	.zeroBoard
    138  63b1		       60		      rts
    139  63b2
    140  63b2							;---------------------------------------------------------------------------------------------------
    141  63b2
      0  63b2					      DEF	CopySetupForMarker
      1  63b2				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  63b2
      3  63b2				   CopySetupForMarker
    143  63b2
    144  63b2							;lda #RAMBANK_MOVES_RAM
    145  63b2							;sta SET_BANK_RAM
    146  63b2
    147  63b2		       a5 80		      lda	drawPieceNumber
    148  63b4		       29 03		      and	#3	; shift position in PF
    149  63b6		       18		      clc
    150  63b7		       69 3c		      adc	#INDEX_WHITE_MARKER_on_BLACK_SQUARE_0
    151  63b9		       a8		      tay
    152  63ba		       60		      rts
    153  63bb
    154  63bb							;---------------------------------------------------------------------------------------------------
    155  63bb
      0  63bb					      DEF	CopySetup
      1  63bb				   BANK_CopySetup SET	_CURRENT_BANK
      2  63bb
      3  63bb				   CopySetup
    157  63bb
    158  63bb							; figure colouration of square
    159  63bb		       a5 80		      lda	drawPieceNumber	;0-63
    160  63bd		       4a		      lsr
    161  63be		       4a		      lsr
    162  63bf		       4a		      lsr
    163  63c0		       18		      clc
    164  63c1		       65 80		      adc	drawPieceNumber
    165  63c3		       29 01		      and	#1
    166  63c5		       49 01		      eor	#1
    167  63c7		       f0 02		      beq	.white
    168  63c9		       a9 20		      lda	#32
    169  63cb		       85 a7	   .white     sta	__pieceColour	; actually SQUARE black/white
    170  63cd
    171  63cd							; PieceColour = 0 for white square, 28 for black square
    172  63cd
    173  63cd							;lda #RAMBANK_MOVES_RAM
    174  63cd							;sta SET_BANK_RAM
    175  63cd
    176  63cd		       a4 80		      ldy	drawPieceNumber	;0-63
    177  63cf		       be 66 f3 	      ldx	Base64ToIndex,y
    178  63d2
    179  63d2		       bd 7a f0 	      lda	Board,x
    180  63d5		       0a		      asl
    181  63d6		       90 02		      bcc	.blackAdjust
    182  63d8		       09 10		      ora	#16
    183  63da		       4a	   .blackAdjust lsr
    184  63db		       29 0f		      and	#%1111
    185  63dd		       aa		      tax
    186  63de
    187  63de		       98		      tya
    188  63df		       29 03		      and	#3	; shift position in PF
    189  63e1
    190  63e1		       18		      clc
    191  63e2		       7d ea f3 	      adc	PieceToShape,x
    192  63e5		       18		      clc
    193  63e6		       65 a7		      adc	__pieceColour
    194  63e8		       a8		      tay
    195  63e9		       60		      rts
    196  63ea
    197  63ea				   PieceToShape
    198  63ea
    199  63ea		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    200  63eb		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    201  63ec		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    202  63ed		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    203  63ee		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    204  63ef		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    205  63f0		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    206  63f1		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    207  63f2
    208  63f2		       40		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    209  63f3		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    210  63f4		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    211  63f5		       48		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    212  63f6		       4c		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    213  63f7		       50		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    214  63f8		       54		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    215  63f9		       58		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    216  63fa
    217  63fa
    218  63fa							;---------------------------------------------------------------------------------------------------
    219  63fa
    220  63fa
      0  63fa					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  63fa
      2  63fa
      3  63fa		       03 fa	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3fa , FREE= $6
      4  63fa					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  63fa				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  63fa				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  63fa				  -	      ERR
      8  63fa					      endif
    222  63fa
    223  63fa
    224  63fa							; There is space here (1K) for use as ROM
    225  63fa							; but NOT when the above bank is switched in as RAM, of course!
    226  63fa
    227  63fa
    228  63fa
    229  63fa
    230  63fa							;---------------------------------------------------------------------------------------------------
    231  63fa							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 2
      0  63fa					      include	"ply.asm"
      1  63fa							; Copyright (C)2020 Andrew Davie
      2  63fa							; andrew@taswegian.com
      3  63fa
      4  63fa							;---------------------------------------------------------------------------------------------------
      5  63fa							; Define the RAM banks
      6  63fa							; A "PLY" bank represents all the data required on any single ply of the search tree.
      7  63fa							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      8  63fa							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
      9  63fa							; they act as independant switchable banks usable for data on each ply during the search.
     10  63fa							; A ply will hold the move list for that position
     11  63fa
     12  63fa
     13  63fa		       00 06	   MAX_PLY    =	6
      0  63fa					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  63fa
      2  63fa
      3  63fa
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     17 U3800					      REPEND
     18 U3800
     19 U3800							;---------------------------------------------------------------------------------------------------
     20 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     21 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  6bad ????				      SEG	BANK_PLY
      2  6800					      ORG	ORIGIN
      3  6800					      RORG	$F000
      4  6800				   BANK_START SET	*
      5  6800				   BANK_PLY   SET	ORIGIN / 2048
      6  6800				   ORIGIN     SET	ORIGIN + 2048
      7  6800				   _CURRENT_BANK SET	BANK_PLY
     23  6800
     24  6800
     25  6800							;---------------------------------------------------------------------------------------------------
     26  6800							; The piece-lists
     27  6800							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     28  6800							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     29  6800							; but this needs to be initialised programatically on new game.
     30  6800
     31  6800							; We have TWO piecelists, in different banks
     32  6800							; WHITE pieces in bank BANK_PLY
     33  6800							; BLACK pieces in bank BANK_PLY+1
     34  6800
      0  6800					      OPTIONAL_PAGEBREAK	"PieceLists", 48
     10  6800					      LIST	ON
     36  6800
     37  6800		       00 00 00 00*SortedPieceList ds	16	; indexes into PieceSquare, PieceType.  NEG = no piece
     38  6810		       00 00 00 00*PieceSquare ds	16
     39  6820		       00 00 00 00*PieceType  ds	16
     40  6830
     41  6830		       00	   PieceListPtr ds	1
     42  6831
     43  6831							;---------------------------------------------------------------------------------------------------
     44  6831
     45  6831		       7f ff	   infinity   =	32767
     46  6831
     47  6831		       00 00	   plyValue   ds	2	; 16-bit signed score value
     48  6833		       00	   bestMove   ds	1	; index of move (-1 = none)
     49  6834
     50  6834				  -	      if	0
     51  6834				  -			; reverting a move
     52  6834				  -			; from/to/piece/toOriginal
     53  6834				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     54  6834				  -			; en-passant
     55  6834				  -
     56  6834				  -from/to/piece
     57  6834				  -
     58  6834				  -
     59  6834				  -from       =	piece
     60  6834				  -to	      =	originalPiece
     61  6834				  -from2      =	piece2
     62  6834				  -to2	      =	originalPiece2
     63  6834				  -
     64  6834				  -
     65  6834				  -
     66  6834				  -so,	      normal	move (N)
     67  6834				  -
     68  6834				  -B1	      =	knight
     69  6834				  -C3	      =	blank
     70  6834				  -null/null
     71  6834				  -
     72  6834				  -pawn       promot	with capture
     73  6834				  -A7	      =	WP
     74  6834				  -B8	      =	BLACK_ROOK
     75  6834				  -
     76  6834				  -
     77  6834				  -castle
     78  6834				  -E1	      =	king
     79  6834				  -G1	      =	blank
     80  6834				  -H1	      =	rook
     81  6834				  -F1	      =	blank
     82  6834				  -
     83  6834				  -
     84  6834				  -en-passant
     85  6834				  -B4	      =	P
     86  6834				  -A3	      =	blank
     87  6834				  -A4	      =	P
     88  6834				  -A3	      =	blank
     89  6834				  -
     90  6834				  -FROM
     91  6834				  -TO
     92  6834				  -CAPTURED_PIECE
     93  6834				  -ORIG_PIECE
     94  6834				  -FROM2
     95  6834				  -TO2
     96  6834				  -PIECE2
     97  6834				  -
     98  6834				  -board[FROM] =	ORIG_PIECE
     99  6834				  -board[TO]  =	CAPTURED_PIECE
    100  6834				  -
    101  6834				  -value      =	-new_piece + orig_piece - captured_piece
    102  6834				  -
    103  6834				  -
    104  6834					      endif
    105  6834
    106  6834
    107  6834
    108  6834
    109  6834
    110  6834
    111  6834
    112  6834
    113  6834
    114  6834
    115  6834							;---------------------------------------------------------------------------------------------------
    116  6834
    117  6834							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
    118  6834							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
    119  6834
    120  6834		       00	   enPassantSquare ds	1
    121  6835
    122  6835							;---------------------------------------------------------------------------------------------------
    123  6835							; Move tables hold piece moves for this current ply
    124  6835
    125  6835		       00	   moveIndex  ds	1	; points to first available 'slot' for move storage
    126  6836
    127  6836
    128  6836		       00 80	   MAX_MOVES  =	128
    129  6836
      0  6836					      OPTIONAL_PAGEBREAK	"MoveFrom", MAX_MOVES
     10  6836					      LIST	ON
      0  6836					      DEF	MoveFrom
      1  6836				   BANK_MoveFrom SET	_CURRENT_BANK
      2  6836
      3  6836				   MoveFrom
    132  6836		       00 00 00 00*	      ds	MAX_MOVES
    133  68b6
      0  68b6					      OPTIONAL_PAGEBREAK	"MoveTo", MAX_MOVES
 PAGE BREAK INSERTED FOR  MoveTo
 REQUESTED SIZE =  $80
 WASTED SPACE =  $4a
 PAGEBREAK LOCATION =  $f100
     10  6900					      LIST	ON
      0  6900					      DEF	MoveTo
      1  6900				   BANK_MoveTo SET	_CURRENT_BANK
      2  6900
      3  6900				   MoveTo
    136  6900		       00 00 00 00*	      ds	MAX_MOVES
    137  6980
      0  6980					      OPTIONAL_PAGEBREAK	"MovePiece", MAX_MOVES
     10  6980					      LIST	ON
      0  6980					      DEF	MovePiece
      1  6980				   BANK_MovePiece SET	_CURRENT_BANK
      2  6980
      3  6980				   MovePiece
    140  6980		       00 00 00 00*	      ds	MAX_MOVES
    141  6a00
    142  6a00							;---------------------------------------------------------------------------------------------------
    143  6a00
      0  6a00					      DEF	InitPieceLists
      1  6a00				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  6a00
      3  6a00				   InitPieceLists
    145  6a00
    146  6a00		       a9 ff		      lda	#-1
    147  6a02		       8d 30 f4 	      sta	PieceListPtr+RAM_WRITE
    148  6a05
    149  6a05		       a2 0f		      ldx	#15
    150  6a07		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    151  6a0a		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    152  6a0d		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    153  6a10		       ca		      dex
    154  6a11		       10 f4		      bpl	.clearLists
    155  6a13
    156  6a13							; General inits that are moved out of FIXED....
    157  6a13
    158  6a13
    159  6a13		       a9 07		      lda	#%111	; 111= quad
    160  6a15		       85 44		      sta	NUSIZ0
    161  6a17		       85 45		      sta	NUSIZ1	; quad-width
    162  6a19
    163  6a19
    164  6a19
    165  6a19
    166  6a19		       a9 04		      lda	#%00000100
    167  6a1b		       85 4a		      sta	CTRLPF
    168  6a1d		       a9 00		      lda	#BACKGCOL
    169  6a1f		       85 49		      sta	COLUBK
    170  6a21
    171  6a21		       a9 00		      lda	#0
    172  6a23		       85 8f		      sta	aiPhase
    173  6a25
    174  6a25		       60		      rts
    175  6a26
    176  6a26
    177  6a26							;---------------------------------------------------------------------------------------------------
    178  6a26
    179  6a26					      if	ASSERTS
    180  6a26
      0  6a26					      DEF	checkPiecesBank
      1  6a26				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  6a26
      3  6a26				   checkPiecesBank
    182  6a26							; odd usage - switches between concurrent bank code
    183  6a26
    184  6a26		       a2 0f		      ldx	#15
    185  6a28		       a5 a8	   .check     lda	__bank
    186  6a2a		       85 3e		      sta	SET_BANK_RAM
    187  6a2c		       bc 10 f0 	      ldy	PieceSquare,x
    188  6a2f		       f0 0d		      beq	.nonehere
    189  6a31
    190  6a31		       86 a7		      stx	__x
    191  6a33
    192  6a33		       20 3c fd 	      jsr	SAFE_GetPieceFromBoard
    193  6a36		       f0 fe	   .fail      beq	.fail
    194  6a38		       c9 ff		      cmp	#-1
    195  6a3a		       f0 fe	   .fail2     beq	.fail2
    196  6a3c
    197  6a3c		       a6 a7		      ldx	__x
    198  6a3e
    199  6a3e		       ca	   .nonehere  dex
    200  6a3f		       10 e7		      bpl	.check
    201  6a41		       60		      rts
    202  6a42
    203  6a42
      0  6a42					      DEF	DIAGNOSTIC_checkPieces
      1  6a42				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  6a42
      3  6a42				   DIAGNOSTIC_checkPieces
    205  6a42							; SAFE call
    206  6a42							; DIAGNOSTIC ONLY
    207  6a42							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    208  6a42
    209  6a42		       a9 09		      lda	#RAMBANK_PLY
    210  6a44		       85 a8		      sta	__bank
    211  6a46		       20 26 f2 	      jsr	checkPiecesBank
    212  6a49		       e6 a8		      inc	__bank
    213  6a4b		       20 26 f2 	      jsr	checkPiecesBank
    214  6a4e		       60		      rts
    215  6a4f
    216  6a4f					      endif
    217  6a4f
    218  6a4f							;---------------------------------------------------------------------------------------------------
    219  6a4f
    220  6a4f					      if	!TEST_POSITION
    221  6a4f				   InitPieceList
    222  6a4f
    223  6a4f		       06 19		      .byte.b	WHITE|Q, 25
    224  6a51		       04 18		      .byte.b	WHITE|B, 24
    225  6a53		       04 1b		      .byte.b	WHITE|B, 27
    226  6a55		       05 16		      .byte.b	WHITE|R, 22
    227  6a57		       05 1d		      .byte.b	WHITE|R, 29
    228  6a59		       03 17		      .byte.b	WHITE|N, 23
    229  6a5b		       03 1c		      .byte.b	WHITE|N, 28
    230  6a5d
    231  6a5d		       01 23		      .byte.b	WHITE|WP, 35
    232  6a5f		       01 24		      .byte.b	WHITE|WP, 36
    233  6a61		       01 22		      .byte.b	WHITE|WP, 34
    234  6a63		       01 25		      .byte.b	WHITE|WP, 37
    235  6a65		       01 21		      .byte.b	WHITE|WP, 33
    236  6a67		       01 26		      .byte.b	WHITE|WP, 38
    237  6a69		       01 20		      .byte.b	WHITE|WP, 32
    238  6a6b		       01 27		      .byte.b	WHITE|WP, 39
    239  6a6d
    240  6a6d		       07 1a		      .byte.b	WHITE|K, 26
    241  6a6f
    242  6a6f		       86 5f		      .byte.b	BLACK|Q, 95
    243  6a71		       84 5e		      .byte.b	BLACK|B, 94
    244  6a73		       84 61		      .byte.b	BLACK|B, 97
    245  6a75		       85 5c		      .byte.b	BLACK|R, 92
    246  6a77		       85 63		      .byte.b	BLACK|R, 99
    247  6a79		       83 5d		      .byte.b	BLACK|N, 93
    248  6a7b		       83 62		      .byte.b	BLACK|N, 98
    249  6a7d
    250  6a7d		       82 55		      .byte.b	BLACK|BP, 85
    251  6a7f		       82 56		      .byte.b	BLACK|BP, 86
    252  6a81		       82 54		      .byte.b	BLACK|BP, 84
    253  6a83		       82 57		      .byte.b	BLACK|BP, 87
    254  6a85		       82 53		      .byte.b	BLACK|BP, 83
    255  6a87		       82 58		      .byte.b	BLACK|BP, 88
    256  6a89		       82 52		      .byte.b	BLACK|BP, 82
    257  6a8b		       82 59		      .byte.b	BLACK|BP, 89
    258  6a8d
    259  6a8d		       87 60		      .byte.b	BLACK|K, 96
    260  6a8f
    261  6a8f		       00		      .byte.b	0	;end
    262  6a90
    263  6a90					      endif
    264  6a90
    265  6a90				  -	      if	TEST_POSITION
    266  6a90				  -WhitePiecelist
    267  6a90				  -	      .byte	65,0,0,0,0,0,0,0
    268  6a90				  -	      .byte	0,0,0,0,0,0,0,0
    269  6a90				  -
    270  6a90				  -BlackPiecelist
    271  6a90				  -	      .byte	66,0,0,0,0,0,0,0
    272  6a90				  -	      .byte	0,0,0,0,0,0,0,0
    273  6a90					      endif
    274  6a90
    275  6a90
    276  6a90
    277  6a90							;---------------------------------------------------------------------------------------------------
    278  6a90
    279  6a90
      0  6a90					      DEF	NewPlyInitialise
      1  6a90				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  6a90
      3  6a90				   NewPlyInitialise
    281  6a90
    282  6a90							; This MUST be called at the start of a new ply
    283  6a90							; It initialises the movelist to empty
    284  6a90
    285  6a90		       a2 ff		      ldx	#-1
    286  6a92		       8e 35 f4 	      stx	moveIndex+RAM_WRITE	; no valid moves
    287  6a95		       8d 33 f4 	      sta	bestMove+RAM_WRITE
    288  6a98
    289  6a98					      if	!TEST_POSITION
    290  6a98		       a9 00		      lda	#0
    291  6a9a					      endif
    292  6a9a
    293  6a9a				  -	      if	TEST_POSITION
    294  6a9a				  -	      lda	#66
    295  6a9a					      endif
    296  6a9a		       8d 34 f4 	      sta	enPassantSquare+RAM_WRITE	; no enPassant available
    297  6a9d
    298  6a9d
    299  6a9d							; The evaluation of the current position is a signed 16-bit number
    300  6a9d							; +ve is good for the current side.
    301  6a9d							; This is used during the alpha-beta search for finding best position
    302  6a9d
    303  6a9d		       a9 01		      lda	#<(-infinity)
    304  6a9f		       8d 31 f4 	      sta	plyValue+RAM_WRITE
    305  6aa2		       a9 80		      lda	#>(-infinity)
    306  6aa4		       8d 32 f4 	      sta	plyValue+RAM_WRITE+1
    307  6aa7
    308  6aa7
    309  6aa7		       a9 00		      lda	#0
    310  6aa9		       85 9d		      sta	piecelistIndex
    311  6aab
    312  6aab		       60		      rts
    313  6aac
    314  6aac
    315  6aac							;---------------------------------------------------------------------------------------------------
    316  6aac
      0  6aac					      DEF	GenerateMovesForNextPiece
      1  6aac				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  6aac
      3  6aac				   GenerateMovesForNextPiece
    318  6aac
    319  6aac		       a5 9d		      lda	piecelistIndex
    320  6aae		       29 0f		      and	#15
    321  6ab0		       aa		      tax
    322  6ab1
    323  6ab1		       a5 9e		      lda	sideToMove
    324  6ab3		       0a		      asl
    325  6ab4		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    326  6ab6		       69 00		      adc	#0
    327  6ab8		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    328  6aba
    329  6aba		       bd 10 f0 	      lda	PieceSquare,x
    330  6abd		       f0 05		      beq	.noPieceHere	; piece deleted
    331  6abf		       85 98		      sta	currentSquare
    332  6ac1
    333  6ac1		       20 7e fa 	      jsr	MoveForSinglePiece
    334  6ac4
    335  6ac4		       e6 9d	   .noPieceHere inc	piecelistIndex
    336  6ac6		       60		      rts
    337  6ac7
    338  6ac7							;---------------------------------------------------------------------------------------------------
    339  6ac7
      0  6ac7					      DEF	FixPieceList
      1  6ac7				   BANK_FixPieceList SET	_CURRENT_BANK
      2  6ac7
      3  6ac7				   FixPieceList
    341  6ac7
    342  6ac7							; uses OVERLAY Overlay001
    343  6ac7							; fromX12	      X12 square piece moved from
    344  6ac7							; toX12	      X12 square piece moved to (0 to erase piece from list)
    345  6ac7
    346  6ac7							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    347  6ac7							; Eventually this will have to be more sophisticated when moves (like castling) involve
    348  6ac7							; more than one piece.
    349  6ac7
    350  6ac7							; TODO: this is slow and should use a pointer to pieces instead
    351  6ac7
    352  6ac7
    353  6ac7		       a2 0f		      ldx	#15
    354  6ac9		       a5 86		      lda	fromX12
    355  6acb		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    356  6ace		       f0 04		      beq	.adjustPiece
    357  6ad0		       ca		      dex
    358  6ad1		       10 f8		      bpl	.pieceCheck
    359  6ad3		       60		      rts
    360  6ad4
    361  6ad4		       a5 87	   .adjustPiece lda	toX12
    362  6ad6		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    363  6ad9		       60		      rts
    364  6ada
    365  6ada							;---------------------------------------------------------------------------------------------------
    366  6ada
    367  6ada				  -	      if	0
    368  6ada				  -	      DEF	DeletePiece
    369  6ada				  -
    370  6ada				  -	      lda	fromX12
    371  6ada				  -	      ldy	toX12
    372  6ada				  -
    373  6ada				  -			;		  lda sideToMove
    374  6ada				  -			;		  eor #128
    375  6ada				  -			;		  asl
    376  6ada				  -			;		  adc #RAMBANK_PLY
    377  6ada				  -	      lda	currentPly
    378  6ada				  -	      sta	SET_BANK_RAM
    379  6ada				  -
    380  6ada				  -	      lda	toX12
    381  6ada				  -	      jsr	DeletePiece
    382  6ada					      endif
    383  6ada
    384  6ada							;---------------------------------------------------------------------------------------------------
    385  6ada
      0  6ada					      DEF	alphaBeta
      1  6ada				   BANK_alphaBeta SET	_CURRENT_BANK
      2  6ada
      3  6ada				   alphaBeta
    387  6ada
    388  6ada		       60		      rts
    389  6adb		       e6 9c		      inc	currentPly
    390  6add		       a5 9c		      lda	currentPly
    391  6adf
    392  6adf		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    393  6ae1		       f0 31		      beq	.bottomOut	; at a leaf node of the search?
    394  6ae3		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    395  6ae5
    396  6ae5		       a5 9e		      lda	sideToMove
    397  6ae7		       49 80		      eor	#128
    398  6ae9		       85 9e		      sta	sideToMove
    399  6aeb
    400  6aeb		       20 90 f2 	      jsr	NewPlyInitialise
    401  6aee
    402  6aee		       a5 9c		      lda	currentPly
    403  6af0		       85 3e		      sta	SET_BANK_RAM
    404  6af2
    405  6af2		       a9 00		      lda	#0
    406  6af4		       85 9d		      sta	piecelistIndex
    407  6af6		       20 ac f2    iterPieces jsr	GenerateMovesForNextPiece
    408  6af9		       a5 9d		      lda	piecelistIndex
    409  6afb		       c9 0f		      cmp	#15
    410  6afd		       d0 f7		      bne	iterPieces
    411  6aff
    412  6aff							; Perform a recursive search
    413  6aff							; simulate alpha-beta cull to just 7 moves per node
    414  6aff
    415  6aff					      REPEAT	7
    416  6aff							;jsr PhysicallyMovePiece
    417  6aff							;jsr FinaliseMove
    418  6aff		       20 da f2 	      jsr	alphaBeta
    415  6aff					      REPEND
    416  6b02							;jsr PhysicallyMovePiece
    417  6b02							;jsr FinaliseMove
    418  6b02		       20 da f2 	      jsr	alphaBeta
    415  6b02					      REPEND
    416  6b05							;jsr PhysicallyMovePiece
    417  6b05							;jsr FinaliseMove
    418  6b05		       20 da f2 	      jsr	alphaBeta
    415  6b05					      REPEND
    416  6b08							;jsr PhysicallyMovePiece
    417  6b08							;jsr FinaliseMove
    418  6b08		       20 da f2 	      jsr	alphaBeta
    415  6b08					      REPEND
    416  6b0b							;jsr PhysicallyMovePiece
    417  6b0b							;jsr FinaliseMove
    418  6b0b		       20 da f2 	      jsr	alphaBeta
    415  6b0b					      REPEND
    416  6b0e							;jsr PhysicallyMovePiece
    417  6b0e							;jsr FinaliseMove
    418  6b0e		       20 da f2 	      jsr	alphaBeta
    415  6b0e					      REPEND
    416  6b11							;jsr PhysicallyMovePiece
    417  6b11							;jsr FinaliseMove
    418  6b11		       20 da f2 	      jsr	alphaBeta
    419  6b14					      REPEND
    420  6b14
    421  6b14				   .bottomOut
    422  6b14
    423  6b14							; TODO: evaluate board position
    424  6b14							; reverse move to previous position
    425  6b14							; check the results, update scores and move pointers
    426  6b14							; and return vars to expected
    427  6b14
    428  6b14		       a5 9e		      lda	sideToMove
    429  6b16		       49 80		      eor	#128
    430  6b18		       85 9e		      sta	sideToMove
    431  6b1a
    432  6b1a		       c6 9c		      dec	currentPly
    433  6b1c		       a5 9c		      lda	currentPly
    434  6b1e		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    435  6b20
    436  6b20		       60		      rts
    437  6b21
    438  6b21							;---------------------------------------------------------------------------------------------------
    439  6b21
      0  6b21					      DEF	RevertMove
      1  6b21				   BANK_RevertMove SET	_CURRENT_BANK
      2  6b21
      3  6b21				   RevertMove
    441  6b21
    442  6b21							; backtrack after a move, restoring things to the way they were
    443  6b21
    444  6b21
    445  6b21
    446  6b21
    447  6b21
    448  6b21
    449  6b21
    450  6b21
    451  6b21		       60		      rts
    452  6b22
    453  6b22
    454  6b22							;---------------------------------------------------------------------------------------------------
    455  6b22
      0  6b22					      DEF	MoveViaListAtPly
      1  6b22				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  6b22
      3  6b22				   MoveViaListAtPly
    457  6b22
    458  6b22		       ad 35 f0 	      lda	moveIndex
    459  6b25		       c9 ff		      cmp	#-1
    460  6b27		       f0 41		      beq	halted	; no valid moves
    461  6b29
    462  6b29		       a8		      tay		; loop count
    463  6b2a		       c0 00		      cpy	#0
    464  6b2c		       f0 17		      beq	muldone
    465  6b2e		       c8		      iny
    466  6b2f
      0  6b2f					      NEXT_RANDOM
      1  6b2f		       a5 81		      lda	rnd
      2  6b31		       4a		      lsr
      3  6b32		       90 02		      bcc	.skipEOR
      4  6b34		       49 fe		      eor	#RND_EOR_VAL
      5  6b36		       85 81	   .skipEOR   sta	rnd
    468  6b38
    469  6b38		       a2 00		      ldx	#0
    470  6b3a		       a9 00		      lda	#0
    471  6b3c		       18	   .mulx      clc
    472  6b3d		       65 81		      adc	rnd
    473  6b3f		       90 01		      bcc	.nover
    474  6b41		       e8		      inx
    475  6b42		       88	   .nover     dey
    476  6b43		       d0 f7		      bne	.mulx
    477  6b45				   muldone
    478  6b45
    479  6b45							; fall through...
    480  6b45							;---------------------------------------------------------------------------------------------------
    481  6b45
      0  6b45					      DEF	PhysicallyMovePiece
      1  6b45				   BANK_PhysicallyMovePiece SET	_CURRENT_BANK
      2  6b45
      3  6b45				   PhysicallyMovePiece
    483  6b45
    484  6b45				   .foundMove
    485  6b45		       bd 36 f0 	      lda	MoveFrom,x
    486  6b48		       85 9f		      sta	fromSquare
    487  6b4a		       85 86		      sta	fromX12
    488  6b4c		       bd 00 f1 	      lda	MoveTo,x
    489  6b4f		       85 a1		      sta	toSquare
    490  6b51		       85 87		      sta	toX12
    491  6b53
    492  6b53
    493  6b53							; If en-passant flag set (pawn doing opening double-move) then record its square as the
    494  6b53							; en-passant square for the ply.
    495  6b53
    496  6b53				  -	      if	0
    497  6b53				  -	      TODO	BANK/BUGGERED AFTER
    498  6b53				  -	      lda	currentPly
    499  6b53				  -	      sta	SET_BANK_RAM
    500  6b53				  -
    501  6b53				  -	      ldy	#0
    502  6b53				  -	      lda	MovePiece,x
    503  6b53				  -	      and	#ENPASSANT
    504  6b53				  -	      beq	.notEP
    505  6b53				  -	      ldy	toSquare
    506  6b53				  -.notEP     sty	enPassantSquare+RAM_WRITE
    507  6b53				  -
    508  6b53					      endif
    509  6b53
    510  6b53
    511  6b53		       bd 80 f1 	      lda	MovePiece,x
    512  6b56		       29 df		      and	#~ENPASSANT	;? unsure
    513  6b58		       09 40		      ora	#MOVED	; piece has now been moved (flag used for castling checks)
    514  6b5a		       85 a0		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    515  6b5c
    516  6b5c
    517  6b5c		       a5 9f		      lda	fromSquare
    518  6b5e		       20 6b f3 	      jsr	ConvertToBase64
    519  6b61		       85 9f		      sta	fromSquare	;B64
    520  6b63
    521  6b63		       a5 a1		      lda	toSquare
    522  6b65		       20 6b f3 	      jsr	ConvertToBase64
    523  6b68		       85 a1		      sta	toSquare	;B64
    524  6b6a
    525  6b6a		       60	   halted     rts
    526  6b6b
    527  6b6b							;---------------------------------------------------------------------------------------------------
    528  6b6b
      0  6b6b					      DEF	ConvertToBase64
      1  6b6b				   BANK_ConvertToBase64 SET	_CURRENT_BANK
      2  6b6b
      3  6b6b				   ConvertToBase64
    530  6b6b							; uses OVERLAY "Movers"
    531  6b6b
    532  6b6b							; convert from 10x12 square numbering (0-119) to 8x8 square numbering (0-63)
    533  6b6b
    534  6b6b		       38		      sec
    535  6b6c		       e9 16		      sbc	#22
    536  6b6e
    537  6b6e		       a2 ff		      ldx	#$FF
    538  6b70		       e9 0a	   .conv64    sbc	#10
    539  6b72		       e8		      inx
    540  6b73		       b0 fb		      bcs	.conv64
    541  6b75		       69 0a		      adc	#10
    542  6b77
    543  6b77		       85 a9		      sta	__temp
    544  6b79		       8a		      txa
    545  6b7a		       0a		      asl
    546  6b7b		       0a		      asl
    547  6b7c		       0a		      asl
    548  6b7d		       05 a9		      ora	__temp
    549  6b7f		       a8		      tay
    550  6b80
    551  6b80							; A = column (0-7)
    552  6b80							; X = row (0-7)
    553  6b80
    554  6b80		       60		      rts
    555  6b81
    556  6b81							;---------------------------------------------------------------------------------------------------
    557  6b81
      0  6b81					      DEF	CheckMoveListFromSquare
      1  6b81				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  6b81
      3  6b81				   CheckMoveListFromSquare
    559  6b81
    560  6b81							; X12 in A
    561  6b81							; y = -1 on return if NOT FOUND
    562  6b81
    563  6b81		       ac 35 f0 	      ldy	moveIndex
    564  6b84		       30 0d		      bmi	.failed
    565  6b86
    566  6b86		       d9 36 f0    .scan      cmp	MoveFrom,y
    567  6b89		       f0 03		      beq	.scanned
    568  6b8b		       88		      dey
    569  6b8c		       10 f8		      bpl	.scan
    570  6b8e
    571  6b8e		       b9 80 f1    .scanned   lda	MovePiece,y
    572  6b91		       85 a6		      sta	aiPiece
    573  6b93
    574  6b93		       60	   .failed    rts
    575  6b94
    576  6b94
    577  6b94							;---------------------------------------------------------------------------------------------------
    578  6b94
      0  6b94					      DEF	CheckMoveListToSquare
      1  6b94				   BANK_CheckMoveListToSquare SET	_CURRENT_BANK
      2  6b94
      3  6b94				   CheckMoveListToSquare
    580  6b94					      SUBROUTINE
    581  6b94
    582  6b94							; X12 in A
    583  6b94							; y = -1 on return if NOT FOUND
    584  6b94
    585  6b94		       ac 35 f0 	      ldy	moveIndex
    586  6b97		       30 13		      bmi	.sout
    587  6b99		       d9 00 f1    .scan      cmp	MoveTo,y
    588  6b9c		       d0 09		      bne	.xscanned
    589  6b9e
    590  6b9e		       48		      pha
    591  6b9f		       b9 36 f0 	      lda	MoveFrom,y
    592  6ba2		       c5 93		      cmp	aiFromSquareX12
    593  6ba4		       f0 05		      beq	.scanned
    594  6ba6		       68		      pla
    595  6ba7
    596  6ba7		       88	   .xscanned  dey
    597  6ba8		       10 ef		      bpl	.scan
    598  6baa		       48		      pha
    599  6bab
    600  6bab		       68	   .scanned   pla
    601  6bac		       60	   .sout      rts
    602  6bad
    603  6bad
      0  6bad					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  6bad
      2  6bad
      3  6bad		       03 ad	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3ad , FREE= $53
      4  6bad					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  6bad				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  6bad				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  6bad				  -	      ERR
      8  6bad					      endif
    605  6bad
    606  6bad							;---------------------------------------------------------------------------------------------------
    607  6bad
    608  6bad							; There is space here (1K) for use as ROM
    609  6bad							; but NOT when the above bank is switched in as RAM, of course!
    610  6bad
    611  6bad
    612  6bad
    613  6bad
    614  6bad							;---------------------------------------------------------------------------------------------------
    615  6bad							; EOF
------- FILE ./chess.asm
    364  6bad
    365  6bad							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  6bad					      include	"BANK_FIXED.asm"
      1  6bad							; Chess
      2  6bad							; Atari 2600 Chess display system
      3  6bad							; Copyright (c) 2019-2020 Andrew Davie
      4  6bad							; andrew@taswegian.com
      5  6bad
      6  6bad
      7  6bad							;---------------------------------------------------------------------------------------------------
      8  6bad							;#########################################  FIXED BANK  ############################################
      9  6bad							;---------------------------------------------------------------------------------------------------
     10  6bad
     11  6bad				   ORIGIN     SET	FIXED_BANK
     12  6bad
      0  6bad					      NEWBANK	THE_FIXED_BANK
      1  7f64 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     14  7800					      RORG	$f800
     15  7800
     16  7800							;---------------------------------------------------------------------------------------------------
     17  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800
      3  7800				   Reset
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 02		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;lda #BANK_TitleScreen
     34  780e							;sta SET_BANK
     35  780e							;jsr TitleScreen
     36  780e
     37  780e
     38  780e							; Move a copy of the row bank template to the first 8 banks of RAM
     39  780e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     40  780e
      0  780e					      JSRAM_SAFE	SetupBanks
      1  780e
      2  780e
      3  780e
      4  780e		       a9 00		      lda	#BANK_SetupBanks
      5  7810		       85 8e		      sta	savedBank
      6  7812		       85 3f		      sta	SET_BANK
      7  7814		       20 18 f1 	      jsr	SetupBanks
     42  7817
     43  7817							; Patch the final row's "loop" to a RTS
     44  7817
     45  7817		       a2 07		      ldx	#7
     46  7819		       86 3e		      stx	SET_BANK_RAM
     47  781b		       a9 60		      lda	#$60	; rts
     48  781d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     49  7820
     50  7820
     51  7820		       a5 9c		      lda	currentPly
     52  7822		       85 3e		      sta	SET_BANK_RAM
     53  7824		       20 90 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     54  7827
     55  7827		       a9 09		      lda	#RAMBANK_PLY
     56  7829		       85 3e		      sta	SET_BANK_RAM
     57  782b		       20 eb fc 	      jsr	InitialisePieceSquares
     58  782e
     59  782e		       20 43 fe 	      jsr	InitialiseChessboard
     60  7831
     61  7831							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     62  7831
     63  7831		       a9 00		      lda	#0
     64  7833		       85 82		      sta	drawPhase
     65  7835
     66  7835							;---------------------------------------------------------------------------------------------------
     67  7835
     68  7835							;RESYNC
     69  7835				   .StartFrame
     70  7835
     71  7835
     72  7835							; START OF FRAME
     73  7835
     74  7835		       a9 0e		      lda	#%1110	; VSYNC ON
     75  7837		       85 42	   .loopVSync3 sta	WSYNC
     76  7839		       85 40		      sta	VSYNC
     77  783b		       4a		      lsr
     78  783c		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     79  783e
     80  783e		       a0 37		      ldy	#55	;VBLANK_TIM_NTSC
     81  7840		       8c 96 02 	      sty	TIM64T
     82  7843
     83  7843							; LOTS OF PROCESSING TIME - USE IT
     84  7843
     85  7843		       a2 00		      ldx	#0
     86  7845		       86 41		      stx	VBLANK
     87  7847
     88  7847
     89  7847					      IF	ASSERTS
     90  7847							;		      lda #$C2
     91  7847							;		      sta COLUBK		      ; colour timing band top of screen
     92  7847					      ENDIF
     93  7847
     94  7847		       a9 0a		      lda	#STATEMACHINE
     95  7849		       85 3f		      sta	SET_BANK
     96  784b		       20 a3 f8    STATEMAC   jsr	AiStateMachine
     97  784e
     98  784e		       20 b8 f8 	      jsr	SAFE_PhasedProcessor
     99  7851
    100  7851					      IF	ASSERTS
    101  7851							;		      lda #0
    102  7851							;		      sta COLUBK		      ; end of timing band
    103  7851					      ENDIF
    104  7851
    105  7851					      if	ASSERTS
    106  7851							; Catch timer expired already
    107  7851		       2c 85 02 	      bit	TIMINT
    108  7854							;.whoops	      bmi .whoops
    109  7854					      endif
    110  7854
    111  7854
    112  7854		       2c 85 02    .wait      bit	TIMINT
    113  7857		       10 fb		      bpl	.wait
    114  7859
    115  7859
    116  7859
    117  7859							; START OF VISIBLE SCANLINES
    118  7859
    119  7859		       85 42		      sta	WSYNC
    120  785b
    121  785b		       20 0b f9 	      jsr	_rts
    122  785e		       20 0b f9 	      jsr	_rts
    123  7861		       20 0b f9 	      jsr	_rts
    124  7864		       20 0b f9 	      jsr	_rts
      0  7867					      SLEEP	3
      1  7867				   .CYCLES    SET	3
      2  7867
      3  7867				  -	      IF	.CYCLES < 2
      4  7867				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  7867				  -	      ERR
      6  7867					      ENDIF
      7  7867
      8  7867					      IF	.CYCLES & 1
      9  7867					      IFNCONST	NO_ILLEGAL_OPCODES
     10  7867		       04 00		      nop	0
     11  7869				  -	      ELSE
     12  7869				  -	      bit	VSYNC
     13  7869					      ENDIF
     14  7869				   .CYCLES    SET	.CYCLES - 3
     15  7869					      ENDIF
     16  7869
     17  7869				  -	      REPEAT	.CYCLES / 2
     18  7869				  -	      nop
     19  7869					      REPEND
    126  7869
    127  7869		       a2 00		      ldx	#0
    128  786b		       86 41		      stx	VBLANK
    129  786d
    130  786d		       86 3e		      stx	SET_BANK_RAM
    131  786f		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    132  7872
    133  7872		       a9 42		      lda	#%01000010	; bit6 is not required
    134  7874		       85 41		      sta	VBLANK	; end of screen - enter blanking
    135  7876
    136  7876		       a9 00		      lda	#0
    137  7878		       85 4d		      sta	PF0
    138  787a		       85 4e		      sta	PF1
    139  787c		       85 4f		      sta	PF2
    140  787e		       85 5b		      sta	GRP0
    141  7880		       85 5c		      sta	GRP1
    142  7882
    143  7882							; END OF VISIBLE SCREEN
    144  7882							; HERE'S SOME TIME TO DO STUFF
    145  7882
    146  7882		       a9 1a		      lda	#26
    147  7884		       8d 96 02 	      sta	TIM64T
    148  7887
    149  7887							;
      0  7887					      JSRAM	PositionSprites
      1  7887
      2  7887		       a9 0a		      lda	#BANK_PositionSprites
      3  7889		       85 3f		      sta	SET_BANK
      4  788b		       20 e3 f1 	      jsr	PositionSprites
    151  788e
    152  788e
    153  788e
    154  788e							; "draw" sprite shapes into row banks
    155  788e
    156  788e		       a2 07		      ldx	#7
    157  7890		       86 3e	   zapem      stx	SET_BANK_RAM
    158  7892		       20 a6 f2 	      jsr	WriteBlank
    159  7895		       ca		      dex
    160  7896		       10 f8		      bpl	zapem
    161  7898
    162  7898		       20 cf f2 	      jsr	WriteCursor
    163  789b
    164  789b		       2c 85 02    Waitforit  bit	TIMINT
    165  789e		       10 fb		      bpl	Waitforit
    166  78a0
    167  78a0		       4c 35 f8 	      jmp	.StartFrame
    168  78a3
    169  78a3
    170  78a3							;---------------------------------------------------------------------------------------------------
    171  78a3
    172  78a3
      0  78a3					      DEF	AiStateMachine
      1  78a3				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  78a3
      3  78a3				   AiStateMachine
    174  78a3					      SUBROUTINE
    175  78a3
    176  78a3		       a9 0a		      lda	#STATEMACHINE
    177  78a5		       85 8e		      sta	savedBank
    178  78a7		       85 3f		      sta	SET_BANK
    179  78a9
    180  78a9		       a6 8f		      ldx	aiPhase
    181  78ab		       bd 00 f0 	      lda	AiVectorLO,x
    182  78ae		       85 ef		      sta	__ptr
    183  78b0		       bd 0b f0 	      lda	AiVectorHI,x
    184  78b3		       85 f0		      sta	__ptr+1
    185  78b5		       6c ef 00 	      jmp	(__ptr)
    186  78b8
    187  78b8
      0  78b8					      DEF	SAFE_PhasedProcessor
      1  78b8				   BANK_SAFE_PhasedProcessor SET	_CURRENT_BANK
      2  78b8
      3  78b8				   SAFE_PhasedProcessor
    189  78b8
    190  78b8		       20 c0 f8 	      jsr	PhaseJump
    191  78bb		       a5 8e		      lda	savedBank
    192  78bd		       85 3f		      sta	SET_BANK
    193  78bf		       60		      rts
    194  78c0
      0  78c0					      DEF	PhaseJump
      1  78c0				   BANK_PhaseJump SET	_CURRENT_BANK
      2  78c0
      3  78c0				   PhaseJump
    196  78c0
    197  78c0		       a6 82		      ldx	drawPhase
    198  78c2		       bd d6 f8 	      lda	DrawVectorLO,x
    199  78c5		       85 ef		      sta	__ptr
    200  78c7		       bd e6 f8 	      lda	DrawVectorHI,x
    201  78ca		       85 f0		      sta	__ptr+1
    202  78cc		       bd f6 f8 	      lda	DrawVectorBANK,x
    203  78cf		       85 8e		      sta	savedBank
    204  78d1		       85 3f		      sta	SET_BANK
    205  78d3		       6c ef 00 	      jmp	(__ptr)
    206  78d6
    207  78d6		       00 0a	   MARCH      =	10
    208  78d6		       00 04	   STARTMOVE  =	4
    209  78d6		       00 07	   CSL	      =	7
    210  78d6
    211  78d6				   DrawVectorLO
    212  78d6		       65		      .byte.b	<StartClearBoard
    213  78d7		       6c		      .byte.b	<ClearEachRow
    214  78d8		       1b		      .byte.b	<DrawEntireBoard
    215  78d9		       b0		      .byte.b	<DEB2
    216  78da		       42		      .byte.b	<FlipBuffers
    217  78db		       51		      .byte.b	<FB0
    218  78dc		       6a		      .byte.b	<FB2
    219  78dd		       7c		      .byte.b	<FB3
    220  78de		       83		      .byte.b	<EraseStartPiece
    221  78df		       94		      .byte.b	<WriteStartPieceBlank
    222  78e0		       86		      .byte.b	<MarchToTargetA
    223  78e1		       bd		      .byte.b	<MarchB
    224  78e2		       f5		      .byte.b	<MarchToTargetB
    225  78e3		       15		      .byte.b	<MarchB2
    226  78e4		       cb		      .byte.b	<FinalFlash
    227  78e5		       59		      .byte.b	<SpecialMoveFixup
    228  78e6
    229  78e6				   DrawVectorHI
    230  78e6		       f0		      .byte.b	>StartClearBoard
    231  78e7		       f0		      .byte.b	>ClearEachRow
    232  78e8		       f9		      .byte.b	>DrawEntireBoard
    233  78e9		       f0		      .byte.b	>DEB2
    234  78ea		       f9		      .byte.b	>FlipBuffers
    235  78eb		       f9		      .byte.b	>FB0
    236  78ec		       f9		      .byte.b	>FB2
    237  78ed		       f0		      .byte.b	>FB3
    238  78ee		       f0		      .byte.b	>EraseStartPiece
    239  78ef		       f0		      .byte.b	>WriteStartPieceBlank
    240  78f0		       f9		      .byte.b	>MarchToTargetA
    241  78f1		       f0		      .byte.b	>MarchB
    242  78f2		       f9		      .byte.b	>MarchToTargetB
    243  78f3		       fa		      .byte.b	>MarchB2
    244  78f4		       f0		      .byte.b	>FinalFlash
    245  78f5		       fa		      .byte.b	>SpecialMoveFixup
    246  78f6
    247  78f6				   DrawVectorBANK
    248  78f6
    249  78f6		       00		      .byte.b	BANK_StartClearBoard
    250  78f7		       00		      .byte.b	BANK_ClearEachRow
    251  78f8		       0f		      .byte.b	BANK_DrawEntireBoard
    252  78f9		       00		      .byte.b	BANK_DEB2
    253  78fa		       0f		      .byte.b	BANK_FlipBuffers
    254  78fb		       0f		      .byte.b	BANK_FB0
    255  78fc		       0f		      .byte.b	BANK_FB2
    256  78fd		       00		      .byte.b	BANK_FB3
    257  78fe		       00		      .byte.b	BANK_EraseStartPiece
    258  78ff		       00		      .byte.b	BANK_WriteStartPieceBlank
    259  7900		       0f		      .byte.b	BANK_MarchToTargetA
    260  7901		       00		      .byte.b	BANK_MarchB
    261  7902		       0f		      .byte.b	BANK_MarchToTargetB
    262  7903		       0f		      .byte.b	BANK_MarchB2
    263  7904		       00		      .byte.b	BANK_FinalFlash
    264  7905		       0f		      .byte.b	BANK_SpecialMoveFixup
    265  7906
    266  7906
    267  7906
      0  7906					      DEF	CallClear
      1  7906				   BANK_CallClear SET	_CURRENT_BANK
      2  7906
      3  7906				   CallClear
    269  7906
    270  7906		       84 3e		      sty	SET_BANK_RAM
    271  7908		       20 c8 f0 	      jsr	ClearRowBitmap
    272  790b
    273  790b		       60	   _rts       rts
    274  790c
    275  790c
    276  790c							;---------------------------------------------------------------------------------------------------
    277  790c
      0  790c					      DEF	SAFE_Get64toX12Board
      1  790c				   BANK_SAFE_Get64toX12Board SET	_CURRENT_BANK
      2  790c
      3  790c				   SAFE_Get64toX12Board
    279  790c
    280  790c		       a9 08		      lda	#RAMBANK_MOVES_RAM
    281  790e		       85 3e		      sta	SET_BANK_RAM
    282  7910		       bc 66 f3 	      ldy	Base64ToIndex,x
    283  7913		       b9 7a f0 	      lda	Board,y
    284  7916		       a4 8e		      ldy	savedBank
    285  7918		       84 3f		      sty	SET_BANK
    286  791a		       60		      rts
    287  791b
    288  791b							;---------------------------------------------------------------------------------------------------
    289  791b
    290  791b
      0  791b					      DEF	DrawEntireBoard
      1  791b				   BANK_DrawEntireBoard SET	_CURRENT_BANK
      2  791b
      3  791b				   DrawEntireBoard
    292  791b
    293  791b		       a9 08		      lda	#RAMBANK_MOVES_RAM
    294  791d		       85 3e		      sta	SET_BANK_RAM
    295  791f
    296  791f		       a6 80		      ldx	drawPieceNumber
    297  7921		       bc 66 f3 	      ldy	Base64ToIndex,x
    298  7924		       b9 7a f0 	      lda	Board,y
    299  7927		       f0 16		      beq	isab
    300  7929		       48		      pha
    301  792a		       a9 00		      lda	#BLANK
    302  792c		       99 7a f4 	      sta	Board+RAM_WRITE,y
    303  792f
    304  792f		       20 d7 fd 	      jsr	CopySinglePiece
    305  7932
    306  7932		       a9 08		      lda	#RAMBANK_MOVES_RAM
    307  7934		       85 3e		      sta	SET_BANK_RAM
    308  7936		       a6 80		      ldx	drawPieceNumber
    309  7938		       bc 66 f3 	      ldy	Base64ToIndex,x
    310  793b		       68		      pla
    311  793c		       99 7a f4 	      sta	Board+RAM_WRITE,y
    312  793f
    313  793f
    314  793f		       e6 82	   isab       inc	drawPhase
    315  7941		       60	   .incomplete rts
    316  7942
    317  7942
    318  7942							;---------------------------------------------------------------------------------------------------
    319  7942
    320  7942
    321  7942							; NOTE: to draw "track" set the blank square tO BLACK
    322  7942
    323  7942
    324  7942							; Now we've finished drawing the screen square by square.
    325  7942
    326  7942							;---------------------------------------------------------------------------------------------------
    327  7942
      0  7942					      DEF	FlipBuffers
      1  7942				   BANK_FlipBuffers SET	_CURRENT_BANK
      2  7942
      3  7942				   FlipBuffers
    329  7942
    330  7942							; Initialise for a new move
    331  7942
    332  7942		       a5 9c		      lda	currentPly
    333  7944		       85 3e		      sta	SET_BANK_RAM
    334  7946
    335  7946		       20 90 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    336  7949
    337  7949		       ad 34 f0 	      lda	enPassantSquare	; potentially set by move in previous ply
    338  794c		       85 9a		      sta	enPassantPawn	; grab enPassant flag from PLY for later checking
    339  794e
    340  794e		       e6 82		      inc	drawPhase
    341  7950		       60		      rts
    342  7951
    343  7951							;---------------------------------------------------------------------------------------------------
    344  7951
      0  7951					      DEF	FB0
      1  7951				   BANK_FB0   SET	_CURRENT_BANK
      2  7951
      3  7951				   FB0
    346  7951
    347  7951							; Call move generation for all pieces
    348  7951							; Test alpha-beta
    349  7951
    350  7951		       a5 9c		      lda	currentPly
    351  7953		       85 3e		      sta	SET_BANK_RAM
    352  7955		       20 da f2 	      jsr	alphaBeta
    353  7958
    354  7958		       a5 9c		      lda	currentPly
    355  795a		       85 3e		      sta	SET_BANK_RAM
    356  795c		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    357  795f
    358  795f		       a5 9d		      lda	piecelistIndex
    359  7961		       29 0f		      and	#15
    360  7963		       c9 00		      cmp	#0
    361  7965		       d0 02		      bne	.waitgen
    362  7967
    363  7967		       e6 82		      inc	drawPhase
    364  7969		       60	   .waitgen   rts
    365  796a
    366  796a							;---------------------------------------------------------------------------------------------------
    367  796a
      0  796a					      DEF	FB2
      1  796a				   BANK_FB2   SET	_CURRENT_BANK
      2  796a
      3  796a				   FB2
    369  796a
    370  796a							; Choose one of the moves
    371  796a
    372  796a		       a5 9c		      lda	currentPly
    373  796c		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    374  796e
    375  796e		       ad 35 f0 	      lda	moveIndex
    376  7971		       c9 ff		      cmp	#-1
    377  7973		       f0 0f		      beq	.halted	; no valid moves
    378  7975
    379  7975
    380  7975		       a9 ff		      lda	#-1
    381  7977		       85 9f		      sta	fromSquare
    382  7979		       85 a1		      sta	toSquare
    383  797b
    384  797b		       a5 9e		      lda	sideToMove
    385  797d		       10 03		      bpl	.notComputer
    386  797f
    387  797f		       20 0e fe 	      jsr	MoveViaList
    388  7982
    389  7982				   .notComputer
    390  7982		       e6 82		      inc	drawPhase
    391  7984		       60	   .halted    rts
    392  7985
    393  7985							;---------------------------------------------------------------------------------------------------
    394  7985
      0  7985					      DEF	catch
      1  7985				   BANK_catch SET	_CURRENT_BANK
      2  7985
      3  7985				   catch
    396  7985		       60		      rts
    397  7986
    398  7986
    399  7986
      0  7986					      DEF	MarchToTargetA
      1  7986				   BANK_MarchToTargetA SET	_CURRENT_BANK
      2  7986
      3  7986				   MarchToTargetA
    401  7986
    402  7986							; Start marching towards destination
    403  7986
    404  7986		       a5 83		      lda	drawDelay
    405  7988		       f0 00		      beq	.progress
    406  798a							;dec drawDelay
    407  798a							;rts
    408  798a				   .progress
    409  798a
    410  798a
    411  798a		       a5 9f		      lda	fromSquare
    412  798c		       c5 a1		      cmp	toSquare
    413  798e		       f0 64		      beq	.unmoved
    414  7990
    415  7990							; Now we calculate move to new square
    416  7990
    417  7990		       a5 9f		      lda	fromSquare
    418  7992		       85 84		      sta	lastSquare
    419  7994		       4a		      lsr
    420  7995		       4a		      lsr
    421  7996		       4a		      lsr
    422  7997		       85 a7		      sta	__fromRow
    423  7999		       a5 a1		      lda	toSquare
    424  799b		       4a		      lsr
    425  799c		       4a		      lsr
    426  799d		       4a		      lsr
    427  799e		       c5 a7		      cmp	__fromRow
    428  79a0		       f0 11		      beq	rowOK
    429  79a2		       b0 09		      bcs	.downRow
    430  79a4		       a5 9f		      lda	fromSquare
    431  79a6		       e9 07		      sbc	#7
    432  79a8		       85 9f		      sta	fromSquare
    433  79aa		       4c b3 f9 	      jmp	nowcol
    434  79ad		       a5 9f	   .downRow   lda	fromSquare
    435  79af		       69 07		      adc	#7
    436  79b1		       85 9f		      sta	fromSquare
    437  79b3				   rowOK
    438  79b3				   nowcol
    439  79b3
    440  79b3		       a5 9f		      lda	fromSquare
    441  79b5		       29 07		      and	#7
    442  79b7		       85 a7		      sta	__fromRow
    443  79b9		       a5 a1		      lda	toSquare
    444  79bb		       29 07		      and	#7
    445  79bd		       c5 a7		      cmp	__fromRow
    446  79bf		       f0 09		      beq	colok
    447  79c1		       90 05		      bcc	.leftCol
    448  79c3		       e6 9f		      inc	fromSquare
    449  79c5		       4c ca f9 	      jmp	colok
    450  79c8		       c6 9f	   .leftCol   dec	fromSquare
    451  79ca				   colok
    452  79ca
    453  79ca							; erase object in new sqare --> blank
    454  79ca
    455  79ca		       a6 9f		      ldx	fromSquare
    456  79cc		       86 80		      stx	drawPieceNumber
    457  79ce		       a9 08		      lda	#RAMBANK_MOVES_RAM
    458  79d0		       85 3e		      sta	SET_BANK_RAM
    459  79d2		       bc 66 f3 	      ldy	Base64ToIndex,x
    460  79d5		       b9 7a f0 	      lda	Board,y
    461  79d8		       f0 03		      beq	.skipbl
    462  79da		       20 d7 fd 	      jsr	CopySinglePiece	; erase next square along --> blank
    463  79dd
    464  79dd		       a9 08	   .skipbl    lda	#RAMBANK_MOVES_RAM
    465  79df		       85 3e		      sta	SET_BANK_RAM
    466  79e1		       a6 9f		      ldx	fromSquare
    467  79e3		       bc 66 f3 	      ldy	Base64ToIndex,x
    468  79e6
    469  79e6		       b9 7a f0 	      lda	Board,y
    470  79e9		       85 a3		      sta	lastPiece	; what we are overwriting
    471  79eb		       a5 a0		      lda	fromPiece
    472  79ed		       29 ef		      and	#~CASTLE
    473  79ef		       99 7a f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    474  79f2		       e6 82		      inc	drawPhase
    475  79f4
    476  79f4		       60	   .unmoved   rts
    477  79f5
    478  79f5							;---------------------------------------------------------------------------------------------------
    479  79f5
    480  79f5
    481  79f5
      0  79f5					      DEF	MarchToTargetB
      1  79f5				   BANK_MarchToTargetB SET	_CURRENT_BANK
      2  79f5
      3  79f5				   MarchToTargetB
    483  79f5
    484  79f5		       a5 83		      lda	drawDelay
    485  79f7		       f0 00		      beq	.mb
    486  79f9							;dec drawDelay
    487  79f9							;rts
    488  79f9				   .mb
    489  79f9
    490  79f9
    491  79f9							; now we want to undraw the piece in the old square
    492  79f9
    493  79f9		       a5 84		      lda	lastSquare
    494  79fb		       85 80		      sta	drawPieceNumber
    495  79fd		       20 d7 fd 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    496  7a00
    497  7a00		       a9 08		      lda	#RAMBANK_MOVES_RAM
    498  7a02		       85 3e		      sta	SET_BANK_RAM
    499  7a04		       a5 a4		      lda	previousPiece
    500  7a06
    501  7a06		       a6 84		      ldx	lastSquare
    502  7a08		       bc 66 f3 	      ldy	Base64ToIndex,x
    503  7a0b		       99 7a f4 	      sta	Board+RAM_WRITE,y
    504  7a0e
    505  7a0e		       a5 a3		      lda	lastPiece
    506  7a10		       85 a4		      sta	previousPiece
    507  7a12
    508  7a12		       e6 82		      inc	drawPhase
    509  7a14		       60		      rts
    510  7a15
    511  7a15							;---------------------------------------------------------------------------------------------------
    512  7a15
      0  7a15					      DEF	MarchB2
      1  7a15				   BANK_MarchB2 SET	_CURRENT_BANK
      2  7a15
      3  7a15				   MarchB2
    514  7a15
    515  7a15		       a6 84		      ldx	lastSquare
    516  7a17		       86 80		      stx	drawPieceNumber
    517  7a19
    518  7a19		       a9 08		      lda	#RAMBANK_MOVES_RAM
    519  7a1b		       85 3e		      sta	SET_BANK_RAM
    520  7a1d		       bc 66 f3 	      ldy	Base64ToIndex,x
    521  7a20		       b9 7a f0 	      lda	Board,y
    522  7a23		       f0 03		      beq	.skipbl2
    523  7a25
    524  7a25		       20 d7 fd 	      jsr	CopySinglePiece	; draw previous piece back in old position
    525  7a28				   .skipbl2
    526  7a28		       a5 9f		      lda	fromSquare
    527  7a2a		       c5 a1		      cmp	toSquare
    528  7a2c		       f0 1d		      beq	xhalt
    529  7a2e
    530  7a2e		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    531  7a30		       85 83		      sta	drawDelay
    532  7a32
    533  7a32		       a9 0a		      lda	#MARCH
    534  7a34		       85 82		      sta	drawPhase
    535  7a36		       60		      rts
    536  7a37
    537  7a37
    538  7a37
    539  7a37
    540  7a37
    541  7a37		       02 06 3a 3e KSquare    .byte.b	2,6,58,62
    542  7a3b		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    543  7a3f		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    544  7a43		       00 07 38 3f RSquareStart64 .byte.b	0,7,56,63
    545  7a47		       03 05 3b 3d RSquareEnd64 .byte.b	3,5,59,61
    546  7a4b
    547  7a4b				   xhalt
    548  7a4b
    549  7a4b		       20 16 fe 	      jsr	FinaliseMove
    550  7a4e
    551  7a4e
    552  7a4e		       a9 04		      lda	#4	; on/off count
    553  7a50		       85 85		      sta	drawCount	; flashing for piece about to move
    554  7a52		       a9 00		      lda	#0
    555  7a54		       85 83		      sta	drawDelay
    556  7a56
    557  7a56		       e6 82		      inc	drawPhase
    558  7a58		       60		      rts
    559  7a59
    560  7a59
    561  7a59							;---------------------------------------------------------------------------------------------------
    562  7a59
      0  7a59					      DEF	SpecialMoveFixup
      1  7a59				   BANK_SpecialMoveFixup SET	_CURRENT_BANK
      2  7a59
      3  7a59				   SpecialMoveFixup
    564  7a59
      0  7a59					      JSRAM_SAFE	CastleFixup
      1  7a59
      2  7a59
      3  7a59
      4  7a59		       a9 00		      lda	#BANK_CastleFixup
      5  7a5b		       85 8e		      sta	savedBank
      6  7a5d		       85 3f		      sta	SET_BANK
      7  7a5f		       20 e7 f0 	      jsr	CastleFixup
    566  7a62
    567  7a62							; Handle en-passant captures
    568  7a62
    569  7a62		       a5 a0		      lda	fromPiece
    570  7a64		       29 20		      and	#ENPASSANT
    571  7a66		       f0 00		      beq	.noEP
    572  7a68
    573  7a68
    574  7a68							; TODO - handle the en-passant capture and fixup
    575  7a68
    576  7a68				   .noEP
    577  7a68
    578  7a68
    579  7a68
    580  7a68		       a9 04		      lda	#STARTMOVE
    581  7a6a		       85 82		      sta	drawPhase
    582  7a6c
    583  7a6c					      if	ASSERTS
      0  7a6c					      JSRAM_SAFE	DIAGNOSTIC_checkPieces
      1  7a6c
      2  7a6c
      3  7a6c
      4  7a6c		       a9 0d		      lda	#BANK_DIAGNOSTIC_checkPieces
      5  7a6e		       85 8e		      sta	savedBank
      6  7a70		       85 3f		      sta	SET_BANK
      7  7a72		       20 42 f2 	      jsr	DIAGNOSTIC_checkPieces
    585  7a75					      endif
    586  7a75
    587  7a75		       a5 9e		      lda	sideToMove
    588  7a77		       30 04		      bmi	.skip
    589  7a79		       a9 00		      lda	#0
    590  7a7b		       85 8f		      sta	aiPhase
    591  7a7d				   .skip
    592  7a7d
    593  7a7d
    594  7a7d
    595  7a7d		       60		      rts
    596  7a7e
    597  7a7e
    598  7a7e							;---------------------------------------------------------------------------------------------------
    599  7a7e
      0  7a7e					      DEF	MoveForSinglePiece
      1  7a7e				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  7a7e
      3  7a7e				   MoveForSinglePiece
    601  7a7e
    602  7a7e		       a9 08		      lda	#RAMBANK_MOVES_RAM
    603  7a80		       85 3e		      sta	SET_BANK_RAM
    604  7a82
    605  7a82		       a6 98		      ldx	currentSquare	; used in move handlers
    606  7a84		       bd 7a f0 	      lda	Board,x
    607  7a87		       85 97		      sta	currentPiece
    608  7a89
    609  7a89					      IF	ASSERTS
    610  7a89		       45 9e		      eor	sideToMove
    611  7a8b		       30 fe	   lock2      bmi	lock2
    612  7a8d		       a5 97		      lda	currentPiece
    613  7a8f					      ENDIF
    614  7a8f
    615  7a8f		       29 0f		      and	#PIECE_MASK
    616  7a91		       a8		      tay
    617  7a92
    618  7a92
    619  7a92					      IF	ASSERTS
    620  7a92		       f0 fe	   lock       beq	lock	; catch errors
    621  7a94
    622  7a94
    623  7a94
    624  7a94					      ENDIF
    625  7a94
    626  7a94		       b9 a6 fa 	      lda	HandlerVectorLO-1,y
    627  7a97		       85 a8		      sta	__vector
    628  7a99		       b9 ad fa 	      lda	HandlerVectorHI-1,y
    629  7a9c		       85 a9		      sta	__vector+1
    630  7a9e
    631  7a9e		       6c a8 00 	      jmp	(__vector)
    632  7aa1
    633  7aa1		       a5 9c	   MoveReturn lda	currentPly
    634  7aa3		       85 3e		      sta	SET_BANK_RAM
    635  7aa5
    636  7aa5		       60		      rts
    637  7aa6
      0  7aa6					      OPTIONAL_PAGEBREAK	"Vector Tables", 15
     10  7aa6					      LIST	ON
    639  7aa6		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    640  7aa7
    641  7aa7				   HandlerVectorLO
    642  7aa7
    643  7aa7		       e0		      .byte.b	<Handle_WHITE_PAWN
    644  7aa8		       a0		      .byte.b	<Handle_BLACK_PAWN
    645  7aa9		       33		      .byte.b	<Handle_KNIGHT
    646  7aaa		       a1		      .byte.b	<Handle_BISHOP
    647  7aab		       04		      .byte.b	<Handle_ROOK
    648  7aac		       de		      .byte.b	<Handle_QUEEN
    649  7aad		       67		      .byte.b	<Handle_KING
    650  7aae
    651  7aae				   HandlerVectorHI
    652  7aae
    653  7aae		       fa		      .byte.b	>Handle_WHITE_PAWN
    654  7aaf		       fb		      .byte.b	>Handle_BLACK_PAWN
    655  7ab0		       fc		      .byte.b	>Handle_KNIGHT
    656  7ab1		       f1		      .byte.b	>Handle_BISHOP
    657  7ab2		       f2		      .byte.b	>Handle_ROOK
    658  7ab3		       f0		      .byte.b	>Handle_QUEEN
    659  7ab4		       f2		      .byte.b	>Handle_KING
    660  7ab5
    661  7ab5							;---------------------------------------------------------------------------------------------------
    662  7ab5
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  7ab5					      include	"Handler_PAWN.asm"
      1  7ab5							; Copyright (C)2020 Andrew Davie
      2  7ab5							; Pawn move handlers
      3  7ab5
      4  7ab5							;---------------------------------------------------------------------------------------------------
      5  7ab5							; WHITE PAWN
      6  7ab5							;---------------------------------------------------------------------------------------------------
      7  7ab5
      8  7ab5		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  7ab5		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  7ab5
     11  7ab5							;---------------------------------------------------------------------------------------------------
     12  7ab5
     13  7ab5					      MAC	en_passant
     14  7ab5					      SUBROUTINE
     15  7ab5							; {1} = _LEFT or _RIGHT
     16  7ab5					      ldy	ValidSquare+{1},x
     17  7ab5					      cpy	enPassantPawn
     18  7ab5					      bne	.invalid
     19  7ab5					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     20  7ab5					      lda	Board,y
     21  7ab5					      bne	.invalid
     22  7ab5					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     23  7ab5				   .invalid
     24  7ab5					      ENDM
     25  7ab5
     26  7ab5							;---------------------------------------------------------------------------------------------------
     27  7ab5
     28  7ab5					      MAC	promote_pawn
     29  7ab5					      SUBROUTINE
     30  7ab5							;{1} = BLACK or WHITE
     31  7ab5
     32  7ab5					      lda	currentPiece
     33  7ab5					      pha
     34  7ab5
     35  7ab5					      sty	__temp
     36  7ab5					      lda	#{1}|QUEEN
     37  7ab5					      sta	currentPiece
     38  7ab5					      jsr	AddMove
     39  7ab5
     40  7ab5					      lda	#{1}|ROOK
     41  7ab5					      sta	currentPiece
     42  7ab5					      ldy	__temp
     43  7ab5					      jsr	AddMove
     44  7ab5
     45  7ab5					      lda	#{1}|BISHOP
     46  7ab5					      sta	currentPiece
     47  7ab5					      ldy	__temp
     48  7ab5					      jsr	AddMove
     49  7ab5
     50  7ab5					      lda	#{1}|KNIGHT
     51  7ab5					      sta	currentPiece
     52  7ab5					      ldy	__temp
     53  7ab5					      jsr	AddMove
     54  7ab5
     55  7ab5					      pla
     56  7ab5					      sta	currentPiece
     57  7ab5					      ENDM
     58  7ab5
     59  7ab5							;---------------------------------------------------------------------------------------------------
     60  7ab5
     61  7ab5					      MAC	move_or_promote_pawn
     62  7ab5					      SUBROUTINE
     63  7ab5							; {1} = BLACK or WHITE
     64  7ab5
     65  7ab5					      IF	{1} = WHITE
     66  7ab5					      cpy	#90	; last rank?
     67  7ab5					      bcc	.standard
     68  7ab5					      jsr	PromoteWhitePawn
     69  7ab5					      jmp	.pMoved
     70  7ab5					      ENDIF
     71  7ab5
     72  7ab5					      IF	{1} = BLACK
     73  7ab5					      cpy	#30	; last rank?
     74  7ab5					      bcs	.standard
     75  7ab5					      jsr	PromoteBlackPawn
     76  7ab5					      jmp	.pMoved
     77  7ab5					      ENDIF
     78  7ab5
     79  7ab5				   .standard  jsr	AddMove	; add +1UP move
     80  7ab5				   .pMoved
     81  7ab5
     82  7ab5					      ENDM
     83  7ab5
     84  7ab5							;---------------------------------------------------------------------------------------------------
     85  7ab5
     86  7ab5					      MAC	take
     87  7ab5					      SUBROUTINE
     88  7ab5							; {1} = capture square offset
     89  7ab5
     90  7ab5					      ldy	ValidSquare+{1},x
     91  7ab5					      bmi	.invalid
     92  7ab5					      lda	Board,y
     93  7ab5					      beq	.invalid	; square empty
     94  7ab5					      eor	currentPiece
     95  7ab5					      bpl	.invalid	; same colour
     96  7ab5
     97  7ab5					      MOVE_OR_PROMOTE_PAWN	{2}
     98  7ab5				   .invalid
     99  7ab5					      ENDM
    100  7ab5
    101  7ab5							;---------------------------------------------------------------------------------------------------
    102  7ab5
      0  7ab5					      DEF	PromoteWhitePawn
      1  7ab5				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7ab5
      3  7ab5				   PromoteWhitePawn
      0  7ab5					      PROMOTE_PAWN	WHITE
      1  7ab5					      SUBROUTINE
      2  7ab5
      3  7ab5
      4  7ab5		       a5 97		      lda	currentPiece
      5  7ab7		       48		      pha
      6  7ab8
      7  7ab8		       84 a9		      sty	__temp
      8  7aba		       a9 06		      lda	#WHITE|QUEEN
      9  7abc		       85 97		      sta	currentPiece
     10  7abe		       20 cc fc 	      jsr	AddMove
     11  7ac1
     12  7ac1		       a9 05		      lda	#WHITE|ROOK
     13  7ac3		       85 97		      sta	currentPiece
     14  7ac5		       a4 a9		      ldy	__temp
     15  7ac7		       20 cc fc 	      jsr	AddMove
     16  7aca
     17  7aca		       a9 04		      lda	#WHITE|BISHOP
     18  7acc		       85 97		      sta	currentPiece
     19  7ace		       a4 a9		      ldy	__temp
     20  7ad0		       20 cc fc 	      jsr	AddMove
     21  7ad3
     22  7ad3		       a9 03		      lda	#WHITE|KNIGHT
     23  7ad5		       85 97		      sta	currentPiece
     24  7ad7		       a4 a9		      ldy	__temp
     25  7ad9		       20 cc fc 	      jsr	AddMove
     26  7adc
     27  7adc		       68		      pla
     28  7add		       85 97		      sta	currentPiece
    105  7adf		       60		      rts
    106  7ae0
    107  7ae0							;---------------------------------------------------------------------------------------------------
    108  7ae0
      0  7ae0					      DEF	Handle_WHITE_PAWN
      1  7ae0				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7ae0
      3  7ae0				   Handle_WHITE_PAWN
    110  7ae0
    111  7ae0		       bc 20 f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    112  7ae3		       b9 7a f0 	      lda	Board,y
    113  7ae6		       d0 20		      bne	.pMoved	; occupied
    114  7ae8
    115  7ae8							; we may need to promote the pawn
    116  7ae8							; All possibilites (Q/R/B/N) are added as individual moves
    117  7ae8
      0  7ae8					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7ae8					      SUBROUTINE
      2  7ae8
      3  7ae8
      4  7ae8					      IF	WHITE = WHITE
      5  7ae8		       c0 5a		      cpy	#90
      6  7aea		       90 06		      bcc	.standard
      7  7aec		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7aef		       4c f5 fa 	      jmp	.pMoved
      9  7af2					      ENDIF
     10  7af2
     11  7af2				  -	      IF	WHITE = BLACK
     12  7af2				  -	      cpy	#30
     13  7af2				  -	      bcs	.standard
     14  7af2				  -	      jsr	PromoteBlackPawn
     15  7af2				  -	      jmp	.pMoved
     16  7af2					      ENDIF
     17  7af2
     18  7af2		       20 cc fc    .standard  jsr	AddMove
     19  7af5				   .pMoved
     20  7af5
    119  7af5
    120  7af5
    121  7af5
    122  7af5							; the +2 move off the home rank...
    123  7af5
    124  7af5		       a6 98		      ldx	currentSquare
    125  7af7		       e0 28		      cpx	#WHITE_HOME_ROW
    126  7af9		       b0 0d		      bcs	.pMoved	; pawn has moved so can't do +2
    127  7afb		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    128  7afe		       b9 7a f0 	      lda	Board,y
    129  7b01		       d0 05		      bne	.pMoved	; destination square occupied
    130  7b03
    131  7b03		       20 cc fc 	      jsr	AddMove	; add the +2UP move off home row
    132  7b06		       a6 98		      ldx	currentSquare
    133  7b08
    134  7b08				   .pMoved
    135  7b08
    136  7b08							; regular captures...
    137  7b08
      0  7b08					      TAKE	_UP+_LEFT, WHITE
      1  7b08					      SUBROUTINE
      2  7b08
      3  7b08
      4  7b08		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      5  7b0b		       30 16		      bmi	.invalid
      6  7b0d		       b9 7a f0 	      lda	Board,y
      7  7b10		       f0 11		      beq	.invalid
      8  7b12		       45 97		      eor	currentPiece
      9  7b14		       10 0d		      bpl	.invalid
     10  7b16
      0  7b16					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b16					      SUBROUTINE
      2  7b16
      3  7b16
      4  7b16					      IF	WHITE = WHITE
      5  7b16		       c0 5a		      cpy	#90
      6  7b18		       90 06		      bcc	.standard
      7  7b1a		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b1d		       4c 23 fb 	      jmp	.pMoved
      9  7b20					      ENDIF
     10  7b20
     11  7b20				  -	      IF	WHITE = BLACK
     12  7b20				  -	      cpy	#30
     13  7b20				  -	      bcs	.standard
     14  7b20				  -	      jsr	PromoteBlackPawn
     15  7b20				  -	      jmp	.pMoved
     16  7b20					      ENDIF
     17  7b20
     18  7b20		       20 cc fc    .standard  jsr	AddMove
     19  7b23				   .pMoved
     20  7b23
     12  7b23				   .invalid
    139  7b23		       a6 98		      ldx	currentSquare
      0  7b25					      TAKE	_UP+_RIGHT, WHITE
      1  7b25					      SUBROUTINE
      2  7b25
      3  7b25
      4  7b25		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      5  7b28		       30 16		      bmi	.invalid
      6  7b2a		       b9 7a f0 	      lda	Board,y
      7  7b2d		       f0 11		      beq	.invalid
      8  7b2f		       45 97		      eor	currentPiece
      9  7b31		       10 0d		      bpl	.invalid
     10  7b33
      0  7b33					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b33					      SUBROUTINE
      2  7b33
      3  7b33
      4  7b33					      IF	WHITE = WHITE
      5  7b33		       c0 5a		      cpy	#90
      6  7b35		       90 06		      bcc	.standard
      7  7b37		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b3a		       4c 40 fb 	      jmp	.pMoved
      9  7b3d					      ENDIF
     10  7b3d
     11  7b3d				  -	      IF	WHITE = BLACK
     12  7b3d				  -	      cpy	#30
     13  7b3d				  -	      bcs	.standard
     14  7b3d				  -	      jsr	PromoteBlackPawn
     15  7b3d				  -	      jmp	.pMoved
     16  7b3d					      ENDIF
     17  7b3d
     18  7b3d		       20 cc fc    .standard  jsr	AddMove
     19  7b40				   .pMoved
     20  7b40
     12  7b40				   .invalid
    141  7b40
    142  7b40
    143  7b40							; en-passant captures...
    144  7b40				   EN_PASSANTING
    145  7b40					      if	1
    146  7b40		       a5 9a		      lda	enPassantPawn
    147  7b42		       f0 2e		      beq	.noEnPassant
    148  7b44
    149  7b44		       a5 97		      lda	currentPiece
    150  7b46		       09 20		      ora	#ENPASSANT
    151  7b48		       85 97		      sta	currentPiece
    152  7b4a
    153  7b4a		       a6 98		      ldx	currentSquare
      0  7b4c					      EN_PASSANT	_LEFT, _UP
      1  7b4c					      SUBROUTINE
      2  7b4c
      3  7b4c		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7b4f		       c4 9a		      cpy	enPassantPawn
      5  7b51		       d0 0b		      bne	.invalid
      6  7b53		       bc 1f f0 	      ldy	ValidSquare+_LEFT+_UP,x
      7  7b56		       b9 7a f0 	      lda	Board,y
      8  7b59		       d0 03		      bne	.invalid
      9  7b5b		       20 cc fc 	      jsr	AddMove
     10  7b5e				   .invalid
    155  7b5e		       a6 98		      ldx	currentSquare
      0  7b60					      EN_PASSANT	_RIGHT, _UP
      1  7b60					      SUBROUTINE
      2  7b60
      3  7b60		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7b63		       c4 9a		      cpy	enPassantPawn
      5  7b65		       d0 0b		      bne	.invalid
      6  7b67		       bc 21 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      7  7b6a		       b9 7a f0 	      lda	Board,y
      8  7b6d		       d0 03		      bne	.invalid
      9  7b6f		       20 cc fc 	      jsr	AddMove
     10  7b72				   .invalid
    157  7b72
    158  7b72				   .noEnPassant
    159  7b72					      endif
    160  7b72
    161  7b72		       4c a1 fa 	      jmp	MoveReturn
    162  7b75
    163  7b75
    164  7b75							;---------------------------------------------------------------------------------------------------
    165  7b75							; BLACK PAWN
    166  7b75							;---------------------------------------------------------------------------------------------------
    167  7b75
      0  7b75					      DEF	PromoteBlackPawn
      1  7b75				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7b75
      3  7b75				   PromoteBlackPawn
      0  7b75					      PROMOTE_PAWN	BLACK
      1  7b75					      SUBROUTINE
      2  7b75
      3  7b75
      4  7b75		       a5 97		      lda	currentPiece
      5  7b77		       48		      pha
      6  7b78
      7  7b78		       84 a9		      sty	__temp
      8  7b7a		       a9 86		      lda	#BLACK|QUEEN
      9  7b7c		       85 97		      sta	currentPiece
     10  7b7e		       20 cc fc 	      jsr	AddMove
     11  7b81
     12  7b81		       a9 85		      lda	#BLACK|ROOK
     13  7b83		       85 97		      sta	currentPiece
     14  7b85		       a4 a9		      ldy	__temp
     15  7b87		       20 cc fc 	      jsr	AddMove
     16  7b8a
     17  7b8a		       a9 84		      lda	#BLACK|BISHOP
     18  7b8c		       85 97		      sta	currentPiece
     19  7b8e		       a4 a9		      ldy	__temp
     20  7b90		       20 cc fc 	      jsr	AddMove
     21  7b93
     22  7b93		       a9 83		      lda	#BLACK|KNIGHT
     23  7b95		       85 97		      sta	currentPiece
     24  7b97		       a4 a9		      ldy	__temp
     25  7b99		       20 cc fc 	      jsr	AddMove
     26  7b9c
     27  7b9c		       68		      pla
     28  7b9d		       85 97		      sta	currentPiece
    170  7b9f		       60		      rts
    171  7ba0
      0  7ba0					      DEF	Handle_BLACK_PAWN
      1  7ba0				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7ba0
      3  7ba0				   Handle_BLACK_PAWN
    173  7ba0					      SUBROUTINE
    174  7ba0
    175  7ba0		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    176  7ba3		       b9 7a f0 	      lda	Board,y
    177  7ba6		       d0 20		      bne	.pMoved	; occupied
    178  7ba8
    179  7ba8							; we may need to promote the pawn
    180  7ba8							; All possibilites (Q/R/B/N) are added as individual moves
    181  7ba8
      0  7ba8					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7ba8					      SUBROUTINE
      2  7ba8
      3  7ba8
      4  7ba8				  -	      IF	BLACK = WHITE
      5  7ba8				  -	      cpy	#90
      6  7ba8				  -	      bcc	.standard
      7  7ba8				  -	      jsr	PromoteWhitePawn
      8  7ba8				  -	      jmp	.pMoved
      9  7ba8					      ENDIF
     10  7ba8
     11  7ba8					      IF	BLACK = BLACK
     12  7ba8		       c0 1e		      cpy	#30
     13  7baa		       b0 06		      bcs	.standard
     14  7bac		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7baf		       4c b5 fb 	      jmp	.pMoved
     16  7bb2					      ENDIF
     17  7bb2
     18  7bb2		       20 cc fc    .standard  jsr	AddMove
     19  7bb5				   .pMoved
     20  7bb5
    183  7bb5
    184  7bb5							; the +2 move off the home rank...
    185  7bb5
    186  7bb5		       a6 98		      ldx	currentSquare
    187  7bb7		       e0 52		      cpx	#BLACK_HOME_ROW
    188  7bb9		       90 0d		      bcc	.pMoved	; pawn has moved so can't do +2
    189  7bbb		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    190  7bbe		       b9 7a f0 	      lda	Board,y
    191  7bc1		       d0 05		      bne	.pMoved	; destination square occupied
    192  7bc3
    193  7bc3		       20 cc fc 	      jsr	AddMove	; add the +2DOWN move off home row
    194  7bc6		       a6 98		      ldx	currentSquare
    195  7bc8
    196  7bc8				   .pMoved
    197  7bc8
    198  7bc8							; regular captures...
    199  7bc8
      0  7bc8					      TAKE	_DOWN+_LEFT, BLACK
      1  7bc8					      SUBROUTINE
      2  7bc8
      3  7bc8
      4  7bc8		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      5  7bcb		       30 16		      bmi	.invalid
      6  7bcd		       b9 7a f0 	      lda	Board,y
      7  7bd0		       f0 11		      beq	.invalid
      8  7bd2		       45 97		      eor	currentPiece
      9  7bd4		       10 0d		      bpl	.invalid
     10  7bd6
      0  7bd6					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bd6					      SUBROUTINE
      2  7bd6
      3  7bd6
      4  7bd6				  -	      IF	BLACK = WHITE
      5  7bd6				  -	      cpy	#90
      6  7bd6				  -	      bcc	.standard
      7  7bd6				  -	      jsr	PromoteWhitePawn
      8  7bd6				  -	      jmp	.pMoved
      9  7bd6					      ENDIF
     10  7bd6
     11  7bd6					      IF	BLACK = BLACK
     12  7bd6		       c0 1e		      cpy	#30
     13  7bd8		       b0 06		      bcs	.standard
     14  7bda		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bdd		       4c e3 fb 	      jmp	.pMoved
     16  7be0					      ENDIF
     17  7be0
     18  7be0		       20 cc fc    .standard  jsr	AddMove
     19  7be3				   .pMoved
     20  7be3
     12  7be3				   .invalid
    201  7be3		       a6 98		      ldx	currentSquare
      0  7be5					      TAKE	_DOWN+_RIGHT, BLACK
      1  7be5					      SUBROUTINE
      2  7be5
      3  7be5
      4  7be5		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      5  7be8		       30 16		      bmi	.invalid
      6  7bea		       b9 7a f0 	      lda	Board,y
      7  7bed		       f0 11		      beq	.invalid
      8  7bef		       45 97		      eor	currentPiece
      9  7bf1		       10 0d		      bpl	.invalid
     10  7bf3
      0  7bf3					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bf3					      SUBROUTINE
      2  7bf3
      3  7bf3
      4  7bf3				  -	      IF	BLACK = WHITE
      5  7bf3				  -	      cpy	#90
      6  7bf3				  -	      bcc	.standard
      7  7bf3				  -	      jsr	PromoteWhitePawn
      8  7bf3				  -	      jmp	.pMoved
      9  7bf3					      ENDIF
     10  7bf3
     11  7bf3					      IF	BLACK = BLACK
     12  7bf3		       c0 1e		      cpy	#30
     13  7bf5		       b0 06		      bcs	.standard
     14  7bf7		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bfa		       4c 00 fc 	      jmp	.pMoved
     16  7bfd					      ENDIF
     17  7bfd
     18  7bfd		       20 cc fc    .standard  jsr	AddMove
     19  7c00				   .pMoved
     20  7c00
     12  7c00				   .invalid
    203  7c00
    204  7c00							; en-passant captures...
    205  7c00
    206  7c00					      if	1
    207  7c00		       a5 9a		      lda	enPassantPawn
    208  7c02		       f0 2c		      beq	.noEnPassant
    209  7c04
    210  7c04		       a5 97		      lda	currentPiece
    211  7c06		       09 20		      ora	#ENPASSANT
    212  7c08		       85 97		      sta	currentPiece
    213  7c0a
      0  7c0a					      EN_PASSANT	_LEFT, _DOWN
      1  7c0a					      SUBROUTINE
      2  7c0a
      3  7c0a		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7c0d		       c4 9a		      cpy	enPassantPawn
      5  7c0f		       d0 0b		      bne	.invalid
      6  7c11		       bc 0b f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      7  7c14		       b9 7a f0 	      lda	Board,y
      8  7c17		       d0 03		      bne	.invalid
      9  7c19		       20 cc fc 	      jsr	AddMove
     10  7c1c				   .invalid
    215  7c1c		       a6 98		      ldx	currentSquare
      0  7c1e					      EN_PASSANT	_RIGHT, _DOWN
      1  7c1e					      SUBROUTINE
      2  7c1e
      3  7c1e		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7c21		       c4 9a		      cpy	enPassantPawn
      5  7c23		       d0 0b		      bne	.invalid
      6  7c25		       bc 0d f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      7  7c28		       b9 7a f0 	      lda	Board,y
      8  7c2b		       d0 03		      bne	.invalid
      9  7c2d		       20 cc fc 	      jsr	AddMove
     10  7c30				   .invalid
    217  7c30
    218  7c30				   .noEnPassant
    219  7c30					      endif
    220  7c30
    221  7c30		       4c a1 fa    Handle_BLANK jmp	MoveReturn
    222  7c33
    223  7c33							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  7c33					      include	"Handler_KNIGHT.asm"
      1  7c33							; Copyright (C)2020 Andrew Davie
      2  7c33							; Knight move handler
      3  7c33
      4  7c33							;---------------------------------------------------------------------------------------------------
      5  7c33							; KNIGHT
      6  7c33							;---------------------------------------------------------------------------------------------------
      7  7c33
      0  7c33					      DEF	Handle_KNIGHT
      1  7c33				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  7c33
      3  7c33				   Handle_KNIGHT
      9  7c33
     10  7c33							; x = currentSquare (square the piece is on)
     11  7c33							; currentPiece (with flags/colour attached)
     12  7c33
      0  7c33					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  7c33					      SUBROUTINE
      2  7c33		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  7c36		       30 0c		      bmi	.invalid
      4  7c38		       b9 7a f0 	      lda	Board,y
      5  7c3b		       f0 04		      beq	.squareEmpty
      6  7c3d		       45 97		      eor	currentPiece
      7  7c3f		       10 03		      bpl	.invalid
      8  7c41		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c44				   .invalid
      0  7c44					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  7c44		       a6 98		      ldx	currentSquare
      0  7c46					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  7c46					      SUBROUTINE
      2  7c46		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  7c49		       30 0c		      bmi	.invalid
      4  7c4b		       b9 7a f0 	      lda	Board,y
      5  7c4e		       f0 04		      beq	.squareEmpty
      6  7c50		       45 97		      eor	currentPiece
      7  7c52		       10 03		      bpl	.invalid
      8  7c54		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c57				   .invalid
      0  7c57					      MOVE_TO_X	_UP+_UP+_LEFT
      1  7c57		       a6 98		      ldx	currentSquare
      0  7c59					      MOVE_TO	_UP+_UP+_LEFT
      1  7c59					      SUBROUTINE
      2  7c59		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  7c5c		       30 0c		      bmi	.invalid
      4  7c5e		       b9 7a f0 	      lda	Board,y
      5  7c61		       f0 04		      beq	.squareEmpty
      6  7c63		       45 97		      eor	currentPiece
      7  7c65		       10 03		      bpl	.invalid
      8  7c67		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c6a				   .invalid
      0  7c6a					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  7c6a		       a6 98		      ldx	currentSquare
      0  7c6c					      MOVE_TO	_UP+_UP+_RIGHT
      1  7c6c					      SUBROUTINE
      2  7c6c		       bc 2b f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  7c6f		       30 0c		      bmi	.invalid
      4  7c71		       b9 7a f0 	      lda	Board,y
      5  7c74		       f0 04		      beq	.squareEmpty
      6  7c76		       45 97		      eor	currentPiece
      7  7c78		       10 03		      bpl	.invalid
      8  7c7a		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c7d				   .invalid
     17  7c7d
      0  7c7d					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  7c7d		       a6 98		      ldx	currentSquare
      0  7c7f					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  7c7f					      SUBROUTINE
      2  7c7f		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  7c82		       30 0c		      bmi	.invalid
      4  7c84		       b9 7a f0 	      lda	Board,y
      5  7c87		       f0 04		      beq	.squareEmpty
      6  7c89		       45 97		      eor	currentPiece
      7  7c8b		       10 03		      bpl	.invalid
      8  7c8d		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c90				   .invalid
      0  7c90					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  7c90		       a6 98		      ldx	currentSquare
      0  7c92					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  7c92					      SUBROUTINE
      2  7c92		       bc 0e f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  7c95		       30 0c		      bmi	.invalid
      4  7c97		       b9 7a f0 	      lda	Board,y
      5  7c9a		       f0 04		      beq	.squareEmpty
      6  7c9c		       45 97		      eor	currentPiece
      7  7c9e		       10 03		      bpl	.invalid
      8  7ca0		       20 cc fc    .squareEmpty jsr	AddMove
      9  7ca3				   .invalid
      0  7ca3					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  7ca3		       a6 98		      ldx	currentSquare
      0  7ca5					      MOVE_TO	_UP+_LEFT+_LEFT
      1  7ca5					      SUBROUTINE
      2  7ca5		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  7ca8		       30 0c		      bmi	.invalid
      4  7caa		       b9 7a f0 	      lda	Board,y
      5  7cad		       f0 04		      beq	.squareEmpty
      6  7caf		       45 97		      eor	currentPiece
      7  7cb1		       10 03		      bpl	.invalid
      8  7cb3		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cb6				   .invalid
      0  7cb6					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  7cb6		       a6 98		      ldx	currentSquare
      0  7cb8					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  7cb8					      SUBROUTINE
      2  7cb8		       bc 22 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  7cbb		       30 0c		      bmi	.invalid
      4  7cbd		       b9 7a f0 	      lda	Board,y
      5  7cc0		       f0 04		      beq	.squareEmpty
      6  7cc2		       45 97		      eor	currentPiece
      7  7cc4		       10 03		      bpl	.invalid
      8  7cc6		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cc9				   .invalid
     22  7cc9
     23  7cc9		       4c a1 fa 	      jmp	MoveReturn
     24  7ccc
     25  7ccc							; EOF
------- FILE BANK_FIXED.asm
    665  7ccc
    666  7ccc							;---------------------------------------------------------------------------------------------------
    667  7ccc
      0  7ccc					      DEF	AddMove
      1  7ccc				   BANK_AddMove SET	_CURRENT_BANK
      2  7ccc
      3  7ccc				   AddMove
    669  7ccc
    670  7ccc							; add square in y register to movelist as destination (X12 format)
    671  7ccc							; currentPiece = piece moving
    672  7ccc							; currentSquare = start square (X12)
    673  7ccc							; ??do not modify y
    674  7ccc
    675  7ccc		       a5 9c		      lda	currentPly
    676  7cce		       85 3e		      sta	SET_BANK_RAM
    677  7cd0
    678  7cd0							; [y]		     to square (X12)
    679  7cd0							; currentSquare     from square (X12)
    680  7cd0							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    681  7cd0							; do not modify [Y]
    682  7cd0
    683  7cd0							; add a move to the movelist
    684  7cd0
    685  7cd0		       98		      tya
    686  7cd1
    687  7cd1		       ac 35 f0 	      ldy	moveIndex
    688  7cd4		       c8		      iny
    689  7cd5		       8c 35 f4 	      sty	moveIndex+RAM_WRITE
    690  7cd8
    691  7cd8		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y
    692  7cdb		       aa		      tax		; new square (for projections)
    693  7cdc
    694  7cdc		       a5 98		      lda	currentSquare
    695  7cde		       99 36 f4 	      sta	MoveFrom+RAM_WRITE,y
    696  7ce1		       a5 97		      lda	currentPiece
    697  7ce3		       99 80 f5 	      sta	MovePiece+RAM_WRITE,y
    698  7ce6
    699  7ce6		       a9 08		      lda	#RAMBANK_MOVES_RAM
    700  7ce8		       85 3e		      sta	SET_BANK_RAM
    701  7cea		       60		      rts
    702  7ceb
    703  7ceb							;---------------------------------------------------------------------------------------------------
    704  7ceb
    705  7ceb
      0  7ceb					      DEF	InitialisePieceSquares
      1  7ceb				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7ceb
      3  7ceb				   InitialisePieceSquares
    707  7ceb
    708  7ceb							; Zap the board with the "blank" ROM copy
    709  7ceb
      0  7ceb					      JSRAM_SAFE	PutAllPieces
      1  7ceb
      2  7ceb
      3  7ceb
      4  7ceb		       a9 0c		      lda	#BANK_PutAllPieces
      5  7ced		       85 8e		      sta	savedBank
      6  7cef		       85 3f		      sta	SET_BANK
      7  7cf1		       20 a6 f3 	      jsr	PutAllPieces
    711  7cf4
    712  7cf4							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    713  7cf4
    714  7cf4		       a9 09		      lda	#RAMBANK_PLY
    715  7cf6		       85 3e		      sta	SET_BANK_RAM
    716  7cf8		       20 00 f2 	      jsr	InitPieceLists	; for white
    717  7cfb		       a9 0a		      lda	#RAMBANK_PLY+1
    718  7cfd		       85 3e		      sta	SET_BANK_RAM
    719  7cff		       20 00 f2 	      jsr	InitPieceLists	; for black
    720  7d02
    721  7d02				   SetupBoard
    722  7d02
    723  7d02							; Now setup the board/piecelists
    724  7d02
    725  7d02		       a2 00		      ldx	#0
    726  7d04				   .fillPieceLists
    727  7d04
    728  7d04		       a9 09		      lda	#RAMBANK_PLY
    729  7d06		       85 3e		      sta	SET_BANK_RAM
    730  7d08
    731  7d08		       bd 4f f2 	      lda	InitPieceList,x	; colour/-1
    732  7d0b		       f0 2e		      beq	.finBoardSetup
    733  7d0d
    734  7d0d		       0a		      asl
    735  7d0e		       a9 09		      lda	#RAMBANK_PLY
    736  7d10		       69 00		      adc	#0
    737  7d12		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    738  7d14
    739  7d14		       ac 30 f0 	      ldy	PieceListPtr
    740  7d17		       c8		      iny
    741  7d18
    742  7d18		       bd 50 f2 	      lda	InitPieceList+1,x	; square
    743  7d1b		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    744  7d1e		       98		      tya
    745  7d1f		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    746  7d22
    747  7d22		       bd 4f f2 	      lda	InitPieceList,x	; piece type
    748  7d25		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    749  7d28		       48		      pha
    750  7d29
    751  7d29		       8c 30 f4 	      sty	PieceListPtr+RAM_WRITE
    752  7d2c
    753  7d2c
    754  7d2c		       bc 50 f2 	      ldy	InitPieceList+1,x	; square
    755  7d2f
    756  7d2f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    757  7d31		       85 3e		      sta	SET_BANK_RAM
    758  7d33		       68		      pla
    759  7d34		       99 7a f4 	      sta	Board+RAM_WRITE,y
    760  7d37
    761  7d37		       e8		      inx
    762  7d38		       e8		      inx
    763  7d39		       10 c9		      bpl	.fillPieceLists
    764  7d3b
    765  7d3b				   .finBoardSetup
    766  7d3b				   FinBoard
    767  7d3b
    768  7d3b		       60		      rts
    769  7d3c
    770  7d3c							;---------------------------------------------------------------------------------------------------
    771  7d3c
      0  7d3c					      DEF	SAFE_GetPieceFromBoard
      1  7d3c				   BANK_SAFE_GetPieceFromBoard SET	_CURRENT_BANK
      2  7d3c
      3  7d3c				   SAFE_GetPieceFromBoard
    773  7d3c
    774  7d3c							; y = X12 board index
    775  7d3c
    776  7d3c		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    777  7d3e		       86 3e		      stx	SET_BANK_RAM
    778  7d40		       a6 8e		      ldx	savedBank
    779  7d42		       b9 7a f0 	      lda	Board,y
    780  7d45		       86 3f		      stx	SET_BANK
    781  7d47		       60		      rts
    782  7d48
    783  7d48							;---------------------------------------------------------------------------------------------------
    784  7d48
      0  7d48					      DEF	calculateFromSquare
      1  7d48				   BANK_calculateFromSquare SET	_CURRENT_BANK
      2  7d48
      3  7d48				   calculateFromSquare
    786  7d48					      SUBROUTINE
    787  7d48
    788  7d48		       a5 88		      lda	highlight_row
    789  7d4a		       49 07		      eor	#7
    790  7d4c		       0a		      asl
    791  7d4d		       0a		      asl
    792  7d4e		       0a		      asl
    793  7d4f		       05 8a		      ora	highlight_col
    794  7d51		       aa		      tax
    795  7d52
    796  7d52		       86 91		      stx	aiFromSquare
    797  7d54		       60		      rts
    798  7d55
    799  7d55							;---------------------------------------------------------------------------------------------------
    800  7d55
      0  7d55					      DEF	SAFE_IsValidMoveFromSquare
      1  7d55				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7d55
      3  7d55				   SAFE_IsValidMoveFromSquare
    802  7d55
    803  7d55							; Does the square exist in the movelist?
    804  7d55
    805  7d55		       20 48 fd 	      jsr	calculateFromSquare
    806  7d58
    807  7d58		       a9 08		      lda	#RAMBANK_MOVES_RAM
    808  7d5a		       85 3e		      sta	SET_BANK_RAM
    809  7d5c		       bc 66 f3 	      ldy	Base64ToIndex,x
    810  7d5f		       84 93		      sty	aiFromSquareX12
    811  7d61
    812  7d61							;		      lda Board,y     ; should be the movelist piece
    813  7d61							;		      sta aiPiece
    814  7d61		       98		      tya
    815  7d62
    816  7d62		       a4 9c		      ldy	currentPly
    817  7d64		       84 3e		      sty	SET_BANK_RAM
    818  7d66		       20 81 f3 	      jsr	CheckMoveListFromSquare
    819  7d69
    820  7d69		       a5 8e		      lda	savedBank
    821  7d6b		       85 3f		      sta	SET_BANK
    822  7d6d		       60		      rts
    823  7d6e
    824  7d6e							;---------------------------------------------------------------------------------------------------
    825  7d6e
      0  7d6e					      DEF	SAFE_IsValidMoveToSquare
      1  7d6e				   BANK_SAFE_IsValidMoveToSquare SET	_CURRENT_BANK
      2  7d6e
      3  7d6e				   SAFE_IsValidMoveToSquare
    827  7d6e
    828  7d6e							; Does the square exist in the movelist?
    829  7d6e
    830  7d6e		       a5 88		      lda	highlight_row
    831  7d70		       49 07		      eor	#7
    832  7d72		       0a		      asl
    833  7d73		       0a		      asl
    834  7d74		       0a		      asl
    835  7d75		       05 8a		      ora	highlight_col
    836  7d77		       aa		      tax
    837  7d78
    838  7d78		       86 92		      stx	aiToSquare
    839  7d7a
    840  7d7a		       a9 08		      lda	#RAMBANK_MOVES_RAM
    841  7d7c		       85 3e		      sta	SET_BANK_RAM
    842  7d7e		       bd 66 f3 	      lda	Base64ToIndex,x
    843  7d81		       85 94		      sta	aiToSquareX12
    844  7d83
    845  7d83		       a4 9c		      ldy	currentPly
    846  7d85		       84 3e		      sty	SET_BANK_RAM
    847  7d87		       20 94 f3 	      jsr	CheckMoveListToSquare
    848  7d8a
    849  7d8a		       a5 8e	   .found     lda	savedBank
    850  7d8c		       85 3f		      sta	SET_BANK
    851  7d8e		       60		      rts
    852  7d8f
    853  7d8f							;---------------------------------------------------------------------------------------------------
    854  7d8f
      0  7d8f					      DEF	SAFE_PutPieceToBoard
      1  7d8f				   BANK_SAFE_PutPieceToBoard SET	_CURRENT_BANK
      2  7d8f
      3  7d8f				   SAFE_PutPieceToBoard
    856  7d8f
    857  7d8f							; y = board index
    858  7d8f							; a = piece
    859  7d8f
    860  7d8f		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    861  7d91		       86 3e		      stx	SET_BANK_RAM
    862  7d93		       99 7a f4 	      sta	Board+RAM_WRITE,y
    863  7d96		       a6 8e		      ldx	savedBank
    864  7d98		       86 3f		      stx	SET_BANK
    865  7d9a		       60		      rts
    866  7d9b
    867  7d9b							;---------------------------------------------------------------------------------------------------
    868  7d9b
      0  7d9b					      DEF	SAFE_CopyShadowROMtoRAM
      1  7d9b				   BANK_SAFE_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7d9b
      3  7d9b				   SAFE_CopyShadowROMtoRAM
    870  7d9b		       20 a3 fd 	      jsr	CopyShadowROMtoRAM
    871  7d9e		       a5 8e		      lda	savedBank
    872  7da0		       85 3f		      sta	SET_BANK
    873  7da2		       60		      rts
    874  7da3
      0  7da3					      DEF	CopyShadowROMtoRAM
      1  7da3				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7da3
      3  7da3				   CopyShadowROMtoRAM
    876  7da3							; pass x = source bank
    877  7da3							; pass y = destination bank (preserved)
    878  7da3
    879  7da3		       86 a8		      stx	__sourceBank
    880  7da5
    881  7da5		       a2 00		      ldx	#0
    882  7da7		       a5 a8	   .copyPage  lda	__sourceBank
    883  7da9		       85 3f		      sta	SET_BANK
    884  7dab
    885  7dab		       bd 00 f0 	      lda	$F000,x
    886  7dae		       48		      pha
    887  7daf		       bd 00 f1 	      lda	$F100,x
    888  7db2		       48		      pha
    889  7db3		       bd 00 f2 	      lda	$F200,x
    890  7db6		       48		      pha
    891  7db7		       bd 00 f3 	      lda	$F300,x
    892  7dba
    893  7dba		       84 3e		      sty	SET_BANK_RAM
    894  7dbc
    895  7dbc		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    896  7dbf		       68		      pla
    897  7dc0		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    898  7dc3		       68		      pla
    899  7dc4		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    900  7dc7		       68		      pla
    901  7dc8		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    902  7dcb
    903  7dcb		       ca		      dex
    904  7dcc		       d0 d9		      bne	.copyPage
    905  7dce		       60		      rts
    906  7dcf
    907  7dcf							;---------------------------------------------------------------------------------------------------
    908  7dcf
      0  7dcf					      DEF	SAFE_CopySinglePiece
      1  7dcf				   BANK_SAFE_CopySinglePiece SET	_CURRENT_BANK
      2  7dcf
      3  7dcf				   SAFE_CopySinglePiece
    910  7dcf
    911  7dcf		       20 d7 fd 	      jsr	CopySinglePiece
    912  7dd2		       a5 8e		      lda	savedBank
    913  7dd4		       85 3f		      sta	SET_BANK
    914  7dd6		       60		      rts
    915  7dd7
    916  7dd7
      0  7dd7					      DEF	CopySinglePiece
      1  7dd7				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7dd7
      3  7dd7				   CopySinglePiece
    918  7dd7
    919  7dd7
    920  7dd7		       a9 08		      lda	#RAMBANK_MOVES_RAM
    921  7dd9		       85 3e		      sta	SET_BANK_RAM
    922  7ddb		       20 bb f3 	      jsr	CopySetup
    923  7dde
      0  7dde					      DEF	InterceptMarkerCopy
      1  7dde				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7dde
      3  7dde				   InterceptMarkerCopy
    925  7dde
    926  7dde							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    927  7dde							; y = piece index
    928  7dde
    929  7dde		       a9 09		      lda	#BANK_PIECE_VECTOR_BANK
    930  7de0		       85 3f		      sta	SET_BANK
    931  7de2
    932  7de2		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
    933  7de5		       85 ef		      sta	__ptr
    934  7de7		       b9 80 f0 	      lda	PIECE_VECTOR_HI,y
    935  7dea		       85 f0		      sta	__ptr+1
    936  7dec		       b9 00 f1 	      lda	PIECE_VECTOR_BANK,y
    937  7def		       85 3f		      sta	SET_BANK
    938  7df1
    939  7df1		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
    940  7df3		       b1 ef	   .copyP     lda	(__ptr),y
    941  7df5		       99 a7 00 	      sta	__pieceShapeBuffer,y
    942  7df8		       88		      dey
    943  7df9		       10 f8		      bpl	.copyP
    944  7dfb
    945  7dfb
    946  7dfb		       a5 80		      lda	drawPieceNumber
    947  7dfd		       4a		      lsr
    948  7dfe		       4a		      lsr
    949  7dff		       4a		      lsr
    950  7e00		       49 07		      eor	#7
    951  7e02		       aa		      tax
    952  7e03
    953  7e03		       a5 80		      lda	drawPieceNumber
    954  7e05		       29 04		      and	#4
    955  7e07		       c9 04		      cmp	#4	; cc = left side, cs = right side
    956  7e09
    957  7e09		       86 3e		      stx	SET_BANK_RAM
    958  7e0b		       4c d3 f0 	      jmp	CopyPieceToRowBitmap
    959  7e0e
    960  7e0e							;---------------------------------------------------------------------------------------------------
    961  7e0e
      0  7e0e					      DEF	MoveViaList
      1  7e0e				   BANK_MoveViaList SET	_CURRENT_BANK
      2  7e0e
      3  7e0e				   MoveViaList
    963  7e0e
    964  7e0e		       a5 9c		      lda	currentPly
    965  7e10		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    966  7e12
    967  7e12		       20 22 f3 	      jsr	MoveViaListAtPly
    968  7e15		       60		      rts
    969  7e16
    970  7e16							;---------------------------------------------------------------------------------------------------
    971  7e16
      0  7e16					      DEF	FinaliseMove
      1  7e16				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  7e16
      3  7e16				   FinaliseMove
    973  7e16
    974  7e16							; Now the visible movement on the board has happened, fix up the pointers to the pieces
    975  7e16							; for both sides.
    976  7e16
    977  7e16
    978  7e16		       a5 9e		      lda	sideToMove
    979  7e18		       0a		      asl
    980  7e19		       a9 09		      lda	#RAMBANK_PLY
    981  7e1b		       69 00		      adc	#0
    982  7e1d		       85 3e		      sta	SET_BANK_RAM
    983  7e1f
    984  7e1f		       20 c7 f2 	      jsr	FixPieceList
    985  7e22
    986  7e22		       a5 87		      lda	toX12
    987  7e24		       85 86		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
    988  7e26		       a9 00		      lda	#0
    989  7e28		       85 87		      sta	toX12	; --> deleted (square=0)
    990  7e2a
    991  7e2a		       a5 a3		      lda	lastPiece
    992  7e2c		       f0 0e		      beq	.notake
    993  7e2e
    994  7e2e		       a5 9e		      lda	sideToMove
    995  7e30		       49 80		      eor	#128
    996  7e32		       0a		      asl
    997  7e33		       a9 09		      lda	#RAMBANK_PLY
    998  7e35		       69 00		      adc	#0
    999  7e37		       85 3e		      sta	SET_BANK_RAM
   1000  7e39
   1001  7e39		       20 c7 f2 	      jsr	FixPieceList	; REMOVE any captured object
   1002  7e3c
   1003  7e3c							; And swap sides to move...
   1004  7e3c
   1005  7e3c		       a5 9e	   .notake    lda	sideToMove
   1006  7e3e		       49 80		      eor	#128
   1007  7e40		       85 9e		      sta	sideToMove
   1008  7e42
   1009  7e42		       60		      rts
   1010  7e43
   1011  7e43							;---------------------------------------------------------------------------------------------------
   1012  7e43
   1013  7e43
      0  7e43					      DEF	InitialiseChessboard
      1  7e43				   BANK_InitialiseChessboard SET	_CURRENT_BANK
      2  7e43
      3  7e43				   InitialiseChessboard
   1015  7e43
   1016  7e43		       a9 00		      lda	#WHITE
   1017  7e45		       85 9e		      sta	sideToMove
   1018  7e47		       60		      rts
   1019  7e48
   1020  7e48							;---------------------------------------------------------------------------------------------------
   1021  7e48
   1022  7e48
      0  7e48					      DEF	SAFE_getMoveIndex
      1  7e48				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7e48
      3  7e48				   SAFE_getMoveIndex
   1024  7e48					      SUBROUTINE
   1025  7e48
   1026  7e48		       a9 09		      lda	#RAMBANK_PLY
   1027  7e4a		       85 3e		      sta	SET_BANK_RAM
   1028  7e4c		       ad 35 f0 	      lda	moveIndex
   1029  7e4f		       a6 8e		      ldx	savedBank
   1030  7e51		       86 3f		      stx	SET_BANK
   1031  7e53		       60		      rts
   1032  7e54
   1033  7e54							;---------------------------------------------------------------------------------------------------
   1034  7e54
      0  7e54					      DEF	SAFE_showMoveOptions
      1  7e54				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  7e54
      3  7e54				   SAFE_showMoveOptions
   1036  7e54					      SUBROUTINE
   1037  7e54
   1038  7e54							; place a marker on the board for any square matching the piece
   1039  7e54							; EXCEPT for squares which are occupied (we'll flash those later)
   1040  7e54							; x = movelist item # being checked
   1041  7e54
   1042  7e54
   1043  7e54		       a6 95	   .next      ldx	aiMoveIndex
   1044  7e56		       30 31		      bmi	.skip
   1045  7e58
   1046  7e58		       ad 84 02 	      lda	INTIM
   1047  7e5b		       c9 28		      cmp	#SAFETIME
   1048  7e5d		       90 2a		      bcc	.skip
   1049  7e5f
   1050  7e5f		       a9 09		      lda	#RAMBANK_PLY	; white
   1051  7e61		       85 3e		      sta	SET_BANK_RAM
   1052  7e63
   1053  7e63		       c6 95		      dec	aiMoveIndex
   1054  7e65
   1055  7e65		       bd 36 f0 	      lda	MoveFrom,x
   1056  7e68		       c5 93		      cmp	aiFromSquareX12
   1057  7e6a		       d0 e8		      bne	.next
   1058  7e6c
   1059  7e6c		       bc 00 f1 	      ldy	MoveTo,x
   1060  7e6f
   1061  7e6f		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1062  7e71		       85 3e		      sta	SET_BANK_RAM
   1063  7e73
   1064  7e73		       b9 7a f0 	      lda	Board,y
   1065  7e76		       d0 dc		      bne	.next
   1066  7e78
   1067  7e78		       a5 80		      lda	drawPieceNumber
   1068  7e7a		       48		      pha
   1069  7e7b
   1070  7e7b		       b9 00 ff 	      lda	X12toBase64,y
   1071  7e7e		       85 80		      sta	drawPieceNumber
   1072  7e80
   1073  7e80		       20 b2 f3 	      jsr	CopySetupForMarker
   1074  7e83		       20 de fd 	      jsr	InterceptMarkerCopy
   1075  7e86
   1076  7e86		       68		      pla
   1077  7e87		       85 80		      sta	drawPieceNumber
   1078  7e89
   1079  7e89				   .dontDrawCaptures
   1080  7e89		       a5 8e	   .skip      lda	savedBank
   1081  7e8b		       85 3f		      sta	SET_BANK
   1082  7e8d		       60		      rts
   1083  7e8e
   1084  7e8e
   1085  7e8e		       00 28	   SAFETIME   =	40	; time required to be able to safely do a piece draw TODO: optimise
   1086  7e8e
      0  7e8e					      DEF	SAFE_showMoveCaptures
      1  7e8e				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7e8e
      3  7e8e				   SAFE_showMoveCaptures
   1088  7e8e					      SUBROUTINE
   1089  7e8e
   1090  7e8e							; place a marker on the board for any square matching the piece
   1091  7e8e							; EXCEPT for squares which are occupied (we'll flash those later)
   1092  7e8e							; x = movelist item # being checked
   1093  7e8e
   1094  7e8e
   1095  7e8e		       a6 95	   .next      ldx	aiMoveIndex
   1096  7e90		       30 2e		      bmi	.skip
   1097  7e92
   1098  7e92		       ad 84 02 	      lda	INTIM
   1099  7e95		       c9 18		      cmp	#24	;SAFETIME
   1100  7e97		       90 27		      bcc	.skip
   1101  7e99
   1102  7e99		       a9 09		      lda	#RAMBANK_PLY	; white
   1103  7e9b		       85 3e		      sta	SET_BANK_RAM
   1104  7e9d		       c6 95		      dec	aiMoveIndex
   1105  7e9f
   1106  7e9f		       bd 36 f0 	      lda	MoveFrom,x
   1107  7ea2		       c5 93		      cmp	aiFromSquareX12
   1108  7ea4		       d0 e8		      bne	.next
   1109  7ea6
   1110  7ea6		       bc 00 f1 	      ldy	MoveTo,x
   1111  7ea9
   1112  7ea9		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1113  7eab		       85 3e		      sta	SET_BANK_RAM
   1114  7ead
   1115  7ead		       b9 7a f0 	      lda	Board,y
   1116  7eb0		       f0 dc		      beq	.next
   1117  7eb2
   1118  7eb2		       a5 80		      lda	drawPieceNumber
   1119  7eb4		       48		      pha
   1120  7eb5
   1121  7eb5		       b9 00 ff 	      lda	X12toBase64,y
   1122  7eb8		       85 80		      sta	drawPieceNumber
   1123  7eba
   1124  7eba		       20 d7 fd 	      jsr	CopySinglePiece
   1125  7ebd
   1126  7ebd		       68		      pla
   1127  7ebe		       85 80		      sta	drawPieceNumber
   1128  7ec0
   1129  7ec0				   .dontDrawBlanks
   1130  7ec0		       a5 8e	   .skip      lda	savedBank
   1131  7ec2		       85 3f		      sta	SET_BANK
   1132  7ec4		       60		      rts
   1133  7ec5
   1134  7ec5
      0  7ec5					      OPTIONAL_PAGEBREAK	"X12toBase64", 100
 PAGE BREAK INSERTED FOR  X12toBase64
 REQUESTED SIZE =  $64
 WASTED SPACE =  $3b
 PAGEBREAK LOCATION =  $ff00
     10  7f00					      LIST	ON
   1136  7f00
   1137  7f00				   X12toBase64
   1138  7f00
   1139  7f00							; Use this table to
   1140  7f00							;   a) Determine if a square is valid (-1 = NO)
   1141  7f00							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
   1142  7f00							;	if a white pawn on square "x" can move "up" the board.
   1143  7f00
   1144  7f00		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1145  7f0a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1146  7f14		       ff ff 00 01*	      .byte.b	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7
   1147  7f1e		       ff ff 08 09*	      .byte.b	-1, -1, 8, 9, 10, 11, 12, 13, 14, 15
   1148  7f28		       ff ff 10 11*	      .byte.b	-1, -1, 16, 17, 18, 19, 20, 21, 22, 23
   1149  7f32		       ff ff 18 19*	      .byte.b	-1, -1, 24, 25, 26, 27, 28, 29, 30, 31
   1150  7f3c		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
   1151  7f46		       ff ff 28 29*	      .byte.b	-1, -1, 40, 41, 42, 43, 44, 45, 46, 47
   1152  7f50		       ff ff 30 31*	      .byte.b	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55
   1153  7f5a		       ff ff 38 39*	      .byte.b	-1, -1, 56, 57, 58, 59, 60, 61, 62, 63
   1154  7f64
   1155  7f64
 FREE BYTES IN FIXED BANK =  $98
   1156  7f64					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1157  7f64
   1158  7f64							;---------------------------------------------------------------------------------------------------
   1159  7f64							; The reset vectors
   1160  7f64							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
   1161  7f64
   1162  8000 ????				      SEG	InterruptVectors
   1163  7ffc					      ORG	FIXED_BANK + $7FC
   1164  7ffc					      RORG	$7ffC
   1165  7ffc
   1166  7ffc							;		 .word Reset	       ; NMI	    (not used)
   1167  7ffc		       00 f8		      .word.w	Reset	; RESET
   1168  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1169  8000
   1170  8000							;---------------------------------------------------------------------------------------------------
   1171  8000							; EOF
------- FILE ./chess.asm
    367  8000
    368  8000							;END
