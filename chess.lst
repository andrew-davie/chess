------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						; assemble diagnostics. Remove for release.
     31  0000 ????	       00 01	   ASSERTS    =	1
     32  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     33  0000 ????
     34  0000 ????						;===================================
     35  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     36  0000 ????						;===================================
     37  0000 ????
     38  0000 ????						;-------------------------------------------------------------------------------
     39  0000 ????						; The following are optional YES/NO depending on phase of the moon
     40  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     41  0000 ????						;-------------------------------------------------------------------------------
     42  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     43  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     44  0000 ????			  -	      IF	FINAL_VERSION = YES
     45  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     46  0000 ????				      ENDIF
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????
     50  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     51  0000 ????
     52  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     53  0000 ????
     54  0000 ????						;------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????	       00 01	   PLUSCART   =	YES
     57  0000 ????
     58  0000 ????						;------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????
     61  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     62  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     63  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     64  0000 ????
     65  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     66  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     67  0000 ????
     68  0000 ????
     69  0000 ????	       10 00	   RAM_3E     =	$1000
     70  0000 ????	       04 00	   RAM_SIZE   =	$400
     71  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     72  0000 ????
     73  0000 ????
     74  0000 ????
     75  0000 ????
     76  0000 ????						; Platform constants:
     77  0000 ????	       00 02	   PAL	      =	%10
     78  0000 ????	       00 02	   PAL_50     =	PAL|0
     79  0000 ????	       00 03	   PAL_60     =	PAL|1
     80  0000 ????
     81  0000 ????
     82  0000 ????				      IF	L276
     83  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     84  0000 ????			  -	      ELSE
     85  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     86  0000 ????				      ENDIF
     87  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     88  0000 ????
     89  0000 ????				      IF	L276
     90  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     91  0000 ????			  -	      ELSE
     92  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     93  0000 ????				      ENDIF
     94  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     95  0000 ????
     96  0000 ????				      IF	L276
     97  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     98  0000 ????			  -	      ELSE
     99  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
    100  0000 ????				      ENDIF
    101  0000 ????	       01 38	   SCANLINES_PAL =	312
    102  0000 ????
    103  0000 ????
    104  0000 ????	       00 26	   TIME_PART_2 =	38
    105  0000 ????	       00 37	   TIME_PART_1 =	55
    106  0000 ????
    107  0000 ????
    108  0000 ????						;------------------------------------------------------------------------------
    109  0000 ????						; MACRO definitions
    110  0000 ????
    111  0000 ????
    112  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    113  0000 ????
    114  0000 ????				      MAC	newbank
    115  0000 ????				      SEG	{1}
    116  0000 ????				      ORG	ORIGIN
    117  0000 ????				      RORG	$F000
    118  0000 ????			   BANK_START SET	*
    119  0000 ????			   {1}	      SET	ORIGIN / 2048
    120  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    121  0000 ????			   _CURRENT_BANK SET	{1}
    122  0000 ????				      ENDM		; bank name
    123  0000 ????
    124  0000 ????				      MAC	define_1k_segment
    125  0000 ????				      ALIGN	$400
    126  0000 ????			   SEGMENT_{1} SET	*
    127  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    128  0000 ????				      ENDM		; {seg name}
    129  0000 ????
    130  0000 ????				      MAC	check_bank_size
    131  0000 ????			   .TEMP      =	* - BANK_START
    132  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    133  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    134  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    135  0000 ????				      ERR
    136  0000 ????				      endif
    137  0000 ????				      ENDM		; name
    138  0000 ????
    139  0000 ????
    140  0000 ????				      MAC	check_half_bank_size
    141  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    142  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    143  0000 ????			   .TEMP      =	* - BANK_START
    144  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    145  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    146  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    147  0000 ????				      ERR
    148  0000 ????				      endif
    149  0000 ????				      ENDM		; name
    150  0000 ????
    151  0000 ????
    152  0000 ????						;---------------------------------------------------------------------------------------------------
    153  0000 ????
    154  0000 ????						; Macro inserts a page break if the object would overlap a page
    155  0000 ????
    156  0000 ????				      MAC	optional_pagebreak
    157  0000 ????				      LIST	OFF
    158  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    159  0000 ????			   EARLY_LOCATION SET	*
    160  0000 ????				      ALIGN	256
    161  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    162  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    163  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    164  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    165  0000 ????				      ENDIF
    166  0000 ????				      LIST	ON
    167  0000 ????				      ENDM		; { string, size }
    168  0000 ????
    169  0000 ????
    170  0000 ????				      MAC	check_page_crossing
    171  0000 ????				      LIST	OFF
    172  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    173  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    174  0000 ????				      endif
    175  0000 ????				      LIST	ON
    176  0000 ????				      ENDM
    177  0000 ????
    178  0000 ????				      MAC	checkpage
    179  0000 ????				      LIST	OFF
    180  0000 ????				      IF	>. != >{1}
    181  0000 ????				      ECHO	""
    182  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    183  0000 ????				      ECHO	""
    184  0000 ????				      ERR
    185  0000 ????				      ENDIF
    186  0000 ????				      LIST	ON
    187  0000 ????				      ENDM
    188  0000 ????
    189  0000 ????				      MAC	checkpagex
    190  0000 ????				      LIST	OFF
    191  0000 ????				      IF	>. != >{1}
    192  0000 ????				      ECHO	""
    193  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    194  0000 ????				      ECHO	{2}
    195  0000 ????				      ECHO	""
    196  0000 ????				      ERR
    197  0000 ????				      ENDIF
    198  0000 ????				      LIST	ON
    199  0000 ????				      ENDM
    200  0000 ????
    201  0000 ????
    202  0000 ????						;---------------------------------------------------------------------------------------------------
    203  0000 ????
    204  0000 ????				      MAC	def
    205  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    206  0000 ????						;    SUBROUTINE      ; doesn't work in a macro!
    207  0000 ????			   {1}			; entry point
    208  0000 ????				      ENDM		; name of subroutine
    209  0000 ????
    210  0000 ????						;---------------------------------------------------------------------------------------------------
    211  0000 ????
    212  0000 ????				      MAC	newrambank
    213  0000 ????						; {1}	     bank name
    214  0000 ????						; {2}	     RAM bank number
    215  0000 ????
    216  0000 ????				      SEG.U	{1}
    217  0000 ????				      ORG	ORIGIN_RAM
    218  0000 ????				      RORG	RAM_3E
    219  0000 ????			   BANK_START SET	*
    220  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    221  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    222  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    223  0000 ????				      ENDM		; bank name
    224  0000 ????
    225  0000 ????						; TODO - fix - this is faulty....
    226  0000 ????				      MAC	validate_ram_size
    227  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    228  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    229  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    230  0000 ????				      ERR
    231  0000 ????				      ENDIF
    232  0000 ????				      ENDM
    233  0000 ????
    234  0000 ????						;---------------------------------------------------------------------------------------------------
    235  0000 ????
    236  0000 ????				      MAC	resync
    237  0000 ????						; resync screen, X and Y == 0 afterwards
    238  0000 ????				      lda	#%10	; make sure VBLANK is ON
    239  0000 ????				      sta	VBLANK
    240  0000 ????
    241  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    242  0000 ????			   .loopResync
    243  0000 ????				      VERTICAL_SYNC
    244  0000 ????
    245  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    246  0000 ????				      lda	Platform
    247  0000 ????				      eor	#PAL_50	; PAL-50?
    248  0000 ????				      bne	.ntsc
    249  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    250  0000 ????			   .ntsc
    251  0000 ????			   .loopWait
    252  0000 ????				      sta	WSYNC
    253  0000 ????				      sta	WSYNC
    254  0000 ????				      dey
    255  0000 ????				      bne	.loopWait
    256  0000 ????				      dex
    257  0000 ????				      bne	.loopResync
    258  0000 ????				      ENDM
    259  0000 ????
    260  0000 ????				      MAC	set_platform
    261  0000 ????						; 00 = NTSC
    262  0000 ????						; 01 = NTSC
    263  0000 ????						; 10 = PAL-50
    264  0000 ????						; 11 = PAL-60
    265  0000 ????				      lda	SWCHB
    266  0000 ????				      rol
    267  0000 ????				      rol
    268  0000 ????				      rol
    269  0000 ????				      and	#%11
    270  0000 ????				      eor	#PAL
    271  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    272  0000 ????				      ENDM
    273  0000 ????
    274  0000 ????
    275  0000 ????						;---------------------------------------------------------------------------------------------------
    276  0000 ????
    277  0000 ????				      MAC	jsram_safe
    278  0000 ????						; Saves bank of routine to variable for later restore.
    279  0000 ????						; Switches to the bank and does a JSR to the routine.
    280  0000 ????
    281  0000 ????				      lda	#BANK_{1}
    282  0000 ????				      sta	savedBank
    283  0000 ????				      sta	SET_BANK
    284  0000 ????				      jsr	{1}
    285  0000 ????				      ENDM		; {routine}
    286  0000 ????
    287  0000 ????
    288  0000 ????				      MAC	jsram
    289  0000 ????
    290  0000 ????				      lda	#BANK_{1}
    291  0000 ????				      sta	SET_BANK
    292  0000 ????				      jsr	{1}
    293  0000 ????				      ENDM		; {routine}
    294  0000 ????
    295  0000 ????						;---------------------------------------------------------------------------------------------------
    296  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00ef ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawDelay  ds	1
     12 U0083		       00	   lastSquare ds	1
     13 U0084		       00	   drawCount  ds	1
     14 U0085		       00	   fromX12    ds	1
     15 U0086		       00	   toX12      ds	1
     16 U0087		       00	   highlight_row ds	1
     17 U0088		       00	   highlight_col ds	1
     18 U0089		       00	   mdelay     ds	1
     19 U008a		       00	   ccur       ds	1
     20 U008b		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     21 U008c		       00	   aiPhase    ds	1	; human/computer state machine
     22 U008d		       00	   aiFlashDelay ds	1
     23 U008e		       00	   aiFromSquare ds	1
     24 U008f		       00	   aiToSquare ds	1
     25 U0090		       00	   aiFromSquareX12 ds	1
     26 U0091		       00	   aiToSquareX12 ds	1
     27 U0092		       00	   aiMoveIndex ds	1
     28 U0093
     29 U0093		       00	   aiFlashPhase ds	1
     30 U0094
     31 U0094		       00	   currentPiece ds	1
     32 U0095		       00	   currentSquare ds	1
     33 U0096		       00	   returnBank ds	1
     34 U0097		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     35 U0098		       00	   followPiece ds	1
     36 U0099		       00	   currentPly ds	1
     37 U009a		       00	   piecelistIndex ds	1
     38 U009b		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     39 U009c		       00	   fromSquare ds	1
     40 U009d		       00	   fromPiece  ds	1
     41 U009e		       00	   toSquare   ds	1
     42 U009f							;toPiece			  ds 1
     43 U009f		       00	   lastPiece  ds	1
     44 U00a0		       00	   previousPiece ds	1
     45 U00a1
     46 U00a1		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     47 U00a2							;BufferedJoystick		  ds 1	      ; player joystick input
     48 U00a2							;PreviousJoystick		  ds 1
     49 U00a2							;BGColour			  ds 1
     50 U00a2		       00	   aiPiece    ds	1
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a3					      include	"overlays.asm"
      1 U00a3							; Chess
      2 U00a3							; Atari 2600 Chess display system
      3 U00a3							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a3							; andrew@taswegian.com
      5 U00a3
      6 U00a3							;---------------------------------------------------------------------------------------------------
      7 U00a3							; OVERLAYS!
      8 U00a3							; These variables are overlays, and should be managed with care
      9 U00a3							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a3							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a3							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a3							; overlay #2
     13 U00a3
     14 U00a3							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a3
     16 U00a3							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a3							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a3							;---------------------------------------------------------------------------------------------------
     19 U00a3
     20 U00a3					      MAC	overlay
     21 U00a3				   OVERLAY_NAME SET	{1}
     22 U00a3					      SEG.U	OVERLAY_{1}
     23 U00a3					      org	Overlay
     24 U00a3					      ENDM		; {name}
     25 U00a3
     26 U00a3							;---------------------------------------------------------------------------------------------------
     27 U00a3
     28 U00a3					      MAC	validate_overlay
     29 U00a3					      LIST	OFF
     30 U00a3				   OVERLAY_DELTA SET	* - Overlay
     31 U00a3					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a3				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a3					      ENDIF
     34 U00a3					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a3					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a3					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a3					      ERR
     38 U00a3					      ENDIF
     39 U00a3					      LIST	ON
     40 U00a3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a3					      ENDM
     42 U00a3
     43 U00a3							;---------------------------------------------------------------------------------------------------
     44 U00a3
     45 U00a3				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a3				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a3
     48 U00a3
     49 U00a3							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a3							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a3							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a3							; (especially the latter ones) are only used in rare occasions.
     53 U00a3
     54 U00a3							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a3							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a3
     57 U00a3		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00ef				   END_OF_OVERLAY
     59 U00ef
     60 U00ef							;---------------------------------------------------------------------------------------------------
     61 U00ef							; And now... the overlays....
     62 U00ef
 ---- OVERLAYS ( $4c bytes ) ----
     63 U00ef					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     64 U00ef
     65 U00ef							;---------------------------------------------------------------------------------------------------
     66 U00ef
      0 U00ef					      OVERLAY	"PieceBufferOverlay"
      1 U00ef				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00ef ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a3					      org	Overlay
     68 U00a3							; used in CopyPieceFromRAMBufferToScreen
     69 U00a3							; used in CopyPieceToRAMBuffer
     70 U00a3							; used in ClearChessBitmap
     71 U00a3							; used in CopyPieceToRowBitmap
     72 U00a3		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     73 U00eb		       00 00	   __ptr      ds	2	; pointer to data
     74 U00ed		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00ef					      VALIDATE_OVERLAY
     11 U00ef					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00ef					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     76 U00ef
     77 U00ef							;---------------------------------------------------------------------------------------------------
     78 U00ef
      0 U00ef					      OVERLAY	"CopyROMShadowToRAM"
      1 U00ef				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U00a6 ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a3					      org	Overlay
     80 U00a3		       00	   __CopyCount ds	1
     81 U00a4		       00	   __ROM_SourceBank ds	1
     82 U00a5		       00	   __index    ds	1
      0 U00a6					      VALIDATE_OVERLAY
     11 U00a6					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00a6					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     84 U00a6
     85 U00a6							;---------------------------------------------------------------------------------------------------
     86 U00a6
      0 U00a6					      OVERLAY	"DrawTheChessScreen"
      1 U00a6				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U00a4 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a3					      org	Overlay
     88 U00a3		       00	   __rows     ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     90 U00a4
     91 U00a4							;---------------------------------------------------------------------------------------------------
     92 U00a4
      0 U00a4					      OVERLAY	"SetupShadowRAM"
      1 U00a4				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U00a5 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a3					      org	Overlay
     94 U00a3		       00	   __destinationBank ds	1
     95 U00a4		       00	   __sourceBank ds	1
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     97 U00a5
     98 U00a5							;---------------------------------------------------------------------------------------------------
      0 U00a5					      OVERLAY	"DrawPiece"
      1 U00a5				   OVERLAY_NAME SET	"DrawPiece"
      2 U00a5 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a3					      org	Overlay
    100 U00a3		       00	   __pieceColour ds	1
    101 U00a4		       00	   __boardc   ds	1
    102 U00a5
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 DrawPiece - $4a bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    104 U00a5
    105 U00a5
    106 U00a5							;---------------------------------------------------------------------------------------------------
      0 U00a5					      OVERLAY	"InitPly"
      1 U00a5				   OVERLAY_NAME SET	"InitPly"
      2 U00a4 ????				      SEG.U	OVERLAY_"InitPly"
      3 U00a3					      org	Overlay
    108 U00a3		       00	   __plyBank  ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 InitPly - $4b bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    110 U00a4
    111 U00a4							;---------------------------------------------------------------------------------------------------
      0 U00a4					      OVERLAY	"RandomPiece"
      1 U00a4				   OVERLAY_NAME SET	"RandomPiece"
      2 U00a4 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a3					      org	Overlay
    113 U00a3		       00	   __tempx    ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    115 U00a4
      0 U00a4					      OVERLAY	"Overlay000"
      1 U00a4				   OVERLAY_NAME SET	"Overlay000"
      2 U00a4 ????				      SEG.U	OVERLAY_"Overlay000"
      3 U00a3					      org	Overlay
    117 U00a3		       00	   __fromRow  ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 Overlay000 - $4b bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    119 U00a4							;---------------------------------------------------------------------------------------------------
      0 U00a4					      OVERLAY	"Overlay001"
      1 U00a4				   OVERLAY_NAME SET	"Overlay001"
      2 U00a5 ????				      SEG.U	OVERLAY_"Overlay001"
      3 U00a3					      org	Overlay
    121 U00a3		       00	   __from     ds	1
    122 U00a4		       00	   __to       ds	1
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 Overlay001 - $4a bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    124 U00a5							;---------------------------------------------------------------------------------------------------
    125 U00a5
      0 U00a5					      OVERLAY	"Handlers"
      1 U00a5				   OVERLAY_NAME SET	"Handlers"
      2 U00a6 ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a3					      org	Overlay
    127 U00a3		       00	   __piece    ds	1
    128 U00a4		       00 00	   __vector   ds	2
      0 U00a6					      VALIDATE_OVERLAY
     11 U00a6					      LIST	ON
 Handlers - $49 bytes available
     12 U00a6					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    130 U00a6
    131 U00a6							;---------------------------------------------------------------------------------------------------
      0 U00a6					      OVERLAY	"Movers"
      1 U00a6				   OVERLAY_NAME SET	"Movers"
      2 U00a6 ????				      SEG.U	OVERLAY_"Movers"
      3 U00a3					      org	Overlay
    133 U00a3		       00	   __fromCol  ds	1
    134 U00a4		       00	   __toCol    ds	1
    135 U00a5		       00	   __temp     ds	1
    136 U00a6
      0 U00a6					      VALIDATE_OVERLAY
     11 U00a6					      LIST	ON
 Movers - $49 bytes available
     12 U00a6					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    138 U00a6
    139 U00a6							;---------------------------------------------------------------------------------------------------
      0 U00a6					      OVERLAY	"checkPieces"
      1 U00a6				   OVERLAY_NAME SET	"checkPieces"
      2 U00a5 ????				      SEG.U	OVERLAY_"checkPieces"
      3 U00a3					      org	Overlay
    141 U00a3		       00	   __x	      ds	1
    142 U00a4		       00	   __bank     ds	1
    143 U00a5
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 checkPieces - $4a bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    145 U00a5
    146 U00a5							;---------------------------------------------------------------------------------------------------
      0 U00a5					      OVERLAY	"aiSelectStartSquare"
      1 U00a5				   OVERLAY_NAME SET	"aiSelectStartSquare"
      2 U00a4 ????				      SEG.U	OVERLAY_"aiSelectStartSquare"
      3 U00a3					      org	Overlay
    148 U00a3		       00	   __cursorColour ds	1
      0 U00a4					      VALIDATE_OVERLAY
     11 U00a4					      LIST	ON
 aiSelectStartSquare - $4b bytes available
     12 U00a4					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    150 U00a4
    151 U00a4							;---------------------------------------------------------------------------------------------------
      0 U00a4					      OVERLAY	"TitleScreen"
      1 U00a4				   OVERLAY_NAME SET	"TitleScreen"
      2 U00a5 ????				      SEG.U	OVERLAY_"TitleScreen"
      3 U00a3					      org	Overlay
    153 U00a3		       00 00	   __colour_table ds	2
      0 U00a5					      VALIDATE_OVERLAY
     11 U00a5					      LIST	ON
 TitleScreen - $4a bytes available
     12 U00a5					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    155 U00a5							;---------------------------------------------------------------------------------------------------
    156 U00a5
      0 U00a5					      OVERLAY	"SAFE_showMoveOptions"
      1 U00a5				   OVERLAY_NAME SET	"SAFE_showMoveOptions"
      2 U00fb ????				      SEG.U	OVERLAY_"SAFE_showMoveOptions"
      3 U00a3					      org	Overlay
    158 U00a3		       00 00	   __moveDotColour ds	2
    159 U00a5		       00	   __movePiece ds	1
      0 U00a6					      VALIDATE_OVERLAY
     11 U00a6					      LIST	ON
 SAFE_showMoveOptions - $49 bytes available
     12 U00a6					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    161 U00a6							;---------------------------------------------------------------------------------------------------
    162 U00a6
    163 U00ef					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
    164 U00ef					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    165 U00ef					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    166 U00ef
    167 U00ef							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00ef					      include	"stack.asm"
      1 U00ef							; Chess
      2 U00ef							; Atari 2600 Chess display system
      3 U00ef							; Copyright (c) 2019-2020 Andrew Davie
      4 U00ef							; andrew@taswegian.com
      5 U00ef
      6 U00ef
      7 U00ef		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00ef
      9 U00ef		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00fb
     11 U00fb							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00fb							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00fb							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    300 U00fb
 FREE BYTES IN ZERO PAGE =  $4
    301 U00fb					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    302 U00fb				  -	      IF	* > $FF
    303 U00fb				  -	      ERR	"Zero Page overflow!"
    304 U00fb					      ENDIF
    305 U00fb
    306 U00fb							;------------------------------------------------------------------------------
    307 U00fb							;##############################################################################
    308 U00fb							;------------------------------------------------------------------------------
    309 U00fb
    310 U00fb							; NOW THE VERY INTERESTING '3E' RAM BANKS
    311 U00fb							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    312 U00fb							; IN A 2K MEMORY SPACE
    313 U00fb
      0 U00fb					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00fb
      2 U00fb
      3 U00fb
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    315 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    315 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    315 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    315 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    315 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    315 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    315 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    318 U1c00					      REPEND
    319 U1c00
    320 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    321 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    322 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    323 U1c00
    324 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    325 U1c00							; is that we can use that code to switch between banks, and the system will happily
    326 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    327 U1c00
    328 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    329 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    330 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    331 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    332 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    333 U1c00
    334 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    335 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    336 U1c00
    337 U1c00							;------------------------------------------------------------------------------
    338 U1c00
    339 U1c00
    340 U1c00							;---------------------------------------------------------------------------------------------------
    341 U1c00
    342 U1c00
    343 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    344 U1c00
    345 U1c00					      MAC	next_random
    346 U1c00					      lda	rnd
    347 U1c00					      lsr
    348 U1c00					      bcc	.skipEOR
    349 U1c00					      eor	#RND_EOR_VAL
    350 U1c00				   .skipEOR   sta	rnd
    351 U1c00					      ENDM
    352 U1c00
    353 U1c00							;--------------------------------------------------------------------------------
    354 U1c00
    355 U1c00					      MAC	phase
    356 U1c00					      lda	#{1}
    357 U1c00					      sta	aiPhase
    358 U1c00					      ENDM		;#
    359 U1c00
    360 U1c00							;--------------------------------------------------------------------------------
    361 U1c00
    362 U1c00							;ORIGIN      SET 0
    363 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00							; = 76 for single square (empty/take)
     12 U1c00
     13 U1c00					      ldx	currentSquare	; 3
     14 U1c00					      bne	.project	; 3   unconditional
     15 U1c00
     16 U1c00				   .empty     jsr	AddMove	; 57
     17 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     18 U1c00					      bmi	.invalid	; 2/3 off board!
     19 U1c00					      lda	Board,y	; 4   piece @ destination
     20 U1c00					      beq	.empty	; 2/3
     21 U1c00					      eor	currentPiece	; 3
     22 U1c00					      bpl	.invalid	; 2/3 same colour
     23 U1c00					      jsr	AddMove	; 57  and exit
     24 U1c00
     25 U1c00				   .invalid
     26 U1c00					      ENDM
     27 U1c00
     28 U1c00							;---------------------------------------------------------------------------------------------------
     29 U1c00
     30 U1c00					      MAC	move_to
     31 U1c00					      SUBROUTINE
     32 U1c00					      ldy	ValidSquare+{1},x
     33 U1c00					      bmi	.invalid	; off board!
     34 U1c00					      lda	Board,y	; piece @ destination
     35 U1c00					      beq	.squareEmpty
     36 U1c00					      eor	currentPiece
     37 U1c00					      bpl	.invalid	; same colour
     38 U1c00				   .squareEmpty jsr	AddMove
     39 U1c00				   .invalid
     40 U1c00					      ENDM
     41 U1c00
     42 U1c00
     43 U1c00					      MAC	move_to_x
     44 U1c00					      ldx	currentSquare
     45 U1c00					      MOVE_TO	{1}
     46 U1c00					      ENDM
     47 U1c00
     48 U1c00
     49 U1c00							;---------------------------------------------------------------------------------------------------
     50 U1c00							; EOF
------- FILE ./chess.asm
    365 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  0140 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;---------------------------------------------------------------------------------------------------
     18  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;---------------------------------------------------------------------------------------------------
     22  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004
      3  0004				   Cart_Init
     24  0004					      SUBROUTINE
     25  0004
     26  0004		       a9 00		      lda	#0
     27  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     28  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     29  000c		       85 6b		      sta	HMCLR
     30  000e
     31  000e							; cleanup remains of title screen
     32  000e		       85 5b		      sta	GRP0
     33  0010		       85 5c		      sta	GRP1
     34  0012
     35  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     36  0014		       85 44		      sta	NUSIZ0
     37  0016		       85 45		      sta	NUSIZ1
     38  0018
     39  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     40  001a		       85 4a		      sta	CTRLPF
     41  001c
     42  001c		       60		      rts
     43  001d
     44  001d
     45  001d							;---------------------------------------------------------------------------------------------------
     46  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d
      3  001d				   Resync
     48  001d					      SUBROUTINE
     49  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 a1		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     51  0040		       60		      rts
     52  0041
     53  0041
     54  0041							;---------------------------------------------------------------------------------------------------
     55  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041
      3  0041				   aiStartClearBoard
     57  0041					      SUBROUTINE
     58  0041
     59  0041		       a2 08		      ldx	#8
     60  0043		       86 84		      stx	drawCount	; = bank
     61  0045
     62  0045		       a9 ff		      lda	#-1
     63  0047		       85 87		      sta	highlight_row
     64  0049
      0  0049					      PHASE	AI_ClearEachRow
      1  0049		       a9 0f		      lda	#AI_ClearEachRow
      2  004b		       85 8c		      sta	aiPhase
     66  004d		       60		      rts
     67  004e
     68  004e							;---------------------------------------------------------------------------------------------------
     69  004e
      0  004e					      DEF	aiClearEachRow
      1  004e				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  004e
      3  004e				   aiClearEachRow
     71  004e					      SUBROUTINE
     72  004e
     73  004e		       c6 84		      dec	drawCount
     74  0050		       30 05		      bmi	.bitmapCleared
     75  0052		       a4 84		      ldy	drawCount
     76  0054		       4c ad f8 	      jmp	CallClear
     77  0057
     78  0057				   .bitmapCleared
     79  0057
     80  0057		       a9 3f		      lda	#63
     81  0059		       85 80		      sta	drawPieceNumber
     82  005b
      0  005b					      PHASE	AI_DrawEntireBoard
      1  005b		       a9 10		      lda	#AI_DrawEntireBoard
      2  005d		       85 8c		      sta	aiPhase
     84  005f		       60		      rts
     85  0060
     86  0060
     87  0060							;---------------------------------------------------------------------------------------------------
     88  0060
      0  0060					      DEF	aiFB3
      1  0060				   BANK_aiFB3 SET	_CURRENT_BANK
      2  0060
      3  0060				   aiFB3
     90  0060					      SUBROUTINE
     91  0060
     92  0060		       a9 00		      lda	#BLANK
     93  0062		       85 a0		      sta	previousPiece
     94  0064
     95  0064							;lda toSquare
     96  0064							;cmp fromSquare
     97  0064							;beq .idleErase
     98  0064
     99  0064		       a9 06		      lda	#6	; on/off count
    100  0066		       85 84		      sta	drawCount	; flashing for piece about to move
    101  0068		       a9 00		      lda	#0
    102  006a		       85 82		      sta	drawDelay
    103  006c
      0  006c					      PHASE	AI_WriteStartPieceBlank
      1  006c		       a9 16		      lda	#AI_WriteStartPieceBlank
      2  006e		       85 8c		      sta	aiPhase
    105  0070		       60	   .idleErase rts
    106  0071
    107  0071
    108  0071							;---------------------------------------------------------------------------------------------------
    109  0071
      0  0071					      DEF	aiWriteStartPieceBlank
      1  0071				   BANK_aiWriteStartPieceBlank SET	_CURRENT_BANK
      2  0071
      3  0071				   aiWriteStartPieceBlank
    111  0071					      SUBROUTINE
    112  0071
    113  0071							; Flash the piece in-place preparatory to moving it.
    114  0071							; drawDelay = flash speed
    115  0071							; drawCount = # of flashes
    116  0071
    117  0071		       a5 82		      lda	drawDelay
    118  0073		       f0 03		      beq	deCount
    119  0075		       c6 82		      dec	drawDelay
    120  0077		       60		      rts
    121  0078
    122  0078				   deCount
    123  0078
    124  0078		       a5 84		      lda	drawCount
    125  007a		       f0 0e		      beq	flashDone
    126  007c		       c6 84		      dec	drawCount
    127  007e
    128  007e		       a9 04		      lda	#4
    129  0080		       85 82		      sta	drawDelay	; "getting ready to move" flash
    130  0082
    131  0082		       a5 9c		      lda	fromSquare
    132  0084		       85 80		      sta	drawPieceNumber
    133  0086		       20 e5 fd 	      jsr	SAFE_CopySinglePiece	; EOR-draw = flash
    134  0089		       60		      rts
    135  008a
      0  008a				   flashDone  PHASE	AI_MarchToTargetA
      1  008a		       a9 17		      lda	#AI_MarchToTargetA
      2  008c		       85 8c		      sta	aiPhase
    137  008e		       60		      rts
    138  008f
    139  008f
    140  008f							;---------------------------------------------------------------------------------------------------
    141  008f
      0  008f					      DEF	aiDEB2
      1  008f				   BANK_aiDEB2 SET	_CURRENT_BANK
      2  008f
      3  008f				   aiDEB2
    143  008f					      SUBROUTINE
    144  008f
    145  008f		       20 e5 fd 	      jsr	SAFE_CopySinglePiece
    146  0092		       c6 80		      dec	drawPieceNumber
    147  0094		       30 05		      bmi	.comp
    148  0096
      0  0096					      PHASE	AI_DrawEntireBoard
      1  0096		       a9 10		      lda	#AI_DrawEntireBoard
      2  0098		       85 8c		      sta	aiPhase
    150  009a		       60		      rts
    151  009b
      0  009b				   .comp      PHASE	AI_FlipBuffers
      1  009b		       a9 12		      lda	#AI_FlipBuffers
      2  009d		       85 8c		      sta	aiPhase
    153  009f		       60		      rts
    154  00a0
    155  00a0
    156  00a0							;---------------------------------------------------------------------------------------------------
    157  00a0
      0  00a0					      DEF	aiMarchB
      1  00a0				   BANK_aiMarchB SET	_CURRENT_BANK
      2  00a0
      3  00a0				   aiMarchB
    159  00a0					      SUBROUTINE
    160  00a0
    161  00a0							; Draw the piece in the new square
    162  00a0
    163  00a0		       a5 9c		      lda	fromSquare
    164  00a2		       85 80		      sta	drawPieceNumber
    165  00a4		       20 e5 fd 	      jsr	SAFE_CopySinglePiece	; draw the moving piece into the new square
    166  00a7
    167  00a7		       a9 06		      lda	#6	; snail trail delay
    168  00a9		       85 82		      sta	drawDelay
    169  00ab
      0  00ab					      PHASE	AI_MarchToTargetB
      1  00ab		       a9 19		      lda	#AI_MarchToTargetB
      2  00ad		       85 8c		      sta	aiPhase
    171  00af		       60		      rts
    172  00b0
    173  00b0
    174  00b0							;---------------------------------------------------------------------------------------------------
    175  00b0
      0  00b0					      DEF	aiFinalFlash
      1  00b0				   BANK_aiFinalFlash SET	_CURRENT_BANK
      2  00b0
      3  00b0				   aiFinalFlash
    177  00b0					      SUBROUTINE
    178  00b0
    179  00b0		       a5 82		      lda	drawDelay
    180  00b2		       f0 03		      beq	.deCount
    181  00b4		       c6 82		      dec	drawDelay
    182  00b6		       60		      rts
    183  00b7
    184  00b7		       a5 84	   .deCount   lda	drawCount
    185  00b9		       f0 0e		      beq	flashDone2
    186  00bb		       c6 84		      dec	drawCount
    187  00bd
    188  00bd		       a9 0a		      lda	#10
    189  00bf		       85 82		      sta	drawDelay	; "getting ready to move" flash
    190  00c1
    191  00c1		       a5 9c		      lda	fromSquare
    192  00c3		       85 80		      sta	drawPieceNumber
    193  00c5		       20 e5 fd 	      jsr	SAFE_CopySinglePiece
    194  00c8		       60		      rts
    195  00c9
      0  00c9				   flashDone2 PHASE	AI_SpecialMoveFixup
      1  00c9		       a9 1c		      lda	#AI_SpecialMoveFixup
      2  00cb		       85 8c		      sta	aiPhase
    197  00cd		       60		      rts
    198  00ce
    199  00ce
    200  00ce							;---------------------------------------------------------------------------------------------------
    201  00ce
      0  00ce					      DEF	CastleFixup
      1  00ce				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00ce
      3  00ce				   CastleFixup
    203  00ce					      SUBROUTINE
    204  00ce
    205  00ce							; fixup any castling issues
    206  00ce							; at this point the king has finished his two-square march
    207  00ce							; based on the finish square, we determine which rook we're interacting with
    208  00ce							; and generate a 'move' for the rook to position on the other side of the king
    209  00ce
    210  00ce
    211  00ce		       a5 9d		      lda	fromPiece
    212  00d0		       29 10		      and	#FLAG_CASTLE
    213  00d2		       f0 2d		      beq	.noCast	; NOT involved in castle!
    214  00d4
    215  00d4		       a2 04		      ldx	#4
    216  00d6		       a5 9e		      lda	toSquare
    217  00d8		       ca	   .findCast  dex
    218  00d9		       30 26		      bmi	.noCast
    219  00db		       dd 08 f1 	      cmp	KSquare,x
    220  00de		       d0 f8		      bne	.findCast
    221  00e0
    222  00e0
    223  00e0		       bd 10 f1 	      lda	RSquareEnd,x
    224  00e3		       85 86		      sta	toX12
    225  00e5		       bd 14 f1 	      lda	RSquareStart64,x
    226  00e8		       85 9c		      sta	fromSquare
    227  00ea		       bd 18 f1 	      lda	RSquareEnd64,x
    228  00ed		       85 9e		      sta	toSquare
    229  00ef
    230  00ef		       bc 0c f1 	      ldy	RSquareStart,x
    231  00f2		       84 85		      sty	fromX12
    232  00f4
    233  00f4		       a5 9d		      lda	fromPiece
    234  00f6		       29 80		      and	#128	; colour bit
    235  00f8		       09 05		      ora	#ROOK	; preserve colour
    236  00fa		       85 9d		      sta	fromPiece
    237  00fc
      0  00fc					      PHASE	AI_FB3
      1  00fc		       a9 15		      lda	#AI_FB3
      2  00fe		       85 8c		      sta	aiPhase
    239  0100		       60		      rts
    240  0101
    241  0101				   .noCast
    242  0101		       a5 9b		      lda	sideToMove
    243  0103		       49 80		      eor	#128
    244  0105		       85 9b		      sta	sideToMove	; swap
    245  0107
    246  0107		       60		      rts
    247  0108
    248  0108
    249  0108		       02 06 3a 3e KSquare    .byte.b	2,6,58,62
    250  010c		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    251  0110		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    252  0114		       00 07 38 3f RSquareStart64 .byte.b	0,7,56,63
    253  0118		       03 05 3b 3d RSquareEnd64 .byte.b	3,5,59,61
    254  011c
    255  011c
    256  011c							;---------------------------------------------------------------------------------------------------
    257  011c
      0  011c					      DEF	SetupBanks
      1  011c				   BANK_SetupBanks SET	_CURRENT_BANK
      2  011c
      3  011c				   SetupBanks
    259  011c					      SUBROUTINE
    260  011c
    261  011c							; SAFE
    262  011c
    263  011c		       a0 07		      ldy	#7
    264  011e		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    265  0120		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM
    266  0123		       88		      dey
    267  0124		       10 f8		      bpl	.copyRowBanks
    268  0126
    269  0126							; copy the BOARD/MOVES bank
    270  0126
    271  0126		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    272  0128		       a2 0c		      ldx	#MOVES
    273  012a		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM	; this auto-initialises Board too
    274  012d
    275  012d							; copy the PLY banks
    276  012d
    277  012d		       a9 06		      lda	#MAX_PLY
    278  012f		       85 a3		      sta	__plyBank
    279  0131		       a0 09		      ldy	#RAMBANK_PLY
    280  0133		       84 99		      sty	currentPly
    281  0135		       a2 0d	   .copyPlyBanks ldx	#BANK_PLY
    282  0137		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM
    283  013a		       c8		      iny
    284  013b		       c6 a3		      dec	__plyBank
    285  013d		       d0 f6		      bne	.copyPlyBanks
    286  013f
    287  013f		       60		      rts
    288  0140
    289  0140
    290  0140							;---------------------------------------------------------------------------------------------------
    291  0140
      0  0140					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  0140		       01 40	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $140 , FREE= $6c0
      2  0140					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  0140				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  0140				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  0140				  -	      ERR
      6  0140					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  0140					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  0140
      0  0140					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0b2e ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a4	   COLOUR_LINE_1 =	$a4
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4A
     14  0800		       00 2a	   COLOUR_LINE_3 =	$2A
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800							;COLOUR_LINE_1 = $94 ; square col
     18  0800							;COLOUR_LINE_2 = $C6
     19  0800							;COLOUR_LINE_3 = $48
     20  0800							;BACKGCOL	= 0 ;$F0
     21  0800
     22  0800
     23  0800							; good 94/46/28/0
     24  0800							; good 94/44/26/0
     25  0800
     26  0800
     27  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     28  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     30  0800
     31  0800				   ChessBitmap
     32  0800		       00 00 00 00*ChessBitmap0 ds	24
     33  0818		       00 00 00 00*ChessBitmap1 ds	24
     34  0830		       00 00 00 00*ChessBitmap2 ds	24
     35  0848		       00 00 00 00*ChessBitmap3 ds	24
     36  0860		       00 00 00 00*ChessBitmap4 ds	24
     37  0878		       00 00 00 00*ChessBitmap5 ds	24
     38  0890
     39  0890
     40  0890				   BlankSprite
     41  0890		       00 00 00 00*	      ds	8,0
     42  0898
     43  0898				   SpriteBuffer
     44  0898					      REPEAT	24
     45  0898		       f8		      .byte.b	%11111000	;%00011111
     44  0898					      REPEND
     45  0899		       f8		      .byte.b	%11111000	;%00011111
     44  0899					      REPEND
     45  089a		       f8		      .byte.b	%11111000	;%00011111
     44  089a					      REPEND
     45  089b		       f8		      .byte.b	%11111000	;%00011111
     44  089b					      REPEND
     45  089c		       f8		      .byte.b	%11111000	;%00011111
     44  089c					      REPEND
     45  089d		       f8		      .byte.b	%11111000	;%00011111
     44  089d					      REPEND
     45  089e		       f8		      .byte.b	%11111000	;%00011111
     44  089e					      REPEND
     45  089f		       f8		      .byte.b	%11111000	;%00011111
     44  089f					      REPEND
     45  08a0		       f8		      .byte.b	%11111000	;%00011111
     44  08a0					      REPEND
     45  08a1		       f8		      .byte.b	%11111000	;%00011111
     44  08a1					      REPEND
     45  08a2		       f8		      .byte.b	%11111000	;%00011111
     44  08a2					      REPEND
     45  08a3		       f8		      .byte.b	%11111000	;%00011111
     44  08a3					      REPEND
     45  08a4		       f8		      .byte.b	%11111000	;%00011111
     44  08a4					      REPEND
     45  08a5		       f8		      .byte.b	%11111000	;%00011111
     44  08a5					      REPEND
     45  08a6		       f8		      .byte.b	%11111000	;%00011111
     44  08a6					      REPEND
     45  08a7		       f8		      .byte.b	%11111000	;%00011111
     44  08a7					      REPEND
     45  08a8		       f8		      .byte.b	%11111000	;%00011111
     44  08a8					      REPEND
     45  08a9		       f8		      .byte.b	%11111000	;%00011111
     44  08a9					      REPEND
     45  08aa		       f8		      .byte.b	%11111000	;%00011111
     44  08aa					      REPEND
     45  08ab		       f8		      .byte.b	%11111000	;%00011111
     44  08ab					      REPEND
     45  08ac		       f8		      .byte.b	%11111000	;%00011111
     44  08ac					      REPEND
     45  08ad		       f8		      .byte.b	%11111000	;%00011111
     44  08ad					      REPEND
     45  08ae		       f8		      .byte.b	%11111000	;%00011111
     44  08ae					      REPEND
     45  08af		       f8		      .byte.b	%11111000	;%00011111
     46  08b0					      REPEND
     47  08b0
     48  08b0				   SpriteBuffer2
     49  08b0					      REPEAT	24
     50  08b0		       f8		      .byte.b	%11111000	;%00011111
     49  08b0					      REPEND
     50  08b1		       f8		      .byte.b	%11111000	;%00011111
     49  08b1					      REPEND
     50  08b2		       f8		      .byte.b	%11111000	;%00011111
     49  08b2					      REPEND
     50  08b3		       f8		      .byte.b	%11111000	;%00011111
     49  08b3					      REPEND
     50  08b4		       f8		      .byte.b	%11111000	;%00011111
     49  08b4					      REPEND
     50  08b5		       f8		      .byte.b	%11111000	;%00011111
     49  08b5					      REPEND
     50  08b6		       f8		      .byte.b	%11111000	;%00011111
     49  08b6					      REPEND
     50  08b7		       f8		      .byte.b	%11111000	;%00011111
     49  08b7					      REPEND
     50  08b8		       f8		      .byte.b	%11111000	;%00011111
     49  08b8					      REPEND
     50  08b9		       f8		      .byte.b	%11111000	;%00011111
     49  08b9					      REPEND
     50  08ba		       f8		      .byte.b	%11111000	;%00011111
     49  08ba					      REPEND
     50  08bb		       f8		      .byte.b	%11111000	;%00011111
     49  08bb					      REPEND
     50  08bc		       f8		      .byte.b	%11111000	;%00011111
     49  08bc					      REPEND
     50  08bd		       f8		      .byte.b	%11111000	;%00011111
     49  08bd					      REPEND
     50  08be		       f8		      .byte.b	%11111000	;%00011111
     49  08be					      REPEND
     50  08bf		       f8		      .byte.b	%11111000	;%00011111
     49  08bf					      REPEND
     50  08c0		       f8		      .byte.b	%11111000	;%00011111
     49  08c0					      REPEND
     50  08c1		       f8		      .byte.b	%11111000	;%00011111
     49  08c1					      REPEND
     50  08c2		       f8		      .byte.b	%11111000	;%00011111
     49  08c2					      REPEND
     50  08c3		       f8		      .byte.b	%11111000	;%00011111
     49  08c3					      REPEND
     50  08c4		       f8		      .byte.b	%11111000	;%00011111
     49  08c4					      REPEND
     50  08c5		       f8		      .byte.b	%11111000	;%00011111
     49  08c5					      REPEND
     50  08c6		       f8		      .byte.b	%11111000	;%00011111
     49  08c6					      REPEND
     50  08c7		       f8		      .byte.b	%11111000	;%00011111
     51  08c8					      REPEND
     52  08c8				  -	      if	0
     53  08c8				  -	      .byte	%00011111
     54  08c8				  -	      .byte	%00011111
     55  08c8				  -	      .byte	%00011111
     56  08c8				  -	      .byte	%00011111
     57  08c8				  -	      .byte	%00011111
     58  08c8				  -	      .byte	%00011111
     59  08c8				  -	      .byte	%00011111
     60  08c8				  -	      .byte	%00011111
     61  08c8				  -
     62  08c8				  -	      .byte	%00011111
     63  08c8				  -	      .byte	%00011111
     64  08c8				  -	      .byte	%00011111
     65  08c8				  -	      .byte	%00011111
     66  08c8				  -	      .byte	%00011111
     67  08c8				  -	      .byte	%00011111
     68  08c8				  -	      .byte	%00011111
     69  08c8				  -	      .byte	%00011111
     70  08c8				  -
     71  08c8				  -	      .byte	%00011111
     72  08c8				  -	      .byte	%00011111
     73  08c8				  -	      .byte	%00011111
     74  08c8				  -	      .byte	%00011111
     75  08c8				  -	      .byte	%00011111
     76  08c8				  -	      .byte	%00011111
     77  08c8				  -	      .byte	%00011111
     78  08c8				  -	      .byte	%00011111
     79  08c8					      endif
     80  08c8
     81  08c8		       05 05 05 05*testxxx    ds	32,5
     82  08e8
      0  08e8					      OPTIONAL_PAGEBREAK	BackupBitmap, ROW_BITMAP_SIZE
 PAGE BREAK INSERTED FOR  $f100
 REQUESTED SIZE =  $90
 WASTED SPACE =  $18
 PAGEBREAK LOCATION =  $f100
     10  0900					      LIST	ON
     84  0900
     85  0900		       00 00 00 00*BackupBitmap ds	ROW_BITMAP_SIZE
     86  0990
     87  0990							;---------------------------------------------------------------------------------------------------
     88  0990
      0  0990					      DEF	ClearRowBitmap
      1  0990				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  0990
      3  0990				   ClearRowBitmap
     90  0990					      SUBROUTINE
     91  0990
     92  0990		       a9 00		      lda	#0
     93  0992		       a0 90		      ldy	#ROW_BITMAP_SIZE
     94  0994		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     95  0997		       88		      dey
     96  0998		       d0 fa		      bne	.clearRow
     97  099a		       60		      rts
     98  099b
     99  099b
    100  099b							;---------------------------------------------------------------------------------------------------
    101  099b
      0  099b					      DEF	CopyPieceToRowBitmap
      1  099b				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  099b
      3  099b				   CopyPieceToRowBitmap
    103  099b					      SUBROUTINE
    104  099b
    105  099b		       a0 11		      ldy	#17
    106  099d		       b0 30		      bcs	.rightSide
    107  099f
    108  099f		       b9 a3 00    .copyPiece lda	__pieceShapeBuffer,y
    109  09a2		       f0 06		      beq	.blank1
    110  09a4		       59 00 f0 	      eor	ChessBitmap,y
    111  09a7		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    112  09aa
    113  09aa		       b9 b5 00    .blank1    lda	__pieceShapeBuffer+18,y
    114  09ad		       f0 06		      beq	.blank2
    115  09af		       59 12 f0 	      eor	ChessBitmap+18,y
    116  09b2		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
    117  09b5
    118  09b5		       b9 c7 00    .blank2    lda	__pieceShapeBuffer+36,y
    119  09b8		       f0 06		      beq	.blank3
    120  09ba		       59 24 f0 	      eor	ChessBitmap+36,y
    121  09bd		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
    122  09c0
    123  09c0		       b9 d9 00    .blank3    lda	__pieceShapeBuffer+54,y
    124  09c3		       f0 06		      beq	.blank4
    125  09c5		       59 36 f0 	      eor	ChessBitmap+54,y
    126  09c8		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
    127  09cb
    128  09cb		       88	   .blank4    dey
    129  09cc		       10 d1		      bpl	.copyPiece
    130  09ce		       60		      rts
    131  09cf
    132  09cf				   .rightSide
    133  09cf
    134  09cf					      SUBROUTINE
    135  09cf
    136  09cf		       b9 a3 00    .copyPieceR lda	__pieceShapeBuffer,y
    137  09d2		       f0 06		      beq	.blank1
    138  09d4		       59 48 f0 	      eor	ChessBitmap+72,y
    139  09d7		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    140  09da
    141  09da		       b9 b5 00    .blank1    lda	__pieceShapeBuffer+18,y
    142  09dd		       f0 06		      beq	.blank2
    143  09df		       59 5a f0 	      eor	ChessBitmap+72+18,y
    144  09e2		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    145  09e5
    146  09e5		       b9 c7 00    .blank2    lda	__pieceShapeBuffer+36,y
    147  09e8		       f0 06		      beq	.blank3
    148  09ea		       59 6c f0 	      eor	ChessBitmap+72+36,y
    149  09ed		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    150  09f0
    151  09f0		       b9 d9 00    .blank3    lda	__pieceShapeBuffer+54,y
    152  09f3		       f0 06		      beq	.blank4
    153  09f5		       59 7e f0 	      eor	ChessBitmap+72+54,y
    154  09f8		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    155  09fb
    156  09fb		       88	   .blank4    dey
    157  09fc		       10 d1		      bpl	.copyPieceR
    158  09fe		       60		      rts
    159  09ff
    160  09ff
    161  09ff							;---------------------------------------------------------------------------------------------------
    162  09ff
    163  0a00		       00		      ALIGN	256
    164  0a00
    165  0a00							; x = row # (and bank#)
    166  0a00
    167  0a00				   .endline
    168  0a00
    169  0a00							;@59
    170  0a00
    171  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    172  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    173  0a00				   SELFMOD_RTS_ON_LAST_ROW
    174  0a00
    175  0a00		       e8		      inx		; 2
    176  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    177  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03
      3  0a03				   DrawRow
    179  0a03
    180  0a03							;@64
    181  0a03		       a0 07		      ldy	#7	; 2
    182  0a05		       10 3b		      bpl	.dl2	; 3   (must be 69 here)
    183  0a07
    184  0a07							;@58...
    185  0a07
    186  0a07				   .l3
    187  0a07
    188  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    189  0a0a		       85 5b		      sta	GRP0	; 3
    190  0a0c		       b9 c0 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    191  0a0f		       85 5c		      sta	GRP1	; 3
    192  0a11
    193  0a11							;@-4
    194  0a11
    195  0a11		       a9 a4		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    196  0a13		       85 48		      sta	COLUPF	; 3 @1
    197  0a15
    198  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    199  0a18		       85 4d		      sta	PF0	; 3
    200  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    201  0a1d		       85 4e		      sta	PF1	; 3
    202  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    203  0a22		       85 4f		      sta	PF2	; 3 @22
    204  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    206  0a27
    207  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    208  0a2a		       85 4d		      sta	PF0	; 3
    209  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    210  0a2f		       85 4e		      sta	PF1	; 3
    211  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    212  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    213  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    215  0a39
    216  0a39		       88		      dey		; 2
    217  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    218  0a3c
    219  0a3c							;@57
    220  0a3c				   .drawLine
    221  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    223  0a42
    224  0a42				   .dl2
    225  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    226  0a45		       85 5b		      sta	GRP0	; 3
    227  0a47		       b9 b0 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    228  0a4a		       85 5c		      sta	GRP1	; 3
    229  0a4c
    230  0a4c							;@7
    231  0a4c
    232  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    233  0a4e		       85 48		      sta	COLUPF	; 3 @12
    234  0a50
    235  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    236  0a53		       85 4d		      sta	PF0	; 3
    237  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    238  0a58		       85 4e		      sta	PF1	; 3
    239  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    240  0a5d		       85 4f		      sta	PF2	; 3 @33
    241  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    243  0a61
    244  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    245  0a64		       85 4d		      sta	PF0	; 3
    246  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    247  0a69		       85 4e		      sta	PF1	; 3
    248  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    249  0a6e		       85 4f		      sta	PF2	; 3 @57
    250  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    252  0a73
    253  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    254  0a76		       85 5b		      sta	GRP0	; 3
    255  0a78		       b9 b8 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    256  0a7b		       85 5c		      sta	GRP1	; 3
    257  0a7d
    258  0a7d							;@0
    259  0a7d		       a9 2a		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    260  0a7f		       85 48		      sta	COLUPF	; 3 @5
    261  0a81
    262  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    263  0a84		       85 4d		      sta	PF0	; 3
    264  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    265  0a89		       85 4e		      sta	PF1	; 3
    266  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    267  0a8e		       85 4f		      sta	PF2	; 3 @26
    268  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    270  0a94
    271  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    272  0a97		       85 4d		      sta	PF0	; 3
    273  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    274  0a9c		       85 4e		      sta	PF1	; 3
    275  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    276  0aa1		       85 4f		      sta	PF2	; 3 @55
    277  0aa3
    278  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    279  0aa6
    280  0aa6
    281  0aa6							;---------------------------------------------------------------------------------------------------
    282  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6
      3  0aa6				   WriteBlank
    284  0aa6					      SUBROUTINE
    285  0aa6
    286  0aa6		       a9 90		      lda	#<BlankSprite
    287  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    288  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    289  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    290  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    291  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    292  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    293  0aba
    294  0aba		       a9 f0		      lda	#>BlankSprite
    295  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    296  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    297  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    298  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    299  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    300  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    301  0ace
    302  0ace		       60		      rts
    303  0acf
    304  0acf
    305  0acf							;---------------------------------------------------------------------------------------------------
    306  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf
      3  0acf				   WriteCursor
    308  0acf					      SUBROUTINE
    309  0acf
    310  0acf		       a6 87		      ldx	highlight_row
    311  0ad1		       30 18		      bmi	.exit
    312  0ad3
    313  0ad3		       86 3e		      stx	SET_BANK_RAM
    314  0ad5		       a9 98		      lda	#<SpriteBuffer
    315  0ad7		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    316  0ada		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    317  0add		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    318  0ae0		       a9 f0		      lda	#>SpriteBuffer
    319  0ae2		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    320  0ae5		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    321  0ae8		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    322  0aeb
    323  0aeb		       60	   .exit      rts
    324  0aec
    325  0aec
    326  0aec							;---------------------------------------------------------------------------------------------------
    327  0aec
      0  0aec					      DEF	SaveBitmap
      1  0aec				   BANK_SaveBitmap SET	_CURRENT_BANK
      2  0aec
      3  0aec				   SaveBitmap
    329  0aec					      SUBROUTINE
    330  0aec
    331  0aec		       a0 47		      ldy	#71
    332  0aee		       b9 00 f0    .fromTo    lda	ChessBitmap,y
    333  0af1		       99 00 f5 	      sta	BackupBitmap+RAM_WRITE,y
    334  0af4		       b9 48 f0 	      lda	ChessBitmap+72,y
    335  0af7		       99 48 f5 	      sta	BackupBitmap+72+RAM_WRITE,y
    336  0afa		       88		      dey
    337  0afb		       10 f1		      bpl	.fromTo
    338  0afd		       60		      rts
    339  0afe
    340  0afe
    341  0afe							;---------------------------------------------------------------------------------------------------
    342  0afe
      0  0afe					      DEF	RestoreBitmap
      1  0afe				   BANK_RestoreBitmap SET	_CURRENT_BANK
      2  0afe
      3  0afe				   RestoreBitmap
    344  0afe					      SUBROUTINE
    345  0afe
    346  0afe		       a0 47		      ldy	#71
    347  0b00		       b9 00 f1    .fromTo    lda	BackupBitmap,y
    348  0b03		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    349  0b06		       b9 48 f1 	      lda	BackupBitmap+72,y
    350  0b09		       99 48 f4 	      sta	ChessBitmap+72+RAM_WRITE,y
    351  0b0c		       88		      dey
    352  0b0d		       10 f1		      bpl	.fromTo
    353  0b0f		       60		      rts
    354  0b10
    355  0b10
    356  0b10							;---------------------------------------------------------------------------------------------------
    357  0b10
      0  0b10					      DEF	CopyTextToRowBitmap
      1  0b10				   BANK_CopyTextToRowBitmap SET	_CURRENT_BANK
      2  0b10
      3  0b10				   CopyTextToRowBitmap
    359  0b10					      SUBROUTINE
    360  0b10
    361  0b10							; An OR-draw, used for placing matricies/text onscreen
    362  0b10							; Similar to the EOR - first copy data into __pieceShapeBuffer, then call this function
    363  0b10							; The draw can be bracketed by "SaveBitmap" and "RestoreBitmap" to leave screen
    364  0b10							; in original state once text disappears
    365  0b10
    366  0b10		       a0 47		      ldy	#71
    367  0b12		       b0 0d		      bcs	.rightSide
    368  0b14
    369  0b14		       b9 a3 00    .copy      lda	__pieceShapeBuffer,y
    370  0b17		       19 00 f0 	      ora	ChessBitmap,y
    371  0b1a		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    372  0b1d		       88		      dey
    373  0b1e		       10 f4		      bpl	.copy
    374  0b20
    375  0b20		       60		      rts
    376  0b21
    377  0b21				   .rightSide
    378  0b21
    379  0b21					      SUBROUTINE
    380  0b21
    381  0b21		       b9 a3 00    .copy      lda	__pieceShapeBuffer,y
    382  0b24		       19 48 f0 	      ora	ChessBitmap+72,y
    383  0b27		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    384  0b2a		       88		      dey
    385  0b2b		       10 f4		      bpl	.copy
    386  0b2d
    387  0b2d		       60		      rts
    388  0b2e
    389  0b2e
    390  0b2e							;---------------------------------------------------------------------------------------------------
    391  0b2e
      0  0b2e					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0b2e
      2  0b2e
      3  0b2e		       03 2e	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $32e , FREE= $d2
      4  0b2e					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0b2e				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0b2e				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0b2e				  -	      ERR
      8  0b2e					      endif
    393  0b2e							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  0b2e					      include	"BANK_CHESS_INCLUDES.asm"
      1  0b2e							; Chess
      2  0b2e							; Atari 2600 Chess display system
      3  0b2e							; Copyright (c) 2019-2020 Andrew Davie
      4  0b2e							; andrew@taswegian.com
      5  0b2e
      6  0b2e
      7  0b2e							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  0b2e							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  0b2e							; a single gif of the format..
     10  0b2e							; a row of white pieces on black squares
     11  0b2e							; a row of white pieces on white squares
     12  0b2e							; a row of black pieces on black squares
     13  0b2e							; a row of black pieces on white squares
     14  0b2e
     15  0b2e							; each row has the pieces ordered thus:
     16  0b2e							; a blank, then pawn, knight, bishop, rook, queen, king
     17  0b2e							; each piece is 5 pixels wide x 8 pixels deep
     18  0b2e							; each pixel is from an 8-colour palette.
     19  0b2e							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  0b2e							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  0b2e							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  0b2e							; bit "b" becomes the second ICC pixel line (2)
     23  0b2e							; bit "c" becomes the third ICC pixel line (3)
     24  0b2e							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  0b2e							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  0b2e							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  0b2e							; These 4 shifted positions are stored consecutively in the shape definition
     28  0b2e
     29  0b2e							; Example...
     30  0b2e							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     31  0b2e							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  0b2e							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  0b2e							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  0b2e
     35  0b2e							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  0b2e							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  0b2e							; actually have any data in PF1 or PF2.
     38  0b2e
     39  0b2e
     40  0b2e
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  0b2e					      include	"piece_graphics.asm"
      1  0b2e							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0b2e					      NEWBANK	PIECES_0
      1  17d8 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000
      3  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048
      3  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090
      3  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100
      3  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148
      3  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190
      3  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200
      3  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248
      3  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290
      3  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300
      3  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348
      3  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390
      3  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400
      3  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448
      3  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490
      3  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500
      3  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548
      3  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590
      3  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600
      3  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648
      3  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690
      3  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700
      3  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748
      3  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790
      3  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  1fd8 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800
      3  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$00,$a0,$a0,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848
      3  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$00,$28,$28,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890
      3  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900
      3  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$00,$50,$50,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948
      3  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990
      3  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00
      3  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48
      3  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90
      3  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00
      3  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48
      3  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90
      3  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00
      3  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48
      3  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90
      3  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00
      3  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48
      3  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90
      3  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00
      3  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48
      3  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90
      3  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00
      3  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48
      3  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90
      3  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  27d8 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000
      3  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048
      3  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090
      3  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100
      3  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148
      3  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$f0,$50,$50,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190
      3  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$7c,$54,$54,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200
      3  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$03,$02,$02,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248
      3  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$f8,$a8,$a8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290
      3  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300
      3  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348
      3  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390
      3  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400
      3  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448
      3  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490
      3  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500
      3  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548
      3  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590
      3  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$70,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600
      3  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$01,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648
      3  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$38,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690
      3  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700
      3  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748
      3  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790
      3  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  2fd8 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800
      3  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848
      3  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890
      3  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900
      3  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948
      3  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990
      3  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00
      3  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48
      3  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90
      3  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00
      3  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48
      3  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90
      3  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00
      3  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48
      3  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90
      3  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00
      3  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48
      3  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$a0,$40,$40,$00,$00,$e0,$40,$40,$e0,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90
      3  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$28,$10,$10,$00,$00,$38,$10,$10,$38,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00
      3  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$02,$01,$01,$00,$00,$03,$01,$01,$03,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48
      3  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$50,$20,$20,$00,$00,$70,$20,$20,$70,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90
      3  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00
      3  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48
      3  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90
      3  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_4
      1  37d8 ????				      SEG	PIECES_4
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_4   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3000				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3000
      3  3000				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3000		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3048				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3048
      3  3048				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3090				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3090
      3  3090				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  30c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3100				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3100
      3  3100				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3148				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3148
      3  3148				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3148		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  3160		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3190				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3190
      3  3190				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3200				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3200
      3  3200				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  3230		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3248				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3248
      3  3248				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3290				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3290
      3  3290				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3290		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  32a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3300				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3300
      3  3300				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3348				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3348
      3  3348				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3378		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3390				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3390
      3  3390				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400
      3  3400				   BLACK_KING_on_BLACK_SQUARE_0
      3  3400		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  3418		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448
      3  3448				   BLACK_KING_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490
      3  3490				   BLACK_KING_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  34c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500
      3  3500				   BLACK_KING_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE piece_graphics.asm
    124  3548
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  3548				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548
      3  3548				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  3590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590
      3  3590				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  3600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600
      3  3600				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  3648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648
      3  3648				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  3690				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3690
      3  3690				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  3690		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  3700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3700
      3  3700				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  3748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3748
      3  3748				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3778		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  3790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3790
      3  3790				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
    134  37d8
      0  37d8					      NEWBANK	PIECES_5
      1  3fd8 ????				      SEG	PIECES_5
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_5   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_5
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800
      3  3800				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3800		       00 10 20 40*	      .byte.b	$00,$10,$20,$40,$40,$80,$00,$00,$00,$10,$20,$40,$40,$80,$00,$00,$00,$10,$20,$40,$40,$80,$00,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848
      3  3848				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 40 20 10*	      .byte.b	$00,$40,$20,$10,$10,$08,$04,$00,$00,$40,$20,$10,$10,$08,$04,$00,$00,$40,$20,$10,$10,$08,$04,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890
      3  3890				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 02 01 00*	      .byte.b	$00,$02,$01,$00,$00,$00,$00,$00,$00,$02,$01,$00,$00,$00,$00,$00,$00,$02,$01,$00,$00,$00,$00,$00	;PF1
      5  38c0		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$02,$04,$00,$00,$00,$00,$01,$01,$02,$04,$00,$00,$00,$00,$01,$01,$02,$04,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900
      3  3900				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 08 10 20*	      .byte.b	$00,$08,$10,$20,$20,$40,$80,$00,$00,$08,$10,$20,$20,$40,$80,$00,$00,$08,$10,$20,$20,$40,$80,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3948				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3948
      3  3948				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3948		       10 20 20 40*	      .byte.b	$10,$20,$20,$40,$40,$80,$80,$00,$10,$20,$20,$40,$40,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3990				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3990
      3  3990				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       40 20 20 10*	      .byte.b	$40,$20,$20,$10,$10,$08,$08,$04,$40,$20,$20,$10,$10,$08,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3a00				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3a00
      3  3a00				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       02 01 01 00*	      .byte.b	$02,$01,$01,$00,$00,$00,$00,$00,$02,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a30		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$02,$02,$04,$00,$00,$00,$01,$01,$02,$02,$04,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3a48				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3a48
      3  3a48				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       08 10 10 20*	      .byte.b	$08,$10,$10,$20,$20,$40,$40,$80,$08,$10,$10,$20,$20,$40,$40,$80,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    144  3a90
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3a90					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  3a90					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_0", 72
     10  3a90					      LIST	ON
      0  3a90					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_0
      1  3a90				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3a90
      3  3a90				   WHITE_PROMOTE_on_BLACK_SQUARE_0
      3  3a90		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40	;PF0
      4  3aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ad8					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  3ad8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PROMOTE_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3b00					      LIST	ON
      0  3b00					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_1
      1  3b00				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3b00
      3  3b00				   WHITE_PROMOTE_on_BLACK_SQUARE_1
      3  3b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b18		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10	;PF1
      5  3b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3b48					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  3b48					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_2", 72
     10  3b48					      LIST	ON
      0  3b48					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_2
      1  3b48				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3b48
      3  3b48				   WHITE_PROMOTE_on_BLACK_SQUARE_2
      3  3b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3b60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00	;PF1
      5  3b78		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3b90					      include	"gfx/WHITE_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  3b90					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_BLACK_SQUARE_3", 72
     10  3b90					      LIST	ON
      0  3b90					      DEF	WHITE_PROMOTE_on_BLACK_SQUARE_3
      1  3b90				   BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3b90
      3  3b90				   WHITE_PROMOTE_on_BLACK_SQUARE_3
      3  3b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3bc0		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3bd8					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  3bd8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_PROMOTE_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3c00					      LIST	ON
      0  3c00					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_0
      1  3c00				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3c00
      3  3c00				   WHITE_PROMOTE_on_WHITE_SQUARE_0
      3  3c00		       40 00 40 c0*	      .byte.b	$40,$00,$40,$c0,$80,$a0,$e0,$40,$40,$00,$40,$c0,$80,$a0,$e0,$40,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3c48					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  3c48					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_1", 72
     10  3c48					      LIST	ON
      0  3c48					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_1
      1  3c48				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3c48
      3  3c48				   WHITE_PROMOTE_on_WHITE_SQUARE_1
      3  3c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3c60		       10 00 10 18*	      .byte.b	$10,$00,$10,$18,$08,$28,$38,$10,$10,$00,$10,$18,$08,$28,$38,$10,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3c90					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  3c90					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_2", 72
     10  3c90					      LIST	ON
      0  3c90					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_2
      1  3c90				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3c90
      3  3c90				   WHITE_PROMOTE_on_WHITE_SQUARE_2
      3  3c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3cc0		       01 00 01 03*	      .byte.b	$01,$00,$01,$03,$02,$02,$03,$01,$01,$00,$01,$03,$02,$02,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3cd8					      include	"gfx/WHITE_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  3cd8					      OPTIONAL_PAGEBREAK	"WHITE_PROMOTE_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_PROMOTE_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3d00					      LIST	ON
      0  3d00					      DEF	WHITE_PROMOTE_on_WHITE_SQUARE_3
      1  3d00				   BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3d00
      3  3d00				   WHITE_PROMOTE_on_WHITE_SQUARE_3
      3  3d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3d30		       20 00 20 60*	      .byte.b	$20,$00,$20,$60,$40,$50,$70,$20,$20,$00,$20,$60,$40,$50,$70,$20,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    153  3d48
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3d48					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_0.asm"
      0  3d48					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_0", 72
     10  3d48					      LIST	ON
      0  3d48					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_0
      1  3d48				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3d48
      3  3d48				   BLACK_PROMOTE_on_BLACK_SQUARE_0
      3  3d48		       50 10 50 d0*	      .byte.b	$50,$10,$50,$d0,$90,$b0,$f0,$50,$50,$10,$50,$d0,$90,$b0,$f0,$50,$50,$10,$50,$d0,$90,$b0,$f0,$50	;PF0
      4  3d60		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  3d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3d90					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_1.asm"
      0  3d90					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_1", 72
     10  3d90					      LIST	ON
      0  3d90					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_1
      1  3d90				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3d90
      3  3d90				   BLACK_PROMOTE_on_BLACK_SQUARE_1
      3  3d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3da8		       54 44 54 5c*	      .byte.b	$54,$44,$54,$5c,$4c,$6c,$7c,$54,$54,$44,$54,$5c,$4c,$6c,$7c,$54,$54,$44,$54,$5c,$4c,$6c,$7c,$54	;PF1
      5  3dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3dd8					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_2.asm"
      0  3dd8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PROMOTE_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3e00					      LIST	ON
      0  3e00					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_2
      1  3e00				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3e00
      3  3e00				   BLACK_PROMOTE_on_BLACK_SQUARE_2
      3  3e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3e18		       02 02 02 02*	      .byte.b	$02,$02,$02,$02,$02,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$02	;PF1
      5  3e30		       05 04 05 07*	      .byte.b	$05,$04,$05,$07,$06,$06,$07,$05,$05,$04,$05,$07,$06,$06,$07,$05,$05,$04,$05,$07,$06,$06,$07,$05	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3e48					      include	"gfx/BLACK_PROMOTE_on_BLACK_SQUARE_3.asm"
      0  3e48					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_BLACK_SQUARE_3", 72
     10  3e48					      LIST	ON
      0  3e48					      DEF	BLACK_PROMOTE_on_BLACK_SQUARE_3
      1  3e48				   BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3e48
      3  3e48				   BLACK_PROMOTE_on_BLACK_SQUARE_3
      3  3e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3e78		       a8 88 a8 e8*	      .byte.b	$a8,$88,$a8,$e8,$c8,$d8,$f8,$a8,$a8,$88,$a8,$e8,$c8,$d8,$f8,$a8,$a8,$88,$a8,$e8,$c8,$d8,$f8,$a8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3e90					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_0.asm"
      0  3e90					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_0", 72
     10  3e90					      LIST	ON
      0  3e90					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_0
      1  3e90				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3e90
      3  3e90				   BLACK_PROMOTE_on_WHITE_SQUARE_0
      3  3e90		       50 10 50 d0*	      .byte.b	$50,$10,$50,$d0,$90,$b0,$f0,$50,$50,$10,$50,$d0,$90,$b0,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3ea8		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3ed8					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_1.asm"
      0  3ed8					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_PROMOTE_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3f00					      LIST	ON
      0  3f00					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_1
      1  3f00				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3f00
      3  3f00				   BLACK_PROMOTE_on_WHITE_SQUARE_1
      3  3f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3f18		       54 44 54 5c*	      .byte.b	$54,$44,$54,$5c,$4c,$6c,$7c,$54,$54,$44,$54,$5c,$4c,$6c,$7c,$54,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3f48					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_2.asm"
      0  3f48					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_2", 72
     10  3f48					      LIST	ON
      0  3f48					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_2
      1  3f48				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3f48
      3  3f48				   BLACK_PROMOTE_on_WHITE_SQUARE_2
      3  3f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3f60		       02 02 02 02*	      .byte.b	$02,$02,$02,$02,$02,$03,$03,$02,$02,$02,$02,$02,$02,$03,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3f78		       05 04 05 07*	      .byte.b	$05,$04,$05,$07,$06,$06,$07,$05,$05,$04,$05,$07,$06,$06,$07,$05,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3f90					      include	"gfx/BLACK_PROMOTE_on_WHITE_SQUARE_3.asm"
      0  3f90					      OPTIONAL_PAGEBREAK	"BLACK_PROMOTE_on_WHITE_SQUARE_3", 72
     10  3f90					      LIST	ON
      0  3f90					      DEF	BLACK_PROMOTE_on_WHITE_SQUARE_3
      1  3f90				   BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3f90
      3  3f90				   BLACK_PROMOTE_on_WHITE_SQUARE_3
      3  3f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3fc0		       a8 88 a8 e8*	      .byte.b	$a8,$88,$a8,$e8,$c8,$d8,$f8,$a8,$a8,$88,$a8,$e8,$c8,$d8,$f8,$a8,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    162  3fd8
    163  3fd8
    164  3fd8				  -	      if	0
    165  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    166  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    167  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    168  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    169  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    170  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    171  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    172  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    173  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    174  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    175  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    176  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    177  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    178  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    179  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    180  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    181  3fd8					      endif
      0  3fd8					      CHECK_BANK_SIZE	"PIECES_5 (2K)"
      1  3fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_5 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  3fd8					      ECHO	"PIECES_5 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3fd8				  -	      ERR
      6  3fd8					      endif
    183  3fd8
    184  3fd8				  -	      if	0
    185  3fd8				  -	      NEWBANK	PIECES_6
    186  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    187  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    188  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    189  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    190  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    191  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    192  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    193  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    194  3fd8				  -
    195  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    196  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    197  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    198  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    199  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    200  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    201  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    202  3fd8				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    203  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    204  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    205  3fd8				  -
    206  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    207  3fd8				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    208  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    209  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    210  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    211  3fd8				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    212  3fd8				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    213  3fd8				  -
    214  3fd8				  -
    215  3fd8				  -	      NEWBANK	PIECES_7
    216  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    217  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    218  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    219  3fd8				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    220  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    221  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    222  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    223  3fd8				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    224  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    225  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    226  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    227  3fd8				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    228  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    229  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    230  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    231  3fd8				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    232  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    233  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    234  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    235  3fd8				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    236  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    237  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    238  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    239  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    240  3fd8				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    241  3fd8				  -
    242  3fd8				  -
    243  3fd8				  -	      NEWBANK	PIECES_8
    244  3fd8				  -
    245  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    246  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    247  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    248  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    249  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    250  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    251  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    252  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    253  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    254  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    255  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    256  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    257  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    258  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    259  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    260  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    261  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    262  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    263  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    264  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    265  3fd8				  -
    266  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    267  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    268  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    269  3fd8				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    270  3fd8				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    271  3fd8				  -
    272  3fd8					      endif
    273  3fd8
    274  3fd8							;    NEWBANK PIECES_9
    275  3fd8
    276  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    277  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    278  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    279  3fd8							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    280  3fd8							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    281  3fd8
    282  3fd8				  -	      if	0
    283  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    284  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    285  3fd8				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    286  3fd8					      endif
    287  3fd8
    288  3fd8							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    289  3fd8
    290  3fd8				  -	      if	0
    291  3fd8				  -
    292  3fd8				  -
    293  3fd8				  -
    294  3fd8				  -
    295  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    296  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    297  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    298  3fd8				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    299  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    300  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    301  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    302  3fd8				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    303  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    304  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    305  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    306  3fd8				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    307  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    308  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    309  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    310  3fd8				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    311  3fd8				  -
    312  3fd8				  -
    313  3fd8					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3fd8
      0  3fd8					      NEWBANK	PIECE_VECTORS
      1  41b0 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEF	PIECE_VECTOR_LO
      1  4000				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4000
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  401d		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  401e		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  401f		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  4020		       00		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_0
     36  4021		       48		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_1
     37  4022		       90		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_2
     38  4023		       00		      .byte.b	<WHITE_PROMOTE_on_WHITE_SQUARE_3
     39  4024		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     40  4025		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     41  4026		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     42  4027		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     43  4028		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     44  4029		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     45  402a		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     46  402b		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     47  402c		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     48  402d		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     49  402e		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     50  402f		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     51  4030		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     52  4031		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     53  4032		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     54  4033		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     55  4034		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     56  4035		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     57  4036		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     58  4037		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     59  4038		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     60  4039		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     61  403a		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     62  403b		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     63  403c		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     64  403d		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     65  403e		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     66  403f		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     67  4040		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     68  4041		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     69  4042		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     70  4043		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     71  4044		       90		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_0
     72  4045		       00		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_1
     73  4046		       48		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_2
     74  4047		       90		      .byte.b	<WHITE_PROMOTE_on_BLACK_SQUARE_3
     75  4048		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     76  4049		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     77  404a		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     78  404b		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     79  404c		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     80  404d		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     81  404e		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     82  404f		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     83  4050		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     84  4051		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     85  4052		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     86  4053		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     87  4054		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     88  4055		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     89  4056		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     90  4057		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     91  4058		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     92  4059		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     93  405a		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     94  405b		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     95  405c		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     96  405d		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     97  405e		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     98  405f		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     99  4060		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
    100  4061		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
    101  4062		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
    102  4063		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_PROMOTE_on_WHITE_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    115  4070		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    116  4071		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    117  4072		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    118  4073		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    119  4074		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    120  4075		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    121  4076		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    122  4077		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    123  4078		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    124  4079		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    125  407a		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    126  407b		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    127  407c		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    128  407d		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    129  407e		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    130  407f		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    131  4080		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    132  4081		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    133  4082		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    134  4083		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    135  4084		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    136  4085		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    137  4086		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    138  4087		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    139  4088		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    140  4089		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    141  408a		       90		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    142  408b		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
    143  408c		       48		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_0
    144  408d		       90		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_1
    145  408e		       00		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_2
    146  408f		       48		      .byte.b	<BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  4090					      DEF	PIECE_VECTOR_HI
      1  4090				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4090
      3  4090				   PIECE_VECTOR_HI
    148  4090		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    149  4091		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    150  4092		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    151  4093		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    152  4094		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    153  4095		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    154  4096		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    155  4097		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    156  4098		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    157  4099		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    158  409a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    159  409b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    160  409c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    161  409d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    162  409e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    163  409f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    164  40a0		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    165  40a1		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    166  40a2		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    167  40a3		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    168  40a4		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    169  40a5		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    170  40a6		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    171  40a7		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    172  40a8		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    173  40a9		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    174  40aa		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    175  40ab		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    176  40ac		       f6		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    177  40ad		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    178  40ae		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    179  40af		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    180  40b0		       f4		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_0
    181  40b1		       f4		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_1
    182  40b2		       f4		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_2
    183  40b3		       f5		      .byte.b	>WHITE_PROMOTE_on_WHITE_SQUARE_3
    184  40b4		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    185  40b5		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    186  40b6		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    187  40b7		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    188  40b8		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    189  40b9		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    190  40ba		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    191  40bb		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    192  40bc		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    193  40bd		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    194  40be		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    195  40bf		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    196  40c0		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    197  40c1		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    198  40c2		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    199  40c3		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    200  40c4		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    201  40c5		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    202  40c6		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    203  40c7		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    204  40c8		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    205  40c9		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    206  40ca		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    207  40cb		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    208  40cc		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    209  40cd		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    210  40ce		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    211  40cf		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    212  40d0		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    213  40d1		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    214  40d2		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    215  40d3		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    216  40d4		       f2		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_0
    217  40d5		       f3		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_1
    218  40d6		       f3		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_2
    219  40d7		       f3		      .byte.b	>WHITE_PROMOTE_on_BLACK_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    224  40dc		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    225  40dd		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    226  40de		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    227  40df		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    228  40e0		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    229  40e1		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    230  40e2		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    231  40e3		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    232  40e4		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    233  40e5		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    234  40e6		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    235  40e7		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    236  40e8		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    237  40e9		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    238  40ea		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    239  40eb		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    240  40ec		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    241  40ed		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    242  40ee		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    243  40ef		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    244  40f0		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    245  40f1		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    246  40f2		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    247  40f3		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    248  40f4		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    249  40f5		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    250  40f6		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    251  40f7		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    252  40f8		       f6		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_0
    253  40f9		       f7		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_1
    254  40fa		       f7		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_2
    255  40fb		       f7		      .byte.b	>BLACK_PROMOTE_on_WHITE_SQUARE_3
    256  40fc		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    257  40fd		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    258  40fe		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    259  40ff		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    260  4100		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    261  4101		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    262  4102		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    263  4103		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    264  4104		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    265  4105		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    266  4106		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    267  4107		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    268  4108		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    269  4109		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    270  410a		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    271  410b		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    272  410c		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    273  410d		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    274  410e		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    275  410f		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    276  4110		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    277  4111		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    278  4112		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    279  4113		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    280  4114		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    281  4115		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    282  4116		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    283  4117		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    284  4118		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    285  4119		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    286  411a		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    287  411b		       f1		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
    288  411c		       f5		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_0
    289  411d		       f5		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_1
    290  411e		       f6		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_2
    291  411f		       f6		      .byte.b	>BLACK_PROMOTE_on_BLACK_SQUARE_3
      0  4120					      DEF	PIECE_VECTOR_BANK
      1  4120				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  4120
      3  4120				   PIECE_VECTOR_BANK
    293  4120		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    294  4121		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    295  4122		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    296  4123		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    297  4124		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    298  4125		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    299  4126		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    300  4127		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    301  4128		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    302  4129		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    303  412a		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    304  412b		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    305  412c		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    306  412d		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    307  412e		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    308  412f		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    309  4130		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    310  4131		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    311  4132		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    312  4133		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    313  4134		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    314  4135		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    315  4136		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    316  4137		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    317  4138		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    318  4139		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    319  413a		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    320  413b		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    321  413c		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    322  413d		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    323  413e		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    324  413f		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    325  4140		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_0
    326  4141		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_1
    327  4142		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_2
    328  4143		       07		      .byte.b	BANK_WHITE_PROMOTE_on_WHITE_SQUARE_3
    329  4144		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    330  4145		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    331  4146		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    332  4147		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    333  4148		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    334  4149		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    335  414a		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    336  414b		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    337  414c		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    338  414d		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    339  414e		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    340  414f		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    341  4150		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    342  4151		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    343  4152		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    344  4153		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    345  4154		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    346  4155		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    347  4156		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    348  4157		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    349  4158		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    350  4159		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    351  415a		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    352  415b		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    353  415c		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    354  415d		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    355  415e		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    356  415f		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    357  4160		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    358  4161		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    359  4162		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    360  4163		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    361  4164		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_0
    362  4165		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_1
    363  4166		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_2
    364  4167		       07		      .byte.b	BANK_WHITE_PROMOTE_on_BLACK_SQUARE_3
    365  4168		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    366  4169		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    367  416a		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    368  416b		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    369  416c		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    370  416d		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    371  416e		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    372  416f		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    373  4170		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    374  4171		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    375  4172		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    376  4173		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    377  4174		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    378  4175		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    379  4176		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    380  4177		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    381  4178		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    382  4179		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    383  417a		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    384  417b		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    385  417c		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    386  417d		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    387  417e		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    388  417f		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    389  4180		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    390  4181		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    391  4182		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    392  4183		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    393  4184		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    394  4185		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    395  4186		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    396  4187		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    397  4188		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_0
    398  4189		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_1
    399  418a		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_2
    400  418b		       07		      .byte.b	BANK_BLACK_PROMOTE_on_WHITE_SQUARE_3
    401  418c		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    402  418d		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    403  418e		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    404  418f		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    405  4190		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    406  4191		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    407  4192		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    408  4193		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    409  4194		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    410  4195		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    411  4196		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    412  4197		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    413  4198		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    414  4199		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    415  419a		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    416  419b		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    417  419c		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    418  419d		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    419  419e		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    420  419f		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    421  41a0		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    422  41a1		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    423  41a2		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    424  41a3		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    425  41a4		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    426  41a5		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    427  41a6		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    428  41a7		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    429  41a8		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    430  41a9		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    431  41aa		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    432  41ab		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    433  41ac		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_0
    434  41ad		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_1
    435  41ae		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_2
    436  41af		       07		      .byte.b	BANK_BLACK_PROMOTE_on_BLACK_SQUARE_3
    437  41b0
    438  41b0							; piece index equates...
    439  41b0		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    440  41b0		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    441  41b0		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    442  41b0		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    443  41b0		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    444  41b0		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    445  41b0		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    446  41b0		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    447  41b0		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    448  41b0		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    449  41b0		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    450  41b0		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    451  41b0		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    452  41b0		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    453  41b0		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    454  41b0		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    455  41b0		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    456  41b0		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    457  41b0		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    458  41b0		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    459  41b0		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    460  41b0		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    461  41b0		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    462  41b0		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    463  41b0		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    464  41b0		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    465  41b0		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    466  41b0		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    467  41b0		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    468  41b0		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    469  41b0		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    470  41b0		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    471  41b0		       00 20	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0 =	32
    472  41b0		       00 21	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_1 =	33
    473  41b0		       00 22	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_2 =	34
    474  41b0		       00 23	   INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_3 =	35
    475  41b0		       00 24	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	36
    476  41b0		       00 25	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	37
    477  41b0		       00 26	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	38
    478  41b0		       00 27	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	39
    479  41b0		       00 28	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	40
    480  41b0		       00 29	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	41
    481  41b0		       00 2a	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	42
    482  41b0		       00 2b	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	43
    483  41b0		       00 2c	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	44
    484  41b0		       00 2d	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	45
    485  41b0		       00 2e	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	46
    486  41b0		       00 2f	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	47
    487  41b0		       00 30	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	48
    488  41b0		       00 31	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	49
    489  41b0		       00 32	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	50
    490  41b0		       00 33	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	51
    491  41b0		       00 34	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	52
    492  41b0		       00 35	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	53
    493  41b0		       00 36	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	54
    494  41b0		       00 37	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	55
    495  41b0		       00 38	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	56
    496  41b0		       00 39	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	57
    497  41b0		       00 3a	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	58
    498  41b0		       00 3b	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	59
    499  41b0		       00 3c	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	60
    500  41b0		       00 3d	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	61
    501  41b0		       00 3e	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	62
    502  41b0		       00 3f	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	63
    503  41b0		       00 40	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	64
    504  41b0		       00 41	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	65
    505  41b0		       00 42	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	66
    506  41b0		       00 43	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	67
    507  41b0		       00 44	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_0 =	68
    508  41b0		       00 45	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_1 =	69
    509  41b0		       00 46	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_2 =	70
    510  41b0		       00 47	   INDEX_WHITE_PROMOTE_on_BLACK_SQUARE_3 =	71
    511  41b0		       00 48	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	72
    512  41b0		       00 49	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	73
    513  41b0		       00 4a	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	74
    514  41b0		       00 4b	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	75
    515  41b0		       00 4c	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	76
    516  41b0		       00 4d	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	77
    517  41b0		       00 4e	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	78
    518  41b0		       00 4f	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	79
    519  41b0		       00 50	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	80
    520  41b0		       00 51	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	81
    521  41b0		       00 52	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	82
    522  41b0		       00 53	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	83
    523  41b0		       00 54	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	84
    524  41b0		       00 55	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	85
    525  41b0		       00 56	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	86
    526  41b0		       00 57	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	87
    527  41b0		       00 58	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	88
    528  41b0		       00 59	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	89
    529  41b0		       00 5a	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	90
    530  41b0		       00 5b	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	91
    531  41b0		       00 5c	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	92
    532  41b0		       00 5d	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	93
    533  41b0		       00 5e	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	94
    534  41b0		       00 5f	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	95
    535  41b0		       00 60	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	96
    536  41b0		       00 61	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	97
    537  41b0		       00 62	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	98
    538  41b0		       00 63	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	99
    539  41b0		       00 64	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	100
    540  41b0		       00 65	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	101
    541  41b0		       00 66	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	102
    542  41b0		       00 67	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	103
    543  41b0		       00 68	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_0 =	104
    544  41b0		       00 69	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_1 =	105
    545  41b0		       00 6a	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_2 =	106
    546  41b0		       00 6b	   INDEX_BLACK_PROMOTE_on_WHITE_SQUARE_3 =	107
    547  41b0		       00 6c	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	108
    548  41b0		       00 6d	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	109
    549  41b0		       00 6e	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	110
    550  41b0		       00 6f	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	111
    551  41b0		       00 70	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	112
    552  41b0		       00 71	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	113
    553  41b0		       00 72	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	114
    554  41b0		       00 73	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	115
    555  41b0		       00 74	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	116
    556  41b0		       00 75	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	117
    557  41b0		       00 76	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	118
    558  41b0		       00 77	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	119
    559  41b0		       00 78	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	120
    560  41b0		       00 79	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	121
    561  41b0		       00 7a	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	122
    562  41b0		       00 7b	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	123
    563  41b0		       00 7c	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	124
    564  41b0		       00 7d	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	125
    565  41b0		       00 7e	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	126
    566  41b0		       00 7f	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	127
    567  41b0		       00 80	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	128
    568  41b0		       00 81	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	129
    569  41b0		       00 82	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	130
    570  41b0		       00 83	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	131
    571  41b0		       00 84	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	132
    572  41b0		       00 85	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	133
    573  41b0		       00 86	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	134
    574  41b0		       00 87	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	135
    575  41b0		       00 88	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	136
    576  41b0		       00 89	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	137
    577  41b0		       00 8a	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	138
    578  41b0		       00 8b	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	139
    579  41b0		       00 8c	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_0 =	140
    580  41b0		       00 8d	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_1 =	141
    581  41b0		       00 8e	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_2 =	142
    582  41b0		       00 8f	   INDEX_BLACK_PROMOTE_on_BLACK_SQUARE_3 =	143
------- FILE BANK_CHESS_INCLUDES.asm
      0  41b0					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  41b0		       01 b0	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $1b0 , FREE= $650
      2  41b0					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  41b0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  41b0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  41b0				  -	      ERR
      6  41b0					      endif
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 2
      0  41b0					      include	"BANK_StateMachine.asm"
      1  41b0
      2  41b0
      0  41b0					      NEWBANK	STATEMACHINE
      1  4c30 ????				      SEG	STATEMACHINE
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   STATEMACHINE SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	STATEMACHINE
      4  4800
      5  4800							;    MAC PHASE ;#
      6  4800							;    lda #{1}
      7  4800							;    sta aiPhase
      8  4800							;    ENDM
      9  4800
     10  4800							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
     11  4800
     12  4800		       00 09	   PLAYER     =	RAMBANK_PLY
     13  4800		       00 0a	   OPPONENT   =	PLAYER + 1
     14  4800
     15  4800		       00 08	   CURSOR_MOVE_SPEED =	8
     16  4800
     17  4800							;---------------------------------------------------------------------------------------------------
     18  4800
     19  4800
     20  4800				   P	      SET	0
     21  4800					      MAC	ain
     22  4800				   AI_{1}     SET	P
     23  4800				   P	      SET	P+1
     24  4800					      ENDM
     25  4800
     26  4800					      MAC	lo
     27  4800					      .byte	<ai{1}
     28  4800					      ENDM
     29  4800
     30  4800					      MAC	hi
     31  4800					      .byte	>ai{1}
     32  4800					      ENDM
     33  4800
     34  4800					      MAC	bk
     35  4800					      .byte	BANK_ai{1}
     36  4800					      ENDM
     37  4800
     38  4800					      MAC	tm
     39  4800					      .byte	{2}
     40  4800					      ENDM
     41  4800
     42  4800					      MAC	tabdef
     43  4800							; and per-line, {1} = #, {2} = name, {3} = time
     44  4800					      {1}	BeginSelectMovePhase, 40
     45  4800					      {1}	SelectStartSquare, 40
     46  4800					      {1}	StartSquareSelected, 40
     47  4800					      {1}	DrawMoves, 40
     48  4800					      {1}	ShowMoveCaptures, 40
     49  4800					      {1}	SlowFlash, 40
     50  4800					      {1}	DrawTargetSquares, 40
     51  4800					      {1}	SelectDestinationSquare, 40
     52  4800					      {1}	Quiescent, 40
     53  4800					      {1}	Halt, 40
     54  4800					      {1}	ReselectDebounce, 40
     55  4800					      {1}	StartMoveGen, 40
     56  4800					      {1}	StepMoveGen, 40
     57  4800					      {1}	LookForCheck, 40
     58  4800					      {1}	StartClearBoard, 40
     59  4800					      {1}	ClearEachRow, 40
     60  4800					      {1}	DrawEntireBoard, 40
     61  4800					      {1}	DEB2, 40
     62  4800					      {1}	FlipBuffers, 40
     63  4800					      {1}	FB0, 40
     64  4800					      {1}	FB2, 40
     65  4800					      {1}	FB3, 40
     66  4800					      {1}	WriteStartPieceBlank, 40
     67  4800					      {1}	MarchToTargetA, 40
     68  4800					      {1}	MarchB, 40
     69  4800					      {1}	MarchToTargetB, 40
     70  4800					      {1}	MarchB2, 40
     71  4800					      {1}	FinalFlash, 40
     72  4800					      {1}	SpecialMoveFixup, 40
     73  4800					      {1}	InCheckBackup, 40
     74  4800					      {1}	InCheckDelay, 40
     75  4800					      {1}	PromotePawnStart, 40
     76  4800					      {1}	RollPromotionPiece, 40
     77  4800					      {1}	ChoosePromotePiece, 40
     78  4800					      {1}	ChooseDebounce, 40
     79  4800					      ENDM		; {1} = macro to use
     80  4800
      0  4800					      TABDEF	AIN
      1  4800
      0  4800					      AIN	BeginSelectMovePhase, 40
      1  4800				   AI_BeginSelectMovePhase SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SelectStartSquare, 40
      1  4800				   AI_SelectStartSquare SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StartSquareSelected, 40
      1  4800				   AI_StartSquareSelected SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawMoves, 40
      1  4800				   AI_DrawMoves SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ShowMoveCaptures, 40
      1  4800				   AI_ShowMoveCaptures SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SlowFlash, 40
      1  4800				   AI_SlowFlash SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawTargetSquares, 40
      1  4800				   AI_DrawTargetSquares SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SelectDestinationSquare, 40
      1  4800				   AI_SelectDestinationSquare SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	Quiescent, 40
      1  4800				   AI_Quiescent SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	Halt, 40
      1  4800				   AI_Halt    SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ReselectDebounce, 40
      1  4800				   AI_ReselectDebounce SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StartMoveGen, 40
      1  4800				   AI_StartMoveGen SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StepMoveGen, 40
      1  4800				   AI_StepMoveGen SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	LookForCheck, 40
      1  4800				   AI_LookForCheck SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	StartClearBoard, 40
      1  4800				   AI_StartClearBoard SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ClearEachRow, 40
      1  4800				   AI_ClearEachRow SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DrawEntireBoard, 40
      1  4800				   AI_DrawEntireBoard SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	DEB2, 40
      1  4800				   AI_DEB2    SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FlipBuffers, 40
      1  4800				   AI_FlipBuffers SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FB0, 40
      1  4800				   AI_FB0     SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FB2, 40
      1  4800				   AI_FB2     SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FB3, 40
      1  4800				   AI_FB3     SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	WriteStartPieceBlank, 40
      1  4800				   AI_WriteStartPieceBlank SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchToTargetA, 40
      1  4800				   AI_MarchToTargetA SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchB, 40
      1  4800				   AI_MarchB  SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchToTargetB, 40
      1  4800				   AI_MarchToTargetB SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	MarchB2, 40
      1  4800				   AI_MarchB2 SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	FinalFlash, 40
      1  4800				   AI_FinalFlash SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	SpecialMoveFixup, 40
      1  4800				   AI_SpecialMoveFixup SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	InCheckBackup, 40
      1  4800				   AI_InCheckBackup SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	InCheckDelay, 40
      1  4800				   AI_InCheckDelay SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	PromotePawnStart, 40
      1  4800				   AI_PromotePawnStart SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	RollPromotionPiece, 40
      1  4800				   AI_RollPromotionPiece SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ChoosePromotePiece, 40
      1  4800				   AI_ChoosePromotePiece SET	P
      2  4800				   P	      SET	P+1
      0  4800					      AIN	ChooseDebounce, 40
      1  4800				   AI_ChooseDebounce SET	P
      2  4800				   P	      SET	P+1
      0  4800					      DEF	AiVectorLO
      1  4800				   BANK_AiVectorLO SET	_CURRENT_BANK
      2  4800
      3  4800				   AiVectorLO
      0  4800					      TABDEF	LO
      1  4800
      0  4800					      LO	BeginSelectMovePhase, 40
      1  4800		       18		      .byte.b	<aiBeginSelectMovePhase
      0  4801					      LO	SelectStartSquare, 40
      1  4801		       2f		      .byte.b	<aiSelectStartSquare
      0  4802					      LO	StartSquareSelected, 40
      1  4802		       a2		      .byte.b	<aiStartSquareSelected
      0  4803					      LO	DrawMoves, 40
      1  4803		       c4		      .byte.b	<aiDrawMoves
      0  4804					      LO	ShowMoveCaptures, 40
      1  4804		       1d		      .byte.b	<aiShowMoveCaptures
      0  4805					      LO	SlowFlash, 40
      1  4805		       3b		      .byte.b	<aiSlowFlash
      0  4806					      LO	DrawTargetSquares, 40
      1  4806		       fb		      .byte.b	<aiDrawTargetSquares
      0  4807					      LO	SelectDestinationSquare, 40
      1  4807		       a6		      .byte.b	<aiSelectDestinationSquare
      0  4808					      LO	Quiescent, 40
      1  4808		       e7		      .byte.b	<aiQuiescent
      0  4809					      LO	Halt, 40
      1  4809		       27		      .byte.b	<aiHalt
      0  480a					      LO	ReselectDebounce, 40
      1  480a		       de		      .byte.b	<aiReselectDebounce
      0  480b					      LO	StartMoveGen, 40
      1  480b		       a7		      .byte.b	<aiStartMoveGen
      0  480c					      LO	StepMoveGen, 40
      1  480c		       b9		      .byte.b	<aiStepMoveGen
      0  480d					      LO	LookForCheck, 40
      1  480d		       d7		      .byte.b	<aiLookForCheck
      0  480e					      LO	StartClearBoard, 40
      1  480e		       41		      .byte.b	<aiStartClearBoard
      0  480f					      LO	ClearEachRow, 40
      1  480f		       4e		      .byte.b	<aiClearEachRow
      0  4810					      LO	DrawEntireBoard, 40
      1  4810		       c2		      .byte.b	<aiDrawEntireBoard
      0  4811					      LO	DEB2, 40
      1  4811		       8f		      .byte.b	<aiDEB2
      0  4812					      LO	FlipBuffers, 40
      1  4812		       eb		      .byte.b	<aiFlipBuffers
      0  4813					      LO	FB0, 40
      1  4813		       2d		      .byte.b	<aiFB0
      0  4814					      LO	FB2, 40
      1  4814		       52		      .byte.b	<aiFB2
      0  4815					      LO	FB3, 40
      1  4815		       60		      .byte.b	<aiFB3
      0  4816					      LO	WriteStartPieceBlank, 40
      1  4816		       71		      .byte.b	<aiWriteStartPieceBlank
      0  4817					      LO	MarchToTargetA, 40
      1  4817		       70		      .byte.b	<aiMarchToTargetA
      0  4818					      LO	MarchB, 40
      1  4818		       a0		      .byte.b	<aiMarchB
      0  4819					      LO	MarchToTargetB, 40
      1  4819		       dd		      .byte.b	<aiMarchToTargetB
      0  481a					      LO	MarchB2, 40
      1  481a		       fb		      .byte.b	<aiMarchB2
      0  481b					      LO	FinalFlash, 40
      1  481b		       b0		      .byte.b	<aiFinalFlash
      0  481c					      LO	SpecialMoveFixup, 40
      1  481c		       2d		      .byte.b	<aiSpecialMoveFixup
      0  481d					      LO	InCheckBackup, 40
      1  481d		       fd		      .byte.b	<aiInCheckBackup
      0  481e					      LO	InCheckDelay, 40
      1  481e		       0b		      .byte.b	<aiInCheckDelay
      0  481f					      LO	PromotePawnStart, 40
      1  481f		       28		      .byte.b	<aiPromotePawnStart
      0  4820					      LO	RollPromotionPiece, 40
      1  4820		       3a		      .byte.b	<aiRollPromotionPiece
      0  4821					      LO	ChoosePromotePiece, 40
      1  4821		       71		      .byte.b	<aiChoosePromotePiece
      0  4822					      LO	ChooseDebounce, 40
      1  4822		       d2		      .byte.b	<aiChooseDebounce
      0  4823					      DEF	AiVectorHI
      1  4823				   BANK_AiVectorHI SET	_CURRENT_BANK
      2  4823
      3  4823				   AiVectorHI
      0  4823					      TABDEF	HI
      1  4823
      0  4823					      HI	BeginSelectMovePhase, 40
      1  4823		       f1		      .byte.b	>aiBeginSelectMovePhase
      0  4824					      HI	SelectStartSquare, 40
      1  4824		       f1		      .byte.b	>aiSelectStartSquare
      0  4825					      HI	StartSquareSelected, 40
      1  4825		       f1		      .byte.b	>aiStartSquareSelected
      0  4826					      HI	DrawMoves, 40
      1  4826		       f1		      .byte.b	>aiDrawMoves
      0  4827					      HI	ShowMoveCaptures, 40
      1  4827		       f2		      .byte.b	>aiShowMoveCaptures
      0  4828					      HI	SlowFlash, 40
      1  4828		       f2		      .byte.b	>aiSlowFlash
      0  4829					      HI	DrawTargetSquares, 40
      1  4829		       f1		      .byte.b	>aiDrawTargetSquares
      0  482a					      HI	SelectDestinationSquare, 40
      1  482a		       f2		      .byte.b	>aiSelectDestinationSquare
      0  482b					      HI	Quiescent, 40
      1  482b		       f2		      .byte.b	>aiQuiescent
      0  482c					      HI	Halt, 40
      1  482c		       f3		      .byte.b	>aiHalt
      0  482d					      HI	ReselectDebounce, 40
      1  482d		       f2		      .byte.b	>aiReselectDebounce
      0  482e					      HI	StartMoveGen, 40
      1  482e		       f0		      .byte.b	>aiStartMoveGen
      0  482f					      HI	StepMoveGen, 40
      1  482f		       f0		      .byte.b	>aiStepMoveGen
      0  4830					      HI	LookForCheck, 40
      1  4830		       f0		      .byte.b	>aiLookForCheck
      0  4831					      HI	StartClearBoard, 40
      1  4831		       f0		      .byte.b	>aiStartClearBoard
      0  4832					      HI	ClearEachRow, 40
      1  4832		       f0		      .byte.b	>aiClearEachRow
      0  4833					      HI	DrawEntireBoard, 40
      1  4833		       f8		      .byte.b	>aiDrawEntireBoard
      0  4834					      HI	DEB2, 40
      1  4834		       f0		      .byte.b	>aiDEB2
      0  4835					      HI	FlipBuffers, 40
      1  4835		       f8		      .byte.b	>aiFlipBuffers
      0  4836					      HI	FB0, 40
      1  4836		       f9		      .byte.b	>aiFB0
      0  4837					      HI	FB2, 40
      1  4837		       f9		      .byte.b	>aiFB2
      0  4838					      HI	FB3, 40
      1  4838		       f0		      .byte.b	>aiFB3
      0  4839					      HI	WriteStartPieceBlank, 40
      1  4839		       f0		      .byte.b	>aiWriteStartPieceBlank
      0  483a					      HI	MarchToTargetA, 40
      1  483a		       f9		      .byte.b	>aiMarchToTargetA
      0  483b					      HI	MarchB, 40
      1  483b		       f0		      .byte.b	>aiMarchB
      0  483c					      HI	MarchToTargetB, 40
      1  483c		       f9		      .byte.b	>aiMarchToTargetB
      0  483d					      HI	MarchB2, 40
      1  483d		       f9		      .byte.b	>aiMarchB2
      0  483e					      HI	FinalFlash, 40
      1  483e		       f0		      .byte.b	>aiFinalFlash
      0  483f					      HI	SpecialMoveFixup, 40
      1  483f		       fa		      .byte.b	>aiSpecialMoveFixup
      0  4840					      HI	InCheckBackup, 40
      1  4840		       f0		      .byte.b	>aiInCheckBackup
      0  4841					      HI	InCheckDelay, 40
      1  4841		       f1		      .byte.b	>aiInCheckDelay
      0  4842					      HI	PromotePawnStart, 40
      1  4842		       f3		      .byte.b	>aiPromotePawnStart
      0  4843					      HI	RollPromotionPiece, 40
      1  4843		       f3		      .byte.b	>aiRollPromotionPiece
      0  4844					      HI	ChoosePromotePiece, 40
      1  4844		       f3		      .byte.b	>aiChoosePromotePiece
      0  4845					      HI	ChooseDebounce, 40
      1  4845		       f3		      .byte.b	>aiChooseDebounce
      0  4846					      DEF	AiVectorBANK
      1  4846				   BANK_AiVectorBANK SET	_CURRENT_BANK
      2  4846
      3  4846				   AiVectorBANK
      0  4846					      TABDEF	BK
      1  4846
      0  4846					      BK	BeginSelectMovePhase, 40
      1  4846		       09		      .byte.b	BANK_aiBeginSelectMovePhase
      0  4847					      BK	SelectStartSquare, 40
      1  4847		       09		      .byte.b	BANK_aiSelectStartSquare
      0  4848					      BK	StartSquareSelected, 40
      1  4848		       09		      .byte.b	BANK_aiStartSquareSelected
      0  4849					      BK	DrawMoves, 40
      1  4849		       09		      .byte.b	BANK_aiDrawMoves
      0  484a					      BK	ShowMoveCaptures, 40
      1  484a		       09		      .byte.b	BANK_aiShowMoveCaptures
      0  484b					      BK	SlowFlash, 40
      1  484b		       09		      .byte.b	BANK_aiSlowFlash
      0  484c					      BK	DrawTargetSquares, 40
      1  484c		       09		      .byte.b	BANK_aiDrawTargetSquares
      0  484d					      BK	SelectDestinationSquare, 40
      1  484d		       09		      .byte.b	BANK_aiSelectDestinationSquare
      0  484e					      BK	Quiescent, 40
      1  484e		       09		      .byte.b	BANK_aiQuiescent
      0  484f					      BK	Halt, 40
      1  484f		       09		      .byte.b	BANK_aiHalt
      0  4850					      BK	ReselectDebounce, 40
      1  4850		       09		      .byte.b	BANK_aiReselectDebounce
      0  4851					      BK	StartMoveGen, 40
      1  4851		       09		      .byte.b	BANK_aiStartMoveGen
      0  4852					      BK	StepMoveGen, 40
      1  4852		       09		      .byte.b	BANK_aiStepMoveGen
      0  4853					      BK	LookForCheck, 40
      1  4853		       09		      .byte.b	BANK_aiLookForCheck
      0  4854					      BK	StartClearBoard, 40
      1  4854		       00		      .byte.b	BANK_aiStartClearBoard
      0  4855					      BK	ClearEachRow, 40
      1  4855		       00		      .byte.b	BANK_aiClearEachRow
      0  4856					      BK	DrawEntireBoard, 40
      1  4856		       0f		      .byte.b	BANK_aiDrawEntireBoard
      0  4857					      BK	DEB2, 40
      1  4857		       00		      .byte.b	BANK_aiDEB2
      0  4858					      BK	FlipBuffers, 40
      1  4858		       0f		      .byte.b	BANK_aiFlipBuffers
      0  4859					      BK	FB0, 40
      1  4859		       0f		      .byte.b	BANK_aiFB0
      0  485a					      BK	FB2, 40
      1  485a		       0f		      .byte.b	BANK_aiFB2
      0  485b					      BK	FB3, 40
      1  485b		       00		      .byte.b	BANK_aiFB3
      0  485c					      BK	WriteStartPieceBlank, 40
      1  485c		       00		      .byte.b	BANK_aiWriteStartPieceBlank
      0  485d					      BK	MarchToTargetA, 40
      1  485d		       0f		      .byte.b	BANK_aiMarchToTargetA
      0  485e					      BK	MarchB, 40
      1  485e		       00		      .byte.b	BANK_aiMarchB
      0  485f					      BK	MarchToTargetB, 40
      1  485f		       0f		      .byte.b	BANK_aiMarchToTargetB
      0  4860					      BK	MarchB2, 40
      1  4860		       0f		      .byte.b	BANK_aiMarchB2
      0  4861					      BK	FinalFlash, 40
      1  4861		       00		      .byte.b	BANK_aiFinalFlash
      0  4862					      BK	SpecialMoveFixup, 40
      1  4862		       0f		      .byte.b	BANK_aiSpecialMoveFixup
      0  4863					      BK	InCheckBackup, 40
      1  4863		       09		      .byte.b	BANK_aiInCheckBackup
      0  4864					      BK	InCheckDelay, 40
      1  4864		       09		      .byte.b	BANK_aiInCheckDelay
      0  4865					      BK	PromotePawnStart, 40
      1  4865		       09		      .byte.b	BANK_aiPromotePawnStart
      0  4866					      BK	RollPromotionPiece, 40
      1  4866		       09		      .byte.b	BANK_aiRollPromotionPiece
      0  4867					      BK	ChoosePromotePiece, 40
      1  4867		       09		      .byte.b	BANK_aiChoosePromotePiece
      0  4868					      BK	ChooseDebounce, 40
      1  4868		       09		      .byte.b	BANK_aiChooseDebounce
      0  4869					      DEF	AiTimeRequired
      1  4869				   BANK_AiTimeRequired SET	_CURRENT_BANK
      2  4869
      3  4869				   AiTimeRequired
      0  4869					      TABDEF	TM
      1  4869
      0  4869					      TM	BeginSelectMovePhase, 40
      1  4869		       28		      .byte.b	40
      0  486a					      TM	SelectStartSquare, 40
      1  486a		       28		      .byte.b	40
      0  486b					      TM	StartSquareSelected, 40
      1  486b		       28		      .byte.b	40
      0  486c					      TM	DrawMoves, 40
      1  486c		       28		      .byte.b	40
      0  486d					      TM	ShowMoveCaptures, 40
      1  486d		       28		      .byte.b	40
      0  486e					      TM	SlowFlash, 40
      1  486e		       28		      .byte.b	40
      0  486f					      TM	DrawTargetSquares, 40
      1  486f		       28		      .byte.b	40
      0  4870					      TM	SelectDestinationSquare, 40
      1  4870		       28		      .byte.b	40
      0  4871					      TM	Quiescent, 40
      1  4871		       28		      .byte.b	40
      0  4872					      TM	Halt, 40
      1  4872		       28		      .byte.b	40
      0  4873					      TM	ReselectDebounce, 40
      1  4873		       28		      .byte.b	40
      0  4874					      TM	StartMoveGen, 40
      1  4874		       28		      .byte.b	40
      0  4875					      TM	StepMoveGen, 40
      1  4875		       28		      .byte.b	40
      0  4876					      TM	LookForCheck, 40
      1  4876		       28		      .byte.b	40
      0  4877					      TM	StartClearBoard, 40
      1  4877		       28		      .byte.b	40
      0  4878					      TM	ClearEachRow, 40
      1  4878		       28		      .byte.b	40
      0  4879					      TM	DrawEntireBoard, 40
      1  4879		       28		      .byte.b	40
      0  487a					      TM	DEB2, 40
      1  487a		       28		      .byte.b	40
      0  487b					      TM	FlipBuffers, 40
      1  487b		       28		      .byte.b	40
      0  487c					      TM	FB0, 40
      1  487c		       28		      .byte.b	40
      0  487d					      TM	FB2, 40
      1  487d		       28		      .byte.b	40
      0  487e					      TM	FB3, 40
      1  487e		       28		      .byte.b	40
      0  487f					      TM	WriteStartPieceBlank, 40
      1  487f		       28		      .byte.b	40
      0  4880					      TM	MarchToTargetA, 40
      1  4880		       28		      .byte.b	40
      0  4881					      TM	MarchB, 40
      1  4881		       28		      .byte.b	40
      0  4882					      TM	MarchToTargetB, 40
      1  4882		       28		      .byte.b	40
      0  4883					      TM	MarchB2, 40
      1  4883		       28		      .byte.b	40
      0  4884					      TM	FinalFlash, 40
      1  4884		       28		      .byte.b	40
      0  4885					      TM	SpecialMoveFixup, 40
      1  4885		       28		      .byte.b	40
      0  4886					      TM	InCheckBackup, 40
      1  4886		       28		      .byte.b	40
      0  4887					      TM	InCheckDelay, 40
      1  4887		       28		      .byte.b	40
      0  4888					      TM	PromotePawnStart, 40
      1  4888		       28		      .byte.b	40
      0  4889					      TM	RollPromotionPiece, 40
      1  4889		       28		      .byte.b	40
      0  488a					      TM	ChoosePromotePiece, 40
      1  488a		       28		      .byte.b	40
      0  488b					      TM	ChooseDebounce, 40
      1  488b		       28		      .byte.b	40
     90  488c
     91  488c
     92  488c							;---------------------------------------------------------------------------------------------------
     93  488c
      0  488c					      DEF	AiSetupVectors
      1  488c				   BANK_AiSetupVectors SET	_CURRENT_BANK
      2  488c
      3  488c				   AiSetupVectors
     95  488c					      SUBROUTINE
     96  488c
     97  488c		       a6 8c		      ldx	aiPhase
     98  488e
     99  488e		       bd 69 f0 	      lda	AiTimeRequired,x
    100  4891		       cd 84 02 	      cmp	INTIM	; is there enough time left?
    101  4894		       b0 10		      bcs	.exit	; nope
    102  4896
    103  4896		       bd 00 f0 	      lda	AiVectorLO,x
    104  4899		       85 eb		      sta	__ptr
    105  489b		       bd 23 f0 	      lda	AiVectorHI,x
    106  489e		       85 ec		      sta	__ptr+1
    107  48a0
    108  48a0		       bd 46 f0 	      lda	AiVectorBANK,x
    109  48a3		       85 8b		      sta	savedBank
    110  48a5
    111  48a5		       18		      clc
    112  48a6		       60	   .exit      rts
    113  48a7
    114  48a7
    115  48a7							;---------------------------------------------------------------------------------------------------
    116  48a7
      0  48a7					      DEF	aiStartMoveGen
      1  48a7				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  48a7
      3  48a7				   aiStartMoveGen
    118  48a7					      SUBROUTINE
    119  48a7
    120  48a7							; To assist with castling, generate the moves for the opponent, giving us effectively
    121  48a7							; a list of squares that are being attacked. The castling can't happen if the king is
    122  48a7							; in check or if the squares it would have to move over are in check
    123  48a7
    124  48a7							; we don't need to worry about this if K has moved, or relevant R has moved or if
    125  48a7							; the squares between are occupied. We can tell THAT by examining the movelist to see
    126  48a7							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    127  48a7
    128  48a7		       a9 0a		      lda	#OPPONENT
    129  48a9		       85 99		      sta	currentPly
    130  48ab		       20 f7 f8 	      jsr	SAFE_InitialiseMoveGeneration
    131  48ae
    132  48ae		       a5 9b		      lda	sideToMove
    133  48b0		       49 80		      eor	#128
    134  48b2		       85 9b		      sta	sideToMove	; for movegen to know
    135  48b4
      0  48b4					      PHASE	AI_StepMoveGen
      1  48b4		       a9 0c		      lda	#AI_StepMoveGen
      2  48b6		       85 8c		      sta	aiPhase
    137  48b8		       60		      rts
    138  48b9
    139  48b9
    140  48b9							;---------------------------------------------------------------------------------------------------
    141  48b9
      0  48b9					      DEF	aiStepMoveGen
      1  48b9				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  48b9
      3  48b9				   aiStepMoveGen
    143  48b9					      SUBROUTINE
    144  48b9
    145  48b9							; Because we're (possibly) running with the screen on, processing time is very short and
    146  48b9							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    147  48b9							; this happens over multiple frames.
    148  48b9
    149  48b9		       20 03 f9 	      jsr	SAFE_GenerateOneMove
    150  48bc
    151  48bc		       a5 9a		      lda	piecelistIndex
    152  48be		       29 0f		      and	#15
    153  48c0		       c9 00		      cmp	#0
    154  48c2		       f0 08		      beq	.swap
    155  48c4
    156  48c4		       ad 84 02 	      lda	INTIM
    157  48c7		       c9 14		      cmp	#20
    158  48c9		       b0 ee		      bcs	aiStepMoveGen	; repeat!!
    159  48cb		       60		      rts
    160  48cc
    161  48cc
    162  48cc		       a5 9b	   .swap      lda	sideToMove
    163  48ce		       49 80		      eor	#128
    164  48d0		       85 9b		      sta	sideToMove
    165  48d2
    166  48d2
      0  48d2					      PHASE	AI_LookForCheck
      1  48d2		       a9 0d		      lda	#AI_LookForCheck
      2  48d4		       85 8c		      sta	aiPhase
    168  48d6		       60	   .wait      rts
    169  48d7
    170  48d7
    171  48d7							;---------------------------------------------------------------------------------------------------
    172  48d7
      0  48d7					      DEF	aiLookForCheck
      1  48d7				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  48d7
      3  48d7				   aiLookForCheck
    174  48d7					      SUBROUTINE
    175  48d7
    176  48d7							; now we've finished generating the opponent moves
    177  48d7							; See if the square our king is on is an attacked square (that is, it appears as a TO
    178  48d7							; square in the opponent's movelist)
    179  48d7
    180  48d7		       a9 09		      lda	#PLAYER
    181  48d9		       85 99		      sta	currentPly
    182  48db		       20 3c fd 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    183  48de
    184  48de		       e6 99		      inc	currentPly
    185  48e0		       20 b6 fe 	      jsr	SAFE_IsSquareUnderAttack
    186  48e3		       c6 99		      dec	currentPly
    187  48e5		       90 11		      bcc	.exit
    188  48e7
    189  48e7							; in check!
    190  48e7
    191  48e7		       a9 40		      lda	#$40
    192  48e9		       85 49		      sta	COLUBK
    193  48eb
    194  48eb		       a9 32		      lda	#50
    195  48ed		       85 89		      sta	mdelay
    196  48ef
    197  48ef		       a9 08		      lda	#8
    198  48f1		       85 84		      sta	drawCount	; row #
    199  48f3
      0  48f3					      PHASE	AI_InCheckBackup
      1  48f3		       a9 1d		      lda	#AI_InCheckBackup
      2  48f5		       85 8c		      sta	aiPhase
    201  48f7		       60		      rts
    202  48f8
      0  48f8				   .exit      PHASE	AI_BeginSelectMovePhase
      1  48f8		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  48fa		       85 8c		      sta	aiPhase
    204  48fc		       60		      rts
    205  48fd
    206  48fd
    207  48fd							;---------------------------------------------------------------------------------------------------
    208  48fd
      0  48fd					      DEF	aiInCheckBackup
      1  48fd				   BANK_aiInCheckBackup SET	_CURRENT_BANK
      2  48fd
      3  48fd				   aiInCheckBackup
    210  48fd					      SUBROUTINE
    211  48fd
    212  48fd							; We're about to draw some large text on the screen
    213  48fd							; Make a backup copy of all of the row bitmaps, so that we can restore once text is done
    214  48fd
    215  48fd		       c6 84		      dec	drawCount
    216  48ff		       30 05		      bmi	.exit	; done all rows
    217  4901		       a4 84		      ldy	drawCount
    218  4903		       4c ac fe 	      jmp	SAFE_BackupBitmaps
    219  4906
      0  4906				   .exit      PHASE	AI_InCheckDelay
      1  4906		       a9 1e		      lda	#AI_InCheckDelay
      2  4908		       85 8c		      sta	aiPhase
    221  490a		       60		      rts
    222  490b
    223  490b
    224  490b							;---------------------------------------------------------------------------------------------------
    225  490b
      0  490b					      DEF	aiInCheckDelay
      1  490b				   BANK_aiInCheckDelay SET	_CURRENT_BANK
      2  490b
      3  490b				   aiInCheckDelay
    227  490b					      SUBROUTINE
    228  490b
    229  490b		       c6 89		      dec	mdelay
    230  490d		       d0 08		      bne	.exit
    231  490f
    232  490f		       a9 00		      lda	#0
    233  4911		       85 49		      sta	COLUBK
    234  4913
      0  4913					      PHASE	AI_BeginSelectMovePhase
      1  4913		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  4915		       85 8c		      sta	aiPhase
    236  4917		       60	   .exit      rts
    237  4918
    238  4918
    239  4918							;---------------------------------------------------------------------------------------------------
    240  4918
      0  4918					      DEF	aiBeginSelectMovePhase
      1  4918				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  4918
      3  4918				   aiBeginSelectMovePhase
    242  4918					      SUBROUTINE
    243  4918
    244  4918		       a9 04		      lda	#4
    245  491a		       85 87		      sta	highlight_row
    246  491c		       85 88		      sta	highlight_col
    247  491e
    248  491e		       a9 00		      lda	#0
    249  4920		       85 89		      sta	mdelay	;?
    250  4922		       85 93		      sta	aiFlashPhase	;?
    251  4924
    252  4924		       a9 ff		      lda	#-1
    253  4926		       85 8e		      sta	aiFromSquare
    254  4928		       85 8f		      sta	aiToSquare
    255  492a
      0  492a					      PHASE	AI_SelectStartSquare
      1  492a		       a9 01		      lda	#AI_SelectStartSquare
      2  492c		       85 8c		      sta	aiPhase
    257  492e		       60		      rts
    258  492f
    259  492f							;---------------------------------------------------------------------------------------------------
    260  492f
      0  492f					      DEF	aiSelectStartSquare
      1  492f				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  492f
      3  492f				   aiSelectStartSquare
    262  492f					      SUBROUTINE
    263  492f
    264  492f		       20 60 f2 	      jsr	moveCursor
    265  4932		       20 5d fd 	      jsr	SAFE_IsValidMoveFromSquare
    266  4935
    267  4935		       c6 8a		      dec	ccur	; pulse colour for valid squares
    268  4937		       20 60 f1 	      jsr	setCursorColours
    269  493a
    270  493a		       98		      tya
    271  493b		       05 4c		      ora	INPT4
    272  493d		       30 04		      bmi	.exit	; illegal square or no button press
    273  493f
      0  493f					      PHASE	AI_StartSquareSelected
      1  493f		       a9 02		      lda	#AI_StartSquareSelected
      2  4941		       85 8c		      sta	aiPhase
    275  4943
    276  4943		       60	   .exit      rts
    277  4944
    278  4944							;---------------------------------------------------------------------------------------------------
    279  4944
      0  4944					      DEF	setCursorPriority
      1  4944				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  4944
      3  4944				   setCursorPriority
    281  4944					      SUBROUTINE
    282  4944
    283  4944		       98		      tya
    284  4945		       48		      pha
    285  4946
    286  4946					      if	1
    287  4946
    288  4946		       a5 87		      lda	highlight_row
    289  4948		       49 07		      eor	#7
    290  494a		       0a		      asl
    291  494b		       0a		      asl
    292  494c		       0a		      asl
    293  494d		       05 88		      ora	highlight_col
    294  494f		       aa		      tax
    295  4950
    296  4950		       20 b3 f8 	      jsr	SAFE_Get64toX12Board
    297  4953		       a2 04		      ldx	#%100
    298  4955		       c9 00		      cmp	#0
    299  4957		       d0 02		      bne	.under
    300  4959		       a2 00		      ldx	#0
    301  495b		       86 4a	   .under     stx	CTRLPF	; UNDER
    302  495d					      endif
    303  495d
    304  495d		       68		      pla
    305  495e		       a8		      tay
    306  495f		       60		      rts
    307  4960
    308  4960							;---------------------------------------------------------------------------------------------------
    309  4960
      0  4960					      DEF	setCursorColours
      1  4960				   BANK_setCursorColours SET	_CURRENT_BANK
      2  4960
      3  4960				   setCursorColours
    311  4960					      SUBROUTINE
    312  4960
    313  4960							; pass y=-1 if move is NOT in the movelist
    314  4960							; preserve y
    315  4960
    316  4960		       a9 44		      lda	#$44
    317  4962
    318  4962		       c0 ff		      cpy	#-1
    319  4964		       f0 09		      beq	.writeCursorCol	; NOT in the movelist
    320  4966
    321  4966		       a5 8a		      lda	ccur
    322  4968		       4a		      lsr
    323  4969		       4a		      lsr
    324  496a		       29 03		      and	#3
    325  496c		       18		      clc
    326  496d		       69 c0		      adc	#$C0	;COLOUR_LINE_1
    327  496f
    328  496f		       85 46	   .writeCursorCol sta	COLUP0
    329  4971		       60		      rts
    330  4972
    331  4972
      0  4972					      OPTIONAL_PAGEBREAK	"Joystik Tables", 32
     10  4972					      LIST	ON
    333  4972
    334  4972							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
    335  4972							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    336  4972		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
    337  4982		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
    338  4992		       00 00 00 00*JoyCombined .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1, -1, 0
    339  49a2
    340  49a2
    341  49a2							;---------------------------------------------------------------------------------------------------
    342  49a2
      0  49a2					      DEF	aiStartSquareSelected
      1  49a2				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  49a2
      3  49a2				   aiStartSquareSelected
    344  49a2					      SUBROUTINE
    345  49a2
    346  49a2							; Mark all the valid moves for the selected piece on the board
    347  49a2							; and then start pulsing the piece
    348  49a2							; AND start choosing for selection of TO square
    349  49a2
    350  49a2							; Iterate the movelist and for all from squares which = drawPieceNumber
    351  49a2							; then draw a BLANK at that square
    352  49a2							; do 1 by one, when none found then increment state
    353  49a2
    354  49a2		       a5 87		      lda	highlight_row
    355  49a4		       49 07		      eor	#7
    356  49a6		       0a		      asl
    357  49a7		       0a		      asl
    358  49a8		       0a		      asl
    359  49a9		       05 88		      ora	highlight_col
    360  49ab		       85 80		      sta	drawPieceNumber
    361  49ad
    362  49ad		       a9 0a		      lda	#10
    363  49af		       85 8d		      sta	aiFlashDelay
    364  49b1		       a9 00		      lda	#0
    365  49b3		       85 8f		      sta	aiToSquare
    366  49b5		       85 93		      sta	aiFlashPhase	; for debounce exit timing
    367  49b7
    368  49b7		       a9 ff		      lda	#-1
    369  49b9		       85 92		      sta	aiMoveIndex
    370  49bb
    371  49bb		       a9 0f		      lda	#15
    372  49bd		       85 89		      sta	mdelay	; hold-down delay before moves are shown
    373  49bf
      0  49bf					      PHASE	AI_DrawMoves
      1  49bf		       a9 03		      lda	#AI_DrawMoves
      2  49c1		       85 8c		      sta	aiPhase
    375  49c3		       60		      rts
    376  49c4
    377  49c4							;---------------------------------------------------------------------------------------------------
    378  49c4
      0  49c4					      DEF	aiDrawMoves
      1  49c4				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  49c4
      3  49c4				   aiDrawMoves
    380  49c4					      SUBROUTINE
    381  49c4		       c6 8a		      dec	ccur
    382  49c6		       20 60 f1 	      jsr	setCursorColours
    383  49c9
    384  49c9		       c6 89		      dec	mdelay
    385  49cb		       d0 21		      bne	.exit
    386  49cd		       a9 01		      lda	#1
    387  49cf		       85 89		      sta	mdelay	; once triggered, runs always
    388  49d1
    389  49d1
    390  49d1		       a5 92		      lda	aiMoveIndex
    391  49d3		       10 05		      bpl	.valid
    392  49d5
    393  49d5		       20 4c fe 	      jsr	SAFE_getMoveIndex
    394  49d8		       85 92		      sta	aiMoveIndex
    395  49da
    396  49da		       20 58 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    397  49dd		       a5 92		      lda	aiMoveIndex
    398  49df		       10 19		      bpl	.unsure	; still drawing in this phase
    399  49e1
    400  49e1		       a9 08		      lda	#CAP_SPEED
    401  49e3		       85 89		      sta	mdelay
    402  49e5
    403  49e5		       a9 00		      lda	#0
    404  49e7		       85 93		      sta	aiFlashPhase	; controls odd/even exit of flashing
    405  49e9
      0  49e9					      PHASE	AI_ShowMoveCaptures
      1  49e9		       a9 04		      lda	#AI_ShowMoveCaptures
      2  49eb		       85 8c		      sta	aiPhase
    407  49ed		       60		      rts
    408  49ee
    409  49ee				   .exit
    410  49ee
    411  49ee							; Initial piece selection has happened, but the button hasn't been released yet
    412  49ee							; AND we're still in the waiting phase to see if the button was held long enough for move show
    413  49ee
    414  49ee		       a5 4c		      lda	INPT4
    415  49f0		       10 08		      bpl	.unsure	; button still pressed, so still unsure what to do
    416  49f2
    417  49f2							; Aha! Button released, so we know the selected piece and can start flashing it
    418  49f2							; and allowing movement of the selector to a destination square...
    419  49f2
    420  49f2		       a9 18		      lda	#6*4
    421  49f4		       85 8a		      sta	ccur	; bright green square for selection
    422  49f6
      0  49f6					      PHASE	AI_SelectDestinationSquare
      1  49f6		       a9 07		      lda	#AI_SelectDestinationSquare
      2  49f8		       85 8c		      sta	aiPhase
    424  49fa
    425  49fa		       60	   .unsure    rts
    426  49fb
    427  49fb
    428  49fb							;---------------------------------------------------------------------------------------------------
    429  49fb
      0  49fb					      DEF	aiDrawTargetSquares
      1  49fb				   BANK_aiDrawTargetSquares SET	_CURRENT_BANK
      2  49fb
      3  49fb				   aiDrawTargetSquares
    431  49fb					      SUBROUTINE
    432  49fb
    433  49fb		       c6 8a		      dec	ccur
    434  49fd		       20 60 f1 	      jsr	setCursorColours
    435  4a00
    436  4a00		       c6 89		      dec	mdelay
    437  4a02		       d0 18		      bne	.exit
    438  4a04		       a9 01		      lda	#1
    439  4a06		       85 89		      sta	mdelay	; once triggered, runs always
    440  4a08
    441  4a08		       a5 92		      lda	aiMoveIndex
    442  4a0a		       10 05		      bpl	.valid
    443  4a0c		       20 4c fe 	      jsr	SAFE_getMoveIndex
    444  4a0f		       85 92		      sta	aiMoveIndex
    445  4a11
    446  4a11		       20 58 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    447  4a14		       a5 92		      lda	aiMoveIndex
    448  4a16		       10 04		      bpl	.exit	; still drawing in this phase
    449  4a18
    450  4a18							;lda INTIM
    451  4a18							;cmp #10
    452  4a18							;bcs .valid
    453  4a18
      0  4a18					      PHASE	AI_SelectStartSquare
      1  4a18		       a9 01		      lda	#AI_SelectStartSquare
      2  4a1a		       85 8c		      sta	aiPhase
    455  4a1c
    456  4a1c		       60	   .exit      rts
    457  4a1d
    458  4a1d
    459  4a1d							;---------------------------------------------------------------------------------------------------
    460  4a1d
    461  4a1d		       00 08	   CAP_SPEED  =	8
    462  4a1d
      0  4a1d					      DEF	aiShowMoveCaptures
      1  4a1d				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  4a1d
      3  4a1d				   aiShowMoveCaptures
    464  4a1d					      SUBROUTINE
    465  4a1d
    466  4a1d							; draw/undraw ALL captured pieces
    467  4a1d							; we should do this an even number of times so that pieces don't disappEOR
    468  4a1d
    469  4a1d		       c6 8a		      dec	ccur
    470  4a1f		       20 60 f1 	      jsr	setCursorColours
    471  4a22
    472  4a22		       c6 89		      dec	mdelay	; flash speed UNVARYING despite draw happening
    473  4a24
    474  4a24		       a5 92		      lda	aiMoveIndex
    475  4a26		       10 05		      bpl	.valid	; guaranteed -1 on 1st call
    476  4a28		       20 4c fe 	      jsr	SAFE_getMoveIndex
    477  4a2b		       85 92		      sta	aiMoveIndex
    478  4a2d				   .valid
    479  4a2d
    480  4a2d		       20 c2 fe 	      jsr	SAFE_showMoveCaptures
    481  4a30		       a5 92		      lda	aiMoveIndex
    482  4a32		       10 06		      bpl	.exit
    483  4a34
    484  4a34		       e6 93		      inc	aiFlashPhase
    485  4a36
      0  4a36					      PHASE	AI_SlowFlash
      1  4a36		       a9 05		      lda	#AI_SlowFlash
      2  4a38		       85 8c		      sta	aiPhase
    487  4a3a
    488  4a3a		       60	   .exit      rts
    489  4a3b
    490  4a3b
    491  4a3b							;---------------------------------------------------------------------------------------------------
    492  4a3b
      0  4a3b					      DEF	aiSlowFlash
      1  4a3b				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  4a3b
      3  4a3b				   aiSlowFlash
    494  4a3b					      SUBROUTINE
    495  4a3b
    496  4a3b							; Joystick button is held down, so we're displaying the available moves
    497  4a3b							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    498  4a3b
    499  4a3b		       c6 8a		      dec	ccur
    500  4a3d		       20 60 f1 	      jsr	setCursorColours
    501  4a40
    502  4a40		       a5 93		      lda	aiFlashPhase
    503  4a42		       29 01		      and	#1
    504  4a44		       d0 04		      bne	.notEven	; only exit after even # EOR-draws
    505  4a46
    506  4a46		       a5 4c		      lda	INPT4
    507  4a48		       30 0d		      bmi	.butpress	; exit on button release
    508  4a4a
    509  4a4a				   .notEven
    510  4a4a
    511  4a4a							; Wait for delay to expire then back and flash 'em again
    512  4a4a
    513  4a4a		       c6 89		      dec	mdelay
    514  4a4c		       10 08		      bpl	.slowWait
    515  4a4e
    516  4a4e		       a9 08		      lda	#CAP_SPEED
    517  4a50		       85 89		      sta	mdelay
    518  4a52
      0  4a52					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  4a52		       a9 04		      lda	#AI_ShowMoveCaptures
      2  4a54		       85 8c		      sta	aiPhase
    520  4a56
    521  4a56		       60	   .slowWait  rts
    522  4a57
    523  4a57
    524  4a57		       a9 01	   .butpress  lda	#1
    525  4a59		       85 89		      sta	mdelay
    526  4a5b
      0  4a5b					      PHASE	AI_DrawTargetSquares
      1  4a5b		       a9 06		      lda	#AI_DrawTargetSquares
      2  4a5d		       85 8c		      sta	aiPhase
    528  4a5f		       60		      rts
    529  4a60
    530  4a60
    531  4a60							;---------------------------------------------------------------------------------------------------
    532  4a60
      0  4a60					      DEF	moveCursor
      1  4a60				   BANK_moveCursor SET	_CURRENT_BANK
      2  4a60
      3  4a60				   moveCursor
    534  4a60					      SUBROUTINE
    535  4a60
    536  4a60							; Part (a) move cursor around the board waiting for joystick press
    537  4a60
    538  4a60
    539  4a60		       ad 80 02 	      lda	SWCHA
    540  4a63		       4a		      lsr
    541  4a64		       4a		      lsr
    542  4a65		       4a		      lsr
    543  4a66		       4a		      lsr
    544  4a67		       a8		      tay
    545  4a68
    546  4a68		       c9 0f		      cmp	#15
    547  4a6a		       f0 24		      beq	.cursor	; nothing pressed - skip delays
    548  4a6c
    549  4a6c		       c6 89		      dec	mdelay
    550  4a6e		       10 27		      bpl	.delaym
    551  4a70
    552  4a70
    553  4a70		       18		      clc
    554  4a71		       a5 87		      lda	highlight_row
    555  4a73		       79 82 f1 	      adc	JoyMoveY,y
    556  4a76		       c9 08		      cmp	#$8
    557  4a78		       b0 02		      bcs	.abandon
    558  4a7a		       85 87		      sta	highlight_row
    559  4a7c				   .abandon
    560  4a7c		       18		      clc
    561  4a7d		       a5 88		      lda	highlight_col
    562  4a7f		       79 72 f1 	      adc	JoyMoveX,y
    563  4a82		       c9 08		      cmp	#$8
    564  4a84		       b0 02		      bcs	.abandon2
    565  4a86		       85 88		      sta	highlight_col
    566  4a88				   .abandon2
    567  4a88
    568  4a88		       a9 08		      lda	#CURSOR_MOVE_SPEED
    569  4a8a		       85 89		      sta	mdelay
    570  4a8c		       20 44 f1 	      jsr	setCursorPriority
    571  4a8f		       60		      rts
    572  4a90
    573  4a90
    574  4a90		       a9 00	   .cursor    lda	#0
    575  4a92		       85 89		      sta	mdelay
    576  4a94		       20 44 f1 	      jsr	setCursorPriority
    577  4a97
    578  4a97		       60	   .delaym    rts
    579  4a98
    580  4a98
    581  4a98							;---------------------------------------------------------------------------------------------------
    582  4a98
      0  4a98					      DEF	FlashPiece
      1  4a98				   BANK_FlashPiece SET	_CURRENT_BANK
      2  4a98
      3  4a98				   FlashPiece
    584  4a98					      SUBROUTINE
    585  4a98
    586  4a98							; Flash the selected piece
    587  4a98
    588  4a98		       c6 8d		      dec	aiFlashDelay
    589  4a9a		       d0 09		      bne	.noFlashAi
    590  4a9c
    591  4a9c		       e6 93		      inc	aiFlashPhase
    592  4a9e
    593  4a9e		       a9 0a		      lda	#10
    594  4aa0		       85 8d		      sta	aiFlashDelay
    595  4aa2
    596  4aa2		       20 e5 fd 	      jsr	SAFE_CopySinglePiece
    597  4aa5
    598  4aa5		       60	   .noFlashAi rts
    599  4aa6
    600  4aa6							;---------------------------------------------------------------------------------------------------
    601  4aa6
      0  4aa6					      DEF	aiSelectDestinationSquare
      1  4aa6				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  4aa6
      3  4aa6				   aiSelectDestinationSquare
    603  4aa6					      SUBROUTINE
    604  4aa6
    605  4aa6							; Piece is selected and now we're looking for a button press on a destination square
    606  4aa6							; we flash the piece on-and-off while we're doing that
    607  4aa6
    608  4aa6		       20 98 f2 	      jsr	FlashPiece
    609  4aa9		       20 60 f2 	      jsr	moveCursor
    610  4aac		       20 84 fd 	      jsr	SAFE_IsValidMoveToSquare
    611  4aaf		       20 60 f1 	      jsr	setCursorColours
    612  4ab2
    613  4ab2							; y = valid square
    614  4ab2
    615  4ab2		       a5 4c		      lda	INPT4
    616  4ab4		       30 27		      bmi	.noButton
    617  4ab6
    618  4ab6		       a5 8f		      lda	aiToSquare
    619  4ab8		       c5 8e		      cmp	aiFromSquare	; is to==from?  that's a cancelllation
    620  4aba		       f0 0d		      beq	.cancel
    621  4abc
    622  4abc		       c0 ff		      cpy	#-1
    623  4abe		       f0 1d		      beq	.noButton	; not a valid square
    624  4ac0
    625  4ac0		       a5 93		      lda	aiFlashPhase
    626  4ac2		       29 01		      and	#1
    627  4ac4		       f0 13		      beq	.done
    628  4ac6		       85 8d		      sta	aiFlashDelay	; EOR-phase incorrect - force quick fix to allow next-frame button detect
    629  4ac8		       60		      rts
    630  4ac9
    631  4ac9				   .cancel
    632  4ac9
    633  4ac9		       a5 93		      lda	aiFlashPhase
    634  4acb		       29 01		      and	#1
    635  4acd		       f0 05		      beq	.doCancel
    636  4acf
    637  4acf							; EOR-phase incorrect - force quick fix to allow next-frame button detect
    638  4acf
    639  4acf		       a9 01		      lda	#1
    640  4ad1		       85 8d		      sta	aiFlashDelay
    641  4ad3		       60		      rts
    642  4ad4
    643  4ad4
      0  4ad4				   .doCancel  PHASE	AI_ReselectDebounce
      1  4ad4		       a9 0a		      lda	#AI_ReselectDebounce
      2  4ad6		       85 8c		      sta	aiPhase
    645  4ad8		       60		      rts
    646  4ad9
      0  4ad9				   .done      PHASE	AI_Quiescent	; destination selected!
      1  4ad9		       a9 08		      lda	#AI_Quiescent
      2  4adb		       85 8c		      sta	aiPhase
    648  4add		       60	   .noButton  rts
    649  4ade
    650  4ade
    651  4ade							;---------------------------------------------------------------------------------------------------
    652  4ade
      0  4ade					      DEF	aiReselectDebounce
      1  4ade				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  4ade
      3  4ade				   aiReselectDebounce
    654  4ade					      SUBROUTINE
    655  4ade
    656  4ade							; We've just cancelled the move. Wait for the button to be released
    657  4ade							; and then go back to selecting a piece to move
    658  4ade
    659  4ade		       a5 4c		      lda	INPT4
    660  4ae0		       10 04		      bpl	.exit	; button still pressed, so wait
    661  4ae2
      0  4ae2					      PHASE	AI_SelectStartSquare
      1  4ae2		       a9 01		      lda	#AI_SelectStartSquare
      2  4ae4		       85 8c		      sta	aiPhase
    663  4ae6		       60	   .exit      rts
    664  4ae7
    665  4ae7							;---------------------------------------------------------------------------------------------------
    666  4ae7
      0  4ae7					      DEF	aiQuiescent
      1  4ae7				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  4ae7
      3  4ae7				   aiQuiescent
    668  4ae7					      SUBROUTINE
    669  4ae7
    670  4ae7		       a9 ff		      lda	#-1
    671  4ae9		       85 87		      sta	highlight_row	;??? piece move error when removed...???!
    672  4aeb
    673  4aeb		       a5 8e		      lda	aiFromSquare
    674  4aed		       85 9c		      sta	fromSquare
    675  4aef		       a5 8f		      lda	aiToSquare
    676  4af1		       85 9e		      sta	toSquare
    677  4af3
    678  4af3		       a5 90		      lda	aiFromSquareX12
    679  4af5		       85 85		      sta	fromX12
    680  4af7		       a5 91		      lda	aiToSquareX12
    681  4af9		       85 86		      sta	toX12
    682  4afb
    683  4afb		       20 78 fd 	      jsr	SAFE_GetPiece
    684  4afe
    685  4afe		       a2 00		      ldx	#0
    686  4b00		       a5 a2		      lda	aiPiece
    687  4b02		       29 60		      and	#FLAG_ENPASSANT|FLAG_MOVED
    688  4b04		       c9 20		      cmp	#FLAG_ENPASSANT
    689  4b06		       d0 02		      bne	.noep	; HAS moved, or not en-passant
    690  4b08		       a6 86		      ldx	toX12	; this IS an en-passantable opening, so record the square
    691  4b0a		       86 97	   .noep      stx	enPassantPawn	; capturable square for en-passant move
    692  4b0c
    693  4b0c
    694  4b0c		       a5 a2		      lda	aiPiece
    695  4b0e		       29 0f		      and	#PIECE_MASK	; TODO << crashes stuff
    696  4b10		       85 9d		      sta	fromPiece
    697  4b12							;ora #FLAG_MOVED		 ; for K/R prevents usage in castling
    698  4b12							;sta toPiece
    699  4b12
    700  4b12		       a4 85		      ldy	fromX12
    701  4b14		       20 46 fd 	      jsr	SAFE_GetPieceFromBoard
    702  4b17
    703  4b17		       45 9d		      eor	fromPiece
    704  4b19		       29 0f		      and	#PIECE_MASK	; if not the same piece board/movelist...
    705  4b1b		       d0 05		      bne	.promote	; promote a pawn
    706  4b1d
      0  4b1d					      PHASE	AI_FB3
      1  4b1d		       a9 15		      lda	#AI_FB3
      2  4b1f		       85 8c		      sta	aiPhase
    708  4b21		       60		      rts
    709  4b22
      0  4b22				   .promote   PHASE	AI_PromotePawnStart
      1  4b22		       a9 1f		      lda	#AI_PromotePawnStart
      2  4b24		       85 8c		      sta	aiPhase
    711  4b26		       60		      rts
    712  4b27
    713  4b27							;---------------------------------------------------------------------------------------------------
    714  4b27
      0  4b27					      DEF	aiHalt
      1  4b27				   BANK_aiHalt SET	_CURRENT_BANK
      2  4b27
      3  4b27				   aiHalt
    716  4b27					      SUBROUTINE
    717  4b27
    718  4b27							; Effectively halt at this point until the other state machine resets the AI state machine
    719  4b27
    720  4b27		       60		      rts
    721  4b28
    722  4b28							;---------------------------------------------------------------------------------------------------
    723  4b28
      0  4b28					      DEF	aiPromotePawnStart
      1  4b28				   BANK_aiPromotePawnStart SET	_CURRENT_BANK
      2  4b28
      3  4b28				   aiPromotePawnStart
    725  4b28					      SUBROUTINE
    726  4b28
    727  4b28		       a9 00		      lda	#0
    728  4b2a		       85 93		      sta	aiFlashPhase
    729  4b2c		       85 8d		      sta	aiFlashDelay
    730  4b2e
    731  4b2e		       a4 8f		      ldy	aiToSquare
    732  4b30		       84 80		      sty	drawPieceNumber
    733  4b32
    734  4b32		       20 de fd 	      jsr	SAFE_PromoteStart
    735  4b35							;		      jsr SAFE_CopySinglePiece		  ; remove existing piece if capture
    736  4b35
    737  4b35				   .nopiece
      0  4b35					      PHASE	AI_RollPromotionPiece
      1  4b35		       a9 20		      lda	#AI_RollPromotionPiece
      2  4b37		       85 8c		      sta	aiPhase
    739  4b39		       60		      rts
    740  4b3a
    741  4b3a
    742  4b3a							;---------------------------------------------------------------------------------------------------
    743  4b3a
      0  4b3a					      DEF	aiRollPromotionPiece
      1  4b3a				   BANK_aiRollPromotionPiece SET	_CURRENT_BANK
      2  4b3a
      3  4b3a				   aiRollPromotionPiece
    745  4b3a					      SUBROUTINE
    746  4b3a
    747  4b3a							; Flash the '?' and wait for an UDLR move
    748  4b3a
    749  4b3a		       ad 80 02 	      lda	SWCHA
    750  4b3d		       29 f0		      and	#$F0
    751  4b3f		       c9 f0		      cmp	#$F0
    752  4b41		       f0 0a		      beq	.nojoy
    753  4b43
    754  4b43		       a9 00		      lda	#0
    755  4b45		       85 8d		      sta	aiFlashDelay
    756  4b47
    757  4b47		       a5 93		      lda	aiFlashPhase
    758  4b49		       29 01		      and	#1
    759  4b4b		       f0 10		      beq	.even
    760  4b4d
    761  4b4d		       c6 8d	   .nojoy     dec	aiFlashDelay
    762  4b4f		       10 0b		      bpl	.exit
    763  4b51
    764  4b51		       a9 0a		      lda	#10
    765  4b53		       85 8d		      sta	aiFlashDelay
    766  4b55
    767  4b55		       a2 20		      ldx	#INDEX_WHITE_PROMOTE_on_WHITE_SQUARE_0
    768  4b57		       20 96 fe 	      jsr	SAFE_showPromoteOptions
    769  4b5a
    770  4b5a		       e6 93		      inc	aiFlashPhase
    771  4b5c
    772  4b5c		       60	   .exit      rts
    773  4b5d
    774  4b5d				   .even
    775  4b5d		       a9 03		      lda	#3	; QUEEN
    776  4b5f		       85 a2		      sta	aiPiece	; cycles as index to NBRQ
    777  4b61
    778  4b61		       a9 00		      lda	#0
    779  4b63		       85 8d		      sta	aiFlashDelay
    780  4b65
    781  4b65		       e6 93		      inc	aiFlashPhase
    782  4b67
    783  4b67		       a2 14		      ldx	#INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0	;TODO: fix for colour
    784  4b69		       20 96 fe 	      jsr	SAFE_showPromoteOptions
    785  4b6c
      0  4b6c					      PHASE	AI_ChooseDebounce
      1  4b6c		       a9 22		      lda	#AI_ChooseDebounce
      2  4b6e		       85 8c		      sta	aiPhase
    787  4b70		       60		      rts
    788  4b71
    789  4b71							;---------------------------------------------------------------------------------------------------
    790  4b71
      0  4b71					      DEF	aiChoosePromotePiece
      1  4b71				   BANK_aiChoosePromotePiece SET	_CURRENT_BANK
      2  4b71
      3  4b71				   aiChoosePromotePiece
    792  4b71					      SUBROUTINE
    793  4b71
    794  4b71
    795  4b71							; Question-mark phase has exited via joystick direction
    796  4b71							; Now we cycle through the selectable pieces
    797  4b71
    798  4b71
    799  4b71		       a5 4c		      lda	INPT4
    800  4b73		       30 0a		      bmi	.nobut	; no press
    801  4b75
    802  4b75							; button pressed but make sure phase is correct for exit
    803  4b75
    804  4b75		       a9 00		      lda	#0
    805  4b77		       85 8d		      sta	aiFlashDelay
    806  4b79
    807  4b79		       a5 93		      lda	aiFlashPhase
    808  4b7b		       29 01		      and	#1
    809  4b7d		       f0 39		      beq	.chosen	; button pressed --> selection made
    810  4b7f
    811  4b7f				   .nobut
    812  4b7f
    813  4b7f		       ad 80 02 	      lda	SWCHA
    814  4b82		       29 f0		      and	#$F0
    815  4b84		       c9 f0		      cmp	#$F0
    816  4b86		       f0 1d		      beq	.odd	; no direction pressed
    817  4b88
    818  4b88		       4a		      lsr
    819  4b89		       4a		      lsr
    820  4b8a		       4a		      lsr
    821  4b8b		       4a		      lsr
    822  4b8c		       a8		      tay
    823  4b8d
    824  4b8d							; joystick but make sure phase is correct
    825  4b8d
    826  4b8d		       a9 00		      lda	#0
    827  4b8f		       85 8d		      sta	aiFlashDelay
    828  4b91
    829  4b91		       a5 93		      lda	aiFlashPhase
    830  4b93		       29 01		      and	#1
    831  4b95		       d0 0e		      bne	.odd	; must wait until piece undrawn
    832  4b97
    833  4b97							; cycle to the next promotable piece (N/B/R/Q)
    834  4b97							; TODO; use joy table for mod instead of just incrementing all the time
    835  4b97
    836  4b97		       18		      clc
    837  4b98		       a5 a2		      lda	aiPiece
    838  4b9a		       79 92 f1 	      adc	JoyCombined,y
    839  4b9d		       29 03		      and	#3
    840  4b9f		       85 a2		      sta	aiPiece
    841  4ba1
      0  4ba1					      PHASE	AI_ChooseDebounce	; wait for release
      1  4ba1		       a9 22		      lda	#AI_ChooseDebounce
      2  4ba3		       85 8c		      sta	aiPhase
    843  4ba5
    844  4ba5		       c6 8d	   .odd       dec	aiFlashDelay
    845  4ba7		       10 0e		      bpl	.exit
    846  4ba9
    847  4ba9		       a9 0a	   .force     lda	#10
    848  4bab		       85 8d		      sta	aiFlashDelay
    849  4bad
    850  4bad		       e6 93		      inc	aiFlashPhase
    851  4baf
    852  4baf		       a4 a2		      ldy	aiPiece
    853  4bb1		       be ca f3 	      ldx	.promotePiece,y
    854  4bb4		       20 96 fe 	      jsr	SAFE_showPromoteOptions
    855  4bb7
    856  4bb7		       60	   .exit      rts
    857  4bb8
    858  4bb8
    859  4bb8				   .chosen
    860  4bb8		       a5 a2		      lda	aiPiece
    861  4bba		       29 0f		      and	#PIECE_MASK
    862  4bbc		       aa		      tax
    863  4bbd
    864  4bbd		       bd ce f3 	      lda	.promoteType,x
    865  4bc0		       85 9d		      sta	fromPiece
    866  4bc2
    867  4bc2		       20 de fd 	      jsr	SAFE_PromoteStart
    868  4bc5
    869  4bc5							;		      jsr SAFE_CopySinglePiece		  ; restore existing piece
    870  4bc5
      0  4bc5					      PHASE	AI_FB3
      1  4bc5		       a9 15		      lda	#AI_FB3
      2  4bc7		       85 8c		      sta	aiPhase
    872  4bc9		       60		      rts
    873  4bca
      0  4bca					      OPTIONAL_PAGEBREAK	.promotePiece, 4
     10  4bca					      LIST	ON
    875  4bca		       08	   .promotePiece .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    876  4bcb		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    877  4bcc		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    878  4bcd		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    879  4bce
      0  4bce					      OPTIONAL_PAGEBREAK	.promoteType, 4
     10  4bce					      LIST	ON
    881  4bce		       03 04 05 06 .promoteType .byte.b	KNIGHT, BISHOP, ROOK, QUEEN
    882  4bd2
    883  4bd2							;---------------------------------------------------------------------------------------------------
    884  4bd2
      0  4bd2					      DEF	aiChooseDebounce
      1  4bd2				   BANK_aiChooseDebounce SET	_CURRENT_BANK
      2  4bd2
      3  4bd2				   aiChooseDebounce
    886  4bd2					      SUBROUTINE
    887  4bd2
    888  4bd2							; We've changed promotion piece, but wait for joystick to be released
    889  4bd2
    890  4bd2		       ad 80 02 	      lda	SWCHA
    891  4bd5		       29 f0		      and	#$F0
    892  4bd7		       c9 f0		      cmp	#$F0
    893  4bd9		       d0 08		      bne	.exit	; wait while joystick still pressed
    894  4bdb
    895  4bdb		       a9 32		      lda	#50
    896  4bdd		       85 8d		      sta	aiFlashDelay
    897  4bdf
      0  4bdf					      PHASE	AI_ChoosePromotePiece
      1  4bdf		       a9 21		      lda	#AI_ChoosePromotePiece
      2  4be1		       85 8c		      sta	aiPhase
    899  4be3		       60	   .exit      rts
    900  4be4
    901  4be4							;---------------------------------------------------------------------------------------------------
    902  4be4
    903  4c00		       00 00 00 00*	      align	256
      0  4c00					      DEF	PositionSprites
      1  4c00				   BANK_PositionSprites SET	_CURRENT_BANK
      2  4c00
      3  4c00				   PositionSprites
    905  4c00					      SUBROUTINE
    906  4c00
    907  4c00		       a4 88		      ldy	highlight_col
    908  4c02
    909  4c02		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    910  4c04
    911  4c04		       b9 28 f4 	      lda	colToPixel,y
    912  4c07
    913  4c07		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    914  4c08		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    915  4c0a		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    916  4c0c
    917  4c0c		       a8		      tay
    918  4c0d		       b9 28 f3 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    919  4c10		       85 60		      sta	HMP0
    920  4c12		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    921  4c14
    922  4c14		       85 42		      sta	WSYNC
    923  4c16		       85 6a		      sta	HMOVE
    924  4c18
    925  4c18		       60		      rts
    926  4c19
    927  4c19							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    928  4c19							; fine adjustment value. This table is on a page boundary to guarantee the processor
    929  4c19							; will cross a page boundary and waste a cycle in order to be at the precise position
    930  4c19							; for a RESP0,x write
    931  4c19
    932  4c19
    933  4c19							;	      align 256
    934  4c19
    935  4c19				   fineAdjustBegin
    936  4c19
    937  4c19		       70		      DC.B	%01110000	; Left 7
    938  4c1a		       60		      DC.B	%01100000	; Left 6
    939  4c1b		       50		      DC.B	%01010000	; Left 5
    940  4c1c		       40		      DC.B	%01000000	; Left 4
    941  4c1d		       30		      DC.B	%00110000	; Left 3
    942  4c1e		       20		      DC.B	%00100000	; Left 2
    943  4c1f		       10		      DC.B	%00010000	; Left 1
    944  4c20		       00		      DC.B	%00000000	; No movement.
    945  4c21		       f0		      DC.B	%11110000	; Right 1
    946  4c22		       e0		      DC.B	%11100000	; Right 2
    947  4c23		       d0		      DC.B	%11010000	; Right 3
    948  4c24		       c0		      DC.B	%11000000	; Right 4
    949  4c25		       b0		      DC.B	%10110000	; Right 5
    950  4c26		       a0		      DC.B	%10100000	; Right 6
    951  4c27		       90		      DC.B	%10010000	; Right 7
    952  4c28
    953  4c28		       f3 28	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    954  4c28
    955  4c28
      0  4c28					      OPTIONAL_PAGEBREAK	"colToPixel", 8
     10  4c28					      LIST	ON
    957  4c28		       00 14 28 3c*colToPixel .byte.b	0,20,40,60,80,100,120,140
    958  4c30
      0  4c30					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  4c30		       04 30	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $430 , FREE= $3d0
      2  4c30					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4c30				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4c30				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4c30				  -	      ERR
      6  4c30					      endif
    960  4c30
    961  4c30
    962  4c30							; EOF
------- FILE ./chess.asm
------- FILE BANK_TEXT_OVERLAYS.asm LEVEL 2 PASS 2
      0  4c30					      include	"BANK_TEXT_OVERLAYS.asm"
      0  4c30					      NEWBANK	TEXT_OVERLAYS
      1  5002 ????				      SEG	TEXT_OVERLAYS
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   TEXT_OVERLAYS SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	TEXT_OVERLAYS
      2  5000
      3  5000
      4  5000
      5  5000
      6  5000				   sample
      7  5000		       48 aa		      .byte.b	72,%10101010
      8  5002
      9  5002
     10  5002
     11  5002							;EOF
------- FILE ./chess.asm
    371  5002
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  5002					      include	"titleScreen.asm"
      0  5002					      NEWBANK	TITLESCREEN
      1  5fc0 ????				      SEG	TITLESCREEN
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   TITLESCREEN SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	TITLESCREEN
      2  5800
      3  5800				   OverscanTime2
      4  5800		       1a 1a		      .byte.b	26, 26
      5  5802		       20 20		      .byte.b	32, 32
      6  5804
      7  5804				   colvec
      8  5804		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  5808
     10  5808
     11  5808		       32 32	   VBlankTime .byte.b	50,50
     12  580a
      0  580a					      DEF	TitleScreen
      1  580a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  580a
      3  580a				   TitleScreen
     14  580a
     15  580a							; Start of new frame
     16  580a
     17  580a							; Start of vertical blank processing
     18  580a
     19  580a				   TitleSequence
     20  580a
     21  580a		       a9 00		      lda	#%00000000
     22  580c		       85 4a		      sta	CTRLPF
     23  580e		       85 49		      sta	COLUBK
     24  5810
     25  5810		       a2 00		      ldx	#0	;Platform
     26  5812		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  5814		       85 a3		      sta	__colour_table
     28  5816		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     29  5818		       85 a4		      sta	__colour_table+1
     30  581a
     31  581a							;		  sta rndHi
     32  581a							;		  sta rnd
     33  581a
     34  581a
     35  581a				  -	      if	0
     36  581a				  -	      lda	#0
     37  581a				  -	      sta	digit
     38  581a				  -	      lda	#$10
     39  581a				  -	      sta	digit+1
     40  581a				  -	      lda	#$20
     41  581a				  -	      sta	digit+2
     42  581a					      endif
     43  581a
     44  581a
     45  581a
     46  581a
      0  581a					      RESYNC
      1  581a
      2  581a		       a9 02		      lda	#%10
      3  581c		       85 41		      sta	VBLANK
      4  581e
      5  581e		       a2 08		      ldx	#8
      6  5820				   .loopResync
      0  5820					      VERTICAL_SYNC
      1  5820		       a9 0e		      lda	#%1110
      2  5822		       85 42	   .VSLP1     sta	WSYNC
      3  5824		       85 40		      sta	VSYNC
      4  5826		       4a		      lsr
      5  5827		       d0 f9		      bne	.VSLP1
      8  5829
      9  5829		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  582b		       a5 a1		      lda	Platform
     11  582d		       49 02		      eor	#PAL_50
     12  582f		       d0 02		      bne	.ntsc
     13  5831		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  5833				   .ntsc
     15  5833				   .loopWait
     16  5833		       85 42		      sta	WSYNC
     17  5835		       85 42		      sta	WSYNC
     18  5837		       88		      dey
     19  5838		       d0 f9		      bne	.loopWait
     20  583a		       ca		      dex
     21  583b		       d0 e3		      bne	.loopResync
     48  583d
     49  583d				   RestartFrame0
     50  583d
     51  583d				  -	      if	0
     52  583d				  -	      ldx	#2
     53  583d				  -rollcols   clc
     54  583d				  -	      lda	digit+2
     55  583d				  -	      adc	#$10
     56  583d				  -	      sta	digit+2
     57  583d				  -	      bcc	finxc
     58  583d				  -	      dex
     59  583d				  -	      bpl	rollcols
     60  583d				  -finxc
     61  583d					      endif
     62  583d
      0  583d					      DEF	RestartFrame
      1  583d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  583d
      3  583d				   RestartFrame
     64  583d		       a9 00		      LDA	#0
     65  583f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  5841		       85 42	   .loopVSync2 sta	WSYNC
     67  5843		       85 40		      sta	VSYNC
     68  5845		       4a		      lsr
     69  5846		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  5848
     71  5848							;------------------------------------------------------------------
     72  5848
     73  5848		       a6 a1		      ldx	Platform
     74  584a		       bc 08 f0 	      ldy	VBlankTime,x
     75  584d		       8c 96 02 	      sty	TIM64T
     76  5850
     77  5850
     78  5850				  -	      if	0
     79  5850				  -	      lda	SWCHB
     80  5850				  -	      rol
     81  5850				  -	      rol
     82  5850				  -	      rol
     83  5850				  -	      and	#%11
     84  5850				  -	      eor	#PAL
     85  5850				  -	      cmp	Platform
     86  5850				  -	      beq	platOK
     87  5850				  -	      sta	Platform
     88  5850				  -	      jmp	TitleSequence
     89  5850				  -platOK
     90  5850					      endif
     91  5850
     92  5850		       e6 81	   k2	      inc	rnd
     93  5852		       f0 fc		      beq	k2
     94  5854
     95  5854
     96  5854		       85 42	   VerticalBlank sta	WSYNC
     97  5856		       ad 84 02 	      lda	INTIM
     98  5859		       d0 f9		      bne	VerticalBlank
     99  585b		       85 41		      sta	VBLANK
    100  585d
    101  585d							;sta COLUBK
    102  585d
    103  585d							;------------------------------------------------------------------
    104  585d
    105  585d							; Do X scanlines of color-changing (our picture)
    106  585d
    107  585d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  585f		       a2 03	   SokoLogo   ldx	#3
    109  5861		       b1 a3	   triplet    lda	(__colour_table),y
    110  5863							;    eor digit-1,x
    111  5863		       85 42		      sta	WSYNC
    112  5865		       85 48		      sta	COLUPF	; 3
    113  5867
    114  5867		       b9 b0 f2 	      lda	COL_0,y	; 5
    115  586a		       85 4d		      sta	PF0	; 3   @11
    116  586c		       b9 88 f3 	      lda	COL_1,y	; 5
    117  586f		       85 4e		      sta	PF1	; 3   @19
    118  5871		       b9 60 f4 	      lda	COL_2,y	; 5
    119  5874		       85 4f		      sta	PF2	; 3   @27
    120  5876
    121  5876		       b9 38 f5 	      lda	COL_3,y	; 5
    122  5879		       85 4d		      sta	PF0	; 3   @35
      0  587b					      SLEEP	2	; @37
      1  587b				   .CYCLES    SET	2
      2  587b
      3  587b				  -	      IF	.CYCLES < 2
      4  587b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  587b				  -	      ERR
      6  587b					      ENDIF
      7  587b
      8  587b				  -	      IF	.CYCLES & 1
      9  587b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  587b				  -	      nop	0
     11  587b				  -	      ELSE
     12  587b				  -	      bit	VSYNC
     13  587b				  -	      ENDIF
     14  587b				  -.CYCLES    SET	.CYCLES - 3
     15  587b					      ENDIF
     16  587b
     17  587b					      REPEAT	.CYCLES / 2
     18  587b		       ea		      nop
     19  587c					      REPEND
    124  587c		       b9 10 f6 	      lda	COL_4,y	; 5
    125  587f		       85 4e		      sta	PF1	; 3   @45
      0  5881					      SLEEP	3	; @45
      1  5881				   .CYCLES    SET	3
      2  5881
      3  5881				  -	      IF	.CYCLES < 2
      4  5881				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  5881				  -	      ERR
      6  5881					      ENDIF
      7  5881
      8  5881					      IF	.CYCLES & 1
      9  5881					      IFNCONST	NO_ILLEGAL_OPCODES
     10  5881		       04 00		      nop	0
     11  5883				  -	      ELSE
     12  5883				  -	      bit	VSYNC
     13  5883					      ENDIF
     14  5883				   .CYCLES    SET	.CYCLES - 3
     15  5883					      ENDIF
     16  5883
     17  5883				  -	      REPEAT	.CYCLES / 2
     18  5883				  -	      nop
     19  5883					      REPEND
    127  5883		       b9 e8 f6 	      lda	COL_5,y	; 5
    128  5886		       85 4f		      sta	PF2	; 3
    129  5888
    130  5888		       88		      dey		; 2
    131  5889		       ca		      dex		; 2
    132  588a		       d0 d5		      bne	triplet	; 2(3)
    133  588c
    134  588c		       c0 ff		      cpy	#-1	; 2
    135  588e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  5890
    137  5890							;lda #0
    138  5890							;sta PF0
    139  5890							;sta PF1
    140  5890							;sta PF2
    141  5890
    142  5890		       a6 a1		      ldx	Platform
    143  5892		       bd 00 f0 	      lda	OverscanTime2,x
    144  5895		       8d 96 02 	      sta	TIM64T
    145  5898
    146  5898				  -	      if	0
    147  5898				  -	      sta	WSYNC
    148  5898				  -	      sta	WSYNC
    149  5898				  -	      sta	WSYNC
    150  5898				  -	      sta	WSYNC
    151  5898				  -	      sta	WSYNC
    152  5898				  -	      SLEEP	8
    153  5898				  -	      jsr	SokoScreen
    154  5898				  -
    155  5898				  -	      lda	#0
    156  5898				  -	      sta	BoardScrollX
    157  5898				  -	      sta	BoardScrollY
    158  5898					      endif
    159  5898
    160  5898							;		ldy #63
    161  5898							;bot2		 sta WSYNC
    162  5898							;		dey
    163  5898							;		bpl bot2
    164  5898
    165  5898							;--------------------------------------------------------------------------
    166  5898
    167  5898		       a9 00		      lda	#0
    168  589a		       85 4d		      sta	PF0
    169  589c		       85 4e		      sta	PF1
    170  589e		       85 4f		      sta	PF2
    171  58a0
    172  58a0
      0  58a0					      NEXT_RANDOM
      1  58a0		       a5 81		      lda	rnd
      2  58a2		       4a		      lsr
      3  58a3		       90 02		      bcc	.skipEOR
      4  58a5		       49 fe		      eor	#RND_EOR_VAL
      5  58a7		       85 81	   .skipEOR   sta	rnd
    174  58a9
    175  58a9							; D1 VBLANK turns off beam
    176  58a9							; It needs to be turned on 37 scanlines later
    177  58a9
    178  58a9				   oscan
    179  58a9		       ad 84 02 	      lda	INTIM
    180  58ac		       d0 fb		      bne	oscan
    181  58ae
    182  58ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  58b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  58b2
    185  58b2				  -	      if	0
    186  58b2				  -	      inc	rnd
    187  58b2				  -	      bne	rdd
    188  58b2				  -	      inc	rndHi
    189  58b2				  -rdd
    190  58b2				  -
    191  58b2				  -	      dec	digitick
    192  58b2				  -	      bpl	ret2
    193  58b2				  -	      lda	#40
    194  58b2				  -	      sta	digitick
    195  58b2				  -
    196  58b2				  -	      jsr	Random
    197  58b2				  -	      and	#3
    198  58b2				  -	      beq	ret2
    199  58b2				  -	      tax
    200  58b2				  -	      jsr	Random
    201  58b2				  -	      and	#$F0
    202  58b2				  -	      sta	digit-1,x
    203  58b2				  -	      jmp	RestartFrame0
    204  58b2				  -
    205  58b2				  -ret2
    206  58b2					      endif
    207  58b2
    208  58b2
    209  58b2		       a5 4c		      lda	INPT4
    210  58b4		       10 03		      bpl	ret
    211  58b6
    212  58b6		       4c 3d f0 	      jmp	RestartFrame
    213  58b9
    214  58b9				   ret
    215  58b9		       60		      rts
    216  58ba
    217  58ba
    218  58ba
    219  58ba					      MAC	lumtable
    220  58ba							; {4} MIN LUM 1
    221  58ba							; {5} MIN LUM 2
    222  58ba							; {6} MIN LUM 3
    223  58ba
    224  58ba				   .LUM1      SET	{4}*256
    225  58ba				   .LUM2      SET	{5}*256
    226  58ba				   .LUM3      SET	{6}*256
    227  58ba
    228  58ba				   .STEP1     =	(256*({7}-{4}))/72
    229  58ba				   .STEP2     =	(256*({8}-{5}))/72
    230  58ba				   .STEP3     =	(256*({9}-{6}))/72
    231  58ba
    232  58ba					      REPEAT	72
    233  58ba					      .byte	{1}+(.LUM1/256)
    234  58ba					      .byte	{2}+(.LUM2/256)
    235  58ba					      .byte	{3}+(.LUM3/256)
    236  58ba
    237  58ba							;    ECHO {1}+(.LUM1/256)
    238  58ba							;    ECHO {2}+(.LUM1/256)
    239  58ba							;    ECHO {3}+(.LUM1/256)
    240  58ba
    241  58ba				   .LUM1      SET	.LUM1 + .STEP1
    242  58ba				   .LUM2      SET	.LUM2 + .STEP2
    243  58ba				   .LUM3      SET	.LUM3 + .STEP3
    244  58ba					      REPEND
    245  58ba					      ENDM		;{1}{2}{3} base colours
    246  58ba
    247  58ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  58ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  58ba
    250  5900		       00 00 00 00*	      align	256
    251  5900							;    ECHO "NTSC LUMS"
    252  5900				   colr_ntsc2
      0  5900					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  5900
      2  5900
      3  5900
      4  5900
      5  5900				   .LUM1      SET	$4*256
      6  5900				   .LUM2      SET	$6*256
      7  5900				   .LUM3      SET	$8*256
      8  5900
      9  5900		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  5900		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  5900		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  5900
     13  5900					      REPEAT	72
     14  5900		       44		      .byte.b	$40+(.LUM1/256)
     15  5901		       26		      .byte.b	$20+(.LUM2/256)
     16  5902		       98		      .byte.b	$90+(.LUM3/256)
     17  5903
     18  5903
     19  5903
     20  5903
     21  5903
     22  5903				   .LUM1      SET	.LUM1 + .STEP1
     23  5903				   .LUM2      SET	.LUM2 + .STEP2
     24  5903				   .LUM3      SET	.LUM3 + .STEP3
     13  5903					      REPEND
     14  5903		       44		      .byte.b	$40+(.LUM1/256)
     15  5904		       26		      .byte.b	$20+(.LUM2/256)
     16  5905		       98		      .byte.b	$90+(.LUM3/256)
     17  5906
     18  5906
     19  5906
     20  5906
     21  5906
     22  5906				   .LUM1      SET	.LUM1 + .STEP1
     23  5906				   .LUM2      SET	.LUM2 + .STEP2
     24  5906				   .LUM3      SET	.LUM3 + .STEP3
     13  5906					      REPEND
     14  5906		       44		      .byte.b	$40+(.LUM1/256)
     15  5907		       26		      .byte.b	$20+(.LUM2/256)
     16  5908		       98		      .byte.b	$90+(.LUM3/256)
     17  5909
     18  5909
     19  5909
     20  5909
     21  5909
     22  5909				   .LUM1      SET	.LUM1 + .STEP1
     23  5909				   .LUM2      SET	.LUM2 + .STEP2
     24  5909				   .LUM3      SET	.LUM3 + .STEP3
     13  5909					      REPEND
     14  5909		       44		      .byte.b	$40+(.LUM1/256)
     15  590a		       26		      .byte.b	$20+(.LUM2/256)
     16  590b		       98		      .byte.b	$90+(.LUM3/256)
     17  590c
     18  590c
     19  590c
     20  590c
     21  590c
     22  590c				   .LUM1      SET	.LUM1 + .STEP1
     23  590c				   .LUM2      SET	.LUM2 + .STEP2
     24  590c				   .LUM3      SET	.LUM3 + .STEP3
     13  590c					      REPEND
     14  590c		       44		      .byte.b	$40+(.LUM1/256)
     15  590d		       26		      .byte.b	$20+(.LUM2/256)
     16  590e		       98		      .byte.b	$90+(.LUM3/256)
     17  590f
     18  590f
     19  590f
     20  590f
     21  590f
     22  590f				   .LUM1      SET	.LUM1 + .STEP1
     23  590f				   .LUM2      SET	.LUM2 + .STEP2
     24  590f				   .LUM3      SET	.LUM3 + .STEP3
     13  590f					      REPEND
     14  590f		       44		      .byte.b	$40+(.LUM1/256)
     15  5910		       26		      .byte.b	$20+(.LUM2/256)
     16  5911		       98		      .byte.b	$90+(.LUM3/256)
     17  5912
     18  5912
     19  5912
     20  5912
     21  5912
     22  5912				   .LUM1      SET	.LUM1 + .STEP1
     23  5912				   .LUM2      SET	.LUM2 + .STEP2
     24  5912				   .LUM3      SET	.LUM3 + .STEP3
     13  5912					      REPEND
     14  5912		       44		      .byte.b	$40+(.LUM1/256)
     15  5913		       26		      .byte.b	$20+(.LUM2/256)
     16  5914		       98		      .byte.b	$90+(.LUM3/256)
     17  5915
     18  5915
     19  5915
     20  5915
     21  5915
     22  5915				   .LUM1      SET	.LUM1 + .STEP1
     23  5915				   .LUM2      SET	.LUM2 + .STEP2
     24  5915				   .LUM3      SET	.LUM3 + .STEP3
     13  5915					      REPEND
     14  5915		       44		      .byte.b	$40+(.LUM1/256)
     15  5916		       26		      .byte.b	$20+(.LUM2/256)
     16  5917		       98		      .byte.b	$90+(.LUM3/256)
     17  5918
     18  5918
     19  5918
     20  5918
     21  5918
     22  5918				   .LUM1      SET	.LUM1 + .STEP1
     23  5918				   .LUM2      SET	.LUM2 + .STEP2
     24  5918				   .LUM3      SET	.LUM3 + .STEP3
     13  5918					      REPEND
     14  5918		       44		      .byte.b	$40+(.LUM1/256)
     15  5919		       26		      .byte.b	$20+(.LUM2/256)
     16  591a		       98		      .byte.b	$90+(.LUM3/256)
     17  591b
     18  591b
     19  591b
     20  591b
     21  591b
     22  591b				   .LUM1      SET	.LUM1 + .STEP1
     23  591b				   .LUM2      SET	.LUM2 + .STEP2
     24  591b				   .LUM3      SET	.LUM3 + .STEP3
     13  591b					      REPEND
     14  591b		       44		      .byte.b	$40+(.LUM1/256)
     15  591c		       26		      .byte.b	$20+(.LUM2/256)
     16  591d		       98		      .byte.b	$90+(.LUM3/256)
     17  591e
     18  591e
     19  591e
     20  591e
     21  591e
     22  591e				   .LUM1      SET	.LUM1 + .STEP1
     23  591e				   .LUM2      SET	.LUM2 + .STEP2
     24  591e				   .LUM3      SET	.LUM3 + .STEP3
     13  591e					      REPEND
     14  591e		       44		      .byte.b	$40+(.LUM1/256)
     15  591f		       26		      .byte.b	$20+(.LUM2/256)
     16  5920		       98		      .byte.b	$90+(.LUM3/256)
     17  5921
     18  5921
     19  5921
     20  5921
     21  5921
     22  5921				   .LUM1      SET	.LUM1 + .STEP1
     23  5921				   .LUM2      SET	.LUM2 + .STEP2
     24  5921				   .LUM3      SET	.LUM3 + .STEP3
     13  5921					      REPEND
     14  5921		       44		      .byte.b	$40+(.LUM1/256)
     15  5922		       26		      .byte.b	$20+(.LUM2/256)
     16  5923		       98		      .byte.b	$90+(.LUM3/256)
     17  5924
     18  5924
     19  5924
     20  5924
     21  5924
     22  5924				   .LUM1      SET	.LUM1 + .STEP1
     23  5924				   .LUM2      SET	.LUM2 + .STEP2
     24  5924				   .LUM3      SET	.LUM3 + .STEP3
     13  5924					      REPEND
     14  5924		       44		      .byte.b	$40+(.LUM1/256)
     15  5925		       26		      .byte.b	$20+(.LUM2/256)
     16  5926		       98		      .byte.b	$90+(.LUM3/256)
     17  5927
     18  5927
     19  5927
     20  5927
     21  5927
     22  5927				   .LUM1      SET	.LUM1 + .STEP1
     23  5927				   .LUM2      SET	.LUM2 + .STEP2
     24  5927				   .LUM3      SET	.LUM3 + .STEP3
     13  5927					      REPEND
     14  5927		       44		      .byte.b	$40+(.LUM1/256)
     15  5928		       26		      .byte.b	$20+(.LUM2/256)
     16  5929		       98		      .byte.b	$90+(.LUM3/256)
     17  592a
     18  592a
     19  592a
     20  592a
     21  592a
     22  592a				   .LUM1      SET	.LUM1 + .STEP1
     23  592a				   .LUM2      SET	.LUM2 + .STEP2
     24  592a				   .LUM3      SET	.LUM3 + .STEP3
     13  592a					      REPEND
     14  592a		       44		      .byte.b	$40+(.LUM1/256)
     15  592b		       26		      .byte.b	$20+(.LUM2/256)
     16  592c		       98		      .byte.b	$90+(.LUM3/256)
     17  592d
     18  592d
     19  592d
     20  592d
     21  592d
     22  592d				   .LUM1      SET	.LUM1 + .STEP1
     23  592d				   .LUM2      SET	.LUM2 + .STEP2
     24  592d				   .LUM3      SET	.LUM3 + .STEP3
     13  592d					      REPEND
     14  592d		       44		      .byte.b	$40+(.LUM1/256)
     15  592e		       26		      .byte.b	$20+(.LUM2/256)
     16  592f		       98		      .byte.b	$90+(.LUM3/256)
     17  5930
     18  5930
     19  5930
     20  5930
     21  5930
     22  5930				   .LUM1      SET	.LUM1 + .STEP1
     23  5930				   .LUM2      SET	.LUM2 + .STEP2
     24  5930				   .LUM3      SET	.LUM3 + .STEP3
     13  5930					      REPEND
     14  5930		       44		      .byte.b	$40+(.LUM1/256)
     15  5931		       26		      .byte.b	$20+(.LUM2/256)
     16  5932		       98		      .byte.b	$90+(.LUM3/256)
     17  5933
     18  5933
     19  5933
     20  5933
     21  5933
     22  5933				   .LUM1      SET	.LUM1 + .STEP1
     23  5933				   .LUM2      SET	.LUM2 + .STEP2
     24  5933				   .LUM3      SET	.LUM3 + .STEP3
     13  5933					      REPEND
     14  5933		       44		      .byte.b	$40+(.LUM1/256)
     15  5934		       26		      .byte.b	$20+(.LUM2/256)
     16  5935		       98		      .byte.b	$90+(.LUM3/256)
     17  5936
     18  5936
     19  5936
     20  5936
     21  5936
     22  5936				   .LUM1      SET	.LUM1 + .STEP1
     23  5936				   .LUM2      SET	.LUM2 + .STEP2
     24  5936				   .LUM3      SET	.LUM3 + .STEP3
     13  5936					      REPEND
     14  5936		       44		      .byte.b	$40+(.LUM1/256)
     15  5937		       26		      .byte.b	$20+(.LUM2/256)
     16  5938		       98		      .byte.b	$90+(.LUM3/256)
     17  5939
     18  5939
     19  5939
     20  5939
     21  5939
     22  5939				   .LUM1      SET	.LUM1 + .STEP1
     23  5939				   .LUM2      SET	.LUM2 + .STEP2
     24  5939				   .LUM3      SET	.LUM3 + .STEP3
     13  5939					      REPEND
     14  5939		       44		      .byte.b	$40+(.LUM1/256)
     15  593a		       26		      .byte.b	$20+(.LUM2/256)
     16  593b		       98		      .byte.b	$90+(.LUM3/256)
     17  593c
     18  593c
     19  593c
     20  593c
     21  593c
     22  593c				   .LUM1      SET	.LUM1 + .STEP1
     23  593c				   .LUM2      SET	.LUM2 + .STEP2
     24  593c				   .LUM3      SET	.LUM3 + .STEP3
     13  593c					      REPEND
     14  593c		       44		      .byte.b	$40+(.LUM1/256)
     15  593d		       26		      .byte.b	$20+(.LUM2/256)
     16  593e		       98		      .byte.b	$90+(.LUM3/256)
     17  593f
     18  593f
     19  593f
     20  593f
     21  593f
     22  593f				   .LUM1      SET	.LUM1 + .STEP1
     23  593f				   .LUM2      SET	.LUM2 + .STEP2
     24  593f				   .LUM3      SET	.LUM3 + .STEP3
     13  593f					      REPEND
     14  593f		       44		      .byte.b	$40+(.LUM1/256)
     15  5940		       26		      .byte.b	$20+(.LUM2/256)
     16  5941		       98		      .byte.b	$90+(.LUM3/256)
     17  5942
     18  5942
     19  5942
     20  5942
     21  5942
     22  5942				   .LUM1      SET	.LUM1 + .STEP1
     23  5942				   .LUM2      SET	.LUM2 + .STEP2
     24  5942				   .LUM3      SET	.LUM3 + .STEP3
     13  5942					      REPEND
     14  5942		       44		      .byte.b	$40+(.LUM1/256)
     15  5943		       26		      .byte.b	$20+(.LUM2/256)
     16  5944		       98		      .byte.b	$90+(.LUM3/256)
     17  5945
     18  5945
     19  5945
     20  5945
     21  5945
     22  5945				   .LUM1      SET	.LUM1 + .STEP1
     23  5945				   .LUM2      SET	.LUM2 + .STEP2
     24  5945				   .LUM3      SET	.LUM3 + .STEP3
     13  5945					      REPEND
     14  5945		       44		      .byte.b	$40+(.LUM1/256)
     15  5946		       26		      .byte.b	$20+(.LUM2/256)
     16  5947		       98		      .byte.b	$90+(.LUM3/256)
     17  5948
     18  5948
     19  5948
     20  5948
     21  5948
     22  5948				   .LUM1      SET	.LUM1 + .STEP1
     23  5948				   .LUM2      SET	.LUM2 + .STEP2
     24  5948				   .LUM3      SET	.LUM3 + .STEP3
     13  5948					      REPEND
     14  5948		       44		      .byte.b	$40+(.LUM1/256)
     15  5949		       26		      .byte.b	$20+(.LUM2/256)
     16  594a		       98		      .byte.b	$90+(.LUM3/256)
     17  594b
     18  594b
     19  594b
     20  594b
     21  594b
     22  594b				   .LUM1      SET	.LUM1 + .STEP1
     23  594b				   .LUM2      SET	.LUM2 + .STEP2
     24  594b				   .LUM3      SET	.LUM3 + .STEP3
     13  594b					      REPEND
     14  594b		       44		      .byte.b	$40+(.LUM1/256)
     15  594c		       26		      .byte.b	$20+(.LUM2/256)
     16  594d		       98		      .byte.b	$90+(.LUM3/256)
     17  594e
     18  594e
     19  594e
     20  594e
     21  594e
     22  594e				   .LUM1      SET	.LUM1 + .STEP1
     23  594e				   .LUM2      SET	.LUM2 + .STEP2
     24  594e				   .LUM3      SET	.LUM3 + .STEP3
     13  594e					      REPEND
     14  594e		       44		      .byte.b	$40+(.LUM1/256)
     15  594f		       26		      .byte.b	$20+(.LUM2/256)
     16  5950		       98		      .byte.b	$90+(.LUM3/256)
     17  5951
     18  5951
     19  5951
     20  5951
     21  5951
     22  5951				   .LUM1      SET	.LUM1 + .STEP1
     23  5951				   .LUM2      SET	.LUM2 + .STEP2
     24  5951				   .LUM3      SET	.LUM3 + .STEP3
     13  5951					      REPEND
     14  5951		       44		      .byte.b	$40+(.LUM1/256)
     15  5952		       26		      .byte.b	$20+(.LUM2/256)
     16  5953		       98		      .byte.b	$90+(.LUM3/256)
     17  5954
     18  5954
     19  5954
     20  5954
     21  5954
     22  5954				   .LUM1      SET	.LUM1 + .STEP1
     23  5954				   .LUM2      SET	.LUM2 + .STEP2
     24  5954				   .LUM3      SET	.LUM3 + .STEP3
     13  5954					      REPEND
     14  5954		       44		      .byte.b	$40+(.LUM1/256)
     15  5955		       26		      .byte.b	$20+(.LUM2/256)
     16  5956		       98		      .byte.b	$90+(.LUM3/256)
     17  5957
     18  5957
     19  5957
     20  5957
     21  5957
     22  5957				   .LUM1      SET	.LUM1 + .STEP1
     23  5957				   .LUM2      SET	.LUM2 + .STEP2
     24  5957				   .LUM3      SET	.LUM3 + .STEP3
     13  5957					      REPEND
     14  5957		       44		      .byte.b	$40+(.LUM1/256)
     15  5958		       26		      .byte.b	$20+(.LUM2/256)
     16  5959		       98		      .byte.b	$90+(.LUM3/256)
     17  595a
     18  595a
     19  595a
     20  595a
     21  595a
     22  595a				   .LUM1      SET	.LUM1 + .STEP1
     23  595a				   .LUM2      SET	.LUM2 + .STEP2
     24  595a				   .LUM3      SET	.LUM3 + .STEP3
     13  595a					      REPEND
     14  595a		       44		      .byte.b	$40+(.LUM1/256)
     15  595b		       26		      .byte.b	$20+(.LUM2/256)
     16  595c		       98		      .byte.b	$90+(.LUM3/256)
     17  595d
     18  595d
     19  595d
     20  595d
     21  595d
     22  595d				   .LUM1      SET	.LUM1 + .STEP1
     23  595d				   .LUM2      SET	.LUM2 + .STEP2
     24  595d				   .LUM3      SET	.LUM3 + .STEP3
     13  595d					      REPEND
     14  595d		       44		      .byte.b	$40+(.LUM1/256)
     15  595e		       26		      .byte.b	$20+(.LUM2/256)
     16  595f		       98		      .byte.b	$90+(.LUM3/256)
     17  5960
     18  5960
     19  5960
     20  5960
     21  5960
     22  5960				   .LUM1      SET	.LUM1 + .STEP1
     23  5960				   .LUM2      SET	.LUM2 + .STEP2
     24  5960				   .LUM3      SET	.LUM3 + .STEP3
     13  5960					      REPEND
     14  5960		       44		      .byte.b	$40+(.LUM1/256)
     15  5961		       26		      .byte.b	$20+(.LUM2/256)
     16  5962		       98		      .byte.b	$90+(.LUM3/256)
     17  5963
     18  5963
     19  5963
     20  5963
     21  5963
     22  5963				   .LUM1      SET	.LUM1 + .STEP1
     23  5963				   .LUM2      SET	.LUM2 + .STEP2
     24  5963				   .LUM3      SET	.LUM3 + .STEP3
     13  5963					      REPEND
     14  5963		       44		      .byte.b	$40+(.LUM1/256)
     15  5964		       26		      .byte.b	$20+(.LUM2/256)
     16  5965		       98		      .byte.b	$90+(.LUM3/256)
     17  5966
     18  5966
     19  5966
     20  5966
     21  5966
     22  5966				   .LUM1      SET	.LUM1 + .STEP1
     23  5966				   .LUM2      SET	.LUM2 + .STEP2
     24  5966				   .LUM3      SET	.LUM3 + .STEP3
     13  5966					      REPEND
     14  5966		       44		      .byte.b	$40+(.LUM1/256)
     15  5967		       26		      .byte.b	$20+(.LUM2/256)
     16  5968		       98		      .byte.b	$90+(.LUM3/256)
     17  5969
     18  5969
     19  5969
     20  5969
     21  5969
     22  5969				   .LUM1      SET	.LUM1 + .STEP1
     23  5969				   .LUM2      SET	.LUM2 + .STEP2
     24  5969				   .LUM3      SET	.LUM3 + .STEP3
     13  5969					      REPEND
     14  5969		       44		      .byte.b	$40+(.LUM1/256)
     15  596a		       26		      .byte.b	$20+(.LUM2/256)
     16  596b		       98		      .byte.b	$90+(.LUM3/256)
     17  596c
     18  596c
     19  596c
     20  596c
     21  596c
     22  596c				   .LUM1      SET	.LUM1 + .STEP1
     23  596c				   .LUM2      SET	.LUM2 + .STEP2
     24  596c				   .LUM3      SET	.LUM3 + .STEP3
     13  596c					      REPEND
     14  596c		       44		      .byte.b	$40+(.LUM1/256)
     15  596d		       26		      .byte.b	$20+(.LUM2/256)
     16  596e		       98		      .byte.b	$90+(.LUM3/256)
     17  596f
     18  596f
     19  596f
     20  596f
     21  596f
     22  596f				   .LUM1      SET	.LUM1 + .STEP1
     23  596f				   .LUM2      SET	.LUM2 + .STEP2
     24  596f				   .LUM3      SET	.LUM3 + .STEP3
     13  596f					      REPEND
     14  596f		       44		      .byte.b	$40+(.LUM1/256)
     15  5970		       26		      .byte.b	$20+(.LUM2/256)
     16  5971		       98		      .byte.b	$90+(.LUM3/256)
     17  5972
     18  5972
     19  5972
     20  5972
     21  5972
     22  5972				   .LUM1      SET	.LUM1 + .STEP1
     23  5972				   .LUM2      SET	.LUM2 + .STEP2
     24  5972				   .LUM3      SET	.LUM3 + .STEP3
     13  5972					      REPEND
     14  5972		       44		      .byte.b	$40+(.LUM1/256)
     15  5973		       26		      .byte.b	$20+(.LUM2/256)
     16  5974		       98		      .byte.b	$90+(.LUM3/256)
     17  5975
     18  5975
     19  5975
     20  5975
     21  5975
     22  5975				   .LUM1      SET	.LUM1 + .STEP1
     23  5975				   .LUM2      SET	.LUM2 + .STEP2
     24  5975				   .LUM3      SET	.LUM3 + .STEP3
     13  5975					      REPEND
     14  5975		       44		      .byte.b	$40+(.LUM1/256)
     15  5976		       26		      .byte.b	$20+(.LUM2/256)
     16  5977		       98		      .byte.b	$90+(.LUM3/256)
     17  5978
     18  5978
     19  5978
     20  5978
     21  5978
     22  5978				   .LUM1      SET	.LUM1 + .STEP1
     23  5978				   .LUM2      SET	.LUM2 + .STEP2
     24  5978				   .LUM3      SET	.LUM3 + .STEP3
     13  5978					      REPEND
     14  5978		       44		      .byte.b	$40+(.LUM1/256)
     15  5979		       26		      .byte.b	$20+(.LUM2/256)
     16  597a		       98		      .byte.b	$90+(.LUM3/256)
     17  597b
     18  597b
     19  597b
     20  597b
     21  597b
     22  597b				   .LUM1      SET	.LUM1 + .STEP1
     23  597b				   .LUM2      SET	.LUM2 + .STEP2
     24  597b				   .LUM3      SET	.LUM3 + .STEP3
     13  597b					      REPEND
     14  597b		       44		      .byte.b	$40+(.LUM1/256)
     15  597c		       26		      .byte.b	$20+(.LUM2/256)
     16  597d		       98		      .byte.b	$90+(.LUM3/256)
     17  597e
     18  597e
     19  597e
     20  597e
     21  597e
     22  597e				   .LUM1      SET	.LUM1 + .STEP1
     23  597e				   .LUM2      SET	.LUM2 + .STEP2
     24  597e				   .LUM3      SET	.LUM3 + .STEP3
     13  597e					      REPEND
     14  597e		       44		      .byte.b	$40+(.LUM1/256)
     15  597f		       26		      .byte.b	$20+(.LUM2/256)
     16  5980		       98		      .byte.b	$90+(.LUM3/256)
     17  5981
     18  5981
     19  5981
     20  5981
     21  5981
     22  5981				   .LUM1      SET	.LUM1 + .STEP1
     23  5981				   .LUM2      SET	.LUM2 + .STEP2
     24  5981				   .LUM3      SET	.LUM3 + .STEP3
     13  5981					      REPEND
     14  5981		       44		      .byte.b	$40+(.LUM1/256)
     15  5982		       26		      .byte.b	$20+(.LUM2/256)
     16  5983		       98		      .byte.b	$90+(.LUM3/256)
     17  5984
     18  5984
     19  5984
     20  5984
     21  5984
     22  5984				   .LUM1      SET	.LUM1 + .STEP1
     23  5984				   .LUM2      SET	.LUM2 + .STEP2
     24  5984				   .LUM3      SET	.LUM3 + .STEP3
     13  5984					      REPEND
     14  5984		       44		      .byte.b	$40+(.LUM1/256)
     15  5985		       26		      .byte.b	$20+(.LUM2/256)
     16  5986		       98		      .byte.b	$90+(.LUM3/256)
     17  5987
     18  5987
     19  5987
     20  5987
     21  5987
     22  5987				   .LUM1      SET	.LUM1 + .STEP1
     23  5987				   .LUM2      SET	.LUM2 + .STEP2
     24  5987				   .LUM3      SET	.LUM3 + .STEP3
     13  5987					      REPEND
     14  5987		       44		      .byte.b	$40+(.LUM1/256)
     15  5988		       26		      .byte.b	$20+(.LUM2/256)
     16  5989		       98		      .byte.b	$90+(.LUM3/256)
     17  598a
     18  598a
     19  598a
     20  598a
     21  598a
     22  598a				   .LUM1      SET	.LUM1 + .STEP1
     23  598a				   .LUM2      SET	.LUM2 + .STEP2
     24  598a				   .LUM3      SET	.LUM3 + .STEP3
     13  598a					      REPEND
     14  598a		       44		      .byte.b	$40+(.LUM1/256)
     15  598b		       26		      .byte.b	$20+(.LUM2/256)
     16  598c		       98		      .byte.b	$90+(.LUM3/256)
     17  598d
     18  598d
     19  598d
     20  598d
     21  598d
     22  598d				   .LUM1      SET	.LUM1 + .STEP1
     23  598d				   .LUM2      SET	.LUM2 + .STEP2
     24  598d				   .LUM3      SET	.LUM3 + .STEP3
     13  598d					      REPEND
     14  598d		       44		      .byte.b	$40+(.LUM1/256)
     15  598e		       26		      .byte.b	$20+(.LUM2/256)
     16  598f		       98		      .byte.b	$90+(.LUM3/256)
     17  5990
     18  5990
     19  5990
     20  5990
     21  5990
     22  5990				   .LUM1      SET	.LUM1 + .STEP1
     23  5990				   .LUM2      SET	.LUM2 + .STEP2
     24  5990				   .LUM3      SET	.LUM3 + .STEP3
     13  5990					      REPEND
     14  5990		       44		      .byte.b	$40+(.LUM1/256)
     15  5991		       26		      .byte.b	$20+(.LUM2/256)
     16  5992		       98		      .byte.b	$90+(.LUM3/256)
     17  5993
     18  5993
     19  5993
     20  5993
     21  5993
     22  5993				   .LUM1      SET	.LUM1 + .STEP1
     23  5993				   .LUM2      SET	.LUM2 + .STEP2
     24  5993				   .LUM3      SET	.LUM3 + .STEP3
     13  5993					      REPEND
     14  5993		       44		      .byte.b	$40+(.LUM1/256)
     15  5994		       26		      .byte.b	$20+(.LUM2/256)
     16  5995		       98		      .byte.b	$90+(.LUM3/256)
     17  5996
     18  5996
     19  5996
     20  5996
     21  5996
     22  5996				   .LUM1      SET	.LUM1 + .STEP1
     23  5996				   .LUM2      SET	.LUM2 + .STEP2
     24  5996				   .LUM3      SET	.LUM3 + .STEP3
     13  5996					      REPEND
     14  5996		       44		      .byte.b	$40+(.LUM1/256)
     15  5997		       26		      .byte.b	$20+(.LUM2/256)
     16  5998		       98		      .byte.b	$90+(.LUM3/256)
     17  5999
     18  5999
     19  5999
     20  5999
     21  5999
     22  5999				   .LUM1      SET	.LUM1 + .STEP1
     23  5999				   .LUM2      SET	.LUM2 + .STEP2
     24  5999				   .LUM3      SET	.LUM3 + .STEP3
     13  5999					      REPEND
     14  5999		       44		      .byte.b	$40+(.LUM1/256)
     15  599a		       26		      .byte.b	$20+(.LUM2/256)
     16  599b		       98		      .byte.b	$90+(.LUM3/256)
     17  599c
     18  599c
     19  599c
     20  599c
     21  599c
     22  599c				   .LUM1      SET	.LUM1 + .STEP1
     23  599c				   .LUM2      SET	.LUM2 + .STEP2
     24  599c				   .LUM3      SET	.LUM3 + .STEP3
     13  599c					      REPEND
     14  599c		       44		      .byte.b	$40+(.LUM1/256)
     15  599d		       26		      .byte.b	$20+(.LUM2/256)
     16  599e		       98		      .byte.b	$90+(.LUM3/256)
     17  599f
     18  599f
     19  599f
     20  599f
     21  599f
     22  599f				   .LUM1      SET	.LUM1 + .STEP1
     23  599f				   .LUM2      SET	.LUM2 + .STEP2
     24  599f				   .LUM3      SET	.LUM3 + .STEP3
     13  599f					      REPEND
     14  599f		       44		      .byte.b	$40+(.LUM1/256)
     15  59a0		       26		      .byte.b	$20+(.LUM2/256)
     16  59a1		       98		      .byte.b	$90+(.LUM3/256)
     17  59a2
     18  59a2
     19  59a2
     20  59a2
     21  59a2
     22  59a2				   .LUM1      SET	.LUM1 + .STEP1
     23  59a2				   .LUM2      SET	.LUM2 + .STEP2
     24  59a2				   .LUM3      SET	.LUM3 + .STEP3
     13  59a2					      REPEND
     14  59a2		       44		      .byte.b	$40+(.LUM1/256)
     15  59a3		       26		      .byte.b	$20+(.LUM2/256)
     16  59a4		       98		      .byte.b	$90+(.LUM3/256)
     17  59a5
     18  59a5
     19  59a5
     20  59a5
     21  59a5
     22  59a5				   .LUM1      SET	.LUM1 + .STEP1
     23  59a5				   .LUM2      SET	.LUM2 + .STEP2
     24  59a5				   .LUM3      SET	.LUM3 + .STEP3
     13  59a5					      REPEND
     14  59a5		       44		      .byte.b	$40+(.LUM1/256)
     15  59a6		       26		      .byte.b	$20+(.LUM2/256)
     16  59a7		       98		      .byte.b	$90+(.LUM3/256)
     17  59a8
     18  59a8
     19  59a8
     20  59a8
     21  59a8
     22  59a8				   .LUM1      SET	.LUM1 + .STEP1
     23  59a8				   .LUM2      SET	.LUM2 + .STEP2
     24  59a8				   .LUM3      SET	.LUM3 + .STEP3
     13  59a8					      REPEND
     14  59a8		       44		      .byte.b	$40+(.LUM1/256)
     15  59a9		       26		      .byte.b	$20+(.LUM2/256)
     16  59aa		       98		      .byte.b	$90+(.LUM3/256)
     17  59ab
     18  59ab
     19  59ab
     20  59ab
     21  59ab
     22  59ab				   .LUM1      SET	.LUM1 + .STEP1
     23  59ab				   .LUM2      SET	.LUM2 + .STEP2
     24  59ab				   .LUM3      SET	.LUM3 + .STEP3
     13  59ab					      REPEND
     14  59ab		       44		      .byte.b	$40+(.LUM1/256)
     15  59ac		       26		      .byte.b	$20+(.LUM2/256)
     16  59ad		       98		      .byte.b	$90+(.LUM3/256)
     17  59ae
     18  59ae
     19  59ae
     20  59ae
     21  59ae
     22  59ae				   .LUM1      SET	.LUM1 + .STEP1
     23  59ae				   .LUM2      SET	.LUM2 + .STEP2
     24  59ae				   .LUM3      SET	.LUM3 + .STEP3
     13  59ae					      REPEND
     14  59ae		       44		      .byte.b	$40+(.LUM1/256)
     15  59af		       26		      .byte.b	$20+(.LUM2/256)
     16  59b0		       98		      .byte.b	$90+(.LUM3/256)
     17  59b1
     18  59b1
     19  59b1
     20  59b1
     21  59b1
     22  59b1				   .LUM1      SET	.LUM1 + .STEP1
     23  59b1				   .LUM2      SET	.LUM2 + .STEP2
     24  59b1				   .LUM3      SET	.LUM3 + .STEP3
     13  59b1					      REPEND
     14  59b1		       44		      .byte.b	$40+(.LUM1/256)
     15  59b2		       26		      .byte.b	$20+(.LUM2/256)
     16  59b3		       98		      .byte.b	$90+(.LUM3/256)
     17  59b4
     18  59b4
     19  59b4
     20  59b4
     21  59b4
     22  59b4				   .LUM1      SET	.LUM1 + .STEP1
     23  59b4				   .LUM2      SET	.LUM2 + .STEP2
     24  59b4				   .LUM3      SET	.LUM3 + .STEP3
     13  59b4					      REPEND
     14  59b4		       44		      .byte.b	$40+(.LUM1/256)
     15  59b5		       26		      .byte.b	$20+(.LUM2/256)
     16  59b6		       98		      .byte.b	$90+(.LUM3/256)
     17  59b7
     18  59b7
     19  59b7
     20  59b7
     21  59b7
     22  59b7				   .LUM1      SET	.LUM1 + .STEP1
     23  59b7				   .LUM2      SET	.LUM2 + .STEP2
     24  59b7				   .LUM3      SET	.LUM3 + .STEP3
     13  59b7					      REPEND
     14  59b7		       44		      .byte.b	$40+(.LUM1/256)
     15  59b8		       26		      .byte.b	$20+(.LUM2/256)
     16  59b9		       98		      .byte.b	$90+(.LUM3/256)
     17  59ba
     18  59ba
     19  59ba
     20  59ba
     21  59ba
     22  59ba				   .LUM1      SET	.LUM1 + .STEP1
     23  59ba				   .LUM2      SET	.LUM2 + .STEP2
     24  59ba				   .LUM3      SET	.LUM3 + .STEP3
     13  59ba					      REPEND
     14  59ba		       44		      .byte.b	$40+(.LUM1/256)
     15  59bb		       26		      .byte.b	$20+(.LUM2/256)
     16  59bc		       98		      .byte.b	$90+(.LUM3/256)
     17  59bd
     18  59bd
     19  59bd
     20  59bd
     21  59bd
     22  59bd				   .LUM1      SET	.LUM1 + .STEP1
     23  59bd				   .LUM2      SET	.LUM2 + .STEP2
     24  59bd				   .LUM3      SET	.LUM3 + .STEP3
     13  59bd					      REPEND
     14  59bd		       44		      .byte.b	$40+(.LUM1/256)
     15  59be		       26		      .byte.b	$20+(.LUM2/256)
     16  59bf		       98		      .byte.b	$90+(.LUM3/256)
     17  59c0
     18  59c0
     19  59c0
     20  59c0
     21  59c0
     22  59c0				   .LUM1      SET	.LUM1 + .STEP1
     23  59c0				   .LUM2      SET	.LUM2 + .STEP2
     24  59c0				   .LUM3      SET	.LUM3 + .STEP3
     13  59c0					      REPEND
     14  59c0		       44		      .byte.b	$40+(.LUM1/256)
     15  59c1		       26		      .byte.b	$20+(.LUM2/256)
     16  59c2		       98		      .byte.b	$90+(.LUM3/256)
     17  59c3
     18  59c3
     19  59c3
     20  59c3
     21  59c3
     22  59c3				   .LUM1      SET	.LUM1 + .STEP1
     23  59c3				   .LUM2      SET	.LUM2 + .STEP2
     24  59c3				   .LUM3      SET	.LUM3 + .STEP3
     13  59c3					      REPEND
     14  59c3		       44		      .byte.b	$40+(.LUM1/256)
     15  59c4		       26		      .byte.b	$20+(.LUM2/256)
     16  59c5		       98		      .byte.b	$90+(.LUM3/256)
     17  59c6
     18  59c6
     19  59c6
     20  59c6
     21  59c6
     22  59c6				   .LUM1      SET	.LUM1 + .STEP1
     23  59c6				   .LUM2      SET	.LUM2 + .STEP2
     24  59c6				   .LUM3      SET	.LUM3 + .STEP3
     13  59c6					      REPEND
     14  59c6		       44		      .byte.b	$40+(.LUM1/256)
     15  59c7		       26		      .byte.b	$20+(.LUM2/256)
     16  59c8		       98		      .byte.b	$90+(.LUM3/256)
     17  59c9
     18  59c9
     19  59c9
     20  59c9
     21  59c9
     22  59c9				   .LUM1      SET	.LUM1 + .STEP1
     23  59c9				   .LUM2      SET	.LUM2 + .STEP2
     24  59c9				   .LUM3      SET	.LUM3 + .STEP3
     13  59c9					      REPEND
     14  59c9		       44		      .byte.b	$40+(.LUM1/256)
     15  59ca		       26		      .byte.b	$20+(.LUM2/256)
     16  59cb		       98		      .byte.b	$90+(.LUM3/256)
     17  59cc
     18  59cc
     19  59cc
     20  59cc
     21  59cc
     22  59cc				   .LUM1      SET	.LUM1 + .STEP1
     23  59cc				   .LUM2      SET	.LUM2 + .STEP2
     24  59cc				   .LUM3      SET	.LUM3 + .STEP3
     13  59cc					      REPEND
     14  59cc		       44		      .byte.b	$40+(.LUM1/256)
     15  59cd		       26		      .byte.b	$20+(.LUM2/256)
     16  59ce		       98		      .byte.b	$90+(.LUM3/256)
     17  59cf
     18  59cf
     19  59cf
     20  59cf
     21  59cf
     22  59cf				   .LUM1      SET	.LUM1 + .STEP1
     23  59cf				   .LUM2      SET	.LUM2 + .STEP2
     24  59cf				   .LUM3      SET	.LUM3 + .STEP3
     13  59cf					      REPEND
     14  59cf		       44		      .byte.b	$40+(.LUM1/256)
     15  59d0		       26		      .byte.b	$20+(.LUM2/256)
     16  59d1		       98		      .byte.b	$90+(.LUM3/256)
     17  59d2
     18  59d2
     19  59d2
     20  59d2
     21  59d2
     22  59d2				   .LUM1      SET	.LUM1 + .STEP1
     23  59d2				   .LUM2      SET	.LUM2 + .STEP2
     24  59d2				   .LUM3      SET	.LUM3 + .STEP3
     13  59d2					      REPEND
     14  59d2		       44		      .byte.b	$40+(.LUM1/256)
     15  59d3		       26		      .byte.b	$20+(.LUM2/256)
     16  59d4		       98		      .byte.b	$90+(.LUM3/256)
     17  59d5
     18  59d5
     19  59d5
     20  59d5
     21  59d5
     22  59d5				   .LUM1      SET	.LUM1 + .STEP1
     23  59d5				   .LUM2      SET	.LUM2 + .STEP2
     24  59d5				   .LUM3      SET	.LUM3 + .STEP3
     13  59d5					      REPEND
     14  59d5		       44		      .byte.b	$40+(.LUM1/256)
     15  59d6		       26		      .byte.b	$20+(.LUM2/256)
     16  59d7		       98		      .byte.b	$90+(.LUM3/256)
     17  59d8
     18  59d8
     19  59d8
     20  59d8
     21  59d8
     22  59d8				   .LUM1      SET	.LUM1 + .STEP1
     23  59d8				   .LUM2      SET	.LUM2 + .STEP2
     24  59d8				   .LUM3      SET	.LUM3 + .STEP3
     25  59d8					      REPEND
    254  59d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  59d8
    256  59d8							;    ECHO "PAL LUMS"
    257  59d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  59d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  59d8
      2  59d8
      3  59d8
      4  59d8
      5  59d8				   .LUM1      SET	$6*256
      6  59d8				   .LUM2      SET	$4*256
      7  59d8				   .LUM3      SET	$8*256
      8  59d8
      9  59d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  59d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  59d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  59d8
     13  59d8					      REPEAT	72
     14  59d8		       66		      .byte.b	$60+(.LUM1/256)
     15  59d9		       84		      .byte.b	$80+(.LUM2/256)
     16  59da		       18		      .byte.b	$10+(.LUM3/256)
     17  59db
     18  59db
     19  59db
     20  59db
     21  59db
     22  59db				   .LUM1      SET	.LUM1 + .STEP1
     23  59db				   .LUM2      SET	.LUM2 + .STEP2
     24  59db				   .LUM3      SET	.LUM3 + .STEP3
     13  59db					      REPEND
     14  59db		       66		      .byte.b	$60+(.LUM1/256)
     15  59dc		       84		      .byte.b	$80+(.LUM2/256)
     16  59dd		       18		      .byte.b	$10+(.LUM3/256)
     17  59de
     18  59de
     19  59de
     20  59de
     21  59de
     22  59de				   .LUM1      SET	.LUM1 + .STEP1
     23  59de				   .LUM2      SET	.LUM2 + .STEP2
     24  59de				   .LUM3      SET	.LUM3 + .STEP3
     13  59de					      REPEND
     14  59de		       66		      .byte.b	$60+(.LUM1/256)
     15  59df		       84		      .byte.b	$80+(.LUM2/256)
     16  59e0		       18		      .byte.b	$10+(.LUM3/256)
     17  59e1
     18  59e1
     19  59e1
     20  59e1
     21  59e1
     22  59e1				   .LUM1      SET	.LUM1 + .STEP1
     23  59e1				   .LUM2      SET	.LUM2 + .STEP2
     24  59e1				   .LUM3      SET	.LUM3 + .STEP3
     13  59e1					      REPEND
     14  59e1		       66		      .byte.b	$60+(.LUM1/256)
     15  59e2		       84		      .byte.b	$80+(.LUM2/256)
     16  59e3		       18		      .byte.b	$10+(.LUM3/256)
     17  59e4
     18  59e4
     19  59e4
     20  59e4
     21  59e4
     22  59e4				   .LUM1      SET	.LUM1 + .STEP1
     23  59e4				   .LUM2      SET	.LUM2 + .STEP2
     24  59e4				   .LUM3      SET	.LUM3 + .STEP3
     13  59e4					      REPEND
     14  59e4		       66		      .byte.b	$60+(.LUM1/256)
     15  59e5		       84		      .byte.b	$80+(.LUM2/256)
     16  59e6		       18		      .byte.b	$10+(.LUM3/256)
     17  59e7
     18  59e7
     19  59e7
     20  59e7
     21  59e7
     22  59e7				   .LUM1      SET	.LUM1 + .STEP1
     23  59e7				   .LUM2      SET	.LUM2 + .STEP2
     24  59e7				   .LUM3      SET	.LUM3 + .STEP3
     13  59e7					      REPEND
     14  59e7		       66		      .byte.b	$60+(.LUM1/256)
     15  59e8		       84		      .byte.b	$80+(.LUM2/256)
     16  59e9		       18		      .byte.b	$10+(.LUM3/256)
     17  59ea
     18  59ea
     19  59ea
     20  59ea
     21  59ea
     22  59ea				   .LUM1      SET	.LUM1 + .STEP1
     23  59ea				   .LUM2      SET	.LUM2 + .STEP2
     24  59ea				   .LUM3      SET	.LUM3 + .STEP3
     13  59ea					      REPEND
     14  59ea		       66		      .byte.b	$60+(.LUM1/256)
     15  59eb		       84		      .byte.b	$80+(.LUM2/256)
     16  59ec		       18		      .byte.b	$10+(.LUM3/256)
     17  59ed
     18  59ed
     19  59ed
     20  59ed
     21  59ed
     22  59ed				   .LUM1      SET	.LUM1 + .STEP1
     23  59ed				   .LUM2      SET	.LUM2 + .STEP2
     24  59ed				   .LUM3      SET	.LUM3 + .STEP3
     13  59ed					      REPEND
     14  59ed		       66		      .byte.b	$60+(.LUM1/256)
     15  59ee		       84		      .byte.b	$80+(.LUM2/256)
     16  59ef		       18		      .byte.b	$10+(.LUM3/256)
     17  59f0
     18  59f0
     19  59f0
     20  59f0
     21  59f0
     22  59f0				   .LUM1      SET	.LUM1 + .STEP1
     23  59f0				   .LUM2      SET	.LUM2 + .STEP2
     24  59f0				   .LUM3      SET	.LUM3 + .STEP3
     13  59f0					      REPEND
     14  59f0		       66		      .byte.b	$60+(.LUM1/256)
     15  59f1		       84		      .byte.b	$80+(.LUM2/256)
     16  59f2		       18		      .byte.b	$10+(.LUM3/256)
     17  59f3
     18  59f3
     19  59f3
     20  59f3
     21  59f3
     22  59f3				   .LUM1      SET	.LUM1 + .STEP1
     23  59f3				   .LUM2      SET	.LUM2 + .STEP2
     24  59f3				   .LUM3      SET	.LUM3 + .STEP3
     13  59f3					      REPEND
     14  59f3		       66		      .byte.b	$60+(.LUM1/256)
     15  59f4		       84		      .byte.b	$80+(.LUM2/256)
     16  59f5		       18		      .byte.b	$10+(.LUM3/256)
     17  59f6
     18  59f6
     19  59f6
     20  59f6
     21  59f6
     22  59f6				   .LUM1      SET	.LUM1 + .STEP1
     23  59f6				   .LUM2      SET	.LUM2 + .STEP2
     24  59f6				   .LUM3      SET	.LUM3 + .STEP3
     13  59f6					      REPEND
     14  59f6		       66		      .byte.b	$60+(.LUM1/256)
     15  59f7		       84		      .byte.b	$80+(.LUM2/256)
     16  59f8		       18		      .byte.b	$10+(.LUM3/256)
     17  59f9
     18  59f9
     19  59f9
     20  59f9
     21  59f9
     22  59f9				   .LUM1      SET	.LUM1 + .STEP1
     23  59f9				   .LUM2      SET	.LUM2 + .STEP2
     24  59f9				   .LUM3      SET	.LUM3 + .STEP3
     13  59f9					      REPEND
     14  59f9		       66		      .byte.b	$60+(.LUM1/256)
     15  59fa		       84		      .byte.b	$80+(.LUM2/256)
     16  59fb		       18		      .byte.b	$10+(.LUM3/256)
     17  59fc
     18  59fc
     19  59fc
     20  59fc
     21  59fc
     22  59fc				   .LUM1      SET	.LUM1 + .STEP1
     23  59fc				   .LUM2      SET	.LUM2 + .STEP2
     24  59fc				   .LUM3      SET	.LUM3 + .STEP3
     13  59fc					      REPEND
     14  59fc		       66		      .byte.b	$60+(.LUM1/256)
     15  59fd		       84		      .byte.b	$80+(.LUM2/256)
     16  59fe		       18		      .byte.b	$10+(.LUM3/256)
     17  59ff
     18  59ff
     19  59ff
     20  59ff
     21  59ff
     22  59ff				   .LUM1      SET	.LUM1 + .STEP1
     23  59ff				   .LUM2      SET	.LUM2 + .STEP2
     24  59ff				   .LUM3      SET	.LUM3 + .STEP3
     13  59ff					      REPEND
     14  59ff		       66		      .byte.b	$60+(.LUM1/256)
     15  5a00		       84		      .byte.b	$80+(.LUM2/256)
     16  5a01		       18		      .byte.b	$10+(.LUM3/256)
     17  5a02
     18  5a02
     19  5a02
     20  5a02
     21  5a02
     22  5a02				   .LUM1      SET	.LUM1 + .STEP1
     23  5a02				   .LUM2      SET	.LUM2 + .STEP2
     24  5a02				   .LUM3      SET	.LUM3 + .STEP3
     13  5a02					      REPEND
     14  5a02		       66		      .byte.b	$60+(.LUM1/256)
     15  5a03		       84		      .byte.b	$80+(.LUM2/256)
     16  5a04		       18		      .byte.b	$10+(.LUM3/256)
     17  5a05
     18  5a05
     19  5a05
     20  5a05
     21  5a05
     22  5a05				   .LUM1      SET	.LUM1 + .STEP1
     23  5a05				   .LUM2      SET	.LUM2 + .STEP2
     24  5a05				   .LUM3      SET	.LUM3 + .STEP3
     13  5a05					      REPEND
     14  5a05		       66		      .byte.b	$60+(.LUM1/256)
     15  5a06		       84		      .byte.b	$80+(.LUM2/256)
     16  5a07		       18		      .byte.b	$10+(.LUM3/256)
     17  5a08
     18  5a08
     19  5a08
     20  5a08
     21  5a08
     22  5a08				   .LUM1      SET	.LUM1 + .STEP1
     23  5a08				   .LUM2      SET	.LUM2 + .STEP2
     24  5a08				   .LUM3      SET	.LUM3 + .STEP3
     13  5a08					      REPEND
     14  5a08		       66		      .byte.b	$60+(.LUM1/256)
     15  5a09		       84		      .byte.b	$80+(.LUM2/256)
     16  5a0a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a0b
     18  5a0b
     19  5a0b
     20  5a0b
     21  5a0b
     22  5a0b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a0b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a0b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a0b					      REPEND
     14  5a0b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a0c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a0d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a0e
     18  5a0e
     19  5a0e
     20  5a0e
     21  5a0e
     22  5a0e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a0e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a0e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a0e					      REPEND
     14  5a0e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a0f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a10		       18		      .byte.b	$10+(.LUM3/256)
     17  5a11
     18  5a11
     19  5a11
     20  5a11
     21  5a11
     22  5a11				   .LUM1      SET	.LUM1 + .STEP1
     23  5a11				   .LUM2      SET	.LUM2 + .STEP2
     24  5a11				   .LUM3      SET	.LUM3 + .STEP3
     13  5a11					      REPEND
     14  5a11		       66		      .byte.b	$60+(.LUM1/256)
     15  5a12		       84		      .byte.b	$80+(.LUM2/256)
     16  5a13		       18		      .byte.b	$10+(.LUM3/256)
     17  5a14
     18  5a14
     19  5a14
     20  5a14
     21  5a14
     22  5a14				   .LUM1      SET	.LUM1 + .STEP1
     23  5a14				   .LUM2      SET	.LUM2 + .STEP2
     24  5a14				   .LUM3      SET	.LUM3 + .STEP3
     13  5a14					      REPEND
     14  5a14		       66		      .byte.b	$60+(.LUM1/256)
     15  5a15		       84		      .byte.b	$80+(.LUM2/256)
     16  5a16		       18		      .byte.b	$10+(.LUM3/256)
     17  5a17
     18  5a17
     19  5a17
     20  5a17
     21  5a17
     22  5a17				   .LUM1      SET	.LUM1 + .STEP1
     23  5a17				   .LUM2      SET	.LUM2 + .STEP2
     24  5a17				   .LUM3      SET	.LUM3 + .STEP3
     13  5a17					      REPEND
     14  5a17		       66		      .byte.b	$60+(.LUM1/256)
     15  5a18		       84		      .byte.b	$80+(.LUM2/256)
     16  5a19		       18		      .byte.b	$10+(.LUM3/256)
     17  5a1a
     18  5a1a
     19  5a1a
     20  5a1a
     21  5a1a
     22  5a1a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a1a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a1a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a1a					      REPEND
     14  5a1a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a1b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a1c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a1d
     18  5a1d
     19  5a1d
     20  5a1d
     21  5a1d
     22  5a1d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a1d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a1d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a1d					      REPEND
     14  5a1d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a1e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a1f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a20
     18  5a20
     19  5a20
     20  5a20
     21  5a20
     22  5a20				   .LUM1      SET	.LUM1 + .STEP1
     23  5a20				   .LUM2      SET	.LUM2 + .STEP2
     24  5a20				   .LUM3      SET	.LUM3 + .STEP3
     13  5a20					      REPEND
     14  5a20		       66		      .byte.b	$60+(.LUM1/256)
     15  5a21		       84		      .byte.b	$80+(.LUM2/256)
     16  5a22		       18		      .byte.b	$10+(.LUM3/256)
     17  5a23
     18  5a23
     19  5a23
     20  5a23
     21  5a23
     22  5a23				   .LUM1      SET	.LUM1 + .STEP1
     23  5a23				   .LUM2      SET	.LUM2 + .STEP2
     24  5a23				   .LUM3      SET	.LUM3 + .STEP3
     13  5a23					      REPEND
     14  5a23		       66		      .byte.b	$60+(.LUM1/256)
     15  5a24		       84		      .byte.b	$80+(.LUM2/256)
     16  5a25		       18		      .byte.b	$10+(.LUM3/256)
     17  5a26
     18  5a26
     19  5a26
     20  5a26
     21  5a26
     22  5a26				   .LUM1      SET	.LUM1 + .STEP1
     23  5a26				   .LUM2      SET	.LUM2 + .STEP2
     24  5a26				   .LUM3      SET	.LUM3 + .STEP3
     13  5a26					      REPEND
     14  5a26		       66		      .byte.b	$60+(.LUM1/256)
     15  5a27		       84		      .byte.b	$80+(.LUM2/256)
     16  5a28		       18		      .byte.b	$10+(.LUM3/256)
     17  5a29
     18  5a29
     19  5a29
     20  5a29
     21  5a29
     22  5a29				   .LUM1      SET	.LUM1 + .STEP1
     23  5a29				   .LUM2      SET	.LUM2 + .STEP2
     24  5a29				   .LUM3      SET	.LUM3 + .STEP3
     13  5a29					      REPEND
     14  5a29		       66		      .byte.b	$60+(.LUM1/256)
     15  5a2a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a2b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a2c
     18  5a2c
     19  5a2c
     20  5a2c
     21  5a2c
     22  5a2c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a2c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a2c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a2c					      REPEND
     14  5a2c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a2d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a2e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a2f
     18  5a2f
     19  5a2f
     20  5a2f
     21  5a2f
     22  5a2f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a2f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a2f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a2f					      REPEND
     14  5a2f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a30		       84		      .byte.b	$80+(.LUM2/256)
     16  5a31		       18		      .byte.b	$10+(.LUM3/256)
     17  5a32
     18  5a32
     19  5a32
     20  5a32
     21  5a32
     22  5a32				   .LUM1      SET	.LUM1 + .STEP1
     23  5a32				   .LUM2      SET	.LUM2 + .STEP2
     24  5a32				   .LUM3      SET	.LUM3 + .STEP3
     13  5a32					      REPEND
     14  5a32		       66		      .byte.b	$60+(.LUM1/256)
     15  5a33		       84		      .byte.b	$80+(.LUM2/256)
     16  5a34		       18		      .byte.b	$10+(.LUM3/256)
     17  5a35
     18  5a35
     19  5a35
     20  5a35
     21  5a35
     22  5a35				   .LUM1      SET	.LUM1 + .STEP1
     23  5a35				   .LUM2      SET	.LUM2 + .STEP2
     24  5a35				   .LUM3      SET	.LUM3 + .STEP3
     13  5a35					      REPEND
     14  5a35		       66		      .byte.b	$60+(.LUM1/256)
     15  5a36		       84		      .byte.b	$80+(.LUM2/256)
     16  5a37		       18		      .byte.b	$10+(.LUM3/256)
     17  5a38
     18  5a38
     19  5a38
     20  5a38
     21  5a38
     22  5a38				   .LUM1      SET	.LUM1 + .STEP1
     23  5a38				   .LUM2      SET	.LUM2 + .STEP2
     24  5a38				   .LUM3      SET	.LUM3 + .STEP3
     13  5a38					      REPEND
     14  5a38		       66		      .byte.b	$60+(.LUM1/256)
     15  5a39		       84		      .byte.b	$80+(.LUM2/256)
     16  5a3a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a3b
     18  5a3b
     19  5a3b
     20  5a3b
     21  5a3b
     22  5a3b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a3b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a3b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a3b					      REPEND
     14  5a3b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a3c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a3d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a3e
     18  5a3e
     19  5a3e
     20  5a3e
     21  5a3e
     22  5a3e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a3e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a3e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a3e					      REPEND
     14  5a3e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a3f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a40		       18		      .byte.b	$10+(.LUM3/256)
     17  5a41
     18  5a41
     19  5a41
     20  5a41
     21  5a41
     22  5a41				   .LUM1      SET	.LUM1 + .STEP1
     23  5a41				   .LUM2      SET	.LUM2 + .STEP2
     24  5a41				   .LUM3      SET	.LUM3 + .STEP3
     13  5a41					      REPEND
     14  5a41		       66		      .byte.b	$60+(.LUM1/256)
     15  5a42		       84		      .byte.b	$80+(.LUM2/256)
     16  5a43		       18		      .byte.b	$10+(.LUM3/256)
     17  5a44
     18  5a44
     19  5a44
     20  5a44
     21  5a44
     22  5a44				   .LUM1      SET	.LUM1 + .STEP1
     23  5a44				   .LUM2      SET	.LUM2 + .STEP2
     24  5a44				   .LUM3      SET	.LUM3 + .STEP3
     13  5a44					      REPEND
     14  5a44		       66		      .byte.b	$60+(.LUM1/256)
     15  5a45		       84		      .byte.b	$80+(.LUM2/256)
     16  5a46		       18		      .byte.b	$10+(.LUM3/256)
     17  5a47
     18  5a47
     19  5a47
     20  5a47
     21  5a47
     22  5a47				   .LUM1      SET	.LUM1 + .STEP1
     23  5a47				   .LUM2      SET	.LUM2 + .STEP2
     24  5a47				   .LUM3      SET	.LUM3 + .STEP3
     13  5a47					      REPEND
     14  5a47		       66		      .byte.b	$60+(.LUM1/256)
     15  5a48		       84		      .byte.b	$80+(.LUM2/256)
     16  5a49		       18		      .byte.b	$10+(.LUM3/256)
     17  5a4a
     18  5a4a
     19  5a4a
     20  5a4a
     21  5a4a
     22  5a4a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a4a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a4a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a4a					      REPEND
     14  5a4a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a4b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a4c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a4d
     18  5a4d
     19  5a4d
     20  5a4d
     21  5a4d
     22  5a4d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a4d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a4d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a4d					      REPEND
     14  5a4d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a4e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a4f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a50
     18  5a50
     19  5a50
     20  5a50
     21  5a50
     22  5a50				   .LUM1      SET	.LUM1 + .STEP1
     23  5a50				   .LUM2      SET	.LUM2 + .STEP2
     24  5a50				   .LUM3      SET	.LUM3 + .STEP3
     13  5a50					      REPEND
     14  5a50		       66		      .byte.b	$60+(.LUM1/256)
     15  5a51		       84		      .byte.b	$80+(.LUM2/256)
     16  5a52		       18		      .byte.b	$10+(.LUM3/256)
     17  5a53
     18  5a53
     19  5a53
     20  5a53
     21  5a53
     22  5a53				   .LUM1      SET	.LUM1 + .STEP1
     23  5a53				   .LUM2      SET	.LUM2 + .STEP2
     24  5a53				   .LUM3      SET	.LUM3 + .STEP3
     13  5a53					      REPEND
     14  5a53		       66		      .byte.b	$60+(.LUM1/256)
     15  5a54		       84		      .byte.b	$80+(.LUM2/256)
     16  5a55		       18		      .byte.b	$10+(.LUM3/256)
     17  5a56
     18  5a56
     19  5a56
     20  5a56
     21  5a56
     22  5a56				   .LUM1      SET	.LUM1 + .STEP1
     23  5a56				   .LUM2      SET	.LUM2 + .STEP2
     24  5a56				   .LUM3      SET	.LUM3 + .STEP3
     13  5a56					      REPEND
     14  5a56		       66		      .byte.b	$60+(.LUM1/256)
     15  5a57		       84		      .byte.b	$80+(.LUM2/256)
     16  5a58		       18		      .byte.b	$10+(.LUM3/256)
     17  5a59
     18  5a59
     19  5a59
     20  5a59
     21  5a59
     22  5a59				   .LUM1      SET	.LUM1 + .STEP1
     23  5a59				   .LUM2      SET	.LUM2 + .STEP2
     24  5a59				   .LUM3      SET	.LUM3 + .STEP3
     13  5a59					      REPEND
     14  5a59		       66		      .byte.b	$60+(.LUM1/256)
     15  5a5a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a5b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a5c
     18  5a5c
     19  5a5c
     20  5a5c
     21  5a5c
     22  5a5c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a5c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a5c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a5c					      REPEND
     14  5a5c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a5d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a5e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a5f
     18  5a5f
     19  5a5f
     20  5a5f
     21  5a5f
     22  5a5f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a5f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a5f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a5f					      REPEND
     14  5a5f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a60		       84		      .byte.b	$80+(.LUM2/256)
     16  5a61		       18		      .byte.b	$10+(.LUM3/256)
     17  5a62
     18  5a62
     19  5a62
     20  5a62
     21  5a62
     22  5a62				   .LUM1      SET	.LUM1 + .STEP1
     23  5a62				   .LUM2      SET	.LUM2 + .STEP2
     24  5a62				   .LUM3      SET	.LUM3 + .STEP3
     13  5a62					      REPEND
     14  5a62		       66		      .byte.b	$60+(.LUM1/256)
     15  5a63		       84		      .byte.b	$80+(.LUM2/256)
     16  5a64		       18		      .byte.b	$10+(.LUM3/256)
     17  5a65
     18  5a65
     19  5a65
     20  5a65
     21  5a65
     22  5a65				   .LUM1      SET	.LUM1 + .STEP1
     23  5a65				   .LUM2      SET	.LUM2 + .STEP2
     24  5a65				   .LUM3      SET	.LUM3 + .STEP3
     13  5a65					      REPEND
     14  5a65		       66		      .byte.b	$60+(.LUM1/256)
     15  5a66		       84		      .byte.b	$80+(.LUM2/256)
     16  5a67		       18		      .byte.b	$10+(.LUM3/256)
     17  5a68
     18  5a68
     19  5a68
     20  5a68
     21  5a68
     22  5a68				   .LUM1      SET	.LUM1 + .STEP1
     23  5a68				   .LUM2      SET	.LUM2 + .STEP2
     24  5a68				   .LUM3      SET	.LUM3 + .STEP3
     13  5a68					      REPEND
     14  5a68		       66		      .byte.b	$60+(.LUM1/256)
     15  5a69		       84		      .byte.b	$80+(.LUM2/256)
     16  5a6a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a6b
     18  5a6b
     19  5a6b
     20  5a6b
     21  5a6b
     22  5a6b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a6b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a6b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a6b					      REPEND
     14  5a6b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a6c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a6d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a6e
     18  5a6e
     19  5a6e
     20  5a6e
     21  5a6e
     22  5a6e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a6e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a6e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a6e					      REPEND
     14  5a6e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a6f		       84		      .byte.b	$80+(.LUM2/256)
     16  5a70		       18		      .byte.b	$10+(.LUM3/256)
     17  5a71
     18  5a71
     19  5a71
     20  5a71
     21  5a71
     22  5a71				   .LUM1      SET	.LUM1 + .STEP1
     23  5a71				   .LUM2      SET	.LUM2 + .STEP2
     24  5a71				   .LUM3      SET	.LUM3 + .STEP3
     13  5a71					      REPEND
     14  5a71		       66		      .byte.b	$60+(.LUM1/256)
     15  5a72		       84		      .byte.b	$80+(.LUM2/256)
     16  5a73		       18		      .byte.b	$10+(.LUM3/256)
     17  5a74
     18  5a74
     19  5a74
     20  5a74
     21  5a74
     22  5a74				   .LUM1      SET	.LUM1 + .STEP1
     23  5a74				   .LUM2      SET	.LUM2 + .STEP2
     24  5a74				   .LUM3      SET	.LUM3 + .STEP3
     13  5a74					      REPEND
     14  5a74		       66		      .byte.b	$60+(.LUM1/256)
     15  5a75		       84		      .byte.b	$80+(.LUM2/256)
     16  5a76		       18		      .byte.b	$10+(.LUM3/256)
     17  5a77
     18  5a77
     19  5a77
     20  5a77
     21  5a77
     22  5a77				   .LUM1      SET	.LUM1 + .STEP1
     23  5a77				   .LUM2      SET	.LUM2 + .STEP2
     24  5a77				   .LUM3      SET	.LUM3 + .STEP3
     13  5a77					      REPEND
     14  5a77		       66		      .byte.b	$60+(.LUM1/256)
     15  5a78		       84		      .byte.b	$80+(.LUM2/256)
     16  5a79		       18		      .byte.b	$10+(.LUM3/256)
     17  5a7a
     18  5a7a
     19  5a7a
     20  5a7a
     21  5a7a
     22  5a7a				   .LUM1      SET	.LUM1 + .STEP1
     23  5a7a				   .LUM2      SET	.LUM2 + .STEP2
     24  5a7a				   .LUM3      SET	.LUM3 + .STEP3
     13  5a7a					      REPEND
     14  5a7a		       66		      .byte.b	$60+(.LUM1/256)
     15  5a7b		       84		      .byte.b	$80+(.LUM2/256)
     16  5a7c		       18		      .byte.b	$10+(.LUM3/256)
     17  5a7d
     18  5a7d
     19  5a7d
     20  5a7d
     21  5a7d
     22  5a7d				   .LUM1      SET	.LUM1 + .STEP1
     23  5a7d				   .LUM2      SET	.LUM2 + .STEP2
     24  5a7d				   .LUM3      SET	.LUM3 + .STEP3
     13  5a7d					      REPEND
     14  5a7d		       66		      .byte.b	$60+(.LUM1/256)
     15  5a7e		       84		      .byte.b	$80+(.LUM2/256)
     16  5a7f		       18		      .byte.b	$10+(.LUM3/256)
     17  5a80
     18  5a80
     19  5a80
     20  5a80
     21  5a80
     22  5a80				   .LUM1      SET	.LUM1 + .STEP1
     23  5a80				   .LUM2      SET	.LUM2 + .STEP2
     24  5a80				   .LUM3      SET	.LUM3 + .STEP3
     13  5a80					      REPEND
     14  5a80		       66		      .byte.b	$60+(.LUM1/256)
     15  5a81		       84		      .byte.b	$80+(.LUM2/256)
     16  5a82		       18		      .byte.b	$10+(.LUM3/256)
     17  5a83
     18  5a83
     19  5a83
     20  5a83
     21  5a83
     22  5a83				   .LUM1      SET	.LUM1 + .STEP1
     23  5a83				   .LUM2      SET	.LUM2 + .STEP2
     24  5a83				   .LUM3      SET	.LUM3 + .STEP3
     13  5a83					      REPEND
     14  5a83		       66		      .byte.b	$60+(.LUM1/256)
     15  5a84		       84		      .byte.b	$80+(.LUM2/256)
     16  5a85		       18		      .byte.b	$10+(.LUM3/256)
     17  5a86
     18  5a86
     19  5a86
     20  5a86
     21  5a86
     22  5a86				   .LUM1      SET	.LUM1 + .STEP1
     23  5a86				   .LUM2      SET	.LUM2 + .STEP2
     24  5a86				   .LUM3      SET	.LUM3 + .STEP3
     13  5a86					      REPEND
     14  5a86		       66		      .byte.b	$60+(.LUM1/256)
     15  5a87		       84		      .byte.b	$80+(.LUM2/256)
     16  5a88		       18		      .byte.b	$10+(.LUM3/256)
     17  5a89
     18  5a89
     19  5a89
     20  5a89
     21  5a89
     22  5a89				   .LUM1      SET	.LUM1 + .STEP1
     23  5a89				   .LUM2      SET	.LUM2 + .STEP2
     24  5a89				   .LUM3      SET	.LUM3 + .STEP3
     13  5a89					      REPEND
     14  5a89		       66		      .byte.b	$60+(.LUM1/256)
     15  5a8a		       84		      .byte.b	$80+(.LUM2/256)
     16  5a8b		       18		      .byte.b	$10+(.LUM3/256)
     17  5a8c
     18  5a8c
     19  5a8c
     20  5a8c
     21  5a8c
     22  5a8c				   .LUM1      SET	.LUM1 + .STEP1
     23  5a8c				   .LUM2      SET	.LUM2 + .STEP2
     24  5a8c				   .LUM3      SET	.LUM3 + .STEP3
     13  5a8c					      REPEND
     14  5a8c		       66		      .byte.b	$60+(.LUM1/256)
     15  5a8d		       84		      .byte.b	$80+(.LUM2/256)
     16  5a8e		       18		      .byte.b	$10+(.LUM3/256)
     17  5a8f
     18  5a8f
     19  5a8f
     20  5a8f
     21  5a8f
     22  5a8f				   .LUM1      SET	.LUM1 + .STEP1
     23  5a8f				   .LUM2      SET	.LUM2 + .STEP2
     24  5a8f				   .LUM3      SET	.LUM3 + .STEP3
     13  5a8f					      REPEND
     14  5a8f		       66		      .byte.b	$60+(.LUM1/256)
     15  5a90		       84		      .byte.b	$80+(.LUM2/256)
     16  5a91		       18		      .byte.b	$10+(.LUM3/256)
     17  5a92
     18  5a92
     19  5a92
     20  5a92
     21  5a92
     22  5a92				   .LUM1      SET	.LUM1 + .STEP1
     23  5a92				   .LUM2      SET	.LUM2 + .STEP2
     24  5a92				   .LUM3      SET	.LUM3 + .STEP3
     13  5a92					      REPEND
     14  5a92		       66		      .byte.b	$60+(.LUM1/256)
     15  5a93		       84		      .byte.b	$80+(.LUM2/256)
     16  5a94		       18		      .byte.b	$10+(.LUM3/256)
     17  5a95
     18  5a95
     19  5a95
     20  5a95
     21  5a95
     22  5a95				   .LUM1      SET	.LUM1 + .STEP1
     23  5a95				   .LUM2      SET	.LUM2 + .STEP2
     24  5a95				   .LUM3      SET	.LUM3 + .STEP3
     13  5a95					      REPEND
     14  5a95		       66		      .byte.b	$60+(.LUM1/256)
     15  5a96		       84		      .byte.b	$80+(.LUM2/256)
     16  5a97		       18		      .byte.b	$10+(.LUM3/256)
     17  5a98
     18  5a98
     19  5a98
     20  5a98
     21  5a98
     22  5a98				   .LUM1      SET	.LUM1 + .STEP1
     23  5a98				   .LUM2      SET	.LUM2 + .STEP2
     24  5a98				   .LUM3      SET	.LUM3 + .STEP3
     13  5a98					      REPEND
     14  5a98		       66		      .byte.b	$60+(.LUM1/256)
     15  5a99		       84		      .byte.b	$80+(.LUM2/256)
     16  5a9a		       18		      .byte.b	$10+(.LUM3/256)
     17  5a9b
     18  5a9b
     19  5a9b
     20  5a9b
     21  5a9b
     22  5a9b				   .LUM1      SET	.LUM1 + .STEP1
     23  5a9b				   .LUM2      SET	.LUM2 + .STEP2
     24  5a9b				   .LUM3      SET	.LUM3 + .STEP3
     13  5a9b					      REPEND
     14  5a9b		       66		      .byte.b	$60+(.LUM1/256)
     15  5a9c		       84		      .byte.b	$80+(.LUM2/256)
     16  5a9d		       18		      .byte.b	$10+(.LUM3/256)
     17  5a9e
     18  5a9e
     19  5a9e
     20  5a9e
     21  5a9e
     22  5a9e				   .LUM1      SET	.LUM1 + .STEP1
     23  5a9e				   .LUM2      SET	.LUM2 + .STEP2
     24  5a9e				   .LUM3      SET	.LUM3 + .STEP3
     13  5a9e					      REPEND
     14  5a9e		       66		      .byte.b	$60+(.LUM1/256)
     15  5a9f		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa0		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa1
     18  5aa1
     19  5aa1
     20  5aa1
     21  5aa1
     22  5aa1				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa1				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa1				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa1					      REPEND
     14  5aa1		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa2		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa3		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa4
     18  5aa4
     19  5aa4
     20  5aa4
     21  5aa4
     22  5aa4				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa4				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa4				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa4					      REPEND
     14  5aa4		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa5		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa6		       18		      .byte.b	$10+(.LUM3/256)
     17  5aa7
     18  5aa7
     19  5aa7
     20  5aa7
     21  5aa7
     22  5aa7				   .LUM1      SET	.LUM1 + .STEP1
     23  5aa7				   .LUM2      SET	.LUM2 + .STEP2
     24  5aa7				   .LUM3      SET	.LUM3 + .STEP3
     13  5aa7					      REPEND
     14  5aa7		       66		      .byte.b	$60+(.LUM1/256)
     15  5aa8		       84		      .byte.b	$80+(.LUM2/256)
     16  5aa9		       18		      .byte.b	$10+(.LUM3/256)
     17  5aaa
     18  5aaa
     19  5aaa
     20  5aaa
     21  5aaa
     22  5aaa				   .LUM1      SET	.LUM1 + .STEP1
     23  5aaa				   .LUM2      SET	.LUM2 + .STEP2
     24  5aaa				   .LUM3      SET	.LUM3 + .STEP3
     13  5aaa					      REPEND
     14  5aaa		       66		      .byte.b	$60+(.LUM1/256)
     15  5aab		       84		      .byte.b	$80+(.LUM2/256)
     16  5aac		       18		      .byte.b	$10+(.LUM3/256)
     17  5aad
     18  5aad
     19  5aad
     20  5aad
     21  5aad
     22  5aad				   .LUM1      SET	.LUM1 + .STEP1
     23  5aad				   .LUM2      SET	.LUM2 + .STEP2
     24  5aad				   .LUM3      SET	.LUM3 + .STEP3
     13  5aad					      REPEND
     14  5aad		       66		      .byte.b	$60+(.LUM1/256)
     15  5aae		       84		      .byte.b	$80+(.LUM2/256)
     16  5aaf		       18		      .byte.b	$10+(.LUM3/256)
     17  5ab0
     18  5ab0
     19  5ab0
     20  5ab0
     21  5ab0
     22  5ab0				   .LUM1      SET	.LUM1 + .STEP1
     23  5ab0				   .LUM2      SET	.LUM2 + .STEP2
     24  5ab0				   .LUM3      SET	.LUM3 + .STEP3
     25  5ab0					      REPEND
    259  5ab0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  5ab0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  5ab0					      include	"titleData.asm"
      1  5ab0				   COL_0
      2  5ab0		       00		      .byte.b	0	;R (71)
      3  5ab1		       00		      .byte.b	0	;G
      4  5ab2		       00		      .byte.b	0	;B
      5  5ab3		       40		      .byte.b	64	;R (70)
      6  5ab4		       40		      .byte.b	64	;G
      7  5ab5		       00		      .byte.b	0	;B
      8  5ab6		       00		      .byte.b	0	;R (69)
      9  5ab7		       00		      .byte.b	0	;G
     10  5ab8		       00		      .byte.b	0	;B
     11  5ab9		       00		      .byte.b	0	;R (68)
     12  5aba		       80		      .byte.b	128	;G
     13  5abb		       00		      .byte.b	0	;B
     14  5abc		       00		      .byte.b	0	;R (67)
     15  5abd		       20		      .byte.b	32	;G
     16  5abe		       00		      .byte.b	0	;B
     17  5abf		       80		      .byte.b	128	;R (66)
     18  5ac0		       80		      .byte.b	128	;G
     19  5ac1		       00		      .byte.b	0	;B
     20  5ac2		       c0		      .byte.b	192	;R (65)
     21  5ac3		       c0		      .byte.b	192	;G
     22  5ac4		       00		      .byte.b	0	;B
     23  5ac5		       40		      .byte.b	64	;R (64)
     24  5ac6		       c0		      .byte.b	192	;G
     25  5ac7		       00		      .byte.b	0	;B
     26  5ac8		       00		      .byte.b	0	;R (63)
     27  5ac9		       a0		      .byte.b	160	;G
     28  5aca		       00		      .byte.b	0	;B
     29  5acb		       10		      .byte.b	16	;R (62)
     30  5acc		       70		      .byte.b	112	;G
     31  5acd		       00		      .byte.b	0	;B
     32  5ace		       00		      .byte.b	0	;R (61)
     33  5acf		       80		      .byte.b	128	;G
     34  5ad0		       40		      .byte.b	64	;B
     35  5ad1		       00		      .byte.b	0	;R (60)
     36  5ad2		       c0		      .byte.b	192	;G
     37  5ad3		       00		      .byte.b	0	;B
     38  5ad4		       00		      .byte.b	0	;R (59)
     39  5ad5		       c0		      .byte.b	192	;G
     40  5ad6		       00		      .byte.b	0	;B
     41  5ad7		       00		      .byte.b	0	;R (58)
     42  5ad8		       40		      .byte.b	64	;G
     43  5ad9		       00		      .byte.b	0	;B
     44  5ada		       00		      .byte.b	0	;R (57)
     45  5adb		       c0		      .byte.b	192	;G
     46  5adc		       00		      .byte.b	0	;B
     47  5add		       00		      .byte.b	0	;R (56)
     48  5ade		       60		      .byte.b	96	;G
     49  5adf		       00		      .byte.b	0	;B
     50  5ae0		       00		      .byte.b	0	;R (55)
     51  5ae1		       80		      .byte.b	128	;G
     52  5ae2		       00		      .byte.b	0	;B
     53  5ae3		       00		      .byte.b	0	;R (54)
     54  5ae4		       40		      .byte.b	64	;G
     55  5ae5		       00		      .byte.b	0	;B
     56  5ae6		       00		      .byte.b	0	;R (53)
     57  5ae7		       80		      .byte.b	128	;G
     58  5ae8		       00		      .byte.b	0	;B
     59  5ae9		       00		      .byte.b	0	;R (52)
     60  5aea		       80		      .byte.b	128	;G
     61  5aeb		       00		      .byte.b	0	;B
     62  5aec		       00		      .byte.b	0	;R (51)
     63  5aed		       10		      .byte.b	16	;G
     64  5aee		       00		      .byte.b	0	;B
     65  5aef		       00		      .byte.b	0	;R (50)
     66  5af0		       00		      .byte.b	0	;G
     67  5af1		       00		      .byte.b	0	;B
     68  5af2		       00		      .byte.b	0	;R (49)
     69  5af3		       00		      .byte.b	0	;G
     70  5af4		       00		      .byte.b	0	;B
     71  5af5		       00		      .byte.b	0	;R (48)
     72  5af6		       00		      .byte.b	0	;G
     73  5af7		       00		      .byte.b	0	;B
     74  5af8		       00		      .byte.b	0	;R (47)
     75  5af9		       00		      .byte.b	0	;G
     76  5afa		       00		      .byte.b	0	;B
     77  5afb		       00		      .byte.b	0	;R (46)
     78  5afc		       40		      .byte.b	64	;G
     79  5afd		       00		      .byte.b	0	;B
     80  5afe		       00		      .byte.b	0	;R (45)
     81  5aff		       00		      .byte.b	0	;G
     82  5b00		       00		      .byte.b	0	;B
     83  5b01		       00		      .byte.b	0	;R (44)
     84  5b02		       00		      .byte.b	0	;G
     85  5b03		       00		      .byte.b	0	;B
     86  5b04		       00		      .byte.b	0	;R (43)
     87  5b05		       00		      .byte.b	0	;G
     88  5b06		       00		      .byte.b	0	;B
     89  5b07		       00		      .byte.b	0	;R (42)
     90  5b08		       40		      .byte.b	64	;G
     91  5b09		       00		      .byte.b	0	;B
     92  5b0a		       00		      .byte.b	0	;R (41)
     93  5b0b		       00		      .byte.b	0	;G
     94  5b0c		       00		      .byte.b	0	;B
     95  5b0d		       00		      .byte.b	0	;R (40)
     96  5b0e		       00		      .byte.b	0	;G
     97  5b0f		       00		      .byte.b	0	;B
     98  5b10		       00		      .byte.b	0	;R (39)
     99  5b11		       20		      .byte.b	32	;G
    100  5b12		       00		      .byte.b	0	;B
    101  5b13		       00		      .byte.b	0	;R (38)
    102  5b14		       00		      .byte.b	0	;G
    103  5b15		       00		      .byte.b	0	;B
    104  5b16		       00		      .byte.b	0	;R (37)
    105  5b17		       10		      .byte.b	16	;G
    106  5b18		       00		      .byte.b	0	;B
    107  5b19		       00		      .byte.b	0	;R (36)
    108  5b1a		       00		      .byte.b	0	;G
    109  5b1b		       00		      .byte.b	0	;B
    110  5b1c		       00		      .byte.b	0	;R (35)
    111  5b1d		       40		      .byte.b	64	;G
    112  5b1e		       00		      .byte.b	0	;B
    113  5b1f		       00		      .byte.b	0	;R (34)
    114  5b20		       20		      .byte.b	32	;G
    115  5b21		       00		      .byte.b	0	;B
    116  5b22		       00		      .byte.b	0	;R (33)
    117  5b23		       00		      .byte.b	0	;G
    118  5b24		       00		      .byte.b	0	;B
    119  5b25		       00		      .byte.b	0	;R (32)
    120  5b26		       00		      .byte.b	0	;G
    121  5b27		       00		      .byte.b	0	;B
    122  5b28		       00		      .byte.b	0	;R (31)
    123  5b29		       20		      .byte.b	32	;G
    124  5b2a		       00		      .byte.b	0	;B
    125  5b2b		       00		      .byte.b	0	;R (30)
    126  5b2c		       00		      .byte.b	0	;G
    127  5b2d		       00		      .byte.b	0	;B
    128  5b2e		       00		      .byte.b	0	;R (29)
    129  5b2f		       80		      .byte.b	128	;G
    130  5b30		       00		      .byte.b	0	;B
    131  5b31		       00		      .byte.b	0	;R (28)
    132  5b32		       00		      .byte.b	0	;G
    133  5b33		       00		      .byte.b	0	;B
    134  5b34		       00		      .byte.b	0	;R (27)
    135  5b35		       20		      .byte.b	32	;G
    136  5b36		       00		      .byte.b	0	;B
    137  5b37		       00		      .byte.b	0	;R (26)
    138  5b38		       00		      .byte.b	0	;G
    139  5b39		       00		      .byte.b	0	;B
    140  5b3a		       00		      .byte.b	0	;R (25)
    141  5b3b		       00		      .byte.b	0	;G
    142  5b3c		       00		      .byte.b	0	;B
    143  5b3d		       00		      .byte.b	0	;R (24)
    144  5b3e		       20		      .byte.b	32	;G
    145  5b3f		       00		      .byte.b	0	;B
    146  5b40		       00		      .byte.b	0	;R (23)
    147  5b41		       00		      .byte.b	0	;G
    148  5b42		       00		      .byte.b	0	;B
    149  5b43		       00		      .byte.b	0	;R (22)
    150  5b44		       00		      .byte.b	0	;G
    151  5b45		       00		      .byte.b	0	;B
    152  5b46		       00		      .byte.b	0	;R (21)
    153  5b47		       20		      .byte.b	32	;G
    154  5b48		       00		      .byte.b	0	;B
    155  5b49		       00		      .byte.b	0	;R (20)
    156  5b4a		       00		      .byte.b	0	;G
    157  5b4b		       00		      .byte.b	0	;B
    158  5b4c		       00		      .byte.b	0	;R (19)
    159  5b4d		       00		      .byte.b	0	;G
    160  5b4e		       00		      .byte.b	0	;B
    161  5b4f		       00		      .byte.b	0	;R (18)
    162  5b50		       00		      .byte.b	0	;G
    163  5b51		       00		      .byte.b	0	;B
    164  5b52		       00		      .byte.b	0	;R (17)
    165  5b53		       80		      .byte.b	128	;G
    166  5b54		       00		      .byte.b	0	;B
    167  5b55		       00		      .byte.b	0	;R (16)
    168  5b56		       00		      .byte.b	0	;G
    169  5b57		       00		      .byte.b	0	;B
    170  5b58		       00		      .byte.b	0	;R (15)
    171  5b59		       10		      .byte.b	16	;G
    172  5b5a		       00		      .byte.b	0	;B
    173  5b5b		       00		      .byte.b	0	;R (14)
    174  5b5c		       00		      .byte.b	0	;G
    175  5b5d		       00		      .byte.b	0	;B
    176  5b5e		       00		      .byte.b	0	;R (13)
    177  5b5f		       00		      .byte.b	0	;G
    178  5b60		       00		      .byte.b	0	;B
    179  5b61		       00		      .byte.b	0	;R (12)
    180  5b62		       80		      .byte.b	128	;G
    181  5b63		       00		      .byte.b	0	;B
    182  5b64		       00		      .byte.b	0	;R (11)
    183  5b65		       00		      .byte.b	0	;G
    184  5b66		       00		      .byte.b	0	;B
    185  5b67		       00		      .byte.b	0	;R (10)
    186  5b68		       00		      .byte.b	0	;G
    187  5b69		       00		      .byte.b	0	;B
    188  5b6a		       00		      .byte.b	0	;R (9)
    189  5b6b		       80		      .byte.b	128	;G
    190  5b6c		       00		      .byte.b	0	;B
    191  5b6d		       00		      .byte.b	0	;R (8)
    192  5b6e		       00		      .byte.b	0	;G
    193  5b6f		       00		      .byte.b	0	;B
    194  5b70		       00		      .byte.b	0	;R (7)
    195  5b71		       20		      .byte.b	32	;G
    196  5b72		       00		      .byte.b	0	;B
    197  5b73		       00		      .byte.b	0	;R (6)
    198  5b74		       00		      .byte.b	0	;G
    199  5b75		       00		      .byte.b	0	;B
    200  5b76		       00		      .byte.b	0	;R (5)
    201  5b77		       10		      .byte.b	16	;G
    202  5b78		       00		      .byte.b	0	;B
    203  5b79		       00		      .byte.b	0	;R (4)
    204  5b7a		       00		      .byte.b	0	;G
    205  5b7b		       00		      .byte.b	0	;B
    206  5b7c		       00		      .byte.b	0	;R (3)
    207  5b7d		       00		      .byte.b	0	;G
    208  5b7e		       00		      .byte.b	0	;B
    209  5b7f		       00		      .byte.b	0	;R (2)
    210  5b80		       40		      .byte.b	64	;G
    211  5b81		       00		      .byte.b	0	;B
    212  5b82		       00		      .byte.b	0	;R (1)
    213  5b83		       00		      .byte.b	0	;G
    214  5b84		       00		      .byte.b	0	;B
    215  5b85		       00		      .byte.b	0	;R (0)
    216  5b86		       00		      .byte.b	0	;G
    217  5b87		       00		      .byte.b	0	;B
    218  5b88				   COL_1
    219  5b88		       80		      .byte.b	128	;R (71)
    220  5b89		       80		      .byte.b	128	;G
    221  5b8a		       00		      .byte.b	0	;B
    222  5b8b		       10		      .byte.b	16	;R (70)
    223  5b8c		       14		      .byte.b	20	;G
    224  5b8d		       00		      .byte.b	0	;B
    225  5b8e		       00		      .byte.b	0	;R (69)
    226  5b8f		       41		      .byte.b	65	;G
    227  5b90		       00		      .byte.b	0	;B
    228  5b91		       00		      .byte.b	0	;R (68)
    229  5b92		       08		      .byte.b	8	;G
    230  5b93		       00		      .byte.b	0	;B
    231  5b94		       20		      .byte.b	32	;R (67)
    232  5b95		       20		      .byte.b	32	;G
    233  5b96		       00		      .byte.b	0	;B
    234  5b97		       63		      .byte.b	99	;R (66)
    235  5b98		       6b		      .byte.b	107	;G
    236  5b99		       00		      .byte.b	0	;B
    237  5b9a		       ff		      .byte.b	255	;R (65)
    238  5b9b		       f5		      .byte.b	245	;G
    239  5b9c		       00		      .byte.b	0	;B
    240  5b9d		       80		      .byte.b	128	;R (64)
    241  5b9e		       fb		      .byte.b	251	;G
    242  5b9f		       04		      .byte.b	4	;B
    243  5ba0		       00		      .byte.b	0	;R (63)
    244  5ba1		       b7		      .byte.b	183	;G
    245  5ba2		       00		      .byte.b	0	;B
    246  5ba3		       00		      .byte.b	0	;R (62)
    247  5ba4		       b5		      .byte.b	181	;G
    248  5ba5		       00		      .byte.b	0	;B
    249  5ba6		       00		      .byte.b	0	;R (61)
    250  5ba7		       ef		      .byte.b	239	;G
    251  5ba8		       10		      .byte.b	16	;B
    252  5ba9		       00		      .byte.b	0	;R (60)
    253  5baa		       bd		      .byte.b	189	;G
    254  5bab		       42		      .byte.b	66	;B
    255  5bac		       00		      .byte.b	0	;R (59)
    256  5bad		       77		      .byte.b	119	;G
    257  5bae		       00		      .byte.b	0	;B
    258  5baf		       00		      .byte.b	0	;R (58)
    259  5bb0		       ee		      .byte.b	238	;G
    260  5bb1		       00		      .byte.b	0	;B
    261  5bb2		       00		      .byte.b	0	;R (57)
    262  5bb3		       9b		      .byte.b	155	;G
    263  5bb4		       00		      .byte.b	0	;B
    264  5bb5		       00		      .byte.b	0	;R (56)
    265  5bb6		       f2		      .byte.b	242	;G
    266  5bb7		       00		      .byte.b	0	;B
    267  5bb8		       00		      .byte.b	0	;R (55)
    268  5bb9		       40		      .byte.b	64	;G
    269  5bba		       00		      .byte.b	0	;B
    270  5bbb		       00		      .byte.b	0	;R (54)
    271  5bbc		       df		      .byte.b	223	;G
    272  5bbd		       00		      .byte.b	0	;B
    273  5bbe		       10		      .byte.b	16	;R (53)
    274  5bbf		       69		      .byte.b	105	;G
    275  5bc0		       10		      .byte.b	16	;B
    276  5bc1		       00		      .byte.b	0	;R (52)
    277  5bc2		       4b		      .byte.b	75	;G
    278  5bc3		       00		      .byte.b	0	;B
    279  5bc4		       00		      .byte.b	0	;R (51)
    280  5bc5		       b0		      .byte.b	176	;G
    281  5bc6		       00		      .byte.b	0	;B
    282  5bc7		       00		      .byte.b	0	;R (50)
    283  5bc8		       a7		      .byte.b	167	;G
    284  5bc9		       00		      .byte.b	0	;B
    285  5bca		       00		      .byte.b	0	;R (49)
    286  5bcb		       7d		      .byte.b	125	;G
    287  5bcc		       02		      .byte.b	2	;B
    288  5bcd		       00		      .byte.b	0	;R (48)
    289  5bce		       db		      .byte.b	219	;G
    290  5bcf		       20		      .byte.b	32	;B
    291  5bd0		       00		      .byte.b	0	;R (47)
    292  5bd1		       6d		      .byte.b	109	;G
    293  5bd2		       00		      .byte.b	0	;B
    294  5bd3		       00		      .byte.b	0	;R (46)
    295  5bd4		       ea		      .byte.b	234	;G
    296  5bd5		       00		      .byte.b	0	;B
    297  5bd6		       00		      .byte.b	0	;R (45)
    298  5bd7		       13		      .byte.b	19	;G
    299  5bd8		       00		      .byte.b	0	;B
    300  5bd9		       00		      .byte.b	0	;R (44)
    301  5bda		       7e		      .byte.b	126	;G
    302  5bdb		       01		      .byte.b	1	;B
    303  5bdc		       22		      .byte.b	34	;R (43)
    304  5bdd		       77		      .byte.b	119	;G
    305  5bde		       08		      .byte.b	8	;B
    306  5bdf		       04		      .byte.b	4	;R (42)
    307  5be0		       5f		      .byte.b	95	;G
    308  5be1		       00		      .byte.b	0	;B
    309  5be2		       00		      .byte.b	0	;R (41)
    310  5be3		       6f		      .byte.b	111	;G
    311  5be4		       00		      .byte.b	0	;B
    312  5be5		       00		      .byte.b	0	;R (40)
    313  5be6		       b5		      .byte.b	181	;G
    314  5be7		       00		      .byte.b	0	;B
    315  5be8		       00		      .byte.b	0	;R (39)
    316  5be9		       5b		      .byte.b	91	;G
    317  5bea		       00		      .byte.b	0	;B
    318  5beb		       00		      .byte.b	0	;R (38)
    319  5bec		       57		      .byte.b	87	;G
    320  5bed		       00		      .byte.b	0	;B
    321  5bee		       20		      .byte.b	32	;R (37)
    322  5bef		       4d		      .byte.b	77	;G
    323  5bf0		       22		      .byte.b	34	;B
    324  5bf1		       00		      .byte.b	0	;R (36)
    325  5bf2		       55		      .byte.b	85	;G
    326  5bf3		       00		      .byte.b	0	;B
    327  5bf4		       01		      .byte.b	1	;R (35)
    328  5bf5		       56		      .byte.b	86	;G
    329  5bf6		       00		      .byte.b	0	;B
    330  5bf7		       02		      .byte.b	2	;R (34)
    331  5bf8		       57		      .byte.b	87	;G
    332  5bf9		       00		      .byte.b	0	;B
    333  5bfa		       00		      .byte.b	0	;R (33)
    334  5bfb		       2a		      .byte.b	42	;G
    335  5bfc		       01		      .byte.b	1	;B
    336  5bfd		       01		      .byte.b	1	;R (32)
    337  5bfe		       ab		      .byte.b	171	;G
    338  5bff		       00		      .byte.b	0	;B
    339  5c00		       22		      .byte.b	34	;R (31)
    340  5c01		       17		      .byte.b	23	;G
    341  5c02		       20		      .byte.b	32	;B
    342  5c03		       00		      .byte.b	0	;R (30)
    343  5c04		       55		      .byte.b	85	;G
    344  5c05		       02		      .byte.b	2	;B
    345  5c06		       22		      .byte.b	34	;R (29)
    346  5c07		       17		      .byte.b	23	;G
    347  5c08		       20		      .byte.b	32	;B
    348  5c09		       00		      .byte.b	0	;R (28)
    349  5c0a		       2b		      .byte.b	43	;G
    350  5c0b		       00		      .byte.b	0	;B
    351  5c0c		       00		      .byte.b	0	;R (27)
    352  5c0d		       95		      .byte.b	149	;G
    353  5c0e		       02		      .byte.b	2	;B
    354  5c0f		       00		      .byte.b	0	;R (26)
    355  5c10		       17		      .byte.b	23	;G
    356  5c11		       00		      .byte.b	0	;B
    357  5c12		       00		      .byte.b	0	;R (25)
    358  5c13		       2d		      .byte.b	45	;G
    359  5c14		       00		      .byte.b	0	;B
    360  5c15		       00		      .byte.b	0	;R (24)
    361  5c16		       b4		      .byte.b	180	;G
    362  5c17		       00		      .byte.b	0	;B
    363  5c18		       00		      .byte.b	0	;R (23)
    364  5c19		       0a		      .byte.b	10	;G
    365  5c1a		       00		      .byte.b	0	;B
    366  5c1b		       10		      .byte.b	16	;R (22)
    367  5c1c		       3c		      .byte.b	60	;G
    368  5c1d		       00		      .byte.b	0	;B
    369  5c1e		       10		      .byte.b	16	;R (21)
    370  5c1f		       98		      .byte.b	152	;G
    371  5c20		       00		      .byte.b	0	;B
    372  5c21		       10		      .byte.b	16	;R (20)
    373  5c22		       1a		      .byte.b	26	;G
    374  5c23		       00		      .byte.b	0	;B
    375  5c24		       00		      .byte.b	0	;R (19)
    376  5c25		       14		      .byte.b	20	;G
    377  5c26		       00		      .byte.b	0	;B
    378  5c27		       00		      .byte.b	0	;R (18)
    379  5c28		       5a		      .byte.b	90	;G
    380  5c29		       00		      .byte.b	0	;B
    381  5c2a		       00		      .byte.b	0	;R (17)
    382  5c2b		       09		      .byte.b	9	;G
    383  5c2c		       00		      .byte.b	0	;B
    384  5c2d		       08		      .byte.b	8	;R (16)
    385  5c2e		       1d		      .byte.b	29	;G
    386  5c2f		       00		      .byte.b	0	;B
    387  5c30		       00		      .byte.b	0	;R (15)
    388  5c31		       1a		      .byte.b	26	;G
    389  5c32		       00		      .byte.b	0	;B
    390  5c33		       20		      .byte.b	32	;R (14)
    391  5c34		       ba		      .byte.b	186	;G
    392  5c35		       00		      .byte.b	0	;B
    393  5c36		       00		      .byte.b	0	;R (13)
    394  5c37		       12		      .byte.b	18	;G
    395  5c38		       00		      .byte.b	0	;B
    396  5c39		       00		      .byte.b	0	;R (12)
    397  5c3a		       1a		      .byte.b	26	;G
    398  5c3b		       00		      .byte.b	0	;B
    399  5c3c		       00		      .byte.b	0	;R (11)
    400  5c3d		       2d		      .byte.b	45	;G
    401  5c3e		       10		      .byte.b	16	;B
    402  5c3f		       10		      .byte.b	16	;R (10)
    403  5c40		       3b		      .byte.b	59	;G
    404  5c41		       00		      .byte.b	0	;B
    405  5c42		       24		      .byte.b	36	;R (9)
    406  5c43		       39		      .byte.b	57	;G
    407  5c44		       04		      .byte.b	4	;B
    408  5c45		       20		      .byte.b	32	;R (8)
    409  5c46		       35		      .byte.b	53	;G
    410  5c47		       00		      .byte.b	0	;B
    411  5c48		       00		      .byte.b	0	;R (7)
    412  5c49		       3d		      .byte.b	61	;G
    413  5c4a		       00		      .byte.b	0	;B
    414  5c4b		       00		      .byte.b	0	;R (6)
    415  5c4c		       32		      .byte.b	50	;G
    416  5c4d		       00		      .byte.b	0	;B
    417  5c4e		       00		      .byte.b	0	;R (5)
    418  5c4f		       98		      .byte.b	152	;G
    419  5c50		       00		      .byte.b	0	;B
    420  5c51		       00		      .byte.b	0	;R (4)
    421  5c52		       12		      .byte.b	18	;G
    422  5c53		       00		      .byte.b	0	;B
    423  5c54		       00		      .byte.b	0	;R (3)
    424  5c55		       20		      .byte.b	32	;G
    425  5c56		       00		      .byte.b	0	;B
    426  5c57		       01		      .byte.b	1	;R (2)
    427  5c58		       49		      .byte.b	73	;G
    428  5c59		       00		      .byte.b	0	;B
    429  5c5a		       20		      .byte.b	32	;R (1)
    430  5c5b		       20		      .byte.b	32	;G
    431  5c5c		       00		      .byte.b	0	;B
    432  5c5d		       00		      .byte.b	0	;R (0)
    433  5c5e		       00		      .byte.b	0	;G
    434  5c5f		       00		      .byte.b	0	;B
    435  5c60				   COL_2
    436  5c60		       14		      .byte.b	20	;R (71)
    437  5c61		       14		      .byte.b	20	;G
    438  5c62		       00		      .byte.b	0	;B
    439  5c63		       40		      .byte.b	64	;R (70)
    440  5c64		       42		      .byte.b	66	;G
    441  5c65		       00		      .byte.b	0	;B
    442  5c66		       a8		      .byte.b	168	;R (69)
    443  5c67		       a8		      .byte.b	168	;G
    444  5c68		       00		      .byte.b	0	;B
    445  5c69		       fd		      .byte.b	253	;R (68)
    446  5c6a		       1d		      .byte.b	29	;G
    447  5c6b		       00		      .byte.b	0	;B
    448  5c6c		       f0		      .byte.b	240	;R (67)
    449  5c6d		       44		      .byte.b	68	;G
    450  5c6e		       08		      .byte.b	8	;B
    451  5c6f		       ff		      .byte.b	255	;R (66)
    452  5c70		       2f		      .byte.b	47	;G
    453  5c71		       00		      .byte.b	0	;B
    454  5c72		       ff		      .byte.b	255	;R (65)
    455  5c73		       0e		      .byte.b	14	;G
    456  5c74		       00		      .byte.b	0	;B
    457  5c75		       f8		      .byte.b	248	;R (64)
    458  5c76		       0f		      .byte.b	15	;G
    459  5c77		       00		      .byte.b	0	;B
    460  5c78		       f8		      .byte.b	248	;R (63)
    461  5c79		       2e		      .byte.b	46	;G
    462  5c7a		       00		      .byte.b	0	;B
    463  5c7b		       f8		      .byte.b	248	;R (62)
    464  5c7c		       1e		      .byte.b	30	;G
    465  5c7d		       01		      .byte.b	1	;B
    466  5c7e		       74		      .byte.b	116	;R (61)
    467  5c7f		       23		      .byte.b	35	;G
    468  5c80		       88		      .byte.b	136	;B
    469  5c81		       fc		      .byte.b	252	;R (60)
    470  5c82		       0f		      .byte.b	15	;G
    471  5c83		       00		      .byte.b	0	;B
    472  5c84		       f8		      .byte.b	248	;R (59)
    473  5c85		       06		      .byte.b	6	;G
    474  5c86		       01		      .byte.b	1	;B
    475  5c87		       f8		      .byte.b	248	;R (58)
    476  5c88		       8f		      .byte.b	143	;G
    477  5c89		       00		      .byte.b	0	;B
    478  5c8a		       e8		      .byte.b	232	;R (57)
    479  5c8b		       0e		      .byte.b	14	;G
    480  5c8c		       10		      .byte.b	16	;B
    481  5c8d		       e0		      .byte.b	224	;R (56)
    482  5c8e		       97		      .byte.b	151	;G
    483  5c8f		       00		      .byte.b	0	;B
    484  5c90		       f0		      .byte.b	240	;R (55)
    485  5c91		       3a		      .byte.b	58	;G
    486  5c92		       00		      .byte.b	0	;B
    487  5c93		       e0		      .byte.b	224	;R (54)
    488  5c94		       bb		      .byte.b	187	;G
    489  5c95		       04		      .byte.b	4	;B
    490  5c96		       e0		      .byte.b	224	;R (53)
    491  5c97		       3e		      .byte.b	62	;G
    492  5c98		       00		      .byte.b	0	;B
    493  5c99		       c0		      .byte.b	192	;R (52)
    494  5c9a		       2a		      .byte.b	42	;G
    495  5c9b		       00		      .byte.b	0	;B
    496  5c9c		       80		      .byte.b	128	;R (51)
    497  5c9d		       3f		      .byte.b	63	;G
    498  5c9e		       40		      .byte.b	64	;B
    499  5c9f		       f5		      .byte.b	245	;R (50)
    500  5ca0		       3f		      .byte.b	63	;G
    501  5ca1		       00		      .byte.b	0	;B
    502  5ca2		       e8		      .byte.b	232	;R (49)
    503  5ca3		       7f		      .byte.b	127	;G
    504  5ca4		       00		      .byte.b	0	;B
    505  5ca5		       e0		      .byte.b	224	;R (48)
    506  5ca6		       7a		      .byte.b	122	;G
    507  5ca7		       04		      .byte.b	4	;B
    508  5ca8		       c0		      .byte.b	192	;R (47)
    509  5ca9		       5f		      .byte.b	95	;G
    510  5caa		       00		      .byte.b	0	;B
    511  5cab		       90		      .byte.b	144	;R (46)
    512  5cac		       dd		      .byte.b	221	;G
    513  5cad		       02		      .byte.b	2	;B
    514  5cae		       84		      .byte.b	132	;R (45)
    515  5caf		       9f		      .byte.b	159	;G
    516  5cb0		       00		      .byte.b	0	;B
    517  5cb1		       c4		      .byte.b	196	;R (44)
    518  5cb2		       cf		      .byte.b	207	;G
    519  5cb3		       00		      .byte.b	0	;B
    520  5cb4		       c5		      .byte.b	197	;R (43)
    521  5cb5		       1f		      .byte.b	31	;G
    522  5cb6		       00		      .byte.b	0	;B
    523  5cb7		       d4		      .byte.b	212	;R (42)
    524  5cb8		       9f		      .byte.b	159	;G
    525  5cb9		       20		      .byte.b	32	;B
    526  5cba		       c8		      .byte.b	200	;R (41)
    527  5cbb		       1e		      .byte.b	30	;G
    528  5cbc		       01		      .byte.b	1	;B
    529  5cbd		       c8		      .byte.b	200	;R (40)
    530  5cbe		       5f		      .byte.b	95	;G
    531  5cbf		       00		      .byte.b	0	;B
    532  5cc0		       cd		      .byte.b	205	;R (39)
    533  5cc1		       5e		      .byte.b	94	;G
    534  5cc2		       00		      .byte.b	0	;B
    535  5cc3		       c7		      .byte.b	199	;R (38)
    536  5cc4		       5b		      .byte.b	91	;G
    537  5cc5		       00		      .byte.b	0	;B
    538  5cc6		       8b		      .byte.b	139	;R (37)
    539  5cc7		       1c		      .byte.b	28	;G
    540  5cc8		       00		      .byte.b	0	;B
    541  5cc9		       81		      .byte.b	129	;R (36)
    542  5cca		       9a		      .byte.b	154	;G
    543  5ccb		       04		      .byte.b	4	;B
    544  5ccc		       8e		      .byte.b	142	;R (35)
    545  5ccd		       9d		      .byte.b	157	;G
    546  5cce		       00		      .byte.b	0	;B
    547  5ccf		       2b		      .byte.b	43	;R (34)
    548  5cd0		       36		      .byte.b	54	;G
    549  5cd1		       00		      .byte.b	0	;B
    550  5cd2		       3a		      .byte.b	58	;R (33)
    551  5cd3		       0d		      .byte.b	13	;G
    552  5cd4		       00		      .byte.b	0	;B
    553  5cd5		       3e		      .byte.b	62	;R (32)
    554  5cd6		       85		      .byte.b	133	;G
    555  5cd7		       40		      .byte.b	64	;B
    556  5cd8		       fa		      .byte.b	250	;R (31)
    557  5cd9		       17		      .byte.b	23	;G
    558  5cda		       00		      .byte.b	0	;B
    559  5cdb		       ff		      .byte.b	255	;R (30)
    560  5cdc		       03		      .byte.b	3	;G
    561  5cdd		       00		      .byte.b	0	;B
    562  5cde		       fc		      .byte.b	252	;R (29)
    563  5cdf		       93		      .byte.b	147	;G
    564  5ce0		       00		      .byte.b	0	;B
    565  5ce1		       f7		      .byte.b	247	;R (28)
    566  5ce2		       81		      .byte.b	129	;G
    567  5ce3		       08		      .byte.b	8	;B
    568  5ce4		       ff		      .byte.b	255	;R (27)
    569  5ce5		       03		      .byte.b	3	;G
    570  5ce6		       00		      .byte.b	0	;B
    571  5ce7		       fe		      .byte.b	254	;R (26)
    572  5ce8		       2b		      .byte.b	43	;G
    573  5ce9		       00		      .byte.b	0	;B
    574  5cea		       fe		      .byte.b	254	;R (25)
    575  5ceb		       0a		      .byte.b	10	;G
    576  5cec		       00		      .byte.b	0	;B
    577  5ced		       fc		      .byte.b	252	;R (24)
    578  5cee		       4f		      .byte.b	79	;G
    579  5cef		       00		      .byte.b	0	;B
    580  5cf0		       fc		      .byte.b	252	;R (23)
    581  5cf1		       55		      .byte.b	85	;G
    582  5cf2		       00		      .byte.b	0	;B
    583  5cf3		       f8		      .byte.b	248	;R (22)
    584  5cf4		       45		      .byte.b	69	;G
    585  5cf5		       00		      .byte.b	0	;B
    586  5cf6		       e8		      .byte.b	232	;R (21)
    587  5cf7		       05		      .byte.b	5	;G
    588  5cf8		       10		      .byte.b	16	;B
    589  5cf9		       f8		      .byte.b	248	;R (20)
    590  5cfa		       5b		      .byte.b	91	;G
    591  5cfb		       00		      .byte.b	0	;B
    592  5cfc		       f8		      .byte.b	248	;R (19)
    593  5cfd		       1d		      .byte.b	29	;G
    594  5cfe		       00		      .byte.b	0	;B
    595  5cff		       f0		      .byte.b	240	;R (18)
    596  5d00		       55		      .byte.b	85	;G
    597  5d01		       00		      .byte.b	0	;B
    598  5d02		       f0		      .byte.b	240	;R (17)
    599  5d03		       16		      .byte.b	22	;G
    600  5d04		       00		      .byte.b	0	;B
    601  5d05		       f0		      .byte.b	240	;R (16)
    602  5d06		       b2		      .byte.b	178	;G
    603  5d07		       00		      .byte.b	0	;B
    604  5d08		       e0		      .byte.b	224	;R (15)
    605  5d09		       0e		      .byte.b	14	;G
    606  5d0a		       10		      .byte.b	16	;B
    607  5d0b		       f0		      .byte.b	240	;R (14)
    608  5d0c		       93		      .byte.b	147	;G
    609  5d0d		       00		      .byte.b	0	;B
    610  5d0e		       e0		      .byte.b	224	;R (13)
    611  5d0f		       25		      .byte.b	37	;G
    612  5d10		       00		      .byte.b	0	;B
    613  5d11		       c0		      .byte.b	192	;R (12)
    614  5d12		       e5		      .byte.b	229	;G
    615  5d13		       00		      .byte.b	0	;B
    616  5d14		       80		      .byte.b	128	;R (11)
    617  5d15		       0e		      .byte.b	14	;G
    618  5d16		       00		      .byte.b	0	;B
    619  5d17		       c0		      .byte.b	192	;R (10)
    620  5d18		       ca		      .byte.b	202	;G
    621  5d19		       00		      .byte.b	0	;B
    622  5d1a		       84		      .byte.b	132	;R (9)
    623  5d1b		       8e		      .byte.b	142	;G
    624  5d1c		       00		      .byte.b	0	;B
    625  5d1d		       00		      .byte.b	0	;R (8)
    626  5d1e		       8e		      .byte.b	142	;G
    627  5d1f		       00		      .byte.b	0	;B
    628  5d20		       00		      .byte.b	0	;R (7)
    629  5d21		       15		      .byte.b	21	;G
    630  5d22		       00		      .byte.b	0	;B
    631  5d23		       00		      .byte.b	0	;R (6)
    632  5d24		       14		      .byte.b	20	;G
    633  5d25		       00		      .byte.b	0	;B
    634  5d26		       00		      .byte.b	0	;R (5)
    635  5d27		       14		      .byte.b	20	;G
    636  5d28		       00		      .byte.b	0	;B
    637  5d29		       00		      .byte.b	0	;R (4)
    638  5d2a		       0a		      .byte.b	10	;G
    639  5d2b		       00		      .byte.b	0	;B
    640  5d2c		       00		      .byte.b	0	;R (3)
    641  5d2d		       10		      .byte.b	16	;G
    642  5d2e		       00		      .byte.b	0	;B
    643  5d2f		       08		      .byte.b	8	;R (2)
    644  5d30		       88		      .byte.b	136	;G
    645  5d31		       00		      .byte.b	0	;B
    646  5d32		       40		      .byte.b	64	;R (1)
    647  5d33		       42		      .byte.b	66	;G
    648  5d34		       00		      .byte.b	0	;B
    649  5d35		       00		      .byte.b	0	;R (0)
    650  5d36		       00		      .byte.b	0	;G
    651  5d37		       00		      .byte.b	0	;B
    652  5d38				   COL_3
    653  5d38		       90		      .byte.b	144	;R (71)
    654  5d39		       90		      .byte.b	144	;G
    655  5d3a		       00		      .byte.b	0	;B
    656  5d3b		       40		      .byte.b	64	;R (70)
    657  5d3c		       40		      .byte.b	64	;G
    658  5d3d		       00		      .byte.b	0	;B
    659  5d3e		       b0		      .byte.b	176	;R (69)
    660  5d3f		       b0		      .byte.b	176	;G
    661  5d40		       00		      .byte.b	0	;B
    662  5d41		       d0		      .byte.b	208	;R (68)
    663  5d42		       00		      .byte.b	0	;G
    664  5d43		       20		      .byte.b	32	;B
    665  5d44		       f0		      .byte.b	240	;R (67)
    666  5d45		       00		      .byte.b	0	;G
    667  5d46		       00		      .byte.b	0	;B
    668  5d47		       f0		      .byte.b	240	;R (66)
    669  5d48		       d0		      .byte.b	208	;G
    670  5d49		       00		      .byte.b	0	;B
    671  5d4a		       f0		      .byte.b	240	;R (65)
    672  5d4b		       00		      .byte.b	0	;G
    673  5d4c		       00		      .byte.b	0	;B
    674  5d4d		       f0		      .byte.b	240	;R (64)
    675  5d4e		       00		      .byte.b	0	;G
    676  5d4f		       00		      .byte.b	0	;B
    677  5d50		       f0		      .byte.b	240	;R (63)
    678  5d51		       50		      .byte.b	80	;G
    679  5d52		       00		      .byte.b	0	;B
    680  5d53		       f0		      .byte.b	240	;R (62)
    681  5d54		       00		      .byte.b	0	;G
    682  5d55		       00		      .byte.b	0	;B
    683  5d56		       f0		      .byte.b	240	;R (61)
    684  5d57		       a0		      .byte.b	160	;G
    685  5d58		       00		      .byte.b	0	;B
    686  5d59		       f0		      .byte.b	240	;R (60)
    687  5d5a		       00		      .byte.b	0	;G
    688  5d5b		       00		      .byte.b	0	;B
    689  5d5c		       f0		      .byte.b	240	;R (59)
    690  5d5d		       d0		      .byte.b	208	;G
    691  5d5e		       00		      .byte.b	0	;B
    692  5d5f		       f0		      .byte.b	240	;R (58)
    693  5d60		       c0		      .byte.b	192	;G
    694  5d61		       00		      .byte.b	0	;B
    695  5d62		       f0		      .byte.b	240	;R (57)
    696  5d63		       90		      .byte.b	144	;G
    697  5d64		       00		      .byte.b	0	;B
    698  5d65		       f0		      .byte.b	240	;R (56)
    699  5d66		       80		      .byte.b	128	;G
    700  5d67		       00		      .byte.b	0	;B
    701  5d68		       f0		      .byte.b	240	;R (55)
    702  5d69		       40		      .byte.b	64	;G
    703  5d6a		       00		      .byte.b	0	;B
    704  5d6b		       70		      .byte.b	112	;R (54)
    705  5d6c		       00		      .byte.b	0	;G
    706  5d6d		       80		      .byte.b	128	;B
    707  5d6e		       d0		      .byte.b	208	;R (53)
    708  5d6f		       00		      .byte.b	0	;G
    709  5d70		       20		      .byte.b	32	;B
    710  5d71		       f0		      .byte.b	240	;R (52)
    711  5d72		       80		      .byte.b	128	;G
    712  5d73		       00		      .byte.b	0	;B
    713  5d74		       f0		      .byte.b	240	;R (51)
    714  5d75		       00		      .byte.b	0	;G
    715  5d76		       00		      .byte.b	0	;B
    716  5d77		       f0		      .byte.b	240	;R (50)
    717  5d78		       a0		      .byte.b	160	;G
    718  5d79		       00		      .byte.b	0	;B
    719  5d7a		       f0		      .byte.b	240	;R (49)
    720  5d7b		       80		      .byte.b	128	;G
    721  5d7c		       00		      .byte.b	0	;B
    722  5d7d		       f0		      .byte.b	240	;R (48)
    723  5d7e		       40		      .byte.b	64	;G
    724  5d7f		       00		      .byte.b	0	;B
    725  5d80		       f0		      .byte.b	240	;R (47)
    726  5d81		       20		      .byte.b	32	;G
    727  5d82		       00		      .byte.b	0	;B
    728  5d83		       f0		      .byte.b	240	;R (46)
    729  5d84		       00		      .byte.b	0	;G
    730  5d85		       00		      .byte.b	0	;B
    731  5d86		       f0		      .byte.b	240	;R (45)
    732  5d87		       80		      .byte.b	128	;G
    733  5d88		       00		      .byte.b	0	;B
    734  5d89		       f0		      .byte.b	240	;R (44)
    735  5d8a		       00		      .byte.b	0	;G
    736  5d8b		       00		      .byte.b	0	;B
    737  5d8c		       f0		      .byte.b	240	;R (43)
    738  5d8d		       40		      .byte.b	64	;G
    739  5d8e		       00		      .byte.b	0	;B
    740  5d8f		       f0		      .byte.b	240	;R (42)
    741  5d90		       00		      .byte.b	0	;G
    742  5d91		       00		      .byte.b	0	;B
    743  5d92		       f0		      .byte.b	240	;R (41)
    744  5d93		       20		      .byte.b	32	;G
    745  5d94		       00		      .byte.b	0	;B
    746  5d95		       f0		      .byte.b	240	;R (40)
    747  5d96		       20		      .byte.b	32	;G
    748  5d97		       00		      .byte.b	0	;B
    749  5d98		       f0		      .byte.b	240	;R (39)
    750  5d99		       50		      .byte.b	80	;G
    751  5d9a		       00		      .byte.b	0	;B
    752  5d9b		       f0		      .byte.b	240	;R (38)
    753  5d9c		       10		      .byte.b	16	;G
    754  5d9d		       00		      .byte.b	0	;B
    755  5d9e		       70		      .byte.b	112	;R (37)
    756  5d9f		       80		      .byte.b	128	;G
    757  5da0		       80		      .byte.b	128	;B
    758  5da1		       f0		      .byte.b	240	;R (36)
    759  5da2		       50		      .byte.b	80	;G
    760  5da3		       00		      .byte.b	0	;B
    761  5da4		       f0		      .byte.b	240	;R (35)
    762  5da5		       00		      .byte.b	0	;G
    763  5da6		       00		      .byte.b	0	;B
    764  5da7		       f0		      .byte.b	240	;R (34)
    765  5da8		       40		      .byte.b	64	;G
    766  5da9		       00		      .byte.b	0	;B
    767  5daa		       f0		      .byte.b	240	;R (33)
    768  5dab		       10		      .byte.b	16	;G
    769  5dac		       00		      .byte.b	0	;B
    770  5dad		       f0		      .byte.b	240	;R (32)
    771  5dae		       b0		      .byte.b	176	;G
    772  5daf		       00		      .byte.b	0	;B
    773  5db0		       e0		      .byte.b	224	;R (31)
    774  5db1		       00		      .byte.b	0	;G
    775  5db2		       10		      .byte.b	16	;B
    776  5db3		       e0		      .byte.b	224	;R (30)
    777  5db4		       40		      .byte.b	64	;G
    778  5db5		       00		      .byte.b	0	;B
    779  5db6		       e0		      .byte.b	224	;R (29)
    780  5db7		       20		      .byte.b	32	;G
    781  5db8		       00		      .byte.b	0	;B
    782  5db9		       c0		      .byte.b	192	;R (28)
    783  5dba		       00		      .byte.b	0	;G
    784  5dbb		       00		      .byte.b	0	;B
    785  5dbc		       c0		      .byte.b	192	;R (27)
    786  5dbd		       10		      .byte.b	16	;G
    787  5dbe		       00		      .byte.b	0	;B
    788  5dbf		       c0		      .byte.b	192	;R (26)
    789  5dc0		       40		      .byte.b	64	;G
    790  5dc1		       10		      .byte.b	16	;B
    791  5dc2		       90		      .byte.b	144	;R (25)
    792  5dc3		       00		      .byte.b	0	;G
    793  5dc4		       00		      .byte.b	0	;B
    794  5dc5		       f0		      .byte.b	240	;R (24)
    795  5dc6		       60		      .byte.b	96	;G
    796  5dc7		       00		      .byte.b	0	;B
    797  5dc8		       f0		      .byte.b	240	;R (23)
    798  5dc9		       00		      .byte.b	0	;G
    799  5dca		       00		      .byte.b	0	;B
    800  5dcb		       f0		      .byte.b	240	;R (22)
    801  5dcc		       40		      .byte.b	64	;G
    802  5dcd		       00		      .byte.b	0	;B
    803  5dce		       f0		      .byte.b	240	;R (21)
    804  5dcf		       10		      .byte.b	16	;G
    805  5dd0		       00		      .byte.b	0	;B
    806  5dd1		       f0		      .byte.b	240	;R (20)
    807  5dd2		       00		      .byte.b	0	;G
    808  5dd3		       00		      .byte.b	0	;B
    809  5dd4		       f0		      .byte.b	240	;R (19)
    810  5dd5		       60		      .byte.b	96	;G
    811  5dd6		       00		      .byte.b	0	;B
    812  5dd7		       f0		      .byte.b	240	;R (18)
    813  5dd8		       20		      .byte.b	32	;G
    814  5dd9		       00		      .byte.b	0	;B
    815  5dda		       f0		      .byte.b	240	;R (17)
    816  5ddb		       50		      .byte.b	80	;G
    817  5ddc		       00		      .byte.b	0	;B
    818  5ddd		       f0		      .byte.b	240	;R (16)
    819  5dde		       40		      .byte.b	64	;G
    820  5ddf		       00		      .byte.b	0	;B
    821  5de0		       f0		      .byte.b	240	;R (15)
    822  5de1		       80		      .byte.b	128	;G
    823  5de2		       00		      .byte.b	0	;B
    824  5de3		       f0		      .byte.b	240	;R (14)
    825  5de4		       40		      .byte.b	64	;G
    826  5de5		       00		      .byte.b	0	;B
    827  5de6		       f0		      .byte.b	240	;R (13)
    828  5de7		       00		      .byte.b	0	;G
    829  5de8		       00		      .byte.b	0	;B
    830  5de9		       f0		      .byte.b	240	;R (12)
    831  5dea		       10		      .byte.b	16	;G
    832  5deb		       00		      .byte.b	0	;B
    833  5dec		       f0		      .byte.b	240	;R (11)
    834  5ded		       50		      .byte.b	80	;G
    835  5dee		       00		      .byte.b	0	;B
    836  5def		       f0		      .byte.b	240	;R (10)
    837  5df0		       00		      .byte.b	0	;G
    838  5df1		       00		      .byte.b	0	;B
    839  5df2		       f0		      .byte.b	240	;R (9)
    840  5df3		       b0		      .byte.b	176	;G
    841  5df4		       00		      .byte.b	0	;B
    842  5df5		       f0		      .byte.b	240	;R (8)
    843  5df6		       90		      .byte.b	144	;G
    844  5df7		       00		      .byte.b	0	;B
    845  5df8		       e0		      .byte.b	224	;R (7)
    846  5df9		       e0		      .byte.b	224	;G
    847  5dfa		       00		      .byte.b	0	;B
    848  5dfb		       f0		      .byte.b	240	;R (6)
    849  5dfc		       d0		      .byte.b	208	;G
    850  5dfd		       00		      .byte.b	0	;B
    851  5dfe		       60		      .byte.b	96	;R (5)
    852  5dff		       00		      .byte.b	0	;G
    853  5e00		       00		      .byte.b	0	;B
    854  5e01		       60		      .byte.b	96	;R (4)
    855  5e02		       40		      .byte.b	64	;G
    856  5e03		       00		      .byte.b	0	;B
    857  5e04		       40		      .byte.b	64	;R (3)
    858  5e05		       50		      .byte.b	80	;G
    859  5e06		       00		      .byte.b	0	;B
    860  5e07		       00		      .byte.b	0	;R (2)
    861  5e08		       00		      .byte.b	0	;G
    862  5e09		       00		      .byte.b	0	;B
    863  5e0a		       00		      .byte.b	0	;R (1)
    864  5e0b		       80		      .byte.b	128	;G
    865  5e0c		       00		      .byte.b	0	;B
    866  5e0d		       00		      .byte.b	0	;R (0)
    867  5e0e		       00		      .byte.b	0	;G
    868  5e0f		       00		      .byte.b	0	;B
    869  5e10				   COL_4
    870  5e10		       25		      .byte.b	37	;R (71)
    871  5e11		       25		      .byte.b	37	;G
    872  5e12		       00		      .byte.b	0	;B
    873  5e13		       48		      .byte.b	72	;R (70)
    874  5e14		       48		      .byte.b	72	;G
    875  5e15		       00		      .byte.b	0	;B
    876  5e16		       25		      .byte.b	37	;R (69)
    877  5e17		       25		      .byte.b	37	;G
    878  5e18		       88		      .byte.b	136	;B
    879  5e19		       ff		      .byte.b	255	;R (68)
    880  5e1a		       00		      .byte.b	0	;G
    881  5e1b		       00		      .byte.b	0	;B
    882  5e1c		       ff		      .byte.b	255	;R (67)
    883  5e1d		       04		      .byte.b	4	;G
    884  5e1e		       00		      .byte.b	0	;B
    885  5e1f		       ef		      .byte.b	239	;R (66)
    886  5e20		       40		      .byte.b	64	;G
    887  5e21		       10		      .byte.b	16	;B
    888  5e22		       ff		      .byte.b	255	;R (65)
    889  5e23		       00		      .byte.b	0	;G
    890  5e24		       00		      .byte.b	0	;B
    891  5e25		       ff		      .byte.b	255	;R (64)
    892  5e26		       02		      .byte.b	2	;G
    893  5e27		       00		      .byte.b	0	;B
    894  5e28		       ff		      .byte.b	255	;R (63)
    895  5e29		       20		      .byte.b	32	;G
    896  5e2a		       00		      .byte.b	0	;B
    897  5e2b		       ff		      .byte.b	255	;R (62)
    898  5e2c		       a5		      .byte.b	165	;G
    899  5e2d		       00		      .byte.b	0	;B
    900  5e2e		       ff		      .byte.b	255	;R (61)
    901  5e2f		       09		      .byte.b	9	;G
    902  5e30		       00		      .byte.b	0	;B
    903  5e31		       ff		      .byte.b	255	;R (60)
    904  5e32		       00		      .byte.b	0	;G
    905  5e33		       00		      .byte.b	0	;B
    906  5e34		       7f		      .byte.b	127	;R (59)
    907  5e35		       42		      .byte.b	66	;G
    908  5e36		       80		      .byte.b	128	;B
    909  5e37		       ff		      .byte.b	255	;R (58)
    910  5e38		       88		      .byte.b	136	;G
    911  5e39		       00		      .byte.b	0	;B
    912  5e3a		       ff		      .byte.b	255	;R (57)
    913  5e3b		       40		      .byte.b	64	;G
    914  5e3c		       00		      .byte.b	0	;B
    915  5e3d		       ff		      .byte.b	255	;R (56)
    916  5e3e		       09		      .byte.b	9	;G
    917  5e3f		       00		      .byte.b	0	;B
    918  5e40		       7f		      .byte.b	127	;R (55)
    919  5e41		       01		      .byte.b	1	;G
    920  5e42		       80		      .byte.b	128	;B
    921  5e43		       ff		      .byte.b	255	;R (54)
    922  5e44		       91		      .byte.b	145	;G
    923  5e45		       00		      .byte.b	0	;B
    924  5e46		       fe		      .byte.b	254	;R (53)
    925  5e47		       81		      .byte.b	129	;G
    926  5e48		       00		      .byte.b	0	;B
    927  5e49		       fe		      .byte.b	254	;R (52)
    928  5e4a		       20		      .byte.b	32	;G
    929  5e4b		       00		      .byte.b	0	;B
    930  5e4c		       ff		      .byte.b	255	;R (51)
    931  5e4d		       03		      .byte.b	3	;G
    932  5e4e		       00		      .byte.b	0	;B
    933  5e4f		       ff		      .byte.b	255	;R (50)
    934  5e50		       83		      .byte.b	131	;G
    935  5e51		       00		      .byte.b	0	;B
    936  5e52		       fe		      .byte.b	254	;R (49)
    937  5e53		       90		      .byte.b	144	;G
    938  5e54		       00		      .byte.b	0	;B
    939  5e55		       fe		      .byte.b	254	;R (48)
    940  5e56		       83		      .byte.b	131	;G
    941  5e57		       00		      .byte.b	0	;B
    942  5e58		       7e		      .byte.b	126	;R (47)
    943  5e59		       12		      .byte.b	18	;G
    944  5e5a		       80		      .byte.b	128	;B
    945  5e5b		       fc		      .byte.b	252	;R (46)
    946  5e5c		       00		      .byte.b	0	;G
    947  5e5d		       00		      .byte.b	0	;B
    948  5e5e		       fe		      .byte.b	254	;R (45)
    949  5e5f		       07		      .byte.b	7	;G
    950  5e60		       00		      .byte.b	0	;B
    951  5e61		       ef		      .byte.b	239	;R (44)
    952  5e62		       03		      .byte.b	3	;G
    953  5e63		       10		      .byte.b	16	;B
    954  5e64		       ff		      .byte.b	255	;R (43)
    955  5e65		       40		      .byte.b	64	;G
    956  5e66		       00		      .byte.b	0	;B
    957  5e67		       ff		      .byte.b	255	;R (42)
    958  5e68		       01		      .byte.b	1	;G
    959  5e69		       00		      .byte.b	0	;B
    960  5e6a		       ff		      .byte.b	255	;R (41)
    961  5e6b		       01		      .byte.b	1	;G
    962  5e6c		       00		      .byte.b	0	;B
    963  5e6d		       bf		      .byte.b	191	;R (40)
    964  5e6e		       01		      .byte.b	1	;G
    965  5e6f		       40		      .byte.b	64	;B
    966  5e70		       f7		      .byte.b	247	;R (39)
    967  5e71		       80		      .byte.b	128	;G
    968  5e72		       08		      .byte.b	8	;B
    969  5e73		       ff		      .byte.b	255	;R (38)
    970  5e74		       40		      .byte.b	64	;G
    971  5e75		       00		      .byte.b	0	;B
    972  5e76		       ff		      .byte.b	255	;R (37)
    973  5e77		       00		      .byte.b	0	;G
    974  5e78		       00		      .byte.b	0	;B
    975  5e79		       ff		      .byte.b	255	;R (36)
    976  5e7a		       40		      .byte.b	64	;G
    977  5e7b		       00		      .byte.b	0	;B
    978  5e7c		       ff		      .byte.b	255	;R (35)
    979  5e7d		       a1		      .byte.b	161	;G
    980  5e7e		       00		      .byte.b	0	;B
    981  5e7f		       7f		      .byte.b	127	;R (34)
    982  5e80		       05		      .byte.b	5	;G
    983  5e81		       80		      .byte.b	128	;B
    984  5e82		       ff		      .byte.b	255	;R (33)
    985  5e83		       21		      .byte.b	33	;G
    986  5e84		       00		      .byte.b	0	;B
    987  5e85		       bf		      .byte.b	191	;R (32)
    988  5e86		       40		      .byte.b	64	;G
    989  5e87		       40		      .byte.b	64	;B
    990  5e88		       ff		      .byte.b	255	;R (31)
    991  5e89		       61		      .byte.b	97	;G
    992  5e8a		       00		      .byte.b	0	;B
    993  5e8b		       7f		      .byte.b	127	;R (30)
    994  5e8c		       81		      .byte.b	129	;G
    995  5e8d		       80		      .byte.b	128	;B
    996  5e8e		       f7		      .byte.b	247	;R (29)
    997  5e8f		       60		      .byte.b	96	;G
    998  5e90		       08		      .byte.b	8	;B
    999  5e91		       ff		      .byte.b	255	;R (28)
   1000  5e92		       81		      .byte.b	129	;G
   1001  5e93		       00		      .byte.b	0	;B
   1002  5e94		       ef		      .byte.b	239	;R (27)
   1003  5e95		       40		      .byte.b	64	;G
   1004  5e96		       10		      .byte.b	16	;B
   1005  5e97		       ff		      .byte.b	255	;R (26)
   1006  5e98		       60		      .byte.b	96	;G
   1007  5e99		       00		      .byte.b	0	;B
   1008  5e9a		       ff		      .byte.b	255	;R (25)
   1009  5e9b		       18		      .byte.b	24	;G
   1010  5e9c		       00		      .byte.b	0	;B
   1011  5e9d		       ff		      .byte.b	255	;R (24)
   1012  5e9e		       20		      .byte.b	32	;G
   1013  5e9f		       00		      .byte.b	0	;B
   1014  5ea0		       ff		      .byte.b	255	;R (23)
   1015  5ea1		       8a		      .byte.b	138	;G
   1016  5ea2		       00		      .byte.b	0	;B
   1017  5ea3		       f7		      .byte.b	247	;R (22)
   1018  5ea4		       10		      .byte.b	16	;G
   1019  5ea5		       08		      .byte.b	8	;B
   1020  5ea6		       ff		      .byte.b	255	;R (21)
   1021  5ea7		       04		      .byte.b	4	;G
   1022  5ea8		       00		      .byte.b	0	;B
   1023  5ea9		       df		      .byte.b	223	;R (20)
   1024  5eaa		       10		      .byte.b	16	;G
   1025  5eab		       20		      .byte.b	32	;B
   1026  5eac		       ff		      .byte.b	255	;R (19)
   1027  5ead		       90		      .byte.b	144	;G
   1028  5eae		       00		      .byte.b	0	;B
   1029  5eaf		       ff		      .byte.b	255	;R (18)
   1030  5eb0		       12		      .byte.b	18	;G
   1031  5eb1		       00		      .byte.b	0	;B
   1032  5eb2		       ff		      .byte.b	255	;R (17)
   1033  5eb3		       00		      .byte.b	0	;G
   1034  5eb4		       00		      .byte.b	0	;B
   1035  5eb5		       ff		      .byte.b	255	;R (16)
   1036  5eb6		       45		      .byte.b	69	;G
   1037  5eb7		       00		      .byte.b	0	;B
   1038  5eb8		       ff		      .byte.b	255	;R (15)
   1039  5eb9		       10		      .byte.b	16	;G
   1040  5eba		       00		      .byte.b	0	;B
   1041  5ebb		       ff		      .byte.b	255	;R (14)
   1042  5ebc		       23		      .byte.b	35	;G
   1043  5ebd		       00		      .byte.b	0	;B
   1044  5ebe		       fc		      .byte.b	252	;R (13)
   1045  5ebf		       12		      .byte.b	18	;G
   1046  5ec0		       00		      .byte.b	0	;B
   1047  5ec1		       fc		      .byte.b	252	;R (12)
   1048  5ec2		       20		      .byte.b	32	;G
   1049  5ec3		       00		      .byte.b	0	;B
   1050  5ec4		       fe		      .byte.b	254	;R (11)
   1051  5ec5		       46		      .byte.b	70	;G
   1052  5ec6		       00		      .byte.b	0	;B
   1053  5ec7		       f8		      .byte.b	248	;R (10)
   1054  5ec8		       48		      .byte.b	72	;G
   1055  5ec9		       00		      .byte.b	0	;B
   1056  5eca		       f0		      .byte.b	240	;R (9)
   1057  5ecb		       04		      .byte.b	4	;G
   1058  5ecc		       00		      .byte.b	0	;B
   1059  5ecd		       e0		      .byte.b	224	;R (8)
   1060  5ece		       20		      .byte.b	32	;G
   1061  5ecf		       00		      .byte.b	0	;B
   1062  5ed0		       e0		      .byte.b	224	;R (7)
   1063  5ed1		       29		      .byte.b	41	;G
   1064  5ed2		       00		      .byte.b	0	;B
   1065  5ed3		       e0		      .byte.b	224	;R (6)
   1066  5ed4		       20		      .byte.b	32	;G
   1067  5ed5		       00		      .byte.b	0	;B
   1068  5ed6		       e0		      .byte.b	224	;R (5)
   1069  5ed7		       84		      .byte.b	132	;G
   1070  5ed8		       00		      .byte.b	0	;B
   1071  5ed9		       60		      .byte.b	96	;R (4)
   1072  5eda		       40		      .byte.b	64	;G
   1073  5edb		       00		      .byte.b	0	;B
   1074  5edc		       00		      .byte.b	0	;R (3)
   1075  5edd		       88		      .byte.b	136	;G
   1076  5ede		       00		      .byte.b	0	;B
   1077  5edf		       00		      .byte.b	0	;R (2)
   1078  5ee0		       11		      .byte.b	17	;G
   1079  5ee1		       00		      .byte.b	0	;B
   1080  5ee2		       24		      .byte.b	36	;R (1)
   1081  5ee3		       24		      .byte.b	36	;G
   1082  5ee4		       00		      .byte.b	0	;B
   1083  5ee5		       00		      .byte.b	0	;R (0)
   1084  5ee6		       00		      .byte.b	0	;G
   1085  5ee7		       00		      .byte.b	0	;B
   1086  5ee8				   COL_5
   1087  5ee8		       02		      .byte.b	2	;R (71)
   1088  5ee9		       12		      .byte.b	18	;G
   1089  5eea		       00		      .byte.b	0	;B
   1090  5eeb		       00		      .byte.b	0	;R (70)
   1091  5eec		       00		      .byte.b	0	;G
   1092  5eed		       00		      .byte.b	0	;B
   1093  5eee		       00		      .byte.b	0	;R (69)
   1094  5eef		       02		      .byte.b	2	;G
   1095  5ef0		       00		      .byte.b	0	;B
   1096  5ef1		       03		      .byte.b	3	;R (68)
   1097  5ef2		       12		      .byte.b	18	;G
   1098  5ef3		       00		      .byte.b	0	;B
   1099  5ef4		       0b		      .byte.b	11	;R (67)
   1100  5ef5		       09		      .byte.b	9	;G
   1101  5ef6		       00		      .byte.b	0	;B
   1102  5ef7		       07		      .byte.b	7	;R (66)
   1103  5ef8		       05		      .byte.b	5	;G
   1104  5ef9		       00		      .byte.b	0	;B
   1105  5efa		       03		      .byte.b	3	;R (65)
   1106  5efb		       06		      .byte.b	6	;G
   1107  5efc		       00		      .byte.b	0	;B
   1108  5efd		       01		      .byte.b	1	;R (64)
   1109  5efe		       20		      .byte.b	32	;G
   1110  5eff		       00		      .byte.b	0	;B
   1111  5f00		       03		      .byte.b	3	;R (63)
   1112  5f01		       03		      .byte.b	3	;G
   1113  5f02		       00		      .byte.b	0	;B
   1114  5f03		       03		      .byte.b	3	;R (62)
   1115  5f04		       0a		      .byte.b	10	;G
   1116  5f05		       00		      .byte.b	0	;B
   1117  5f06		       03		      .byte.b	3	;R (61)
   1118  5f07		       02		      .byte.b	2	;G
   1119  5f08		       00		      .byte.b	0	;B
   1120  5f09		       03		      .byte.b	3	;R (60)
   1121  5f0a		       00		      .byte.b	0	;G
   1122  5f0b		       00		      .byte.b	0	;B
   1123  5f0c		       03		      .byte.b	3	;R (59)
   1124  5f0d		       0a		      .byte.b	10	;G
   1125  5f0e		       00		      .byte.b	0	;B
   1126  5f0f		       03		      .byte.b	3	;R (58)
   1127  5f10		       02		      .byte.b	2	;G
   1128  5f11		       00		      .byte.b	0	;B
   1129  5f12		       01		      .byte.b	1	;R (57)
   1130  5f13		       03		      .byte.b	3	;G
   1131  5f14		       00		      .byte.b	0	;B
   1132  5f15		       01		      .byte.b	1	;R (56)
   1133  5f16		       01		      .byte.b	1	;G
   1134  5f17		       00		      .byte.b	0	;B
   1135  5f18		       00		      .byte.b	0	;R (55)
   1136  5f19		       25		      .byte.b	37	;G
   1137  5f1a		       00		      .byte.b	0	;B
   1138  5f1b		       00		      .byte.b	0	;R (54)
   1139  5f1c		       00		      .byte.b	0	;G
   1140  5f1d		       00		      .byte.b	0	;B
   1141  5f1e		       00		      .byte.b	0	;R (53)
   1142  5f1f		       20		      .byte.b	32	;G
   1143  5f20		       00		      .byte.b	0	;B
   1144  5f21		       00		      .byte.b	0	;R (52)
   1145  5f22		       08		      .byte.b	8	;G
   1146  5f23		       00		      .byte.b	0	;B
   1147  5f24		       00		      .byte.b	0	;R (51)
   1148  5f25		       02		      .byte.b	2	;G
   1149  5f26		       00		      .byte.b	0	;B
   1150  5f27		       00		      .byte.b	0	;R (50)
   1151  5f28		       40		      .byte.b	64	;G
   1152  5f29		       00		      .byte.b	0	;B
   1153  5f2a		       00		      .byte.b	0	;R (49)
   1154  5f2b		       11		      .byte.b	17	;G
   1155  5f2c		       00		      .byte.b	0	;B
   1156  5f2d		       00		      .byte.b	0	;R (48)
   1157  5f2e		       00		      .byte.b	0	;G
   1158  5f2f		       00		      .byte.b	0	;B
   1159  5f30		       00		      .byte.b	0	;R (47)
   1160  5f31		       20		      .byte.b	32	;G
   1161  5f32		       00		      .byte.b	0	;B
   1162  5f33		       00		      .byte.b	0	;R (46)
   1163  5f34		       08		      .byte.b	8	;G
   1164  5f35		       00		      .byte.b	0	;B
   1165  5f36		       00		      .byte.b	0	;R (45)
   1166  5f37		       00		      .byte.b	0	;G
   1167  5f38		       00		      .byte.b	0	;B
   1168  5f39		       00		      .byte.b	0	;R (44)
   1169  5f3a		       24		      .byte.b	36	;G
   1170  5f3b		       00		      .byte.b	0	;B
   1171  5f3c		       00		      .byte.b	0	;R (43)
   1172  5f3d		       00		      .byte.b	0	;G
   1173  5f3e		       00		      .byte.b	0	;B
   1174  5f3f		       00		      .byte.b	0	;R (42)
   1175  5f40		       04		      .byte.b	4	;G
   1176  5f41		       00		      .byte.b	0	;B
   1177  5f42		       00		      .byte.b	0	;R (41)
   1178  5f43		       21		      .byte.b	33	;G
   1179  5f44		       00		      .byte.b	0	;B
   1180  5f45		       01		      .byte.b	1	;R (40)
   1181  5f46		       01		      .byte.b	1	;G
   1182  5f47		       00		      .byte.b	0	;B
   1183  5f48		       01		      .byte.b	1	;R (39)
   1184  5f49		       25		      .byte.b	37	;G
   1185  5f4a		       00		      .byte.b	0	;B
   1186  5f4b		       01		      .byte.b	1	;R (38)
   1187  5f4c		       01		      .byte.b	1	;G
   1188  5f4d		       00		      .byte.b	0	;B
   1189  5f4e		       03		      .byte.b	3	;R (37)
   1190  5f4f		       23		      .byte.b	35	;G
   1191  5f50		       00		      .byte.b	0	;B
   1192  5f51		       03		      .byte.b	3	;R (36)
   1193  5f52		       13		      .byte.b	19	;G
   1194  5f53		       00		      .byte.b	0	;B
   1195  5f54		       01		      .byte.b	1	;R (35)
   1196  5f55		       02		      .byte.b	2	;G
   1197  5f56		       00		      .byte.b	0	;B
   1198  5f57		       01		      .byte.b	1	;R (34)
   1199  5f58		       10		      .byte.b	16	;G
   1200  5f59		       00		      .byte.b	0	;B
   1201  5f5a		       03		      .byte.b	3	;R (33)
   1202  5f5b		       02		      .byte.b	2	;G
   1203  5f5c		       00		      .byte.b	0	;B
   1204  5f5d		       01		      .byte.b	1	;R (32)
   1205  5f5e		       08		      .byte.b	8	;G
   1206  5f5f		       00		      .byte.b	0	;B
   1207  5f60		       03		      .byte.b	3	;R (31)
   1208  5f61		       20		      .byte.b	32	;G
   1209  5f62		       00		      .byte.b	0	;B
   1210  5f63		       03		      .byte.b	3	;R (30)
   1211  5f64		       00		      .byte.b	0	;G
   1212  5f65		       00		      .byte.b	0	;B
   1213  5f66		       03		      .byte.b	3	;R (29)
   1214  5f67		       10		      .byte.b	16	;G
   1215  5f68		       00		      .byte.b	0	;B
   1216  5f69		       03		      .byte.b	3	;R (28)
   1217  5f6a		       00		      .byte.b	0	;G
   1218  5f6b		       00		      .byte.b	0	;B
   1219  5f6c		       07		      .byte.b	7	;R (27)
   1220  5f6d		       0e		      .byte.b	14	;G
   1221  5f6e		       00		      .byte.b	0	;B
   1222  5f6f		       03		      .byte.b	3	;R (26)
   1223  5f70		       41		      .byte.b	65	;G
   1224  5f71		       00		      .byte.b	0	;B
   1225  5f72		       07		      .byte.b	7	;R (25)
   1226  5f73		       04		      .byte.b	4	;G
   1227  5f74		       00		      .byte.b	0	;B
   1228  5f75		       03		      .byte.b	3	;R (24)
   1229  5f76		       21		      .byte.b	33	;G
   1230  5f77		       00		      .byte.b	0	;B
   1231  5f78		       03		      .byte.b	3	;R (23)
   1232  5f79		       04		      .byte.b	4	;G
   1233  5f7a		       00		      .byte.b	0	;B
   1234  5f7b		       03		      .byte.b	3	;R (22)
   1235  5f7c		       02		      .byte.b	2	;G
   1236  5f7d		       00		      .byte.b	0	;B
   1237  5f7e		       03		      .byte.b	3	;R (21)
   1238  5f7f		       26		      .byte.b	38	;G
   1239  5f80		       00		      .byte.b	0	;B
   1240  5f81		       01		      .byte.b	1	;R (20)
   1241  5f82		       01		      .byte.b	1	;G
   1242  5f83		       00		      .byte.b	0	;B
   1243  5f84		       00		      .byte.b	0	;R (19)
   1244  5f85		       21		      .byte.b	33	;G
   1245  5f86		       00		      .byte.b	0	;B
   1246  5f87		       01		      .byte.b	1	;R (18)
   1247  5f88		       09		      .byte.b	9	;G
   1248  5f89		       00		      .byte.b	0	;B
   1249  5f8a		       23		      .byte.b	35	;R (17)
   1250  5f8b		       22		      .byte.b	34	;G
   1251  5f8c		       00		      .byte.b	0	;B
   1252  5f8d		       01		      .byte.b	1	;R (16)
   1253  5f8e		       01		      .byte.b	1	;G
   1254  5f8f		       00		      .byte.b	0	;B
   1255  5f90		       00		      .byte.b	0	;R (15)
   1256  5f91		       29		      .byte.b	41	;G
   1257  5f92		       00		      .byte.b	0	;B
   1258  5f93		       00		      .byte.b	0	;R (14)
   1259  5f94		       00		      .byte.b	0	;G
   1260  5f95		       00		      .byte.b	0	;B
   1261  5f96		       00		      .byte.b	0	;R (13)
   1262  5f97		       04		      .byte.b	4	;G
   1263  5f98		       00		      .byte.b	0	;B
   1264  5f99		       00		      .byte.b	0	;R (12)
   1265  5f9a		       20		      .byte.b	32	;G
   1266  5f9b		       00		      .byte.b	0	;B
   1267  5f9c		       10		      .byte.b	16	;R (11)
   1268  5f9d		       12		      .byte.b	18	;G
   1269  5f9e		       00		      .byte.b	0	;B
   1270  5f9f		       00		      .byte.b	0	;R (10)
   1271  5fa0		       00		      .byte.b	0	;G
   1272  5fa1		       00		      .byte.b	0	;B
   1273  5fa2		       00		      .byte.b	0	;R (9)
   1274  5fa3		       21		      .byte.b	33	;G
   1275  5fa4		       00		      .byte.b	0	;B
   1276  5fa5		       00		      .byte.b	0	;R (8)
   1277  5fa6		       08		      .byte.b	8	;G
   1278  5fa7		       00		      .byte.b	0	;B
   1279  5fa8		       00		      .byte.b	0	;R (7)
   1280  5fa9		       20		      .byte.b	32	;G
   1281  5faa		       00		      .byte.b	0	;B
   1282  5fab		       00		      .byte.b	0	;R (6)
   1283  5fac		       04		      .byte.b	4	;G
   1284  5fad		       00		      .byte.b	0	;B
   1285  5fae		       20		      .byte.b	32	;R (5)
   1286  5faf		       20		      .byte.b	32	;G
   1287  5fb0		       00		      .byte.b	0	;B
   1288  5fb1		       00		      .byte.b	0	;R (4)
   1289  5fb2		       09		      .byte.b	9	;G
   1290  5fb3		       00		      .byte.b	0	;B
   1291  5fb4		       00		      .byte.b	0	;R (3)
   1292  5fb5		       00		      .byte.b	0	;G
   1293  5fb6		       00		      .byte.b	0	;B
   1294  5fb7		       00		      .byte.b	0	;R (2)
   1295  5fb8		       48		      .byte.b	72	;G
   1296  5fb9		       00		      .byte.b	0	;B
   1297  5fba		       02		      .byte.b	2	;R (1)
   1298  5fbb		       02		      .byte.b	2	;G
   1299  5fbc		       00		      .byte.b	0	;B
   1300  5fbd		       00		      .byte.b	0	;R (0)
   1301  5fbe		       00		      .byte.b	0	;G
   1302  5fbf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  5fc0							;    include "pizza.asm"
    263  5fc0
      0  5fc0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  5fc0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  5fc0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  5fc0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  5fc0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  5fc0				  -	      ERR
      6  5fc0					      endif
------- FILE ./chess.asm
    373  5fc0
    374  5fc0							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  5fc0					      include	"Handler_BANK1.asm"
      1  5fc0							; Copyright (C)2020 Andrew Davie
      2  5fc0
      3  5fc0							;---------------------------------------------------------------------------------------------------
      4  5fc0
      0  5fc0					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  5fc0
      2  5fc0
      3  5fc0
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  63f7 ????				      SEG	MOVES
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   MOVES      SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	MOVES
      7  6000
      8  6000
      9  6000							; Board is a 10 x 12 object which simplifies the generation of moves
     10  6000							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     11  6000							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     12  6000							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     13  6000
     14  6000							;     X12 numbering
     15  6000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     16  6000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     17  6000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     18  6000							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     19  6000							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     20  6000							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     21  6000							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     22  6000							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     23  6000							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     24  6000							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     25  6000							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     26  6000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     27  6000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     28  6000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     29  6000							;	0   1	2   3	4   5	6   7	8   9
     30  6000							;		A   B	C   D	E   F	G   H
     31  6000
     32  6000							;     HEX X12
     33  6000							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     34  6000							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     35  6000							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     36  6000							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     37  6000							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     38  6000							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     39  6000							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     40  6000							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     41  6000							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     42  6000							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     43  6000							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     44  6000							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     45  6000							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     46  6000							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     47  6000							;	0   1	2   3	4   5	6   7	8   9
     48  6000							;		A   B	C   D	E   F	G   H
     49  6000
     50  6000
     51  6000							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     52  6000							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     53  6000							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     54  6000							; be re-used for something else - we just need to guarantee there are 22 of them there
     55  6000
     56  6000		       00 00 00 00*	      ds	22	; so indexing of "ValidSquare-22,x" won't fail
     57  6016
     58  6016							; Note, we will never index INTO the above bytes - x will always be >= 22
     59  6016							; We just need to make sure that the actual indexing will not have an address before
     60  6016							; the index of outside the page.
     61  6016
      0  6016					      OPTIONAL_PAGEBREAK	"ValidSquare", 120 + 80
     10  6016					      LIST	ON
      0  6016					      DEF	ValidSquare
      1  6016				   BANK_ValidSquare SET	_CURRENT_BANK
      2  6016
      3  6016				   ValidSquare
     64  6016
     65  6016
     66  6016							; Use this table to
     67  6016							;   a) Determine if a square is valid (-1 = NO)
     68  6016							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     69  6016							;	if a white pawn on square "x" can move "up" the board.
     70  6016
     71  6016		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     72  6020		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     73  602a		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     74  6034		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     75  603e		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     76  6048		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     77  6052		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     78  605c		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     79  6066		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     80  6070		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     81  607a
      0  607a					      DEF	Board
      1  607a				   BANK_Board SET	_CURRENT_BANK
      2  607a
      3  607a				   Board
     83  607a
     84  607a							; A 10X10... we should never write using invalid square
     85  607a							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     86  607a							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     87  607a
     88  607a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     89  6084		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     90  608e
     91  608e					      REPEAT	8
     92  608e		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  608e					      REPEND
     92  6098		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  6098					      REPEND
     92  60a2		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  60a2					      REPEND
     92  60ac		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  60ac					      REPEND
     92  60b6		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  60b6					      REPEND
     92  60c0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  60c0					      REPEND
     92  60ca		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  60ca					      REPEND
     92  60d4		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     93  60de					      REPEND
     94  60de
     95  60de							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     96  60de
     97  60de							; PARANOIA... following not used, but there in case above violated
     98  60de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
     99  60de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    100  60de
    101  60de							;---------------------------------------------------------------------------------------------------
    102  60de
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  60de					      include	"Handler_QUEEN.asm"
      1  60de							; Copyright (C)2020 Andrew Davie
      2  60de
      3  60de							;---------------------------------------------------------------------------------------------------
      4  60de							; QUEEN
      5  60de							;---------------------------------------------------------------------------------------------------
      6  60de
      0  60de					      DEF	Handle_QUEEN
      1  60de				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  60de
      3  60de				   Handle_QUEEN
      8  60de
      9  60de							; Pass...
     10  60de							; x = currentSquare (square the piece is on)
     11  60de							; currentPiece (with flags/colour attached)
     12  60de
      0  60de					      MOVE_TOWARDS	_DOWN+_LEFT
      1  60de					      SUBROUTINE
      2  60de
      3  60de
      4  60de		       a6 95		      ldx	currentSquare
      5  60e0		       d0 03		      bne	.project
      6  60e2
      7  60e2		       20 cc fc    .empty     jsr	AddMove
      8  60e5		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  60e8		       30 0c		      bmi	.invalid
     10  60ea		       b9 7a f0 	      lda	Board,y
     11  60ed		       f0 f3		      beq	.empty
     12  60ef		       45 94		      eor	currentPiece
     13  60f1		       10 03		      bpl	.invalid
     14  60f3		       20 cc fc 	      jsr	AddMove
     15  60f6
     16  60f6				   .invalid
      0  60f6					      MOVE_TOWARDS	_DOWN
      1  60f6					      SUBROUTINE
      2  60f6
      3  60f6
      4  60f6		       a6 95		      ldx	currentSquare
      5  60f8		       d0 03		      bne	.project
      6  60fa
      7  60fa		       20 cc fc    .empty     jsr	AddMove
      8  60fd		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  6100		       30 0c		      bmi	.invalid
     10  6102		       b9 7a f0 	      lda	Board,y
     11  6105		       f0 f3		      beq	.empty
     12  6107		       45 94		      eor	currentPiece
     13  6109		       10 03		      bpl	.invalid
     14  610b		       20 cc fc 	      jsr	AddMove
     15  610e
     16  610e				   .invalid
      0  610e					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  610e					      SUBROUTINE
      2  610e
      3  610e
      4  610e		       a6 95		      ldx	currentSquare
      5  6110		       d0 03		      bne	.project
      6  6112
      7  6112		       20 cc fc    .empty     jsr	AddMove
      8  6115		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  6118		       30 0c		      bmi	.invalid
     10  611a		       b9 7a f0 	      lda	Board,y
     11  611d		       f0 f3		      beq	.empty
     12  611f		       45 94		      eor	currentPiece
     13  6121		       10 03		      bpl	.invalid
     14  6123		       20 cc fc 	      jsr	AddMove
     15  6126
     16  6126				   .invalid
      0  6126					      MOVE_TOWARDS	_RIGHT
      1  6126					      SUBROUTINE
      2  6126
      3  6126
      4  6126		       a6 95		      ldx	currentSquare
      5  6128		       d0 03		      bne	.project
      6  612a
      7  612a		       20 cc fc    .empty     jsr	AddMove
      8  612d		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  6130		       30 0c		      bmi	.invalid
     10  6132		       b9 7a f0 	      lda	Board,y
     11  6135		       f0 f3		      beq	.empty
     12  6137		       45 94		      eor	currentPiece
     13  6139		       10 03		      bpl	.invalid
     14  613b		       20 cc fc 	      jsr	AddMove
     15  613e
     16  613e				   .invalid
      0  613e					      MOVE_TOWARDS	_UP+_RIGHT
      1  613e					      SUBROUTINE
      2  613e
      3  613e
      4  613e		       a6 95		      ldx	currentSquare
      5  6140		       d0 03		      bne	.project
      6  6142
      7  6142		       20 cc fc    .empty     jsr	AddMove
      8  6145		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  6148		       30 0c		      bmi	.invalid
     10  614a		       b9 7a f0 	      lda	Board,y
     11  614d		       f0 f3		      beq	.empty
     12  614f		       45 94		      eor	currentPiece
     13  6151		       10 03		      bpl	.invalid
     14  6153		       20 cc fc 	      jsr	AddMove
     15  6156
     16  6156				   .invalid
      0  6156					      MOVE_TOWARDS	_UP
      1  6156					      SUBROUTINE
      2  6156
      3  6156
      4  6156		       a6 95		      ldx	currentSquare
      5  6158		       d0 03		      bne	.project
      6  615a
      7  615a		       20 cc fc    .empty     jsr	AddMove
      8  615d		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  6160		       30 0c		      bmi	.invalid
     10  6162		       b9 7a f0 	      lda	Board,y
     11  6165		       f0 f3		      beq	.empty
     12  6167		       45 94		      eor	currentPiece
     13  6169		       10 03		      bpl	.invalid
     14  616b		       20 cc fc 	      jsr	AddMove
     15  616e
     16  616e				   .invalid
      0  616e					      MOVE_TOWARDS	_UP+_LEFT
      1  616e					      SUBROUTINE
      2  616e
      3  616e
      4  616e		       a6 95		      ldx	currentSquare
      5  6170		       d0 03		      bne	.project
      6  6172
      7  6172		       20 cc fc    .empty     jsr	AddMove
      8  6175		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  6178		       30 0c		      bmi	.invalid
     10  617a		       b9 7a f0 	      lda	Board,y
     11  617d		       f0 f3		      beq	.empty
     12  617f		       45 94		      eor	currentPiece
     13  6181		       10 03		      bpl	.invalid
     14  6183		       20 cc fc 	      jsr	AddMove
     15  6186
     16  6186				   .invalid
      0  6186					      MOVE_TOWARDS	_LEFT
      1  6186					      SUBROUTINE
      2  6186
      3  6186
      4  6186		       a6 95		      ldx	currentSquare
      5  6188		       d0 03		      bne	.project
      6  618a
      7  618a		       20 cc fc    .empty     jsr	AddMove
      8  618d		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  6190		       30 0c		      bmi	.invalid
     10  6192		       b9 7a f0 	      lda	Board,y
     11  6195		       f0 f3		      beq	.empty
     12  6197		       45 94		      eor	currentPiece
     13  6199		       10 03		      bpl	.invalid
     14  619b		       20 cc fc 	      jsr	AddMove
     15  619e
     16  619e				   .invalid
     21  619e
     22  619e		       4c 93 fa 	      jmp	MoveReturn
     23  61a1
     24  61a1							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  61a1					      include	"Handler_BISHOP.asm"
      1  61a1							; Copyright (C)2020 Andrew Davie
      2  61a1
      3  61a1							;---------------------------------------------------------------------------------------------------
      4  61a1							; BISHOP
      5  61a1							;---------------------------------------------------------------------------------------------------
      6  61a1
      0  61a1					      DEF	Handle_BISHOP
      1  61a1				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  61a1
      3  61a1				   Handle_BISHOP
      8  61a1
      9  61a1							; x = currentSquare (square the piece is on)
     10  61a1							; currentPiece (with flags/colour attached)
     11  61a1
      0  61a1					      MOVE_TOWARDS	_DOWN+_LEFT
      1  61a1					      SUBROUTINE
      2  61a1
      3  61a1
      4  61a1		       a6 95		      ldx	currentSquare
      5  61a3		       d0 03		      bne	.project
      6  61a5
      7  61a5		       20 cc fc    .empty     jsr	AddMove
      8  61a8		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  61ab		       30 0c		      bmi	.invalid
     10  61ad		       b9 7a f0 	      lda	Board,y
     11  61b0		       f0 f3		      beq	.empty
     12  61b2		       45 94		      eor	currentPiece
     13  61b4		       10 03		      bpl	.invalid
     14  61b6		       20 cc fc 	      jsr	AddMove
     15  61b9
     16  61b9				   .invalid
      0  61b9					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  61b9					      SUBROUTINE
      2  61b9
      3  61b9
      4  61b9		       a6 95		      ldx	currentSquare
      5  61bb		       d0 03		      bne	.project
      6  61bd
      7  61bd		       20 cc fc    .empty     jsr	AddMove
      8  61c0		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  61c3		       30 0c		      bmi	.invalid
     10  61c5		       b9 7a f0 	      lda	Board,y
     11  61c8		       f0 f3		      beq	.empty
     12  61ca		       45 94		      eor	currentPiece
     13  61cc		       10 03		      bpl	.invalid
     14  61ce		       20 cc fc 	      jsr	AddMove
     15  61d1
     16  61d1				   .invalid
      0  61d1					      MOVE_TOWARDS	_UP+_LEFT
      1  61d1					      SUBROUTINE
      2  61d1
      3  61d1
      4  61d1		       a6 95		      ldx	currentSquare
      5  61d3		       d0 03		      bne	.project
      6  61d5
      7  61d5		       20 cc fc    .empty     jsr	AddMove
      8  61d8		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  61db		       30 0c		      bmi	.invalid
     10  61dd		       b9 7a f0 	      lda	Board,y
     11  61e0		       f0 f3		      beq	.empty
     12  61e2		       45 94		      eor	currentPiece
     13  61e4		       10 03		      bpl	.invalid
     14  61e6		       20 cc fc 	      jsr	AddMove
     15  61e9
     16  61e9				   .invalid
      0  61e9					      MOVE_TOWARDS	_UP+_RIGHT
      1  61e9					      SUBROUTINE
      2  61e9
      3  61e9
      4  61e9		       a6 95		      ldx	currentSquare
      5  61eb		       d0 03		      bne	.project
      6  61ed
      7  61ed		       20 cc fc    .empty     jsr	AddMove
      8  61f0		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  61f3		       30 0c		      bmi	.invalid
     10  61f5		       b9 7a f0 	      lda	Board,y
     11  61f8		       f0 f3		      beq	.empty
     12  61fa		       45 94		      eor	currentPiece
     13  61fc		       10 03		      bpl	.invalid
     14  61fe		       20 cc fc 	      jsr	AddMove
     15  6201
     16  6201				   .invalid
     16  6201
     17  6201		       4c 93 fa 	      jmp	MoveReturn
     18  6204
     19  6204							;---------------------------------------------------------------------------------------------------
     20  6204							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  6204					      include	"Handler_ROOK.asm"
      1  6204							; Copyright (C)2020 Andrew Davie
      2  6204							; Rook move handler
      3  6204
      4  6204							;---------------------------------------------------------------------------------------------------
      5  6204							; ROOK
      6  6204							;---------------------------------------------------------------------------------------------------
      7  6204
      0  6204					      DEF	Handle_ROOK
      1  6204				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  6204
      3  6204				   Handle_ROOK
      9  6204
     10  6204							; Pass...
     11  6204							; x = currentSquare (square the piece is on)
     12  6204							; currentPiece (with flags/colour attached)
     13  6204
      0  6204					      MOVE_TOWARDS	_DOWN
      1  6204					      SUBROUTINE
      2  6204
      3  6204
      4  6204		       a6 95		      ldx	currentSquare
      5  6206		       d0 03		      bne	.project
      6  6208
      7  6208		       20 cc fc    .empty     jsr	AddMove
      8  620b		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  620e		       30 0c		      bmi	.invalid
     10  6210		       b9 7a f0 	      lda	Board,y
     11  6213		       f0 f3		      beq	.empty
     12  6215		       45 94		      eor	currentPiece
     13  6217		       10 03		      bpl	.invalid
     14  6219		       20 cc fc 	      jsr	AddMove
     15  621c
     16  621c				   .invalid
      0  621c					      MOVE_TOWARDS	_RIGHT
      1  621c					      SUBROUTINE
      2  621c
      3  621c
      4  621c		       a6 95		      ldx	currentSquare
      5  621e		       d0 03		      bne	.project
      6  6220
      7  6220		       20 cc fc    .empty     jsr	AddMove
      8  6223		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  6226		       30 0c		      bmi	.invalid
     10  6228		       b9 7a f0 	      lda	Board,y
     11  622b		       f0 f3		      beq	.empty
     12  622d		       45 94		      eor	currentPiece
     13  622f		       10 03		      bpl	.invalid
     14  6231		       20 cc fc 	      jsr	AddMove
     15  6234
     16  6234				   .invalid
      0  6234					      MOVE_TOWARDS	_UP
      1  6234					      SUBROUTINE
      2  6234
      3  6234
      4  6234		       a6 95		      ldx	currentSquare
      5  6236		       d0 03		      bne	.project
      6  6238
      7  6238		       20 cc fc    .empty     jsr	AddMove
      8  623b		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  623e		       30 0c		      bmi	.invalid
     10  6240		       b9 7a f0 	      lda	Board,y
     11  6243		       f0 f3		      beq	.empty
     12  6245		       45 94		      eor	currentPiece
     13  6247		       10 03		      bpl	.invalid
     14  6249		       20 cc fc 	      jsr	AddMove
     15  624c
     16  624c				   .invalid
      0  624c					      MOVE_TOWARDS	_LEFT
      1  624c					      SUBROUTINE
      2  624c
      3  624c
      4  624c		       a6 95		      ldx	currentSquare
      5  624e		       d0 03		      bne	.project
      6  6250
      7  6250		       20 cc fc    .empty     jsr	AddMove
      8  6253		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  6256		       30 0c		      bmi	.invalid
     10  6258		       b9 7a f0 	      lda	Board,y
     11  625b		       f0 f3		      beq	.empty
     12  625d		       45 94		      eor	currentPiece
     13  625f		       10 03		      bpl	.invalid
     14  6261		       20 cc fc 	      jsr	AddMove
     15  6264
     16  6264				   .invalid
     18  6264
     19  6264		       4c 93 fa 	      jmp	MoveReturn
     20  6267
     21  6267							;---------------------------------------------------------------------------------------------------
     22  6267							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  6267					      include	"Handler_KING.asm"
      1  6267							; Copyright (C)2020 Andrew Davie
      2  6267
      3  6267							;---------------------------------------------------------------------------------------------------
      4  6267							; KING
      5  6267							; This is the move handler for a KING
      6  6267							; "Check" is detected in the next ply of the search.
      7  6267
      8  6267
      9  6267							;---------------------------------------------------------------------------------------------------
     10  6267
     11  6267							; MACRO - Castling
     12  6267
     13  6267		       00 03	   KINGSIDE   =	3
     14  6267		       ff ff ff fc QUEENSIDE  =	-4
     15  6267
     16  6267					      MAC	castle
     17  6267							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  6267
     19  6267					      ldx	currentSquare
     20  6267					      lda	Board+{1},x	; kingside/queenside R position
     21  6267					      and	#PIECE_MASK|FLAG_MOVED
     22  6267					      cmp	#ROOK
     23  6267					      bne	.noCastle	; not a R that hasn't moved
     24  6267
     25  6267							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  6267							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  6267
     28  6267					      IF	{1} = QUEENSIDE
     29  6267					      lda	Board-3,x	; nothing in N pos
     30  6267					      bne	.noCastle
     31  6267					      lda	Board-2,x	; nothing in B pos
     32  6267					      bne	.noCastle
     33  6267					      lda	Board-1,x	; nothing in Q pos
     34  6267					      bne	.noCastle
     35  6267
     36  6267					      ENDIF
     37  6267
     38  6267					      IF	{1} = KINGSIDE
     39  6267					      lda	Board+2,x	; check N pos
     40  6267					      bne	.noCastle
     41  6267					      lda	Board+1,x	; check B pos
     42  6267					      bne	.noCastle
     43  6267					      ENDIF
     44  6267
     45  6267							; appropriate N/B/(Q) squares are vacant so we proceed...
     46  6267
     47  6267							; FINALLY -- king can castle
     48  6267							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     49  6267							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     50  6267							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     51  6267
     52  6267					      lda	currentPiece
     53  6267					      ora	#FLAG_CASTLE	; flag it's a castling move
     54  6267					      sta	currentPiece
     55  6267
     56  6267					      IF	{1} = KINGSIDE
     57  6267					      ldy	ValidSquare+2,x
     58  6267					      ENDIF
     59  6267
     60  6267					      IF	{1} = QUEENSIDE
     61  6267					      ldy	ValidSquare-2,x
     62  6267					      ENDIF
     63  6267
     64  6267					      jsr	AddMove	; 57
     65  6267
     66  6267				   .noCastle
     67  6267					      ENDM
     68  6267
     69  6267
     70  6267							;---------------------------------------------------------------------------------------------------
     71  6267
      0  6267					      DEF	Handle_KING
      1  6267				   BANK_Handle_KING SET	_CURRENT_BANK
      2  6267
      3  6267				   Handle_KING
     73  6267					      SUBROUTINE
     74  6267
     75  6267							; x = currentSquare (square the KING is on)
     76  6267							; currentPiece (KING of course, but with flags/colour attached)
     77  6267
      0  6267					      MOVE_TO	_DOWN+_LEFT
      1  6267					      SUBROUTINE
      2  6267		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  626a		       30 0c		      bmi	.invalid
      4  626c		       b9 7a f0 	      lda	Board,y
      5  626f		       f0 04		      beq	.squareEmpty
      6  6271		       45 94		      eor	currentPiece
      7  6273		       10 03		      bpl	.invalid
      8  6275		       20 cc fc    .squareEmpty jsr	AddMove
      9  6278				   .invalid
      0  6278					      MOVE_TO_X	_DOWN
      1  6278		       a6 95		      ldx	currentSquare
      0  627a					      MOVE_TO	_DOWN
      1  627a					      SUBROUTINE
      2  627a		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x
      3  627d		       30 0c		      bmi	.invalid
      4  627f		       b9 7a f0 	      lda	Board,y
      5  6282		       f0 04		      beq	.squareEmpty
      6  6284		       45 94		      eor	currentPiece
      7  6286		       10 03		      bpl	.invalid
      8  6288		       20 cc fc    .squareEmpty jsr	AddMove
      9  628b				   .invalid
      0  628b					      MOVE_TO_X	_DOWN+_RIGHT
      1  628b		       a6 95		      ldx	currentSquare
      0  628d					      MOVE_TO	_DOWN+_RIGHT
      1  628d					      SUBROUTINE
      2  628d		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  6290		       30 0c		      bmi	.invalid
      4  6292		       b9 7a f0 	      lda	Board,y
      5  6295		       f0 04		      beq	.squareEmpty
      6  6297		       45 94		      eor	currentPiece
      7  6299		       10 03		      bpl	.invalid
      8  629b		       20 cc fc    .squareEmpty jsr	AddMove
      9  629e				   .invalid
      0  629e					      MOVE_TO_X	_RIGHT
      1  629e		       a6 95		      ldx	currentSquare
      0  62a0					      MOVE_TO	_RIGHT
      1  62a0					      SUBROUTINE
      2  62a0		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      3  62a3		       30 0c		      bmi	.invalid
      4  62a5		       b9 7a f0 	      lda	Board,y
      5  62a8		       f0 04		      beq	.squareEmpty
      6  62aa		       45 94		      eor	currentPiece
      7  62ac		       10 03		      bpl	.invalid
      8  62ae		       20 cc fc    .squareEmpty jsr	AddMove
      9  62b1				   .invalid
      0  62b1					      MOVE_TO_X	_UP+_RIGHT
      1  62b1		       a6 95		      ldx	currentSquare
      0  62b3					      MOVE_TO	_UP+_RIGHT
      1  62b3					      SUBROUTINE
      2  62b3		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  62b6		       30 0c		      bmi	.invalid
      4  62b8		       b9 7a f0 	      lda	Board,y
      5  62bb		       f0 04		      beq	.squareEmpty
      6  62bd		       45 94		      eor	currentPiece
      7  62bf		       10 03		      bpl	.invalid
      8  62c1		       20 cc fc    .squareEmpty jsr	AddMove
      9  62c4				   .invalid
      0  62c4					      MOVE_TO_X	_UP
      1  62c4		       a6 95		      ldx	currentSquare
      0  62c6					      MOVE_TO	_UP
      1  62c6					      SUBROUTINE
      2  62c6		       bc 20 f0 	      ldy	ValidSquare+_UP,x
      3  62c9		       30 0c		      bmi	.invalid
      4  62cb		       b9 7a f0 	      lda	Board,y
      5  62ce		       f0 04		      beq	.squareEmpty
      6  62d0		       45 94		      eor	currentPiece
      7  62d2		       10 03		      bpl	.invalid
      8  62d4		       20 cc fc    .squareEmpty jsr	AddMove
      9  62d7				   .invalid
      0  62d7					      MOVE_TO_X	_UP+_LEFT
      1  62d7		       a6 95		      ldx	currentSquare
      0  62d9					      MOVE_TO	_UP+_LEFT
      1  62d9					      SUBROUTINE
      2  62d9		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  62dc		       30 0c		      bmi	.invalid
      4  62de		       b9 7a f0 	      lda	Board,y
      5  62e1		       f0 04		      beq	.squareEmpty
      6  62e3		       45 94		      eor	currentPiece
      7  62e5		       10 03		      bpl	.invalid
      8  62e7		       20 cc fc    .squareEmpty jsr	AddMove
      9  62ea				   .invalid
      0  62ea					      MOVE_TO_X	_LEFT
      1  62ea		       a6 95		      ldx	currentSquare
      0  62ec					      MOVE_TO	_LEFT
      1  62ec					      SUBROUTINE
      2  62ec		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      3  62ef		       30 0c		      bmi	.invalid
      4  62f1		       b9 7a f0 	      lda	Board,y
      5  62f4		       f0 04		      beq	.squareEmpty
      6  62f6		       45 94		      eor	currentPiece
      7  62f8		       10 03		      bpl	.invalid
      8  62fa		       20 cc fc    .squareEmpty jsr	AddMove
      9  62fd				   .invalid
     86  62fd
     87  62fd		       24 94		      bit	currentPiece
     88  62ff		       70 47		      bvs	.exit	; king has moved, so no castling
     89  6301
      0  6301					      CASTLE	KINGSIDE
      1  6301
      2  6301
      3  6301		       a6 95		      ldx	currentSquare
      4  6303		       bd 7d f0 	      lda	Board+KINGSIDE,x
      5  6306		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  6308		       c9 05		      cmp	#ROOK
      7  630a		       d0 16		      bne	.noCastle
      8  630c
      9  630c
     10  630c
     11  630c
     12  630c				  -	      IF	KINGSIDE = QUEENSIDE
     13  630c				  -	      lda	Board-3,x
     14  630c				  -	      bne	.noCastle
     15  630c				  -	      lda	Board-2,x
     16  630c				  -	      bne	.noCastle
     17  630c				  -	      lda	Board-1,x
     18  630c				  -	      bne	.noCastle
     19  630c				  -
     20  630c					      ENDIF
     21  630c
     22  630c					      IF	KINGSIDE = KINGSIDE
     23  630c		       bd 7c f0 	      lda	Board+2,x
     24  630f		       d0 11		      bne	.noCastle
     25  6311		       bd 7b f0 	      lda	Board+1,x
     26  6314		       d0 0c		      bne	.noCastle
     27  6316					      ENDIF
     28  6316
     29  6316
     30  6316
     31  6316
     32  6316
     33  6316
     34  6316
     35  6316
     36  6316		       a5 94		      lda	currentPiece
     37  6318		       09 10		      ora	#FLAG_CASTLE
     38  631a		       85 94		      sta	currentPiece
     39  631c
     40  631c					      IF	KINGSIDE = KINGSIDE
     41  631c		       bc 18 f0 	      ldy	ValidSquare+2,x
     42  631f					      ENDIF
     43  631f
     44  631f				  -	      IF	KINGSIDE = QUEENSIDE
     45  631f				  -	      ldy	ValidSquare-2,x
     46  631f					      ENDIF
     47  631f
     48  631f		       20 cc fc 	      jsr	AddMove
     49  6322
     50  6322				   .noCastle
      0  6322					      CASTLE	QUEENSIDE
      1  6322
      2  6322
      3  6322		       a6 95		      ldx	currentSquare
      4  6324		       bd 76 f0 	      lda	Board+QUEENSIDE,x
      5  6327		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  6329		       c9 05		      cmp	#ROOK
      7  632b		       d0 1b		      bne	.noCastle
      8  632d
      9  632d
     10  632d
     11  632d
     12  632d					      IF	QUEENSIDE = QUEENSIDE
     13  632d		       bd 77 f0 	      lda	Board-3,x
     14  6330		       d0 16		      bne	.noCastle
     15  6332		       bd 78 f0 	      lda	Board-2,x
     16  6335		       d0 11		      bne	.noCastle
     17  6337		       bd 79 f0 	      lda	Board-1,x
     18  633a		       d0 0c		      bne	.noCastle
     19  633c
     20  633c					      ENDIF
     21  633c
     22  633c				  -	      IF	QUEENSIDE = KINGSIDE
     23  633c				  -	      lda	Board+2,x
     24  633c				  -	      bne	.noCastle
     25  633c				  -	      lda	Board+1,x
     26  633c				  -	      bne	.noCastle
     27  633c					      ENDIF
     28  633c
     29  633c
     30  633c
     31  633c
     32  633c
     33  633c
     34  633c
     35  633c
     36  633c		       a5 94		      lda	currentPiece
     37  633e		       09 10		      ora	#FLAG_CASTLE
     38  6340		       85 94		      sta	currentPiece
     39  6342
     40  6342				  -	      IF	QUEENSIDE = KINGSIDE
     41  6342				  -	      ldy	ValidSquare+2,x
     42  6342					      ENDIF
     43  6342
     44  6342					      IF	QUEENSIDE = QUEENSIDE
     45  6342		       bc 14 f0 	      ldy	ValidSquare-2,x
     46  6345					      ENDIF
     47  6345
     48  6345		       20 cc fc 	      jsr	AddMove
     49  6348
     50  6348				   .noCastle
     92  6348
     93  6348		       4c 93 fa    .exit      jmp	MoveReturn
     94  634b
     95  634b							;---------------------------------------------------------------------------------------------------
     96  634b							; EOF
------- FILE Handler_BANK1.asm
    107  634b
    108  634b
      0  634b					      OPTIONAL_PAGEBREAK	"Base64ToIndex", 64
     10  634b					      LIST	ON
      0  634b					      DEF	Base64ToIndex
      1  634b				   BANK_Base64ToIndex SET	_CURRENT_BANK
      2  634b
      3  634b				   Base64ToIndex
    111  634b							; Convert from 0-63 numbering into an index into the Chessboard
    112  634b
    113  634b		       16 17 18 19*	      .byte.b	22,23,24,25,26,27,28,29
    114  6353		       20 21 22 23*	      .byte.b	32,33,34,35,36,37,38,39
    115  635b		       2a 2b 2c 2d*	      .byte.b	42,43,44,45,46,47,48,49
    116  6363		       34 35 36 37*	      .byte.b	52,53,54,55,56,57,58,59
    117  636b		       3e 3f 40 41*	      .byte.b	62,63,64,65,66,67,68,69
    118  6373		       48 49 4a 4b*	      .byte.b	72,73,74,75,76,77,78,79
    119  637b		       52 53 54 55*	      .byte.b	82,83,84,85,86,87,88,89
    120  6383		       5c 5d 5e 5f*	      .byte.b	92,93,94,95,96,97,98,99
    121  638b
    122  638b
    123  638b							;---------------------------------------------------------------------------------------------------
    124  638b
      0  638b					      DEF	PutAllPieces
      1  638b				   BANK_PutAllPieces SET	_CURRENT_BANK
      2  638b
      3  638b				   PutAllPieces
    126  638b					      SUBROUTINE
    127  638b
    128  638b							; Call SAFEly
    129  638b
    130  638b		       a0 63		      ldy	#99
    131  638d		       b9 7a f0    .zeroBoard lda	Board,y
    132  6390		       20 9e fd 	      jsr	SAFE_PutPieceToBoard
    133  6393
    134  6393		       88		      dey
    135  6394		       10 f7		      bpl	.zeroBoard
    136  6396		       60		      rts
    137  6397
    138  6397
    139  6397							;---------------------------------------------------------------------------------------------------
    140  6397
      0  6397					      DEF	CopySetupForMarker
      1  6397				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  6397
      3  6397				   CopySetupForMarker
    142  6397					      SUBROUTINE
    143  6397
    144  6397		       a5 80		      lda	drawPieceNumber	;0-63
    145  6399		       4a		      lsr
    146  639a		       4a		      lsr
    147  639b		       4a		      lsr
    148  639c		       18		      clc
    149  639d		       65 80		      adc	drawPieceNumber
    150  639f		       29 01		      and	#1
    151  63a1		       49 01		      eor	#1
    152  63a3		       f0 02		      beq	.white
    153  63a5		       a9 24		      lda	#36
    154  63a7				   .white
    155  63a7		       85 a3		      sta	__pieceColour	; actually SQUARE black/white
    156  63a9
    157  63a9		       8a		      txa
    158  63aa		       18		      clc
    159  63ab		       65 a3		      adc	__pieceColour
    160  63ad		       85 a3		      sta	__pieceColour
    161  63af
    162  63af
    163  63af		       a5 80		      lda	drawPieceNumber
    164  63b1		       29 03		      and	#3	; shift position in PF
    165  63b3		       18		      clc
    166  63b4		       65 a3		      adc	__pieceColour
    167  63b6		       a8		      tay
    168  63b7		       60		      rts
    169  63b8
    170  63b8
    171  63b8					      endif
    172  63b8
    173  63b8							;---------------------------------------------------------------------------------------------------
    174  63b8
    175  63b8
      0  63b8					      DEF	CopySetup
      1  63b8				   BANK_CopySetup SET	_CURRENT_BANK
      2  63b8
      3  63b8				   CopySetup
    177  63b8					      SUBROUTINE
    178  63b8
    179  63b8							; figure colouration of square
    180  63b8
    181  63b8		       a5 80		      lda	drawPieceNumber	;0-63
    182  63ba		       4a		      lsr
    183  63bb		       4a		      lsr
    184  63bc		       4a		      lsr
    185  63bd		       18		      clc
    186  63be		       65 80		      adc	drawPieceNumber
    187  63c0		       29 01		      and	#1
    188  63c2		       49 01		      eor	#1
    189  63c4		       f0 02		      beq	.white
    190  63c6		       a9 24		      lda	#36
    191  63c8		       85 a3	   .white     sta	__pieceColour	; actually SQUARE black/white
    192  63ca
    193  63ca							; PieceColour = 0 for white square, 28 for black square
    194  63ca
    195  63ca							;lda #RAMBANK_MOVES_RAM
    196  63ca							;sta SET_BANK_RAM
    197  63ca
    198  63ca		       a4 80		      ldy	drawPieceNumber	; 0-63
    199  63cc		       be 4b f3 	      ldx	Base64ToIndex,y
    200  63cf
    201  63cf		       bd 7a f0 	      lda	Board,x
    202  63d2		       0a		      asl
    203  63d3		       90 02		      bcc	.blackAdjust
    204  63d5		       09 10		      ora	#16
    205  63d7		       4a	   .blackAdjust lsr
    206  63d8		       29 0f		      and	#%1111
    207  63da		       aa		      tax
    208  63db
    209  63db		       98		      tya
    210  63dc		       29 03		      and	#3	; shift position in PF
    211  63de
    212  63de		       18		      clc
    213  63df		       7d e7 f3 	      adc	PieceToShape,x
    214  63e2		       18		      clc
    215  63e3		       65 a3		      adc	__pieceColour
    216  63e5		       a8		      tay
    217  63e6		       60		      rts
    218  63e7
    219  63e7				   PieceToShape
    220  63e7
    221  63e7		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    222  63e8		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    223  63e9		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    224  63ea		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    225  63eb		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    226  63ec		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    227  63ed		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    228  63ee		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    229  63ef
    230  63ef		       48		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    231  63f0		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    232  63f1		       4c		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    233  63f2		       50		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    234  63f3		       54		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    235  63f4		       58		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    236  63f5		       5c		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    237  63f6		       60		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    238  63f7
    239  63f7
    240  63f7							;---------------------------------------------------------------------------------------------------
    241  63f7
    242  63f7
      0  63f7					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  63f7
      2  63f7
      3  63f7		       03 f7	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3f7 , FREE= $9
      4  63f7					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  63f7				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  63f7				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  63f7				  -	      ERR
      8  63f7					      endif
    244  63f7
    245  63f7
    246  63f7							; There is space here (1K) for use as ROM
    247  63f7							; but NOT when the above bank is switched in as RAM, of course!
    248  63f7
    249  63f7
    250  63f7
    251  63f7
    252  63f7							;---------------------------------------------------------------------------------------------------
    253  63f7							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 2
      0  63f7					      include	"ply.asm"
      1  63f7							; Copyright (C)2020 Andrew Davie
      2  63f7							; andrew@taswegian.com
      3  63f7
      4  63f7							;---------------------------------------------------------------------------------------------------
      5  63f7							; Define the RAM banks
      6  63f7							; A "PLY" bank represents all the data required on any single ply of the search tree.
      7  63f7							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      8  63f7							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
      9  63f7							; they act as independant switchable banks usable for data on each ply during the search.
     10  63f7							; A ply will hold the move list for that position
     11  63f7
     12  63f7
     13  63f7		       00 06	   MAX_PLY    =	6
      0  63f7					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  63f7
      2  63f7
      3  63f7
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     17 U3800					      REPEND
     18 U3800
     19 U3800							;---------------------------------------------------------------------------------------------------
     20 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     21 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  6bf1 ????				      SEG	BANK_PLY
      2  6800					      ORG	ORIGIN
      3  6800					      RORG	$F000
      4  6800				   BANK_START SET	*
      5  6800				   BANK_PLY   SET	ORIGIN / 2048
      6  6800				   ORIGIN     SET	ORIGIN + 2048
      7  6800				   _CURRENT_BANK SET	BANK_PLY
     23  6800
     24  6800
     25  6800							;---------------------------------------------------------------------------------------------------
     26  6800							; The piece-lists
     27  6800							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     28  6800							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     29  6800							; but this needs to be initialised programatically on new game.
     30  6800
     31  6800							; We have TWO piecelists, in different banks
     32  6800							; WHITE pieces in bank BANK_PLY
     33  6800							; BLACK pieces in bank BANK_PLY+1
     34  6800
      0  6800					      OPTIONAL_PAGEBREAK	"PieceLists", 48
     10  6800					      LIST	ON
     36  6800
     37  6800		       00 00 00 00*SortedPieceList ds	16	; indexes into PieceSquare, PieceType.  NEG = no piece
     38  6810		       00 00 00 00*PieceSquare ds	16
     39  6820		       00 00 00 00*PieceType  ds	16
     40  6830
     41  6830		       00	   PieceListPtr ds	1
     42  6831
     43  6831							;---------------------------------------------------------------------------------------------------
     44  6831
     45  6831		       7f ff	   infinity   =	32767
     46  6831
     47  6831		       00 00	   plyValue   ds	2	; 16-bit signed score value
     48  6833		       00	   bestMove   ds	1	; index of move (-1 = none)
     49  6834
     50  6834				  -	      if	0
     51  6834				  -			; reverting a move
     52  6834				  -			; from/to/piece/toOriginal
     53  6834				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     54  6834				  -			; en-passant
     55  6834				  -
     56  6834				  -from/to/piece
     57  6834				  -
     58  6834				  -
     59  6834				  -from       =	piece
     60  6834				  -to	      =	originalPiece
     61  6834				  -from2      =	piece2
     62  6834				  -to2	      =	originalPiece2
     63  6834				  -
     64  6834				  -
     65  6834				  -
     66  6834				  -so,	      normal	move (N)
     67  6834				  -
     68  6834				  -B1	      =	knight
     69  6834				  -C3	      =	blank
     70  6834				  -null/null
     71  6834				  -
     72  6834				  -pawn       promot	with capture
     73  6834				  -A7	      =	WP
     74  6834				  -B8	      =	BLACK_ROOK
     75  6834				  -
     76  6834				  -
     77  6834				  -castle
     78  6834				  -E1	      =	king
     79  6834				  -G1	      =	blank
     80  6834				  -H1	      =	rook
     81  6834				  -F1	      =	blank
     82  6834				  -
     83  6834				  -
     84  6834				  -en-passant
     85  6834				  -B4	      =	P
     86  6834				  -A3	      =	blank
     87  6834				  -A4	      =	P
     88  6834				  -A3	      =	blank
     89  6834				  -
     90  6834				  -FROM
     91  6834				  -TO
     92  6834				  -CAPTURED_PIECE
     93  6834				  -ORIG_PIECE
     94  6834				  -FROM2
     95  6834				  -TO2
     96  6834				  -PIECE2
     97  6834				  -
     98  6834				  -board[FROM] =	ORIG_PIECE
     99  6834				  -board[TO]  =	CAPTURED_PIECE
    100  6834				  -
    101  6834				  -value      =	-new_piece + orig_piece - captured_piece
    102  6834				  -
    103  6834				  -
    104  6834					      endif
    105  6834
    106  6834
    107  6834
    108  6834
    109  6834
    110  6834
    111  6834
    112  6834
    113  6834
    114  6834
    115  6834							;---------------------------------------------------------------------------------------------------
    116  6834
    117  6834							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
    118  6834							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
    119  6834
    120  6834		       00	   enPassantSquare ds	1
    121  6835
    122  6835							;---------------------------------------------------------------------------------------------------
    123  6835							; Move tables hold piece moves for this current ply
    124  6835
    125  6835		       00	   moveIndex  ds	1	; points to first available 'slot' for move storage
    126  6836
    127  6836
    128  6836		       00 80	   MAX_MOVES  =	128
    129  6836
      0  6836					      OPTIONAL_PAGEBREAK	"MoveFrom", MAX_MOVES
     10  6836					      LIST	ON
      0  6836					      DEF	MoveFrom
      1  6836				   BANK_MoveFrom SET	_CURRENT_BANK
      2  6836
      3  6836				   MoveFrom
    132  6836		       00 00 00 00*	      ds	MAX_MOVES
    133  68b6
      0  68b6					      OPTIONAL_PAGEBREAK	"MoveTo", MAX_MOVES
 PAGE BREAK INSERTED FOR  MoveTo
 REQUESTED SIZE =  $80
 WASTED SPACE =  $4a
 PAGEBREAK LOCATION =  $f100
     10  6900					      LIST	ON
      0  6900					      DEF	MoveTo
      1  6900				   BANK_MoveTo SET	_CURRENT_BANK
      2  6900
      3  6900				   MoveTo
    136  6900		       00 00 00 00*	      ds	MAX_MOVES
    137  6980
      0  6980					      OPTIONAL_PAGEBREAK	"MovePiece", MAX_MOVES
     10  6980					      LIST	ON
      0  6980					      DEF	MovePiece
      1  6980				   BANK_MovePiece SET	_CURRENT_BANK
      2  6980
      3  6980				   MovePiece
    140  6980		       00 00 00 00*	      ds	MAX_MOVES
    141  6a00
    142  6a00							;---------------------------------------------------------------------------------------------------
    143  6a00
      0  6a00					      DEF	InitPieceLists
      1  6a00				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  6a00
      3  6a00				   InitPieceLists
    145  6a00
    146  6a00		       a9 ff		      lda	#-1
    147  6a02		       8d 30 f4 	      sta	PieceListPtr+RAM_WRITE
    148  6a05
    149  6a05		       a2 0f		      ldx	#15
    150  6a07		       a9 00		      lda	#0
    151  6a09		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    152  6a0c		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    153  6a0f		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    154  6a12		       ca		      dex
    155  6a13		       10 f4		      bpl	.clearLists
    156  6a15
    157  6a15							; General inits that are moved out of FIXED....
    158  6a15
    159  6a15
    160  6a15		       a9 07		      lda	#%111	; 111= quad
    161  6a17		       85 44		      sta	NUSIZ0
    162  6a19		       85 45		      sta	NUSIZ1	; quad-width
    163  6a1b
    164  6a1b
    165  6a1b
    166  6a1b
    167  6a1b		       a9 04		      lda	#%00000100
    168  6a1d		       85 4a		      sta	CTRLPF
    169  6a1f		       a9 00		      lda	#BACKGCOL
    170  6a21		       85 49		      sta	COLUBK
    171  6a23
      0  6a23					      PHASE	AI_StartClearBoard
      1  6a23		       a9 0e		      lda	#AI_StartClearBoard
      2  6a25		       85 8c		      sta	aiPhase
    173  6a27		       60		      rts
    174  6a28
    175  6a28
    176  6a28							;---------------------------------------------------------------------------------------------------
    177  6a28
    178  6a28					      if	ASSERTS
    179  6a28
      0  6a28					      DEF	checkPiecesBank
      1  6a28				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  6a28
      3  6a28				   checkPiecesBank
    181  6a28							; odd usage - switches between concurrent bank code
    182  6a28
    183  6a28		       a2 0f		      ldx	#15
    184  6a2a		       a5 a4	   .check     lda	__bank
    185  6a2c		       85 3e		      sta	SET_BANK_RAM
    186  6a2e		       bc 10 f0 	      ldy	PieceSquare,x
    187  6a31		       f0 0d		      beq	.nonehere
    188  6a33
    189  6a33		       86 a3		      stx	__x
    190  6a35
    191  6a35		       20 46 fd 	      jsr	SAFE_GetPieceFromBoard
    192  6a38		       f0 fe	   .fail      beq	.fail
    193  6a3a		       c9 ff		      cmp	#-1
    194  6a3c		       f0 fe	   .fail2     beq	.fail2
    195  6a3e
    196  6a3e		       a6 a3		      ldx	__x
    197  6a40
    198  6a40		       ca	   .nonehere  dex
    199  6a41		       10 e7		      bpl	.check
    200  6a43		       60		      rts
    201  6a44
    202  6a44
      0  6a44					      DEF	DIAGNOSTIC_checkPieces
      1  6a44				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  6a44
      3  6a44				   DIAGNOSTIC_checkPieces
    204  6a44							; SAFE call
    205  6a44							; DIAGNOSTIC ONLY
    206  6a44							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    207  6a44
    208  6a44		       a9 09		      lda	#RAMBANK_PLY
    209  6a46		       85 a4		      sta	__bank
    210  6a48		       20 28 f2 	      jsr	checkPiecesBank
    211  6a4b		       e6 a4		      inc	__bank
    212  6a4d		       20 28 f2 	      jsr	checkPiecesBank
    213  6a50		       60		      rts
    214  6a51
    215  6a51					      endif
    216  6a51
    217  6a51							;---------------------------------------------------------------------------------------------------
    218  6a51
    219  6a51				   InitPieceList
    220  6a51
    221  6a51					      if	!TEST_POSITION
    222  6a51
    223  6a51		       06 19		      .byte.b	WHITE|Q, 25
    224  6a53		       04 18		      .byte.b	WHITE|B, 24
    225  6a55		       04 1b		      .byte.b	WHITE|B, 27
    226  6a57		       05 16		      .byte.b	WHITE|R, 22
    227  6a59		       05 1d		      .byte.b	WHITE|R, 29
    228  6a5b		       03 17		      .byte.b	WHITE|N, 23
    229  6a5d		       03 1c		      .byte.b	WHITE|N, 28
    230  6a5f
    231  6a5f		       01 23		      .byte.b	WHITE|WP, 35
    232  6a61		       01 24		      .byte.b	WHITE|WP, 36
    233  6a63		       01 22		      .byte.b	WHITE|WP, 34
    234  6a65		       01 25		      .byte.b	WHITE|WP, 37
    235  6a67		       01 21		      .byte.b	WHITE|WP, 33
    236  6a69		       01 26		      .byte.b	WHITE|WP, 38
    237  6a6b		       01 20		      .byte.b	WHITE|WP, 32
    238  6a6d		       01 27		      .byte.b	WHITE|WP, 39
    239  6a6f
    240  6a6f		       07 1a		      .byte.b	WHITE|K, 26
    241  6a71
    242  6a71		       86 5f		      .byte.b	BLACK|Q, 95
    243  6a73		       84 5e		      .byte.b	BLACK|B, 94
    244  6a75		       84 61		      .byte.b	BLACK|B, 97
    245  6a77		       85 5c		      .byte.b	BLACK|R, 92
    246  6a79		       85 63		      .byte.b	BLACK|R, 99
    247  6a7b		       83 5d		      .byte.b	BLACK|N, 93
    248  6a7d		       83 62		      .byte.b	BLACK|N, 98
    249  6a7f
    250  6a7f		       82 55		      .byte.b	BLACK|BP, 85
    251  6a81		       82 56		      .byte.b	BLACK|BP, 86
    252  6a83		       82 54		      .byte.b	BLACK|BP, 84
    253  6a85		       82 57		      .byte.b	BLACK|BP, 87
    254  6a87		       82 53		      .byte.b	BLACK|BP, 83
    255  6a89		       82 58		      .byte.b	BLACK|BP, 88
    256  6a8b		       82 52		      .byte.b	BLACK|BP, 82
    257  6a8d		       82 59		      .byte.b	BLACK|BP, 89
    258  6a8f
    259  6a8f		       87 60		      .byte.b	BLACK|K, 96
    260  6a91
    261  6a91		       00		      .byte.b	0	;end
    262  6a92
    263  6a92				  -	      else		; test position...
    264  6a92				  -
    265  6a92				  -	      .byte	WHITE|WP, 85
    266  6a92				  -	      .byte	WHITE|WP, 82
    267  6a92				  -	      .byte	BLACK|BP, 86
    268  6a92				  -	      .byte	BLACK|K, 96
    269  6a92				  -	      .byte	BLACK|Q, 94
    270  6a92				  -	      .byte	0
    271  6a92				  -
    272  6a92					      endif
    273  6a92
    274  6a92
    275  6a92							;---------------------------------------------------------------------------------------------------
    276  6a92
    277  6a92
      0  6a92					      DEF	NewPlyInitialise
      1  6a92				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  6a92
      3  6a92				   NewPlyInitialise
    279  6a92
    280  6a92							; This MUST be called at the start of a new ply
    281  6a92							; It initialises the movelist to empty
    282  6a92
    283  6a92		       a2 ff		      ldx	#-1
    284  6a94		       8e 35 f4 	      stx	moveIndex+RAM_WRITE	; no valid moves
    285  6a97		       8d 33 f4 	      sta	bestMove+RAM_WRITE
    286  6a9a
    287  6a9a		       a5 97		      lda	enPassantPawn	; flag/square from last actual move made
    288  6a9c		       8d 34 f4 	      sta	enPassantSquare+RAM_WRITE	; no enPassant available
    289  6a9f
    290  6a9f
    291  6a9f							; The evaluation of the current position is a signed 16-bit number
    292  6a9f							; +ve is good for the current side.
    293  6a9f							; This is used during the alpha-beta search for finding best position
    294  6a9f
    295  6a9f		       a9 01		      lda	#<(-infinity)
    296  6aa1		       8d 31 f4 	      sta	plyValue+RAM_WRITE
    297  6aa4		       a9 80		      lda	#>(-infinity)
    298  6aa6		       8d 32 f4 	      sta	plyValue+RAM_WRITE+1
    299  6aa9
    300  6aa9
    301  6aa9		       a9 00		      lda	#0
    302  6aab		       85 9a		      sta	piecelistIndex
    303  6aad
    304  6aad		       60		      rts
    305  6aae
    306  6aae
    307  6aae							;---------------------------------------------------------------------------------------------------
    308  6aae
      0  6aae					      DEF	GenerateMovesForNextPiece
      1  6aae				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  6aae
      3  6aae				   GenerateMovesForNextPiece
    310  6aae
    311  6aae		       a5 9a		      lda	piecelistIndex
    312  6ab0		       29 0f		      and	#15
    313  6ab2		       aa		      tax
    314  6ab3
    315  6ab3		       a5 9b		      lda	sideToMove
    316  6ab5		       0a		      asl
    317  6ab6		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    318  6ab8		       69 00		      adc	#0
    319  6aba		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    320  6abc
    321  6abc		       bd 10 f0 	      lda	PieceSquare,x
    322  6abf		       f0 0a		      beq	.noPieceHere	; piece deleted
    323  6ac1		       85 95		      sta	currentSquare
    324  6ac3
    325  6ac3		       ad 34 f0 	      lda	enPassantSquare	; saved from previous side's move...
    326  6ac6		       85 97		      sta	enPassantPawn	; used for move generation
    327  6ac8
    328  6ac8		       20 70 fa 	      jsr	MoveForSinglePiece
    329  6acb
    330  6acb		       e6 9a	   .noPieceHere inc	piecelistIndex
    331  6acd		       60		      rts
    332  6ace
    333  6ace							;---------------------------------------------------------------------------------------------------
    334  6ace
      0  6ace					      DEF	FixPieceList
      1  6ace				   BANK_FixPieceList SET	_CURRENT_BANK
      2  6ace
      3  6ace				   FixPieceList
    336  6ace
    337  6ace							; uses OVERLAY Overlay001
    338  6ace							; fromX12	      X12 square piece moved from
    339  6ace							; toX12	      X12 square piece moved to (0 to erase piece from list)
    340  6ace
    341  6ace							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    342  6ace							; Eventually this will have to be more sophisticated when moves (like castling) involve
    343  6ace							; more than one piece.
    344  6ace
    345  6ace							; TODO: this is slow and should use a pointer to pieces instead
    346  6ace
    347  6ace
    348  6ace		       a2 0f		      ldx	#15
    349  6ad0		       a5 85		      lda	fromX12
    350  6ad2		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    351  6ad5		       f0 04		      beq	.adjustPiece
    352  6ad7		       ca		      dex
    353  6ad8		       10 f8		      bpl	.pieceCheck
    354  6ada		       60		      rts
    355  6adb
    356  6adb		       a5 86	   .adjustPiece lda	toX12
    357  6add		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    358  6ae0		       60		      rts
    359  6ae1
    360  6ae1							;---------------------------------------------------------------------------------------------------
    361  6ae1
      0  6ae1					      DEF	alphaBeta
      1  6ae1				   BANK_alphaBeta SET	_CURRENT_BANK
      2  6ae1
      3  6ae1				   alphaBeta
    363  6ae1
    364  6ae1		       60		      rts
    365  6ae2		       e6 99		      inc	currentPly
    366  6ae4		       a5 99		      lda	currentPly
    367  6ae6
    368  6ae6		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    369  6ae8		       f0 31		      beq	.bottomOut	; at a leaf node of the search?
    370  6aea		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    371  6aec
    372  6aec		       a5 9b		      lda	sideToMove
    373  6aee		       49 80		      eor	#128
    374  6af0		       85 9b		      sta	sideToMove
    375  6af2
    376  6af2		       20 92 f2 	      jsr	NewPlyInitialise
    377  6af5
    378  6af5		       a5 99		      lda	currentPly
    379  6af7		       85 3e		      sta	SET_BANK_RAM
    380  6af9
    381  6af9		       a9 00		      lda	#0
    382  6afb		       85 9a		      sta	piecelistIndex
    383  6afd		       20 ae f2    iterPieces jsr	GenerateMovesForNextPiece
    384  6b00		       a5 9a		      lda	piecelistIndex
    385  6b02		       c9 0f		      cmp	#15
    386  6b04		       d0 f7		      bne	iterPieces
    387  6b06
    388  6b06							; Perform a recursive search
    389  6b06							; simulate alpha-beta cull to just 7 moves per node
    390  6b06
    391  6b06					      REPEAT	7
    392  6b06							;jsr PhysicallyMovePiece
    393  6b06							;jsr FinaliseMove
    394  6b06		       20 e1 f2 	      jsr	alphaBeta
    391  6b06					      REPEND
    392  6b09							;jsr PhysicallyMovePiece
    393  6b09							;jsr FinaliseMove
    394  6b09		       20 e1 f2 	      jsr	alphaBeta
    391  6b09					      REPEND
    392  6b0c							;jsr PhysicallyMovePiece
    393  6b0c							;jsr FinaliseMove
    394  6b0c		       20 e1 f2 	      jsr	alphaBeta
    391  6b0c					      REPEND
    392  6b0f							;jsr PhysicallyMovePiece
    393  6b0f							;jsr FinaliseMove
    394  6b0f		       20 e1 f2 	      jsr	alphaBeta
    391  6b0f					      REPEND
    392  6b12							;jsr PhysicallyMovePiece
    393  6b12							;jsr FinaliseMove
    394  6b12		       20 e1 f2 	      jsr	alphaBeta
    391  6b12					      REPEND
    392  6b15							;jsr PhysicallyMovePiece
    393  6b15							;jsr FinaliseMove
    394  6b15		       20 e1 f2 	      jsr	alphaBeta
    391  6b15					      REPEND
    392  6b18							;jsr PhysicallyMovePiece
    393  6b18							;jsr FinaliseMove
    394  6b18		       20 e1 f2 	      jsr	alphaBeta
    395  6b1b					      REPEND
    396  6b1b
    397  6b1b				   .bottomOut
    398  6b1b
    399  6b1b							; TODO: evaluate board position
    400  6b1b							; reverse move to previous position
    401  6b1b							; check the results, update scores and move pointers
    402  6b1b							; and return vars to expected
    403  6b1b
    404  6b1b		       a5 9b		      lda	sideToMove
    405  6b1d		       49 80		      eor	#128
    406  6b1f		       85 9b		      sta	sideToMove
    407  6b21
    408  6b21		       c6 99		      dec	currentPly
    409  6b23		       a5 99		      lda	currentPly
    410  6b25		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    411  6b27
    412  6b27		       60		      rts
    413  6b28
    414  6b28							;---------------------------------------------------------------------------------------------------
    415  6b28
      0  6b28					      DEF	RevertMove
      1  6b28				   BANK_RevertMove SET	_CURRENT_BANK
      2  6b28
      3  6b28				   RevertMove
    417  6b28
    418  6b28							; backtrack after a move, restoring things to the way they were
    419  6b28
    420  6b28
    421  6b28
    422  6b28
    423  6b28
    424  6b28
    425  6b28
    426  6b28
    427  6b28		       60		      rts
    428  6b29
    429  6b29
    430  6b29							;---------------------------------------------------------------------------------------------------
    431  6b29
      0  6b29					      DEF	MoveViaListAtPly
      1  6b29				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  6b29
      3  6b29				   MoveViaListAtPly
    433  6b29					      SUBROUTINE
    434  6b29
    435  6b29		       ac 35 f0 	      ldy	moveIndex
    436  6b2c		       30 4d		      bmi	halted	; no valid moves (stalemate if not in check)
    437  6b2e
      0  6b2e					      NEXT_RANDOM
      1  6b2e		       a5 81		      lda	rnd
      2  6b30		       4a		      lsr
      3  6b31		       90 02		      bcc	.skipEOR
      4  6b33		       49 fe		      eor	#RND_EOR_VAL
      5  6b35		       85 81	   .skipEOR   sta	rnd
    439  6b37
    440  6b37							; int(random * # moves) --> a random move #
    441  6b37
    442  6b37		       a9 00		      lda	#0
    443  6b39		       aa		      tax		; selected move
    444  6b3a		       18		      clc
    445  6b3b		       65 81	   .mulxcc    adc	rnd
    446  6b3d		       90 02		      bcc	.mulx
    447  6b3f		       18		      clc
    448  6b40		       e8		      inx
    449  6b41		       88	   .mulx      dey
    450  6b42		       10 f7		      bpl	.mulxcc
    451  6b44
    452  6b44					      IF	ASSERTS
    453  6b44							; Catch illgal move/index
    454  6b44		       ec 35 f0 	      cpx	moveIndex
    455  6b47		       f0 02		      beq	.ok
    456  6b49		       b0 fe	   .whoops    bcs	.whoops
    457  6b4b				   .ok
    458  6b4b					      ENDIF
    459  6b4b
    460  6b4b
    461  6b4b							; fall through...
    462  6b4b							;---------------------------------------------------------------------------------------------------
    463  6b4b
      0  6b4b					      DEF	PhysicallyMovePiece
      1  6b4b				   BANK_PhysicallyMovePiece SET	_CURRENT_BANK
      2  6b4b
      3  6b4b				   PhysicallyMovePiece
    465  6b4b
    466  6b4b				   .foundMove
    467  6b4b		       bd 36 f0 	      lda	MoveFrom,x
    468  6b4e		       85 9c		      sta	fromSquare
    469  6b50		       85 85		      sta	fromX12
    470  6b52		       bd 00 f1 	      lda	MoveTo,x
    471  6b55		       85 9e		      sta	toSquare
    472  6b57		       85 86		      sta	toX12
    473  6b59
    474  6b59
    475  6b59							; If en-passant flag set (pawn doing opening double-move) then record its square as the
    476  6b59							; en-passant square for the ply.
    477  6b59
    478  6b59		       a0 00		      ldy	#0
    479  6b5b		       bd 80 f1 	      lda	MovePiece,x
    480  6b5e		       29 20		      and	#FLAG_ENPASSANT
    481  6b60		       f0 02		      beq	.notEP
    482  6b62		       a4 9e		      ldy	toSquare
    483  6b64				   .notEP		;sty enPassantPawn
    484  6b64
    485  6b64
    486  6b64		       bd 80 f1 	      lda	MovePiece,x
    487  6b67		       29 df		      and	#~FLAG_ENPASSANT	;test
    488  6b69		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling (for K/R)
    489  6b6b		       85 9d		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    490  6b6d
    491  6b6d		       a6 9c		      ldx	fromSquare
    492  6b6f		       bc 01 ff 	      ldy	X12toBase64,x
    493  6b72		       84 9c		      sty	fromSquare	; B64
    494  6b74
    495  6b74		       a6 9e		      ldx	toSquare
    496  6b76		       bc 01 ff 	      ldy	X12toBase64,x
    497  6b79		       84 9e		      sty	toSquare	; B64
    498  6b7b
    499  6b7b		       60	   halted     rts
    500  6b7c
    501  6b7c
    502  6b7c							;---------------------------------------------------------------------------------------------------
    503  6b7c
      0  6b7c					      DEF	CheckMoveListFromSquare
      1  6b7c				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  6b7c
      3  6b7c				   CheckMoveListFromSquare
    505  6b7c					      SUBROUTINE
    506  6b7c
    507  6b7c							; X12 in A
    508  6b7c							; y = -1 on return if NOT FOUND
    509  6b7c
    510  6b7c		       ac 35 f0 	      ldy	moveIndex
    511  6b7f		       30 0f		      bmi	.failed
    512  6b81
    513  6b81		       d9 36 f0    .scan      cmp	MoveFrom,y
    514  6b84		       f0 03		      beq	.scanned
    515  6b86		       88		      dey
    516  6b87		       10 f8		      bpl	.scan
    517  6b89
    518  6b89		       b9 80 f1    .scanned   lda	MovePiece,y
    519  6b8c		       29 0f		      and	#PIECE_MASK
    520  6b8e		       85 a2		      sta	aiPiece
    521  6b90
    522  6b90		       60	   .failed    rts
    523  6b91
    524  6b91							;---------------------------------------------------------------------------------------------------
    525  6b91
      0  6b91					      DEF	IsSquareUnderAttack
      1  6b91				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  6b91
      3  6b91				   IsSquareUnderAttack
    527  6b91					      SUBROUTINE
    528  6b91
    529  6b91							; Scan the movelist to find if given square is under attack
    530  6b91
    531  6b91							; Pass:	 A = X12 square to check
    532  6b91							; Return:	 CC = no
    533  6b91
    534  6b91		       ac 35 f0 	      ldy	moveIndex
    535  6b94		       30 08		      bmi	.exit
    536  6b96		       d9 00 f1    .scan      cmp	MoveTo,y
    537  6b99		       f0 04		      beq	.found	; YES!
    538  6b9b		       88		      dey
    539  6b9c		       10 f8		      bpl	.scan
    540  6b9e
    541  6b9e		       18	   .exit      clc
    542  6b9f		       60	   .found     rts
    543  6ba0
    544  6ba0
    545  6ba0							;---------------------------------------------------------------------------------------------------
    546  6ba0
      0  6ba0					      DEF	GetKingSquare
      1  6ba0				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  6ba0
      3  6ba0				   GetKingSquare
    548  6ba0					      SUBROUTINE
    549  6ba0
    550  6ba0							; Return:	 a = square king is on (or -1)
    551  6ba0
    552  6ba0		       ac 30 f0 	      ldy	PieceListPtr
    553  6ba3		       30 0c		      bmi	.exit	; no pieces?!
    554  6ba5		       b9 20 f0    .find      lda	PieceType,y
    555  6ba8		       29 0f		      and	#PIECE_MASK
    556  6baa		       c9 07		      cmp	#KING
    557  6bac		       f0 06		      beq	.found
    558  6bae		       88		      dey
    559  6baf		       10 f4		      bpl	.find
    560  6bb1
    561  6bb1		       a9 ff	   .exit      lda	#-1	; not found/no king square
    562  6bb3		       60		      rts
    563  6bb4
    564  6bb4		       b9 10 f0    .found     lda	PieceSquare,y
    565  6bb7		       be 20 f0 	      ldx	PieceType,y
    566  6bba		       60		      rts
    567  6bbb
    568  6bbb
    569  6bbb							;---------------------------------------------------------------------------------------------------
    570  6bbb
      0  6bbb					      DEF	GetPieceGivenFromToSquares
      1  6bbb				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  6bbb
      3  6bbb				   GetPieceGivenFromToSquares
    572  6bbb					      SUBROUTINE
    573  6bbb
    574  6bbb							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    575  6bbb							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    576  6bbb							; This fixes the move with/without castle flag
    577  6bbb
    578  6bbb		       ac 35 f0 	      ldy	moveIndex
    579  6bbe		       30 11		      bmi	.fail	; shouldn't happen
    580  6bc0		       a5 85	   .scan      lda	fromX12
    581  6bc2		       d9 36 f0 	      cmp	MoveFrom,y
    582  6bc5		       d0 07		      bne	.next
    583  6bc7		       a5 86		      lda	toX12
    584  6bc9		       d9 00 f1 	      cmp	MoveTo,y
    585  6bcc		       f0 04		      beq	.found
    586  6bce		       88	   .next      dey
    587  6bcf		       10 ef		      bpl	.scan
    588  6bd1		       60	   .fail      rts
    589  6bd2
    590  6bd2		       b9 80 f1    .found     lda	MovePiece,y
    591  6bd5							;and #PIECE_MASK	 castling fails if enabled
    592  6bd5		       85 a2		      sta	aiPiece
    593  6bd7		       60		      rts
    594  6bd8
    595  6bd8
    596  6bd8
    597  6bd8							;---------------------------------------------------------------------------------------------------
    598  6bd8
      0  6bd8					      DEF	CheckMoveListToSquare
      1  6bd8				   BANK_CheckMoveListToSquare SET	_CURRENT_BANK
      2  6bd8
      3  6bd8				   CheckMoveListToSquare
    600  6bd8					      SUBROUTINE
    601  6bd8
    602  6bd8							; X12 in A
    603  6bd8							; y = -1 on return if NOT FOUND
    604  6bd8
    605  6bd8		       ac 35 f0 	      ldy	moveIndex
    606  6bdb		       30 13		      bmi	.sout
    607  6bdd		       d9 00 f1    .scan      cmp	MoveTo,y
    608  6be0		       d0 09		      bne	.xscanned
    609  6be2
    610  6be2		       48		      pha
    611  6be3		       b9 36 f0 	      lda	MoveFrom,y
    612  6be6		       c5 90		      cmp	aiFromSquareX12
    613  6be8		       f0 05		      beq	.scanned
    614  6bea		       68		      pla
    615  6beb
    616  6beb		       88	   .xscanned  dey
    617  6bec		       10 ef		      bpl	.scan
    618  6bee		       48		      pha
    619  6bef
    620  6bef		       68	   .scanned   pla
    621  6bf0		       60	   .sout      rts
    622  6bf1
    623  6bf1
      0  6bf1					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  6bf1
      2  6bf1
      3  6bf1		       03 f1	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3f1 , FREE= $f
      4  6bf1					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  6bf1				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  6bf1				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  6bf1				  -	      ERR
      8  6bf1					      endif
    625  6bf1
    626  6bf1							;---------------------------------------------------------------------------------------------------
    627  6bf1
    628  6bf1							; There is space here (1K) for use as ROM
    629  6bf1							; but NOT when the above bank is switched in as RAM, of course!
    630  6bf1
    631  6bf1
    632  6bf1
    633  6bf1
    634  6bf1							;---------------------------------------------------------------------------------------------------
    635  6bf1							; EOF
------- FILE ./chess.asm
    377  6bf1
    378  6bf1							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  6bf1					      include	"BANK_FIXED.asm"
      1  6bf1							; Chess
      2  6bf1							; Copyright (c) 2019-2020 Andrew Davie
      3  6bf1							; andrew@taswegian.com
      4  6bf1
      5  6bf1
      6  6bf1							;---------------------------------------------------------------------------------------------------
      7  6bf1							;#########################################  FIXED BANK  ############################################
      8  6bf1							;---------------------------------------------------------------------------------------------------
      9  6bf1
     10  6bf1				   ORIGIN     SET	FIXED_BANK
     11  6bf1
      0  6bf1					      NEWBANK	THE_FIXED_BANK
      1  7f65 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800							;---------------------------------------------------------------------------------------------------
     16  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800
      3  7800				   Reset
     18  7800					      SUBROUTINE
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 02		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;lda #BANK_TitleScreen
     34  780e							;sta SET_BANK
     35  780e							;jsr TitleScreen
     36  780e
     37  780e
     38  780e							; Move a copy of the row bank template to the first 8 banks of RAM
     39  780e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     40  780e
      0  780e					      JSRAM_SAFE	SetupBanks
      1  780e
      2  780e
      3  780e
      4  780e		       a9 00		      lda	#BANK_SetupBanks
      5  7810		       85 8b		      sta	savedBank
      6  7812		       85 3f		      sta	SET_BANK
      7  7814		       20 1c f1 	      jsr	SetupBanks
     42  7817
     43  7817							; Patch the final row's "loop" to a RTS
     44  7817
     45  7817		       a2 07		      ldx	#7
     46  7819		       86 3e		      stx	SET_BANK_RAM
     47  781b		       a9 60		      lda	#$60	; "rts"
     48  781d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     49  7820
     50  7820
     51  7820		       a5 99		      lda	currentPly
     52  7822		       85 3e		      sta	SET_BANK_RAM
     53  7824		       20 92 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     54  7827
     55  7827		       a9 09		      lda	#RAMBANK_PLY
     56  7829		       85 3e		      sta	SET_BANK_RAM
     57  782b		       20 eb fc 	      jsr	InitialisePieceSquares
     58  782e
     59  782e		       a9 00		      lda	#WHITE
     60  7830		       85 9b		      sta	sideToMove
     61  7832
     62  7832							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     63  7832
     64  7832							;---------------------------------------------------------------------------------------------------
     65  7832
     66  7832							;RESYNC
     67  7832				   .StartFrame
     68  7832
     69  7832
     70  7832							; START OF FRAME
     71  7832
     72  7832		       a9 0e		      lda	#%1110	; VSYNC ON
     73  7834		       85 42	   .loopVSync3 sta	WSYNC
     74  7836		       85 40		      sta	VSYNC
     75  7838		       4a		      lsr
     76  7839		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     77  783b
     78  783b		       a0 37		      ldy	#TIME_PART_1
     79  783d		       8c 96 02 	      sty	TIM64T
     80  7840
     81  7840							; LOTS OF PROCESSING TIME - USE IT
     82  7840
     83  7840		       a2 00		      ldx	#0
     84  7842		       86 41		      stx	VBLANK
     85  7844
     86  7844
     87  7844					      IF	ASSERTS
     88  7844							;		      lda #$C2
     89  7844							;		      sta COLUBK		     ; colour timing band top of screen
     90  7844					      ENDIF
     91  7844
     92  7844		       20 9a f8 	      jsr	AiStateMachine
     93  7847
     94  7847							;jsr SAFE_PhasedProcessor
     95  7847
     96  7847					      IF	ASSERTS
     97  7847							;		      lda #0
     98  7847							;		      sta COLUBK		     ; end of timing band
     99  7847					      ENDIF
    100  7847
    101  7847					      if	ASSERTS
    102  7847							; Catch timer expired already
    103  7847		       2c 85 02 	      bit	TIMINT
    104  784a							;.whoops	      bmi .whoops
    105  784a					      endif
    106  784a
    107  784a
    108  784a		       2c 85 02    .wait      bit	TIMINT
    109  784d		       10 fb		      bpl	.wait
    110  784f
    111  784f
    112  784f
    113  784f							; START OF VISIBLE SCANLINES
    114  784f
    115  784f		       85 42		      sta	WSYNC
    116  7851
    117  7851		       20 99 f8 	      jsr	_rts
    118  7854		       20 99 f8 	      jsr	_rts
    119  7857		       20 99 f8 	      jsr	_rts
    120  785a		       20 99 f8 	      jsr	_rts
      0  785d					      SLEEP	3
      1  785d				   .CYCLES    SET	3
      2  785d
      3  785d				  -	      IF	.CYCLES < 2
      4  785d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  785d				  -	      ERR
      6  785d					      ENDIF
      7  785d
      8  785d					      IF	.CYCLES & 1
      9  785d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  785d		       04 00		      nop	0
     11  785f				  -	      ELSE
     12  785f				  -	      bit	VSYNC
     13  785f					      ENDIF
     14  785f				   .CYCLES    SET	.CYCLES - 3
     15  785f					      ENDIF
     16  785f
     17  785f				  -	      REPEAT	.CYCLES / 2
     18  785f				  -	      nop
     19  785f					      REPEND
    122  785f
    123  785f		       a2 00		      ldx	#0
    124  7861		       86 41		      stx	VBLANK
    125  7863
    126  7863		       86 3e		      stx	SET_BANK_RAM
    127  7865		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    128  7868
    129  7868
    130  7868
    131  7868
    132  7868		       a9 00		      lda	#0
    133  786a		       85 4d		      sta	PF0
    134  786c		       85 4e		      sta	PF1
    135  786e		       85 4f		      sta	PF2
    136  7870		       85 5b		      sta	GRP0
    137  7872		       85 5c		      sta	GRP1
    138  7874
    139  7874		       a9 42		      lda	#%01000010	; bit6 is not required
    140  7876		       85 41		      sta	VBLANK	; end of screen - enter blanking
    141  7878
    142  7878
    143  7878							; END OF VISIBLE SCREEN
    144  7878							; HERE'S SOME TIME TO DO STUFF
    145  7878
    146  7878		       a9 26		      lda	#TIME_PART_2
    147  787a		       8d 96 02 	      sta	TIM64T
    148  787d
    149  787d							;jsr AiStateMachine
    150  787d
      0  787d					      JSRAM	PositionSprites
      1  787d
      2  787d		       a9 09		      lda	#BANK_PositionSprites
      3  787f		       85 3f		      sta	SET_BANK
      4  7881		       20 00 f4 	      jsr	PositionSprites
    152  7884
    153  7884
    154  7884
    155  7884							; "draw" sprite shapes into row banks
    156  7884
    157  7884		       a2 07		      ldx	#7
    158  7886		       86 3e	   zapem      stx	SET_BANK_RAM
    159  7888		       20 a6 f2 	      jsr	WriteBlank
    160  788b		       ca		      dex
    161  788c		       10 f8		      bpl	zapem
    162  788e
    163  788e		       20 cf f2 	      jsr	WriteCursor
    164  7891
    165  7891
    166  7891		       2c 85 02    Waitforit  bit	TIMINT
    167  7894		       10 fb		      bpl	Waitforit
    168  7896
    169  7896		       4c 32 f8 	      jmp	.StartFrame
    170  7899
    171  7899
    172  7899		       60	   _rts       rts
    173  789a
    174  789a
    175  789a							;---------------------------------------------------------------------------------------------------
    176  789a
      0  789a					      DEF	AiStateMachine
      1  789a				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  789a
      3  789a				   AiStateMachine
    178  789a					      SUBROUTINE
    179  789a
    180  789a		       a9 09		      lda	#BANK_AiVectorLO
    181  789c		       85 3f		      sta	SET_BANK	; to access vectors
    182  789e		       20 8c f0 	      jsr	AiSetupVectors
    183  78a1		       b0 06		      bcs	.exit
    184  78a3		       85 3f		      sta	SET_BANK
    185  78a5
    186  78a5		       20 aa f8 	      jsr	.ind
    187  78a8		       60		      rts		;tmp jmp AiStateMachine
    188  78a9
    189  78a9
    190  78a9		       60	   .exit      rts
    191  78aa		       6c eb 00    .ind       jmp	(__ptr)
    192  78ad
    193  78ad
    194  78ad							;---------------------------------------------------------------------------------------------------
    195  78ad
      0  78ad					      DEF	CallClear
      1  78ad				   BANK_CallClear SET	_CURRENT_BANK
      2  78ad
      3  78ad				   CallClear
    197  78ad					      SUBROUTINE
    198  78ad
    199  78ad		       84 3e		      sty	SET_BANK_RAM
    200  78af		       20 90 f1 	      jsr	ClearRowBitmap
    201  78b2		       60		      rts
    202  78b3
    203  78b3							;---------------------------------------------------------------------------------------------------
    204  78b3
      0  78b3					      DEF	SAFE_Get64toX12Board
      1  78b3				   BANK_SAFE_Get64toX12Board SET	_CURRENT_BANK
      2  78b3
      3  78b3				   SAFE_Get64toX12Board
    206  78b3					      SUBROUTINE
    207  78b3
    208  78b3		       a9 08		      lda	#RAMBANK_MOVES_RAM
    209  78b5		       85 3e		      sta	SET_BANK_RAM
    210  78b7		       bc 4b f3 	      ldy	Base64ToIndex,x
    211  78ba		       b9 7a f0 	      lda	Board,y
    212  78bd		       a4 8b		      ldy	savedBank
    213  78bf		       84 3f		      sty	SET_BANK
    214  78c1		       60		      rts
    215  78c2
    216  78c2							;---------------------------------------------------------------------------------------------------
    217  78c2
      0  78c2					      DEF	aiDrawEntireBoard
      1  78c2				   BANK_aiDrawEntireBoard SET	_CURRENT_BANK
      2  78c2
      3  78c2				   aiDrawEntireBoard
    219  78c2					      SUBROUTINE
    220  78c2
    221  78c2		       a9 08		      lda	#RAMBANK_MOVES_RAM
    222  78c4		       85 3e		      sta	SET_BANK_RAM
    223  78c6
    224  78c6		       a6 80		      ldx	drawPieceNumber
    225  78c8		       bc 4b f3 	      ldy	Base64ToIndex,x
    226  78cb		       b9 7a f0 	      lda	Board,y
    227  78ce		       f0 16		      beq	.isablank
    228  78d0		       48		      pha
    229  78d1		       a9 00		      lda	#BLANK
    230  78d3		       99 7a f4 	      sta	Board+RAM_WRITE,y
    231  78d6
    232  78d6		       20 ed fd 	      jsr	CopySinglePiece
    233  78d9
    234  78d9		       a9 08		      lda	#RAMBANK_MOVES_RAM
    235  78db		       85 3e		      sta	SET_BANK_RAM
    236  78dd		       a6 80		      ldx	drawPieceNumber
    237  78df		       bc 4b f3 	      ldy	Base64ToIndex,x
    238  78e2		       68		      pla
    239  78e3		       99 7a f4 	      sta	Board+RAM_WRITE,y
    240  78e6
      0  78e6				   .isablank  PHASE	AI_DEB2
      1  78e6		       a9 11		      lda	#AI_DEB2
      2  78e8		       85 8c		      sta	aiPhase
    242  78ea		       60		      rts
    243  78eb
    244  78eb
    245  78eb							;---------------------------------------------------------------------------------------------------
    246  78eb
      0  78eb					      DEF	aiFlipBuffers
      1  78eb				   BANK_aiFlipBuffers SET	_CURRENT_BANK
      2  78eb
      3  78eb				   aiFlipBuffers
    248  78eb					      SUBROUTINE
    249  78eb
    250  78eb							; Initialise for a new move
    251  78eb
    252  78eb		       a5 99		      lda	currentPly
    253  78ed		       85 3e		      sta	SET_BANK_RAM
    254  78ef
    255  78ef		       20 92 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    256  78f2
      0  78f2					      PHASE	AI_FB0
      1  78f2		       a9 13		      lda	#AI_FB0
      2  78f4		       85 8c		      sta	aiPhase
    258  78f6		       60		      rts
    259  78f7
    260  78f7
    261  78f7							;---------------------------------------------------------------------------------------------------
    262  78f7
      0  78f7					      DEF	SAFE_InitialiseMoveGeneration
      1  78f7				   BANK_SAFE_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  78f7
      3  78f7				   SAFE_InitialiseMoveGeneration
    264  78f7					      SUBROUTINE
    265  78f7
    266  78f7		       a5 99		      lda	currentPly
    267  78f9		       85 3e		      sta	SET_BANK_RAM
    268  78fb
    269  78fb		       20 92 f2 	      jsr	NewPlyInitialise
    270  78fe
    271  78fe		       a5 8b		      lda	savedBank
    272  7900		       85 3f		      sta	SET_BANK
    273  7902		       60		      rts
    274  7903
    275  7903
    276  7903							;---------------------------------------------------------------------------------------------------
    277  7903
    278  7903							;TODO...
      0  7903					      DEF	SAFE_GenerateOneMove
      1  7903				   BANK_SAFE_GenerateOneMove SET	_CURRENT_BANK
      2  7903
      3  7903				   SAFE_GenerateOneMove
    280  7903					      SUBROUTINE
    281  7903
    282  7903		       a5 99		      lda	currentPly
    283  7905		       85 3e		      sta	SET_BANK_RAM
    284  7907		       20 ae f2 	      jsr	GenerateMovesForNextPiece
    285  790a
    286  790a		       a5 8b		      lda	savedBank
    287  790c		       85 3f		      sta	SET_BANK
    288  790e		       60		      rts
    289  790f
    290  790f
    291  790f							;---------------------------------------------------------------------------------------------------
    292  790f
    293  790f							;TODO...
      0  790f					      DEF	SAFE_LookForCheck
      1  790f				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  790f
      3  790f				   SAFE_LookForCheck
    295  790f					      SUBROUTINE
    296  790f
    297  790f		       a5 99		      lda	currentPly
    298  7911		       85 3e		      sta	SET_BANK_RAM
    299  7913
    300  7913		       ac 35 f0 	      ldy	moveIndex
    301  7916		       30 0f		      bmi	.failed
    302  7918
    303  7918		       be 00 f1    .scan      ldx	MoveTo,y
    304  791b		       bd 7a f0 	      lda	Board,x
    305  791e		       29 0f		      and	#PIECE_MASK
    306  7920		       c9 07		      cmp	#KING
    307  7922		       f0 04		      beq	.inCheck	; --> CS too
    308  7924		       88		      dey
    309  7925		       10 f1		      bpl	.scan
    310  7927
    311  7927		       18	   .failed    clc
    312  7928
    313  7928		       a5 8b	   .inCheck   lda	savedBank	; CS or CC
    314  792a		       85 3f		      sta	SET_BANK
    315  792c		       60		      rts
    316  792d
    317  792d							;---------------------------------------------------------------------------------------------------
    318  792d
    319  792d							;lab dc "aiFB0"
    320  792d							;mymac eqm aiFB0 + ..
    321  792d							;mylist dv mymac, 1, 2, 3
    322  792d
    323  792d
      0  792d					      DEF	aiFB0
      1  792d				   BANK_aiFB0 SET	_CURRENT_BANK
      2  792d
      3  792d				   aiFB0
    325  792d					      SUBROUTINE
    326  792d
    327  792d							; Call move generation for all pieces
    328  792d							; Test alpha-beta
    329  792d
    330  792d							;lda currentPly
    331  792d							;sta SET_BANK_RAM
    332  792d							;jsr alphaBeta
    333  792d
    334  792d		       a5 99		      lda	currentPly
    335  792f		       85 3e		      sta	SET_BANK_RAM
    336  7931		       20 ae f2 	      jsr	GenerateMovesForNextPiece
    337  7934
    338  7934		       a5 9a		      lda	piecelistIndex
    339  7936		       29 0f		      and	#15
    340  7938		       c9 00		      cmp	#0
    341  793a		       f0 08		      beq	.stop
    342  793c
    343  793c		       ad 84 02 	      lda	INTIM
    344  793f		       c9 12		      cmp	#18
    345  7941		       b0 ea		      bcs	aiFB0
    346  7943		       60		      rts
    347  7944
    348  7944
    349  7944		       a6 9b	   .stop      ldx	sideToMove
    350  7946		       10 05		      bpl	.player
    351  7948
      0  7948					      PHASE	AI_FB2	; computer select move
      1  7948		       a9 14		      lda	#AI_FB2
      2  794a		       85 8c		      sta	aiPhase
    353  794c		       60		      rts
    354  794d
    355  794d
      0  794d				   .player    PHASE	AI_StartMoveGen
      1  794d		       a9 0b		      lda	#AI_StartMoveGen
      2  794f		       85 8c		      sta	aiPhase
    357  7951		       60	   .wait      rts
    358  7952
    359  7952
    360  7952							;---------------------------------------------------------------------------------------------------
    361  7952
      0  7952					      DEF	aiFB2
      1  7952				   BANK_aiFB2 SET	_CURRENT_BANK
      2  7952
      3  7952				   aiFB2
    363  7952					      SUBROUTINE
    364  7952
    365  7952							; Choose one of the moves
    366  7952
    367  7952		       a5 99		      lda	currentPly
    368  7954		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    369  7956
    370  7956		       ad 35 f0 	      lda	moveIndex
    371  7959		       c9 ff		      cmp	#-1
    372  795b		       f0 11		      beq	.halted	; no valid moves
    373  795d
    374  795d
    375  795d		       a9 ff		      lda	#-1
    376  795f		       85 9c		      sta	fromSquare
    377  7961		       85 9e		      sta	toSquare
    378  7963
    379  7963		       a5 9b		      lda	sideToMove
    380  7965		       10 03		      bpl	.notComputer
    381  7967
    382  7967		       20 1d fe 	      jsr	MoveViaList
    383  796a
      0  796a				   .notComputer PHASE	AI_FB3
      1  796a		       a9 15		      lda	#AI_FB3
      2  796c		       85 8c		      sta	aiPhase
    385  796e		       60	   .halted    rts
    386  796f
    387  796f
    388  796f							;---------------------------------------------------------------------------------------------------
    389  796f
      0  796f					      DEF	debug
      1  796f				   BANK_debug SET	_CURRENT_BANK
      2  796f
      3  796f				   debug
    391  796f					      SUBROUTINE
    392  796f
    393  796f							; Use this to trap breakpoints in "unknown" banks. Just "jsr catch" from wherever you want
    394  796f							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    395  796f							; you wanted to see, without knowing the bank.
    396  796f
    397  796f		       60		      rts
    398  7970
    399  7970
    400  7970							;---------------------------------------------------------------------------------------------------
    401  7970
      0  7970					      DEF	aiMarchToTargetA
      1  7970				   BANK_aiMarchToTargetA SET	_CURRENT_BANK
      2  7970
      3  7970				   aiMarchToTargetA
    403  7970					      SUBROUTINE
    404  7970
    405  7970							; Start marching towards destination
    406  7970
    407  7970							;lda drawDelay
    408  7970							;beq .progress
    409  7970							;dec drawDelay
    410  7970							;rts
    411  7970				   .progress
    412  7970
    413  7970		       a5 9c		      lda	fromSquare
    414  7972		       c5 9e		      cmp	toSquare
    415  7974		       f0 66		      beq	.unmoved
    416  7976
    417  7976							; Now we calculate move to new square
    418  7976
    419  7976		       a5 9c		      lda	fromSquare
    420  7978		       85 83		      sta	lastSquare
    421  797a		       4a		      lsr
    422  797b		       4a		      lsr
    423  797c		       4a		      lsr
    424  797d		       85 a3		      sta	__fromRow
    425  797f		       a5 9e		      lda	toSquare
    426  7981		       4a		      lsr
    427  7982		       4a		      lsr
    428  7983		       4a		      lsr
    429  7984		       c5 a3		      cmp	__fromRow
    430  7986		       f0 11		      beq	rowOK
    431  7988		       b0 09		      bcs	.downRow
    432  798a		       a5 9c		      lda	fromSquare
    433  798c		       e9 07		      sbc	#7
    434  798e		       85 9c		      sta	fromSquare
    435  7990		       4c 99 f9 	      jmp	nowcol
    436  7993		       a5 9c	   .downRow   lda	fromSquare
    437  7995		       69 07		      adc	#7
    438  7997		       85 9c		      sta	fromSquare
    439  7999				   rowOK
    440  7999				   nowcol
    441  7999
    442  7999		       a5 9c		      lda	fromSquare
    443  799b		       29 07		      and	#7
    444  799d		       85 a3		      sta	__fromRow
    445  799f		       a5 9e		      lda	toSquare
    446  79a1		       29 07		      and	#7
    447  79a3		       c5 a3		      cmp	__fromRow
    448  79a5		       f0 09		      beq	colok
    449  79a7		       90 05		      bcc	.leftCol
    450  79a9		       e6 9c		      inc	fromSquare
    451  79ab		       4c b0 f9 	      jmp	colok
    452  79ae		       c6 9c	   .leftCol   dec	fromSquare
    453  79b0				   colok
    454  79b0
    455  79b0							; erase object in new sqare --> blank
    456  79b0
    457  79b0		       a6 9c		      ldx	fromSquare
    458  79b2		       86 80		      stx	drawPieceNumber
    459  79b4		       a9 08		      lda	#RAMBANK_MOVES_RAM
    460  79b6		       85 3e		      sta	SET_BANK_RAM
    461  79b8		       bc 4b f3 	      ldy	Base64ToIndex,x
    462  79bb		       b9 7a f0 	      lda	Board,y
    463  79be		       f0 03		      beq	.skipbl
    464  79c0		       20 ed fd 	      jsr	CopySinglePiece	; erase next square along --> blank
    465  79c3
    466  79c3		       a9 08	   .skipbl    lda	#RAMBANK_MOVES_RAM
    467  79c5		       85 3e		      sta	SET_BANK_RAM
    468  79c7		       a6 9c		      ldx	fromSquare
    469  79c9		       bc 4b f3 	      ldy	Base64ToIndex,x
    470  79cc
    471  79cc		       b9 7a f0 	      lda	Board,y
    472  79cf		       85 9f		      sta	lastPiece	; what we are overwriting
    473  79d1		       a5 9d		      lda	fromPiece
    474  79d3		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling for K/R
    475  79d5		       99 7a f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    476  79d8
      0  79d8					      PHASE	AI_MarchB
      1  79d8		       a9 18		      lda	#AI_MarchB
      2  79da		       85 8c		      sta	aiPhase
    478  79dc
    479  79dc		       60	   .unmoved   rts
    480  79dd
    481  79dd
    482  79dd							;---------------------------------------------------------------------------------------------------
    483  79dd
      0  79dd					      DEF	aiMarchToTargetB
      1  79dd				   BANK_aiMarchToTargetB SET	_CURRENT_BANK
      2  79dd
      3  79dd				   aiMarchToTargetB
    485  79dd					      SUBROUTINE
    486  79dd
    487  79dd							;lda drawDelay
    488  79dd							;beq .mb
    489  79dd							;dec drawDelay
    490  79dd							;rts
    491  79dd							;.mb
    492  79dd
    493  79dd
    494  79dd							; now we want to undraw the piece in the old square
    495  79dd
    496  79dd		       a5 83		      lda	lastSquare
    497  79df		       85 80		      sta	drawPieceNumber
    498  79e1		       20 ed fd 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    499  79e4
    500  79e4		       a9 08		      lda	#RAMBANK_MOVES_RAM
    501  79e6		       85 3e		      sta	SET_BANK_RAM
    502  79e8		       a5 a0		      lda	previousPiece
    503  79ea
    504  79ea		       a6 83		      ldx	lastSquare
    505  79ec		       bc 4b f3 	      ldy	Base64ToIndex,x
    506  79ef		       99 7a f4 	      sta	Board+RAM_WRITE,y
    507  79f2
    508  79f2		       a5 9f		      lda	lastPiece
    509  79f4		       85 a0		      sta	previousPiece
    510  79f6
      0  79f6					      PHASE	AI_MarchB2
      1  79f6		       a9 1a		      lda	#AI_MarchB2
      2  79f8		       85 8c		      sta	aiPhase
    512  79fa
    513  79fa		       60		      rts
    514  79fb
    515  79fb
    516  79fb							;---------------------------------------------------------------------------------------------------
    517  79fb
      0  79fb					      DEF	aiMarchB2
      1  79fb				   BANK_aiMarchB2 SET	_CURRENT_BANK
      2  79fb
      3  79fb				   aiMarchB2
    519  79fb					      SUBROUTINE
    520  79fb
    521  79fb		       a6 83		      ldx	lastSquare
    522  79fd		       86 80		      stx	drawPieceNumber
    523  79ff
    524  79ff		       a9 08		      lda	#RAMBANK_MOVES_RAM
    525  7a01		       85 3e		      sta	SET_BANK_RAM
    526  7a03		       bc 4b f3 	      ldy	Base64ToIndex,x
    527  7a06		       b9 7a f0 	      lda	Board,y
    528  7a09		       f0 03		      beq	.skipbl2
    529  7a0b
    530  7a0b		       20 ed fd 	      jsr	CopySinglePiece	; draw previous piece back in old position
    531  7a0e				   .skipbl2
    532  7a0e		       a5 9c		      lda	fromSquare
    533  7a10		       c5 9e		      cmp	toSquare
    534  7a12		       f0 09		      beq	xhalt
    535  7a14
    536  7a14		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    537  7a16		       85 82		      sta	drawDelay
      0  7a18					      PHASE	AI_MarchToTargetA
      1  7a18		       a9 17		      lda	#AI_MarchToTargetA
      2  7a1a		       85 8c		      sta	aiPhase
    539  7a1c
    540  7a1c		       60		      rts
    541  7a1d
    542  7a1d				   xhalt
    543  7a1d
    544  7a1d		       20 25 fe 	      jsr	FinaliseMove
    545  7a20
    546  7a20
    547  7a20		       a9 04		      lda	#4	; on/off count
    548  7a22		       85 84		      sta	drawCount	; flashing for piece about to move
    549  7a24		       a9 00		      lda	#0
    550  7a26		       85 82		      sta	drawDelay
    551  7a28
      0  7a28					      PHASE	AI_FinalFlash
      1  7a28		       a9 1b		      lda	#AI_FinalFlash
      2  7a2a		       85 8c		      sta	aiPhase
    553  7a2c		       60		      rts
    554  7a2d
    555  7a2d
    556  7a2d							;---------------------------------------------------------------------------------------------------
    557  7a2d
      0  7a2d					      DEF	aiSpecialMoveFixup
      1  7a2d				   BANK_aiSpecialMoveFixup SET	_CURRENT_BANK
      2  7a2d
      3  7a2d				   aiSpecialMoveFixup
    559  7a2d					      SUBROUTINE
    560  7a2d
      0  7a2d					      PHASE	AI_FlipBuffers
      1  7a2d		       a9 12		      lda	#AI_FlipBuffers
      2  7a2f		       85 8c		      sta	aiPhase
    562  7a31
      0  7a31					      JSRAM_SAFE	CastleFixup
      1  7a31
      2  7a31
      3  7a31
      4  7a31		       a9 00		      lda	#BANK_CastleFixup
      5  7a33		       85 8b		      sta	savedBank
      6  7a35		       85 3f		      sta	SET_BANK
      7  7a37		       20 ce f0 	      jsr	CastleFixup
    564  7a3a
    565  7a3a
    566  7a3a							; Handle en-passant captures
    567  7a3a
    568  7a3a		       a5 9d		      lda	fromPiece
    569  7a3c		       29 20		      and	#FLAG_ENPASSANT
    570  7a3e		       f0 26		      beq	.noEP
    571  7a40
    572  7a40							; get the en-passant square, saved in the ply by the previous made-move
    573  7a40
    574  7a40		       a5 99		      lda	currentPly
    575  7a42		       85 3e		      sta	SET_BANK_RAM
    576  7a44
    577  7a44		       ac 34 f0 	      ldy	enPassantSquare
    578  7a47					      IF	ASSERTS
    579  7a47		       f0 fe	   .eperror   beq	.eperror	; CANNOT have EP *AND* no capture square!!
    580  7a49					      ENDIF
    581  7a49		       84 85		      sty	fromX12
    582  7a4b		       b9 01 ff 	      lda	X12toBase64,y
    583  7a4e		       85 80		      sta	drawPieceNumber
    584  7a50
    585  7a50		       a9 08		      lda	#RAMBANK_MOVES_RAM
    586  7a52		       85 3e		      sta	SET_BANK_RAM
    587  7a54		       b9 7a f0 	      lda	Board,y
    588  7a57		       20 ed fd 	      jsr	CopySinglePiece	; ERASE pawn
    589  7a5a
    590  7a5a
    591  7a5a		       a5 9b		      lda	sideToMove
    592  7a5c		       0a		      asl
    593  7a5d		       a9 09		      lda	#RAMBANK_PLY
    594  7a5f		       69 00		      adc	#0
    595  7a61		       85 3e		      sta	SET_BANK_RAM
    596  7a63
    597  7a63		       20 ce f2 	      jsr	FixPieceList	; REMOVE any captured object
    598  7a66
    599  7a66				   .noEP
    600  7a66
    601  7a66
    602  7a66
    603  7a66					      if	ASSERTS
      0  7a66					      JSRAM_SAFE	DIAGNOSTIC_checkPieces
      1  7a66
      2  7a66
      3  7a66
      4  7a66		       a9 0d		      lda	#BANK_DIAGNOSTIC_checkPieces
      5  7a68		       85 8b		      sta	savedBank
      6  7a6a		       85 3f		      sta	SET_BANK
      7  7a6c		       20 44 f2 	      jsr	DIAGNOSTIC_checkPieces
    605  7a6f					      endif
    606  7a6f
    607  7a6f		       60		      rts
    608  7a70
    609  7a70
    610  7a70							;---------------------------------------------------------------------------------------------------
    611  7a70
      0  7a70					      DEF	MoveForSinglePiece
      1  7a70				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  7a70
      3  7a70				   MoveForSinglePiece
    613  7a70					      SUBROUTINE
    614  7a70
    615  7a70		       a9 08		      lda	#RAMBANK_MOVES_RAM
    616  7a72		       85 3e		      sta	SET_BANK_RAM
    617  7a74
    618  7a74		       a6 95		      ldx	currentSquare	; used in move handlers
    619  7a76		       bd 7a f0 	      lda	Board,x
    620  7a79		       85 94		      sta	currentPiece
    621  7a7b
    622  7a7b					      IF	ASSERTS
    623  7a7b					      SUBROUTINE
    624  7a7b							; DEBUG: Make sure we're looking at correct colour
    625  7a7b		       45 9b		      eor	sideToMove
    626  7a7d		       30 fe	   .lock      bmi	.lock
    627  7a7f		       a5 94		      lda	currentPiece
    628  7a81					      ENDIF
    629  7a81
    630  7a81		       29 0f		      and	#PIECE_MASK
    631  7a83		       a8		      tay
    632  7a84
    633  7a84					      IF	ASSERTS
    634  7a84							; DEBUG: Make sure we have an actual piece, not an empty square
    635  7a84					      SUBROUTINE
    636  7a84		       f0 fe	   .lock      beq	.lock	; catch errors
    637  7a86					      ENDIF
    638  7a86
    639  7a86		       b9 98 fa 	      lda	HandlerVectorLO-1,y
    640  7a89		       85 a4		      sta	__vector
    641  7a8b		       b9 9f fa 	      lda	HandlerVectorHI-1,y
    642  7a8e		       85 a5		      sta	__vector+1
    643  7a90		       6c a4 00 	      jmp	(__vector)
    644  7a93
    645  7a93		       a5 99	   MoveReturn lda	currentPly
    646  7a95		       85 3e		      sta	SET_BANK_RAM
    647  7a97
    648  7a97		       60		      rts
    649  7a98
      0  7a98					      OPTIONAL_PAGEBREAK	"Vector Tables", 15
     10  7a98					      LIST	ON
    651  7a98
    652  7a98		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    653  7a99
    654  7a99				   HandlerVectorLO
    655  7a99		       d2		      .byte.b	<Handle_WHITE_PAWN	; 1
    656  7a9a		       98		      .byte.b	<Handle_BLACK_PAWN	; 2
    657  7a9b		       33		      .byte.b	<Handle_KNIGHT	; 3
    658  7a9c		       a1		      .byte.b	<Handle_BISHOP	; 4
    659  7a9d		       04		      .byte.b	<Handle_ROOK	; 5
    660  7a9e		       de		      .byte.b	<Handle_QUEEN	; 6
    661  7a9f		       67		      .byte.b	<Handle_KING	; 7
    662  7aa0
    663  7aa0				   HandlerVectorHI
    664  7aa0		       fa		      .byte.b	>Handle_WHITE_PAWN
    665  7aa1		       fb		      .byte.b	>Handle_BLACK_PAWN
    666  7aa2		       fc		      .byte.b	>Handle_KNIGHT
    667  7aa3		       f1		      .byte.b	>Handle_BISHOP
    668  7aa4		       f2		      .byte.b	>Handle_ROOK
    669  7aa5		       f0		      .byte.b	>Handle_QUEEN
    670  7aa6		       f2		      .byte.b	>Handle_KING
    671  7aa7
    672  7aa7							;---------------------------------------------------------------------------------------------------
    673  7aa7
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  7aa7					      include	"Handler_PAWN.asm"
      1  7aa7							; Copyright (C)2020 Andrew Davie
      2  7aa7							; Pawn move handlers
      3  7aa7
      4  7aa7							;---------------------------------------------------------------------------------------------------
      5  7aa7							; WHITE PAWN
      6  7aa7							;---------------------------------------------------------------------------------------------------
      7  7aa7
      8  7aa7		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  7aa7		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  7aa7
     11  7aa7							;---------------------------------------------------------------------------------------------------
     12  7aa7
     13  7aa7					      MAC	en_passant
     14  7aa7					      SUBROUTINE
     15  7aa7							; {1} = _LEFT or _RIGHT
     16  7aa7
     17  7aa7					      ldx	currentSquare
     18  7aa7					      ldy	ValidSquare+{1},x
     19  7aa7					      cpy	enPassantPawn
     20  7aa7					      bne	.invalid
     21  7aa7					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     22  7aa7					      lda	Board,y
     23  7aa7					      bne	.invalid
     24  7aa7					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     25  7aa7				   .invalid
     26  7aa7					      ENDM
     27  7aa7
     28  7aa7							;---------------------------------------------------------------------------------------------------
     29  7aa7
     30  7aa7					      MAC	promote_pawn
     31  7aa7					      SUBROUTINE
     32  7aa7							;{1} = BLACK or WHITE
     33  7aa7
     34  7aa7					      lda	currentPiece
     35  7aa7					      pha
     36  7aa7
     37  7aa7					      sty	__temp
     38  7aa7					      lda	#{1}|QUEEN
     39  7aa7					      sta	currentPiece
     40  7aa7					      jsr	AddMove
     41  7aa7
     42  7aa7					      lda	#{1}|ROOK
     43  7aa7					      sta	currentPiece
     44  7aa7					      ldy	__temp
     45  7aa7					      jsr	AddMove
     46  7aa7
     47  7aa7					      lda	#{1}|BISHOP
     48  7aa7					      sta	currentPiece
     49  7aa7					      ldy	__temp
     50  7aa7					      jsr	AddMove
     51  7aa7
     52  7aa7					      lda	#{1}|KNIGHT
     53  7aa7					      sta	currentPiece
     54  7aa7					      ldy	__temp
     55  7aa7					      jsr	AddMove
     56  7aa7
     57  7aa7					      pla
     58  7aa7					      sta	currentPiece
     59  7aa7					      ENDM
     60  7aa7
     61  7aa7							;---------------------------------------------------------------------------------------------------
     62  7aa7
     63  7aa7					      MAC	move_or_promote_pawn
     64  7aa7					      SUBROUTINE
     65  7aa7							; {1} = BLACK or WHITE
     66  7aa7
     67  7aa7					      IF	{1} = WHITE
     68  7aa7					      cpy	#90	; last rank?
     69  7aa7					      bcc	.standard
     70  7aa7					      jsr	PromoteWhitePawn
     71  7aa7					      jmp	.pMoved
     72  7aa7					      ENDIF
     73  7aa7
     74  7aa7					      IF	{1} = BLACK
     75  7aa7					      cpy	#30	; last rank?
     76  7aa7					      bcs	.standard
     77  7aa7					      jsr	PromoteBlackPawn
     78  7aa7					      jmp	.pMoved
     79  7aa7					      ENDIF
     80  7aa7
     81  7aa7				   .standard  jsr	AddMove	; add +1UP move
     82  7aa7				   .pMoved
     83  7aa7
     84  7aa7					      ENDM
     85  7aa7
     86  7aa7							;---------------------------------------------------------------------------------------------------
     87  7aa7
     88  7aa7					      MAC	take
     89  7aa7					      SUBROUTINE
     90  7aa7							; {1} = capture square offset
     91  7aa7
     92  7aa7					      ldx	currentSquare
     93  7aa7					      ldy	ValidSquare+{1},x
     94  7aa7					      bmi	.invalid
     95  7aa7					      lda	Board,y
     96  7aa7					      beq	.invalid	; square empty
     97  7aa7					      eor	currentPiece
     98  7aa7					      bpl	.invalid	; same colour
     99  7aa7
    100  7aa7					      MOVE_OR_PROMOTE_PAWN	{2}
    101  7aa7				   .invalid
    102  7aa7					      ENDM
    103  7aa7
    104  7aa7							;---------------------------------------------------------------------------------------------------
    105  7aa7
      0  7aa7					      DEF	PromoteWhitePawn
      1  7aa7				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7aa7
      3  7aa7				   PromoteWhitePawn
    107  7aa7
      0  7aa7					      PROMOTE_PAWN	WHITE
      1  7aa7					      SUBROUTINE
      2  7aa7
      3  7aa7
      4  7aa7		       a5 94		      lda	currentPiece
      5  7aa9		       48		      pha
      6  7aaa
      7  7aaa		       84 a5		      sty	__temp
      8  7aac		       a9 06		      lda	#WHITE|QUEEN
      9  7aae		       85 94		      sta	currentPiece
     10  7ab0		       20 cc fc 	      jsr	AddMove
     11  7ab3
     12  7ab3		       a9 05		      lda	#WHITE|ROOK
     13  7ab5		       85 94		      sta	currentPiece
     14  7ab7		       a4 a5		      ldy	__temp
     15  7ab9		       20 cc fc 	      jsr	AddMove
     16  7abc
     17  7abc		       a9 04		      lda	#WHITE|BISHOP
     18  7abe		       85 94		      sta	currentPiece
     19  7ac0		       a4 a5		      ldy	__temp
     20  7ac2		       20 cc fc 	      jsr	AddMove
     21  7ac5
     22  7ac5		       a9 03		      lda	#WHITE|KNIGHT
     23  7ac7		       85 94		      sta	currentPiece
     24  7ac9		       a4 a5		      ldy	__temp
     25  7acb		       20 cc fc 	      jsr	AddMove
     26  7ace
     27  7ace		       68		      pla
     28  7acf		       85 94		      sta	currentPiece
    109  7ad1		       60		      rts
    110  7ad2
    111  7ad2							;---------------------------------------------------------------------------------------------------
    112  7ad2
      0  7ad2					      DEF	Handle_WHITE_PAWN
      1  7ad2				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7ad2
      3  7ad2				   Handle_WHITE_PAWN
    114  7ad2
    115  7ad2		       bc 20 f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    116  7ad5		       b9 7a f0 	      lda	Board,y
    117  7ad8		       d0 24		      bne	.pMoved	; occupied
    118  7ada
    119  7ada							; we may need to promote the pawn
    120  7ada							; All possibilites (Q/R/B/N) are added as individual moves
    121  7ada
      0  7ada					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7ada					      SUBROUTINE
      2  7ada
      3  7ada
      4  7ada					      IF	WHITE = WHITE
      5  7ada		       c0 5a		      cpy	#90
      6  7adc		       90 06		      bcc	.standard
      7  7ade		       20 a7 fa 	      jsr	PromoteWhitePawn
      8  7ae1		       4c e7 fa 	      jmp	.pMoved
      9  7ae4					      ENDIF
     10  7ae4
     11  7ae4				  -	      IF	WHITE = BLACK
     12  7ae4				  -	      cpy	#30
     13  7ae4				  -	      bcs	.standard
     14  7ae4				  -	      jsr	PromoteBlackPawn
     15  7ae4				  -	      jmp	.pMoved
     16  7ae4					      ENDIF
     17  7ae4
     18  7ae4		       20 cc fc    .standard  jsr	AddMove
     19  7ae7				   .pMoved
     20  7ae7
    123  7ae7
    124  7ae7							; the +2 move off the home rank...
    125  7ae7
    126  7ae7		       a6 95		      ldx	currentSquare
    127  7ae9		       e0 28		      cpx	#WHITE_HOME_ROW
    128  7aeb		       b0 11		      bcs	.pMoved	; pawn has moved so can't do +2
    129  7aed		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    130  7af0		       b9 7a f0 	      lda	Board,y
    131  7af3		       d0 09		      bne	.pMoved	; destination square occupied
    132  7af5
    133  7af5		       a5 94		      lda	currentPiece
    134  7af7		       09 20		      ora	#FLAG_ENPASSANT
    135  7af9		       85 94		      sta	currentPiece	; GENERATE en-passant opportunity
    136  7afb
    137  7afb		       20 cc fc 	      jsr	AddMove	; add the +2UP move off home row
    138  7afe
    139  7afe				   .pMoved
    140  7afe
    141  7afe							; regular captures...
    142  7afe
      0  7afe					      TAKE	_UP+_LEFT, WHITE
      1  7afe					      SUBROUTINE
      2  7afe
      3  7afe
      4  7afe		       a6 95		      ldx	currentSquare
      5  7b00		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      6  7b03		       30 16		      bmi	.invalid
      7  7b05		       b9 7a f0 	      lda	Board,y
      8  7b08		       f0 11		      beq	.invalid
      9  7b0a		       45 94		      eor	currentPiece
     10  7b0c		       10 0d		      bpl	.invalid
     11  7b0e
      0  7b0e					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b0e					      SUBROUTINE
      2  7b0e
      3  7b0e
      4  7b0e					      IF	WHITE = WHITE
      5  7b0e		       c0 5a		      cpy	#90
      6  7b10		       90 06		      bcc	.standard
      7  7b12		       20 a7 fa 	      jsr	PromoteWhitePawn
      8  7b15		       4c 1b fb 	      jmp	.pMoved
      9  7b18					      ENDIF
     10  7b18
     11  7b18				  -	      IF	WHITE = BLACK
     12  7b18				  -	      cpy	#30
     13  7b18				  -	      bcs	.standard
     14  7b18				  -	      jsr	PromoteBlackPawn
     15  7b18				  -	      jmp	.pMoved
     16  7b18					      ENDIF
     17  7b18
     18  7b18		       20 cc fc    .standard  jsr	AddMove
     19  7b1b				   .pMoved
     20  7b1b
     13  7b1b				   .invalid
      0  7b1b					      TAKE	_UP+_RIGHT, WHITE
      1  7b1b					      SUBROUTINE
      2  7b1b
      3  7b1b
      4  7b1b		       a6 95		      ldx	currentSquare
      5  7b1d		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      6  7b20		       30 16		      bmi	.invalid
      7  7b22		       b9 7a f0 	      lda	Board,y
      8  7b25		       f0 11		      beq	.invalid
      9  7b27		       45 94		      eor	currentPiece
     10  7b29		       10 0d		      bpl	.invalid
     11  7b2b
      0  7b2b					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b2b					      SUBROUTINE
      2  7b2b
      3  7b2b
      4  7b2b					      IF	WHITE = WHITE
      5  7b2b		       c0 5a		      cpy	#90
      6  7b2d		       90 06		      bcc	.standard
      7  7b2f		       20 a7 fa 	      jsr	PromoteWhitePawn
      8  7b32		       4c 38 fb 	      jmp	.pMoved
      9  7b35					      ENDIF
     10  7b35
     11  7b35				  -	      IF	WHITE = BLACK
     12  7b35				  -	      cpy	#30
     13  7b35				  -	      bcs	.standard
     14  7b35				  -	      jsr	PromoteBlackPawn
     15  7b35				  -	      jmp	.pMoved
     16  7b35					      ENDIF
     17  7b35
     18  7b35		       20 cc fc    .standard  jsr	AddMove
     19  7b38				   .pMoved
     20  7b38
     13  7b38				   .invalid
    145  7b38
    146  7b38
    147  7b38							; en-passant captures...
    148  7b38
    149  7b38		       a5 97		      lda	enPassantPawn
    150  7b3a		       f0 2e		      beq	.noEnPassant	; previous move (opponent) enpassant square?
    151  7b3c
    152  7b3c		       a5 94		      lda	currentPiece
    153  7b3e		       09 20		      ora	#FLAG_ENPASSANT
    154  7b40		       85 94		      sta	currentPiece	; CONSUME en-passant opportunity
    155  7b42
      0  7b42					      EN_PASSANT	_LEFT, _UP
      1  7b42					      SUBROUTINE
      2  7b42
      3  7b42
      4  7b42		       a6 95		      ldx	currentSquare
      5  7b44		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      6  7b47		       c4 97		      cpy	enPassantPawn
      7  7b49		       d0 0b		      bne	.invalid
      8  7b4b		       bc 1f f0 	      ldy	ValidSquare+_LEFT+_UP,x
      9  7b4e		       b9 7a f0 	      lda	Board,y
     10  7b51		       d0 03		      bne	.invalid
     11  7b53		       20 cc fc 	      jsr	AddMove
     12  7b56				   .invalid
      0  7b56					      EN_PASSANT	_RIGHT, _UP
      1  7b56					      SUBROUTINE
      2  7b56
      3  7b56
      4  7b56		       a6 95		      ldx	currentSquare
      5  7b58		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      6  7b5b		       c4 97		      cpy	enPassantPawn
      7  7b5d		       d0 0b		      bne	.invalid
      8  7b5f		       bc 21 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      9  7b62		       b9 7a f0 	      lda	Board,y
     10  7b65		       d0 03		      bne	.invalid
     11  7b67		       20 cc fc 	      jsr	AddMove
     12  7b6a				   .invalid
    158  7b6a
    159  7b6a		       4c 93 fa    .noEnPassant jmp	MoveReturn
    160  7b6d
    161  7b6d
    162  7b6d							;---------------------------------------------------------------------------------------------------
    163  7b6d							; BLACK PAWN
    164  7b6d							;---------------------------------------------------------------------------------------------------
    165  7b6d
      0  7b6d					      DEF	PromoteBlackPawn
      1  7b6d				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7b6d
      3  7b6d				   PromoteBlackPawn
      0  7b6d					      PROMOTE_PAWN	BLACK
      1  7b6d					      SUBROUTINE
      2  7b6d
      3  7b6d
      4  7b6d		       a5 94		      lda	currentPiece
      5  7b6f		       48		      pha
      6  7b70
      7  7b70		       84 a5		      sty	__temp
      8  7b72		       a9 86		      lda	#BLACK|QUEEN
      9  7b74		       85 94		      sta	currentPiece
     10  7b76		       20 cc fc 	      jsr	AddMove
     11  7b79
     12  7b79		       a9 85		      lda	#BLACK|ROOK
     13  7b7b		       85 94		      sta	currentPiece
     14  7b7d		       a4 a5		      ldy	__temp
     15  7b7f		       20 cc fc 	      jsr	AddMove
     16  7b82
     17  7b82		       a9 84		      lda	#BLACK|BISHOP
     18  7b84		       85 94		      sta	currentPiece
     19  7b86		       a4 a5		      ldy	__temp
     20  7b88		       20 cc fc 	      jsr	AddMove
     21  7b8b
     22  7b8b		       a9 83		      lda	#BLACK|KNIGHT
     23  7b8d		       85 94		      sta	currentPiece
     24  7b8f		       a4 a5		      ldy	__temp
     25  7b91		       20 cc fc 	      jsr	AddMove
     26  7b94
     27  7b94		       68		      pla
     28  7b95		       85 94		      sta	currentPiece
    168  7b97		       60		      rts
    169  7b98
      0  7b98					      DEF	Handle_BLACK_PAWN
      1  7b98				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7b98
      3  7b98				   Handle_BLACK_PAWN
    171  7b98					      SUBROUTINE
    172  7b98
    173  7b98		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    174  7b9b		       b9 7a f0 	      lda	Board,y
    175  7b9e		       d0 24		      bne	.pMoved	; occupied
    176  7ba0
    177  7ba0
    178  7ba0							; we may need to promote the pawn
    179  7ba0							; All possibilites (Q/R/B/N) are added as individual moves
    180  7ba0
      0  7ba0					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7ba0					      SUBROUTINE
      2  7ba0
      3  7ba0
      4  7ba0				  -	      IF	BLACK = WHITE
      5  7ba0				  -	      cpy	#90
      6  7ba0				  -	      bcc	.standard
      7  7ba0				  -	      jsr	PromoteWhitePawn
      8  7ba0				  -	      jmp	.pMoved
      9  7ba0					      ENDIF
     10  7ba0
     11  7ba0					      IF	BLACK = BLACK
     12  7ba0		       c0 1e		      cpy	#30
     13  7ba2		       b0 06		      bcs	.standard
     14  7ba4		       20 6d fb 	      jsr	PromoteBlackPawn
     15  7ba7		       4c ad fb 	      jmp	.pMoved
     16  7baa					      ENDIF
     17  7baa
     18  7baa		       20 cc fc    .standard  jsr	AddMove
     19  7bad				   .pMoved
     20  7bad
    182  7bad
    183  7bad							; the +2 move off the home rank...
    184  7bad
    185  7bad		       a6 95		      ldx	currentSquare
    186  7baf		       e0 52		      cpx	#BLACK_HOME_ROW
    187  7bb1		       90 11		      bcc	.pMoved	; pawn has moved so can't do +2
    188  7bb3
    189  7bb3
    190  7bb3		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    191  7bb6		       b9 7a f0 	      lda	Board,y
    192  7bb9		       d0 09		      bne	.pMoved	; destination square occupied
    193  7bbb
    194  7bbb		       a5 94		      lda	currentPiece
    195  7bbd		       09 20		      ora	#FLAG_ENPASSANT
    196  7bbf		       85 94		      sta	currentPiece	; CAN en-passant
    197  7bc1
    198  7bc1		       20 cc fc 	      jsr	AddMove	; add the +2DOWN move off home row
    199  7bc4
    200  7bc4				   .pMoved
    201  7bc4
    202  7bc4							; regular captures... (with promotion)
    203  7bc4
      0  7bc4					      TAKE	_DOWN+_LEFT, BLACK
      1  7bc4					      SUBROUTINE
      2  7bc4
      3  7bc4
      4  7bc4		       a6 95		      ldx	currentSquare
      5  7bc6		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      6  7bc9		       30 16		      bmi	.invalid
      7  7bcb		       b9 7a f0 	      lda	Board,y
      8  7bce		       f0 11		      beq	.invalid
      9  7bd0		       45 94		      eor	currentPiece
     10  7bd2		       10 0d		      bpl	.invalid
     11  7bd4
      0  7bd4					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bd4					      SUBROUTINE
      2  7bd4
      3  7bd4
      4  7bd4				  -	      IF	BLACK = WHITE
      5  7bd4				  -	      cpy	#90
      6  7bd4				  -	      bcc	.standard
      7  7bd4				  -	      jsr	PromoteWhitePawn
      8  7bd4				  -	      jmp	.pMoved
      9  7bd4					      ENDIF
     10  7bd4
     11  7bd4					      IF	BLACK = BLACK
     12  7bd4		       c0 1e		      cpy	#30
     13  7bd6		       b0 06		      bcs	.standard
     14  7bd8		       20 6d fb 	      jsr	PromoteBlackPawn
     15  7bdb		       4c e1 fb 	      jmp	.pMoved
     16  7bde					      ENDIF
     17  7bde
     18  7bde		       20 cc fc    .standard  jsr	AddMove
     19  7be1				   .pMoved
     20  7be1
     13  7be1				   .invalid
      0  7be1					      TAKE	_DOWN+_RIGHT, BLACK
      1  7be1					      SUBROUTINE
      2  7be1
      3  7be1
      4  7be1		       a6 95		      ldx	currentSquare
      5  7be3		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      6  7be6		       30 16		      bmi	.invalid
      7  7be8		       b9 7a f0 	      lda	Board,y
      8  7beb		       f0 11		      beq	.invalid
      9  7bed		       45 94		      eor	currentPiece
     10  7bef		       10 0d		      bpl	.invalid
     11  7bf1
      0  7bf1					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bf1					      SUBROUTINE
      2  7bf1
      3  7bf1
      4  7bf1				  -	      IF	BLACK = WHITE
      5  7bf1				  -	      cpy	#90
      6  7bf1				  -	      bcc	.standard
      7  7bf1				  -	      jsr	PromoteWhitePawn
      8  7bf1				  -	      jmp	.pMoved
      9  7bf1					      ENDIF
     10  7bf1
     11  7bf1					      IF	BLACK = BLACK
     12  7bf1		       c0 1e		      cpy	#30
     13  7bf3		       b0 06		      bcs	.standard
     14  7bf5		       20 6d fb 	      jsr	PromoteBlackPawn
     15  7bf8		       4c fe fb 	      jmp	.pMoved
     16  7bfb					      ENDIF
     17  7bfb
     18  7bfb		       20 cc fc    .standard  jsr	AddMove
     19  7bfe				   .pMoved
     20  7bfe
     13  7bfe				   .invalid
    206  7bfe
    207  7bfe							; en-passant captures...
    208  7bfe
    209  7bfe		       a5 97		      lda	enPassantPawn
    210  7c00		       f0 2e		      beq	.noEnPassant	; was last move en-passantable?
    211  7c02
    212  7c02		       a5 94		      lda	currentPiece
    213  7c04		       09 20		      ora	#FLAG_ENPASSANT
    214  7c06		       85 94		      sta	currentPiece	; any en-passant move added will have flag set
    215  7c08
      0  7c08					      EN_PASSANT	_LEFT, _DOWN
      1  7c08					      SUBROUTINE
      2  7c08
      3  7c08
      4  7c08		       a6 95		      ldx	currentSquare
      5  7c0a		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      6  7c0d		       c4 97		      cpy	enPassantPawn
      7  7c0f		       d0 0b		      bne	.invalid
      8  7c11		       bc 0b f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      9  7c14		       b9 7a f0 	      lda	Board,y
     10  7c17		       d0 03		      bne	.invalid
     11  7c19		       20 cc fc 	      jsr	AddMove
     12  7c1c				   .invalid
      0  7c1c					      EN_PASSANT	_RIGHT, _DOWN
      1  7c1c					      SUBROUTINE
      2  7c1c
      3  7c1c
      4  7c1c		       a6 95		      ldx	currentSquare
      5  7c1e		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      6  7c21		       c4 97		      cpy	enPassantPawn
      7  7c23		       d0 0b		      bne	.invalid
      8  7c25		       bc 0d f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      9  7c28		       b9 7a f0 	      lda	Board,y
     10  7c2b		       d0 03		      bne	.invalid
     11  7c2d		       20 cc fc 	      jsr	AddMove
     12  7c30				   .invalid
    218  7c30
    219  7c30				   .noEnPassant
    220  7c30		       4c 93 fa 	      jmp	MoveReturn
    221  7c33
    222  7c33							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  7c33					      include	"Handler_KNIGHT.asm"
      1  7c33							; Copyright (C)2020 Andrew Davie
      2  7c33							; Knight move handler
      3  7c33
      4  7c33							;---------------------------------------------------------------------------------------------------
      5  7c33							; KNIGHT
      6  7c33							;---------------------------------------------------------------------------------------------------
      7  7c33
      0  7c33					      DEF	Handle_KNIGHT
      1  7c33				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  7c33
      3  7c33				   Handle_KNIGHT
      9  7c33
     10  7c33							; x = currentSquare (square the piece is on)
     11  7c33							; currentPiece (with flags/colour attached)
     12  7c33
      0  7c33					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  7c33					      SUBROUTINE
      2  7c33		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  7c36		       30 0c		      bmi	.invalid
      4  7c38		       b9 7a f0 	      lda	Board,y
      5  7c3b		       f0 04		      beq	.squareEmpty
      6  7c3d		       45 94		      eor	currentPiece
      7  7c3f		       10 03		      bpl	.invalid
      8  7c41		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c44				   .invalid
      0  7c44					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  7c44		       a6 95		      ldx	currentSquare
      0  7c46					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  7c46					      SUBROUTINE
      2  7c46		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  7c49		       30 0c		      bmi	.invalid
      4  7c4b		       b9 7a f0 	      lda	Board,y
      5  7c4e		       f0 04		      beq	.squareEmpty
      6  7c50		       45 94		      eor	currentPiece
      7  7c52		       10 03		      bpl	.invalid
      8  7c54		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c57				   .invalid
      0  7c57					      MOVE_TO_X	_UP+_UP+_LEFT
      1  7c57		       a6 95		      ldx	currentSquare
      0  7c59					      MOVE_TO	_UP+_UP+_LEFT
      1  7c59					      SUBROUTINE
      2  7c59		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  7c5c		       30 0c		      bmi	.invalid
      4  7c5e		       b9 7a f0 	      lda	Board,y
      5  7c61		       f0 04		      beq	.squareEmpty
      6  7c63		       45 94		      eor	currentPiece
      7  7c65		       10 03		      bpl	.invalid
      8  7c67		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c6a				   .invalid
      0  7c6a					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  7c6a		       a6 95		      ldx	currentSquare
      0  7c6c					      MOVE_TO	_UP+_UP+_RIGHT
      1  7c6c					      SUBROUTINE
      2  7c6c		       bc 2b f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  7c6f		       30 0c		      bmi	.invalid
      4  7c71		       b9 7a f0 	      lda	Board,y
      5  7c74		       f0 04		      beq	.squareEmpty
      6  7c76		       45 94		      eor	currentPiece
      7  7c78		       10 03		      bpl	.invalid
      8  7c7a		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c7d				   .invalid
     17  7c7d
      0  7c7d					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  7c7d		       a6 95		      ldx	currentSquare
      0  7c7f					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  7c7f					      SUBROUTINE
      2  7c7f		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  7c82		       30 0c		      bmi	.invalid
      4  7c84		       b9 7a f0 	      lda	Board,y
      5  7c87		       f0 04		      beq	.squareEmpty
      6  7c89		       45 94		      eor	currentPiece
      7  7c8b		       10 03		      bpl	.invalid
      8  7c8d		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c90				   .invalid
      0  7c90					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  7c90		       a6 95		      ldx	currentSquare
      0  7c92					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  7c92					      SUBROUTINE
      2  7c92		       bc 0e f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  7c95		       30 0c		      bmi	.invalid
      4  7c97		       b9 7a f0 	      lda	Board,y
      5  7c9a		       f0 04		      beq	.squareEmpty
      6  7c9c		       45 94		      eor	currentPiece
      7  7c9e		       10 03		      bpl	.invalid
      8  7ca0		       20 cc fc    .squareEmpty jsr	AddMove
      9  7ca3				   .invalid
      0  7ca3					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  7ca3		       a6 95		      ldx	currentSquare
      0  7ca5					      MOVE_TO	_UP+_LEFT+_LEFT
      1  7ca5					      SUBROUTINE
      2  7ca5		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  7ca8		       30 0c		      bmi	.invalid
      4  7caa		       b9 7a f0 	      lda	Board,y
      5  7cad		       f0 04		      beq	.squareEmpty
      6  7caf		       45 94		      eor	currentPiece
      7  7cb1		       10 03		      bpl	.invalid
      8  7cb3		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cb6				   .invalid
      0  7cb6					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  7cb6		       a6 95		      ldx	currentSquare
      0  7cb8					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  7cb8					      SUBROUTINE
      2  7cb8		       bc 22 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  7cbb		       30 0c		      bmi	.invalid
      4  7cbd		       b9 7a f0 	      lda	Board,y
      5  7cc0		       f0 04		      beq	.squareEmpty
      6  7cc2		       45 94		      eor	currentPiece
      7  7cc4		       10 03		      bpl	.invalid
      8  7cc6		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cc9				   .invalid
     22  7cc9
     23  7cc9		       4c 93 fa 	      jmp	MoveReturn
     24  7ccc
     25  7ccc							; EOF
------- FILE BANK_FIXED.asm
    676  7ccc
    677  7ccc							;---------------------------------------------------------------------------------------------------
    678  7ccc
      0  7ccc					      DEF	AddMove
      1  7ccc				   BANK_AddMove SET	_CURRENT_BANK
      2  7ccc
      3  7ccc				   AddMove
    680  7ccc					      SUBROUTINE
    681  7ccc							; =57 including call
    682  7ccc
    683  7ccc							; add square in y register to movelist as destination (X12 format)
    684  7ccc							; currentPiece = piece moving
    685  7ccc							; currentSquare = start square (X12)
    686  7ccc							; ??do not modify y
    687  7ccc
    688  7ccc		       a5 99		      lda	currentPly	; 3
    689  7cce		       85 3e		      sta	SET_BANK_RAM	; 3
    690  7cd0
    691  7cd0							; [y]		     to square (X12)
    692  7cd0							; currentSquare     from square (X12)
    693  7cd0							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    694  7cd0							; do not modify [Y]
    695  7cd0
    696  7cd0							; add a move to the movelist
    697  7cd0
    698  7cd0		       98		      tya		; 2
    699  7cd1
    700  7cd1		       ac 35 f0 	      ldy	moveIndex	; 3
    701  7cd4		       c8		      iny		; 2
    702  7cd5		       8c 35 f4 	      sty	moveIndex+RAM_WRITE	; 4
    703  7cd8
    704  7cd8		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    705  7cdb		       aa		      tax		; 2   new square (for projections)
    706  7cdc
    707  7cdc		       a5 95		      lda	currentSquare	; 3
    708  7cde		       99 36 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    709  7ce1		       a5 94		      lda	currentPiece	; 3
    710  7ce3		       99 80 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    711  7ce6
    712  7ce6		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2
    713  7ce8		       85 3e		      sta	SET_BANK_RAM	; 3
    714  7cea		       60		      rts		; 6
    715  7ceb
    716  7ceb
    717  7ceb							;---------------------------------------------------------------------------------------------------
    718  7ceb
      0  7ceb					      DEF	InitialisePieceSquares
      1  7ceb				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7ceb
      3  7ceb				   InitialisePieceSquares
    720  7ceb					      SUBROUTINE
    721  7ceb
    722  7ceb							; Zap the board with the "blank" ROM copy
    723  7ceb
      0  7ceb					      JSRAM_SAFE	PutAllPieces
      1  7ceb
      2  7ceb
      3  7ceb
      4  7ceb		       a9 0c		      lda	#BANK_PutAllPieces
      5  7ced		       85 8b		      sta	savedBank
      6  7cef		       85 3f		      sta	SET_BANK
      7  7cf1		       20 8b f3 	      jsr	PutAllPieces
    725  7cf4
    726  7cf4							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    727  7cf4
    728  7cf4		       a9 09		      lda	#RAMBANK_PLY
    729  7cf6		       85 3e		      sta	SET_BANK_RAM
    730  7cf8		       20 00 f2 	      jsr	InitPieceLists	; for white
    731  7cfb		       a9 0a		      lda	#RAMBANK_PLY+1
    732  7cfd		       85 3e		      sta	SET_BANK_RAM
    733  7cff		       20 00 f2 	      jsr	InitPieceLists	; for black
    734  7d02
    735  7d02
    736  7d02							; Now setup the board/piecelists
    737  7d02
    738  7d02		       a2 00		      ldx	#0
    739  7d04				   .fillPieceLists
    740  7d04
    741  7d04		       a9 09		      lda	#RAMBANK_PLY
    742  7d06		       85 3e		      sta	SET_BANK_RAM
    743  7d08
    744  7d08		       bd 51 f2 	      lda	InitPieceList,x	; colour/-1
    745  7d0b		       f0 2e		      beq	.finish
    746  7d0d
    747  7d0d		       0a		      asl
    748  7d0e		       a9 09		      lda	#RAMBANK_PLY
    749  7d10		       69 00		      adc	#0
    750  7d12		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    751  7d14
    752  7d14		       ac 30 f0 	      ldy	PieceListPtr
    753  7d17		       c8		      iny
    754  7d18
    755  7d18		       bd 52 f2 	      lda	InitPieceList+1,x	; square
    756  7d1b		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    757  7d1e		       98		      tya
    758  7d1f		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    759  7d22
    760  7d22		       bd 51 f2 	      lda	InitPieceList,x	; piece type
    761  7d25		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    762  7d28		       48		      pha
    763  7d29
    764  7d29		       8c 30 f4 	      sty	PieceListPtr+RAM_WRITE
    765  7d2c
    766  7d2c
    767  7d2c		       bc 52 f2 	      ldy	InitPieceList+1,x	; square
    768  7d2f
    769  7d2f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    770  7d31		       85 3e		      sta	SET_BANK_RAM
    771  7d33		       68		      pla
    772  7d34		       99 7a f4 	      sta	Board+RAM_WRITE,y
    773  7d37
    774  7d37		       e8		      inx
    775  7d38		       e8		      inx
    776  7d39		       10 c9		      bpl	.fillPieceLists
    777  7d3b
    778  7d3b		       60	   .finish    rts
    779  7d3c
    780  7d3c
    781  7d3c							;---------------------------------------------------------------------------------------------------
    782  7d3c
      0  7d3c					      DEF	SAFE_GetKingSquare
      1  7d3c				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  7d3c
      3  7d3c				   SAFE_GetKingSquare
    784  7d3c					      SUBROUTINE
    785  7d3c
    786  7d3c							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    787  7d3c							; Return:	 A = square king is on (or -1)
    788  7d3c
    789  7d3c		       85 3e		      sta	SET_BANK_RAM
    790  7d3e		       20 a0 f3 	      jsr	GetKingSquare
    791  7d41		       a4 8b		      ldy	savedBank
    792  7d43		       84 3f		      sty	SET_BANK
    793  7d45		       60		      rts
    794  7d46
    795  7d46							;---------------------------------------------------------------------------------------------------
    796  7d46
      0  7d46					      DEF	SAFE_GetPieceFromBoard
      1  7d46				   BANK_SAFE_GetPieceFromBoard SET	_CURRENT_BANK
      2  7d46
      3  7d46				   SAFE_GetPieceFromBoard
    798  7d46					      SUBROUTINE
    799  7d46
    800  7d46							; y = X12 board index
    801  7d46
    802  7d46		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    803  7d48		       86 3e		      stx	SET_BANK_RAM
    804  7d4a		       a6 8b		      ldx	savedBank
    805  7d4c		       b9 7a f0 	      lda	Board,y
    806  7d4f		       86 3f		      stx	SET_BANK
    807  7d51		       60		      rts
    808  7d52
    809  7d52
    810  7d52							;---------------------------------------------------------------------------------------------------
    811  7d52
      0  7d52					      DEF	calculateBase64Square
      1  7d52				   BANK_calculateBase64Square SET	_CURRENT_BANK
      2  7d52
      3  7d52				   calculateBase64Square
    813  7d52					      SUBROUTINE
    814  7d52
    815  7d52							; Convert row/column into Base64 index
    816  7d52
    817  7d52		       a5 87		      lda	highlight_row
    818  7d54		       49 07		      eor	#7
    819  7d56		       0a		      asl
    820  7d57		       0a		      asl
    821  7d58		       0a		      asl
    822  7d59		       05 88		      ora	highlight_col
    823  7d5b		       aa		      tax
    824  7d5c		       60		      rts
    825  7d5d
    826  7d5d							;---------------------------------------------------------------------------------------------------
    827  7d5d
      0  7d5d					      DEF	SAFE_IsValidMoveFromSquare
      1  7d5d				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7d5d
      3  7d5d				   SAFE_IsValidMoveFromSquare
    829  7d5d					      SUBROUTINE
    830  7d5d
    831  7d5d							; Does the square exist in the movelist?
    832  7d5d
    833  7d5d		       20 52 fd 	      jsr	calculateBase64Square
    834  7d60		       86 8e		      stx	aiFromSquare
    835  7d62
    836  7d62		       a9 08		      lda	#RAMBANK_MOVES_RAM
    837  7d64		       85 3e		      sta	SET_BANK_RAM
    838  7d66		       bc 4b f3 	      ldy	Base64ToIndex,x
    839  7d69		       84 90		      sty	aiFromSquareX12
    840  7d6b
    841  7d6b		       98		      tya
    842  7d6c
    843  7d6c		       a4 99		      ldy	currentPly
    844  7d6e		       84 3e		      sty	SET_BANK_RAM
    845  7d70		       20 7c f3 	      jsr	CheckMoveListFromSquare
    846  7d73
    847  7d73		       a5 8b		      lda	savedBank
    848  7d75		       85 3f		      sta	SET_BANK
    849  7d77		       60		      rts
    850  7d78
    851  7d78
    852  7d78							;---------------------------------------------------------------------------------------------------
    853  7d78
      0  7d78					      DEF	SAFE_GetPiece
      1  7d78				   BANK_SAFE_GetPiece SET	_CURRENT_BANK
      2  7d78
      3  7d78				   SAFE_GetPiece
    855  7d78					      SUBROUTINE
    856  7d78
    857  7d78							; Retrieve the piece+flags from the movelist, given from/to squares
    858  7d78							; Required as moves have different flags but same origin squares (e.g., castling)
    859  7d78
    860  7d78		       a5 99		      lda	currentPly
    861  7d7a		       85 3e		      sta	SET_BANK_RAM
    862  7d7c
    863  7d7c		       20 bb f3 	      jsr	GetPieceGivenFromToSquares
    864  7d7f
    865  7d7f		       a5 8b		      lda	savedBank
    866  7d81		       85 3f		      sta	SET_BANK
    867  7d83		       60		      rts
    868  7d84
    869  7d84							;---------------------------------------------------------------------------------------------------
    870  7d84
      0  7d84					      DEF	SAFE_IsValidMoveToSquare
      1  7d84				   BANK_SAFE_IsValidMoveToSquare SET	_CURRENT_BANK
      2  7d84
      3  7d84				   SAFE_IsValidMoveToSquare
    872  7d84					      SUBROUTINE
    873  7d84
    874  7d84							; Does the square exist in the movelist?
    875  7d84
    876  7d84		       20 52 fd 	      jsr	calculateBase64Square
    877  7d87		       86 8f		      stx	aiToSquare
    878  7d89
    879  7d89		       a9 08		      lda	#RAMBANK_MOVES_RAM
    880  7d8b		       85 3e		      sta	SET_BANK_RAM
    881  7d8d		       bd 4b f3 	      lda	Base64ToIndex,x
    882  7d90		       85 91		      sta	aiToSquareX12
    883  7d92
    884  7d92		       a4 99		      ldy	currentPly
    885  7d94		       84 3e		      sty	SET_BANK_RAM
    886  7d96		       20 d8 f3 	      jsr	CheckMoveListToSquare
    887  7d99
    888  7d99		       a5 8b	   .found     lda	savedBank
    889  7d9b		       85 3f		      sta	SET_BANK
    890  7d9d		       60		      rts
    891  7d9e
    892  7d9e							;---------------------------------------------------------------------------------------------------
    893  7d9e
      0  7d9e					      DEF	SAFE_PutPieceToBoard
      1  7d9e				   BANK_SAFE_PutPieceToBoard SET	_CURRENT_BANK
      2  7d9e
      3  7d9e				   SAFE_PutPieceToBoard
    895  7d9e					      SUBROUTINE
    896  7d9e
    897  7d9e							; y = board index
    898  7d9e							; a = piece
    899  7d9e
    900  7d9e		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    901  7da0		       86 3e		      stx	SET_BANK_RAM
    902  7da2		       99 7a f4 	      sta	Board+RAM_WRITE,y
    903  7da5		       a6 8b		      ldx	savedBank
    904  7da7		       86 3f		      stx	SET_BANK
    905  7da9		       60		      rts
    906  7daa
    907  7daa							;---------------------------------------------------------------------------------------------------
    908  7daa
      0  7daa					      DEF	SAFE_CopyShadowROMtoRAM
      1  7daa				   BANK_SAFE_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7daa
      3  7daa				   SAFE_CopyShadowROMtoRAM
    910  7daa					      SUBROUTINE
    911  7daa
    912  7daa		       20 b2 fd 	      jsr	CopyShadowROMtoRAM
    913  7dad		       a5 8b		      lda	savedBank
    914  7daf		       85 3f		      sta	SET_BANK
    915  7db1		       60		      rts
    916  7db2
    917  7db2
    918  7db2							;---------------------------------------------------------------------------------------------------
    919  7db2
      0  7db2					      DEF	CopyShadowROMtoRAM
      1  7db2				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7db2
      3  7db2				   CopyShadowROMtoRAM
    921  7db2					      SUBROUTINE
    922  7db2
    923  7db2							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    924  7db2							; used to setup callable RAM code from ROM templates
    925  7db2
    926  7db2							; x = source ROM bank
    927  7db2							; y = destination RAM bank (preserved)
    928  7db2
    929  7db2		       86 a4		      stx	__sourceBank
    930  7db4
    931  7db4		       a2 00		      ldx	#0
    932  7db6		       a5 a4	   .copyPage  lda	__sourceBank
    933  7db8		       85 3f		      sta	SET_BANK
    934  7dba
    935  7dba		       bd 00 f0 	      lda	$F000,x
    936  7dbd		       48		      pha
    937  7dbe		       bd 00 f1 	      lda	$F100,x
    938  7dc1		       48		      pha
    939  7dc2		       bd 00 f2 	      lda	$F200,x
    940  7dc5		       48		      pha
    941  7dc6		       bd 00 f3 	      lda	$F300,x
    942  7dc9
    943  7dc9		       84 3e		      sty	SET_BANK_RAM
    944  7dcb
    945  7dcb		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
    946  7dce		       68		      pla
    947  7dcf		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
    948  7dd2		       68		      pla
    949  7dd3		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
    950  7dd6		       68		      pla
    951  7dd7		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
    952  7dda
    953  7dda		       ca		      dex
    954  7ddb		       d0 d9		      bne	.copyPage
    955  7ddd		       60		      rts
    956  7dde
    957  7dde
    958  7dde							;---------------------------------------------------------------------------------------------------
    959  7dde
      0  7dde					      DEF	SAFE_PromoteStart
      1  7dde				   BANK_SAFE_PromoteStart SET	_CURRENT_BANK
      2  7dde
      3  7dde				   SAFE_PromoteStart
    961  7dde					      SUBROUTINE
    962  7dde
    963  7dde		       a9 08		      lda	#RAMBANK_MOVES_RAM
    964  7de0		       85 3e		      sta	SET_BANK_RAM
    965  7de2		       b9 7a f0 	      lda	Board,y
    966  7de5							;and #PIECE_MASK
    967  7de5							;beq .nopiece
    968  7de5
    969  7de5
      0  7de5					      DEF	SAFE_CopySinglePiece
      1  7de5				   BANK_SAFE_CopySinglePiece SET	_CURRENT_BANK
      2  7de5
      3  7de5				   SAFE_CopySinglePiece
    971  7de5
    972  7de5		       20 ed fd 	      jsr	CopySinglePiece
    973  7de8		       a5 8b	   .nopiece   lda	savedBank
    974  7dea		       85 3f		      sta	SET_BANK
    975  7dec		       60		      rts
    976  7ded
    977  7ded							;---------------------------------------------------------------------------------------------------
    978  7ded
      0  7ded					      DEF	CopySinglePiece
      1  7ded				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7ded
      3  7ded				   CopySinglePiece
    980  7ded					      SUBROUTINE
    981  7ded							; @2150 max
    982  7ded							; = 33 TIM64T
    983  7ded
    984  7ded
    985  7ded		       a9 08		      lda	#RAMBANK_MOVES_RAM
    986  7def		       85 3e		      sta	SET_BANK_RAM
    987  7df1		       20 b8 f3 	      jsr	CopySetup
    988  7df4
    989  7df4
      0  7df4					      DEF	InterceptMarkerCopy
      1  7df4				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7df4
      3  7df4				   InterceptMarkerCopy
    991  7df4
    992  7df4							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
    993  7df4							; y = piece index
    994  7df4
    995  7df4		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
    996  7df6		       85 3f		      sta	SET_BANK
    997  7df8
    998  7df8		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
    999  7dfb		       85 eb		      sta	__ptr
   1000  7dfd		       b9 90 f0 	      lda	PIECE_VECTOR_HI,y
   1001  7e00		       85 ec		      sta	__ptr+1
   1002  7e02		       b9 20 f1 	      lda	PIECE_VECTOR_BANK,y
   1003  7e05		       85 3f		      sta	SET_BANK
   1004  7e07
   1005  7e07		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
   1006  7e09		       b1 eb	   .copy      lda	(__ptr),y
   1007  7e0b		       99 a3 00 	      sta	__pieceShapeBuffer,y
   1008  7e0e		       88		      dey
   1009  7e0f		       10 f8		      bpl	.copy
   1010  7e11
   1011  7e11		       a5 80		      lda	drawPieceNumber
   1012  7e13		       4a		      lsr
   1013  7e14		       4a		      lsr
   1014  7e15		       4a		      lsr
   1015  7e16		       49 07		      eor	#7
   1016  7e18		       85 3e		      sta	SET_BANK_RAM
   1017  7e1a
   1018  7e1a							;lda drawPieceNumber
   1019  7e1a							;and #4
   1020  7e1a							;cmp #4			  ; cc = left side, cs = right side
   1021  7e1a
   1022  7e1a							; The above code is effectively ALREADY executed, because D2 already rotated onto Carry bit
   1023  7e1a
   1024  7e1a
   1025  7e1a		       4c 9b f1 	      jmp	CopyPieceToRowBitmap
   1026  7e1d
   1027  7e1d							;---------------------------------------------------------------------------------------------------
   1028  7e1d
      0  7e1d					      DEF	MoveViaList
      1  7e1d				   BANK_MoveViaList SET	_CURRENT_BANK
      2  7e1d
      3  7e1d				   MoveViaList
   1030  7e1d					      SUBROUTINE
   1031  7e1d
   1032  7e1d							; Given an existing movelist, pick one of the moves and make it
   1033  7e1d							; Used for random computer moves
   1034  7e1d
   1035  7e1d		       a5 99		      lda	currentPly
   1036  7e1f		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
   1037  7e21
   1038  7e21		       20 29 f3 	      jsr	MoveViaListAtPly
   1039  7e24		       60		      rts
   1040  7e25
   1041  7e25
   1042  7e25							;---------------------------------------------------------------------------------------------------
   1043  7e25
      0  7e25					      DEF	FinaliseMove
      1  7e25				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  7e25
      3  7e25				   FinaliseMove
   1045  7e25					      SUBROUTINE
   1046  7e25
   1047  7e25							; Now the visible movement on the board has happened, fix up the pointers to the pieces
   1048  7e25							; for both sides.
   1049  7e25
   1050  7e25
   1051  7e25		       a5 9b		      lda	sideToMove
   1052  7e27		       0a		      asl
   1053  7e28		       a9 09		      lda	#RAMBANK_PLY
   1054  7e2a		       69 00		      adc	#0
   1055  7e2c		       85 3e		      sta	SET_BANK_RAM
   1056  7e2e
   1057  7e2e		       20 ce f2 	      jsr	FixPieceList
   1058  7e31
   1059  7e31		       a5 86		      lda	toX12
   1060  7e33		       85 85		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
   1061  7e35		       a9 00		      lda	#0
   1062  7e37		       85 86		      sta	toX12	; --> deleted (square=0)
   1063  7e39
   1064  7e39
   1065  7e39
   1066  7e39		       a5 9f		      lda	lastPiece
   1067  7e3b		       f0 0e		      beq	.notake
   1068  7e3d
   1069  7e3d		       a5 9b		      lda	sideToMove
   1070  7e3f		       49 80		      eor	#128
   1071  7e41		       0a		      asl
   1072  7e42		       a9 09		      lda	#RAMBANK_PLY
   1073  7e44		       69 00		      adc	#0
   1074  7e46		       85 3e		      sta	SET_BANK_RAM
   1075  7e48
   1076  7e48		       20 ce f2 	      jsr	FixPieceList	; REMOVE any captured object
   1077  7e4b
   1078  7e4b		       60	   .notake    rts
   1079  7e4c
   1080  7e4c
   1081  7e4c							;---------------------------------------------------------------------------------------------------
   1082  7e4c
      0  7e4c					      DEF	SAFE_getMoveIndex
      1  7e4c				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7e4c
      3  7e4c				   SAFE_getMoveIndex
   1084  7e4c					      SUBROUTINE
   1085  7e4c
   1086  7e4c		       a9 09		      lda	#RAMBANK_PLY
   1087  7e4e		       85 3e		      sta	SET_BANK_RAM
   1088  7e50		       ad 35 f0 	      lda	moveIndex
   1089  7e53		       a6 8b		      ldx	savedBank
   1090  7e55		       86 3f		      stx	SET_BANK
   1091  7e57		       60		      rts
   1092  7e58
   1093  7e58
   1094  7e58							;---------------------------------------------------------------------------------------------------
   1095  7e58
      0  7e58					      DEF	SAFE_showMoveOptions
      1  7e58				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  7e58
      3  7e58				   SAFE_showMoveOptions
   1097  7e58					      SUBROUTINE
   1098  7e58
   1099  7e58							;SAFETIME = 40 	  ; time required to be able to safely do a piece draw TODO: optimise
   1100  7e58
   1101  7e58
   1102  7e58							; place a marker on the board for any square matching the piece
   1103  7e58							; EXCEPT for squares which are occupied (we'll flash those later)
   1104  7e58							; x = movelist item # being checked
   1105  7e58
   1106  7e58
   1107  7e58		       a6 92	   .next      ldx	aiMoveIndex
   1108  7e5a		       30 35		      bmi	.skip
   1109  7e5c
   1110  7e5c		       c6 92		      dec	aiMoveIndex
   1111  7e5e
   1112  7e5e		       a9 09		      lda	#RAMBANK_PLY	; current player
   1113  7e60		       85 3e		      sta	SET_BANK_RAM
   1114  7e62
   1115  7e62		       bd 36 f0 	      lda	MoveFrom,x
   1116  7e65		       c5 90		      cmp	aiFromSquareX12
   1117  7e67		       d0 ef		      bne	.next
   1118  7e69
   1119  7e69		       bc 00 f1 	      ldy	MoveTo,x
   1120  7e6c
   1121  7e6c							; If it's a pawn promote (duplicate "to" AND piece different (TODO) then skip others)
   1122  7e6c
   1123  7e6c		       98		      tya
   1124  7e6d		       ca	   .sk	      dex
   1125  7e6e		       30 0b		      bmi	.prom
   1126  7e70		       dd 00 f1 	      cmp	MoveTo,x
   1127  7e73		       d0 06		      bne	.prom
   1128  7e75
   1129  7e75		       c6 92		      dec	aiMoveIndex
   1130  7e77		       c6 92		      dec	aiMoveIndex
   1131  7e79		       c6 92		      dec	aiMoveIndex
   1132  7e7b				   .prom
   1133  7e7b
   1134  7e7b
   1135  7e7b
   1136  7e7b		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1137  7e7d		       85 3e		      sta	SET_BANK_RAM
   1138  7e7f
   1139  7e7f		       b9 7a f0 	      lda	Board,y
   1140  7e82		       d0 d4		      bne	.next	; don't draw dots on captures - they are flashed later
   1141  7e84
   1142  7e84		       b9 01 ff 	      lda	X12toBase64,y
   1143  7e87		       85 80		      sta	drawPieceNumber
   1144  7e89
   1145  7e89		       a2 1c		      ldx	#INDEX_WHITE_MARKER_on_WHITE_SQUARE_0
   1146  7e8b		       20 97 f3 	      jsr	CopySetupForMarker
   1147  7e8e		       20 f4 fd 	      jsr	InterceptMarkerCopy
   1148  7e91
   1149  7e91		       a5 8b	   .skip      lda	savedBank
   1150  7e93		       85 3f		      sta	SET_BANK
   1151  7e95		       60		      rts
   1152  7e96
   1153  7e96
   1154  7e96							;---------------------------------------------------------------------------------------------------
   1155  7e96
      0  7e96					      DEF	SAFE_showPromoteOptions
      1  7e96				   BANK_SAFE_showPromoteOptions SET	_CURRENT_BANK
      2  7e96
      3  7e96				   SAFE_showPromoteOptions
   1157  7e96					      SUBROUTINE
   1158  7e96
   1159  7e96							; Pass 	 X = character shape # (?/N/B/R/Q)
   1160  7e96
   1161  7e96		       a4 86		      ldy	toX12
   1162  7e98		       b9 01 ff 	      lda	X12toBase64,y
   1163  7e9b		       85 80		      sta	drawPieceNumber
   1164  7e9d
   1165  7e9d		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1166  7e9f		       85 3e		      sta	SET_BANK_RAM
   1167  7ea1		       20 97 f3 	      jsr	CopySetupForMarker
   1168  7ea4
   1169  7ea4		       20 f4 fd 	      jsr	InterceptMarkerCopy
   1170  7ea7
   1171  7ea7		       a5 8b		      lda	savedBank
   1172  7ea9		       85 3f		      sta	SET_BANK
   1173  7eab		       60		      rts
   1174  7eac
   1175  7eac							;---------------------------------------------------------------------------------------------------
   1176  7eac
      0  7eac					      DEF	SAFE_BackupBitmaps
      1  7eac				   BANK_SAFE_BackupBitmaps SET	_CURRENT_BANK
      2  7eac
      3  7eac				   SAFE_BackupBitmaps
   1178  7eac
   1179  7eac		       84 3e		      sty	SET_BANK_RAM
   1180  7eae		       20 ec f2 	      jsr	SaveBitmap
   1181  7eb1		       a5 8b		      lda	savedBank
   1182  7eb3		       85 3f		      sta	SET_BANK
   1183  7eb5		       60		      rts
   1184  7eb6
   1185  7eb6							;---------------------------------------------------------------------------------------------------
   1186  7eb6
      0  7eb6					      DEF	SAFE_IsSquareUnderAttack
      1  7eb6				   BANK_SAFE_IsSquareUnderAttack SET	_CURRENT_BANK
      2  7eb6
      3  7eb6				   SAFE_IsSquareUnderAttack
   1188  7eb6
   1189  7eb6							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
   1190  7eb6
   1191  7eb6							; Pass:	 currentPly = which movelist to check
   1192  7eb6							;		 A = X12 square to check
   1193  7eb6							; Return:	 CC = No, CS = Yes
   1194  7eb6
   1195  7eb6		       a6 99		      ldx	currentPly
   1196  7eb8		       86 3e		      stx	SET_BANK_RAM
   1197  7eba		       20 91 f3 	      jsr	IsSquareUnderAttack
   1198  7ebd		       a5 8b		      lda	savedBank
   1199  7ebf		       85 3f		      sta	SET_BANK
   1200  7ec1		       60		      rts
   1201  7ec2
   1202  7ec2							;---------------------------------------------------------------------------------------------------
   1203  7ec2
      0  7ec2					      DEF	SAFE_showMoveCaptures
      1  7ec2				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7ec2
      3  7ec2				   SAFE_showMoveCaptures
   1205  7ec2					      SUBROUTINE
   1206  7ec2
   1207  7ec2							; place a marker on the board for any square matching the piece
   1208  7ec2							; EXCEPT for squares which are occupied (we'll flash those later)
   1209  7ec2							; x = movelist item # being checked
   1210  7ec2
   1211  7ec2
   1212  7ec2		       a6 92	   .next      ldx	aiMoveIndex
   1213  7ec4		       30 36		      bmi	.skip	; no moves in list
   1214  7ec6
   1215  7ec6		       c6 92		      dec	aiMoveIndex
   1216  7ec8
   1217  7ec8		       a9 09		      lda	#RAMBANK_PLY	; white
   1218  7eca		       85 3e		      sta	SET_BANK_RAM
   1219  7ecc
   1220  7ecc		       bd 36 f0 	      lda	MoveFrom,x
   1221  7ecf		       c5 90		      cmp	aiFromSquareX12
   1222  7ed1		       d0 ef		      bne	.next
   1223  7ed3
   1224  7ed3		       bc 00 f1 	      ldy	MoveTo,x
   1225  7ed6
   1226  7ed6		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1227  7ed8		       85 3e		      sta	SET_BANK_RAM
   1228  7eda
   1229  7eda		       b9 7a f0 	      lda	Board,y
   1230  7edd		       29 0f		      and	#PIECE_MASK
   1231  7edf		       f0 e1		      beq	.next
   1232  7ee1
   1233  7ee1		       a9 09		      lda	#RAMBANK_PLY
   1234  7ee3		       85 3e		      sta	SET_BANK_RAM
   1235  7ee5		       98		      tya
   1236  7ee6		       ca	   .sk	      dex
   1237  7ee7		       30 0b		      bmi	.prom
   1238  7ee9		       dd 00 f1 	      cmp	MoveTo,x
   1239  7eec		       d0 06		      bne	.prom
   1240  7eee
   1241  7eee		       c6 92		      dec	aiMoveIndex
   1242  7ef0		       c6 92		      dec	aiMoveIndex
   1243  7ef2		       c6 92		      dec	aiMoveIndex
   1244  7ef4
   1245  7ef4				   .prom
   1246  7ef4
   1247  7ef4		       b9 01 ff 	      lda	X12toBase64,y
   1248  7ef7		       85 80		      sta	drawPieceNumber
   1249  7ef9
   1250  7ef9		       20 ed fd 	      jsr	CopySinglePiece
   1251  7efc
   1252  7efc
   1253  7efc		       a5 8b	   .skip      lda	savedBank
   1254  7efe		       85 3f		      sta	SET_BANK
   1255  7f00		       60		      rts
   1256  7f01
   1257  7f01
      0  7f01					      OPTIONAL_PAGEBREAK	"X12toBase64", 100
     10  7f01					      LIST	ON
   1259  7f01
   1260  7f01				   X12toBase64
   1261  7f01
   1262  7f01							; Use this table to
   1263  7f01							;   a) Determine if a square is valid (-1 = NO)
   1264  7f01							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
   1265  7f01							;	if a white pawn on square "x" can move "up" the board.
   1266  7f01
   1267  7f01		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1268  7f0b		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1269  7f15		       ff ff 00 01*	      .byte.b	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7
   1270  7f1f		       ff ff 08 09*	      .byte.b	-1, -1, 8, 9, 10, 11, 12, 13, 14, 15
   1271  7f29		       ff ff 10 11*	      .byte.b	-1, -1, 16, 17, 18, 19, 20, 21, 22, 23
   1272  7f33		       ff ff 18 19*	      .byte.b	-1, -1, 24, 25, 26, 27, 28, 29, 30, 31
   1273  7f3d		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
   1274  7f47		       ff ff 28 29*	      .byte.b	-1, -1, 40, 41, 42, 43, 44, 45, 46, 47
   1275  7f51		       ff ff 30 31*	      .byte.b	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55
   1276  7f5b		       ff ff 38 39*	      .byte.b	-1, -1, 56, 57, 58, 59, 60, 61, 62, 63
   1277  7f65
   1278  7f65
 FREE BYTES IN FIXED BANK =  $97
   1279  7f65					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1280  7f65
   1281  7f65							;---------------------------------------------------------------------------------------------------
   1282  7f65							; The reset vectors
   1283  7f65							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
   1284  7f65
   1285  8000 ????				      SEG	InterruptVectors
   1286  7ffc					      ORG	FIXED_BANK + $7FC
   1287  7ffc					      RORG	$7ffC
   1288  7ffc
   1289  7ffc		       00 f8		      .word.w	Reset	; RESET
   1290  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1291  8000
   1292  8000							;---------------------------------------------------------------------------------------------------
   1293  8000							; EOF
------- FILE ./chess.asm
    380  8000
    381  8000							;END
