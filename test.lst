------- FILE ./chess.asm LEVEL 1 PASS 1
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6  0000 ????
      7  0000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  0000 ????
      9  0000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.05, 13/November/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_VCS =	105
      5  0000 ????
      6  0000 ????						; This file defines hardware registers and memory mapping for the
      7  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  0000 ????						; available at at http://www.atari2600.org/dasm
     10  0000 ????						;
     11  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  0000 ????						; with your views.  Please contribute, if you think you can improve this
     15  0000 ????						; file!
     16  0000 ????						;
     17  0000 ????						; Latest Revisions...
     18  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  0000 ????						;			    This will allow conditional code to verify VCS.H being
     21  0000 ????						;			    used for code assembly.
     22  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  0000 ????						;			 mirrored reading/writing differences.	This is more a
     25  0000 ????						;			 readability issue, and binary compatibility with disassembled
     26  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  0000 ????						;			 which was broken by the use of segments in this file, as
     29  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  0000 ????						;						   it is safe to leave it undefined, and the base address will
     34  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  0000 ????						;			  - register definitions are now generated through assignment
     37  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  0000 ????						;			    address architecture.
     39  0000 ????						; 1.0	22/MAR/2003		Initial release
     40  0000 ????
     41  0000 ????
     42  0000 ????						;-------------------------------------------------------------------------------
     43  0000 ????
     44  0000 ????						; TIA_BASE_ADDRESS
     45  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  0000 ????						; Normally 0, the base address should (externally, before including this file)
     47  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  0000 ????						; < $40 as a bankswitch.
     50  0000 ????
     51  0000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  0000 ????			  -TIA_BASE_ADDRESS =	0
     53  0000 ????				      ENDIF
     54  0000 ????
     55  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  0000 ????						; *OR* by declaring the label before including this file, eg:
     58  0000 ????						; TIA_BASE_ADDRESS = $40
     59  0000 ????						;   include "vcs.h"
     60  0000 ????
     61  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  0000 ????						; for the mirrored ROM hardware registers.
     64  0000 ????
     65  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  0000 ????
     69  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     70  0000 ????	       00 40	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  0000 ????	       00 40	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  0000 ????				      ENDIF
     76  0000 ????
     77  0000 ????						;-------------------------------------------------------------------------------
     78  0000 ????
     79 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0000 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 1
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 1
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						; assemble diagnostics. Remove for release.
     31  0000 ????	       00 01	   ASSERTS    =	1
     32  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     33  0000 ????
     34  0000 ????						;===================================
     35  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     36  0000 ????						;===================================
     37  0000 ????
     38  0000 ????						;-------------------------------------------------------------------------------
     39  0000 ????						; The following are optional YES/NO depending on phase of the moon
     40  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     41  0000 ????						;-------------------------------------------------------------------------------
     42  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     43  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     44  0000 ????			  -	      IF	FINAL_VERSION = YES
     45  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     46  0000 ????				      ENDIF
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????
     50  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     51  0000 ????
     52  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     53  0000 ????
     54  0000 ????						;------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????	       00 01	   PLUSCART   =	YES
     57  0000 ????
     58  0000 ????						;------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????
     61  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     62  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     63  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     64  0000 ????
     65  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     66  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     67  0000 ????
     68  0000 ????
     69  0000 ????	       10 00	   RAM_3E     =	$1000
     70  0000 ????	       04 00	   RAM_SIZE   =	$400
     71  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     72  0000 ????
     73  0000 ????
     74  0000 ????						; Platform constants:
     75  0000 ????	       00 02	   PAL	      =	%10
     76  0000 ????	       00 02	   PAL_50     =	PAL|0
     77  0000 ????	       00 03	   PAL_60     =	PAL|1
     78  0000 ????
     79  0000 ????
     80  0000 ????				      IF	L276
     81  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     82  0000 ????			  -	      ELSE
     83  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     84  0000 ????				      ENDIF
     85  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     86  0000 ????
     87  0000 ????				      IF	L276
     88  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     89  0000 ????			  -	      ELSE
     90  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     91  0000 ????				      ENDIF
     92  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     93  0000 ????
     94  0000 ????				      IF	L276
     95  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     96  0000 ????			  -	      ELSE
     97  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     98  0000 ????				      ENDIF
     99  0000 ????	       01 38	   SCANLINES_PAL =	312
    100  0000 ????
    101  0000 ????
    102  0000 ????						;------------------------------------------------------------------------------
    103  0000 ????						; MACRO definitions
    104  0000 ????
    105  0000 ????
    106  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    107  0000 ????
    108  0000 ????				      MAC	newbank
    109  0000 ????				      SEG	{1}
    110  0000 ????				      ORG	ORIGIN
    111  0000 ????				      RORG	$F000
    112  0000 ????			   BANK_START SET	*
    113  0000 ????			   {1}	      SET	ORIGIN / 2048
    114  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    115  0000 ????			   _CURRENT_BANK SET	{1}
    116  0000 ????				      ENDM		; bank name
    117  0000 ????
    118  0000 ????				      MAC	define_1k_segment
    119  0000 ????				      ALIGN	$400
    120  0000 ????			   SEGMENT_{1} SET	*
    121  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    122  0000 ????				      ENDM		; {seg name}
    123  0000 ????
    124  0000 ????				      MAC	check_bank_size
    125  0000 ????			   .TEMP      =	* - BANK_START
    126  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    127  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    128  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    129  0000 ????				      ERR
    130  0000 ????				      endif
    131  0000 ????				      ENDM		; name
    132  0000 ????
    133  0000 ????
    134  0000 ????				      MAC	check_half_bank_size
    135  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    136  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    137  0000 ????			   .TEMP      =	* - BANK_START
    138  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    139  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    140  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    141  0000 ????				      ERR
    142  0000 ????				      endif
    143  0000 ????				      ENDM		; name
    144  0000 ????
    145  0000 ????
    146  0000 ????						;---------------------------------------------------------------------------------------------------
    147  0000 ????
    148  0000 ????						; Macro inserts a page break if the object would overlap a page
    149  0000 ????
    150  0000 ????				      MAC	optional_pagebreak
    151  0000 ????				      LIST	OFF
    152  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    153  0000 ????			   EARLY_LOCATION SET	*
    154  0000 ????				      ALIGN	256
    155  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    156  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    157  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    158  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    159  0000 ????				      ENDIF
    160  0000 ????				      LIST	ON
    161  0000 ????				      ENDM		; { string, size }
    162  0000 ????
    163  0000 ????
    164  0000 ????				      MAC	check_page_crossing
    165  0000 ????				      LIST	OFF
    166  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    167  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    168  0000 ????				      endif
    169  0000 ????				      LIST	ON
    170  0000 ????				      ENDM
    171  0000 ????
    172  0000 ????				      MAC	checkpage
    173  0000 ????				      LIST	OFF
    174  0000 ????				      IF	>. != >{1}
    175  0000 ????				      ECHO	""
    176  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    177  0000 ????				      ECHO	""
    178  0000 ????				      ERR
    179  0000 ????				      ENDIF
    180  0000 ????				      LIST	ON
    181  0000 ????				      ENDM
    182  0000 ????
    183  0000 ????				      MAC	checkpagex
    184  0000 ????				      LIST	OFF
    185  0000 ????				      IF	>. != >{1}
    186  0000 ????				      ECHO	""
    187  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    188  0000 ????				      ECHO	{2}
    189  0000 ????				      ECHO	""
    190  0000 ????				      ERR
    191  0000 ????				      ENDIF
    192  0000 ????				      LIST	ON
    193  0000 ????				      ENDM
    194  0000 ????
    195  0000 ????
    196  0000 ????						;---------------------------------------------------------------------------------------------------
    197  0000 ????
    198  0000 ????				      MAC	def
    199  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    200  0000 ????						;    SUBROUTINE      ; doesn't work in a macro!
    201  0000 ????			   {1}			; entry point
    202  0000 ????				      ENDM		; name of subroutine
    203  0000 ????
    204  0000 ????						;---------------------------------------------------------------------------------------------------
    205  0000 ????
    206  0000 ????				      MAC	newrambank
    207  0000 ????						; {1}	     bank name
    208  0000 ????						; {2}	     RAM bank number
    209  0000 ????
    210  0000 ????				      SEG.U	{1}
    211  0000 ????				      ORG	ORIGIN_RAM
    212  0000 ????				      RORG	RAM_3E
    213  0000 ????			   BANK_START SET	*
    214  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    215  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    216  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    217  0000 ????				      ENDM		; bank name
    218  0000 ????
    219  0000 ????						; TODO - fix - this is faulty....
    220  0000 ????				      MAC	validate_ram_size
    221  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    222  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    223  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    224  0000 ????				      ERR
    225  0000 ????				      ENDIF
    226  0000 ????				      ENDM
    227  0000 ????
    228  0000 ????						;---------------------------------------------------------------------------------------------------
    229  0000 ????
    230  0000 ????				      MAC	resync
    231  0000 ????						; resync screen, X and Y == 0 afterwards
    232  0000 ????				      lda	#%10	; make sure VBLANK is ON
    233  0000 ????				      sta	VBLANK
    234  0000 ????
    235  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    236  0000 ????			   .loopResync
    237  0000 ????				      VERTICAL_SYNC
    238  0000 ????
    239  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    240  0000 ????				      lda	Platform
    241  0000 ????				      eor	#PAL_50	; PAL-50?
    242  0000 ????				      bne	.ntsc
    243  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    244  0000 ????			   .ntsc
    245  0000 ????			   .loopWait
    246  0000 ????				      sta	WSYNC
    247  0000 ????				      sta	WSYNC
    248  0000 ????				      dey
    249  0000 ????				      bne	.loopWait
    250  0000 ????				      dex
    251  0000 ????				      bne	.loopResync
    252  0000 ????				      ENDM
    253  0000 ????
    254  0000 ????				      MAC	set_platform
    255  0000 ????						; 00 = NTSC
    256  0000 ????						; 01 = NTSC
    257  0000 ????						; 10 = PAL-50
    258  0000 ????						; 11 = PAL-60
    259  0000 ????				      lda	SWCHB
    260  0000 ????				      rol
    261  0000 ????				      rol
    262  0000 ????				      rol
    263  0000 ????				      and	#%11
    264  0000 ????				      eor	#PAL
    265  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    266  0000 ????				      ENDM
    267  0000 ????
    268  0000 ????
    269  0000 ????						;---------------------------------------------------------------------------------------------------
    270  0000 ????
    271  0000 ????				      MAC	jsram_safe
    272  0000 ????						; Saves bank of routine to variable for later restore.
    273  0000 ????						; Switches to the bank and does a JSR to the routine.
    274  0000 ????
    275  0000 ????				      lda	#BANK_{1}
    276  0000 ????				      sta	savedBank
    277  0000 ????				      sta	SET_BANK
    278  0000 ????				      jsr	{1}
    279  0000 ????				      ENDM		; {routine}
    280  0000 ????
    281  0000 ????
    282  0000 ????				      MAC	jsram
    283  0000 ????
    284  0000 ????				      lda	#BANK_{1}
    285  0000 ????				      sta	SET_BANK
    286  0000 ????				      jsr	{1}
    287  0000 ????				      ENDM		; {routine}
    288  0000 ????
    289  0000 ????						;---------------------------------------------------------------------------------------------------
    290  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 1
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U0000 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawPhase  ds	1	; ticks through the board draw process
     12 U0083		       00	   drawDelay  ds	1
     13 U0084		       00	   lastSquare ds	1
     14 U0085		       00	   drawCount  ds	1
     15 U0086		       00	   fromX12    ds	1
     16 U0087		       00	   toX12      ds	1
     17 U0088		       00 00	   highlight_row ds	2
     18 U008a		       00 00	   highlight_col ds	2
     19 U008c		       00	   mdelay     ds	1
     20 U008d		       00	   ccur       ds	1
     21 U008e		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     22 U008f		       00	   aiPhase    ds	1	; human/computer state machine
     23 U0090		       00	   aiFlashDelay ds	1
     24 U0091		       00	   aiFromSquare ds	1
     25 U0092		       00	   aiToSquare ds	1
     26 U0093		       00	   aiFromSquareX12 ds	1
     27 U0094		       00	   aiToSquareX12 ds	1
     28 U0095		       00	   aiMoveIndex ds	1
     29 U0096
     30 U0096		       00	   aiFlashPhase ds	1
     31 U0097
     32 U0097		       00	   currentPiece ds	1
     33 U0098		       00	   currentSquare ds	1
     34 U0099		       00	   returnBank ds	1
     35 U009a		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     36 U009b		       00	   followPiece ds	1
     37 U009c		       00	   currentPly ds	1
     38 U009d		       00	   piecelistIndex ds	1
     39 U009e		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     40 U009f		       00	   fromSquare ds	1
     41 U00a0		       00	   fromPiece  ds	1
     42 U00a1		       00	   toSquare   ds	1
     43 U00a2		       00	   toPiece    ds	1
     44 U00a3		       00	   lastPiece  ds	1
     45 U00a4		       00	   previousPiece ds	1
     46 U00a5
     47 U00a5		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     48 U00a6							;BufferedJoystick		  ds 1	      ; player joystick input
     49 U00a6							;PreviousJoystick		  ds 1
     50 U00a6							;BGColour			  ds 1
     51 U00a6		       00	   aiPiece    ds	1
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 1
      0 U00a7					      include	"overlays.asm"
      1 U00a7							; Chess
      2 U00a7							; Atari 2600 Chess display system
      3 U00a7							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a7							; andrew@taswegian.com
      5 U00a7
      6 U00a7							;---------------------------------------------------------------------------------------------------
      7 U00a7							; OVERLAYS!
      8 U00a7							; These variables are overlays, and should be managed with care
      9 U00a7							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a7							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a7							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a7							; overlay #2
     13 U00a7
     14 U00a7							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a7
     16 U00a7							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a7							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a7							;---------------------------------------------------------------------------------------------------
     19 U00a7
     20 U00a7					      MAC	overlay
     21 U00a7				   OVERLAY_NAME SET	{1}
     22 U00a7					      SEG.U	OVERLAY_{1}
     23 U00a7					      org	Overlay
     24 U00a7					      ENDM		; {name}
     25 U00a7
     26 U00a7							;---------------------------------------------------------------------------------------------------
     27 U00a7
     28 U00a7					      MAC	validate_overlay
     29 U00a7					      LIST	OFF
     30 U00a7				   OVERLAY_DELTA SET	* - Overlay
     31 U00a7					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a7					      ENDIF
     34 U00a7					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a7					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a7					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a7					      ERR
     38 U00a7					      ENDIF
     39 U00a7					      LIST	ON
     40 U00a7					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a7					      ENDM
     42 U00a7
     43 U00a7							;---------------------------------------------------------------------------------------------------
     44 U00a7
     45 U00a7				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a7
     48 U00a7
     49 U00a7							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a7							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a7							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a7							; (especially the latter ones) are only used in rare occasions.
     53 U00a7
     54 U00a7							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a7							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a7
     57 U00a7		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00f3				   END_OF_OVERLAY
     59 U00f3
     60 U00f3							;---------------------------------------------------------------------------------------------------
     61 U00f3							; And now... the overlays....
     62 U00f3
 ---- OVERLAYS ( $4c bytes ) ----
     63 U00f3					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     64 U00f3
     65 U00f3							;---------------------------------------------------------------------------------------------------
     66 U00f3
      0 U00f3					      OVERLAY	"PieceBufferOverlay"
      1 U00f3				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U0000 ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a7					      org	Overlay
     68 U00a7							; used in CopyPieceFromRAMBufferToScreen
     69 U00a7							; used in CopyPieceToRAMBuffer
     70 U00a7							; used in ClearChessBitmap
     71 U00a7							; used in CopyPieceToRowBitmap
     72 U00a7		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     73 U00ef		       00 00	   __ptr      ds	2	; pointer to data
     74 U00f1		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00f3					      VALIDATE_OVERLAY
     11 U00f3					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00f3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     76 U00f3
     77 U00f3							;---------------------------------------------------------------------------------------------------
     78 U00f3
      0 U00f3					      OVERLAY	"CopyROMShadowToRAM"
      1 U00f3				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U0000 ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a7					      org	Overlay
     80 U00a7		       00	   __CopyCount ds	1
     81 U00a8		       00	   __ROM_SourceBank ds	1
     82 U00a9		       00	   __index    ds	1
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     84 U00aa
     85 U00aa							;---------------------------------------------------------------------------------------------------
     86 U00aa
      0 U00aa					      OVERLAY	"DrawTheChessScreen"
      1 U00aa				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U0000 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a7					      org	Overlay
     88 U00a7		       00	   __rows     ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     90 U00a8
     91 U00a8							;---------------------------------------------------------------------------------------------------
     92 U00a8
      0 U00a8					      OVERLAY	"SetupShadowRAM"
      1 U00a8				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U0000 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a7					      org	Overlay
     94 U00a7		       00	   __destinationBank ds	1
     95 U00a8		       00	   __sourceBank ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     97 U00a9
     98 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"DrawPiece"
      1 U00a9				   OVERLAY_NAME SET	"DrawPiece"
      2 U0000 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a7					      org	Overlay
    100 U00a7		       00	   __pieceColour ds	1
    101 U00a8		       00	   __boardc   ds	1
    102 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 DrawPiece - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    104 U00a9
    105 U00a9
    106 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"InitPly"
      1 U00a9				   OVERLAY_NAME SET	"InitPly"
      2 U0000 ????				      SEG.U	OVERLAY_"InitPly"
      3 U00a7					      org	Overlay
    108 U00a7		       00	   __plyBank  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 InitPly - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    110 U00a8
    111 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"RandomPiece"
      1 U00a8				   OVERLAY_NAME SET	"RandomPiece"
      2 U0000 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a7					      org	Overlay
    113 U00a7		       00	   __tempx    ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    115 U00a8
      0 U00a8					      OVERLAY	"Overlay000"
      1 U00a8				   OVERLAY_NAME SET	"Overlay000"
      2 U0000 ????				      SEG.U	OVERLAY_"Overlay000"
      3 U00a7					      org	Overlay
    117 U00a7		       00	   __fromRow  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 Overlay000 - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    119 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"Overlay001"
      1 U00a8				   OVERLAY_NAME SET	"Overlay001"
      2 U0000 ????				      SEG.U	OVERLAY_"Overlay001"
      3 U00a7					      org	Overlay
    121 U00a7		       00	   __from     ds	1
    122 U00a8		       00	   __to       ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 Overlay001 - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    124 U00a9							;---------------------------------------------------------------------------------------------------
    125 U00a9
      0 U00a9					      OVERLAY	"Handlers"
      1 U00a9				   OVERLAY_NAME SET	"Handlers"
      2 U0000 ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a7					      org	Overlay
    127 U00a7		       00	   __piece    ds	1
    128 U00a8		       00 00	   __vector   ds	2
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Handlers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    130 U00aa
    131 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"Movers"
      1 U00aa				   OVERLAY_NAME SET	"Movers"
      2 U0000 ????				      SEG.U	OVERLAY_"Movers"
      3 U00a7					      org	Overlay
    133 U00a7		       00	   __fromCol  ds	1
    134 U00a8		       00	   __toCol    ds	1
    135 U00a9		       00	   __temp     ds	1
    136 U00aa
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Movers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    138 U00aa
    139 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"checkPieces"
      1 U00aa				   OVERLAY_NAME SET	"checkPieces"
      2 U0000 ????				      SEG.U	OVERLAY_"checkPieces"
      3 U00a7					      org	Overlay
    141 U00a7		       00	   __x	      ds	1
    142 U00a8		       00	   __bank     ds	1
    143 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 checkPieces - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    145 U00a9
    146 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"aiSelectStartSquare"
      1 U00a9				   OVERLAY_NAME SET	"aiSelectStartSquare"
      2 U0000 ????				      SEG.U	OVERLAY_"aiSelectStartSquare"
      3 U00a7					      org	Overlay
    148 U00a7		       00	   __cursorColour ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 aiSelectStartSquare - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    150 U00a8
    151 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"TitleScreen"
      1 U00a8				   OVERLAY_NAME SET	"TitleScreen"
      2 U0000 ????				      SEG.U	OVERLAY_"TitleScreen"
      3 U00a7					      org	Overlay
    153 U00a7		       00 00	   __colour_table ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 TitleScreen - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    155 U00a9							;---------------------------------------------------------------------------------------------------
    156 U00a9
      0 U00a9					      OVERLAY	"SAFE_showMoveOptions"
      1 U00a9				   OVERLAY_NAME SET	"SAFE_showMoveOptions"
      2 U0000 ????				      SEG.U	OVERLAY_"SAFE_showMoveOptions"
      3 U00a7					      org	Overlay
    158 U00a7		       00 00	   __moveDotColour ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SAFE_showMoveOptions - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    160 U00a9							;---------------------------------------------------------------------------------------------------
    161 U00a9
    162 U00f3					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
    163 U00f3					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    164 U00f3					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    165 U00f3
    166 U00f3							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 1
      0 U00f3					      include	"stack.asm"
      1 U00f3							; Chess
      2 U00f3							; Atari 2600 Chess display system
      3 U00f3							; Copyright (c) 2019-2020 Andrew Davie
      4 U00f3							; andrew@taswegian.com
      5 U00f3
      6 U00f3
      7 U00f3		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00f3
      9 U00f3		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00ff
     11 U00ff							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00ff							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00ff							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    294 U00ff
 FREE BYTES IN ZERO PAGE =  $0
    295 U00ff					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    296 U00ff				  -	      IF	* > $FF
    297 U00ff				  -	      ERR	"Zero Page overflow!"
    298 U00ff					      ENDIF
    299 U00ff
    300 U00ff							;------------------------------------------------------------------------------
    301 U00ff							;##############################################################################
    302 U00ff							;------------------------------------------------------------------------------
    303 U00ff
    304 U00ff							; NOW THE VERY INTERESTING '3E' RAM BANKS
    305 U00ff							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    306 U00ff							; IN A 2K MEMORY SPACE
    307 U00ff
      0 U00ff					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00ff
      2 U00ff
      3 U00ff
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    309 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U0000 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    309 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    309 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    309 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    309 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    309 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    309 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    312 U1c00					      REPEND
    313 U1c00
    314 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    315 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    316 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    317 U1c00
    318 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    319 U1c00							; is that we can use that code to switch between banks, and the system will happily
    320 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    321 U1c00
    322 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    323 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    324 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    325 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    326 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    327 U1c00
    328 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    329 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    330 U1c00
    331 U1c00							;------------------------------------------------------------------------------
    332 U1c00
    333 U1c00
    334 U1c00							;---------------------------------------------------------------------------------------------------
    335 U1c00
    336 U1c00
    337 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    338 U1c00
    339 U1c00					      MAC	next_random
    340 U1c00					      lda	rnd
    341 U1c00					      lsr
    342 U1c00					      bcc	.skipEOR
    343 U1c00					      eor	#RND_EOR_VAL
    344 U1c00				   .skipEOR   sta	rnd
    345 U1c00					      ENDM
    346 U1c00
    347 U1c00							;--------------------------------------------------------------------------------
    348 U1c00
    349 U1c00							;ORIGIN      SET 0
    350 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 1
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00							; = 76 for single square (empty/take)
     12 U1c00
     13 U1c00					      ldx	currentSquare	; 3
     14 U1c00					      bne	.project	; 3   unconditional
     15 U1c00
     16 U1c00				   .empty     jsr	AddMove	; 57
     17 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     18 U1c00					      bmi	.invalid	; 2/3 off board!
     19 U1c00					      lda	Board,y	; 4   piece @ destination
     20 U1c00					      beq	.empty	; 2/3
     21 U1c00					      eor	currentPiece	; 3
     22 U1c00					      bpl	.invalid	; 2/3 same colour
     23 U1c00					      jsr	AddMove	; 57  and exit
     24 U1c00
     25 U1c00				   .invalid
     26 U1c00					      ENDM
     27 U1c00
     28 U1c00							;---------------------------------------------------------------------------------------------------
     29 U1c00
     30 U1c00					      MAC	move_to
     31 U1c00					      SUBROUTINE
     32 U1c00					      ldy	ValidSquare+{1},x
     33 U1c00					      bmi	.invalid	; off board!
     34 U1c00					      lda	Board,y	; piece @ destination
     35 U1c00					      beq	.squareEmpty
     36 U1c00					      eor	currentPiece
     37 U1c00					      bpl	.invalid	; same colour
     38 U1c00				   .squareEmpty jsr	AddMove
     39 U1c00				   .invalid
     40 U1c00					      ENDM
     41 U1c00
     42 U1c00
     43 U1c00					      MAC	move_to_x
     44 U1c00					      ldx	currentSquare
     45 U1c00					      MOVE_TO	{1}
     46 U1c00					      ENDM
     47 U1c00
     48 U1c00
     49 U1c00							;---------------------------------------------------------------------------------------------------
     50 U1c00							; EOF
------- FILE ./chess.asm
    352 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 1
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  0000 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;---------------------------------------------------------------------------------------------------
     18  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;---------------------------------------------------------------------------------------------------
     22  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004
      3  0004				   Cart_Init
     24  0004					      SUBROUTINE
     25  0004
     26  0004		       a9 00		      lda	#0
     27  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     28  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     29  000c		       85 6b		      sta	HMCLR
     30  000e
     31  000e							; cleanup remains of title screen
     32  000e		       85 5b		      sta	GRP0
     33  0010		       85 5c		      sta	GRP1
     34  0012
     35  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     36  0014		       85 44		      sta	NUSIZ0
     37  0016		       85 45		      sta	NUSIZ1
     38  0018
     39  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     40  001a		       85 4a		      sta	CTRLPF
     41  001c
     42  001c		       60		      rts
     43  001d
     44  001d
     45  001d							;---------------------------------------------------------------------------------------------------
     46  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d
      3  001d				   Resync
     48  001d					      SUBROUTINE
     49  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 a5		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     51  0040		       60		      rts
     52  0041
     53  0041
     54  0041							;---------------------------------------------------------------------------------------------------
     55  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041
      3  0041				   aiStartClearBoard
     57  0041					      SUBROUTINE
     58  0041
     59  0041		       a2 08		      ldx	#8
     60  0043		       86 85		      stx	drawCount	; = bank
     61  0045		       e6 82		      inc	drawPhase
     62  0047
BANK_GENERIC.asm (63): error: Unknown Mnemonic 'PHASE'.
     63  0047					      PHASE	AI_Halt
     64  0047		       60		      rts
     65  0048
     66  0048							;---------------------------------------------------------------------------------------------------
     67  0048
      0  0048					      DEF	aiClearEachRow
      1  0048				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  0048
      3  0048				   aiClearEachRow
     69  0048					      SUBROUTINE
     70  0048
     71  0048		       c6 85		      dec	drawCount
     72  004a		       30 85		      bmi	.bitmapCleared
     73  004c		       a4 85		      ldy	drawCount
     74  004e		       4c 00 00 	      jmp	CallClear
     75  0051
     76  0051				   .bitmapCleared
     77  0051
     78  0051		       a9 3f		      lda	#63
     79  0053		       85 80		      sta	drawPieceNumber
     80  0055
     81  0055		       e6 82		      inc	drawPhase
     82  0057
BANK_GENERIC.asm (83): error: Unknown Mnemonic 'PHASE'.
     83  0057					      PHASE	AI_Halt	;tmp
     84  0057		       60		      rts
     85  0058
     86  0058
     87  0058							;---------------------------------------------------------------------------------------------------
     88  0058
      0  0058					      DEF	FB3
      1  0058				   BANK_FB3   SET	_CURRENT_BANK
      2  0058
      3  0058				   FB3
     90  0058					      SUBROUTINE
     91  0058
     92  0058		       a9 00		      lda	#BLANK
     93  005a		       85 a4		      sta	previousPiece
     94  005c
     95  005c		       e6 82		      inc	drawPhase
     96  005e		       60		      rts
     97  005f
     98  005f							;---------------------------------------------------------------------------------------------------
     99  005f
      0  005f					      DEF	EraseStartPiece
      1  005f				   BANK_EraseStartPiece SET	_CURRENT_BANK
      2  005f
      3  005f				   EraseStartPiece
    101  005f					      SUBROUTINE
    102  005f
    103  005f		       a5 a1		      lda	toSquare
    104  0061		       c5 9f		      cmp	fromSquare
    105  0063		       f0 9f		      beq	.idleErase
    106  0065
    107  0065		       a9 06		      lda	#6	; on/off count
    108  0067		       85 85		      sta	drawCount	; flashing for piece about to move
    109  0069		       a9 00		      lda	#0
    110  006b		       85 83		      sta	drawDelay
    111  006d
    112  006d		       e6 82		      inc	drawPhase
    113  006f		       60	   .idleErase rts
    114  0070
    115  0070
    116  0070							;---------------------------------------------------------------------------------------------------
    117  0070
      0  0070					      DEF	WriteStartPieceBlank
      1  0070				   BANK_WriteStartPieceBlank SET	_CURRENT_BANK
      2  0070
      3  0070				   WriteStartPieceBlank
    119  0070					      SUBROUTINE
    120  0070
    121  0070							; Flash the piece in-place preparatory to moving it.
    122  0070							; drawDelay = flash speed
    123  0070							; drawCount = # of flashes
    124  0070
    125  0070		       a5 83		      lda	drawDelay
    126  0072		       f0 83		      beq	deCount
    127  0074		       c6 83		      dec	drawDelay
    128  0076		       60		      rts
    129  0077
    130  0077				   deCount
    131  0077
    132  0077		       a5 85		      lda	drawCount
    133  0079		       f0 85		      beq	flashDone
    134  007b		       c6 85		      dec	drawCount
    135  007d
    136  007d		       a9 04		      lda	#4
    137  007f		       85 83		      sta	drawDelay	; "getting ready to move" flash
    138  0081
    139  0081		       a5 9f		      lda	fromSquare
    140  0083		       85 80		      sta	drawPieceNumber
    141  0085		       20 00 00 	      jsr	SAFE_CopySinglePiece	; EOR-draw = flash
    142  0088		       60		      rts
    143  0089
    144  0089		       e6 82	   flashDone  inc	drawPhase
    145  008b		       60		      rts
    146  008c
    147  008c
    148  008c							;---------------------------------------------------------------------------------------------------
    149  008c
      0  008c					      DEF	DEB2
      1  008c				   BANK_DEB2  SET	_CURRENT_BANK
      2  008c
      3  008c				   DEB2
    151  008c					      SUBROUTINE
    152  008c
    153  008c		       20 00 00 	      jsr	SAFE_CopySinglePiece
    154  008f		       c6 80		      dec	drawPieceNumber
    155  0091		       30 80		      bmi	.comp
    156  0093
    157  0093		       c6 82		      dec	drawPhase
    158  0095		       60		      rts
    159  0096
    160  0096		       e6 82	   .comp      inc	drawPhase
    161  0098		       60		      rts
    162  0099
    163  0099
    164  0099							;---------------------------------------------------------------------------------------------------
    165  0099
      0  0099					      DEF	MarchB
      1  0099				   BANK_MarchB SET	_CURRENT_BANK
      2  0099
      3  0099				   MarchB
    167  0099					      SUBROUTINE
    168  0099
    169  0099							; Draw the piece in the new square
    170  0099
    171  0099		       a5 9f		      lda	fromSquare
    172  009b		       85 80		      sta	drawPieceNumber
    173  009d		       20 00 00 	      jsr	SAFE_CopySinglePiece	; draw the moving piece into the new square
    174  00a0
    175  00a0		       a9 06		      lda	#6	; snail trail delay
    176  00a2		       85 83		      sta	drawDelay
    177  00a4
    178  00a4		       e6 82		      inc	drawPhase
    179  00a6		       60		      rts
    180  00a7
    181  00a7
    182  00a7							;---------------------------------------------------------------------------------------------------
    183  00a7
      0  00a7					      DEF	FinalFlash
      1  00a7				   BANK_FinalFlash SET	_CURRENT_BANK
      2  00a7
      3  00a7				   FinalFlash
    185  00a7					      SUBROUTINE
    186  00a7
    187  00a7		       a5 83		      lda	drawDelay
    188  00a9		       f0 83		      beq	.deCount
    189  00ab		       c6 83		      dec	drawDelay
    190  00ad		       60		      rts
    191  00ae
    192  00ae		       a5 85	   .deCount   lda	drawCount
    193  00b0		       f0 85		      beq	flashDone2
    194  00b2		       c6 85		      dec	drawCount
    195  00b4
    196  00b4		       a9 0a		      lda	#10
    197  00b6		       85 83		      sta	drawDelay	; "getting ready to move" flash
    198  00b8
    199  00b8		       a5 9f		      lda	fromSquare
    200  00ba		       85 80		      sta	drawPieceNumber
    201  00bc		       20 00 00 	      jsr	SAFE_CopySinglePiece
    202  00bf		       60		      rts
    203  00c0
    204  00c0		       e6 82	   flashDone2 inc	drawPhase
    205  00c2		       60		      rts
    206  00c3
    207  00c3
    208  00c3							;---------------------------------------------------------------------------------------------------
    209  00c3
      0  00c3					      DEF	CastleFixup
      1  00c3				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00c3
      3  00c3				   CastleFixup
    211  00c3					      SUBROUTINE
    212  00c3
    213  00c3							; fixup any castling issues
    214  00c3							; at this point the king has finished his two-square march
    215  00c3							; based on the finish square, we determine which rook we're interacting with
    216  00c3							; and generate a 'move' for the rook to position on the other side of the king
    217  00c3
    218  00c3
    219  00c3		       a5 a0		      lda	fromPiece
    220  00c5		       29 10		      and	#FLAG_CASTLE
    221  00c7		       f0 10		      beq	.noCast	; NOT involved in castle!
    222  00c9
    223  00c9		       a2 04		      ldx	#4
    224  00cb		       a5 a1		      lda	toSquare
    225  00cd		       ca	   .findCast  dex
    226  00ce		       30 a1		      bmi	.noCast
    227  00d0		       dd 00 00 	      cmp	KSquare,x
    228  00d3		       d0 f8		      bne	.findCast
    229  00d5
    230  00d5
    231  00d5		       bd 00 00 	      lda	RSquareEnd,x
    232  00d8		       85 87		      sta	toX12
    233  00da		       bd 00 00 	      lda	RSquareStart64,x
    234  00dd		       85 9f		      sta	fromSquare
    235  00df		       bd 00 00 	      lda	RSquareEnd64,x
    236  00e2		       85 a1		      sta	toSquare
    237  00e4
    238  00e4		       bc 00 00 	      ldy	RSquareStart,x
    239  00e7		       84 86		      sty	fromX12
    240  00e9
    241  00e9		       a5 a0		      lda	fromPiece
    242  00eb		       29 80		      and	#128
    243  00ed		       09 05		      ora	#ROOK	; preserve colour
    244  00ef		       85 a0		      sta	fromPiece
    245  00f1
    246  00f1		       a9 00		      lda	#CSL
    247  00f3		       85 82		      sta	drawPhase
    248  00f5		       60		      rts
    249  00f6
    250  00f6				   .noCast
    251  00f6
    252  00f6		       a5 9e		      lda	sideToMove
    253  00f8		       49 80		      eor	#128
    254  00fa		       85 9e		      sta	sideToMove	; swap
    255  00fc
    256  00fc		       30 9e		      bmi	.skip	; not human's turn?
    257  00fe
    258  00fe		       a9 00		      lda	#AI_SartMoveGen
    259  0100		       85 8f		      sta	aiPhase	; start "AI" state machine
    260  0102
    261  0102		       60	   .skip      rts
    262  0103
    263  0103
    264  0103		       02 06 3a 3e KSquare    .byte.b	2,6,58,62
    265  0107		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    266  010b		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    267  010f		       00 07 38 3f RSquareStart64 .byte.b	0,7,56,63
    268  0113		       03 05 3b 3d RSquareEnd64 .byte.b	3,5,59,61
    269  0117
    270  0117
    271  0117							;---------------------------------------------------------------------------------------------------
    272  0117
      0  0117					      DEF	SetupBanks
      1  0117				   BANK_SetupBanks SET	_CURRENT_BANK
      2  0117
      3  0117				   SetupBanks
    274  0117					      SUBROUTINE
    275  0117
    276  0117							; SAFE
    277  0117
    278  0117		       a0 07		      ldy	#7
    279  0119		       a2 00	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    280  011b		       20 00 00 	      jsr	SAFE_CopyShadowROMtoRAM
    281  011e		       88		      dey
    282  011f		       10 f8		      bpl	.copyRowBanks
    283  0121
    284  0121							; copy the BOARD/MOVES bank
    285  0121
    286  0121		       a0 00		      ldy	#RAMBANK_MOVES_RAM
    287  0123		       a2 00		      ldx	#MOVES
    288  0125		       20 00 00 	      jsr	SAFE_CopyShadowROMtoRAM	; this auto-initialises Board too
    289  0128
    290  0128							; copy the PLY banks
    291  0128
    292  0128		       a9 00		      lda	#MAX_PLY
    293  012a		       85 a7		      sta	__plyBank
    294  012c		       a0 00		      ldy	#RAMBANK_PLY
    295  012e		       84 9c		      sty	currentPly
    296  0130		       a2 00	   .copyPlyBanks ldx	#BANK_PLY
    297  0132		       20 00 00 	      jsr	SAFE_CopyShadowROMtoRAM
    298  0135		       c8		      iny
    299  0136		       c6 a7		      dec	__plyBank
    300  0138		       d0 f6		      bne	.copyPlyBanks
    301  013a
    302  013a		       60		      rts
    303  013b
    304  013b
    305  013b							;---------------------------------------------------------------------------------------------------
    306  013b
      0  013b					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  013b		       01 3b	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $13b , FREE= $6c5
      2  013b					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  013b				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  013b				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  013b				  -	      ERR
      6  013b					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 1
      0  013b					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  013b
      0  013b					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0000 ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a6	   COLOUR_LINE_1 =	$a6
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 24	   COLOUR_LINE_3 =	$24
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800							; good 94/46/28/0
     18  0800							; good 94/44/26/0
     19  0800
     20  0800
     21  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     22  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     24  0800
     25  0800				   ChessBitmap
     26  0800		       00 00 00 00*ChessBitmap0 ds	24
     27  0818		       00 00 00 00*ChessBitmap1 ds	24
     28  0830		       00 00 00 00*ChessBitmap2 ds	24
     29  0848		       00 00 00 00*ChessBitmap3 ds	24
     30  0860		       00 00 00 00*ChessBitmap4 ds	24
     31  0878		       00 00 00 00*ChessBitmap5 ds	24
     32  0890
     33  0890
     34  0890				   BlankSprite
     35  0890		       00 00 00 00*	      ds	8,0
     36  0898
     37  0898				   SpriteBuffer
     38  0898					      REPEAT	24
     39  0898		       f8		      .byte.b	%11111000	;%00011111
     38  0898					      REPEND
     39  0899		       f8		      .byte.b	%11111000	;%00011111
     38  0899					      REPEND
     39  089a		       f8		      .byte.b	%11111000	;%00011111
     38  089a					      REPEND
     39  089b		       f8		      .byte.b	%11111000	;%00011111
     38  089b					      REPEND
     39  089c		       f8		      .byte.b	%11111000	;%00011111
     38  089c					      REPEND
     39  089d		       f8		      .byte.b	%11111000	;%00011111
     38  089d					      REPEND
     39  089e		       f8		      .byte.b	%11111000	;%00011111
     38  089e					      REPEND
     39  089f		       f8		      .byte.b	%11111000	;%00011111
     38  089f					      REPEND
     39  08a0		       f8		      .byte.b	%11111000	;%00011111
     38  08a0					      REPEND
     39  08a1		       f8		      .byte.b	%11111000	;%00011111
     38  08a1					      REPEND
     39  08a2		       f8		      .byte.b	%11111000	;%00011111
     38  08a2					      REPEND
     39  08a3		       f8		      .byte.b	%11111000	;%00011111
     38  08a3					      REPEND
     39  08a4		       f8		      .byte.b	%11111000	;%00011111
     38  08a4					      REPEND
     39  08a5		       f8		      .byte.b	%11111000	;%00011111
     38  08a5					      REPEND
     39  08a6		       f8		      .byte.b	%11111000	;%00011111
     38  08a6					      REPEND
     39  08a7		       f8		      .byte.b	%11111000	;%00011111
     38  08a7					      REPEND
     39  08a8		       f8		      .byte.b	%11111000	;%00011111
     38  08a8					      REPEND
     39  08a9		       f8		      .byte.b	%11111000	;%00011111
     38  08a9					      REPEND
     39  08aa		       f8		      .byte.b	%11111000	;%00011111
     38  08aa					      REPEND
     39  08ab		       f8		      .byte.b	%11111000	;%00011111
     38  08ab					      REPEND
     39  08ac		       f8		      .byte.b	%11111000	;%00011111
     38  08ac					      REPEND
     39  08ad		       f8		      .byte.b	%11111000	;%00011111
     38  08ad					      REPEND
     39  08ae		       f8		      .byte.b	%11111000	;%00011111
     38  08ae					      REPEND
     39  08af		       f8		      .byte.b	%11111000	;%00011111
     40  08b0					      REPEND
     41  08b0
     42  08b0				   SpriteBuffer2
     43  08b0					      REPEAT	24
     44  08b0		       f8		      .byte.b	%11111000	;%00011111
     43  08b0					      REPEND
     44  08b1		       f8		      .byte.b	%11111000	;%00011111
     43  08b1					      REPEND
     44  08b2		       f8		      .byte.b	%11111000	;%00011111
     43  08b2					      REPEND
     44  08b3		       f8		      .byte.b	%11111000	;%00011111
     43  08b3					      REPEND
     44  08b4		       f8		      .byte.b	%11111000	;%00011111
     43  08b4					      REPEND
     44  08b5		       f8		      .byte.b	%11111000	;%00011111
     43  08b5					      REPEND
     44  08b6		       f8		      .byte.b	%11111000	;%00011111
     43  08b6					      REPEND
     44  08b7		       f8		      .byte.b	%11111000	;%00011111
     43  08b7					      REPEND
     44  08b8		       f8		      .byte.b	%11111000	;%00011111
     43  08b8					      REPEND
     44  08b9		       f8		      .byte.b	%11111000	;%00011111
     43  08b9					      REPEND
     44  08ba		       f8		      .byte.b	%11111000	;%00011111
     43  08ba					      REPEND
     44  08bb		       f8		      .byte.b	%11111000	;%00011111
     43  08bb					      REPEND
     44  08bc		       f8		      .byte.b	%11111000	;%00011111
     43  08bc					      REPEND
     44  08bd		       f8		      .byte.b	%11111000	;%00011111
     43  08bd					      REPEND
     44  08be		       f8		      .byte.b	%11111000	;%00011111
     43  08be					      REPEND
     44  08bf		       f8		      .byte.b	%11111000	;%00011111
     43  08bf					      REPEND
     44  08c0		       f8		      .byte.b	%11111000	;%00011111
     43  08c0					      REPEND
     44  08c1		       f8		      .byte.b	%11111000	;%00011111
     43  08c1					      REPEND
     44  08c2		       f8		      .byte.b	%11111000	;%00011111
     43  08c2					      REPEND
     44  08c3		       f8		      .byte.b	%11111000	;%00011111
     43  08c3					      REPEND
     44  08c4		       f8		      .byte.b	%11111000	;%00011111
     43  08c4					      REPEND
     44  08c5		       f8		      .byte.b	%11111000	;%00011111
     43  08c5					      REPEND
     44  08c6		       f8		      .byte.b	%11111000	;%00011111
     43  08c6					      REPEND
     44  08c7		       f8		      .byte.b	%11111000	;%00011111
     45  08c8					      REPEND
     46  08c8				  -	      if	0
     47  08c8				  -	      .byte	%00011111
     48  08c8				  -	      .byte	%00011111
     49  08c8				  -	      .byte	%00011111
     50  08c8				  -	      .byte	%00011111
     51  08c8				  -	      .byte	%00011111
     52  08c8				  -	      .byte	%00011111
     53  08c8				  -	      .byte	%00011111
     54  08c8				  -	      .byte	%00011111
     55  08c8				  -
     56  08c8				  -	      .byte	%00011111
     57  08c8				  -	      .byte	%00011111
     58  08c8				  -	      .byte	%00011111
     59  08c8				  -	      .byte	%00011111
     60  08c8				  -	      .byte	%00011111
     61  08c8				  -	      .byte	%00011111
     62  08c8				  -	      .byte	%00011111
     63  08c8				  -	      .byte	%00011111
     64  08c8				  -
     65  08c8				  -	      .byte	%00011111
     66  08c8				  -	      .byte	%00011111
     67  08c8				  -	      .byte	%00011111
     68  08c8				  -	      .byte	%00011111
     69  08c8				  -	      .byte	%00011111
     70  08c8				  -	      .byte	%00011111
     71  08c8				  -	      .byte	%00011111
     72  08c8				  -	      .byte	%00011111
     73  08c8					      endif
     74  08c8
     75  08c8
     76  08c8							;---------------------------------------------------------------------------------------------------
     77  08c8					      if	1
      0  08c8					      DEF	ClearRowBitmap
      1  08c8				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  08c8
      3  08c8				   ClearRowBitmap
     79  08c8
     80  08c8		       a9 00		      lda	#0
     81  08ca		       a0 90		      ldy	#ROW_BITMAP_SIZE
     82  08cc		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     83  08cf		       88		      dey
     84  08d0		       d0 fa		      bne	.clearRow
     85  08d2		       60		      rts
     86  08d3					      endif
     87  08d3
     88  08d3							;---------------------------------------------------------------------------------------------------
     89  08d3
      0  08d3					      DEF	CopyPieceToRowBitmap
      1  08d3				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  08d3
      3  08d3				   CopyPieceToRowBitmap
     91  08d3
     92  08d3		       a0 11		      ldy	#17
     93  08d5		       b0 11		      bcs	.rightSide
     94  08d7
     95  08d7				   .copyPiece
     96  08d7		       b9 a7 00 	      lda	__pieceShapeBuffer,y
     97  08da		       f0 a7		      beq	.blank1
     98  08dc		       59 00 f0 	      eor	ChessBitmap,y
     99  08df		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    100  08e2
    101  08e2		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    102  08e5		       f0 b9		      beq	.blank2
    103  08e7		       59 12 f0 	      eor	ChessBitmap+18,y
    104  08ea		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
    105  08ed
    106  08ed		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    107  08f0		       f0 cb		      beq	.blank3
    108  08f2		       59 24 f0 	      eor	ChessBitmap+36,y
    109  08f5		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
    110  08f8
    111  08f8		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    112  08fb		       f0 dd		      beq	.blank4
    113  08fd		       59 36 f0 	      eor	ChessBitmap+54,y
    114  0900		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
    115  0903
    116  0903		       88	   .blank4    dey
    117  0904		       10 d1		      bpl	.copyPiece
    118  0906
    119  0906		       60		      rts
    120  0907
    121  0907				   .rightSide
    122  0907
    123  0907					      SUBROUTINE
    124  0907
    125  0907				   .copyPieceR
    126  0907
    127  0907		       b9 a7 00 	      lda	__pieceShapeBuffer,y
    128  090a		       f0 a7		      beq	.blank1
    129  090c		       59 48 f0 	      eor	ChessBitmap+72,y
    130  090f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    131  0912
    132  0912		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    133  0915		       f0 b9		      beq	.blank2
    134  0917		       59 5a f0 	      eor	ChessBitmap+72+18,y
    135  091a		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    136  091d
    137  091d		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    138  0920		       f0 cb		      beq	.blank3
    139  0922		       59 6c f0 	      eor	ChessBitmap+72+36,y
    140  0925		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    141  0928
    142  0928		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    143  092b		       f0 dd		      beq	.blank4
    144  092d		       59 7e f0 	      eor	ChessBitmap+72+54,y
    145  0930		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    146  0933
    147  0933				   .blank4
    148  0933		       88		      dey
    149  0934		       10 d1		      bpl	.copyPieceR
    150  0936
    151  0936		       60		      rts
    152  0937
    153  0937							;---------------------------------------------------------------------------------------------------
    154  0937
    155  0a00		       00 00 00 00*	      ALIGN	256
    156  0a00
    157  0a00							; x = row # (and bank#)
    158  0a00
    159  0a00				   .endline
    160  0a00
    161  0a00							;@59
    162  0a00
    163  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    164  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    165  0a00				   SELFMOD_RTS_ON_LAST_ROW
    166  0a00		       e8		      inx		; 2
    167  0a01
    168  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    169  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03
      3  0a03				   DrawRow
    171  0a03
    172  0a03							;@64
    173  0a03		       a0 07		      ldy	#7	; 2
    174  0a05		       10 07		      bpl	.dl2	; 3   (must be 69 here)
    175  0a07
    176  0a07							;@58...
    177  0a07
    178  0a07				   .l3
    179  0a07
    180  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    181  0a0a		       85 5b		      sta	GRP0	; 3
    182  0a0c		       b9 c0 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    183  0a0f		       85 5c		      sta	GRP1	; 3
    184  0a11
    185  0a11							;@-4
    186  0a11
    187  0a11		       a9 a6		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    188  0a13		       85 48		      sta	COLUPF	; 3 @1
    189  0a15
    190  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    191  0a18		       85 4d		      sta	PF0	; 3
    192  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    193  0a1d		       85 4e		      sta	PF1	; 3
    194  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    195  0a22		       85 4f		      sta	PF2	; 3 @22
    196  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    198  0a27
    199  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    200  0a2a		       85 4d		      sta	PF0	; 3
    201  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    202  0a2f		       85 4e		      sta	PF1	; 3
    203  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    204  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    205  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    207  0a39
    208  0a39		       88		      dey		; 2
    209  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    210  0a3c
    211  0a3c							;@57
    212  0a3c				   .drawLine
    213  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    215  0a42
    216  0a42				   .dl2
    217  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    218  0a45		       85 5b		      sta	GRP0	; 3
    219  0a47		       b9 b0 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    220  0a4a		       85 5c		      sta	GRP1	; 3
    221  0a4c
    222  0a4c							;@7
    223  0a4c
    224  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    225  0a4e		       85 48		      sta	COLUPF	; 3 @12
    226  0a50
    227  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    228  0a53		       85 4d		      sta	PF0	; 3
    229  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    230  0a58		       85 4e		      sta	PF1	; 3
    231  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    232  0a5d		       85 4f		      sta	PF2	; 3 @33
    233  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    235  0a61
    236  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    237  0a64		       85 4d		      sta	PF0	; 3
    238  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    239  0a69		       85 4e		      sta	PF1	; 3
    240  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    241  0a6e		       85 4f		      sta	PF2	; 3 @57
    242  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    244  0a73
    245  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    246  0a76		       85 5b		      sta	GRP0	; 3
    247  0a78		       b9 b8 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    248  0a7b		       85 5c		      sta	GRP1	; 3
    249  0a7d
    250  0a7d							;@0
    251  0a7d		       a9 24		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    252  0a7f		       85 48		      sta	COLUPF	; 3 @5
    253  0a81
    254  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    255  0a84		       85 4d		      sta	PF0	; 3
    256  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    257  0a89		       85 4e		      sta	PF1	; 3
    258  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    259  0a8e		       85 4f		      sta	PF2	; 3 @26
    260  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    262  0a94
    263  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    264  0a97		       85 4d		      sta	PF0	; 3
    265  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    266  0a9c		       85 4e		      sta	PF1	; 3
    267  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    268  0aa1		       85 4f		      sta	PF2	; 3 @55
    269  0aa3
    270  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    271  0aa6
    272  0aa6
    273  0aa6							;.LineColour
    274  0aa6							; The ICC triplet colour definitions for a single row of the chessboard
    275  0aa6							;    REPEAT 8
    276  0aa6							;	  .byte $4A, $28, $94
    277  0aa6							;    REPEND
    278  0aa6
    279  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6
      3  0aa6				   WriteBlank
    281  0aa6
    282  0aa6		       a9 90		      lda	#<BlankSprite
    283  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    284  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    285  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    286  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    287  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    288  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    289  0aba
    290  0aba		       a9 f0		      lda	#>BlankSprite
    291  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    292  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    293  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    294  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    295  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    296  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    297  0ace
    298  0ace		       60		      rts
    299  0acf
    300  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf
      3  0acf				   WriteCursor
    302  0acf
    303  0acf		       a6 88		      ldx	highlight_row
    304  0ad1		       30 88		      bmi	.noCursor
    305  0ad3
    306  0ad3		       86 3e		      stx	SET_BANK_RAM
    307  0ad5		       a9 98		      lda	#<SpriteBuffer
    308  0ad7		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    309  0ada		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    310  0add		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    311  0ae0		       a9 f0		      lda	#>SpriteBuffer
    312  0ae2		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    313  0ae5		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    314  0ae8		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    315  0aeb
    316  0aeb				  -	      if	0
    317  0aeb				  -	      ldx	highlight_row+1
    318  0aeb				  -	      stx	SET_BANK_RAM
    319  0aeb				  -	      lda	#<SpriteBuffer
    320  0aeb				  -	      sta	SMSPRITE0_1+1+RAM_WRITE
    321  0aeb				  -	      sta	SMSPRITE8_1+1+RAM_WRITE
    322  0aeb				  -	      sta	SMSPRITE16_1+1+RAM_WRITE
    323  0aeb				  -	      lda	#>SpriteBuffer
    324  0aeb				  -	      sta	SMSPRITE0_1+2+RAM_WRITE
    325  0aeb				  -	      sta	SMSPRITE8_1+2+RAM_WRITE
    326  0aeb				  -	      sta	SMSPRITE16_1+2+RAM_WRITE
    327  0aeb					      endif
    328  0aeb
    329  0aeb				   .noCursor
    330  0aeb		       60		      rts
    331  0aec
      0  0aec					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0aec
      2  0aec
      3  0aec		       02 ec	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $2ec , FREE= $114
      4  0aec					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0aec				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0aec				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0aec				  -	      ERR
      8  0aec					      endif
    333  0aec							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 1
      0  0aec					      include	"BANK_CHESS_INCLUDES.asm"
      1  0aec							; Chess
      2  0aec							; Atari 2600 Chess display system
      3  0aec							; Copyright (c) 2019-2020 Andrew Davie
      4  0aec							; andrew@taswegian.com
      5  0aec
      6  0aec
      7  0aec							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  0aec							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  0aec							; a single gif of the format..
     10  0aec							; a row of white pieces on black squares
     11  0aec							; a row of white pieces on white squares
     12  0aec							; a row of black pieces on black squares
     13  0aec							; a row of black pieces on white squares
     14  0aec
     15  0aec							; each row has the pieces ordered thus:
     16  0aec							; a blank, then pawn, knight, bishop, rook, queen, king
     17  0aec							; each piece is 5 pixels wide x 8 pixels deep
     18  0aec							; each pixel is from an 8-colour palette.
     19  0aec							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  0aec							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  0aec							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  0aec							; bit "b" becomes the second ICC pixel line (2)
     23  0aec							; bit "c" becomes the third ICC pixel line (3)
     24  0aec							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  0aec							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  0aec							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  0aec							; These 4 shifted positions are stored consecutively in the shape definition
     28  0aec
     29  0aec							; Example...
     30  0aec							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     31  0aec							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  0aec							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  0aec							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  0aec
     35  0aec							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  0aec							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  0aec							; actually have any data in PF1 or PF2.
     38  0aec
     39  0aec
     40  0aec
------- FILE piece_graphics.asm LEVEL 3 PASS 1
      0  0aec					      include	"piece_graphics.asm"
      1  0aec							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0aec					      NEWBANK	PIECES_0
      1  0000 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000
      3  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048
      3  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090
      3  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100
      3  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148
      3  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190
      3  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200
      3  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248
      3  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290
      3  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300
      3  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348
      3  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390
      3  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400
      3  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448
      3  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490
      3  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500
      3  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548
      3  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590
      3  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600
      3  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648
      3  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690
      3  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700
      3  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748
      3  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790
      3  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  0000 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800
      3  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$00,$a0,$a0,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848
      3  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$00,$28,$28,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890
      3  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900
      3  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$00,$50,$50,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948
      3  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990
      3  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00
      3  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48
      3  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90
      3  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00
      3  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48
      3  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90
      3  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00
      3  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48
      3  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90
      3  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00
      3  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48
      3  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90
      3  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00
      3  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48
      3  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90
      3  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00
      3  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48
      3  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90
      3  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  0000 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000
      3  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048
      3  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090
      3  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100
      3  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148
      3  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$f0,$50,$50,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190
      3  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$7c,$54,$54,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200
      3  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$03,$02,$02,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248
      3  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$f8,$a8,$a8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290
      3  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300
      3  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348
      3  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390
      3  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400
      3  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$00,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448
      3  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$00,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490
      3  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$00,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500
      3  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$00,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548
      3  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590
      3  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$78,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600
      3  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$03,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648
      3  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$78,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690
      3  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700
      3  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748
      3  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790
      3  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  0000 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800
      3  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848
      3  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890
      3  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900
      3  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948
      3  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990
      3  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00
      3  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48
      3  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90
      3  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00
      3  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48
      3  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90
      3  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00
      3  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48
      3  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90
      3  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00
      3  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48
      3  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$00,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90
      3  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$00,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00
      3  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$00,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48
      3  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$00,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90
      3  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$20,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00
      3  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$78,$38,$18,$78,$68,$14,$00,$00,$00,$00,$20,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48
      3  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$03,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90
      3  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$78,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$10,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_4
      1  0000 ????				      SEG	PIECES_4
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_4   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  3000					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3000				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3000
      3  3000				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3000		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  3048					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3048				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3048
      3  3048				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  3090					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3090				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3090
      3  3090				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  30c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  30d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3100				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3100
      3  3100				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  3148					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3148				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3148
      3  3148				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3148		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  3160		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  3190					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3190				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3190
      3  3190				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  31d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3200				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3200
      3  3200				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  3230		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  3248					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3248				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3248
      3  3248				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  3290					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3290				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3290
      3  3290				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3290		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  32a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  32d8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3300				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3300
      3  3300				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  3348					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3348				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3348
      3  3348				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3378		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  3390					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3390				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3390
      3  3390				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  33d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400
      3  3400				   BLACK_KING_on_BLACK_SQUARE_0
      3  3400		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  3418		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  3448					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448
      3  3448				   BLACK_KING_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  3490					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490
      3  3490				   BLACK_KING_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  34c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  34d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500
      3  3500				   BLACK_KING_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE piece_graphics.asm
    124  3548
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  3548					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  3548				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548
      3  3548				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  3590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  3590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590
      3  3590				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  35d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  3600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600
      3  3600				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  3648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  3648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648
      3  3648				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  3690					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  3690				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3690
      3  3690				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  3690		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  36d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  3700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3700
      3  3700				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  3748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  3748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3748
      3  3748				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3778		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  3790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  3790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3790
      3  3790				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
    134  37d8
      0  37d8					      NEWBANK	PIECES_5
      1  0000 ????				      SEG	PIECES_5
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_5   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_5
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 1
      0  3800					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800
      3  3800				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3800		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 1
      0  3848					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848
      3  3848				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 1
      0  3890					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890
      3  3890				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  38c0		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 1
      0  38d8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900
      3  3900				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 1
      0  3948					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3948				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3948
      3  3948				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3948		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 1
      0  3990					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3990				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3990
      3  3990				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 1
      0  39d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3a00				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3a00
      3  3a00				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a30		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 1
      0  3a48					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3a48				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3a48
      3  3a48				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    144  3a90
    145  3a90				  -	      if	0
    146  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    147  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    148  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    149  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    150  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    151  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    152  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    153  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    154  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    155  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    156  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    157  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    158  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    159  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    160  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    161  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    162  3a90					      endif
      0  3a90					      CHECK_BANK_SIZE	"PIECES_5 (2K)"
      1  3a90		       02 90	   .TEMP      =	* - BANK_START
 PIECES_5 (2K) (2K) SIZE =  $290 , FREE= $570
      2  3a90					      ECHO	"PIECES_5 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3a90				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3a90				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3a90				  -	      ERR
      6  3a90					      endif
    164  3a90
    165  3a90				  -	      if	0
    166  3a90				  -	      NEWBANK	PIECES_6
    167  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    168  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    169  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    170  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    171  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    172  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    173  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    174  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    175  3a90				  -
    176  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    177  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    178  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    179  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    180  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    181  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    182  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    183  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    184  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    185  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    186  3a90				  -
    187  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    188  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    189  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    190  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    191  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    192  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    193  3a90				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    194  3a90				  -
    195  3a90				  -
    196  3a90				  -	      NEWBANK	PIECES_7
    197  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    198  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    199  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    200  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    201  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    202  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    203  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    204  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    205  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    206  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    207  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    208  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    209  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    210  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    211  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    212  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    213  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    214  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    215  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    216  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    217  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    218  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    219  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    220  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    221  3a90				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    222  3a90				  -
    223  3a90				  -
    224  3a90				  -	      NEWBANK	PIECES_8
    225  3a90				  -
    226  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    227  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    228  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    229  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    230  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    231  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    232  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    233  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    234  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    235  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    236  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    237  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    238  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    239  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    240  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    241  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    242  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    243  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    244  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    245  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    246  3a90				  -
    247  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    248  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    249  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    250  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    251  3a90				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    252  3a90				  -
    253  3a90					      endif
    254  3a90
    255  3a90							;    NEWBANK PIECES_9
    256  3a90
    257  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    258  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    259  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    260  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    261  3a90							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    262  3a90
    263  3a90				  -	      if	0
    264  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    265  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    266  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    267  3a90					      endif
    268  3a90
    269  3a90							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    270  3a90
    271  3a90				  -	      if	0
    272  3a90				  -
    273  3a90				  -
    274  3a90				  -
    275  3a90				  -
    276  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    277  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    278  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    279  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    280  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    281  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    282  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    283  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    284  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    285  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    286  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    287  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    288  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    289  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    290  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    291  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    292  3a90				  -
    293  3a90				  -
    294  3a90					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3a90
      0  3a90					      NEWBANK	PIECE_VECTORS
      1  0000 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 1
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEF	PIECE_VECTOR_LO
      1  4000				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4000
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  401d		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  401e		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  401f		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  4020		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     36  4021		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     37  4022		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     38  4023		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     39  4024		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     40  4025		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     41  4026		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     42  4027		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     43  4028		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     44  4029		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     45  402a		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     46  402b		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     47  402c		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     48  402d		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     49  402e		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     50  402f		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     51  4030		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     52  4031		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     53  4032		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     54  4033		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     55  4034		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     56  4035		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     57  4036		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     58  4037		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     59  4038		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     60  4039		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     61  403a		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     62  403b		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     63  403c		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     64  403d		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     65  403e		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     66  403f		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     67  4040		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     68  4041		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     69  4042		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     70  4043		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     71  4044		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     72  4045		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     73  4046		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     74  4047		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     75  4048		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     76  4049		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     77  404a		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     78  404b		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     79  404c		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     80  404d		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     81  404e		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     82  404f		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     83  4050		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     84  4051		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     85  4052		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     86  4053		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     87  4054		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     88  4055		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     89  4056		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     90  4057		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     91  4058		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     92  4059		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     93  405a		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     94  405b		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     95  405c		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
     96  405d		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
     97  405e		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
     98  405f		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
     99  4060		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    100  4061		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    101  4062		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    102  4063		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    115  4070		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    116  4071		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    117  4072		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    118  4073		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    119  4074		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    120  4075		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    121  4076		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    122  4077		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    123  4078		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    124  4079		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    125  407a		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    126  407b		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    127  407c		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    128  407d		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    129  407e		       90		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    130  407f		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
      0  4080					      DEF	PIECE_VECTOR_HI
      1  4080				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4080
      3  4080				   PIECE_VECTOR_HI
    132  4080		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    133  4081		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    134  4082		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    135  4083		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    136  4084		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    137  4085		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    138  4086		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    139  4087		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    140  4088		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    141  4089		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    142  408a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    143  408b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    144  408c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    145  408d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    146  408e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    147  408f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    148  4090		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    149  4091		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    150  4092		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    151  4093		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    152  4094		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    153  4095		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    154  4096		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    155  4097		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    156  4098		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    157  4099		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    158  409a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    159  409b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    160  409c		       f6		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    161  409d		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    162  409e		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    163  409f		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    164  40a0		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    165  40a1		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    166  40a2		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    167  40a3		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    168  40a4		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    169  40a5		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    170  40a6		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    171  40a7		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    172  40a8		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    173  40a9		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    174  40aa		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    175  40ab		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    176  40ac		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    177  40ad		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    178  40ae		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    179  40af		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    180  40b0		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    181  40b1		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    182  40b2		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    183  40b3		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    184  40b4		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    185  40b5		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    186  40b6		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    187  40b7		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    188  40b8		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    189  40b9		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    190  40ba		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    191  40bb		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    192  40bc		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    193  40bd		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    194  40be		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    195  40bf		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    196  40c0		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    197  40c1		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    198  40c2		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    199  40c3		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    200  40c4		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    201  40c5		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    202  40c6		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    203  40c7		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    204  40c8		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    205  40c9		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    206  40ca		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    207  40cb		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    208  40cc		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    209  40cd		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    210  40ce		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    211  40cf		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    212  40d0		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    213  40d1		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    214  40d2		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    215  40d3		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    216  40d4		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    217  40d5		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    218  40d6		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    219  40d7		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    224  40dc		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    225  40dd		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    226  40de		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    227  40df		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    228  40e0		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    229  40e1		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    230  40e2		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    231  40e3		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    232  40e4		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    233  40e5		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    234  40e6		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    235  40e7		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    236  40e8		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    237  40e9		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    238  40ea		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    239  40eb		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    240  40ec		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    241  40ed		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    242  40ee		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    243  40ef		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    244  40f0		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    245  40f1		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    246  40f2		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    247  40f3		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    248  40f4		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    249  40f5		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    250  40f6		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    251  40f7		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    252  40f8		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    253  40f9		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    254  40fa		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    255  40fb		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    256  40fc		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    257  40fd		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    258  40fe		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    259  40ff		       f1		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
      0  4100					      DEF	PIECE_VECTOR_BANK
      1  4100				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  4100
      3  4100				   PIECE_VECTOR_BANK
    261  4100		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    262  4101		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    263  4102		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    264  4103		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    265  4104		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    266  4105		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    267  4106		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    268  4107		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    269  4108		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    270  4109		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    271  410a		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    272  410b		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    273  410c		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    274  410d		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    275  410e		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    276  410f		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    277  4110		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    278  4111		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    279  4112		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    280  4113		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    281  4114		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    282  4115		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    283  4116		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    284  4117		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    285  4118		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    286  4119		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    287  411a		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    288  411b		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    289  411c		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    290  411d		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    291  411e		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    292  411f		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    293  4120		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    294  4121		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    295  4122		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    296  4123		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    297  4124		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    298  4125		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    299  4126		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    300  4127		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    301  4128		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    302  4129		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    303  412a		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    304  412b		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    305  412c		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    306  412d		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    307  412e		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    308  412f		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    309  4130		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    310  4131		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    311  4132		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    312  4133		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    313  4134		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    314  4135		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    315  4136		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    316  4137		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    317  4138		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    318  4139		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    319  413a		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    320  413b		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    321  413c		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    322  413d		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    323  413e		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    324  413f		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    325  4140		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    326  4141		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    327  4142		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    328  4143		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    329  4144		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    330  4145		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    331  4146		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    332  4147		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    333  4148		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    334  4149		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    335  414a		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    336  414b		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    337  414c		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    338  414d		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    339  414e		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    340  414f		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    341  4150		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    342  4151		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    343  4152		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    344  4153		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    345  4154		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    346  4155		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    347  4156		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    348  4157		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    349  4158		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    350  4159		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    351  415a		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    352  415b		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    353  415c		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    354  415d		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    355  415e		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    356  415f		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    357  4160		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    358  4161		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    359  4162		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    360  4163		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    361  4164		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    362  4165		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    363  4166		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    364  4167		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    365  4168		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    366  4169		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    367  416a		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    368  416b		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    369  416c		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    370  416d		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    371  416e		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    372  416f		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    373  4170		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    374  4171		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    375  4172		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    376  4173		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    377  4174		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    378  4175		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    379  4176		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    380  4177		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    381  4178		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    382  4179		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    383  417a		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    384  417b		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    385  417c		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    386  417d		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    387  417e		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    388  417f		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    389  4180
    390  4180							; piece index equates...
    391  4180		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    392  4180		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    393  4180		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    394  4180		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    395  4180		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    396  4180		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    397  4180		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    398  4180		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    399  4180		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    400  4180		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    401  4180		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    402  4180		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    403  4180		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    404  4180		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    405  4180		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    406  4180		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    407  4180		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    408  4180		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    409  4180		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    410  4180		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    411  4180		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    412  4180		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    413  4180		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    414  4180		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    415  4180		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    416  4180		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    417  4180		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    418  4180		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    419  4180		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    420  4180		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    421  4180		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    422  4180		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    423  4180		       00 20	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	32
    424  4180		       00 21	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	33
    425  4180		       00 22	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	34
    426  4180		       00 23	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	35
    427  4180		       00 24	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	36
    428  4180		       00 25	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	37
    429  4180		       00 26	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	38
    430  4180		       00 27	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	39
    431  4180		       00 28	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	40
    432  4180		       00 29	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	41
    433  4180		       00 2a	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	42
    434  4180		       00 2b	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	43
    435  4180		       00 2c	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	44
    436  4180		       00 2d	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	45
    437  4180		       00 2e	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	46
    438  4180		       00 2f	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	47
    439  4180		       00 30	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	48
    440  4180		       00 31	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	49
    441  4180		       00 32	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	50
    442  4180		       00 33	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	51
    443  4180		       00 34	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	52
    444  4180		       00 35	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	53
    445  4180		       00 36	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	54
    446  4180		       00 37	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	55
    447  4180		       00 38	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	56
    448  4180		       00 39	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	57
    449  4180		       00 3a	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	58
    450  4180		       00 3b	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	59
    451  4180		       00 3c	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	60
    452  4180		       00 3d	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	61
    453  4180		       00 3e	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	62
    454  4180		       00 3f	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	63
    455  4180		       00 40	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	64
    456  4180		       00 41	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	65
    457  4180		       00 42	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	66
    458  4180		       00 43	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	67
    459  4180		       00 44	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	68
    460  4180		       00 45	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	69
    461  4180		       00 46	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	70
    462  4180		       00 47	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	71
    463  4180		       00 48	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	72
    464  4180		       00 49	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	73
    465  4180		       00 4a	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	74
    466  4180		       00 4b	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	75
    467  4180		       00 4c	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	76
    468  4180		       00 4d	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	77
    469  4180		       00 4e	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	78
    470  4180		       00 4f	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	79
    471  4180		       00 50	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	80
    472  4180		       00 51	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	81
    473  4180		       00 52	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	82
    474  4180		       00 53	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	83
    475  4180		       00 54	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	84
    476  4180		       00 55	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	85
    477  4180		       00 56	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	86
    478  4180		       00 57	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	87
    479  4180		       00 58	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	88
    480  4180		       00 59	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	89
    481  4180		       00 5a	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	90
    482  4180		       00 5b	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	91
    483  4180		       00 5c	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	92
    484  4180		       00 5d	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	93
    485  4180		       00 5e	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	94
    486  4180		       00 5f	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	95
    487  4180		       00 60	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	96
    488  4180		       00 61	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	97
    489  4180		       00 62	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	98
    490  4180		       00 63	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	99
    491  4180		       00 64	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	100
    492  4180		       00 65	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	101
    493  4180		       00 66	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	102
    494  4180		       00 67	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	103
    495  4180		       00 68	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	104
    496  4180		       00 69	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	105
    497  4180		       00 6a	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	106
    498  4180		       00 6b	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	107
    499  4180		       00 6c	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	108
    500  4180		       00 6d	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	109
    501  4180		       00 6e	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	110
    502  4180		       00 6f	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	111
    503  4180		       00 70	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	112
    504  4180		       00 71	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	113
    505  4180		       00 72	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	114
    506  4180		       00 73	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	115
    507  4180		       00 74	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	116
    508  4180		       00 75	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	117
    509  4180		       00 76	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	118
    510  4180		       00 77	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	119
    511  4180		       00 78	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	120
    512  4180		       00 79	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	121
    513  4180		       00 7a	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	122
    514  4180		       00 7b	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	123
    515  4180		       00 7c	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	124
    516  4180		       00 7d	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	125
    517  4180		       00 7e	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	126
    518  4180		       00 7f	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	127
------- FILE BANK_CHESS_INCLUDES.asm
      0  4180					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4180		       01 80	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $180 , FREE= $680
      2  4180					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4180				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4180				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4180				  -	      ERR
      6  4180					      endif
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 1
      0  4180					      include	"BANK_StateMachine.asm"
      1  4180
      2  4180
      0  4180					      NEWBANK	STATEMACHINE
      1  0000 ????				      SEG	STATEMACHINE
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   STATEMACHINE SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	STATEMACHINE
      4  4800
      5  4800
      6  4800							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
      7  4800
      8  4800		       00 00	   PLAYER     =	RAMBANK_PLY
      9  4800		       00 01	   OPPONENT   =	PLAYER + 1
     10  4800
     11  4800							;---------------------------------------------------------------------------------------------------
     12  4800
     13  4800		       00 01	   STARTSELECTPIECE =	1
     14  4800
     15  4800		       00 00	   AI_BeginSelectMovePhase =	0
     16  4800		       00 01	   AI_SelectStartSquare =	1
     17  4800		       00 02	   AI_StartSquareSelected =	2
     18  4800		       00 03	   AI_DrawMoves =	3
     19  4800		       00 04	   AI_ShowMoveCaptures =	4
     20  4800		       00 05	   AI_SlowFlash =	5
     21  4800		       00 06	   AI_DrawTargetSquares =	6
     22  4800		       00 07	   AI_SelectDestinationSquare =	7
     23  4800		       00 08	   AI_Quiescent =	8
     24  4800		       00 09	   AI_Halt    =	9
     25  4800		       00 0a	   AI_ReselectDebounce =	10
     26  4800		       00 0b	   AI_SartMoveGen =	11
     27  4800		       00 0c	   AI_StepMoveGen =	12
     28  4800		       00 0d	   AI_LookForCheck =	13
     29  4800							;AI_StartClearBoard		    = 14
     30  4800							;AI_ClearEachRow2		   = 15
     31  4800
     32  4800					      MAC	phase
     33  4800					      lda	#{1}
     34  4800					      sta	aiPhase
     35  4800					      ENDM		;#
     36  4800
     37  4800
     38  4800		       00	   AiVectorLO .byte.b	<aiBeginSelectMovePhase	; 0
     39  4801		       00		      .byte.b	<aiSelectStartSquare	; 1
     40  4802		       00		      .byte.b	<aiStartSquareSelected	; 2
     41  4803		       00		      .byte.b	<aiDrawMoves	; 3
     42  4804		       00		      .byte.b	<aiShowMoveCaptures	; 4
     43  4805		       00		      .byte.b	<aiSlowFlash	; 5
     44  4806		       00		      .byte.b	<aiDrawTargetSquares	; 6
     45  4807		       00		      .byte.b	<aiSelectDestinationSquare	; 7
     46  4808		       00		      .byte.b	<aiQuiescent	; 9
     47  4809		       00		      .byte.b	<aiHalt	; 10
     48  480a		       00		      .byte.b	<aiReselectDebounce	; 11
     49  480b		       00		      .byte.b	<aiStartMoveGen	; 12
     50  480c		       00		      .byte.b	<aiStepMoveGen	; 13
     51  480d		       00		      .byte.b	<aiLookForCheck	; 14
     52  480e							;		      .byte <aiStartClearBoard		      ; 15
     53  480e							;		      .byte <aiClearEachRow		      ; 16
     54  480e
     55  480e		       00	   AiVectorHI .byte.b	>aiBeginSelectMovePhase	; 0
     56  480f		       00		      .byte.b	>aiSelectStartSquare	; 1
     57  4810		       00		      .byte.b	>aiStartSquareSelected	; 2
     58  4811		       00		      .byte.b	>aiDrawMoves	; 3
     59  4812		       00		      .byte.b	>aiShowMoveCaptures	; 4
     60  4813		       00		      .byte.b	>aiSlowFlash	; 5
     61  4814		       00		      .byte.b	>aiDrawTargetSquares	; 6
     62  4815		       00		      .byte.b	>aiSelectDestinationSquare	; 7
     63  4816		       00		      .byte.b	>aiQuiescent	; 9
     64  4817		       00		      .byte.b	>aiHalt	; 10
     65  4818		       00		      .byte.b	>aiReselectDebounce	; 11
     66  4819		       00		      .byte.b	>aiStartMoveGen	; 12
     67  481a		       00		      .byte.b	>aiStepMoveGen	; 13
     68  481b		       00		      .byte.b	>aiLookForCheck	; 14
     69  481c							;		      .byte >aiStartClearBoard		      ; 15
     70  481c							;		      .byte >aiClearEachRow		      ; 16
     71  481c
     72  481c		       00	   AiVectorBANK .byte.b	BANK_aiBeginSelectMovePhase	; 0
     73  481d		       00		      .byte.b	BANK_aiSelectStartSquare	; 1
     74  481e		       00		      .byte.b	BANK_aiStartSquareSelected	; 2
     75  481f		       00		      .byte.b	BANK_aiDrawMoves	; 3
     76  4820		       00		      .byte.b	BANK_aiShowMoveCaptures	; 4
     77  4821		       00		      .byte.b	BANK_aiSlowFlash	; 5
     78  4822		       00		      .byte.b	BANK_aiDrawTargetSquares	; 6
     79  4823		       00		      .byte.b	BANK_aiSelectDestinationSquare	; 7
     80  4824		       00		      .byte.b	BANK_aiQuiescent	; 9
     81  4825		       00		      .byte.b	BANK_aiHalt	; 10
     82  4826		       00		      .byte.b	BANK_aiReselectDebounce	; 11
     83  4827		       00		      .byte.b	BANK_aiStartMoveGen	; 12
     84  4828		       00		      .byte.b	BANK_aiStepMoveGen	; 13
     85  4829		       00		      .byte.b	BANK_aiLookForCheck	; 14
     86  482a							;		      .byte BANK_aiStartClearBoard	      ; 15
     87  482a							;		      .byte BANK_aiClearEachRow 	      ; 16
     88  482a
     89  482a							;---------------------------------------------------------------------------------------------------
     90  482a
      0  482a					      DEF	aiStartMoveGen
      1  482a				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  482a
      3  482a				   aiStartMoveGen
     92  482a					      SUBROUTINE
     93  482a
     94  482a							; To assist with castling, generate the moves for the opponent, giving us effectively
     95  482a							; a list of squares that are being attacked. The castling can't happen if the king is
     96  482a							; in check or if the squares it would have to move over are in check
     97  482a
     98  482a							; we don't need to worry about this if K has moved, or relevant R has moved or if
     99  482a							; the squares between are occupied. We can tell THAT by examining the movelist to see
    100  482a							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    101  482a
    102  482a		       a9 01		      lda	#OPPONENT
    103  482c		       85 9c		      sta	currentPly
    104  482e		       20 00 00 	      jsr	SAFE_InitialiseMoveGeneration
    105  4831
    106  4831		       a5 9e		      lda	sideToMove
    107  4833		       49 80		      eor	#128
    108  4835		       85 9e		      sta	sideToMove	; for movegen to know
    109  4837
      0  4837					      PHASE	AI_StepMoveGen
      1  4837		       a9 0c		      lda	#AI_StepMoveGen
      2  4839		       85 8f		      sta	aiPhase
    111  483b		       60		      rts
    112  483c
    113  483c
    114  483c							;---------------------------------------------------------------------------------------------------
    115  483c
      0  483c					      DEF	aiStepMoveGen
      1  483c				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  483c
      3  483c				   aiStepMoveGen
    117  483c					      SUBROUTINE
    118  483c
    119  483c							; Because we're (possibly) running with the screen on, processing time is very short and
    120  483c							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    121  483c							; this happens over multiple frames.
    122  483c
    123  483c		       20 00 00 	      jsr	SAFE_GenerateOneMove
    124  483f
    125  483f		       a5 9d		      lda	piecelistIndex
    126  4841		       29 0f		      and	#15
    127  4843		       c9 00		      cmp	#0
    128  4845		       d0 00		      bne	.wait	; still generating
    129  4847
    130  4847		       a5 9e		      lda	sideToMove
    131  4849		       49 80		      eor	#128
    132  484b		       85 9e		      sta	sideToMove
    133  484d
    134  484d
      0  484d					      PHASE	AI_LookForCheck
      1  484d		       a9 0d		      lda	#AI_LookForCheck
      2  484f		       85 8f		      sta	aiPhase
    136  4851		       60	   .wait      rts
    137  4852
    138  4852
    139  4852							;---------------------------------------------------------------------------------------------------
    140  4852
      0  4852					      DEF	aiLookForCheck
      1  4852				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  4852
      3  4852				   aiLookForCheck
    142  4852					      SUBROUTINE
    143  4852
    144  4852							; now we've finished generating the opponent moves
    145  4852							; See if the square our king is on is an attacked square (that is, it appears as a TO
    146  4852							; square in the opponent's movelist)
    147  4852
    148  4852		       20 00 00 	      jsr	debug
    149  4855
    150  4855		       a9 00		      lda	#PLAYER
    151  4857		       85 9c		      sta	currentPly
    152  4859		       20 00 00 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    153  485c		       20 00 00 	      jsr	SAFE_IsSquareUnderAttack
    154  485f		       90 00		      bcc	.exit
    155  4861
    156  4861							; king attack found!
    157  4861		       4c 61 f0    kk	      jmp	kk
    158  4864
    159  4864
      0  4864				   .exit      PHASE	AI_BeginSelectMovePhase
      1  4864		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  4866		       85 8f		      sta	aiPhase
    161  4868		       60		      rts
    162  4869
    163  4869							;---------------------------------------------------------------------------------------------------
    164  4869
      0  4869					      DEF	aiBeginSelectMovePhase
      1  4869				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  4869
      3  4869				   aiBeginSelectMovePhase
    166  4869					      SUBROUTINE
    167  4869
    168  4869		       a9 04		      lda	#4
    169  486b		       85 88		      sta	highlight_row
    170  486d		       85 89		      sta	highlight_row+1
    171  486f		       85 8a		      sta	highlight_col
    172  4871		       85 8b		      sta	highlight_col+1
    173  4873
    174  4873		       a9 00		      lda	#0
    175  4875		       85 8c		      sta	mdelay	;?
    176  4877		       85 96		      sta	aiFlashPhase	;?
    177  4879
    178  4879		       a9 ff		      lda	#-1
    179  487b		       85 91		      sta	aiFromSquare
    180  487d		       85 92		      sta	aiToSquare
    181  487f
      0  487f					      PHASE	AI_SelectStartSquare
      1  487f		       a9 01		      lda	#AI_SelectStartSquare
      2  4881		       85 8f		      sta	aiPhase
    183  4883		       60		      rts
    184  4884
    185  4884							;---------------------------------------------------------------------------------------------------
    186  4884
      0  4884					      DEF	aiSelectStartSquare
      1  4884				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  4884
      3  4884				   aiSelectStartSquare
    188  4884					      SUBROUTINE
    189  4884
    190  4884		       20 00 00 	      jsr	moveCursor
    191  4887		       20 00 00 	      jsr	SAFE_IsValidMoveFromSquare
    192  488a
    193  488a		       c6 8d		      dec	ccur	; pulse colour for valid squares
    194  488c		       20 00 00 	      jsr	setCursorColours
    195  488f
    196  488f		       c0 ff		      cpy	#-1
    197  4891		       f0 ff		      beq	.noButton	; illegal square
    198  4893
    199  4893		       a5 96		      lda	aiFlashPhase
    200  4895		       29 01		      and	#1
    201  4897		       d0 01		      bne	.noButton	; prevent EOR-error on flashing selected piece
    202  4899
    203  4899		       a5 4c		      lda	INPT4
    204  489b		       30 4c		      bmi	.noButton
      0  489d					      PHASE	AI_StartSquareSelected
      1  489d		       a9 02		      lda	#AI_StartSquareSelected
      2  489f		       85 8f		      sta	aiPhase
    206  48a1				   .noButton
    207  48a1
    208  48a1		       60		      rts
    209  48a2
    210  48a2							;---------------------------------------------------------------------------------------------------
    211  48a2
      0  48a2					      DEF	setCursorPriority
      1  48a2				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  48a2
      3  48a2				   setCursorPriority
    213  48a2					      SUBROUTINE
    214  48a2
    215  48a2		       98		      tya
    216  48a3		       48		      pha
    217  48a4
    218  48a4					      if	1
    219  48a4
    220  48a4		       a5 88		      lda	highlight_row
    221  48a6		       49 07		      eor	#7
    222  48a8		       0a		      asl
    223  48a9		       0a		      asl
    224  48aa		       0a		      asl
    225  48ab		       05 8a		      ora	highlight_col
    226  48ad		       aa		      tax
    227  48ae
    228  48ae		       20 00 00 	      jsr	SAFE_Get64toX12Board
    229  48b1		       a2 04		      ldx	#%100
    230  48b3		       c9 00		      cmp	#0
    231  48b5		       d0 00		      bne	.under
    232  48b7		       a2 00		      ldx	#0
    233  48b9		       86 4a	   .under     stx	CTRLPF	; UNDER
    234  48bb					      endif
    235  48bb
    236  48bb		       68		      pla
    237  48bc		       a8		      tay
    238  48bd		       60		      rts
    239  48be
    240  48be							;---------------------------------------------------------------------------------------------------
    241  48be
      0  48be					      DEF	setCursorColours
      1  48be				   BANK_setCursorColours SET	_CURRENT_BANK
      2  48be
      3  48be				   setCursorColours
    243  48be					      SUBROUTINE
    244  48be
    245  48be							; pass y=-1 if move is NOT in the movelist
    246  48be							; preserve y
    247  48be
    248  48be		       a9 44		      lda	#$44
    249  48c0
    250  48c0		       c0 ff		      cpy	#-1
    251  48c2		       f0 ff		      beq	.writeCursorCol	; NOT in the movelist
    252  48c4
    253  48c4		       a5 8d		      lda	ccur
    254  48c6		       4a		      lsr
    255  48c7		       4a		      lsr
    256  48c8		       4a		      lsr
    257  48c9		       29 04		      and	#4
    258  48cb		       49 ff		      eor	#$FF
    259  48cd		       38		      sec
    260  48ce		       69 a6		      adc	#COLOUR_LINE_1
    261  48d0
    262  48d0		       85 46	   .writeCursorCol sta	COLUP0
    263  48d2		       60		      rts
    264  48d3
    265  48d3
      0  48d3					      OPTIONAL_PAGEBREAK	"Joystik Tables", 32
     10  48d3					      LIST	ON
    267  48d3
    268  48d3							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
    269  48d3							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    270  48d3		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
    271  48e3		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
    272  48f3
    273  48f3							;---------------------------------------------------------------------------------------------------
    274  48f3
      0  48f3					      DEF	aiStartSquareSelected
      1  48f3				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  48f3
      3  48f3				   aiStartSquareSelected
    276  48f3					      SUBROUTINE
    277  48f3
    278  48f3							; Mark all the valid moves for the selected piece on the board
    279  48f3							; and then start pulsing the piece
    280  48f3							; AND start choosing for selection of TO square
    281  48f3
    282  48f3
    283  48f3
    284  48f3							; Iterate the movelist and for all from squares which = drawPieceNumber
    285  48f3							; then draw a BLANK at that square
    286  48f3							; do 1 by one, when none found then increment state
    287  48f3
    288  48f3		       a5 88		      lda	highlight_row
    289  48f5		       49 07		      eor	#7
    290  48f7		       0a		      asl
    291  48f8		       0a		      asl
    292  48f9		       0a		      asl
    293  48fa		       05 8a		      ora	highlight_col
    294  48fc		       85 80		      sta	drawPieceNumber
    295  48fe
    296  48fe		       a9 0a		      lda	#10
    297  4900		       85 90		      sta	aiFlashDelay
    298  4902		       a9 00		      lda	#0
    299  4904		       85 92		      sta	aiToSquare
    300  4906		       85 96		      sta	aiFlashPhase	; for debounce exit timing
    301  4908
    302  4908		       a9 ff		      lda	#-1
    303  490a		       85 95		      sta	aiMoveIndex
    304  490c
    305  490c		       a9 0f		      lda	#15
    306  490e		       85 8c		      sta	mdelay	; hold-down delay before moves are shown
    307  4910
      0  4910					      PHASE	AI_DrawMoves
      1  4910		       a9 03		      lda	#AI_DrawMoves
      2  4912		       85 8f		      sta	aiPhase
    309  4914		       60		      rts
    310  4915
    311  4915							;---------------------------------------------------------------------------------------------------
    312  4915
      0  4915					      DEF	aiDrawMoves
      1  4915				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  4915
      3  4915				   aiDrawMoves
    314  4915					      SUBROUTINE
    315  4915
    316  4915
    317  4915		       c6 8d		      dec	ccur
    318  4917		       20 be f0 	      jsr	setCursorColours
    319  491a
    320  491a		       c6 8c		      dec	mdelay
    321  491c		       d0 8c		      bne	.exit
    322  491e		       a9 01		      lda	#1
    323  4920		       85 8c		      sta	mdelay	; once triggered, runs always
    324  4922
    325  4922
    326  4922		       a5 95		      lda	aiMoveIndex
    327  4924		       10 95		      bpl	.valid
    328  4926
    329  4926		       20 00 00 	      jsr	SAFE_getMoveIndex
    330  4929		       85 95		      sta	aiMoveIndex
    331  492b
    332  492b		       20 00 00    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    333  492e		       a5 95		      lda	aiMoveIndex
    334  4930		       10 95		      bpl	.unsure	; still drawing in this phase
    335  4932
    336  4932		       a9 00		      lda	#CAP_SPEED
    337  4934		       85 8c		      sta	mdelay
    338  4936
    339  4936		       a9 00		      lda	#0
    340  4938		       85 96		      sta	aiFlashPhase	; controls odd/even exit of flashing
    341  493a
      0  493a					      PHASE	AI_ShowMoveCaptures
      1  493a		       a9 04		      lda	#AI_ShowMoveCaptures
      2  493c		       85 8f		      sta	aiPhase
    343  493e		       60		      rts
    344  493f
    345  493f				   .exit
    346  493f
    347  493f							; Initial piece selection has happened, but the button hasn't been released yet
    348  493f							; AND we're still in the waiting phase to see if the button was held long enough for move show
    349  493f
    350  493f		       a5 4c		      lda	INPT4
    351  4941		       10 4c		      bpl	.unsure	; button still pressed, so still unsure what to do
    352  4943
    353  4943							; Aha! Button released, so we know the selected piece and can start flashing it
    354  4943							; and allowing movement of the selector to a destination square...
    355  4943
    356  4943		       a9 00		      lda	#0*4
    357  4945		       85 8d		      sta	ccur	; bright green square for selection
    358  4947
      0  4947					      PHASE	AI_SelectDestinationSquare
      1  4947		       a9 07		      lda	#AI_SelectDestinationSquare
      2  4949		       85 8f		      sta	aiPhase
    360  494b
    361  494b		       60	   .unsure    rts
    362  494c
    363  494c							;---------------------------------------------------------------------------------------------------
    364  494c
      0  494c					      DEF	aiDrawTargetSquares
      1  494c				   BANK_aiDrawTargetSquares SET	_CURRENT_BANK
      2  494c
      3  494c				   aiDrawTargetSquares
    366  494c					      SUBROUTINE
    367  494c
    368  494c		       c6 8d		      dec	ccur
    369  494e		       20 be f0 	      jsr	setCursorColours
    370  4951
    371  4951		       c6 8c		      dec	mdelay
    372  4953		       d0 8c		      bne	.exit
    373  4955		       a9 01		      lda	#1
    374  4957		       85 8c		      sta	mdelay	; once triggered, runs always
    375  4959
    376  4959		       a5 95		      lda	aiMoveIndex
    377  495b		       10 95		      bpl	.valid
    378  495d
    379  495d		       20 00 00 	      jsr	SAFE_getMoveIndex
    380  4960		       85 95		      sta	aiMoveIndex
    381  4962
    382  4962		       20 00 00    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    383  4965		       a5 95		      lda	aiMoveIndex
    384  4967		       10 95		      bpl	.exit	; still drawing in this phase
    385  4969
      0  4969					      PHASE	AI_SelectStartSquare
      1  4969		       a9 01		      lda	#AI_SelectStartSquare
      2  496b		       85 8f		      sta	aiPhase
    387  496d
    388  496d		       60	   .exit      rts
    389  496e
    390  496e							;---------------------------------------------------------------------------------------------------
    391  496e
    392  496e		       00 08	   CAP_SPEED  =	8
    393  496e
      0  496e					      DEF	aiShowMoveCaptures
      1  496e				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  496e
      3  496e				   aiShowMoveCaptures
    395  496e					      SUBROUTINE
    396  496e
    397  496e							; draw/undraw ALL captured pieces
    398  496e							; we should do this an even number of times so that pieces don't disappEOR
    399  496e
    400  496e		       c6 8d		      dec	ccur
    401  4970		       20 be f0 	      jsr	setCursorColours
    402  4973
    403  4973		       c6 8c		      dec	mdelay	; flash speed UNVARYING despite draw happening
    404  4975
    405  4975		       a5 95		      lda	aiMoveIndex
    406  4977		       10 95		      bpl	.valid	; guaranteed -1 on 1st call
    407  4979		       20 00 00 	      jsr	SAFE_getMoveIndex
    408  497c		       85 95		      sta	aiMoveIndex
    409  497e
    410  497e				   .valid		;lda INTIM
    411  497e							;cmp #22
    412  497e							;bcc .exit		     ; try to prevent time overflows
    413  497e
    414  497e		       20 00 00 	      jsr	SAFE_showMoveCaptures
    415  4981		       a5 95		      lda	aiMoveIndex
    416  4983		       10 95		      bpl	.exit
    417  4985
    418  4985		       e6 96		      inc	aiFlashPhase
    419  4987
      0  4987					      PHASE	AI_SlowFlash
      1  4987		       a9 05		      lda	#AI_SlowFlash
      2  4989		       85 8f		      sta	aiPhase
    421  498b
    422  498b		       60	   .exit      rts
    423  498c
    424  498c							;---------------------------------------------------------------------------------------------------
    425  498c
      0  498c					      DEF	aiSlowFlash
      1  498c				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  498c
      3  498c				   aiSlowFlash
    427  498c					      SUBROUTINE
    428  498c
    429  498c							; Joystick button is held down, so we're displaying the available moves
    430  498c							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    431  498c
    432  498c		       c6 8d		      dec	ccur
    433  498e		       20 be f0 	      jsr	setCursorColours
    434  4991
    435  4991		       a5 96		      lda	aiFlashPhase
    436  4993		       29 01		      and	#1
    437  4995		       d0 01		      bne	.notEven	; only exit after even # EOR-draws
    438  4997
    439  4997		       a5 4c		      lda	INPT4
    440  4999		       30 4c		      bmi	.butpress	; exit on button release
    441  499b
    442  499b				   .notEven
    443  499b
    444  499b							; Wait for delay to expire then back and flash 'em again
    445  499b
    446  499b		       c6 8c		      dec	mdelay
    447  499d		       10 8c		      bpl	.slowWait
    448  499f
    449  499f		       a9 08		      lda	#CAP_SPEED
    450  49a1		       85 8c		      sta	mdelay
    451  49a3
      0  49a3					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  49a3		       a9 04		      lda	#AI_ShowMoveCaptures
      2  49a5		       85 8f		      sta	aiPhase
    453  49a7
    454  49a7		       60	   .slowWait  rts
    455  49a8
    456  49a8
    457  49a8		       a9 01	   .butpress  lda	#1
    458  49aa		       85 8c		      sta	mdelay
    459  49ac
      0  49ac					      PHASE	AI_DrawTargetSquares
      1  49ac		       a9 06		      lda	#AI_DrawTargetSquares
      2  49ae		       85 8f		      sta	aiPhase
    461  49b0		       60		      rts
    462  49b1
    463  49b1
    464  49b1							;---------------------------------------------------------------------------------------------------
    465  49b1
      0  49b1					      DEF	moveCursor
      1  49b1				   BANK_moveCursor SET	_CURRENT_BANK
      2  49b1
      3  49b1				   moveCursor
    467  49b1					      SUBROUTINE
    468  49b1
    469  49b1							; Part (a) move cursor around the board waiting for joystick press
    470  49b1
    471  49b1		       c6 8c		      dec	mdelay
    472  49b3		       10 8c		      bpl	.delaym
    473  49b5
    474  49b5		       ad 80 02 	      lda	SWCHA
    475  49b8		       4a		      lsr
    476  49b9		       4a		      lsr
    477  49ba		       4a		      lsr
    478  49bb		       4a		      lsr
    479  49bc		       a8		      tay
    480  49bd
    481  49bd		       18		      clc
    482  49be		       a5 88		      lda	highlight_row
    483  49c0		       79 e3 f0 	      adc	JoyMoveY,y
    484  49c3		       c9 08		      cmp	#$8
    485  49c5		       b0 08		      bcs	.abandon
    486  49c7		       85 88		      sta	highlight_row
    487  49c9				   .abandon
    488  49c9		       18		      clc
    489  49ca		       a5 8a		      lda	highlight_col
    490  49cc		       79 d3 f0 	      adc	JoyMoveX,y
    491  49cf		       c9 08		      cmp	#$8
    492  49d1		       b0 08		      bcs	.abandon2
    493  49d3		       85 8a		      sta	highlight_col
    494  49d5				   .abandon2
    495  49d5
    496  49d5		       a9 05		      lda	#5
    497  49d7		       85 8c		      sta	mdelay
    498  49d9
    499  49d9		       20 a2 f0 	      jsr	setCursorPriority
    500  49dc
    501  49dc
    502  49dc		       60	   .delaym    rts
    503  49dd
    504  49dd
    505  49dd							;---------------------------------------------------------------------------------------------------
    506  49dd
      0  49dd					      DEF	FlashPiece
      1  49dd				   BANK_FlashPiece SET	_CURRENT_BANK
      2  49dd
      3  49dd				   FlashPiece
    508  49dd					      SUBROUTINE
    509  49dd
    510  49dd							; Flash the selected piece
    511  49dd
    512  49dd		       c6 90		      dec	aiFlashDelay
    513  49df		       d0 90		      bne	.noFlashAi
    514  49e1
    515  49e1		       e6 96		      inc	aiFlashPhase
    516  49e3
    517  49e3		       a9 0a		      lda	#10
    518  49e5		       85 90		      sta	aiFlashDelay
    519  49e7
    520  49e7		       20 00 00 	      jsr	SAFE_CopySinglePiece
    521  49ea
    522  49ea		       60	   .noFlashAi rts
    523  49eb
    524  49eb							;---------------------------------------------------------------------------------------------------
    525  49eb
      0  49eb					      DEF	aiSelectDestinationSquare
      1  49eb				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  49eb
      3  49eb				   aiSelectDestinationSquare
    527  49eb					      SUBROUTINE
    528  49eb
    529  49eb							; Piece is selected and now we're looking for a button press on a destination square
    530  49eb							; we flash the piece on-and-off while we're doing that
    531  49eb
    532  49eb		       20 dd f1 	      jsr	FlashPiece
    533  49ee		       20 b1 f1 	      jsr	moveCursor
    534  49f1		       20 00 00 	      jsr	SAFE_IsValidMoveToSquare
    535  49f4		       20 be f0 	      jsr	setCursorColours
    536  49f7
    537  49f7							; y = valid square
    538  49f7
    539  49f7		       a5 96		      lda	aiFlashPhase
    540  49f9		       29 01		      and	#1
    541  49fb		       d0 01		      bne	.noButton	; prevent EOR-error on flashing selected piece
    542  49fd
    543  49fd		       a5 4c		      lda	INPT4
    544  49ff		       30 4c		      bmi	.noButton
    545  4a01
    546  4a01		       c0 ff		      cpy	#-1
    547  4a03		       d0 ff		      bne	.done	; valid square
    548  4a05
    549  4a05		       a5 92		      lda	aiToSquare
    550  4a07		       c5 91		      cmp	aiFromSquare	; is to==from?  that's a cancelllation
    551  4a09		       d0 91		      bne	.noButton	; no, so it's an INVALID square
    552  4a0b
      0  4a0b					      PHASE	AI_ReselectDebounce
      1  4a0b		       a9 0a		      lda	#AI_ReselectDebounce
      2  4a0d		       85 8f		      sta	aiPhase
    554  4a0f		       60		      rts
    555  4a10
      0  4a10				   .done      PHASE	AI_Quiescent	; destination selected!
      1  4a10		       a9 08		      lda	#AI_Quiescent
      2  4a12		       85 8f		      sta	aiPhase
    557  4a14
    558  4a14		       60	   .noButton  rts
    559  4a15
    560  4a15
    561  4a15							;---------------------------------------------------------------------------------------------------
    562  4a15
      0  4a15					      DEF	aiReselectDebounce
      1  4a15				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  4a15
      3  4a15				   aiReselectDebounce
    564  4a15					      SUBROUTINE
    565  4a15
    566  4a15							; We've just cancelled the move. Wait for the button to be released
    567  4a15							; and then go back to selecting a piece to move
    568  4a15
    569  4a15		       a5 4c		      lda	INPT4
    570  4a17		       10 4c		      bpl	.exit	; button still pressed, so wait
    571  4a19
      0  4a19					      PHASE	AI_SelectStartSquare
      1  4a19		       a9 01		      lda	#AI_SelectStartSquare
      2  4a1b		       85 8f		      sta	aiPhase
    573  4a1d		       60	   .exit      rts
    574  4a1e
    575  4a1e							;---------------------------------------------------------------------------------------------------
    576  4a1e
      0  4a1e					      DEF	aiQuiescent
      1  4a1e				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  4a1e
      3  4a1e				   aiQuiescent
    578  4a1e					      SUBROUTINE
    579  4a1e
    580  4a1e		       a9 ff		      lda	#-1
    581  4a20		       85 88		      sta	highlight_row	;??? piece move error when removed...???!
    582  4a22
    583  4a22		       a5 91		      lda	aiFromSquare
    584  4a24		       85 9f		      sta	fromSquare
    585  4a26		       a5 92		      lda	aiToSquare
    586  4a28		       85 a1		      sta	toSquare
    587  4a2a
    588  4a2a		       a5 93		      lda	aiFromSquareX12
    589  4a2c		       85 86		      sta	fromX12
    590  4a2e		       a5 94		      lda	aiToSquareX12
    591  4a30		       85 87		      sta	toX12
    592  4a32
    593  4a32		       20 00 00 	      jsr	SAFE_GetPiece
    594  4a35
    595  4a35		       a5 a6		      lda	aiPiece
    596  4a37		       85 a0		      sta	fromPiece
    597  4a39		       09 40		      ora	#FLAG_MOVED	; for K/R prevents usage in castling
    598  4a3b		       85 a2		      sta	toPiece
    599  4a3d
      0  4a3d					      PHASE	AI_Halt
      1  4a3d		       a9 09		      lda	#AI_Halt
      2  4a3f		       85 8f		      sta	aiPhase
    601  4a41		       60		      rts
    602  4a42
    603  4a42							;---------------------------------------------------------------------------------------------------
    604  4a42
      0  4a42					      DEF	aiHalt
      1  4a42				   BANK_aiHalt SET	_CURRENT_BANK
      2  4a42
      3  4a42				   aiHalt
    606  4a42					      SUBROUTINE
    607  4a42
    608  4a42							; Effectively halt at this point until the other state machine resets the AI state machine
    609  4a42
    610  4a42		       60		      rts
    611  4a43
    612  4a43							;---------------------------------------------------------------------------------------------------
    613  4a43
    614  4a43							;    align 256
      0  4a43					      DEF	PositionSprites
      1  4a43				   BANK_PositionSprites SET	_CURRENT_BANK
      2  4a43
      3  4a43				   PositionSprites
    616  4a43					      SUBROUTINE
    617  4a43
    618  4a43		       a4 8a		      ldy	highlight_col
    619  4a45
    620  4a45		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    621  4a47
    622  4a47		       b9 00 00 	      lda	colToPixel,y
    623  4a4a
    624  4a4a		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    625  4a4b		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    626  4a4d		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    627  4a4f
    628  4a4f		       a8		      tay
    629  4a50		       b9 00 00 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    630  4a53		       85 60		      sta	HMP0
    631  4a55		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    632  4a57
    633  4a57		       85 42		      sta	WSYNC
    634  4a59		       85 6a		      sta	HMOVE
    635  4a5b
    636  4a5b		       60		      rts
    637  4a5c
    638  4a5c							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    639  4a5c							; fine adjustment value. This table is on a page boundary to guarantee the processor
    640  4a5c							; will cross a page boundary and waste a cycle in order to be at the precise position
    641  4a5c							; for a RESP0,x write
    642  4a5c
    643  4a5c
    644  4b00		       00 00 00 00*	      align	256
    645  4b00
    646  4b00				   fineAdjustBegin
    647  4b00
    648  4b00		       70		      DC.B	%01110000	; Left 7
    649  4b01		       60		      DC.B	%01100000	; Left 6
    650  4b02		       50		      DC.B	%01010000	; Left 5
    651  4b03		       40		      DC.B	%01000000	; Left 4
    652  4b04		       30		      DC.B	%00110000	; Left 3
    653  4b05		       20		      DC.B	%00100000	; Left 2
    654  4b06		       10		      DC.B	%00010000	; Left 1
    655  4b07		       00		      DC.B	%00000000	; No movement.
    656  4b08		       f0		      DC.B	%11110000	; Right 1
    657  4b09		       e0		      DC.B	%11100000	; Right 2
    658  4b0a		       d0		      DC.B	%11010000	; Right 3
    659  4b0b		       c0		      DC.B	%11000000	; Right 4
    660  4b0c		       b0		      DC.B	%10110000	; Right 5
    661  4b0d		       a0		      DC.B	%10100000	; Right 6
    662  4b0e		       90		      DC.B	%10010000	; Right 7
    663  4b0f
    664  4b0f		       f2 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    665  4b0f
    666  4b0f
      0  4b0f					      OPTIONAL_PAGEBREAK	"colToPixel", 8
     10  4b0f					      LIST	ON
    668  4b0f		       00 14 28 3c*colToPixel .byte.b	0,20,40,60,80,100,120,140
    669  4b17
      0  4b17					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  4b17		       03 17	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $317 , FREE= $4e9
      2  4b17					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4b17				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4b17				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4b17				  -	      ERR
      6  4b17					      endif
    671  4b17
    672  4b17
    673  4b17							; EOF
------- FILE ./chess.asm
    357  4b17
------- FILE titleScreen.asm LEVEL 2 PASS 1
      0  4b17					      include	"titleScreen.asm"
      0  4b17					      NEWBANK	TITLESCREEN
      1  0000 ????				      SEG	TITLESCREEN
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   TITLESCREEN SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	TITLESCREEN
      2  5000
      3  5000				   OverscanTime2
      4  5000		       1a 1a		      .byte.b	26, 26
      5  5002		       20 20		      .byte.b	32, 32
      6  5004
      7  5004				   colvec
      8  5004		       00 00 00 00	      .word.w	colr_ntsc2, colr_pal
      9  5008
     10  5008
     11  5008		       32 32	   VBlankTime .byte.b	50,50
     12  500a
      0  500a					      DEF	TitleScreen
      1  500a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  500a
      3  500a				   TitleScreen
     14  500a
     15  500a							; Start of new frame
     16  500a
     17  500a							; Start of vertical blank processing
     18  500a
     19  500a				   TitleSequence
     20  500a
     21  500a		       a9 00		      lda	#%00000000
     22  500c		       85 4a		      sta	CTRLPF
     23  500e		       85 49		      sta	COLUBK
     24  5010
     25  5010		       a2 00		      ldx	#0	;Platform
     26  5012		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  5014		       85 a7		      sta	__colour_table
     28  5016		       a9 00		      lda	#>colr_ntsc2	;colvec+1,x
     29  5018		       85 a8		      sta	__colour_table+1
     30  501a
     31  501a							;		  sta rndHi
     32  501a							;		  sta rnd
     33  501a
     34  501a
     35  501a				  -	      if	0
     36  501a				  -	      lda	#0
     37  501a				  -	      sta	digit
     38  501a				  -	      lda	#$10
     39  501a				  -	      sta	digit+1
     40  501a				  -	      lda	#$20
     41  501a				  -	      sta	digit+2
     42  501a					      endif
     43  501a
     44  501a
     45  501a
     46  501a
      0  501a					      RESYNC
      1  501a
      2  501a		       a9 02		      lda	#%10
      3  501c		       85 41		      sta	VBLANK
      4  501e
      5  501e		       a2 08		      ldx	#8
      6  5020				   .loopResync
      0  5020					      VERTICAL_SYNC
      1  5020		       a9 0e		      lda	#%1110
      2  5022		       85 42	   .VSLP1     sta	WSYNC
      3  5024		       85 40		      sta	VSYNC
      4  5026		       4a		      lsr
      5  5027		       d0 f9		      bne	.VSLP1
      8  5029
      9  5029		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  502b		       a5 a5		      lda	Platform
     11  502d		       49 02		      eor	#PAL_50
     12  502f		       d0 02		      bne	.ntsc
     13  5031		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  5033				   .ntsc
     15  5033				   .loopWait
     16  5033		       85 42		      sta	WSYNC
     17  5035		       85 42		      sta	WSYNC
     18  5037		       88		      dey
     19  5038		       d0 f9		      bne	.loopWait
     20  503a		       ca		      dex
     21  503b		       d0 e3		      bne	.loopResync
     48  503d
     49  503d				   RestartFrame0
     50  503d
     51  503d				  -	      if	0
     52  503d				  -	      ldx	#2
     53  503d				  -rollcols   clc
     54  503d				  -	      lda	digit+2
     55  503d				  -	      adc	#$10
     56  503d				  -	      sta	digit+2
     57  503d				  -	      bcc	finxc
     58  503d				  -	      dex
     59  503d				  -	      bpl	rollcols
     60  503d				  -finxc
     61  503d					      endif
     62  503d
      0  503d					      DEF	RestartFrame
      1  503d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  503d
      3  503d				   RestartFrame
     64  503d		       a9 00		      LDA	#0
     65  503f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  5041		       85 42	   .loopVSync2 sta	WSYNC
     67  5043		       85 40		      sta	VSYNC
     68  5045		       4a		      lsr
     69  5046		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  5048
     71  5048							;------------------------------------------------------------------
     72  5048
     73  5048		       a6 a5		      ldx	Platform
     74  504a		       bc 08 f0 	      ldy	VBlankTime,x
     75  504d		       8c 96 02 	      sty	TIM64T
     76  5050
     77  5050
     78  5050				  -	      if	0
     79  5050				  -	      lda	SWCHB
     80  5050				  -	      rol
     81  5050				  -	      rol
     82  5050				  -	      rol
     83  5050				  -	      and	#%11
     84  5050				  -	      eor	#PAL
     85  5050				  -	      cmp	Platform
     86  5050				  -	      beq	platOK
     87  5050				  -	      sta	Platform
     88  5050				  -	      jmp	TitleSequence
     89  5050				  -platOK
     90  5050					      endif
     91  5050
     92  5050		       e6 81	   k2	      inc	rnd
     93  5052		       f0 fc		      beq	k2
     94  5054
     95  5054
     96  5054		       85 42	   VerticalBlank sta	WSYNC
     97  5056		       ad 84 02 	      lda	INTIM
     98  5059		       d0 f9		      bne	VerticalBlank
     99  505b		       85 41		      sta	VBLANK
    100  505d
    101  505d							;sta COLUBK
    102  505d
    103  505d							;------------------------------------------------------------------
    104  505d
    105  505d							; Do X scanlines of color-changing (our picture)
    106  505d
    107  505d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  505f		       a2 03	   SokoLogo   ldx	#3
    109  5061		       b1 a7	   triplet    lda	(__colour_table),y
    110  5063							;    eor digit-1,x
    111  5063		       85 42		      sta	WSYNC
    112  5065		       85 48		      sta	COLUPF	; 3
    113  5067
    114  5067		       b9 00 00 	      lda	COL_0,y	; 5
    115  506a		       85 4d		      sta	PF0	; 3   @11
    116  506c		       b9 00 00 	      lda	COL_1,y	; 5
    117  506f		       85 4e		      sta	PF1	; 3   @19
    118  5071		       b9 00 00 	      lda	COL_2,y	; 5
    119  5074		       85 4f		      sta	PF2	; 3   @27
    120  5076
    121  5076		       b9 00 00 	      lda	COL_3,y	; 5
    122  5079		       85 4d		      sta	PF0	; 3   @35
      0  507b					      SLEEP	2	; @37
      1  507b				   .CYCLES    SET	2
      2  507b
      3  507b				  -	      IF	.CYCLES < 2
      4  507b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  507b				  -	      ERR
      6  507b					      ENDIF
      7  507b
      8  507b				  -	      IF	.CYCLES & 1
      9  507b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  507b				  -	      nop	0
     11  507b				  -	      ELSE
     12  507b				  -	      bit	VSYNC
     13  507b				  -	      ENDIF
     14  507b				  -.CYCLES    SET	.CYCLES - 3
     15  507b					      ENDIF
     16  507b
     17  507b					      REPEAT	.CYCLES / 2
     18  507b		       ea		      nop
     19  507c					      REPEND
    124  507c		       b9 00 00 	      lda	COL_4,y	; 5
    125  507f		       85 4e		      sta	PF1	; 3   @45
      0  5081					      SLEEP	3	; @45
      1  5081				   .CYCLES    SET	3
      2  5081
      3  5081				  -	      IF	.CYCLES < 2
      4  5081				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  5081				  -	      ERR
      6  5081					      ENDIF
      7  5081
      8  5081					      IF	.CYCLES & 1
      9  5081					      IFNCONST	NO_ILLEGAL_OPCODES
     10  5081		       04 00		      nop	0
     11  5083				  -	      ELSE
     12  5083				  -	      bit	VSYNC
     13  5083					      ENDIF
     14  5083				   .CYCLES    SET	.CYCLES - 3
     15  5083					      ENDIF
     16  5083
     17  5083				  -	      REPEAT	.CYCLES / 2
     18  5083				  -	      nop
     19  5083					      REPEND
    127  5083		       b9 00 00 	      lda	COL_5,y	; 5
    128  5086		       85 4f		      sta	PF2	; 3
    129  5088
    130  5088		       88		      dey		; 2
    131  5089		       ca		      dex		; 2
    132  508a		       d0 d5		      bne	triplet	; 2(3)
    133  508c
    134  508c		       c0 ff		      cpy	#-1	; 2
    135  508e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  5090
    137  5090							;lda #0
    138  5090							;sta PF0
    139  5090							;sta PF1
    140  5090							;sta PF2
    141  5090
    142  5090		       a6 a5		      ldx	Platform
    143  5092		       bd 00 f0 	      lda	OverscanTime2,x
    144  5095		       8d 96 02 	      sta	TIM64T
    145  5098
    146  5098				  -	      if	0
    147  5098				  -	      sta	WSYNC
    148  5098				  -	      sta	WSYNC
    149  5098				  -	      sta	WSYNC
    150  5098				  -	      sta	WSYNC
    151  5098				  -	      sta	WSYNC
    152  5098				  -	      SLEEP	8
    153  5098				  -	      jsr	SokoScreen
    154  5098				  -
    155  5098				  -	      lda	#0
    156  5098				  -	      sta	BoardScrollX
    157  5098				  -	      sta	BoardScrollY
    158  5098					      endif
    159  5098
    160  5098							;		ldy #63
    161  5098							;bot2		 sta WSYNC
    162  5098							;		dey
    163  5098							;		bpl bot2
    164  5098
    165  5098							;--------------------------------------------------------------------------
    166  5098
    167  5098		       a9 00		      lda	#0
    168  509a		       85 4d		      sta	PF0
    169  509c		       85 4e		      sta	PF1
    170  509e		       85 4f		      sta	PF2
    171  50a0
    172  50a0
      0  50a0					      NEXT_RANDOM
      1  50a0		       a5 81		      lda	rnd
      2  50a2		       4a		      lsr
      3  50a3		       90 81		      bcc	.skipEOR
      4  50a5		       49 fe		      eor	#RND_EOR_VAL
      5  50a7		       85 81	   .skipEOR   sta	rnd
    174  50a9
    175  50a9							; D1 VBLANK turns off beam
    176  50a9							; It needs to be turned on 37 scanlines later
    177  50a9
    178  50a9				   oscan
    179  50a9		       ad 84 02 	      lda	INTIM
    180  50ac		       d0 fb		      bne	oscan
    181  50ae
    182  50ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  50b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  50b2
    185  50b2				  -	      if	0
    186  50b2				  -	      inc	rnd
    187  50b2				  -	      bne	rdd
    188  50b2				  -	      inc	rndHi
    189  50b2				  -rdd
    190  50b2				  -
    191  50b2				  -	      dec	digitick
    192  50b2				  -	      bpl	ret2
    193  50b2				  -	      lda	#40
    194  50b2				  -	      sta	digitick
    195  50b2				  -
    196  50b2				  -	      jsr	Random
    197  50b2				  -	      and	#3
    198  50b2				  -	      beq	ret2
    199  50b2				  -	      tax
    200  50b2				  -	      jsr	Random
    201  50b2				  -	      and	#$F0
    202  50b2				  -	      sta	digit-1,x
    203  50b2				  -	      jmp	RestartFrame0
    204  50b2				  -
    205  50b2				  -ret2
    206  50b2					      endif
    207  50b2
    208  50b2
    209  50b2		       a5 4c		      lda	INPT4
    210  50b4		       10 4c		      bpl	ret
    211  50b6
    212  50b6		       4c 3d f0 	      jmp	RestartFrame
    213  50b9
    214  50b9				   ret
    215  50b9		       60		      rts
    216  50ba
    217  50ba
    218  50ba
    219  50ba					      MAC	lumtable
    220  50ba							; {4} MIN LUM 1
    221  50ba							; {5} MIN LUM 2
    222  50ba							; {6} MIN LUM 3
    223  50ba
    224  50ba				   .LUM1      SET	{4}*256
    225  50ba				   .LUM2      SET	{5}*256
    226  50ba				   .LUM3      SET	{6}*256
    227  50ba
    228  50ba				   .STEP1     =	(256*({7}-{4}))/72
    229  50ba				   .STEP2     =	(256*({8}-{5}))/72
    230  50ba				   .STEP3     =	(256*({9}-{6}))/72
    231  50ba
    232  50ba					      REPEAT	72
    233  50ba					      .byte	{1}+(.LUM1/256)
    234  50ba					      .byte	{2}+(.LUM2/256)
    235  50ba					      .byte	{3}+(.LUM3/256)
    236  50ba
    237  50ba							;    ECHO {1}+(.LUM1/256)
    238  50ba							;    ECHO {2}+(.LUM1/256)
    239  50ba							;    ECHO {3}+(.LUM1/256)
    240  50ba
    241  50ba				   .LUM1      SET	.LUM1 + .STEP1
    242  50ba				   .LUM2      SET	.LUM2 + .STEP2
    243  50ba				   .LUM3      SET	.LUM3 + .STEP3
    244  50ba					      REPEND
    245  50ba					      ENDM		;{1}{2}{3} base colours
    246  50ba
    247  50ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  50ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  50ba
    250  5100		       00 00 00 00*	      align	256
    251  5100							;    ECHO "NTSC LUMS"
    252  5100				   colr_ntsc2
      0  5100					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  5100
      2  5100
      3  5100
      4  5100
      5  5100				   .LUM1      SET	$4*256
      6  5100				   .LUM2      SET	$6*256
      7  5100				   .LUM3      SET	$8*256
      8  5100
      9  5100		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  5100		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  5100		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  5100
     13  5100					      REPEAT	72
     14  5100		       44		      .byte.b	$40+(.LUM1/256)
     15  5101		       26		      .byte.b	$20+(.LUM2/256)
     16  5102		       98		      .byte.b	$90+(.LUM3/256)
     17  5103
     18  5103
     19  5103
     20  5103
     21  5103
     22  5103				   .LUM1      SET	.LUM1 + .STEP1
     23  5103				   .LUM2      SET	.LUM2 + .STEP2
     24  5103				   .LUM3      SET	.LUM3 + .STEP3
     13  5103					      REPEND
     14  5103		       44		      .byte.b	$40+(.LUM1/256)
     15  5104		       26		      .byte.b	$20+(.LUM2/256)
     16  5105		       98		      .byte.b	$90+(.LUM3/256)
     17  5106
     18  5106
     19  5106
     20  5106
     21  5106
     22  5106				   .LUM1      SET	.LUM1 + .STEP1
     23  5106				   .LUM2      SET	.LUM2 + .STEP2
     24  5106				   .LUM3      SET	.LUM3 + .STEP3
     13  5106					      REPEND
     14  5106		       44		      .byte.b	$40+(.LUM1/256)
     15  5107		       26		      .byte.b	$20+(.LUM2/256)
     16  5108		       98		      .byte.b	$90+(.LUM3/256)
     17  5109
     18  5109
     19  5109
     20  5109
     21  5109
     22  5109				   .LUM1      SET	.LUM1 + .STEP1
     23  5109				   .LUM2      SET	.LUM2 + .STEP2
     24  5109				   .LUM3      SET	.LUM3 + .STEP3
     13  5109					      REPEND
     14  5109		       44		      .byte.b	$40+(.LUM1/256)
     15  510a		       26		      .byte.b	$20+(.LUM2/256)
     16  510b		       98		      .byte.b	$90+(.LUM3/256)
     17  510c
     18  510c
     19  510c
     20  510c
     21  510c
     22  510c				   .LUM1      SET	.LUM1 + .STEP1
     23  510c				   .LUM2      SET	.LUM2 + .STEP2
     24  510c				   .LUM3      SET	.LUM3 + .STEP3
     13  510c					      REPEND
     14  510c		       44		      .byte.b	$40+(.LUM1/256)
     15  510d		       26		      .byte.b	$20+(.LUM2/256)
     16  510e		       98		      .byte.b	$90+(.LUM3/256)
     17  510f
     18  510f
     19  510f
     20  510f
     21  510f
     22  510f				   .LUM1      SET	.LUM1 + .STEP1
     23  510f				   .LUM2      SET	.LUM2 + .STEP2
     24  510f				   .LUM3      SET	.LUM3 + .STEP3
     13  510f					      REPEND
     14  510f		       44		      .byte.b	$40+(.LUM1/256)
     15  5110		       26		      .byte.b	$20+(.LUM2/256)
     16  5111		       98		      .byte.b	$90+(.LUM3/256)
     17  5112
     18  5112
     19  5112
     20  5112
     21  5112
     22  5112				   .LUM1      SET	.LUM1 + .STEP1
     23  5112				   .LUM2      SET	.LUM2 + .STEP2
     24  5112				   .LUM3      SET	.LUM3 + .STEP3
     13  5112					      REPEND
     14  5112		       44		      .byte.b	$40+(.LUM1/256)
     15  5113		       26		      .byte.b	$20+(.LUM2/256)
     16  5114		       98		      .byte.b	$90+(.LUM3/256)
     17  5115
     18  5115
     19  5115
     20  5115
     21  5115
     22  5115				   .LUM1      SET	.LUM1 + .STEP1
     23  5115				   .LUM2      SET	.LUM2 + .STEP2
     24  5115				   .LUM3      SET	.LUM3 + .STEP3
     13  5115					      REPEND
     14  5115		       44		      .byte.b	$40+(.LUM1/256)
     15  5116		       26		      .byte.b	$20+(.LUM2/256)
     16  5117		       98		      .byte.b	$90+(.LUM3/256)
     17  5118
     18  5118
     19  5118
     20  5118
     21  5118
     22  5118				   .LUM1      SET	.LUM1 + .STEP1
     23  5118				   .LUM2      SET	.LUM2 + .STEP2
     24  5118				   .LUM3      SET	.LUM3 + .STEP3
     13  5118					      REPEND
     14  5118		       44		      .byte.b	$40+(.LUM1/256)
     15  5119		       26		      .byte.b	$20+(.LUM2/256)
     16  511a		       98		      .byte.b	$90+(.LUM3/256)
     17  511b
     18  511b
     19  511b
     20  511b
     21  511b
     22  511b				   .LUM1      SET	.LUM1 + .STEP1
     23  511b				   .LUM2      SET	.LUM2 + .STEP2
     24  511b				   .LUM3      SET	.LUM3 + .STEP3
     13  511b					      REPEND
     14  511b		       44		      .byte.b	$40+(.LUM1/256)
     15  511c		       26		      .byte.b	$20+(.LUM2/256)
     16  511d		       98		      .byte.b	$90+(.LUM3/256)
     17  511e
     18  511e
     19  511e
     20  511e
     21  511e
     22  511e				   .LUM1      SET	.LUM1 + .STEP1
     23  511e				   .LUM2      SET	.LUM2 + .STEP2
     24  511e				   .LUM3      SET	.LUM3 + .STEP3
     13  511e					      REPEND
     14  511e		       44		      .byte.b	$40+(.LUM1/256)
     15  511f		       26		      .byte.b	$20+(.LUM2/256)
     16  5120		       98		      .byte.b	$90+(.LUM3/256)
     17  5121
     18  5121
     19  5121
     20  5121
     21  5121
     22  5121				   .LUM1      SET	.LUM1 + .STEP1
     23  5121				   .LUM2      SET	.LUM2 + .STEP2
     24  5121				   .LUM3      SET	.LUM3 + .STEP3
     13  5121					      REPEND
     14  5121		       44		      .byte.b	$40+(.LUM1/256)
     15  5122		       26		      .byte.b	$20+(.LUM2/256)
     16  5123		       98		      .byte.b	$90+(.LUM3/256)
     17  5124
     18  5124
     19  5124
     20  5124
     21  5124
     22  5124				   .LUM1      SET	.LUM1 + .STEP1
     23  5124				   .LUM2      SET	.LUM2 + .STEP2
     24  5124				   .LUM3      SET	.LUM3 + .STEP3
     13  5124					      REPEND
     14  5124		       44		      .byte.b	$40+(.LUM1/256)
     15  5125		       26		      .byte.b	$20+(.LUM2/256)
     16  5126		       98		      .byte.b	$90+(.LUM3/256)
     17  5127
     18  5127
     19  5127
     20  5127
     21  5127
     22  5127				   .LUM1      SET	.LUM1 + .STEP1
     23  5127				   .LUM2      SET	.LUM2 + .STEP2
     24  5127				   .LUM3      SET	.LUM3 + .STEP3
     13  5127					      REPEND
     14  5127		       44		      .byte.b	$40+(.LUM1/256)
     15  5128		       26		      .byte.b	$20+(.LUM2/256)
     16  5129		       98		      .byte.b	$90+(.LUM3/256)
     17  512a
     18  512a
     19  512a
     20  512a
     21  512a
     22  512a				   .LUM1      SET	.LUM1 + .STEP1
     23  512a				   .LUM2      SET	.LUM2 + .STEP2
     24  512a				   .LUM3      SET	.LUM3 + .STEP3
     13  512a					      REPEND
     14  512a		       44		      .byte.b	$40+(.LUM1/256)
     15  512b		       26		      .byte.b	$20+(.LUM2/256)
     16  512c		       98		      .byte.b	$90+(.LUM3/256)
     17  512d
     18  512d
     19  512d
     20  512d
     21  512d
     22  512d				   .LUM1      SET	.LUM1 + .STEP1
     23  512d				   .LUM2      SET	.LUM2 + .STEP2
     24  512d				   .LUM3      SET	.LUM3 + .STEP3
     13  512d					      REPEND
     14  512d		       44		      .byte.b	$40+(.LUM1/256)
     15  512e		       26		      .byte.b	$20+(.LUM2/256)
     16  512f		       98		      .byte.b	$90+(.LUM3/256)
     17  5130
     18  5130
     19  5130
     20  5130
     21  5130
     22  5130				   .LUM1      SET	.LUM1 + .STEP1
     23  5130				   .LUM2      SET	.LUM2 + .STEP2
     24  5130				   .LUM3      SET	.LUM3 + .STEP3
     13  5130					      REPEND
     14  5130		       44		      .byte.b	$40+(.LUM1/256)
     15  5131		       26		      .byte.b	$20+(.LUM2/256)
     16  5132		       98		      .byte.b	$90+(.LUM3/256)
     17  5133
     18  5133
     19  5133
     20  5133
     21  5133
     22  5133				   .LUM1      SET	.LUM1 + .STEP1
     23  5133				   .LUM2      SET	.LUM2 + .STEP2
     24  5133				   .LUM3      SET	.LUM3 + .STEP3
     13  5133					      REPEND
     14  5133		       44		      .byte.b	$40+(.LUM1/256)
     15  5134		       26		      .byte.b	$20+(.LUM2/256)
     16  5135		       98		      .byte.b	$90+(.LUM3/256)
     17  5136
     18  5136
     19  5136
     20  5136
     21  5136
     22  5136				   .LUM1      SET	.LUM1 + .STEP1
     23  5136				   .LUM2      SET	.LUM2 + .STEP2
     24  5136				   .LUM3      SET	.LUM3 + .STEP3
     13  5136					      REPEND
     14  5136		       44		      .byte.b	$40+(.LUM1/256)
     15  5137		       26		      .byte.b	$20+(.LUM2/256)
     16  5138		       98		      .byte.b	$90+(.LUM3/256)
     17  5139
     18  5139
     19  5139
     20  5139
     21  5139
     22  5139				   .LUM1      SET	.LUM1 + .STEP1
     23  5139				   .LUM2      SET	.LUM2 + .STEP2
     24  5139				   .LUM3      SET	.LUM3 + .STEP3
     13  5139					      REPEND
     14  5139		       44		      .byte.b	$40+(.LUM1/256)
     15  513a		       26		      .byte.b	$20+(.LUM2/256)
     16  513b		       98		      .byte.b	$90+(.LUM3/256)
     17  513c
     18  513c
     19  513c
     20  513c
     21  513c
     22  513c				   .LUM1      SET	.LUM1 + .STEP1
     23  513c				   .LUM2      SET	.LUM2 + .STEP2
     24  513c				   .LUM3      SET	.LUM3 + .STEP3
     13  513c					      REPEND
     14  513c		       44		      .byte.b	$40+(.LUM1/256)
     15  513d		       26		      .byte.b	$20+(.LUM2/256)
     16  513e		       98		      .byte.b	$90+(.LUM3/256)
     17  513f
     18  513f
     19  513f
     20  513f
     21  513f
     22  513f				   .LUM1      SET	.LUM1 + .STEP1
     23  513f				   .LUM2      SET	.LUM2 + .STEP2
     24  513f				   .LUM3      SET	.LUM3 + .STEP3
     13  513f					      REPEND
     14  513f		       44		      .byte.b	$40+(.LUM1/256)
     15  5140		       26		      .byte.b	$20+(.LUM2/256)
     16  5141		       98		      .byte.b	$90+(.LUM3/256)
     17  5142
     18  5142
     19  5142
     20  5142
     21  5142
     22  5142				   .LUM1      SET	.LUM1 + .STEP1
     23  5142				   .LUM2      SET	.LUM2 + .STEP2
     24  5142				   .LUM3      SET	.LUM3 + .STEP3
     13  5142					      REPEND
     14  5142		       44		      .byte.b	$40+(.LUM1/256)
     15  5143		       26		      .byte.b	$20+(.LUM2/256)
     16  5144		       98		      .byte.b	$90+(.LUM3/256)
     17  5145
     18  5145
     19  5145
     20  5145
     21  5145
     22  5145				   .LUM1      SET	.LUM1 + .STEP1
     23  5145				   .LUM2      SET	.LUM2 + .STEP2
     24  5145				   .LUM3      SET	.LUM3 + .STEP3
     13  5145					      REPEND
     14  5145		       44		      .byte.b	$40+(.LUM1/256)
     15  5146		       26		      .byte.b	$20+(.LUM2/256)
     16  5147		       98		      .byte.b	$90+(.LUM3/256)
     17  5148
     18  5148
     19  5148
     20  5148
     21  5148
     22  5148				   .LUM1      SET	.LUM1 + .STEP1
     23  5148				   .LUM2      SET	.LUM2 + .STEP2
     24  5148				   .LUM3      SET	.LUM3 + .STEP3
     13  5148					      REPEND
     14  5148		       44		      .byte.b	$40+(.LUM1/256)
     15  5149		       26		      .byte.b	$20+(.LUM2/256)
     16  514a		       98		      .byte.b	$90+(.LUM3/256)
     17  514b
     18  514b
     19  514b
     20  514b
     21  514b
     22  514b				   .LUM1      SET	.LUM1 + .STEP1
     23  514b				   .LUM2      SET	.LUM2 + .STEP2
     24  514b				   .LUM3      SET	.LUM3 + .STEP3
     13  514b					      REPEND
     14  514b		       44		      .byte.b	$40+(.LUM1/256)
     15  514c		       26		      .byte.b	$20+(.LUM2/256)
     16  514d		       98		      .byte.b	$90+(.LUM3/256)
     17  514e
     18  514e
     19  514e
     20  514e
     21  514e
     22  514e				   .LUM1      SET	.LUM1 + .STEP1
     23  514e				   .LUM2      SET	.LUM2 + .STEP2
     24  514e				   .LUM3      SET	.LUM3 + .STEP3
     13  514e					      REPEND
     14  514e		       44		      .byte.b	$40+(.LUM1/256)
     15  514f		       26		      .byte.b	$20+(.LUM2/256)
     16  5150		       98		      .byte.b	$90+(.LUM3/256)
     17  5151
     18  5151
     19  5151
     20  5151
     21  5151
     22  5151				   .LUM1      SET	.LUM1 + .STEP1
     23  5151				   .LUM2      SET	.LUM2 + .STEP2
     24  5151				   .LUM3      SET	.LUM3 + .STEP3
     13  5151					      REPEND
     14  5151		       44		      .byte.b	$40+(.LUM1/256)
     15  5152		       26		      .byte.b	$20+(.LUM2/256)
     16  5153		       98		      .byte.b	$90+(.LUM3/256)
     17  5154
     18  5154
     19  5154
     20  5154
     21  5154
     22  5154				   .LUM1      SET	.LUM1 + .STEP1
     23  5154				   .LUM2      SET	.LUM2 + .STEP2
     24  5154				   .LUM3      SET	.LUM3 + .STEP3
     13  5154					      REPEND
     14  5154		       44		      .byte.b	$40+(.LUM1/256)
     15  5155		       26		      .byte.b	$20+(.LUM2/256)
     16  5156		       98		      .byte.b	$90+(.LUM3/256)
     17  5157
     18  5157
     19  5157
     20  5157
     21  5157
     22  5157				   .LUM1      SET	.LUM1 + .STEP1
     23  5157				   .LUM2      SET	.LUM2 + .STEP2
     24  5157				   .LUM3      SET	.LUM3 + .STEP3
     13  5157					      REPEND
     14  5157		       44		      .byte.b	$40+(.LUM1/256)
     15  5158		       26		      .byte.b	$20+(.LUM2/256)
     16  5159		       98		      .byte.b	$90+(.LUM3/256)
     17  515a
     18  515a
     19  515a
     20  515a
     21  515a
     22  515a				   .LUM1      SET	.LUM1 + .STEP1
     23  515a				   .LUM2      SET	.LUM2 + .STEP2
     24  515a				   .LUM3      SET	.LUM3 + .STEP3
     13  515a					      REPEND
     14  515a		       44		      .byte.b	$40+(.LUM1/256)
     15  515b		       26		      .byte.b	$20+(.LUM2/256)
     16  515c		       98		      .byte.b	$90+(.LUM3/256)
     17  515d
     18  515d
     19  515d
     20  515d
     21  515d
     22  515d				   .LUM1      SET	.LUM1 + .STEP1
     23  515d				   .LUM2      SET	.LUM2 + .STEP2
     24  515d				   .LUM3      SET	.LUM3 + .STEP3
     13  515d					      REPEND
     14  515d		       44		      .byte.b	$40+(.LUM1/256)
     15  515e		       26		      .byte.b	$20+(.LUM2/256)
     16  515f		       98		      .byte.b	$90+(.LUM3/256)
     17  5160
     18  5160
     19  5160
     20  5160
     21  5160
     22  5160				   .LUM1      SET	.LUM1 + .STEP1
     23  5160				   .LUM2      SET	.LUM2 + .STEP2
     24  5160				   .LUM3      SET	.LUM3 + .STEP3
     13  5160					      REPEND
     14  5160		       44		      .byte.b	$40+(.LUM1/256)
     15  5161		       26		      .byte.b	$20+(.LUM2/256)
     16  5162		       98		      .byte.b	$90+(.LUM3/256)
     17  5163
     18  5163
     19  5163
     20  5163
     21  5163
     22  5163				   .LUM1      SET	.LUM1 + .STEP1
     23  5163				   .LUM2      SET	.LUM2 + .STEP2
     24  5163				   .LUM3      SET	.LUM3 + .STEP3
     13  5163					      REPEND
     14  5163		       44		      .byte.b	$40+(.LUM1/256)
     15  5164		       26		      .byte.b	$20+(.LUM2/256)
     16  5165		       98		      .byte.b	$90+(.LUM3/256)
     17  5166
     18  5166
     19  5166
     20  5166
     21  5166
     22  5166				   .LUM1      SET	.LUM1 + .STEP1
     23  5166				   .LUM2      SET	.LUM2 + .STEP2
     24  5166				   .LUM3      SET	.LUM3 + .STEP3
     13  5166					      REPEND
     14  5166		       44		      .byte.b	$40+(.LUM1/256)
     15  5167		       26		      .byte.b	$20+(.LUM2/256)
     16  5168		       98		      .byte.b	$90+(.LUM3/256)
     17  5169
     18  5169
     19  5169
     20  5169
     21  5169
     22  5169				   .LUM1      SET	.LUM1 + .STEP1
     23  5169				   .LUM2      SET	.LUM2 + .STEP2
     24  5169				   .LUM3      SET	.LUM3 + .STEP3
     13  5169					      REPEND
     14  5169		       44		      .byte.b	$40+(.LUM1/256)
     15  516a		       26		      .byte.b	$20+(.LUM2/256)
     16  516b		       98		      .byte.b	$90+(.LUM3/256)
     17  516c
     18  516c
     19  516c
     20  516c
     21  516c
     22  516c				   .LUM1      SET	.LUM1 + .STEP1
     23  516c				   .LUM2      SET	.LUM2 + .STEP2
     24  516c				   .LUM3      SET	.LUM3 + .STEP3
     13  516c					      REPEND
     14  516c		       44		      .byte.b	$40+(.LUM1/256)
     15  516d		       26		      .byte.b	$20+(.LUM2/256)
     16  516e		       98		      .byte.b	$90+(.LUM3/256)
     17  516f
     18  516f
     19  516f
     20  516f
     21  516f
     22  516f				   .LUM1      SET	.LUM1 + .STEP1
     23  516f				   .LUM2      SET	.LUM2 + .STEP2
     24  516f				   .LUM3      SET	.LUM3 + .STEP3
     13  516f					      REPEND
     14  516f		       44		      .byte.b	$40+(.LUM1/256)
     15  5170		       26		      .byte.b	$20+(.LUM2/256)
     16  5171		       98		      .byte.b	$90+(.LUM3/256)
     17  5172
     18  5172
     19  5172
     20  5172
     21  5172
     22  5172				   .LUM1      SET	.LUM1 + .STEP1
     23  5172				   .LUM2      SET	.LUM2 + .STEP2
     24  5172				   .LUM3      SET	.LUM3 + .STEP3
     13  5172					      REPEND
     14  5172		       44		      .byte.b	$40+(.LUM1/256)
     15  5173		       26		      .byte.b	$20+(.LUM2/256)
     16  5174		       98		      .byte.b	$90+(.LUM3/256)
     17  5175
     18  5175
     19  5175
     20  5175
     21  5175
     22  5175				   .LUM1      SET	.LUM1 + .STEP1
     23  5175				   .LUM2      SET	.LUM2 + .STEP2
     24  5175				   .LUM3      SET	.LUM3 + .STEP3
     13  5175					      REPEND
     14  5175		       44		      .byte.b	$40+(.LUM1/256)
     15  5176		       26		      .byte.b	$20+(.LUM2/256)
     16  5177		       98		      .byte.b	$90+(.LUM3/256)
     17  5178
     18  5178
     19  5178
     20  5178
     21  5178
     22  5178				   .LUM1      SET	.LUM1 + .STEP1
     23  5178				   .LUM2      SET	.LUM2 + .STEP2
     24  5178				   .LUM3      SET	.LUM3 + .STEP3
     13  5178					      REPEND
     14  5178		       44		      .byte.b	$40+(.LUM1/256)
     15  5179		       26		      .byte.b	$20+(.LUM2/256)
     16  517a		       98		      .byte.b	$90+(.LUM3/256)
     17  517b
     18  517b
     19  517b
     20  517b
     21  517b
     22  517b				   .LUM1      SET	.LUM1 + .STEP1
     23  517b				   .LUM2      SET	.LUM2 + .STEP2
     24  517b				   .LUM3      SET	.LUM3 + .STEP3
     13  517b					      REPEND
     14  517b		       44		      .byte.b	$40+(.LUM1/256)
     15  517c		       26		      .byte.b	$20+(.LUM2/256)
     16  517d		       98		      .byte.b	$90+(.LUM3/256)
     17  517e
     18  517e
     19  517e
     20  517e
     21  517e
     22  517e				   .LUM1      SET	.LUM1 + .STEP1
     23  517e				   .LUM2      SET	.LUM2 + .STEP2
     24  517e				   .LUM3      SET	.LUM3 + .STEP3
     13  517e					      REPEND
     14  517e		       44		      .byte.b	$40+(.LUM1/256)
     15  517f		       26		      .byte.b	$20+(.LUM2/256)
     16  5180		       98		      .byte.b	$90+(.LUM3/256)
     17  5181
     18  5181
     19  5181
     20  5181
     21  5181
     22  5181				   .LUM1      SET	.LUM1 + .STEP1
     23  5181				   .LUM2      SET	.LUM2 + .STEP2
     24  5181				   .LUM3      SET	.LUM3 + .STEP3
     13  5181					      REPEND
     14  5181		       44		      .byte.b	$40+(.LUM1/256)
     15  5182		       26		      .byte.b	$20+(.LUM2/256)
     16  5183		       98		      .byte.b	$90+(.LUM3/256)
     17  5184
     18  5184
     19  5184
     20  5184
     21  5184
     22  5184				   .LUM1      SET	.LUM1 + .STEP1
     23  5184				   .LUM2      SET	.LUM2 + .STEP2
     24  5184				   .LUM3      SET	.LUM3 + .STEP3
     13  5184					      REPEND
     14  5184		       44		      .byte.b	$40+(.LUM1/256)
     15  5185		       26		      .byte.b	$20+(.LUM2/256)
     16  5186		       98		      .byte.b	$90+(.LUM3/256)
     17  5187
     18  5187
     19  5187
     20  5187
     21  5187
     22  5187				   .LUM1      SET	.LUM1 + .STEP1
     23  5187				   .LUM2      SET	.LUM2 + .STEP2
     24  5187				   .LUM3      SET	.LUM3 + .STEP3
     13  5187					      REPEND
     14  5187		       44		      .byte.b	$40+(.LUM1/256)
     15  5188		       26		      .byte.b	$20+(.LUM2/256)
     16  5189		       98		      .byte.b	$90+(.LUM3/256)
     17  518a
     18  518a
     19  518a
     20  518a
     21  518a
     22  518a				   .LUM1      SET	.LUM1 + .STEP1
     23  518a				   .LUM2      SET	.LUM2 + .STEP2
     24  518a				   .LUM3      SET	.LUM3 + .STEP3
     13  518a					      REPEND
     14  518a		       44		      .byte.b	$40+(.LUM1/256)
     15  518b		       26		      .byte.b	$20+(.LUM2/256)
     16  518c		       98		      .byte.b	$90+(.LUM3/256)
     17  518d
     18  518d
     19  518d
     20  518d
     21  518d
     22  518d				   .LUM1      SET	.LUM1 + .STEP1
     23  518d				   .LUM2      SET	.LUM2 + .STEP2
     24  518d				   .LUM3      SET	.LUM3 + .STEP3
     13  518d					      REPEND
     14  518d		       44		      .byte.b	$40+(.LUM1/256)
     15  518e		       26		      .byte.b	$20+(.LUM2/256)
     16  518f		       98		      .byte.b	$90+(.LUM3/256)
     17  5190
     18  5190
     19  5190
     20  5190
     21  5190
     22  5190				   .LUM1      SET	.LUM1 + .STEP1
     23  5190				   .LUM2      SET	.LUM2 + .STEP2
     24  5190				   .LUM3      SET	.LUM3 + .STEP3
     13  5190					      REPEND
     14  5190		       44		      .byte.b	$40+(.LUM1/256)
     15  5191		       26		      .byte.b	$20+(.LUM2/256)
     16  5192		       98		      .byte.b	$90+(.LUM3/256)
     17  5193
     18  5193
     19  5193
     20  5193
     21  5193
     22  5193				   .LUM1      SET	.LUM1 + .STEP1
     23  5193				   .LUM2      SET	.LUM2 + .STEP2
     24  5193				   .LUM3      SET	.LUM3 + .STEP3
     13  5193					      REPEND
     14  5193		       44		      .byte.b	$40+(.LUM1/256)
     15  5194		       26		      .byte.b	$20+(.LUM2/256)
     16  5195		       98		      .byte.b	$90+(.LUM3/256)
     17  5196
     18  5196
     19  5196
     20  5196
     21  5196
     22  5196				   .LUM1      SET	.LUM1 + .STEP1
     23  5196				   .LUM2      SET	.LUM2 + .STEP2
     24  5196				   .LUM3      SET	.LUM3 + .STEP3
     13  5196					      REPEND
     14  5196		       44		      .byte.b	$40+(.LUM1/256)
     15  5197		       26		      .byte.b	$20+(.LUM2/256)
     16  5198		       98		      .byte.b	$90+(.LUM3/256)
     17  5199
     18  5199
     19  5199
     20  5199
     21  5199
     22  5199				   .LUM1      SET	.LUM1 + .STEP1
     23  5199				   .LUM2      SET	.LUM2 + .STEP2
     24  5199				   .LUM3      SET	.LUM3 + .STEP3
     13  5199					      REPEND
     14  5199		       44		      .byte.b	$40+(.LUM1/256)
     15  519a		       26		      .byte.b	$20+(.LUM2/256)
     16  519b		       98		      .byte.b	$90+(.LUM3/256)
     17  519c
     18  519c
     19  519c
     20  519c
     21  519c
     22  519c				   .LUM1      SET	.LUM1 + .STEP1
     23  519c				   .LUM2      SET	.LUM2 + .STEP2
     24  519c				   .LUM3      SET	.LUM3 + .STEP3
     13  519c					      REPEND
     14  519c		       44		      .byte.b	$40+(.LUM1/256)
     15  519d		       26		      .byte.b	$20+(.LUM2/256)
     16  519e		       98		      .byte.b	$90+(.LUM3/256)
     17  519f
     18  519f
     19  519f
     20  519f
     21  519f
     22  519f				   .LUM1      SET	.LUM1 + .STEP1
     23  519f				   .LUM2      SET	.LUM2 + .STEP2
     24  519f				   .LUM3      SET	.LUM3 + .STEP3
     13  519f					      REPEND
     14  519f		       44		      .byte.b	$40+(.LUM1/256)
     15  51a0		       26		      .byte.b	$20+(.LUM2/256)
     16  51a1		       98		      .byte.b	$90+(.LUM3/256)
     17  51a2
     18  51a2
     19  51a2
     20  51a2
     21  51a2
     22  51a2				   .LUM1      SET	.LUM1 + .STEP1
     23  51a2				   .LUM2      SET	.LUM2 + .STEP2
     24  51a2				   .LUM3      SET	.LUM3 + .STEP3
     13  51a2					      REPEND
     14  51a2		       44		      .byte.b	$40+(.LUM1/256)
     15  51a3		       26		      .byte.b	$20+(.LUM2/256)
     16  51a4		       98		      .byte.b	$90+(.LUM3/256)
     17  51a5
     18  51a5
     19  51a5
     20  51a5
     21  51a5
     22  51a5				   .LUM1      SET	.LUM1 + .STEP1
     23  51a5				   .LUM2      SET	.LUM2 + .STEP2
     24  51a5				   .LUM3      SET	.LUM3 + .STEP3
     13  51a5					      REPEND
     14  51a5		       44		      .byte.b	$40+(.LUM1/256)
     15  51a6		       26		      .byte.b	$20+(.LUM2/256)
     16  51a7		       98		      .byte.b	$90+(.LUM3/256)
     17  51a8
     18  51a8
     19  51a8
     20  51a8
     21  51a8
     22  51a8				   .LUM1      SET	.LUM1 + .STEP1
     23  51a8				   .LUM2      SET	.LUM2 + .STEP2
     24  51a8				   .LUM3      SET	.LUM3 + .STEP3
     13  51a8					      REPEND
     14  51a8		       44		      .byte.b	$40+(.LUM1/256)
     15  51a9		       26		      .byte.b	$20+(.LUM2/256)
     16  51aa		       98		      .byte.b	$90+(.LUM3/256)
     17  51ab
     18  51ab
     19  51ab
     20  51ab
     21  51ab
     22  51ab				   .LUM1      SET	.LUM1 + .STEP1
     23  51ab				   .LUM2      SET	.LUM2 + .STEP2
     24  51ab				   .LUM3      SET	.LUM3 + .STEP3
     13  51ab					      REPEND
     14  51ab		       44		      .byte.b	$40+(.LUM1/256)
     15  51ac		       26		      .byte.b	$20+(.LUM2/256)
     16  51ad		       98		      .byte.b	$90+(.LUM3/256)
     17  51ae
     18  51ae
     19  51ae
     20  51ae
     21  51ae
     22  51ae				   .LUM1      SET	.LUM1 + .STEP1
     23  51ae				   .LUM2      SET	.LUM2 + .STEP2
     24  51ae				   .LUM3      SET	.LUM3 + .STEP3
     13  51ae					      REPEND
     14  51ae		       44		      .byte.b	$40+(.LUM1/256)
     15  51af		       26		      .byte.b	$20+(.LUM2/256)
     16  51b0		       98		      .byte.b	$90+(.LUM3/256)
     17  51b1
     18  51b1
     19  51b1
     20  51b1
     21  51b1
     22  51b1				   .LUM1      SET	.LUM1 + .STEP1
     23  51b1				   .LUM2      SET	.LUM2 + .STEP2
     24  51b1				   .LUM3      SET	.LUM3 + .STEP3
     13  51b1					      REPEND
     14  51b1		       44		      .byte.b	$40+(.LUM1/256)
     15  51b2		       26		      .byte.b	$20+(.LUM2/256)
     16  51b3		       98		      .byte.b	$90+(.LUM3/256)
     17  51b4
     18  51b4
     19  51b4
     20  51b4
     21  51b4
     22  51b4				   .LUM1      SET	.LUM1 + .STEP1
     23  51b4				   .LUM2      SET	.LUM2 + .STEP2
     24  51b4				   .LUM3      SET	.LUM3 + .STEP3
     13  51b4					      REPEND
     14  51b4		       44		      .byte.b	$40+(.LUM1/256)
     15  51b5		       26		      .byte.b	$20+(.LUM2/256)
     16  51b6		       98		      .byte.b	$90+(.LUM3/256)
     17  51b7
     18  51b7
     19  51b7
     20  51b7
     21  51b7
     22  51b7				   .LUM1      SET	.LUM1 + .STEP1
     23  51b7				   .LUM2      SET	.LUM2 + .STEP2
     24  51b7				   .LUM3      SET	.LUM3 + .STEP3
     13  51b7					      REPEND
     14  51b7		       44		      .byte.b	$40+(.LUM1/256)
     15  51b8		       26		      .byte.b	$20+(.LUM2/256)
     16  51b9		       98		      .byte.b	$90+(.LUM3/256)
     17  51ba
     18  51ba
     19  51ba
     20  51ba
     21  51ba
     22  51ba				   .LUM1      SET	.LUM1 + .STEP1
     23  51ba				   .LUM2      SET	.LUM2 + .STEP2
     24  51ba				   .LUM3      SET	.LUM3 + .STEP3
     13  51ba					      REPEND
     14  51ba		       44		      .byte.b	$40+(.LUM1/256)
     15  51bb		       26		      .byte.b	$20+(.LUM2/256)
     16  51bc		       98		      .byte.b	$90+(.LUM3/256)
     17  51bd
     18  51bd
     19  51bd
     20  51bd
     21  51bd
     22  51bd				   .LUM1      SET	.LUM1 + .STEP1
     23  51bd				   .LUM2      SET	.LUM2 + .STEP2
     24  51bd				   .LUM3      SET	.LUM3 + .STEP3
     13  51bd					      REPEND
     14  51bd		       44		      .byte.b	$40+(.LUM1/256)
     15  51be		       26		      .byte.b	$20+(.LUM2/256)
     16  51bf		       98		      .byte.b	$90+(.LUM3/256)
     17  51c0
     18  51c0
     19  51c0
     20  51c0
     21  51c0
     22  51c0				   .LUM1      SET	.LUM1 + .STEP1
     23  51c0				   .LUM2      SET	.LUM2 + .STEP2
     24  51c0				   .LUM3      SET	.LUM3 + .STEP3
     13  51c0					      REPEND
     14  51c0		       44		      .byte.b	$40+(.LUM1/256)
     15  51c1		       26		      .byte.b	$20+(.LUM2/256)
     16  51c2		       98		      .byte.b	$90+(.LUM3/256)
     17  51c3
     18  51c3
     19  51c3
     20  51c3
     21  51c3
     22  51c3				   .LUM1      SET	.LUM1 + .STEP1
     23  51c3				   .LUM2      SET	.LUM2 + .STEP2
     24  51c3				   .LUM3      SET	.LUM3 + .STEP3
     13  51c3					      REPEND
     14  51c3		       44		      .byte.b	$40+(.LUM1/256)
     15  51c4		       26		      .byte.b	$20+(.LUM2/256)
     16  51c5		       98		      .byte.b	$90+(.LUM3/256)
     17  51c6
     18  51c6
     19  51c6
     20  51c6
     21  51c6
     22  51c6				   .LUM1      SET	.LUM1 + .STEP1
     23  51c6				   .LUM2      SET	.LUM2 + .STEP2
     24  51c6				   .LUM3      SET	.LUM3 + .STEP3
     13  51c6					      REPEND
     14  51c6		       44		      .byte.b	$40+(.LUM1/256)
     15  51c7		       26		      .byte.b	$20+(.LUM2/256)
     16  51c8		       98		      .byte.b	$90+(.LUM3/256)
     17  51c9
     18  51c9
     19  51c9
     20  51c9
     21  51c9
     22  51c9				   .LUM1      SET	.LUM1 + .STEP1
     23  51c9				   .LUM2      SET	.LUM2 + .STEP2
     24  51c9				   .LUM3      SET	.LUM3 + .STEP3
     13  51c9					      REPEND
     14  51c9		       44		      .byte.b	$40+(.LUM1/256)
     15  51ca		       26		      .byte.b	$20+(.LUM2/256)
     16  51cb		       98		      .byte.b	$90+(.LUM3/256)
     17  51cc
     18  51cc
     19  51cc
     20  51cc
     21  51cc
     22  51cc				   .LUM1      SET	.LUM1 + .STEP1
     23  51cc				   .LUM2      SET	.LUM2 + .STEP2
     24  51cc				   .LUM3      SET	.LUM3 + .STEP3
     13  51cc					      REPEND
     14  51cc		       44		      .byte.b	$40+(.LUM1/256)
     15  51cd		       26		      .byte.b	$20+(.LUM2/256)
     16  51ce		       98		      .byte.b	$90+(.LUM3/256)
     17  51cf
     18  51cf
     19  51cf
     20  51cf
     21  51cf
     22  51cf				   .LUM1      SET	.LUM1 + .STEP1
     23  51cf				   .LUM2      SET	.LUM2 + .STEP2
     24  51cf				   .LUM3      SET	.LUM3 + .STEP3
     13  51cf					      REPEND
     14  51cf		       44		      .byte.b	$40+(.LUM1/256)
     15  51d0		       26		      .byte.b	$20+(.LUM2/256)
     16  51d1		       98		      .byte.b	$90+(.LUM3/256)
     17  51d2
     18  51d2
     19  51d2
     20  51d2
     21  51d2
     22  51d2				   .LUM1      SET	.LUM1 + .STEP1
     23  51d2				   .LUM2      SET	.LUM2 + .STEP2
     24  51d2				   .LUM3      SET	.LUM3 + .STEP3
     13  51d2					      REPEND
     14  51d2		       44		      .byte.b	$40+(.LUM1/256)
     15  51d3		       26		      .byte.b	$20+(.LUM2/256)
     16  51d4		       98		      .byte.b	$90+(.LUM3/256)
     17  51d5
     18  51d5
     19  51d5
     20  51d5
     21  51d5
     22  51d5				   .LUM1      SET	.LUM1 + .STEP1
     23  51d5				   .LUM2      SET	.LUM2 + .STEP2
     24  51d5				   .LUM3      SET	.LUM3 + .STEP3
     13  51d5					      REPEND
     14  51d5		       44		      .byte.b	$40+(.LUM1/256)
     15  51d6		       26		      .byte.b	$20+(.LUM2/256)
     16  51d7		       98		      .byte.b	$90+(.LUM3/256)
     17  51d8
     18  51d8
     19  51d8
     20  51d8
     21  51d8
     22  51d8				   .LUM1      SET	.LUM1 + .STEP1
     23  51d8				   .LUM2      SET	.LUM2 + .STEP2
     24  51d8				   .LUM3      SET	.LUM3 + .STEP3
     25  51d8					      REPEND
    254  51d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  51d8
    256  51d8							;    ECHO "PAL LUMS"
    257  51d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  51d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  51d8
      2  51d8
      3  51d8
      4  51d8
      5  51d8				   .LUM1      SET	$6*256
      6  51d8				   .LUM2      SET	$4*256
      7  51d8				   .LUM3      SET	$8*256
      8  51d8
      9  51d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  51d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  51d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  51d8
     13  51d8					      REPEAT	72
     14  51d8		       66		      .byte.b	$60+(.LUM1/256)
     15  51d9		       84		      .byte.b	$80+(.LUM2/256)
     16  51da		       18		      .byte.b	$10+(.LUM3/256)
     17  51db
     18  51db
     19  51db
     20  51db
     21  51db
     22  51db				   .LUM1      SET	.LUM1 + .STEP1
     23  51db				   .LUM2      SET	.LUM2 + .STEP2
     24  51db				   .LUM3      SET	.LUM3 + .STEP3
     13  51db					      REPEND
     14  51db		       66		      .byte.b	$60+(.LUM1/256)
     15  51dc		       84		      .byte.b	$80+(.LUM2/256)
     16  51dd		       18		      .byte.b	$10+(.LUM3/256)
     17  51de
     18  51de
     19  51de
     20  51de
     21  51de
     22  51de				   .LUM1      SET	.LUM1 + .STEP1
     23  51de				   .LUM2      SET	.LUM2 + .STEP2
     24  51de				   .LUM3      SET	.LUM3 + .STEP3
     13  51de					      REPEND
     14  51de		       66		      .byte.b	$60+(.LUM1/256)
     15  51df		       84		      .byte.b	$80+(.LUM2/256)
     16  51e0		       18		      .byte.b	$10+(.LUM3/256)
     17  51e1
     18  51e1
     19  51e1
     20  51e1
     21  51e1
     22  51e1				   .LUM1      SET	.LUM1 + .STEP1
     23  51e1				   .LUM2      SET	.LUM2 + .STEP2
     24  51e1				   .LUM3      SET	.LUM3 + .STEP3
     13  51e1					      REPEND
     14  51e1		       66		      .byte.b	$60+(.LUM1/256)
     15  51e2		       84		      .byte.b	$80+(.LUM2/256)
     16  51e3		       18		      .byte.b	$10+(.LUM3/256)
     17  51e4
     18  51e4
     19  51e4
     20  51e4
     21  51e4
     22  51e4				   .LUM1      SET	.LUM1 + .STEP1
     23  51e4				   .LUM2      SET	.LUM2 + .STEP2
     24  51e4				   .LUM3      SET	.LUM3 + .STEP3
     13  51e4					      REPEND
     14  51e4		       66		      .byte.b	$60+(.LUM1/256)
     15  51e5		       84		      .byte.b	$80+(.LUM2/256)
     16  51e6		       18		      .byte.b	$10+(.LUM3/256)
     17  51e7
     18  51e7
     19  51e7
     20  51e7
     21  51e7
     22  51e7				   .LUM1      SET	.LUM1 + .STEP1
     23  51e7				   .LUM2      SET	.LUM2 + .STEP2
     24  51e7				   .LUM3      SET	.LUM3 + .STEP3
     13  51e7					      REPEND
     14  51e7		       66		      .byte.b	$60+(.LUM1/256)
     15  51e8		       84		      .byte.b	$80+(.LUM2/256)
     16  51e9		       18		      .byte.b	$10+(.LUM3/256)
     17  51ea
     18  51ea
     19  51ea
     20  51ea
     21  51ea
     22  51ea				   .LUM1      SET	.LUM1 + .STEP1
     23  51ea				   .LUM2      SET	.LUM2 + .STEP2
     24  51ea				   .LUM3      SET	.LUM3 + .STEP3
     13  51ea					      REPEND
     14  51ea		       66		      .byte.b	$60+(.LUM1/256)
     15  51eb		       84		      .byte.b	$80+(.LUM2/256)
     16  51ec		       18		      .byte.b	$10+(.LUM3/256)
     17  51ed
     18  51ed
     19  51ed
     20  51ed
     21  51ed
     22  51ed				   .LUM1      SET	.LUM1 + .STEP1
     23  51ed				   .LUM2      SET	.LUM2 + .STEP2
     24  51ed				   .LUM3      SET	.LUM3 + .STEP3
     13  51ed					      REPEND
     14  51ed		       66		      .byte.b	$60+(.LUM1/256)
     15  51ee		       84		      .byte.b	$80+(.LUM2/256)
     16  51ef		       18		      .byte.b	$10+(.LUM3/256)
     17  51f0
     18  51f0
     19  51f0
     20  51f0
     21  51f0
     22  51f0				   .LUM1      SET	.LUM1 + .STEP1
     23  51f0				   .LUM2      SET	.LUM2 + .STEP2
     24  51f0				   .LUM3      SET	.LUM3 + .STEP3
     13  51f0					      REPEND
     14  51f0		       66		      .byte.b	$60+(.LUM1/256)
     15  51f1		       84		      .byte.b	$80+(.LUM2/256)
     16  51f2		       18		      .byte.b	$10+(.LUM3/256)
     17  51f3
     18  51f3
     19  51f3
     20  51f3
     21  51f3
     22  51f3				   .LUM1      SET	.LUM1 + .STEP1
     23  51f3				   .LUM2      SET	.LUM2 + .STEP2
     24  51f3				   .LUM3      SET	.LUM3 + .STEP3
     13  51f3					      REPEND
     14  51f3		       66		      .byte.b	$60+(.LUM1/256)
     15  51f4		       84		      .byte.b	$80+(.LUM2/256)
     16  51f5		       18		      .byte.b	$10+(.LUM3/256)
     17  51f6
     18  51f6
     19  51f6
     20  51f6
     21  51f6
     22  51f6				   .LUM1      SET	.LUM1 + .STEP1
     23  51f6				   .LUM2      SET	.LUM2 + .STEP2
     24  51f6				   .LUM3      SET	.LUM3 + .STEP3
     13  51f6					      REPEND
     14  51f6		       66		      .byte.b	$60+(.LUM1/256)
     15  51f7		       84		      .byte.b	$80+(.LUM2/256)
     16  51f8		       18		      .byte.b	$10+(.LUM3/256)
     17  51f9
     18  51f9
     19  51f9
     20  51f9
     21  51f9
     22  51f9				   .LUM1      SET	.LUM1 + .STEP1
     23  51f9				   .LUM2      SET	.LUM2 + .STEP2
     24  51f9				   .LUM3      SET	.LUM3 + .STEP3
     13  51f9					      REPEND
     14  51f9		       66		      .byte.b	$60+(.LUM1/256)
     15  51fa		       84		      .byte.b	$80+(.LUM2/256)
     16  51fb		       18		      .byte.b	$10+(.LUM3/256)
     17  51fc
     18  51fc
     19  51fc
     20  51fc
     21  51fc
     22  51fc				   .LUM1      SET	.LUM1 + .STEP1
     23  51fc				   .LUM2      SET	.LUM2 + .STEP2
     24  51fc				   .LUM3      SET	.LUM3 + .STEP3
     13  51fc					      REPEND
     14  51fc		       66		      .byte.b	$60+(.LUM1/256)
     15  51fd		       84		      .byte.b	$80+(.LUM2/256)
     16  51fe		       18		      .byte.b	$10+(.LUM3/256)
     17  51ff
     18  51ff
     19  51ff
     20  51ff
     21  51ff
     22  51ff				   .LUM1      SET	.LUM1 + .STEP1
     23  51ff				   .LUM2      SET	.LUM2 + .STEP2
     24  51ff				   .LUM3      SET	.LUM3 + .STEP3
     13  51ff					      REPEND
     14  51ff		       66		      .byte.b	$60+(.LUM1/256)
     15  5200		       84		      .byte.b	$80+(.LUM2/256)
     16  5201		       18		      .byte.b	$10+(.LUM3/256)
     17  5202
     18  5202
     19  5202
     20  5202
     21  5202
     22  5202				   .LUM1      SET	.LUM1 + .STEP1
     23  5202				   .LUM2      SET	.LUM2 + .STEP2
     24  5202				   .LUM3      SET	.LUM3 + .STEP3
     13  5202					      REPEND
     14  5202		       66		      .byte.b	$60+(.LUM1/256)
     15  5203		       84		      .byte.b	$80+(.LUM2/256)
     16  5204		       18		      .byte.b	$10+(.LUM3/256)
     17  5205
     18  5205
     19  5205
     20  5205
     21  5205
     22  5205				   .LUM1      SET	.LUM1 + .STEP1
     23  5205				   .LUM2      SET	.LUM2 + .STEP2
     24  5205				   .LUM3      SET	.LUM3 + .STEP3
     13  5205					      REPEND
     14  5205		       66		      .byte.b	$60+(.LUM1/256)
     15  5206		       84		      .byte.b	$80+(.LUM2/256)
     16  5207		       18		      .byte.b	$10+(.LUM3/256)
     17  5208
     18  5208
     19  5208
     20  5208
     21  5208
     22  5208				   .LUM1      SET	.LUM1 + .STEP1
     23  5208				   .LUM2      SET	.LUM2 + .STEP2
     24  5208				   .LUM3      SET	.LUM3 + .STEP3
     13  5208					      REPEND
     14  5208		       66		      .byte.b	$60+(.LUM1/256)
     15  5209		       84		      .byte.b	$80+(.LUM2/256)
     16  520a		       18		      .byte.b	$10+(.LUM3/256)
     17  520b
     18  520b
     19  520b
     20  520b
     21  520b
     22  520b				   .LUM1      SET	.LUM1 + .STEP1
     23  520b				   .LUM2      SET	.LUM2 + .STEP2
     24  520b				   .LUM3      SET	.LUM3 + .STEP3
     13  520b					      REPEND
     14  520b		       66		      .byte.b	$60+(.LUM1/256)
     15  520c		       84		      .byte.b	$80+(.LUM2/256)
     16  520d		       18		      .byte.b	$10+(.LUM3/256)
     17  520e
     18  520e
     19  520e
     20  520e
     21  520e
     22  520e				   .LUM1      SET	.LUM1 + .STEP1
     23  520e				   .LUM2      SET	.LUM2 + .STEP2
     24  520e				   .LUM3      SET	.LUM3 + .STEP3
     13  520e					      REPEND
     14  520e		       66		      .byte.b	$60+(.LUM1/256)
     15  520f		       84		      .byte.b	$80+(.LUM2/256)
     16  5210		       18		      .byte.b	$10+(.LUM3/256)
     17  5211
     18  5211
     19  5211
     20  5211
     21  5211
     22  5211				   .LUM1      SET	.LUM1 + .STEP1
     23  5211				   .LUM2      SET	.LUM2 + .STEP2
     24  5211				   .LUM3      SET	.LUM3 + .STEP3
     13  5211					      REPEND
     14  5211		       66		      .byte.b	$60+(.LUM1/256)
     15  5212		       84		      .byte.b	$80+(.LUM2/256)
     16  5213		       18		      .byte.b	$10+(.LUM3/256)
     17  5214
     18  5214
     19  5214
     20  5214
     21  5214
     22  5214				   .LUM1      SET	.LUM1 + .STEP1
     23  5214				   .LUM2      SET	.LUM2 + .STEP2
     24  5214				   .LUM3      SET	.LUM3 + .STEP3
     13  5214					      REPEND
     14  5214		       66		      .byte.b	$60+(.LUM1/256)
     15  5215		       84		      .byte.b	$80+(.LUM2/256)
     16  5216		       18		      .byte.b	$10+(.LUM3/256)
     17  5217
     18  5217
     19  5217
     20  5217
     21  5217
     22  5217				   .LUM1      SET	.LUM1 + .STEP1
     23  5217				   .LUM2      SET	.LUM2 + .STEP2
     24  5217				   .LUM3      SET	.LUM3 + .STEP3
     13  5217					      REPEND
     14  5217		       66		      .byte.b	$60+(.LUM1/256)
     15  5218		       84		      .byte.b	$80+(.LUM2/256)
     16  5219		       18		      .byte.b	$10+(.LUM3/256)
     17  521a
     18  521a
     19  521a
     20  521a
     21  521a
     22  521a				   .LUM1      SET	.LUM1 + .STEP1
     23  521a				   .LUM2      SET	.LUM2 + .STEP2
     24  521a				   .LUM3      SET	.LUM3 + .STEP3
     13  521a					      REPEND
     14  521a		       66		      .byte.b	$60+(.LUM1/256)
     15  521b		       84		      .byte.b	$80+(.LUM2/256)
     16  521c		       18		      .byte.b	$10+(.LUM3/256)
     17  521d
     18  521d
     19  521d
     20  521d
     21  521d
     22  521d				   .LUM1      SET	.LUM1 + .STEP1
     23  521d				   .LUM2      SET	.LUM2 + .STEP2
     24  521d				   .LUM3      SET	.LUM3 + .STEP3
     13  521d					      REPEND
     14  521d		       66		      .byte.b	$60+(.LUM1/256)
     15  521e		       84		      .byte.b	$80+(.LUM2/256)
     16  521f		       18		      .byte.b	$10+(.LUM3/256)
     17  5220
     18  5220
     19  5220
     20  5220
     21  5220
     22  5220				   .LUM1      SET	.LUM1 + .STEP1
     23  5220				   .LUM2      SET	.LUM2 + .STEP2
     24  5220				   .LUM3      SET	.LUM3 + .STEP3
     13  5220					      REPEND
     14  5220		       66		      .byte.b	$60+(.LUM1/256)
     15  5221		       84		      .byte.b	$80+(.LUM2/256)
     16  5222		       18		      .byte.b	$10+(.LUM3/256)
     17  5223
     18  5223
     19  5223
     20  5223
     21  5223
     22  5223				   .LUM1      SET	.LUM1 + .STEP1
     23  5223				   .LUM2      SET	.LUM2 + .STEP2
     24  5223				   .LUM3      SET	.LUM3 + .STEP3
     13  5223					      REPEND
     14  5223		       66		      .byte.b	$60+(.LUM1/256)
     15  5224		       84		      .byte.b	$80+(.LUM2/256)
     16  5225		       18		      .byte.b	$10+(.LUM3/256)
     17  5226
     18  5226
     19  5226
     20  5226
     21  5226
     22  5226				   .LUM1      SET	.LUM1 + .STEP1
     23  5226				   .LUM2      SET	.LUM2 + .STEP2
     24  5226				   .LUM3      SET	.LUM3 + .STEP3
     13  5226					      REPEND
     14  5226		       66		      .byte.b	$60+(.LUM1/256)
     15  5227		       84		      .byte.b	$80+(.LUM2/256)
     16  5228		       18		      .byte.b	$10+(.LUM3/256)
     17  5229
     18  5229
     19  5229
     20  5229
     21  5229
     22  5229				   .LUM1      SET	.LUM1 + .STEP1
     23  5229				   .LUM2      SET	.LUM2 + .STEP2
     24  5229				   .LUM3      SET	.LUM3 + .STEP3
     13  5229					      REPEND
     14  5229		       66		      .byte.b	$60+(.LUM1/256)
     15  522a		       84		      .byte.b	$80+(.LUM2/256)
     16  522b		       18		      .byte.b	$10+(.LUM3/256)
     17  522c
     18  522c
     19  522c
     20  522c
     21  522c
     22  522c				   .LUM1      SET	.LUM1 + .STEP1
     23  522c				   .LUM2      SET	.LUM2 + .STEP2
     24  522c				   .LUM3      SET	.LUM3 + .STEP3
     13  522c					      REPEND
     14  522c		       66		      .byte.b	$60+(.LUM1/256)
     15  522d		       84		      .byte.b	$80+(.LUM2/256)
     16  522e		       18		      .byte.b	$10+(.LUM3/256)
     17  522f
     18  522f
     19  522f
     20  522f
     21  522f
     22  522f				   .LUM1      SET	.LUM1 + .STEP1
     23  522f				   .LUM2      SET	.LUM2 + .STEP2
     24  522f				   .LUM3      SET	.LUM3 + .STEP3
     13  522f					      REPEND
     14  522f		       66		      .byte.b	$60+(.LUM1/256)
     15  5230		       84		      .byte.b	$80+(.LUM2/256)
     16  5231		       18		      .byte.b	$10+(.LUM3/256)
     17  5232
     18  5232
     19  5232
     20  5232
     21  5232
     22  5232				   .LUM1      SET	.LUM1 + .STEP1
     23  5232				   .LUM2      SET	.LUM2 + .STEP2
     24  5232				   .LUM3      SET	.LUM3 + .STEP3
     13  5232					      REPEND
     14  5232		       66		      .byte.b	$60+(.LUM1/256)
     15  5233		       84		      .byte.b	$80+(.LUM2/256)
     16  5234		       18		      .byte.b	$10+(.LUM3/256)
     17  5235
     18  5235
     19  5235
     20  5235
     21  5235
     22  5235				   .LUM1      SET	.LUM1 + .STEP1
     23  5235				   .LUM2      SET	.LUM2 + .STEP2
     24  5235				   .LUM3      SET	.LUM3 + .STEP3
     13  5235					      REPEND
     14  5235		       66		      .byte.b	$60+(.LUM1/256)
     15  5236		       84		      .byte.b	$80+(.LUM2/256)
     16  5237		       18		      .byte.b	$10+(.LUM3/256)
     17  5238
     18  5238
     19  5238
     20  5238
     21  5238
     22  5238				   .LUM1      SET	.LUM1 + .STEP1
     23  5238				   .LUM2      SET	.LUM2 + .STEP2
     24  5238				   .LUM3      SET	.LUM3 + .STEP3
     13  5238					      REPEND
     14  5238		       66		      .byte.b	$60+(.LUM1/256)
     15  5239		       84		      .byte.b	$80+(.LUM2/256)
     16  523a		       18		      .byte.b	$10+(.LUM3/256)
     17  523b
     18  523b
     19  523b
     20  523b
     21  523b
     22  523b				   .LUM1      SET	.LUM1 + .STEP1
     23  523b				   .LUM2      SET	.LUM2 + .STEP2
     24  523b				   .LUM3      SET	.LUM3 + .STEP3
     13  523b					      REPEND
     14  523b		       66		      .byte.b	$60+(.LUM1/256)
     15  523c		       84		      .byte.b	$80+(.LUM2/256)
     16  523d		       18		      .byte.b	$10+(.LUM3/256)
     17  523e
     18  523e
     19  523e
     20  523e
     21  523e
     22  523e				   .LUM1      SET	.LUM1 + .STEP1
     23  523e				   .LUM2      SET	.LUM2 + .STEP2
     24  523e				   .LUM3      SET	.LUM3 + .STEP3
     13  523e					      REPEND
     14  523e		       66		      .byte.b	$60+(.LUM1/256)
     15  523f		       84		      .byte.b	$80+(.LUM2/256)
     16  5240		       18		      .byte.b	$10+(.LUM3/256)
     17  5241
     18  5241
     19  5241
     20  5241
     21  5241
     22  5241				   .LUM1      SET	.LUM1 + .STEP1
     23  5241				   .LUM2      SET	.LUM2 + .STEP2
     24  5241				   .LUM3      SET	.LUM3 + .STEP3
     13  5241					      REPEND
     14  5241		       66		      .byte.b	$60+(.LUM1/256)
     15  5242		       84		      .byte.b	$80+(.LUM2/256)
     16  5243		       18		      .byte.b	$10+(.LUM3/256)
     17  5244
     18  5244
     19  5244
     20  5244
     21  5244
     22  5244				   .LUM1      SET	.LUM1 + .STEP1
     23  5244				   .LUM2      SET	.LUM2 + .STEP2
     24  5244				   .LUM3      SET	.LUM3 + .STEP3
     13  5244					      REPEND
     14  5244		       66		      .byte.b	$60+(.LUM1/256)
     15  5245		       84		      .byte.b	$80+(.LUM2/256)
     16  5246		       18		      .byte.b	$10+(.LUM3/256)
     17  5247
     18  5247
     19  5247
     20  5247
     21  5247
     22  5247				   .LUM1      SET	.LUM1 + .STEP1
     23  5247				   .LUM2      SET	.LUM2 + .STEP2
     24  5247				   .LUM3      SET	.LUM3 + .STEP3
     13  5247					      REPEND
     14  5247		       66		      .byte.b	$60+(.LUM1/256)
     15  5248		       84		      .byte.b	$80+(.LUM2/256)
     16  5249		       18		      .byte.b	$10+(.LUM3/256)
     17  524a
     18  524a
     19  524a
     20  524a
     21  524a
     22  524a				   .LUM1      SET	.LUM1 + .STEP1
     23  524a				   .LUM2      SET	.LUM2 + .STEP2
     24  524a				   .LUM3      SET	.LUM3 + .STEP3
     13  524a					      REPEND
     14  524a		       66		      .byte.b	$60+(.LUM1/256)
     15  524b		       84		      .byte.b	$80+(.LUM2/256)
     16  524c		       18		      .byte.b	$10+(.LUM3/256)
     17  524d
     18  524d
     19  524d
     20  524d
     21  524d
     22  524d				   .LUM1      SET	.LUM1 + .STEP1
     23  524d				   .LUM2      SET	.LUM2 + .STEP2
     24  524d				   .LUM3      SET	.LUM3 + .STEP3
     13  524d					      REPEND
     14  524d		       66		      .byte.b	$60+(.LUM1/256)
     15  524e		       84		      .byte.b	$80+(.LUM2/256)
     16  524f		       18		      .byte.b	$10+(.LUM3/256)
     17  5250
     18  5250
     19  5250
     20  5250
     21  5250
     22  5250				   .LUM1      SET	.LUM1 + .STEP1
     23  5250				   .LUM2      SET	.LUM2 + .STEP2
     24  5250				   .LUM3      SET	.LUM3 + .STEP3
     13  5250					      REPEND
     14  5250		       66		      .byte.b	$60+(.LUM1/256)
     15  5251		       84		      .byte.b	$80+(.LUM2/256)
     16  5252		       18		      .byte.b	$10+(.LUM3/256)
     17  5253
     18  5253
     19  5253
     20  5253
     21  5253
     22  5253				   .LUM1      SET	.LUM1 + .STEP1
     23  5253				   .LUM2      SET	.LUM2 + .STEP2
     24  5253				   .LUM3      SET	.LUM3 + .STEP3
     13  5253					      REPEND
     14  5253		       66		      .byte.b	$60+(.LUM1/256)
     15  5254		       84		      .byte.b	$80+(.LUM2/256)
     16  5255		       18		      .byte.b	$10+(.LUM3/256)
     17  5256
     18  5256
     19  5256
     20  5256
     21  5256
     22  5256				   .LUM1      SET	.LUM1 + .STEP1
     23  5256				   .LUM2      SET	.LUM2 + .STEP2
     24  5256				   .LUM3      SET	.LUM3 + .STEP3
     13  5256					      REPEND
     14  5256		       66		      .byte.b	$60+(.LUM1/256)
     15  5257		       84		      .byte.b	$80+(.LUM2/256)
     16  5258		       18		      .byte.b	$10+(.LUM3/256)
     17  5259
     18  5259
     19  5259
     20  5259
     21  5259
     22  5259				   .LUM1      SET	.LUM1 + .STEP1
     23  5259				   .LUM2      SET	.LUM2 + .STEP2
     24  5259				   .LUM3      SET	.LUM3 + .STEP3
     13  5259					      REPEND
     14  5259		       66		      .byte.b	$60+(.LUM1/256)
     15  525a		       84		      .byte.b	$80+(.LUM2/256)
     16  525b		       18		      .byte.b	$10+(.LUM3/256)
     17  525c
     18  525c
     19  525c
     20  525c
     21  525c
     22  525c				   .LUM1      SET	.LUM1 + .STEP1
     23  525c				   .LUM2      SET	.LUM2 + .STEP2
     24  525c				   .LUM3      SET	.LUM3 + .STEP3
     13  525c					      REPEND
     14  525c		       66		      .byte.b	$60+(.LUM1/256)
     15  525d		       84		      .byte.b	$80+(.LUM2/256)
     16  525e		       18		      .byte.b	$10+(.LUM3/256)
     17  525f
     18  525f
     19  525f
     20  525f
     21  525f
     22  525f				   .LUM1      SET	.LUM1 + .STEP1
     23  525f				   .LUM2      SET	.LUM2 + .STEP2
     24  525f				   .LUM3      SET	.LUM3 + .STEP3
     13  525f					      REPEND
     14  525f		       66		      .byte.b	$60+(.LUM1/256)
     15  5260		       84		      .byte.b	$80+(.LUM2/256)
     16  5261		       18		      .byte.b	$10+(.LUM3/256)
     17  5262
     18  5262
     19  5262
     20  5262
     21  5262
     22  5262				   .LUM1      SET	.LUM1 + .STEP1
     23  5262				   .LUM2      SET	.LUM2 + .STEP2
     24  5262				   .LUM3      SET	.LUM3 + .STEP3
     13  5262					      REPEND
     14  5262		       66		      .byte.b	$60+(.LUM1/256)
     15  5263		       84		      .byte.b	$80+(.LUM2/256)
     16  5264		       18		      .byte.b	$10+(.LUM3/256)
     17  5265
     18  5265
     19  5265
     20  5265
     21  5265
     22  5265				   .LUM1      SET	.LUM1 + .STEP1
     23  5265				   .LUM2      SET	.LUM2 + .STEP2
     24  5265				   .LUM3      SET	.LUM3 + .STEP3
     13  5265					      REPEND
     14  5265		       66		      .byte.b	$60+(.LUM1/256)
     15  5266		       84		      .byte.b	$80+(.LUM2/256)
     16  5267		       18		      .byte.b	$10+(.LUM3/256)
     17  5268
     18  5268
     19  5268
     20  5268
     21  5268
     22  5268				   .LUM1      SET	.LUM1 + .STEP1
     23  5268				   .LUM2      SET	.LUM2 + .STEP2
     24  5268				   .LUM3      SET	.LUM3 + .STEP3
     13  5268					      REPEND
     14  5268		       66		      .byte.b	$60+(.LUM1/256)
     15  5269		       84		      .byte.b	$80+(.LUM2/256)
     16  526a		       18		      .byte.b	$10+(.LUM3/256)
     17  526b
     18  526b
     19  526b
     20  526b
     21  526b
     22  526b				   .LUM1      SET	.LUM1 + .STEP1
     23  526b				   .LUM2      SET	.LUM2 + .STEP2
     24  526b				   .LUM3      SET	.LUM3 + .STEP3
     13  526b					      REPEND
     14  526b		       66		      .byte.b	$60+(.LUM1/256)
     15  526c		       84		      .byte.b	$80+(.LUM2/256)
     16  526d		       18		      .byte.b	$10+(.LUM3/256)
     17  526e
     18  526e
     19  526e
     20  526e
     21  526e
     22  526e				   .LUM1      SET	.LUM1 + .STEP1
     23  526e				   .LUM2      SET	.LUM2 + .STEP2
     24  526e				   .LUM3      SET	.LUM3 + .STEP3
     13  526e					      REPEND
     14  526e		       66		      .byte.b	$60+(.LUM1/256)
     15  526f		       84		      .byte.b	$80+(.LUM2/256)
     16  5270		       18		      .byte.b	$10+(.LUM3/256)
     17  5271
     18  5271
     19  5271
     20  5271
     21  5271
     22  5271				   .LUM1      SET	.LUM1 + .STEP1
     23  5271				   .LUM2      SET	.LUM2 + .STEP2
     24  5271				   .LUM3      SET	.LUM3 + .STEP3
     13  5271					      REPEND
     14  5271		       66		      .byte.b	$60+(.LUM1/256)
     15  5272		       84		      .byte.b	$80+(.LUM2/256)
     16  5273		       18		      .byte.b	$10+(.LUM3/256)
     17  5274
     18  5274
     19  5274
     20  5274
     21  5274
     22  5274				   .LUM1      SET	.LUM1 + .STEP1
     23  5274				   .LUM2      SET	.LUM2 + .STEP2
     24  5274				   .LUM3      SET	.LUM3 + .STEP3
     13  5274					      REPEND
     14  5274		       66		      .byte.b	$60+(.LUM1/256)
     15  5275		       84		      .byte.b	$80+(.LUM2/256)
     16  5276		       18		      .byte.b	$10+(.LUM3/256)
     17  5277
     18  5277
     19  5277
     20  5277
     21  5277
     22  5277				   .LUM1      SET	.LUM1 + .STEP1
     23  5277				   .LUM2      SET	.LUM2 + .STEP2
     24  5277				   .LUM3      SET	.LUM3 + .STEP3
     13  5277					      REPEND
     14  5277		       66		      .byte.b	$60+(.LUM1/256)
     15  5278		       84		      .byte.b	$80+(.LUM2/256)
     16  5279		       18		      .byte.b	$10+(.LUM3/256)
     17  527a
     18  527a
     19  527a
     20  527a
     21  527a
     22  527a				   .LUM1      SET	.LUM1 + .STEP1
     23  527a				   .LUM2      SET	.LUM2 + .STEP2
     24  527a				   .LUM3      SET	.LUM3 + .STEP3
     13  527a					      REPEND
     14  527a		       66		      .byte.b	$60+(.LUM1/256)
     15  527b		       84		      .byte.b	$80+(.LUM2/256)
     16  527c		       18		      .byte.b	$10+(.LUM3/256)
     17  527d
     18  527d
     19  527d
     20  527d
     21  527d
     22  527d				   .LUM1      SET	.LUM1 + .STEP1
     23  527d				   .LUM2      SET	.LUM2 + .STEP2
     24  527d				   .LUM3      SET	.LUM3 + .STEP3
     13  527d					      REPEND
     14  527d		       66		      .byte.b	$60+(.LUM1/256)
     15  527e		       84		      .byte.b	$80+(.LUM2/256)
     16  527f		       18		      .byte.b	$10+(.LUM3/256)
     17  5280
     18  5280
     19  5280
     20  5280
     21  5280
     22  5280				   .LUM1      SET	.LUM1 + .STEP1
     23  5280				   .LUM2      SET	.LUM2 + .STEP2
     24  5280				   .LUM3      SET	.LUM3 + .STEP3
     13  5280					      REPEND
     14  5280		       66		      .byte.b	$60+(.LUM1/256)
     15  5281		       84		      .byte.b	$80+(.LUM2/256)
     16  5282		       18		      .byte.b	$10+(.LUM3/256)
     17  5283
     18  5283
     19  5283
     20  5283
     21  5283
     22  5283				   .LUM1      SET	.LUM1 + .STEP1
     23  5283				   .LUM2      SET	.LUM2 + .STEP2
     24  5283				   .LUM3      SET	.LUM3 + .STEP3
     13  5283					      REPEND
     14  5283		       66		      .byte.b	$60+(.LUM1/256)
     15  5284		       84		      .byte.b	$80+(.LUM2/256)
     16  5285		       18		      .byte.b	$10+(.LUM3/256)
     17  5286
     18  5286
     19  5286
     20  5286
     21  5286
     22  5286				   .LUM1      SET	.LUM1 + .STEP1
     23  5286				   .LUM2      SET	.LUM2 + .STEP2
     24  5286				   .LUM3      SET	.LUM3 + .STEP3
     13  5286					      REPEND
     14  5286		       66		      .byte.b	$60+(.LUM1/256)
     15  5287		       84		      .byte.b	$80+(.LUM2/256)
     16  5288		       18		      .byte.b	$10+(.LUM3/256)
     17  5289
     18  5289
     19  5289
     20  5289
     21  5289
     22  5289				   .LUM1      SET	.LUM1 + .STEP1
     23  5289				   .LUM2      SET	.LUM2 + .STEP2
     24  5289				   .LUM3      SET	.LUM3 + .STEP3
     13  5289					      REPEND
     14  5289		       66		      .byte.b	$60+(.LUM1/256)
     15  528a		       84		      .byte.b	$80+(.LUM2/256)
     16  528b		       18		      .byte.b	$10+(.LUM3/256)
     17  528c
     18  528c
     19  528c
     20  528c
     21  528c
     22  528c				   .LUM1      SET	.LUM1 + .STEP1
     23  528c				   .LUM2      SET	.LUM2 + .STEP2
     24  528c				   .LUM3      SET	.LUM3 + .STEP3
     13  528c					      REPEND
     14  528c		       66		      .byte.b	$60+(.LUM1/256)
     15  528d		       84		      .byte.b	$80+(.LUM2/256)
     16  528e		       18		      .byte.b	$10+(.LUM3/256)
     17  528f
     18  528f
     19  528f
     20  528f
     21  528f
     22  528f				   .LUM1      SET	.LUM1 + .STEP1
     23  528f				   .LUM2      SET	.LUM2 + .STEP2
     24  528f				   .LUM3      SET	.LUM3 + .STEP3
     13  528f					      REPEND
     14  528f		       66		      .byte.b	$60+(.LUM1/256)
     15  5290		       84		      .byte.b	$80+(.LUM2/256)
     16  5291		       18		      .byte.b	$10+(.LUM3/256)
     17  5292
     18  5292
     19  5292
     20  5292
     21  5292
     22  5292				   .LUM1      SET	.LUM1 + .STEP1
     23  5292				   .LUM2      SET	.LUM2 + .STEP2
     24  5292				   .LUM3      SET	.LUM3 + .STEP3
     13  5292					      REPEND
     14  5292		       66		      .byte.b	$60+(.LUM1/256)
     15  5293		       84		      .byte.b	$80+(.LUM2/256)
     16  5294		       18		      .byte.b	$10+(.LUM3/256)
     17  5295
     18  5295
     19  5295
     20  5295
     21  5295
     22  5295				   .LUM1      SET	.LUM1 + .STEP1
     23  5295				   .LUM2      SET	.LUM2 + .STEP2
     24  5295				   .LUM3      SET	.LUM3 + .STEP3
     13  5295					      REPEND
     14  5295		       66		      .byte.b	$60+(.LUM1/256)
     15  5296		       84		      .byte.b	$80+(.LUM2/256)
     16  5297		       18		      .byte.b	$10+(.LUM3/256)
     17  5298
     18  5298
     19  5298
     20  5298
     21  5298
     22  5298				   .LUM1      SET	.LUM1 + .STEP1
     23  5298				   .LUM2      SET	.LUM2 + .STEP2
     24  5298				   .LUM3      SET	.LUM3 + .STEP3
     13  5298					      REPEND
     14  5298		       66		      .byte.b	$60+(.LUM1/256)
     15  5299		       84		      .byte.b	$80+(.LUM2/256)
     16  529a		       18		      .byte.b	$10+(.LUM3/256)
     17  529b
     18  529b
     19  529b
     20  529b
     21  529b
     22  529b				   .LUM1      SET	.LUM1 + .STEP1
     23  529b				   .LUM2      SET	.LUM2 + .STEP2
     24  529b				   .LUM3      SET	.LUM3 + .STEP3
     13  529b					      REPEND
     14  529b		       66		      .byte.b	$60+(.LUM1/256)
     15  529c		       84		      .byte.b	$80+(.LUM2/256)
     16  529d		       18		      .byte.b	$10+(.LUM3/256)
     17  529e
     18  529e
     19  529e
     20  529e
     21  529e
     22  529e				   .LUM1      SET	.LUM1 + .STEP1
     23  529e				   .LUM2      SET	.LUM2 + .STEP2
     24  529e				   .LUM3      SET	.LUM3 + .STEP3
     13  529e					      REPEND
     14  529e		       66		      .byte.b	$60+(.LUM1/256)
     15  529f		       84		      .byte.b	$80+(.LUM2/256)
     16  52a0		       18		      .byte.b	$10+(.LUM3/256)
     17  52a1
     18  52a1
     19  52a1
     20  52a1
     21  52a1
     22  52a1				   .LUM1      SET	.LUM1 + .STEP1
     23  52a1				   .LUM2      SET	.LUM2 + .STEP2
     24  52a1				   .LUM3      SET	.LUM3 + .STEP3
     13  52a1					      REPEND
     14  52a1		       66		      .byte.b	$60+(.LUM1/256)
     15  52a2		       84		      .byte.b	$80+(.LUM2/256)
     16  52a3		       18		      .byte.b	$10+(.LUM3/256)
     17  52a4
     18  52a4
     19  52a4
     20  52a4
     21  52a4
     22  52a4				   .LUM1      SET	.LUM1 + .STEP1
     23  52a4				   .LUM2      SET	.LUM2 + .STEP2
     24  52a4				   .LUM3      SET	.LUM3 + .STEP3
     13  52a4					      REPEND
     14  52a4		       66		      .byte.b	$60+(.LUM1/256)
     15  52a5		       84		      .byte.b	$80+(.LUM2/256)
     16  52a6		       18		      .byte.b	$10+(.LUM3/256)
     17  52a7
     18  52a7
     19  52a7
     20  52a7
     21  52a7
     22  52a7				   .LUM1      SET	.LUM1 + .STEP1
     23  52a7				   .LUM2      SET	.LUM2 + .STEP2
     24  52a7				   .LUM3      SET	.LUM3 + .STEP3
     13  52a7					      REPEND
     14  52a7		       66		      .byte.b	$60+(.LUM1/256)
     15  52a8		       84		      .byte.b	$80+(.LUM2/256)
     16  52a9		       18		      .byte.b	$10+(.LUM3/256)
     17  52aa
     18  52aa
     19  52aa
     20  52aa
     21  52aa
     22  52aa				   .LUM1      SET	.LUM1 + .STEP1
     23  52aa				   .LUM2      SET	.LUM2 + .STEP2
     24  52aa				   .LUM3      SET	.LUM3 + .STEP3
     13  52aa					      REPEND
     14  52aa		       66		      .byte.b	$60+(.LUM1/256)
     15  52ab		       84		      .byte.b	$80+(.LUM2/256)
     16  52ac		       18		      .byte.b	$10+(.LUM3/256)
     17  52ad
     18  52ad
     19  52ad
     20  52ad
     21  52ad
     22  52ad				   .LUM1      SET	.LUM1 + .STEP1
     23  52ad				   .LUM2      SET	.LUM2 + .STEP2
     24  52ad				   .LUM3      SET	.LUM3 + .STEP3
     13  52ad					      REPEND
     14  52ad		       66		      .byte.b	$60+(.LUM1/256)
     15  52ae		       84		      .byte.b	$80+(.LUM2/256)
     16  52af		       18		      .byte.b	$10+(.LUM3/256)
     17  52b0
     18  52b0
     19  52b0
     20  52b0
     21  52b0
     22  52b0				   .LUM1      SET	.LUM1 + .STEP1
     23  52b0				   .LUM2      SET	.LUM2 + .STEP2
     24  52b0				   .LUM3      SET	.LUM3 + .STEP3
     25  52b0					      REPEND
    259  52b0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  52b0
------- FILE titleData.asm LEVEL 3 PASS 1
      0  52b0					      include	"titleData.asm"
      1  52b0				   COL_0
      2  52b0		       00		      .byte.b	0	;R (71)
      3  52b1		       00		      .byte.b	0	;G
      4  52b2		       00		      .byte.b	0	;B
      5  52b3		       40		      .byte.b	64	;R (70)
      6  52b4		       40		      .byte.b	64	;G
      7  52b5		       00		      .byte.b	0	;B
      8  52b6		       00		      .byte.b	0	;R (69)
      9  52b7		       00		      .byte.b	0	;G
     10  52b8		       00		      .byte.b	0	;B
     11  52b9		       00		      .byte.b	0	;R (68)
     12  52ba		       80		      .byte.b	128	;G
     13  52bb		       00		      .byte.b	0	;B
     14  52bc		       00		      .byte.b	0	;R (67)
     15  52bd		       20		      .byte.b	32	;G
     16  52be		       00		      .byte.b	0	;B
     17  52bf		       80		      .byte.b	128	;R (66)
     18  52c0		       80		      .byte.b	128	;G
     19  52c1		       00		      .byte.b	0	;B
     20  52c2		       c0		      .byte.b	192	;R (65)
     21  52c3		       c0		      .byte.b	192	;G
     22  52c4		       00		      .byte.b	0	;B
     23  52c5		       40		      .byte.b	64	;R (64)
     24  52c6		       c0		      .byte.b	192	;G
     25  52c7		       00		      .byte.b	0	;B
     26  52c8		       00		      .byte.b	0	;R (63)
     27  52c9		       a0		      .byte.b	160	;G
     28  52ca		       00		      .byte.b	0	;B
     29  52cb		       10		      .byte.b	16	;R (62)
     30  52cc		       70		      .byte.b	112	;G
     31  52cd		       00		      .byte.b	0	;B
     32  52ce		       00		      .byte.b	0	;R (61)
     33  52cf		       80		      .byte.b	128	;G
     34  52d0		       40		      .byte.b	64	;B
     35  52d1		       00		      .byte.b	0	;R (60)
     36  52d2		       c0		      .byte.b	192	;G
     37  52d3		       00		      .byte.b	0	;B
     38  52d4		       00		      .byte.b	0	;R (59)
     39  52d5		       c0		      .byte.b	192	;G
     40  52d6		       00		      .byte.b	0	;B
     41  52d7		       00		      .byte.b	0	;R (58)
     42  52d8		       40		      .byte.b	64	;G
     43  52d9		       00		      .byte.b	0	;B
     44  52da		       00		      .byte.b	0	;R (57)
     45  52db		       c0		      .byte.b	192	;G
     46  52dc		       00		      .byte.b	0	;B
     47  52dd		       00		      .byte.b	0	;R (56)
     48  52de		       60		      .byte.b	96	;G
     49  52df		       00		      .byte.b	0	;B
     50  52e0		       00		      .byte.b	0	;R (55)
     51  52e1		       80		      .byte.b	128	;G
     52  52e2		       00		      .byte.b	0	;B
     53  52e3		       00		      .byte.b	0	;R (54)
     54  52e4		       40		      .byte.b	64	;G
     55  52e5		       00		      .byte.b	0	;B
     56  52e6		       00		      .byte.b	0	;R (53)
     57  52e7		       80		      .byte.b	128	;G
     58  52e8		       00		      .byte.b	0	;B
     59  52e9		       00		      .byte.b	0	;R (52)
     60  52ea		       80		      .byte.b	128	;G
     61  52eb		       00		      .byte.b	0	;B
     62  52ec		       00		      .byte.b	0	;R (51)
     63  52ed		       10		      .byte.b	16	;G
     64  52ee		       00		      .byte.b	0	;B
     65  52ef		       00		      .byte.b	0	;R (50)
     66  52f0		       00		      .byte.b	0	;G
     67  52f1		       00		      .byte.b	0	;B
     68  52f2		       00		      .byte.b	0	;R (49)
     69  52f3		       00		      .byte.b	0	;G
     70  52f4		       00		      .byte.b	0	;B
     71  52f5		       00		      .byte.b	0	;R (48)
     72  52f6		       00		      .byte.b	0	;G
     73  52f7		       00		      .byte.b	0	;B
     74  52f8		       00		      .byte.b	0	;R (47)
     75  52f9		       00		      .byte.b	0	;G
     76  52fa		       00		      .byte.b	0	;B
     77  52fb		       00		      .byte.b	0	;R (46)
     78  52fc		       40		      .byte.b	64	;G
     79  52fd		       00		      .byte.b	0	;B
     80  52fe		       00		      .byte.b	0	;R (45)
     81  52ff		       00		      .byte.b	0	;G
     82  5300		       00		      .byte.b	0	;B
     83  5301		       00		      .byte.b	0	;R (44)
     84  5302		       00		      .byte.b	0	;G
     85  5303		       00		      .byte.b	0	;B
     86  5304		       00		      .byte.b	0	;R (43)
     87  5305		       00		      .byte.b	0	;G
     88  5306		       00		      .byte.b	0	;B
     89  5307		       00		      .byte.b	0	;R (42)
     90  5308		       40		      .byte.b	64	;G
     91  5309		       00		      .byte.b	0	;B
     92  530a		       00		      .byte.b	0	;R (41)
     93  530b		       00		      .byte.b	0	;G
     94  530c		       00		      .byte.b	0	;B
     95  530d		       00		      .byte.b	0	;R (40)
     96  530e		       00		      .byte.b	0	;G
     97  530f		       00		      .byte.b	0	;B
     98  5310		       00		      .byte.b	0	;R (39)
     99  5311		       20		      .byte.b	32	;G
    100  5312		       00		      .byte.b	0	;B
    101  5313		       00		      .byte.b	0	;R (38)
    102  5314		       00		      .byte.b	0	;G
    103  5315		       00		      .byte.b	0	;B
    104  5316		       00		      .byte.b	0	;R (37)
    105  5317		       10		      .byte.b	16	;G
    106  5318		       00		      .byte.b	0	;B
    107  5319		       00		      .byte.b	0	;R (36)
    108  531a		       00		      .byte.b	0	;G
    109  531b		       00		      .byte.b	0	;B
    110  531c		       00		      .byte.b	0	;R (35)
    111  531d		       40		      .byte.b	64	;G
    112  531e		       00		      .byte.b	0	;B
    113  531f		       00		      .byte.b	0	;R (34)
    114  5320		       20		      .byte.b	32	;G
    115  5321		       00		      .byte.b	0	;B
    116  5322		       00		      .byte.b	0	;R (33)
    117  5323		       00		      .byte.b	0	;G
    118  5324		       00		      .byte.b	0	;B
    119  5325		       00		      .byte.b	0	;R (32)
    120  5326		       00		      .byte.b	0	;G
    121  5327		       00		      .byte.b	0	;B
    122  5328		       00		      .byte.b	0	;R (31)
    123  5329		       20		      .byte.b	32	;G
    124  532a		       00		      .byte.b	0	;B
    125  532b		       00		      .byte.b	0	;R (30)
    126  532c		       00		      .byte.b	0	;G
    127  532d		       00		      .byte.b	0	;B
    128  532e		       00		      .byte.b	0	;R (29)
    129  532f		       80		      .byte.b	128	;G
    130  5330		       00		      .byte.b	0	;B
    131  5331		       00		      .byte.b	0	;R (28)
    132  5332		       00		      .byte.b	0	;G
    133  5333		       00		      .byte.b	0	;B
    134  5334		       00		      .byte.b	0	;R (27)
    135  5335		       20		      .byte.b	32	;G
    136  5336		       00		      .byte.b	0	;B
    137  5337		       00		      .byte.b	0	;R (26)
    138  5338		       00		      .byte.b	0	;G
    139  5339		       00		      .byte.b	0	;B
    140  533a		       00		      .byte.b	0	;R (25)
    141  533b		       00		      .byte.b	0	;G
    142  533c		       00		      .byte.b	0	;B
    143  533d		       00		      .byte.b	0	;R (24)
    144  533e		       20		      .byte.b	32	;G
    145  533f		       00		      .byte.b	0	;B
    146  5340		       00		      .byte.b	0	;R (23)
    147  5341		       00		      .byte.b	0	;G
    148  5342		       00		      .byte.b	0	;B
    149  5343		       00		      .byte.b	0	;R (22)
    150  5344		       00		      .byte.b	0	;G
    151  5345		       00		      .byte.b	0	;B
    152  5346		       00		      .byte.b	0	;R (21)
    153  5347		       20		      .byte.b	32	;G
    154  5348		       00		      .byte.b	0	;B
    155  5349		       00		      .byte.b	0	;R (20)
    156  534a		       00		      .byte.b	0	;G
    157  534b		       00		      .byte.b	0	;B
    158  534c		       00		      .byte.b	0	;R (19)
    159  534d		       00		      .byte.b	0	;G
    160  534e		       00		      .byte.b	0	;B
    161  534f		       00		      .byte.b	0	;R (18)
    162  5350		       00		      .byte.b	0	;G
    163  5351		       00		      .byte.b	0	;B
    164  5352		       00		      .byte.b	0	;R (17)
    165  5353		       80		      .byte.b	128	;G
    166  5354		       00		      .byte.b	0	;B
    167  5355		       00		      .byte.b	0	;R (16)
    168  5356		       00		      .byte.b	0	;G
    169  5357		       00		      .byte.b	0	;B
    170  5358		       00		      .byte.b	0	;R (15)
    171  5359		       10		      .byte.b	16	;G
    172  535a		       00		      .byte.b	0	;B
    173  535b		       00		      .byte.b	0	;R (14)
    174  535c		       00		      .byte.b	0	;G
    175  535d		       00		      .byte.b	0	;B
    176  535e		       00		      .byte.b	0	;R (13)
    177  535f		       00		      .byte.b	0	;G
    178  5360		       00		      .byte.b	0	;B
    179  5361		       00		      .byte.b	0	;R (12)
    180  5362		       80		      .byte.b	128	;G
    181  5363		       00		      .byte.b	0	;B
    182  5364		       00		      .byte.b	0	;R (11)
    183  5365		       00		      .byte.b	0	;G
    184  5366		       00		      .byte.b	0	;B
    185  5367		       00		      .byte.b	0	;R (10)
    186  5368		       00		      .byte.b	0	;G
    187  5369		       00		      .byte.b	0	;B
    188  536a		       00		      .byte.b	0	;R (9)
    189  536b		       80		      .byte.b	128	;G
    190  536c		       00		      .byte.b	0	;B
    191  536d		       00		      .byte.b	0	;R (8)
    192  536e		       00		      .byte.b	0	;G
    193  536f		       00		      .byte.b	0	;B
    194  5370		       00		      .byte.b	0	;R (7)
    195  5371		       20		      .byte.b	32	;G
    196  5372		       00		      .byte.b	0	;B
    197  5373		       00		      .byte.b	0	;R (6)
    198  5374		       00		      .byte.b	0	;G
    199  5375		       00		      .byte.b	0	;B
    200  5376		       00		      .byte.b	0	;R (5)
    201  5377		       10		      .byte.b	16	;G
    202  5378		       00		      .byte.b	0	;B
    203  5379		       00		      .byte.b	0	;R (4)
    204  537a		       00		      .byte.b	0	;G
    205  537b		       00		      .byte.b	0	;B
    206  537c		       00		      .byte.b	0	;R (3)
    207  537d		       00		      .byte.b	0	;G
    208  537e		       00		      .byte.b	0	;B
    209  537f		       00		      .byte.b	0	;R (2)
    210  5380		       40		      .byte.b	64	;G
    211  5381		       00		      .byte.b	0	;B
    212  5382		       00		      .byte.b	0	;R (1)
    213  5383		       00		      .byte.b	0	;G
    214  5384		       00		      .byte.b	0	;B
    215  5385		       00		      .byte.b	0	;R (0)
    216  5386		       00		      .byte.b	0	;G
    217  5387		       00		      .byte.b	0	;B
    218  5388				   COL_1
    219  5388		       80		      .byte.b	128	;R (71)
    220  5389		       80		      .byte.b	128	;G
    221  538a		       00		      .byte.b	0	;B
    222  538b		       10		      .byte.b	16	;R (70)
    223  538c		       14		      .byte.b	20	;G
    224  538d		       00		      .byte.b	0	;B
    225  538e		       00		      .byte.b	0	;R (69)
    226  538f		       41		      .byte.b	65	;G
    227  5390		       00		      .byte.b	0	;B
    228  5391		       00		      .byte.b	0	;R (68)
    229  5392		       08		      .byte.b	8	;G
    230  5393		       00		      .byte.b	0	;B
    231  5394		       20		      .byte.b	32	;R (67)
    232  5395		       20		      .byte.b	32	;G
    233  5396		       00		      .byte.b	0	;B
    234  5397		       63		      .byte.b	99	;R (66)
    235  5398		       6b		      .byte.b	107	;G
    236  5399		       00		      .byte.b	0	;B
    237  539a		       ff		      .byte.b	255	;R (65)
    238  539b		       f5		      .byte.b	245	;G
    239  539c		       00		      .byte.b	0	;B
    240  539d		       80		      .byte.b	128	;R (64)
    241  539e		       fb		      .byte.b	251	;G
    242  539f		       04		      .byte.b	4	;B
    243  53a0		       00		      .byte.b	0	;R (63)
    244  53a1		       b7		      .byte.b	183	;G
    245  53a2		       00		      .byte.b	0	;B
    246  53a3		       00		      .byte.b	0	;R (62)
    247  53a4		       b5		      .byte.b	181	;G
    248  53a5		       00		      .byte.b	0	;B
    249  53a6		       00		      .byte.b	0	;R (61)
    250  53a7		       ef		      .byte.b	239	;G
    251  53a8		       10		      .byte.b	16	;B
    252  53a9		       00		      .byte.b	0	;R (60)
    253  53aa		       bd		      .byte.b	189	;G
    254  53ab		       42		      .byte.b	66	;B
    255  53ac		       00		      .byte.b	0	;R (59)
    256  53ad		       77		      .byte.b	119	;G
    257  53ae		       00		      .byte.b	0	;B
    258  53af		       00		      .byte.b	0	;R (58)
    259  53b0		       ee		      .byte.b	238	;G
    260  53b1		       00		      .byte.b	0	;B
    261  53b2		       00		      .byte.b	0	;R (57)
    262  53b3		       9b		      .byte.b	155	;G
    263  53b4		       00		      .byte.b	0	;B
    264  53b5		       00		      .byte.b	0	;R (56)
    265  53b6		       f2		      .byte.b	242	;G
    266  53b7		       00		      .byte.b	0	;B
    267  53b8		       00		      .byte.b	0	;R (55)
    268  53b9		       40		      .byte.b	64	;G
    269  53ba		       00		      .byte.b	0	;B
    270  53bb		       00		      .byte.b	0	;R (54)
    271  53bc		       df		      .byte.b	223	;G
    272  53bd		       00		      .byte.b	0	;B
    273  53be		       10		      .byte.b	16	;R (53)
    274  53bf		       69		      .byte.b	105	;G
    275  53c0		       10		      .byte.b	16	;B
    276  53c1		       00		      .byte.b	0	;R (52)
    277  53c2		       4b		      .byte.b	75	;G
    278  53c3		       00		      .byte.b	0	;B
    279  53c4		       00		      .byte.b	0	;R (51)
    280  53c5		       b0		      .byte.b	176	;G
    281  53c6		       00		      .byte.b	0	;B
    282  53c7		       00		      .byte.b	0	;R (50)
    283  53c8		       a7		      .byte.b	167	;G
    284  53c9		       00		      .byte.b	0	;B
    285  53ca		       00		      .byte.b	0	;R (49)
    286  53cb		       7d		      .byte.b	125	;G
    287  53cc		       02		      .byte.b	2	;B
    288  53cd		       00		      .byte.b	0	;R (48)
    289  53ce		       db		      .byte.b	219	;G
    290  53cf		       20		      .byte.b	32	;B
    291  53d0		       00		      .byte.b	0	;R (47)
    292  53d1		       6d		      .byte.b	109	;G
    293  53d2		       00		      .byte.b	0	;B
    294  53d3		       00		      .byte.b	0	;R (46)
    295  53d4		       ea		      .byte.b	234	;G
    296  53d5		       00		      .byte.b	0	;B
    297  53d6		       00		      .byte.b	0	;R (45)
    298  53d7		       13		      .byte.b	19	;G
    299  53d8		       00		      .byte.b	0	;B
    300  53d9		       00		      .byte.b	0	;R (44)
    301  53da		       7e		      .byte.b	126	;G
    302  53db		       01		      .byte.b	1	;B
    303  53dc		       22		      .byte.b	34	;R (43)
    304  53dd		       77		      .byte.b	119	;G
    305  53de		       08		      .byte.b	8	;B
    306  53df		       04		      .byte.b	4	;R (42)
    307  53e0		       5f		      .byte.b	95	;G
    308  53e1		       00		      .byte.b	0	;B
    309  53e2		       00		      .byte.b	0	;R (41)
    310  53e3		       6f		      .byte.b	111	;G
    311  53e4		       00		      .byte.b	0	;B
    312  53e5		       00		      .byte.b	0	;R (40)
    313  53e6		       b5		      .byte.b	181	;G
    314  53e7		       00		      .byte.b	0	;B
    315  53e8		       00		      .byte.b	0	;R (39)
    316  53e9		       5b		      .byte.b	91	;G
    317  53ea		       00		      .byte.b	0	;B
    318  53eb		       00		      .byte.b	0	;R (38)
    319  53ec		       57		      .byte.b	87	;G
    320  53ed		       00		      .byte.b	0	;B
    321  53ee		       20		      .byte.b	32	;R (37)
    322  53ef		       4d		      .byte.b	77	;G
    323  53f0		       22		      .byte.b	34	;B
    324  53f1		       00		      .byte.b	0	;R (36)
    325  53f2		       55		      .byte.b	85	;G
    326  53f3		       00		      .byte.b	0	;B
    327  53f4		       01		      .byte.b	1	;R (35)
    328  53f5		       56		      .byte.b	86	;G
    329  53f6		       00		      .byte.b	0	;B
    330  53f7		       02		      .byte.b	2	;R (34)
    331  53f8		       57		      .byte.b	87	;G
    332  53f9		       00		      .byte.b	0	;B
    333  53fa		       00		      .byte.b	0	;R (33)
    334  53fb		       2a		      .byte.b	42	;G
    335  53fc		       01		      .byte.b	1	;B
    336  53fd		       01		      .byte.b	1	;R (32)
    337  53fe		       ab		      .byte.b	171	;G
    338  53ff		       00		      .byte.b	0	;B
    339  5400		       22		      .byte.b	34	;R (31)
    340  5401		       17		      .byte.b	23	;G
    341  5402		       20		      .byte.b	32	;B
    342  5403		       00		      .byte.b	0	;R (30)
    343  5404		       55		      .byte.b	85	;G
    344  5405		       02		      .byte.b	2	;B
    345  5406		       22		      .byte.b	34	;R (29)
    346  5407		       17		      .byte.b	23	;G
    347  5408		       20		      .byte.b	32	;B
    348  5409		       00		      .byte.b	0	;R (28)
    349  540a		       2b		      .byte.b	43	;G
    350  540b		       00		      .byte.b	0	;B
    351  540c		       00		      .byte.b	0	;R (27)
    352  540d		       95		      .byte.b	149	;G
    353  540e		       02		      .byte.b	2	;B
    354  540f		       00		      .byte.b	0	;R (26)
    355  5410		       17		      .byte.b	23	;G
    356  5411		       00		      .byte.b	0	;B
    357  5412		       00		      .byte.b	0	;R (25)
    358  5413		       2d		      .byte.b	45	;G
    359  5414		       00		      .byte.b	0	;B
    360  5415		       00		      .byte.b	0	;R (24)
    361  5416		       b4		      .byte.b	180	;G
    362  5417		       00		      .byte.b	0	;B
    363  5418		       00		      .byte.b	0	;R (23)
    364  5419		       0a		      .byte.b	10	;G
    365  541a		       00		      .byte.b	0	;B
    366  541b		       10		      .byte.b	16	;R (22)
    367  541c		       3c		      .byte.b	60	;G
    368  541d		       00		      .byte.b	0	;B
    369  541e		       10		      .byte.b	16	;R (21)
    370  541f		       98		      .byte.b	152	;G
    371  5420		       00		      .byte.b	0	;B
    372  5421		       10		      .byte.b	16	;R (20)
    373  5422		       1a		      .byte.b	26	;G
    374  5423		       00		      .byte.b	0	;B
    375  5424		       00		      .byte.b	0	;R (19)
    376  5425		       14		      .byte.b	20	;G
    377  5426		       00		      .byte.b	0	;B
    378  5427		       00		      .byte.b	0	;R (18)
    379  5428		       5a		      .byte.b	90	;G
    380  5429		       00		      .byte.b	0	;B
    381  542a		       00		      .byte.b	0	;R (17)
    382  542b		       09		      .byte.b	9	;G
    383  542c		       00		      .byte.b	0	;B
    384  542d		       08		      .byte.b	8	;R (16)
    385  542e		       1d		      .byte.b	29	;G
    386  542f		       00		      .byte.b	0	;B
    387  5430		       00		      .byte.b	0	;R (15)
    388  5431		       1a		      .byte.b	26	;G
    389  5432		       00		      .byte.b	0	;B
    390  5433		       20		      .byte.b	32	;R (14)
    391  5434		       ba		      .byte.b	186	;G
    392  5435		       00		      .byte.b	0	;B
    393  5436		       00		      .byte.b	0	;R (13)
    394  5437		       12		      .byte.b	18	;G
    395  5438		       00		      .byte.b	0	;B
    396  5439		       00		      .byte.b	0	;R (12)
    397  543a		       1a		      .byte.b	26	;G
    398  543b		       00		      .byte.b	0	;B
    399  543c		       00		      .byte.b	0	;R (11)
    400  543d		       2d		      .byte.b	45	;G
    401  543e		       10		      .byte.b	16	;B
    402  543f		       10		      .byte.b	16	;R (10)
    403  5440		       3b		      .byte.b	59	;G
    404  5441		       00		      .byte.b	0	;B
    405  5442		       24		      .byte.b	36	;R (9)
    406  5443		       39		      .byte.b	57	;G
    407  5444		       04		      .byte.b	4	;B
    408  5445		       20		      .byte.b	32	;R (8)
    409  5446		       35		      .byte.b	53	;G
    410  5447		       00		      .byte.b	0	;B
    411  5448		       00		      .byte.b	0	;R (7)
    412  5449		       3d		      .byte.b	61	;G
    413  544a		       00		      .byte.b	0	;B
    414  544b		       00		      .byte.b	0	;R (6)
    415  544c		       32		      .byte.b	50	;G
    416  544d		       00		      .byte.b	0	;B
    417  544e		       00		      .byte.b	0	;R (5)
    418  544f		       98		      .byte.b	152	;G
    419  5450		       00		      .byte.b	0	;B
    420  5451		       00		      .byte.b	0	;R (4)
    421  5452		       12		      .byte.b	18	;G
    422  5453		       00		      .byte.b	0	;B
    423  5454		       00		      .byte.b	0	;R (3)
    424  5455		       20		      .byte.b	32	;G
    425  5456		       00		      .byte.b	0	;B
    426  5457		       01		      .byte.b	1	;R (2)
    427  5458		       49		      .byte.b	73	;G
    428  5459		       00		      .byte.b	0	;B
    429  545a		       20		      .byte.b	32	;R (1)
    430  545b		       20		      .byte.b	32	;G
    431  545c		       00		      .byte.b	0	;B
    432  545d		       00		      .byte.b	0	;R (0)
    433  545e		       00		      .byte.b	0	;G
    434  545f		       00		      .byte.b	0	;B
    435  5460				   COL_2
    436  5460		       14		      .byte.b	20	;R (71)
    437  5461		       14		      .byte.b	20	;G
    438  5462		       00		      .byte.b	0	;B
    439  5463		       40		      .byte.b	64	;R (70)
    440  5464		       42		      .byte.b	66	;G
    441  5465		       00		      .byte.b	0	;B
    442  5466		       a8		      .byte.b	168	;R (69)
    443  5467		       a8		      .byte.b	168	;G
    444  5468		       00		      .byte.b	0	;B
    445  5469		       fd		      .byte.b	253	;R (68)
    446  546a		       1d		      .byte.b	29	;G
    447  546b		       00		      .byte.b	0	;B
    448  546c		       f0		      .byte.b	240	;R (67)
    449  546d		       44		      .byte.b	68	;G
    450  546e		       08		      .byte.b	8	;B
    451  546f		       ff		      .byte.b	255	;R (66)
    452  5470		       2f		      .byte.b	47	;G
    453  5471		       00		      .byte.b	0	;B
    454  5472		       ff		      .byte.b	255	;R (65)
    455  5473		       0e		      .byte.b	14	;G
    456  5474		       00		      .byte.b	0	;B
    457  5475		       f8		      .byte.b	248	;R (64)
    458  5476		       0f		      .byte.b	15	;G
    459  5477		       00		      .byte.b	0	;B
    460  5478		       f8		      .byte.b	248	;R (63)
    461  5479		       2e		      .byte.b	46	;G
    462  547a		       00		      .byte.b	0	;B
    463  547b		       f8		      .byte.b	248	;R (62)
    464  547c		       1e		      .byte.b	30	;G
    465  547d		       01		      .byte.b	1	;B
    466  547e		       74		      .byte.b	116	;R (61)
    467  547f		       23		      .byte.b	35	;G
    468  5480		       88		      .byte.b	136	;B
    469  5481		       fc		      .byte.b	252	;R (60)
    470  5482		       0f		      .byte.b	15	;G
    471  5483		       00		      .byte.b	0	;B
    472  5484		       f8		      .byte.b	248	;R (59)
    473  5485		       06		      .byte.b	6	;G
    474  5486		       01		      .byte.b	1	;B
    475  5487		       f8		      .byte.b	248	;R (58)
    476  5488		       8f		      .byte.b	143	;G
    477  5489		       00		      .byte.b	0	;B
    478  548a		       e8		      .byte.b	232	;R (57)
    479  548b		       0e		      .byte.b	14	;G
    480  548c		       10		      .byte.b	16	;B
    481  548d		       e0		      .byte.b	224	;R (56)
    482  548e		       97		      .byte.b	151	;G
    483  548f		       00		      .byte.b	0	;B
    484  5490		       f0		      .byte.b	240	;R (55)
    485  5491		       3a		      .byte.b	58	;G
    486  5492		       00		      .byte.b	0	;B
    487  5493		       e0		      .byte.b	224	;R (54)
    488  5494		       bb		      .byte.b	187	;G
    489  5495		       04		      .byte.b	4	;B
    490  5496		       e0		      .byte.b	224	;R (53)
    491  5497		       3e		      .byte.b	62	;G
    492  5498		       00		      .byte.b	0	;B
    493  5499		       c0		      .byte.b	192	;R (52)
    494  549a		       2a		      .byte.b	42	;G
    495  549b		       00		      .byte.b	0	;B
    496  549c		       80		      .byte.b	128	;R (51)
    497  549d		       3f		      .byte.b	63	;G
    498  549e		       40		      .byte.b	64	;B
    499  549f		       f5		      .byte.b	245	;R (50)
    500  54a0		       3f		      .byte.b	63	;G
    501  54a1		       00		      .byte.b	0	;B
    502  54a2		       e8		      .byte.b	232	;R (49)
    503  54a3		       7f		      .byte.b	127	;G
    504  54a4		       00		      .byte.b	0	;B
    505  54a5		       e0		      .byte.b	224	;R (48)
    506  54a6		       7a		      .byte.b	122	;G
    507  54a7		       04		      .byte.b	4	;B
    508  54a8		       c0		      .byte.b	192	;R (47)
    509  54a9		       5f		      .byte.b	95	;G
    510  54aa		       00		      .byte.b	0	;B
    511  54ab		       90		      .byte.b	144	;R (46)
    512  54ac		       dd		      .byte.b	221	;G
    513  54ad		       02		      .byte.b	2	;B
    514  54ae		       84		      .byte.b	132	;R (45)
    515  54af		       9f		      .byte.b	159	;G
    516  54b0		       00		      .byte.b	0	;B
    517  54b1		       c4		      .byte.b	196	;R (44)
    518  54b2		       cf		      .byte.b	207	;G
    519  54b3		       00		      .byte.b	0	;B
    520  54b4		       c5		      .byte.b	197	;R (43)
    521  54b5		       1f		      .byte.b	31	;G
    522  54b6		       00		      .byte.b	0	;B
    523  54b7		       d4		      .byte.b	212	;R (42)
    524  54b8		       9f		      .byte.b	159	;G
    525  54b9		       20		      .byte.b	32	;B
    526  54ba		       c8		      .byte.b	200	;R (41)
    527  54bb		       1e		      .byte.b	30	;G
    528  54bc		       01		      .byte.b	1	;B
    529  54bd		       c8		      .byte.b	200	;R (40)
    530  54be		       5f		      .byte.b	95	;G
    531  54bf		       00		      .byte.b	0	;B
    532  54c0		       cd		      .byte.b	205	;R (39)
    533  54c1		       5e		      .byte.b	94	;G
    534  54c2		       00		      .byte.b	0	;B
    535  54c3		       c7		      .byte.b	199	;R (38)
    536  54c4		       5b		      .byte.b	91	;G
    537  54c5		       00		      .byte.b	0	;B
    538  54c6		       8b		      .byte.b	139	;R (37)
    539  54c7		       1c		      .byte.b	28	;G
    540  54c8		       00		      .byte.b	0	;B
    541  54c9		       81		      .byte.b	129	;R (36)
    542  54ca		       9a		      .byte.b	154	;G
    543  54cb		       04		      .byte.b	4	;B
    544  54cc		       8e		      .byte.b	142	;R (35)
    545  54cd		       9d		      .byte.b	157	;G
    546  54ce		       00		      .byte.b	0	;B
    547  54cf		       2b		      .byte.b	43	;R (34)
    548  54d0		       36		      .byte.b	54	;G
    549  54d1		       00		      .byte.b	0	;B
    550  54d2		       3a		      .byte.b	58	;R (33)
    551  54d3		       0d		      .byte.b	13	;G
    552  54d4		       00		      .byte.b	0	;B
    553  54d5		       3e		      .byte.b	62	;R (32)
    554  54d6		       85		      .byte.b	133	;G
    555  54d7		       40		      .byte.b	64	;B
    556  54d8		       fa		      .byte.b	250	;R (31)
    557  54d9		       17		      .byte.b	23	;G
    558  54da		       00		      .byte.b	0	;B
    559  54db		       ff		      .byte.b	255	;R (30)
    560  54dc		       03		      .byte.b	3	;G
    561  54dd		       00		      .byte.b	0	;B
    562  54de		       fc		      .byte.b	252	;R (29)
    563  54df		       93		      .byte.b	147	;G
    564  54e0		       00		      .byte.b	0	;B
    565  54e1		       f7		      .byte.b	247	;R (28)
    566  54e2		       81		      .byte.b	129	;G
    567  54e3		       08		      .byte.b	8	;B
    568  54e4		       ff		      .byte.b	255	;R (27)
    569  54e5		       03		      .byte.b	3	;G
    570  54e6		       00		      .byte.b	0	;B
    571  54e7		       fe		      .byte.b	254	;R (26)
    572  54e8		       2b		      .byte.b	43	;G
    573  54e9		       00		      .byte.b	0	;B
    574  54ea		       fe		      .byte.b	254	;R (25)
    575  54eb		       0a		      .byte.b	10	;G
    576  54ec		       00		      .byte.b	0	;B
    577  54ed		       fc		      .byte.b	252	;R (24)
    578  54ee		       4f		      .byte.b	79	;G
    579  54ef		       00		      .byte.b	0	;B
    580  54f0		       fc		      .byte.b	252	;R (23)
    581  54f1		       55		      .byte.b	85	;G
    582  54f2		       00		      .byte.b	0	;B
    583  54f3		       f8		      .byte.b	248	;R (22)
    584  54f4		       45		      .byte.b	69	;G
    585  54f5		       00		      .byte.b	0	;B
    586  54f6		       e8		      .byte.b	232	;R (21)
    587  54f7		       05		      .byte.b	5	;G
    588  54f8		       10		      .byte.b	16	;B
    589  54f9		       f8		      .byte.b	248	;R (20)
    590  54fa		       5b		      .byte.b	91	;G
    591  54fb		       00		      .byte.b	0	;B
    592  54fc		       f8		      .byte.b	248	;R (19)
    593  54fd		       1d		      .byte.b	29	;G
    594  54fe		       00		      .byte.b	0	;B
    595  54ff		       f0		      .byte.b	240	;R (18)
    596  5500		       55		      .byte.b	85	;G
    597  5501		       00		      .byte.b	0	;B
    598  5502		       f0		      .byte.b	240	;R (17)
    599  5503		       16		      .byte.b	22	;G
    600  5504		       00		      .byte.b	0	;B
    601  5505		       f0		      .byte.b	240	;R (16)
    602  5506		       b2		      .byte.b	178	;G
    603  5507		       00		      .byte.b	0	;B
    604  5508		       e0		      .byte.b	224	;R (15)
    605  5509		       0e		      .byte.b	14	;G
    606  550a		       10		      .byte.b	16	;B
    607  550b		       f0		      .byte.b	240	;R (14)
    608  550c		       93		      .byte.b	147	;G
    609  550d		       00		      .byte.b	0	;B
    610  550e		       e0		      .byte.b	224	;R (13)
    611  550f		       25		      .byte.b	37	;G
    612  5510		       00		      .byte.b	0	;B
    613  5511		       c0		      .byte.b	192	;R (12)
    614  5512		       e5		      .byte.b	229	;G
    615  5513		       00		      .byte.b	0	;B
    616  5514		       80		      .byte.b	128	;R (11)
    617  5515		       0e		      .byte.b	14	;G
    618  5516		       00		      .byte.b	0	;B
    619  5517		       c0		      .byte.b	192	;R (10)
    620  5518		       ca		      .byte.b	202	;G
    621  5519		       00		      .byte.b	0	;B
    622  551a		       84		      .byte.b	132	;R (9)
    623  551b		       8e		      .byte.b	142	;G
    624  551c		       00		      .byte.b	0	;B
    625  551d		       00		      .byte.b	0	;R (8)
    626  551e		       8e		      .byte.b	142	;G
    627  551f		       00		      .byte.b	0	;B
    628  5520		       00		      .byte.b	0	;R (7)
    629  5521		       15		      .byte.b	21	;G
    630  5522		       00		      .byte.b	0	;B
    631  5523		       00		      .byte.b	0	;R (6)
    632  5524		       14		      .byte.b	20	;G
    633  5525		       00		      .byte.b	0	;B
    634  5526		       00		      .byte.b	0	;R (5)
    635  5527		       14		      .byte.b	20	;G
    636  5528		       00		      .byte.b	0	;B
    637  5529		       00		      .byte.b	0	;R (4)
    638  552a		       0a		      .byte.b	10	;G
    639  552b		       00		      .byte.b	0	;B
    640  552c		       00		      .byte.b	0	;R (3)
    641  552d		       10		      .byte.b	16	;G
    642  552e		       00		      .byte.b	0	;B
    643  552f		       08		      .byte.b	8	;R (2)
    644  5530		       88		      .byte.b	136	;G
    645  5531		       00		      .byte.b	0	;B
    646  5532		       40		      .byte.b	64	;R (1)
    647  5533		       42		      .byte.b	66	;G
    648  5534		       00		      .byte.b	0	;B
    649  5535		       00		      .byte.b	0	;R (0)
    650  5536		       00		      .byte.b	0	;G
    651  5537		       00		      .byte.b	0	;B
    652  5538				   COL_3
    653  5538		       90		      .byte.b	144	;R (71)
    654  5539		       90		      .byte.b	144	;G
    655  553a		       00		      .byte.b	0	;B
    656  553b		       40		      .byte.b	64	;R (70)
    657  553c		       40		      .byte.b	64	;G
    658  553d		       00		      .byte.b	0	;B
    659  553e		       b0		      .byte.b	176	;R (69)
    660  553f		       b0		      .byte.b	176	;G
    661  5540		       00		      .byte.b	0	;B
    662  5541		       d0		      .byte.b	208	;R (68)
    663  5542		       00		      .byte.b	0	;G
    664  5543		       20		      .byte.b	32	;B
    665  5544		       f0		      .byte.b	240	;R (67)
    666  5545		       00		      .byte.b	0	;G
    667  5546		       00		      .byte.b	0	;B
    668  5547		       f0		      .byte.b	240	;R (66)
    669  5548		       d0		      .byte.b	208	;G
    670  5549		       00		      .byte.b	0	;B
    671  554a		       f0		      .byte.b	240	;R (65)
    672  554b		       00		      .byte.b	0	;G
    673  554c		       00		      .byte.b	0	;B
    674  554d		       f0		      .byte.b	240	;R (64)
    675  554e		       00		      .byte.b	0	;G
    676  554f		       00		      .byte.b	0	;B
    677  5550		       f0		      .byte.b	240	;R (63)
    678  5551		       50		      .byte.b	80	;G
    679  5552		       00		      .byte.b	0	;B
    680  5553		       f0		      .byte.b	240	;R (62)
    681  5554		       00		      .byte.b	0	;G
    682  5555		       00		      .byte.b	0	;B
    683  5556		       f0		      .byte.b	240	;R (61)
    684  5557		       a0		      .byte.b	160	;G
    685  5558		       00		      .byte.b	0	;B
    686  5559		       f0		      .byte.b	240	;R (60)
    687  555a		       00		      .byte.b	0	;G
    688  555b		       00		      .byte.b	0	;B
    689  555c		       f0		      .byte.b	240	;R (59)
    690  555d		       d0		      .byte.b	208	;G
    691  555e		       00		      .byte.b	0	;B
    692  555f		       f0		      .byte.b	240	;R (58)
    693  5560		       c0		      .byte.b	192	;G
    694  5561		       00		      .byte.b	0	;B
    695  5562		       f0		      .byte.b	240	;R (57)
    696  5563		       90		      .byte.b	144	;G
    697  5564		       00		      .byte.b	0	;B
    698  5565		       f0		      .byte.b	240	;R (56)
    699  5566		       80		      .byte.b	128	;G
    700  5567		       00		      .byte.b	0	;B
    701  5568		       f0		      .byte.b	240	;R (55)
    702  5569		       40		      .byte.b	64	;G
    703  556a		       00		      .byte.b	0	;B
    704  556b		       70		      .byte.b	112	;R (54)
    705  556c		       00		      .byte.b	0	;G
    706  556d		       80		      .byte.b	128	;B
    707  556e		       d0		      .byte.b	208	;R (53)
    708  556f		       00		      .byte.b	0	;G
    709  5570		       20		      .byte.b	32	;B
    710  5571		       f0		      .byte.b	240	;R (52)
    711  5572		       80		      .byte.b	128	;G
    712  5573		       00		      .byte.b	0	;B
    713  5574		       f0		      .byte.b	240	;R (51)
    714  5575		       00		      .byte.b	0	;G
    715  5576		       00		      .byte.b	0	;B
    716  5577		       f0		      .byte.b	240	;R (50)
    717  5578		       a0		      .byte.b	160	;G
    718  5579		       00		      .byte.b	0	;B
    719  557a		       f0		      .byte.b	240	;R (49)
    720  557b		       80		      .byte.b	128	;G
    721  557c		       00		      .byte.b	0	;B
    722  557d		       f0		      .byte.b	240	;R (48)
    723  557e		       40		      .byte.b	64	;G
    724  557f		       00		      .byte.b	0	;B
    725  5580		       f0		      .byte.b	240	;R (47)
    726  5581		       20		      .byte.b	32	;G
    727  5582		       00		      .byte.b	0	;B
    728  5583		       f0		      .byte.b	240	;R (46)
    729  5584		       00		      .byte.b	0	;G
    730  5585		       00		      .byte.b	0	;B
    731  5586		       f0		      .byte.b	240	;R (45)
    732  5587		       80		      .byte.b	128	;G
    733  5588		       00		      .byte.b	0	;B
    734  5589		       f0		      .byte.b	240	;R (44)
    735  558a		       00		      .byte.b	0	;G
    736  558b		       00		      .byte.b	0	;B
    737  558c		       f0		      .byte.b	240	;R (43)
    738  558d		       40		      .byte.b	64	;G
    739  558e		       00		      .byte.b	0	;B
    740  558f		       f0		      .byte.b	240	;R (42)
    741  5590		       00		      .byte.b	0	;G
    742  5591		       00		      .byte.b	0	;B
    743  5592		       f0		      .byte.b	240	;R (41)
    744  5593		       20		      .byte.b	32	;G
    745  5594		       00		      .byte.b	0	;B
    746  5595		       f0		      .byte.b	240	;R (40)
    747  5596		       20		      .byte.b	32	;G
    748  5597		       00		      .byte.b	0	;B
    749  5598		       f0		      .byte.b	240	;R (39)
    750  5599		       50		      .byte.b	80	;G
    751  559a		       00		      .byte.b	0	;B
    752  559b		       f0		      .byte.b	240	;R (38)
    753  559c		       10		      .byte.b	16	;G
    754  559d		       00		      .byte.b	0	;B
    755  559e		       70		      .byte.b	112	;R (37)
    756  559f		       80		      .byte.b	128	;G
    757  55a0		       80		      .byte.b	128	;B
    758  55a1		       f0		      .byte.b	240	;R (36)
    759  55a2		       50		      .byte.b	80	;G
    760  55a3		       00		      .byte.b	0	;B
    761  55a4		       f0		      .byte.b	240	;R (35)
    762  55a5		       00		      .byte.b	0	;G
    763  55a6		       00		      .byte.b	0	;B
    764  55a7		       f0		      .byte.b	240	;R (34)
    765  55a8		       40		      .byte.b	64	;G
    766  55a9		       00		      .byte.b	0	;B
    767  55aa		       f0		      .byte.b	240	;R (33)
    768  55ab		       10		      .byte.b	16	;G
    769  55ac		       00		      .byte.b	0	;B
    770  55ad		       f0		      .byte.b	240	;R (32)
    771  55ae		       b0		      .byte.b	176	;G
    772  55af		       00		      .byte.b	0	;B
    773  55b0		       e0		      .byte.b	224	;R (31)
    774  55b1		       00		      .byte.b	0	;G
    775  55b2		       10		      .byte.b	16	;B
    776  55b3		       e0		      .byte.b	224	;R (30)
    777  55b4		       40		      .byte.b	64	;G
    778  55b5		       00		      .byte.b	0	;B
    779  55b6		       e0		      .byte.b	224	;R (29)
    780  55b7		       20		      .byte.b	32	;G
    781  55b8		       00		      .byte.b	0	;B
    782  55b9		       c0		      .byte.b	192	;R (28)
    783  55ba		       00		      .byte.b	0	;G
    784  55bb		       00		      .byte.b	0	;B
    785  55bc		       c0		      .byte.b	192	;R (27)
    786  55bd		       10		      .byte.b	16	;G
    787  55be		       00		      .byte.b	0	;B
    788  55bf		       c0		      .byte.b	192	;R (26)
    789  55c0		       40		      .byte.b	64	;G
    790  55c1		       10		      .byte.b	16	;B
    791  55c2		       90		      .byte.b	144	;R (25)
    792  55c3		       00		      .byte.b	0	;G
    793  55c4		       00		      .byte.b	0	;B
    794  55c5		       f0		      .byte.b	240	;R (24)
    795  55c6		       60		      .byte.b	96	;G
    796  55c7		       00		      .byte.b	0	;B
    797  55c8		       f0		      .byte.b	240	;R (23)
    798  55c9		       00		      .byte.b	0	;G
    799  55ca		       00		      .byte.b	0	;B
    800  55cb		       f0		      .byte.b	240	;R (22)
    801  55cc		       40		      .byte.b	64	;G
    802  55cd		       00		      .byte.b	0	;B
    803  55ce		       f0		      .byte.b	240	;R (21)
    804  55cf		       10		      .byte.b	16	;G
    805  55d0		       00		      .byte.b	0	;B
    806  55d1		       f0		      .byte.b	240	;R (20)
    807  55d2		       00		      .byte.b	0	;G
    808  55d3		       00		      .byte.b	0	;B
    809  55d4		       f0		      .byte.b	240	;R (19)
    810  55d5		       60		      .byte.b	96	;G
    811  55d6		       00		      .byte.b	0	;B
    812  55d7		       f0		      .byte.b	240	;R (18)
    813  55d8		       20		      .byte.b	32	;G
    814  55d9		       00		      .byte.b	0	;B
    815  55da		       f0		      .byte.b	240	;R (17)
    816  55db		       50		      .byte.b	80	;G
    817  55dc		       00		      .byte.b	0	;B
    818  55dd		       f0		      .byte.b	240	;R (16)
    819  55de		       40		      .byte.b	64	;G
    820  55df		       00		      .byte.b	0	;B
    821  55e0		       f0		      .byte.b	240	;R (15)
    822  55e1		       80		      .byte.b	128	;G
    823  55e2		       00		      .byte.b	0	;B
    824  55e3		       f0		      .byte.b	240	;R (14)
    825  55e4		       40		      .byte.b	64	;G
    826  55e5		       00		      .byte.b	0	;B
    827  55e6		       f0		      .byte.b	240	;R (13)
    828  55e7		       00		      .byte.b	0	;G
    829  55e8		       00		      .byte.b	0	;B
    830  55e9		       f0		      .byte.b	240	;R (12)
    831  55ea		       10		      .byte.b	16	;G
    832  55eb		       00		      .byte.b	0	;B
    833  55ec		       f0		      .byte.b	240	;R (11)
    834  55ed		       50		      .byte.b	80	;G
    835  55ee		       00		      .byte.b	0	;B
    836  55ef		       f0		      .byte.b	240	;R (10)
    837  55f0		       00		      .byte.b	0	;G
    838  55f1		       00		      .byte.b	0	;B
    839  55f2		       f0		      .byte.b	240	;R (9)
    840  55f3		       b0		      .byte.b	176	;G
    841  55f4		       00		      .byte.b	0	;B
    842  55f5		       f0		      .byte.b	240	;R (8)
    843  55f6		       90		      .byte.b	144	;G
    844  55f7		       00		      .byte.b	0	;B
    845  55f8		       e0		      .byte.b	224	;R (7)
    846  55f9		       e0		      .byte.b	224	;G
    847  55fa		       00		      .byte.b	0	;B
    848  55fb		       f0		      .byte.b	240	;R (6)
    849  55fc		       d0		      .byte.b	208	;G
    850  55fd		       00		      .byte.b	0	;B
    851  55fe		       60		      .byte.b	96	;R (5)
    852  55ff		       00		      .byte.b	0	;G
    853  5600		       00		      .byte.b	0	;B
    854  5601		       60		      .byte.b	96	;R (4)
    855  5602		       40		      .byte.b	64	;G
    856  5603		       00		      .byte.b	0	;B
    857  5604		       40		      .byte.b	64	;R (3)
    858  5605		       50		      .byte.b	80	;G
    859  5606		       00		      .byte.b	0	;B
    860  5607		       00		      .byte.b	0	;R (2)
    861  5608		       00		      .byte.b	0	;G
    862  5609		       00		      .byte.b	0	;B
    863  560a		       00		      .byte.b	0	;R (1)
    864  560b		       80		      .byte.b	128	;G
    865  560c		       00		      .byte.b	0	;B
    866  560d		       00		      .byte.b	0	;R (0)
    867  560e		       00		      .byte.b	0	;G
    868  560f		       00		      .byte.b	0	;B
    869  5610				   COL_4
    870  5610		       25		      .byte.b	37	;R (71)
    871  5611		       25		      .byte.b	37	;G
    872  5612		       00		      .byte.b	0	;B
    873  5613		       48		      .byte.b	72	;R (70)
    874  5614		       48		      .byte.b	72	;G
    875  5615		       00		      .byte.b	0	;B
    876  5616		       25		      .byte.b	37	;R (69)
    877  5617		       25		      .byte.b	37	;G
    878  5618		       88		      .byte.b	136	;B
    879  5619		       ff		      .byte.b	255	;R (68)
    880  561a		       00		      .byte.b	0	;G
    881  561b		       00		      .byte.b	0	;B
    882  561c		       ff		      .byte.b	255	;R (67)
    883  561d		       04		      .byte.b	4	;G
    884  561e		       00		      .byte.b	0	;B
    885  561f		       ef		      .byte.b	239	;R (66)
    886  5620		       40		      .byte.b	64	;G
    887  5621		       10		      .byte.b	16	;B
    888  5622		       ff		      .byte.b	255	;R (65)
    889  5623		       00		      .byte.b	0	;G
    890  5624		       00		      .byte.b	0	;B
    891  5625		       ff		      .byte.b	255	;R (64)
    892  5626		       02		      .byte.b	2	;G
    893  5627		       00		      .byte.b	0	;B
    894  5628		       ff		      .byte.b	255	;R (63)
    895  5629		       20		      .byte.b	32	;G
    896  562a		       00		      .byte.b	0	;B
    897  562b		       ff		      .byte.b	255	;R (62)
    898  562c		       a5		      .byte.b	165	;G
    899  562d		       00		      .byte.b	0	;B
    900  562e		       ff		      .byte.b	255	;R (61)
    901  562f		       09		      .byte.b	9	;G
    902  5630		       00		      .byte.b	0	;B
    903  5631		       ff		      .byte.b	255	;R (60)
    904  5632		       00		      .byte.b	0	;G
    905  5633		       00		      .byte.b	0	;B
    906  5634		       7f		      .byte.b	127	;R (59)
    907  5635		       42		      .byte.b	66	;G
    908  5636		       80		      .byte.b	128	;B
    909  5637		       ff		      .byte.b	255	;R (58)
    910  5638		       88		      .byte.b	136	;G
    911  5639		       00		      .byte.b	0	;B
    912  563a		       ff		      .byte.b	255	;R (57)
    913  563b		       40		      .byte.b	64	;G
    914  563c		       00		      .byte.b	0	;B
    915  563d		       ff		      .byte.b	255	;R (56)
    916  563e		       09		      .byte.b	9	;G
    917  563f		       00		      .byte.b	0	;B
    918  5640		       7f		      .byte.b	127	;R (55)
    919  5641		       01		      .byte.b	1	;G
    920  5642		       80		      .byte.b	128	;B
    921  5643		       ff		      .byte.b	255	;R (54)
    922  5644		       91		      .byte.b	145	;G
    923  5645		       00		      .byte.b	0	;B
    924  5646		       fe		      .byte.b	254	;R (53)
    925  5647		       81		      .byte.b	129	;G
    926  5648		       00		      .byte.b	0	;B
    927  5649		       fe		      .byte.b	254	;R (52)
    928  564a		       20		      .byte.b	32	;G
    929  564b		       00		      .byte.b	0	;B
    930  564c		       ff		      .byte.b	255	;R (51)
    931  564d		       03		      .byte.b	3	;G
    932  564e		       00		      .byte.b	0	;B
    933  564f		       ff		      .byte.b	255	;R (50)
    934  5650		       83		      .byte.b	131	;G
    935  5651		       00		      .byte.b	0	;B
    936  5652		       fe		      .byte.b	254	;R (49)
    937  5653		       90		      .byte.b	144	;G
    938  5654		       00		      .byte.b	0	;B
    939  5655		       fe		      .byte.b	254	;R (48)
    940  5656		       83		      .byte.b	131	;G
    941  5657		       00		      .byte.b	0	;B
    942  5658		       7e		      .byte.b	126	;R (47)
    943  5659		       12		      .byte.b	18	;G
    944  565a		       80		      .byte.b	128	;B
    945  565b		       fc		      .byte.b	252	;R (46)
    946  565c		       00		      .byte.b	0	;G
    947  565d		       00		      .byte.b	0	;B
    948  565e		       fe		      .byte.b	254	;R (45)
    949  565f		       07		      .byte.b	7	;G
    950  5660		       00		      .byte.b	0	;B
    951  5661		       ef		      .byte.b	239	;R (44)
    952  5662		       03		      .byte.b	3	;G
    953  5663		       10		      .byte.b	16	;B
    954  5664		       ff		      .byte.b	255	;R (43)
    955  5665		       40		      .byte.b	64	;G
    956  5666		       00		      .byte.b	0	;B
    957  5667		       ff		      .byte.b	255	;R (42)
    958  5668		       01		      .byte.b	1	;G
    959  5669		       00		      .byte.b	0	;B
    960  566a		       ff		      .byte.b	255	;R (41)
    961  566b		       01		      .byte.b	1	;G
    962  566c		       00		      .byte.b	0	;B
    963  566d		       bf		      .byte.b	191	;R (40)
    964  566e		       01		      .byte.b	1	;G
    965  566f		       40		      .byte.b	64	;B
    966  5670		       f7		      .byte.b	247	;R (39)
    967  5671		       80		      .byte.b	128	;G
    968  5672		       08		      .byte.b	8	;B
    969  5673		       ff		      .byte.b	255	;R (38)
    970  5674		       40		      .byte.b	64	;G
    971  5675		       00		      .byte.b	0	;B
    972  5676		       ff		      .byte.b	255	;R (37)
    973  5677		       00		      .byte.b	0	;G
    974  5678		       00		      .byte.b	0	;B
    975  5679		       ff		      .byte.b	255	;R (36)
    976  567a		       40		      .byte.b	64	;G
    977  567b		       00		      .byte.b	0	;B
    978  567c		       ff		      .byte.b	255	;R (35)
    979  567d		       a1		      .byte.b	161	;G
    980  567e		       00		      .byte.b	0	;B
    981  567f		       7f		      .byte.b	127	;R (34)
    982  5680		       05		      .byte.b	5	;G
    983  5681		       80		      .byte.b	128	;B
    984  5682		       ff		      .byte.b	255	;R (33)
    985  5683		       21		      .byte.b	33	;G
    986  5684		       00		      .byte.b	0	;B
    987  5685		       bf		      .byte.b	191	;R (32)
    988  5686		       40		      .byte.b	64	;G
    989  5687		       40		      .byte.b	64	;B
    990  5688		       ff		      .byte.b	255	;R (31)
    991  5689		       61		      .byte.b	97	;G
    992  568a		       00		      .byte.b	0	;B
    993  568b		       7f		      .byte.b	127	;R (30)
    994  568c		       81		      .byte.b	129	;G
    995  568d		       80		      .byte.b	128	;B
    996  568e		       f7		      .byte.b	247	;R (29)
    997  568f		       60		      .byte.b	96	;G
    998  5690		       08		      .byte.b	8	;B
    999  5691		       ff		      .byte.b	255	;R (28)
   1000  5692		       81		      .byte.b	129	;G
   1001  5693		       00		      .byte.b	0	;B
   1002  5694		       ef		      .byte.b	239	;R (27)
   1003  5695		       40		      .byte.b	64	;G
   1004  5696		       10		      .byte.b	16	;B
   1005  5697		       ff		      .byte.b	255	;R (26)
   1006  5698		       60		      .byte.b	96	;G
   1007  5699		       00		      .byte.b	0	;B
   1008  569a		       ff		      .byte.b	255	;R (25)
   1009  569b		       18		      .byte.b	24	;G
   1010  569c		       00		      .byte.b	0	;B
   1011  569d		       ff		      .byte.b	255	;R (24)
   1012  569e		       20		      .byte.b	32	;G
   1013  569f		       00		      .byte.b	0	;B
   1014  56a0		       ff		      .byte.b	255	;R (23)
   1015  56a1		       8a		      .byte.b	138	;G
   1016  56a2		       00		      .byte.b	0	;B
   1017  56a3		       f7		      .byte.b	247	;R (22)
   1018  56a4		       10		      .byte.b	16	;G
   1019  56a5		       08		      .byte.b	8	;B
   1020  56a6		       ff		      .byte.b	255	;R (21)
   1021  56a7		       04		      .byte.b	4	;G
   1022  56a8		       00		      .byte.b	0	;B
   1023  56a9		       df		      .byte.b	223	;R (20)
   1024  56aa		       10		      .byte.b	16	;G
   1025  56ab		       20		      .byte.b	32	;B
   1026  56ac		       ff		      .byte.b	255	;R (19)
   1027  56ad		       90		      .byte.b	144	;G
   1028  56ae		       00		      .byte.b	0	;B
   1029  56af		       ff		      .byte.b	255	;R (18)
   1030  56b0		       12		      .byte.b	18	;G
   1031  56b1		       00		      .byte.b	0	;B
   1032  56b2		       ff		      .byte.b	255	;R (17)
   1033  56b3		       00		      .byte.b	0	;G
   1034  56b4		       00		      .byte.b	0	;B
   1035  56b5		       ff		      .byte.b	255	;R (16)
   1036  56b6		       45		      .byte.b	69	;G
   1037  56b7		       00		      .byte.b	0	;B
   1038  56b8		       ff		      .byte.b	255	;R (15)
   1039  56b9		       10		      .byte.b	16	;G
   1040  56ba		       00		      .byte.b	0	;B
   1041  56bb		       ff		      .byte.b	255	;R (14)
   1042  56bc		       23		      .byte.b	35	;G
   1043  56bd		       00		      .byte.b	0	;B
   1044  56be		       fc		      .byte.b	252	;R (13)
   1045  56bf		       12		      .byte.b	18	;G
   1046  56c0		       00		      .byte.b	0	;B
   1047  56c1		       fc		      .byte.b	252	;R (12)
   1048  56c2		       20		      .byte.b	32	;G
   1049  56c3		       00		      .byte.b	0	;B
   1050  56c4		       fe		      .byte.b	254	;R (11)
   1051  56c5		       46		      .byte.b	70	;G
   1052  56c6		       00		      .byte.b	0	;B
   1053  56c7		       f8		      .byte.b	248	;R (10)
   1054  56c8		       48		      .byte.b	72	;G
   1055  56c9		       00		      .byte.b	0	;B
   1056  56ca		       f0		      .byte.b	240	;R (9)
   1057  56cb		       04		      .byte.b	4	;G
   1058  56cc		       00		      .byte.b	0	;B
   1059  56cd		       e0		      .byte.b	224	;R (8)
   1060  56ce		       20		      .byte.b	32	;G
   1061  56cf		       00		      .byte.b	0	;B
   1062  56d0		       e0		      .byte.b	224	;R (7)
   1063  56d1		       29		      .byte.b	41	;G
   1064  56d2		       00		      .byte.b	0	;B
   1065  56d3		       e0		      .byte.b	224	;R (6)
   1066  56d4		       20		      .byte.b	32	;G
   1067  56d5		       00		      .byte.b	0	;B
   1068  56d6		       e0		      .byte.b	224	;R (5)
   1069  56d7		       84		      .byte.b	132	;G
   1070  56d8		       00		      .byte.b	0	;B
   1071  56d9		       60		      .byte.b	96	;R (4)
   1072  56da		       40		      .byte.b	64	;G
   1073  56db		       00		      .byte.b	0	;B
   1074  56dc		       00		      .byte.b	0	;R (3)
   1075  56dd		       88		      .byte.b	136	;G
   1076  56de		       00		      .byte.b	0	;B
   1077  56df		       00		      .byte.b	0	;R (2)
   1078  56e0		       11		      .byte.b	17	;G
   1079  56e1		       00		      .byte.b	0	;B
   1080  56e2		       24		      .byte.b	36	;R (1)
   1081  56e3		       24		      .byte.b	36	;G
   1082  56e4		       00		      .byte.b	0	;B
   1083  56e5		       00		      .byte.b	0	;R (0)
   1084  56e6		       00		      .byte.b	0	;G
   1085  56e7		       00		      .byte.b	0	;B
   1086  56e8				   COL_5
   1087  56e8		       02		      .byte.b	2	;R (71)
   1088  56e9		       12		      .byte.b	18	;G
   1089  56ea		       00		      .byte.b	0	;B
   1090  56eb		       00		      .byte.b	0	;R (70)
   1091  56ec		       00		      .byte.b	0	;G
   1092  56ed		       00		      .byte.b	0	;B
   1093  56ee		       00		      .byte.b	0	;R (69)
   1094  56ef		       02		      .byte.b	2	;G
   1095  56f0		       00		      .byte.b	0	;B
   1096  56f1		       03		      .byte.b	3	;R (68)
   1097  56f2		       12		      .byte.b	18	;G
   1098  56f3		       00		      .byte.b	0	;B
   1099  56f4		       0b		      .byte.b	11	;R (67)
   1100  56f5		       09		      .byte.b	9	;G
   1101  56f6		       00		      .byte.b	0	;B
   1102  56f7		       07		      .byte.b	7	;R (66)
   1103  56f8		       05		      .byte.b	5	;G
   1104  56f9		       00		      .byte.b	0	;B
   1105  56fa		       03		      .byte.b	3	;R (65)
   1106  56fb		       06		      .byte.b	6	;G
   1107  56fc		       00		      .byte.b	0	;B
   1108  56fd		       01		      .byte.b	1	;R (64)
   1109  56fe		       20		      .byte.b	32	;G
   1110  56ff		       00		      .byte.b	0	;B
   1111  5700		       03		      .byte.b	3	;R (63)
   1112  5701		       03		      .byte.b	3	;G
   1113  5702		       00		      .byte.b	0	;B
   1114  5703		       03		      .byte.b	3	;R (62)
   1115  5704		       0a		      .byte.b	10	;G
   1116  5705		       00		      .byte.b	0	;B
   1117  5706		       03		      .byte.b	3	;R (61)
   1118  5707		       02		      .byte.b	2	;G
   1119  5708		       00		      .byte.b	0	;B
   1120  5709		       03		      .byte.b	3	;R (60)
   1121  570a		       00		      .byte.b	0	;G
   1122  570b		       00		      .byte.b	0	;B
   1123  570c		       03		      .byte.b	3	;R (59)
   1124  570d		       0a		      .byte.b	10	;G
   1125  570e		       00		      .byte.b	0	;B
   1126  570f		       03		      .byte.b	3	;R (58)
   1127  5710		       02		      .byte.b	2	;G
   1128  5711		       00		      .byte.b	0	;B
   1129  5712		       01		      .byte.b	1	;R (57)
   1130  5713		       03		      .byte.b	3	;G
   1131  5714		       00		      .byte.b	0	;B
   1132  5715		       01		      .byte.b	1	;R (56)
   1133  5716		       01		      .byte.b	1	;G
   1134  5717		       00		      .byte.b	0	;B
   1135  5718		       00		      .byte.b	0	;R (55)
   1136  5719		       25		      .byte.b	37	;G
   1137  571a		       00		      .byte.b	0	;B
   1138  571b		       00		      .byte.b	0	;R (54)
   1139  571c		       00		      .byte.b	0	;G
   1140  571d		       00		      .byte.b	0	;B
   1141  571e		       00		      .byte.b	0	;R (53)
   1142  571f		       20		      .byte.b	32	;G
   1143  5720		       00		      .byte.b	0	;B
   1144  5721		       00		      .byte.b	0	;R (52)
   1145  5722		       08		      .byte.b	8	;G
   1146  5723		       00		      .byte.b	0	;B
   1147  5724		       00		      .byte.b	0	;R (51)
   1148  5725		       02		      .byte.b	2	;G
   1149  5726		       00		      .byte.b	0	;B
   1150  5727		       00		      .byte.b	0	;R (50)
   1151  5728		       40		      .byte.b	64	;G
   1152  5729		       00		      .byte.b	0	;B
   1153  572a		       00		      .byte.b	0	;R (49)
   1154  572b		       11		      .byte.b	17	;G
   1155  572c		       00		      .byte.b	0	;B
   1156  572d		       00		      .byte.b	0	;R (48)
   1157  572e		       00		      .byte.b	0	;G
   1158  572f		       00		      .byte.b	0	;B
   1159  5730		       00		      .byte.b	0	;R (47)
   1160  5731		       20		      .byte.b	32	;G
   1161  5732		       00		      .byte.b	0	;B
   1162  5733		       00		      .byte.b	0	;R (46)
   1163  5734		       08		      .byte.b	8	;G
   1164  5735		       00		      .byte.b	0	;B
   1165  5736		       00		      .byte.b	0	;R (45)
   1166  5737		       00		      .byte.b	0	;G
   1167  5738		       00		      .byte.b	0	;B
   1168  5739		       00		      .byte.b	0	;R (44)
   1169  573a		       24		      .byte.b	36	;G
   1170  573b		       00		      .byte.b	0	;B
   1171  573c		       00		      .byte.b	0	;R (43)
   1172  573d		       00		      .byte.b	0	;G
   1173  573e		       00		      .byte.b	0	;B
   1174  573f		       00		      .byte.b	0	;R (42)
   1175  5740		       04		      .byte.b	4	;G
   1176  5741		       00		      .byte.b	0	;B
   1177  5742		       00		      .byte.b	0	;R (41)
   1178  5743		       21		      .byte.b	33	;G
   1179  5744		       00		      .byte.b	0	;B
   1180  5745		       01		      .byte.b	1	;R (40)
   1181  5746		       01		      .byte.b	1	;G
   1182  5747		       00		      .byte.b	0	;B
   1183  5748		       01		      .byte.b	1	;R (39)
   1184  5749		       25		      .byte.b	37	;G
   1185  574a		       00		      .byte.b	0	;B
   1186  574b		       01		      .byte.b	1	;R (38)
   1187  574c		       01		      .byte.b	1	;G
   1188  574d		       00		      .byte.b	0	;B
   1189  574e		       03		      .byte.b	3	;R (37)
   1190  574f		       23		      .byte.b	35	;G
   1191  5750		       00		      .byte.b	0	;B
   1192  5751		       03		      .byte.b	3	;R (36)
   1193  5752		       13		      .byte.b	19	;G
   1194  5753		       00		      .byte.b	0	;B
   1195  5754		       01		      .byte.b	1	;R (35)
   1196  5755		       02		      .byte.b	2	;G
   1197  5756		       00		      .byte.b	0	;B
   1198  5757		       01		      .byte.b	1	;R (34)
   1199  5758		       10		      .byte.b	16	;G
   1200  5759		       00		      .byte.b	0	;B
   1201  575a		       03		      .byte.b	3	;R (33)
   1202  575b		       02		      .byte.b	2	;G
   1203  575c		       00		      .byte.b	0	;B
   1204  575d		       01		      .byte.b	1	;R (32)
   1205  575e		       08		      .byte.b	8	;G
   1206  575f		       00		      .byte.b	0	;B
   1207  5760		       03		      .byte.b	3	;R (31)
   1208  5761		       20		      .byte.b	32	;G
   1209  5762		       00		      .byte.b	0	;B
   1210  5763		       03		      .byte.b	3	;R (30)
   1211  5764		       00		      .byte.b	0	;G
   1212  5765		       00		      .byte.b	0	;B
   1213  5766		       03		      .byte.b	3	;R (29)
   1214  5767		       10		      .byte.b	16	;G
   1215  5768		       00		      .byte.b	0	;B
   1216  5769		       03		      .byte.b	3	;R (28)
   1217  576a		       00		      .byte.b	0	;G
   1218  576b		       00		      .byte.b	0	;B
   1219  576c		       07		      .byte.b	7	;R (27)
   1220  576d		       0e		      .byte.b	14	;G
   1221  576e		       00		      .byte.b	0	;B
   1222  576f		       03		      .byte.b	3	;R (26)
   1223  5770		       41		      .byte.b	65	;G
   1224  5771		       00		      .byte.b	0	;B
   1225  5772		       07		      .byte.b	7	;R (25)
   1226  5773		       04		      .byte.b	4	;G
   1227  5774		       00		      .byte.b	0	;B
   1228  5775		       03		      .byte.b	3	;R (24)
   1229  5776		       21		      .byte.b	33	;G
   1230  5777		       00		      .byte.b	0	;B
   1231  5778		       03		      .byte.b	3	;R (23)
   1232  5779		       04		      .byte.b	4	;G
   1233  577a		       00		      .byte.b	0	;B
   1234  577b		       03		      .byte.b	3	;R (22)
   1235  577c		       02		      .byte.b	2	;G
   1236  577d		       00		      .byte.b	0	;B
   1237  577e		       03		      .byte.b	3	;R (21)
   1238  577f		       26		      .byte.b	38	;G
   1239  5780		       00		      .byte.b	0	;B
   1240  5781		       01		      .byte.b	1	;R (20)
   1241  5782		       01		      .byte.b	1	;G
   1242  5783		       00		      .byte.b	0	;B
   1243  5784		       00		      .byte.b	0	;R (19)
   1244  5785		       21		      .byte.b	33	;G
   1245  5786		       00		      .byte.b	0	;B
   1246  5787		       01		      .byte.b	1	;R (18)
   1247  5788		       09		      .byte.b	9	;G
   1248  5789		       00		      .byte.b	0	;B
   1249  578a		       23		      .byte.b	35	;R (17)
   1250  578b		       22		      .byte.b	34	;G
   1251  578c		       00		      .byte.b	0	;B
   1252  578d		       01		      .byte.b	1	;R (16)
   1253  578e		       01		      .byte.b	1	;G
   1254  578f		       00		      .byte.b	0	;B
   1255  5790		       00		      .byte.b	0	;R (15)
   1256  5791		       29		      .byte.b	41	;G
   1257  5792		       00		      .byte.b	0	;B
   1258  5793		       00		      .byte.b	0	;R (14)
   1259  5794		       00		      .byte.b	0	;G
   1260  5795		       00		      .byte.b	0	;B
   1261  5796		       00		      .byte.b	0	;R (13)
   1262  5797		       04		      .byte.b	4	;G
   1263  5798		       00		      .byte.b	0	;B
   1264  5799		       00		      .byte.b	0	;R (12)
   1265  579a		       20		      .byte.b	32	;G
   1266  579b		       00		      .byte.b	0	;B
   1267  579c		       10		      .byte.b	16	;R (11)
   1268  579d		       12		      .byte.b	18	;G
   1269  579e		       00		      .byte.b	0	;B
   1270  579f		       00		      .byte.b	0	;R (10)
   1271  57a0		       00		      .byte.b	0	;G
   1272  57a1		       00		      .byte.b	0	;B
   1273  57a2		       00		      .byte.b	0	;R (9)
   1274  57a3		       21		      .byte.b	33	;G
   1275  57a4		       00		      .byte.b	0	;B
   1276  57a5		       00		      .byte.b	0	;R (8)
   1277  57a6		       08		      .byte.b	8	;G
   1278  57a7		       00		      .byte.b	0	;B
   1279  57a8		       00		      .byte.b	0	;R (7)
   1280  57a9		       20		      .byte.b	32	;G
   1281  57aa		       00		      .byte.b	0	;B
   1282  57ab		       00		      .byte.b	0	;R (6)
   1283  57ac		       04		      .byte.b	4	;G
   1284  57ad		       00		      .byte.b	0	;B
   1285  57ae		       20		      .byte.b	32	;R (5)
   1286  57af		       20		      .byte.b	32	;G
   1287  57b0		       00		      .byte.b	0	;B
   1288  57b1		       00		      .byte.b	0	;R (4)
   1289  57b2		       09		      .byte.b	9	;G
   1290  57b3		       00		      .byte.b	0	;B
   1291  57b4		       00		      .byte.b	0	;R (3)
   1292  57b5		       00		      .byte.b	0	;G
   1293  57b6		       00		      .byte.b	0	;B
   1294  57b7		       00		      .byte.b	0	;R (2)
   1295  57b8		       48		      .byte.b	72	;G
   1296  57b9		       00		      .byte.b	0	;B
   1297  57ba		       02		      .byte.b	2	;R (1)
   1298  57bb		       02		      .byte.b	2	;G
   1299  57bc		       00		      .byte.b	0	;B
   1300  57bd		       00		      .byte.b	0	;R (0)
   1301  57be		       00		      .byte.b	0	;G
   1302  57bf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  57c0							;    include "pizza.asm"
    263  57c0
      0  57c0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  57c0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  57c0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  57c0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  57c0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  57c0				  -	      ERR
      6  57c0					      endif
------- FILE ./chess.asm
    359  57c0
    360  57c0							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 1
      0  57c0					      include	"Handler_BANK1.asm"
      1  57c0							; Copyright (C)2020 Andrew Davie
      2  57c0
      3  57c0							;---------------------------------------------------------------------------------------------------
      4  57c0
      0  57c0					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  57c0
      2  57c0
      3  57c0
      4 U0000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  0000 ????				      SEG	MOVES
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   MOVES      SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	MOVES
      7  5800
      8  5800
      9  5800							; Board is a 10 x 12 object which simplifies the generation of moves
     10  5800							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     11  5800							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     12  5800							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     13  5800
     14  5800							;     X12 numbering
     15  5800							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     16  5800							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     17  5800							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     18  5800							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     19  5800							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     20  5800							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     21  5800							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     22  5800							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     23  5800							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     24  5800							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     25  5800							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     26  5800							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     27  5800							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     28  5800							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     29  5800							;	0   1	2   3	4   5	6   7	8   9
     30  5800							;		A   B	C   D	E   F	G   H
     31  5800
     32  5800							;     HEX X12
     33  5800							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     34  5800							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     35  5800							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     36  5800							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     37  5800							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     38  5800							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     39  5800							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     40  5800							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     41  5800							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     42  5800							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     43  5800							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     44  5800							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     45  5800							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     46  5800							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     47  5800							;	0   1	2   3	4   5	6   7	8   9
     48  5800							;		A   B	C   D	E   F	G   H
     49  5800
     50  5800
     51  5800							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     52  5800							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     53  5800							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     54  5800							; be re-used for something else - we just need to guarantee there are 22 of them there
     55  5800
     56  5800		       00 00 00 00*	      ds	22	; so indexing of "ValidSquare-22,x" won't fail
     57  5816
     58  5816							; Note, we will never index INTO the above bytes - x will always be >= 22
     59  5816							; We just need to make sure that the actual indexing will not have an address before
     60  5816							; the index of outside the page.
     61  5816
      0  5816					      OPTIONAL_PAGEBREAK	"ValidSquare", 120 + 80
     10  5816					      LIST	ON
      0  5816					      DEF	ValidSquare
      1  5816				   BANK_ValidSquare SET	_CURRENT_BANK
      2  5816
      3  5816				   ValidSquare
     64  5816
     65  5816
     66  5816							; Use this table to
     67  5816							;   a) Determine if a square is valid (-1 = NO)
     68  5816							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     69  5816							;	if a white pawn on square "x" can move "up" the board.
     70  5816
     71  5816		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     72  5820		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     73  582a		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     74  5834		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     75  583e		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     76  5848		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     77  5852		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     78  585c		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     79  5866		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     80  5870		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     81  587a
      0  587a					      DEF	Board
      1  587a				   BANK_Board SET	_CURRENT_BANK
      2  587a
      3  587a				   Board
     83  587a
     84  587a							; A 10X10... we should never write using invalid square
     85  587a							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     86  587a							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     87  587a
     88  587a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     89  5884		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     90  588e
     91  588e					      REPEAT	8
     92  588e		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  588e					      REPEND
     92  5898		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  5898					      REPEND
     92  58a2		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58a2					      REPEND
     92  58ac		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58ac					      REPEND
     92  58b6		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58b6					      REPEND
     92  58c0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58c0					      REPEND
     92  58ca		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58ca					      REPEND
     92  58d4		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     93  58de					      REPEND
     94  58de
     95  58de							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     96  58de
     97  58de							; PARANOIA... following not used, but there in case above violated
     98  58de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
     99  58de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    100  58de
    101  58de							;---------------------------------------------------------------------------------------------------
    102  58de
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 1
      0  58de					      include	"Handler_QUEEN.asm"
      1  58de							; Copyright (C)2020 Andrew Davie
      2  58de
      3  58de							;---------------------------------------------------------------------------------------------------
      4  58de							; QUEEN
      5  58de							;---------------------------------------------------------------------------------------------------
      6  58de
      0  58de					      DEF	Handle_QUEEN
      1  58de				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  58de
      3  58de				   Handle_QUEEN
      8  58de
      9  58de							; Pass...
     10  58de							; x = currentSquare (square the piece is on)
     11  58de							; currentPiece (with flags/colour attached)
     12  58de
      0  58de					      MOVE_TOWARDS	_DOWN+_LEFT
      1  58de					      SUBROUTINE
      2  58de
      3  58de
      4  58de		       a6 98		      ldx	currentSquare
      5  58e0		       d0 98		      bne	.project
      6  58e2
      7  58e2		       20 00 00    .empty     jsr	AddMove
      8  58e5		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  58e8		       30 0b		      bmi	.invalid
     10  58ea		       b9 7a f0 	      lda	Board,y
     11  58ed		       f0 f3		      beq	.empty
     12  58ef		       45 97		      eor	currentPiece
     13  58f1		       10 97		      bpl	.invalid
     14  58f3		       20 00 00 	      jsr	AddMove
     15  58f6
     16  58f6				   .invalid
      0  58f6					      MOVE_TOWARDS	_DOWN
      1  58f6					      SUBROUTINE
      2  58f6
      3  58f6
      4  58f6		       a6 98		      ldx	currentSquare
      5  58f8		       d0 98		      bne	.project
      6  58fa
      7  58fa		       20 00 00    .empty     jsr	AddMove
      8  58fd		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  5900		       30 0c		      bmi	.invalid
     10  5902		       b9 7a f0 	      lda	Board,y
     11  5905		       f0 f3		      beq	.empty
     12  5907		       45 97		      eor	currentPiece
     13  5909		       10 97		      bpl	.invalid
     14  590b		       20 00 00 	      jsr	AddMove
     15  590e
     16  590e				   .invalid
      0  590e					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  590e					      SUBROUTINE
      2  590e
      3  590e
      4  590e		       a6 98		      ldx	currentSquare
      5  5910		       d0 98		      bne	.project
      6  5912
      7  5912		       20 00 00    .empty     jsr	AddMove
      8  5915		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  5918		       30 0d		      bmi	.invalid
     10  591a		       b9 7a f0 	      lda	Board,y
     11  591d		       f0 f3		      beq	.empty
     12  591f		       45 97		      eor	currentPiece
     13  5921		       10 97		      bpl	.invalid
     14  5923		       20 00 00 	      jsr	AddMove
     15  5926
     16  5926				   .invalid
      0  5926					      MOVE_TOWARDS	_RIGHT
      1  5926					      SUBROUTINE
      2  5926
      3  5926
      4  5926		       a6 98		      ldx	currentSquare
      5  5928		       d0 98		      bne	.project
      6  592a
      7  592a		       20 00 00    .empty     jsr	AddMove
      8  592d		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  5930		       30 17		      bmi	.invalid
     10  5932		       b9 7a f0 	      lda	Board,y
     11  5935		       f0 f3		      beq	.empty
     12  5937		       45 97		      eor	currentPiece
     13  5939		       10 97		      bpl	.invalid
     14  593b		       20 00 00 	      jsr	AddMove
     15  593e
     16  593e				   .invalid
      0  593e					      MOVE_TOWARDS	_UP+_RIGHT
      1  593e					      SUBROUTINE
      2  593e
      3  593e
      4  593e		       a6 98		      ldx	currentSquare
      5  5940		       d0 98		      bne	.project
      6  5942
      7  5942		       20 00 00    .empty     jsr	AddMove
      8  5945		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  5948		       30 21		      bmi	.invalid
     10  594a		       b9 7a f0 	      lda	Board,y
     11  594d		       f0 f3		      beq	.empty
     12  594f		       45 97		      eor	currentPiece
     13  5951		       10 97		      bpl	.invalid
     14  5953		       20 00 00 	      jsr	AddMove
     15  5956
     16  5956				   .invalid
      0  5956					      MOVE_TOWARDS	_UP
      1  5956					      SUBROUTINE
      2  5956
      3  5956
      4  5956		       a6 98		      ldx	currentSquare
      5  5958		       d0 98		      bne	.project
      6  595a
      7  595a		       20 00 00    .empty     jsr	AddMove
      8  595d		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  5960		       30 20		      bmi	.invalid
     10  5962		       b9 7a f0 	      lda	Board,y
     11  5965		       f0 f3		      beq	.empty
     12  5967		       45 97		      eor	currentPiece
     13  5969		       10 97		      bpl	.invalid
     14  596b		       20 00 00 	      jsr	AddMove
     15  596e
     16  596e				   .invalid
      0  596e					      MOVE_TOWARDS	_UP+_LEFT
      1  596e					      SUBROUTINE
      2  596e
      3  596e
      4  596e		       a6 98		      ldx	currentSquare
      5  5970		       d0 98		      bne	.project
      6  5972
      7  5972		       20 00 00    .empty     jsr	AddMove
      8  5975		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  5978		       30 1f		      bmi	.invalid
     10  597a		       b9 7a f0 	      lda	Board,y
     11  597d		       f0 f3		      beq	.empty
     12  597f		       45 97		      eor	currentPiece
     13  5981		       10 97		      bpl	.invalid
     14  5983		       20 00 00 	      jsr	AddMove
     15  5986
     16  5986				   .invalid
      0  5986					      MOVE_TOWARDS	_LEFT
      1  5986					      SUBROUTINE
      2  5986
      3  5986
      4  5986		       a6 98		      ldx	currentSquare
      5  5988		       d0 98		      bne	.project
      6  598a
      7  598a		       20 00 00    .empty     jsr	AddMove
      8  598d		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  5990		       30 15		      bmi	.invalid
     10  5992		       b9 7a f0 	      lda	Board,y
     11  5995		       f0 f3		      beq	.empty
     12  5997		       45 97		      eor	currentPiece
     13  5999		       10 97		      bpl	.invalid
     14  599b		       20 00 00 	      jsr	AddMove
     15  599e
     16  599e				   .invalid
     21  599e
     22  599e		       4c 00 00 	      jmp	MoveReturn
     23  59a1
     24  59a1							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 1
      0  59a1					      include	"Handler_BISHOP.asm"
      1  59a1							; Copyright (C)2020 Andrew Davie
      2  59a1
      3  59a1							;---------------------------------------------------------------------------------------------------
      4  59a1							; BISHOP
      5  59a1							;---------------------------------------------------------------------------------------------------
      6  59a1
      0  59a1					      DEF	Handle_BISHOP
      1  59a1				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  59a1
      3  59a1				   Handle_BISHOP
      8  59a1
      9  59a1							; x = currentSquare (square the piece is on)
     10  59a1							; currentPiece (with flags/colour attached)
     11  59a1
      0  59a1					      MOVE_TOWARDS	_DOWN+_LEFT
      1  59a1					      SUBROUTINE
      2  59a1
      3  59a1
      4  59a1		       a6 98		      ldx	currentSquare
      5  59a3		       d0 98		      bne	.project
      6  59a5
      7  59a5		       20 00 00    .empty     jsr	AddMove
      8  59a8		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  59ab		       30 0b		      bmi	.invalid
     10  59ad		       b9 7a f0 	      lda	Board,y
     11  59b0		       f0 f3		      beq	.empty
     12  59b2		       45 97		      eor	currentPiece
     13  59b4		       10 97		      bpl	.invalid
     14  59b6		       20 00 00 	      jsr	AddMove
     15  59b9
     16  59b9				   .invalid
      0  59b9					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  59b9					      SUBROUTINE
      2  59b9
      3  59b9
      4  59b9		       a6 98		      ldx	currentSquare
      5  59bb		       d0 98		      bne	.project
      6  59bd
      7  59bd		       20 00 00    .empty     jsr	AddMove
      8  59c0		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  59c3		       30 0d		      bmi	.invalid
     10  59c5		       b9 7a f0 	      lda	Board,y
     11  59c8		       f0 f3		      beq	.empty
     12  59ca		       45 97		      eor	currentPiece
     13  59cc		       10 97		      bpl	.invalid
     14  59ce		       20 00 00 	      jsr	AddMove
     15  59d1
     16  59d1				   .invalid
      0  59d1					      MOVE_TOWARDS	_UP+_LEFT
      1  59d1					      SUBROUTINE
      2  59d1
      3  59d1
      4  59d1		       a6 98		      ldx	currentSquare
      5  59d3		       d0 98		      bne	.project
      6  59d5
      7  59d5		       20 00 00    .empty     jsr	AddMove
      8  59d8		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  59db		       30 1f		      bmi	.invalid
     10  59dd		       b9 7a f0 	      lda	Board,y
     11  59e0		       f0 f3		      beq	.empty
     12  59e2		       45 97		      eor	currentPiece
     13  59e4		       10 97		      bpl	.invalid
     14  59e6		       20 00 00 	      jsr	AddMove
     15  59e9
     16  59e9				   .invalid
      0  59e9					      MOVE_TOWARDS	_UP+_RIGHT
      1  59e9					      SUBROUTINE
      2  59e9
      3  59e9
      4  59e9		       a6 98		      ldx	currentSquare
      5  59eb		       d0 98		      bne	.project
      6  59ed
      7  59ed		       20 00 00    .empty     jsr	AddMove
      8  59f0		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  59f3		       30 21		      bmi	.invalid
     10  59f5		       b9 7a f0 	      lda	Board,y
     11  59f8		       f0 f3		      beq	.empty
     12  59fa		       45 97		      eor	currentPiece
     13  59fc		       10 97		      bpl	.invalid
     14  59fe		       20 00 00 	      jsr	AddMove
     15  5a01
     16  5a01				   .invalid
     16  5a01
     17  5a01		       4c 00 00 	      jmp	MoveReturn
     18  5a04
     19  5a04							;---------------------------------------------------------------------------------------------------
     20  5a04							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 1
      0  5a04					      include	"Handler_ROOK.asm"
      1  5a04							; Copyright (C)2020 Andrew Davie
      2  5a04							; Rook move handler
      3  5a04
      4  5a04							;---------------------------------------------------------------------------------------------------
      5  5a04							; ROOK
      6  5a04							;---------------------------------------------------------------------------------------------------
      7  5a04
      0  5a04					      DEF	Handle_ROOK
      1  5a04				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  5a04
      3  5a04				   Handle_ROOK
      9  5a04
     10  5a04							; Pass...
     11  5a04							; x = currentSquare (square the piece is on)
     12  5a04							; currentPiece (with flags/colour attached)
     13  5a04
      0  5a04					      MOVE_TOWARDS	_DOWN
      1  5a04					      SUBROUTINE
      2  5a04
      3  5a04
      4  5a04		       a6 98		      ldx	currentSquare
      5  5a06		       d0 98		      bne	.project
      6  5a08
      7  5a08		       20 00 00    .empty     jsr	AddMove
      8  5a0b		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  5a0e		       30 0c		      bmi	.invalid
     10  5a10		       b9 7a f0 	      lda	Board,y
     11  5a13		       f0 f3		      beq	.empty
     12  5a15		       45 97		      eor	currentPiece
     13  5a17		       10 97		      bpl	.invalid
     14  5a19		       20 00 00 	      jsr	AddMove
     15  5a1c
     16  5a1c				   .invalid
      0  5a1c					      MOVE_TOWARDS	_RIGHT
      1  5a1c					      SUBROUTINE
      2  5a1c
      3  5a1c
      4  5a1c		       a6 98		      ldx	currentSquare
      5  5a1e		       d0 98		      bne	.project
      6  5a20
      7  5a20		       20 00 00    .empty     jsr	AddMove
      8  5a23		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  5a26		       30 17		      bmi	.invalid
     10  5a28		       b9 7a f0 	      lda	Board,y
     11  5a2b		       f0 f3		      beq	.empty
     12  5a2d		       45 97		      eor	currentPiece
     13  5a2f		       10 97		      bpl	.invalid
     14  5a31		       20 00 00 	      jsr	AddMove
     15  5a34
     16  5a34				   .invalid
      0  5a34					      MOVE_TOWARDS	_UP
      1  5a34					      SUBROUTINE
      2  5a34
      3  5a34
      4  5a34		       a6 98		      ldx	currentSquare
      5  5a36		       d0 98		      bne	.project
      6  5a38
      7  5a38		       20 00 00    .empty     jsr	AddMove
      8  5a3b		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  5a3e		       30 20		      bmi	.invalid
     10  5a40		       b9 7a f0 	      lda	Board,y
     11  5a43		       f0 f3		      beq	.empty
     12  5a45		       45 97		      eor	currentPiece
     13  5a47		       10 97		      bpl	.invalid
     14  5a49		       20 00 00 	      jsr	AddMove
     15  5a4c
     16  5a4c				   .invalid
      0  5a4c					      MOVE_TOWARDS	_LEFT
      1  5a4c					      SUBROUTINE
      2  5a4c
      3  5a4c
      4  5a4c		       a6 98		      ldx	currentSquare
      5  5a4e		       d0 98		      bne	.project
      6  5a50
      7  5a50		       20 00 00    .empty     jsr	AddMove
      8  5a53		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  5a56		       30 15		      bmi	.invalid
     10  5a58		       b9 7a f0 	      lda	Board,y
     11  5a5b		       f0 f3		      beq	.empty
     12  5a5d		       45 97		      eor	currentPiece
     13  5a5f		       10 97		      bpl	.invalid
     14  5a61		       20 00 00 	      jsr	AddMove
     15  5a64
     16  5a64				   .invalid
     18  5a64
     19  5a64		       4c 00 00 	      jmp	MoveReturn
     20  5a67
     21  5a67							;---------------------------------------------------------------------------------------------------
     22  5a67							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 1
      0  5a67					      include	"Handler_KING.asm"
      1  5a67							; Copyright (C)2020 Andrew Davie
      2  5a67
      3  5a67							;---------------------------------------------------------------------------------------------------
      4  5a67							; KING
      5  5a67							; This is the move handler for a KING
      6  5a67							; "Check" is detected in the next ply of the search.
      7  5a67
      8  5a67
      9  5a67							;---------------------------------------------------------------------------------------------------
     10  5a67
     11  5a67							; MACRO - Castling
     12  5a67
     13  5a67		       00 03	   KINGSIDE   =	3
     14  5a67		       ff ff ff fc QUEENSIDE  =	-4
     15  5a67
     16  5a67					      MAC	castle
     17  5a67							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  5a67
     19  5a67					      ldx	currentSquare
     20  5a67					      lda	Board+{1},x	; kingside/queenside R position
     21  5a67					      and	#PIECE_MASK|FLAG_MOVED
     22  5a67					      cmp	#ROOK
     23  5a67					      bne	.noCastle	; not a R that hasn't moved
     24  5a67
     25  5a67							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  5a67							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  5a67
     28  5a67					      IF	{1} = QUEENSIDE
     29  5a67					      lda	Board-3,x	; nothing in N pos
     30  5a67					      bne	.noCastle
     31  5a67					      lda	Board-2,x	; nothing in B pos
     32  5a67					      bne	.noCastle
     33  5a67					      lda	Board-1,x	; nothing in Q pos
     34  5a67					      bne	.noCastle
     35  5a67
     36  5a67					      ENDIF
     37  5a67
     38  5a67					      IF	{1} = KINGSIDE
     39  5a67					      lda	Board+2,x	; check N pos
     40  5a67					      bne	.noCastle
     41  5a67					      lda	Board+1,x	; check B pos
     42  5a67					      bne	.noCastle
     43  5a67					      ENDIF
     44  5a67
     45  5a67							; appropriate N/B/(Q) squares are vacant so we proceed...
     46  5a67
     47  5a67							; FINALLY -- king can castle
     48  5a67							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     49  5a67							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     50  5a67							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     51  5a67
     52  5a67					      lda	currentPiece
     53  5a67					      ora	#FLAG_CASTLE	; flag it's a castling move
     54  5a67					      sta	currentPiece
     55  5a67
     56  5a67					      IF	{1} = KINGSIDE
     57  5a67					      ldy	ValidSquare+2,x
     58  5a67					      ENDIF
     59  5a67
     60  5a67					      IF	{1} = QUEENSIDE
     61  5a67					      ldy	ValidSquare-2,x
     62  5a67					      ENDIF
     63  5a67
     64  5a67					      jsr	AddMove	; 57
     65  5a67
     66  5a67				   .noCastle
     67  5a67					      ENDM
     68  5a67
     69  5a67
     70  5a67							;---------------------------------------------------------------------------------------------------
     71  5a67
      0  5a67					      DEF	Handle_KING
      1  5a67				   BANK_Handle_KING SET	_CURRENT_BANK
      2  5a67
      3  5a67				   Handle_KING
     73  5a67					      SUBROUTINE
     74  5a67
     75  5a67							; x = currentSquare (square the KING is on)
     76  5a67							; currentPiece (KING of course, but with flags/colour attached)
     77  5a67
      0  5a67					      MOVE_TO	_DOWN+_LEFT
      1  5a67					      SUBROUTINE
      2  5a67		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  5a6a		       30 0b		      bmi	.invalid
      4  5a6c		       b9 7a f0 	      lda	Board,y
      5  5a6f		       f0 7a		      beq	.squareEmpty
      6  5a71		       45 97		      eor	currentPiece
      7  5a73		       10 97		      bpl	.invalid
      8  5a75		       20 00 00    .squareEmpty jsr	AddMove
      9  5a78				   .invalid
      0  5a78					      MOVE_TO_X	_DOWN
      1  5a78		       a6 98		      ldx	currentSquare
      0  5a7a					      MOVE_TO	_DOWN
      1  5a7a					      SUBROUTINE
      2  5a7a		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x
      3  5a7d		       30 0c		      bmi	.invalid
      4  5a7f		       b9 7a f0 	      lda	Board,y
      5  5a82		       f0 7a		      beq	.squareEmpty
      6  5a84		       45 97		      eor	currentPiece
      7  5a86		       10 97		      bpl	.invalid
      8  5a88		       20 00 00    .squareEmpty jsr	AddMove
      9  5a8b				   .invalid
      0  5a8b					      MOVE_TO_X	_DOWN+_RIGHT
      1  5a8b		       a6 98		      ldx	currentSquare
      0  5a8d					      MOVE_TO	_DOWN+_RIGHT
      1  5a8d					      SUBROUTINE
      2  5a8d		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  5a90		       30 0d		      bmi	.invalid
      4  5a92		       b9 7a f0 	      lda	Board,y
      5  5a95		       f0 7a		      beq	.squareEmpty
      6  5a97		       45 97		      eor	currentPiece
      7  5a99		       10 97		      bpl	.invalid
      8  5a9b		       20 00 00    .squareEmpty jsr	AddMove
      9  5a9e				   .invalid
      0  5a9e					      MOVE_TO_X	_RIGHT
      1  5a9e		       a6 98		      ldx	currentSquare
      0  5aa0					      MOVE_TO	_RIGHT
      1  5aa0					      SUBROUTINE
      2  5aa0		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      3  5aa3		       30 17		      bmi	.invalid
      4  5aa5		       b9 7a f0 	      lda	Board,y
      5  5aa8		       f0 7a		      beq	.squareEmpty
      6  5aaa		       45 97		      eor	currentPiece
      7  5aac		       10 97		      bpl	.invalid
      8  5aae		       20 00 00    .squareEmpty jsr	AddMove
      9  5ab1				   .invalid
      0  5ab1					      MOVE_TO_X	_UP+_RIGHT
      1  5ab1		       a6 98		      ldx	currentSquare
      0  5ab3					      MOVE_TO	_UP+_RIGHT
      1  5ab3					      SUBROUTINE
      2  5ab3		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  5ab6		       30 21		      bmi	.invalid
      4  5ab8		       b9 7a f0 	      lda	Board,y
      5  5abb		       f0 7a		      beq	.squareEmpty
      6  5abd		       45 97		      eor	currentPiece
      7  5abf		       10 97		      bpl	.invalid
      8  5ac1		       20 00 00    .squareEmpty jsr	AddMove
      9  5ac4				   .invalid
      0  5ac4					      MOVE_TO_X	_UP
      1  5ac4		       a6 98		      ldx	currentSquare
      0  5ac6					      MOVE_TO	_UP
      1  5ac6					      SUBROUTINE
      2  5ac6		       bc 20 f0 	      ldy	ValidSquare+_UP,x
      3  5ac9		       30 20		      bmi	.invalid
      4  5acb		       b9 7a f0 	      lda	Board,y
      5  5ace		       f0 7a		      beq	.squareEmpty
      6  5ad0		       45 97		      eor	currentPiece
      7  5ad2		       10 97		      bpl	.invalid
      8  5ad4		       20 00 00    .squareEmpty jsr	AddMove
      9  5ad7				   .invalid
      0  5ad7					      MOVE_TO_X	_UP+_LEFT
      1  5ad7		       a6 98		      ldx	currentSquare
      0  5ad9					      MOVE_TO	_UP+_LEFT
      1  5ad9					      SUBROUTINE
      2  5ad9		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  5adc		       30 1f		      bmi	.invalid
      4  5ade		       b9 7a f0 	      lda	Board,y
      5  5ae1		       f0 7a		      beq	.squareEmpty
      6  5ae3		       45 97		      eor	currentPiece
      7  5ae5		       10 97		      bpl	.invalid
      8  5ae7		       20 00 00    .squareEmpty jsr	AddMove
      9  5aea				   .invalid
      0  5aea					      MOVE_TO_X	_LEFT
      1  5aea		       a6 98		      ldx	currentSquare
      0  5aec					      MOVE_TO	_LEFT
      1  5aec					      SUBROUTINE
      2  5aec		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      3  5aef		       30 15		      bmi	.invalid
      4  5af1		       b9 7a f0 	      lda	Board,y
      5  5af4		       f0 7a		      beq	.squareEmpty
      6  5af6		       45 97		      eor	currentPiece
      7  5af8		       10 97		      bpl	.invalid
      8  5afa		       20 00 00    .squareEmpty jsr	AddMove
      9  5afd				   .invalid
     86  5afd
     87  5afd		       24 97		      bit	currentPiece
     88  5aff		       70 97		      bvs	.exit	; king has moved, so no castling
     89  5b01
      0  5b01					      CASTLE	KINGSIDE
      1  5b01
      2  5b01
      3  5b01		       a6 98		      ldx	currentSquare
      4  5b03		       bd 7d f0 	      lda	Board+KINGSIDE,x
      5  5b06		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5b08		       c9 05		      cmp	#ROOK
      7  5b0a		       d0 05		      bne	.noCastle
      8  5b0c
      9  5b0c
     10  5b0c
     11  5b0c
     12  5b0c				  -	      IF	KINGSIDE = QUEENSIDE
     13  5b0c				  -	      lda	Board-3,x
     14  5b0c				  -	      bne	.noCastle
     15  5b0c				  -	      lda	Board-2,x
     16  5b0c				  -	      bne	.noCastle
     17  5b0c				  -	      lda	Board-1,x
     18  5b0c				  -	      bne	.noCastle
     19  5b0c				  -
     20  5b0c					      ENDIF
     21  5b0c
     22  5b0c					      IF	KINGSIDE = KINGSIDE
     23  5b0c		       bd 7c f0 	      lda	Board+2,x
     24  5b0f		       d0 7c		      bne	.noCastle
     25  5b11		       bd 7b f0 	      lda	Board+1,x
     26  5b14		       d0 7b		      bne	.noCastle
     27  5b16					      ENDIF
     28  5b16
     29  5b16
     30  5b16
     31  5b16
     32  5b16
     33  5b16
     34  5b16
     35  5b16
     36  5b16		       a5 97		      lda	currentPiece
     37  5b18		       09 10		      ora	#FLAG_CASTLE
     38  5b1a		       85 97		      sta	currentPiece
     39  5b1c
     40  5b1c					      IF	KINGSIDE = KINGSIDE
     41  5b1c		       bc 18 f0 	      ldy	ValidSquare+2,x
     42  5b1f					      ENDIF
     43  5b1f
     44  5b1f				  -	      IF	KINGSIDE = QUEENSIDE
     45  5b1f				  -	      ldy	ValidSquare-2,x
     46  5b1f					      ENDIF
     47  5b1f
     48  5b1f		       20 00 00 	      jsr	AddMove
     49  5b22
     50  5b22				   .noCastle
      0  5b22					      CASTLE	QUEENSIDE
      1  5b22
      2  5b22
      3  5b22		       a6 98		      ldx	currentSquare
      4  5b24		       bd 76 f0 	      lda	Board+QUEENSIDE,x
      5  5b27		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5b29		       c9 05		      cmp	#ROOK
      7  5b2b		       d0 05		      bne	.noCastle
      8  5b2d
      9  5b2d
     10  5b2d
     11  5b2d
     12  5b2d					      IF	QUEENSIDE = QUEENSIDE
     13  5b2d		       bd 77 f0 	      lda	Board-3,x
     14  5b30		       d0 77		      bne	.noCastle
     15  5b32		       bd 78 f0 	      lda	Board-2,x
     16  5b35		       d0 78		      bne	.noCastle
     17  5b37		       bd 79 f0 	      lda	Board-1,x
     18  5b3a		       d0 79		      bne	.noCastle
     19  5b3c
     20  5b3c					      ENDIF
     21  5b3c
     22  5b3c				  -	      IF	QUEENSIDE = KINGSIDE
     23  5b3c				  -	      lda	Board+2,x
     24  5b3c				  -	      bne	.noCastle
     25  5b3c				  -	      lda	Board+1,x
     26  5b3c				  -	      bne	.noCastle
     27  5b3c					      ENDIF
     28  5b3c
     29  5b3c
     30  5b3c
     31  5b3c
     32  5b3c
     33  5b3c
     34  5b3c
     35  5b3c
     36  5b3c		       a5 97		      lda	currentPiece
     37  5b3e		       09 10		      ora	#FLAG_CASTLE
     38  5b40		       85 97		      sta	currentPiece
     39  5b42
     40  5b42				  -	      IF	QUEENSIDE = KINGSIDE
     41  5b42				  -	      ldy	ValidSquare+2,x
     42  5b42					      ENDIF
     43  5b42
     44  5b42					      IF	QUEENSIDE = QUEENSIDE
     45  5b42		       bc 14 f0 	      ldy	ValidSquare-2,x
     46  5b45					      ENDIF
     47  5b45
     48  5b45		       20 00 00 	      jsr	AddMove
     49  5b48
     50  5b48				   .noCastle
     92  5b48
     93  5b48		       4c 00 00    .exit      jmp	MoveReturn
     94  5b4b
     95  5b4b							;---------------------------------------------------------------------------------------------------
     96  5b4b							; EOF
------- FILE Handler_BANK1.asm
    107  5b4b
    108  5b4b
      0  5b4b					      OPTIONAL_PAGEBREAK	"Base64ToIndex", 64
     10  5b4b					      LIST	ON
      0  5b4b					      DEF	Base64ToIndex
      1  5b4b				   BANK_Base64ToIndex SET	_CURRENT_BANK
      2  5b4b
      3  5b4b				   Base64ToIndex
    111  5b4b							; Convert from 0-63 numbering into an index into the Chessboard
    112  5b4b
    113  5b4b		       16 17 18 19*	      .byte.b	22,23,24,25,26,27,28,29
    114  5b53		       20 21 22 23*	      .byte.b	32,33,34,35,36,37,38,39
    115  5b5b		       2a 2b 2c 2d*	      .byte.b	42,43,44,45,46,47,48,49
    116  5b63		       34 35 36 37*	      .byte.b	52,53,54,55,56,57,58,59
    117  5b6b		       3e 3f 40 41*	      .byte.b	62,63,64,65,66,67,68,69
    118  5b73		       48 49 4a 4b*	      .byte.b	72,73,74,75,76,77,78,79
    119  5b7b		       52 53 54 55*	      .byte.b	82,83,84,85,86,87,88,89
    120  5b83		       5c 5d 5e 5f*	      .byte.b	92,93,94,95,96,97,98,99
    121  5b8b
    122  5b8b
    123  5b8b							;---------------------------------------------------------------------------------------------------
    124  5b8b
      0  5b8b					      DEF	PutAllPieces
      1  5b8b				   BANK_PutAllPieces SET	_CURRENT_BANK
      2  5b8b
      3  5b8b				   PutAllPieces
    126  5b8b					      SUBROUTINE
    127  5b8b
    128  5b8b							; Call SAFEly
    129  5b8b
    130  5b8b		       a0 63		      ldy	#99
    131  5b8d		       b9 7a f0    .zeroBoard lda	Board,y
    132  5b90		       20 00 00 	      jsr	SAFE_PutPieceToBoard
    133  5b93
    134  5b93		       88		      dey
    135  5b94		       10 f7		      bpl	.zeroBoard
    136  5b96		       60		      rts
    137  5b97
    138  5b97
    139  5b97							;---------------------------------------------------------------------------------------------------
    140  5b97
      0  5b97					      DEF	CopySetupForMarker
      1  5b97				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  5b97
      3  5b97				   CopySetupForMarker
    142  5b97					      SUBROUTINE
    143  5b97
    144  5b97							;lda #RAMBANK_MOVES_RAM
    145  5b97							;sta SET_BANK_RAM
    146  5b97
    147  5b97		       a5 80		      lda	drawPieceNumber
    148  5b99		       29 03		      and	#3	; shift position in PF
    149  5b9b		       18		      clc
    150  5b9c		       69 3c		      adc	#INDEX_WHITE_MARKER_on_BLACK_SQUARE_0
    151  5b9e		       a8		      tay
    152  5b9f		       60		      rts
    153  5ba0
    154  5ba0
    155  5ba0							;---------------------------------------------------------------------------------------------------
    156  5ba0
      0  5ba0					      DEF	CopySetup
      1  5ba0				   BANK_CopySetup SET	_CURRENT_BANK
      2  5ba0
      3  5ba0				   CopySetup
    158  5ba0					      SUBROUTINE
    159  5ba0
    160  5ba0							; figure colouration of square
    161  5ba0
    162  5ba0		       a5 80		      lda	drawPieceNumber	;0-63
    163  5ba2		       4a		      lsr
    164  5ba3		       4a		      lsr
    165  5ba4		       4a		      lsr
    166  5ba5		       18		      clc
    167  5ba6		       65 80		      adc	drawPieceNumber
    168  5ba8		       29 01		      and	#1
    169  5baa		       49 01		      eor	#1
    170  5bac		       f0 01		      beq	.white
    171  5bae		       a9 20		      lda	#32
    172  5bb0		       85 a7	   .white     sta	__pieceColour	; actually SQUARE black/white
    173  5bb2
    174  5bb2							; PieceColour = 0 for white square, 28 for black square
    175  5bb2
    176  5bb2							;lda #RAMBANK_MOVES_RAM
    177  5bb2							;sta SET_BANK_RAM
    178  5bb2
    179  5bb2		       a4 80		      ldy	drawPieceNumber	; 0-63
    180  5bb4		       be 4b f3 	      ldx	Base64ToIndex,y
    181  5bb7
    182  5bb7		       bd 7a f0 	      lda	Board,x
    183  5bba		       0a		      asl
    184  5bbb		       90 7a		      bcc	.blackAdjust
    185  5bbd		       09 10		      ora	#16
    186  5bbf		       4a	   .blackAdjust lsr
    187  5bc0		       29 0f		      and	#%1111
    188  5bc2		       aa		      tax
    189  5bc3
    190  5bc3		       98		      tya
    191  5bc4		       29 03		      and	#3	; shift position in PF
    192  5bc6
    193  5bc6		       18		      clc
    194  5bc7		       7d 00 00 	      adc	PieceToShape,x
    195  5bca		       18		      clc
    196  5bcb		       65 a7		      adc	__pieceColour
    197  5bcd		       a8		      tay
    198  5bce		       60		      rts
    199  5bcf
    200  5bcf				   PieceToShape
    201  5bcf
    202  5bcf		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    203  5bd0		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    204  5bd1		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    205  5bd2		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    206  5bd3		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    207  5bd4		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    208  5bd5		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    209  5bd6		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    210  5bd7
    211  5bd7		       40		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    212  5bd8		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    213  5bd9		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    214  5bda		       48		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    215  5bdb		       4c		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    216  5bdc		       50		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    217  5bdd		       54		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    218  5bde		       58		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    219  5bdf
    220  5bdf
    221  5bdf							;---------------------------------------------------------------------------------------------------
    222  5bdf
    223  5bdf
      0  5bdf					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  5bdf
      2  5bdf
      3  5bdf		       03 df	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3df , FREE= $21
      4  5bdf					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  5bdf				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  5bdf				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  5bdf				  -	      ERR
      8  5bdf					      endif
    225  5bdf
    226  5bdf
    227  5bdf							; There is space here (1K) for use as ROM
    228  5bdf							; but NOT when the above bank is switched in as RAM, of course!
    229  5bdf
    230  5bdf
    231  5bdf
    232  5bdf
    233  5bdf							;---------------------------------------------------------------------------------------------------
    234  5bdf							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 1
      0  5bdf					      include	"ply.asm"
      1  5bdf							; Copyright (C)2020 Andrew Davie
      2  5bdf							; andrew@taswegian.com
      3  5bdf
      4  5bdf							;---------------------------------------------------------------------------------------------------
      5  5bdf							; Define the RAM banks
      6  5bdf							; A "PLY" bank represents all the data required on any single ply of the search tree.
      7  5bdf							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      8  5bdf							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
      9  5bdf							; they act as independant switchable banks usable for data on each ply during the search.
     10  5bdf							; A ply will hold the move list for that position
     11  5bdf
     12  5bdf
     13  5bdf		       00 06	   MAX_PLY    =	6
      0  5bdf					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  5bdf
      2  5bdf
      3  5bdf
      4 U0000 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U0000 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     17 U3800					      REPEND
     18 U3800
     19 U3800							;---------------------------------------------------------------------------------------------------
     20 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     21 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  0000 ????				      SEG	BANK_PLY
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   BANK_PLY   SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	BANK_PLY
     23  6000
     24  6000
     25  6000							;---------------------------------------------------------------------------------------------------
     26  6000							; The piece-lists
     27  6000							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     28  6000							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     29  6000							; but this needs to be initialised programatically on new game.
     30  6000
     31  6000							; We have TWO piecelists, in different banks
     32  6000							; WHITE pieces in bank BANK_PLY
     33  6000							; BLACK pieces in bank BANK_PLY+1
     34  6000
      0  6000					      OPTIONAL_PAGEBREAK	"PieceLists", 48
     10  6000					      LIST	ON
     36  6000
     37  6000		       00 00 00 00*SortedPieceList ds	16	; indexes into PieceSquare, PieceType.  NEG = no piece
     38  6010		       00 00 00 00*PieceSquare ds	16
     39  6020		       00 00 00 00*PieceType  ds	16
     40  6030
     41  6030		       00	   PieceListPtr ds	1
     42  6031
     43  6031							;---------------------------------------------------------------------------------------------------
     44  6031
     45  6031		       7f ff	   infinity   =	32767
     46  6031
     47  6031		       00 00	   plyValue   ds	2	; 16-bit signed score value
     48  6033		       00	   bestMove   ds	1	; index of move (-1 = none)
     49  6034
     50  6034				  -	      if	0
     51  6034				  -			; reverting a move
     52  6034				  -			; from/to/piece/toOriginal
     53  6034				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     54  6034				  -			; en-passant
     55  6034				  -
     56  6034				  -from/to/piece
     57  6034				  -
     58  6034				  -
     59  6034				  -from       =	piece
     60  6034				  -to	      =	originalPiece
     61  6034				  -from2      =	piece2
     62  6034				  -to2	      =	originalPiece2
     63  6034				  -
     64  6034				  -
     65  6034				  -
     66  6034				  -so,	      normal	move (N)
     67  6034				  -
     68  6034				  -B1	      =	knight
     69  6034				  -C3	      =	blank
     70  6034				  -null/null
     71  6034				  -
     72  6034				  -pawn       promot	with capture
     73  6034				  -A7	      =	WP
     74  6034				  -B8	      =	BLACK_ROOK
     75  6034				  -
     76  6034				  -
     77  6034				  -castle
     78  6034				  -E1	      =	king
     79  6034				  -G1	      =	blank
     80  6034				  -H1	      =	rook
     81  6034				  -F1	      =	blank
     82  6034				  -
     83  6034				  -
     84  6034				  -en-passant
     85  6034				  -B4	      =	P
     86  6034				  -A3	      =	blank
     87  6034				  -A4	      =	P
     88  6034				  -A3	      =	blank
     89  6034				  -
     90  6034				  -FROM
     91  6034				  -TO
     92  6034				  -CAPTURED_PIECE
     93  6034				  -ORIG_PIECE
     94  6034				  -FROM2
     95  6034				  -TO2
     96  6034				  -PIECE2
     97  6034				  -
     98  6034				  -board[FROM] =	ORIG_PIECE
     99  6034				  -board[TO]  =	CAPTURED_PIECE
    100  6034				  -
    101  6034				  -value      =	-new_piece + orig_piece - captured_piece
    102  6034				  -
    103  6034				  -
    104  6034					      endif
    105  6034
    106  6034
    107  6034
    108  6034
    109  6034
    110  6034
    111  6034
    112  6034
    113  6034
    114  6034
    115  6034							;---------------------------------------------------------------------------------------------------
    116  6034
    117  6034							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
    118  6034							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
    119  6034
    120  6034		       00	   enPassantSquare ds	1
    121  6035
    122  6035							;---------------------------------------------------------------------------------------------------
    123  6035							; Move tables hold piece moves for this current ply
    124  6035
    125  6035		       00	   moveIndex  ds	1	; points to first available 'slot' for move storage
    126  6036
    127  6036
    128  6036		       00 80	   MAX_MOVES  =	128
    129  6036
      0  6036					      OPTIONAL_PAGEBREAK	"MoveFrom", MAX_MOVES
     10  6036					      LIST	ON
      0  6036					      DEF	MoveFrom
      1  6036				   BANK_MoveFrom SET	_CURRENT_BANK
      2  6036
      3  6036				   MoveFrom
    132  6036		       00 00 00 00*	      ds	MAX_MOVES
    133  60b6
      0  60b6					      OPTIONAL_PAGEBREAK	"MoveTo", MAX_MOVES
 PAGE BREAK INSERTED FOR  MoveTo
 REQUESTED SIZE =  $80
 WASTED SPACE =  $4a
 PAGEBREAK LOCATION =  $f100
     10  6100					      LIST	ON
      0  6100					      DEF	MoveTo
      1  6100				   BANK_MoveTo SET	_CURRENT_BANK
      2  6100
      3  6100				   MoveTo
    136  6100		       00 00 00 00*	      ds	MAX_MOVES
    137  6180
      0  6180					      OPTIONAL_PAGEBREAK	"MovePiece", MAX_MOVES
     10  6180					      LIST	ON
      0  6180					      DEF	MovePiece
      1  6180				   BANK_MovePiece SET	_CURRENT_BANK
      2  6180
      3  6180				   MovePiece
    140  6180		       00 00 00 00*	      ds	MAX_MOVES
    141  6200
    142  6200							;---------------------------------------------------------------------------------------------------
    143  6200
      0  6200					      DEF	InitPieceLists
      1  6200				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  6200
      3  6200				   InitPieceLists
    145  6200
    146  6200		       a9 ff		      lda	#-1
    147  6202		       8d 30 f4 	      sta	PieceListPtr+RAM_WRITE
    148  6205
    149  6205		       a2 0f		      ldx	#15
    150  6207		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    151  620a		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    152  620d		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    153  6210		       ca		      dex
    154  6211		       10 f4		      bpl	.clearLists
    155  6213
    156  6213							; General inits that are moved out of FIXED....
    157  6213
    158  6213
    159  6213		       a9 07		      lda	#%111	; 111= quad
    160  6215		       85 44		      sta	NUSIZ0
    161  6217		       85 45		      sta	NUSIZ1	; quad-width
    162  6219
    163  6219
    164  6219
    165  6219
    166  6219		       a9 04		      lda	#%00000100
    167  621b		       85 4a		      sta	CTRLPF
    168  621d		       a9 00		      lda	#BACKGCOL
    169  621f		       85 49		      sta	COLUBK
    170  6221
    171  6221		       a9 09		      lda	#AI_Halt
    172  6223		       85 8f		      sta	aiPhase
    173  6225
    174  6225		       60		      rts
    175  6226
    176  6226
    177  6226							;---------------------------------------------------------------------------------------------------
    178  6226
    179  6226					      if	ASSERTS
    180  6226
      0  6226					      DEF	checkPiecesBank
      1  6226				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  6226
      3  6226				   checkPiecesBank
    182  6226							; odd usage - switches between concurrent bank code
    183  6226
    184  6226		       a2 0f		      ldx	#15
    185  6228		       a5 a8	   .check     lda	__bank
    186  622a		       85 3e		      sta	SET_BANK_RAM
    187  622c		       bc 10 f0 	      ldy	PieceSquare,x
    188  622f		       f0 10		      beq	.nonehere
    189  6231
    190  6231		       86 a7		      stx	__x
    191  6233
    192  6233		       20 00 00 	      jsr	SAFE_GetPieceFromBoard
    193  6236		       f0 fe	   .fail      beq	.fail
    194  6238		       c9 ff		      cmp	#-1
    195  623a		       f0 fe	   .fail2     beq	.fail2
    196  623c
    197  623c		       a6 a7		      ldx	__x
    198  623e
    199  623e		       ca	   .nonehere  dex
    200  623f		       10 e7		      bpl	.check
    201  6241		       60		      rts
    202  6242
    203  6242
      0  6242					      DEF	DIAGNOSTIC_checkPieces
      1  6242				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  6242
      3  6242				   DIAGNOSTIC_checkPieces
    205  6242							; SAFE call
    206  6242							; DIAGNOSTIC ONLY
    207  6242							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    208  6242
    209  6242		       a9 09		      lda	#RAMBANK_PLY
    210  6244		       85 a8		      sta	__bank
    211  6246		       20 26 f2 	      jsr	checkPiecesBank
    212  6249		       e6 a8		      inc	__bank
    213  624b		       20 26 f2 	      jsr	checkPiecesBank
    214  624e		       60		      rts
    215  624f
    216  624f					      endif
    217  624f
    218  624f							;---------------------------------------------------------------------------------------------------
    219  624f
    220  624f					      if	!TEST_POSITION
    221  624f				   InitPieceList
    222  624f
    223  624f		       06 19		      .byte.b	WHITE|Q, 25
    224  6251		       04 18		      .byte.b	WHITE|B, 24
    225  6253		       04 1b		      .byte.b	WHITE|B, 27
    226  6255		       05 16		      .byte.b	WHITE|R, 22
    227  6257		       05 1d		      .byte.b	WHITE|R, 29
    228  6259		       03 17		      .byte.b	WHITE|N, 23
    229  625b		       03 1c		      .byte.b	WHITE|N, 28
    230  625d
    231  625d		       01 23		      .byte.b	WHITE|WP, 35
    232  625f		       01 24		      .byte.b	WHITE|WP, 36
    233  6261		       01 22		      .byte.b	WHITE|WP, 34
    234  6263		       01 25		      .byte.b	WHITE|WP, 37
    235  6265		       01 21		      .byte.b	WHITE|WP, 33
    236  6267		       01 26		      .byte.b	WHITE|WP, 38
    237  6269		       01 20		      .byte.b	WHITE|WP, 32
    238  626b		       01 27		      .byte.b	WHITE|WP, 39
    239  626d
    240  626d		       07 1a		      .byte.b	WHITE|K, 26
    241  626f
    242  626f		       86 5f		      .byte.b	BLACK|Q, 95
    243  6271		       84 5e		      .byte.b	BLACK|B, 94
    244  6273		       84 61		      .byte.b	BLACK|B, 97
    245  6275		       85 5c		      .byte.b	BLACK|R, 92
    246  6277		       85 63		      .byte.b	BLACK|R, 99
    247  6279		       83 5d		      .byte.b	BLACK|N, 93
    248  627b		       83 62		      .byte.b	BLACK|N, 98
    249  627d
    250  627d		       82 55		      .byte.b	BLACK|BP, 85
    251  627f		       82 56		      .byte.b	BLACK|BP, 86
    252  6281		       82 54		      .byte.b	BLACK|BP, 84
    253  6283		       82 57		      .byte.b	BLACK|BP, 87
    254  6285		       82 53		      .byte.b	BLACK|BP, 83
    255  6287		       82 58		      .byte.b	BLACK|BP, 88
    256  6289		       82 52		      .byte.b	BLACK|BP, 82
    257  628b		       82 59		      .byte.b	BLACK|BP, 89
    258  628d
    259  628d		       87 60		      .byte.b	BLACK|K, 96
    260  628f
    261  628f		       00		      .byte.b	0	;end
    262  6290
    263  6290					      endif
    264  6290
    265  6290				  -	      if	TEST_POSITION
    266  6290				  -WhitePiecelist
    267  6290				  -	      .byte	65,0,0,0,0,0,0,0
    268  6290				  -	      .byte	0,0,0,0,0,0,0,0
    269  6290				  -
    270  6290				  -BlackPiecelist
    271  6290				  -	      .byte	66,0,0,0,0,0,0,0
    272  6290				  -	      .byte	0,0,0,0,0,0,0,0
    273  6290					      endif
    274  6290
    275  6290
    276  6290
    277  6290							;---------------------------------------------------------------------------------------------------
    278  6290
    279  6290
      0  6290					      DEF	NewPlyInitialise
      1  6290				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  6290
      3  6290				   NewPlyInitialise
    281  6290
    282  6290							; This MUST be called at the start of a new ply
    283  6290							; It initialises the movelist to empty
    284  6290
    285  6290		       a2 ff		      ldx	#-1
    286  6292		       8e 35 f4 	      stx	moveIndex+RAM_WRITE	; no valid moves
    287  6295		       8d 33 f4 	      sta	bestMove+RAM_WRITE
    288  6298
    289  6298					      if	!TEST_POSITION
    290  6298		       a9 00		      lda	#0
    291  629a					      endif
    292  629a
    293  629a				  -	      if	TEST_POSITION
    294  629a				  -	      lda	#66
    295  629a					      endif
    296  629a		       8d 34 f4 	      sta	enPassantSquare+RAM_WRITE	; no enPassant available
    297  629d
    298  629d
    299  629d							; The evaluation of the current position is a signed 16-bit number
    300  629d							; +ve is good for the current side.
    301  629d							; This is used during the alpha-beta search for finding best position
    302  629d
    303  629d		       a9 01		      lda	#<(-infinity)
    304  629f		       8d 31 f4 	      sta	plyValue+RAM_WRITE
    305  62a2		       a9 80		      lda	#>(-infinity)
    306  62a4		       8d 32 f4 	      sta	plyValue+RAM_WRITE+1
    307  62a7
    308  62a7
    309  62a7		       a9 00		      lda	#0
    310  62a9		       85 9d		      sta	piecelistIndex
    311  62ab
    312  62ab		       60		      rts
    313  62ac
    314  62ac
    315  62ac							;---------------------------------------------------------------------------------------------------
    316  62ac
      0  62ac					      DEF	GenerateMovesForNextPiece
      1  62ac				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  62ac
      3  62ac				   GenerateMovesForNextPiece
    318  62ac
    319  62ac		       a5 9d		      lda	piecelistIndex
    320  62ae		       29 0f		      and	#15
    321  62b0		       aa		      tax
    322  62b1
    323  62b1		       a5 9e		      lda	sideToMove
    324  62b3		       0a		      asl
    325  62b4		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    326  62b6		       69 00		      adc	#0
    327  62b8		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    328  62ba
    329  62ba		       bd 10 f0 	      lda	PieceSquare,x
    330  62bd		       f0 10		      beq	.noPieceHere	; piece deleted
    331  62bf		       85 98		      sta	currentSquare
    332  62c1
    333  62c1		       20 00 00 	      jsr	MoveForSinglePiece
    334  62c4
    335  62c4		       e6 9d	   .noPieceHere inc	piecelistIndex
    336  62c6		       60		      rts
    337  62c7
    338  62c7							;---------------------------------------------------------------------------------------------------
    339  62c7
      0  62c7					      DEF	FixPieceList
      1  62c7				   BANK_FixPieceList SET	_CURRENT_BANK
      2  62c7
      3  62c7				   FixPieceList
    341  62c7
    342  62c7							; uses OVERLAY Overlay001
    343  62c7							; fromX12	      X12 square piece moved from
    344  62c7							; toX12	      X12 square piece moved to (0 to erase piece from list)
    345  62c7
    346  62c7							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    347  62c7							; Eventually this will have to be more sophisticated when moves (like castling) involve
    348  62c7							; more than one piece.
    349  62c7
    350  62c7							; TODO: this is slow and should use a pointer to pieces instead
    351  62c7
    352  62c7
    353  62c7		       a2 0f		      ldx	#15
    354  62c9		       a5 86		      lda	fromX12
    355  62cb		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    356  62ce		       f0 10		      beq	.adjustPiece
    357  62d0		       ca		      dex
    358  62d1		       10 f8		      bpl	.pieceCheck
    359  62d3		       60		      rts
    360  62d4
    361  62d4		       a5 87	   .adjustPiece lda	toX12
    362  62d6		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    363  62d9		       60		      rts
    364  62da
    365  62da							;---------------------------------------------------------------------------------------------------
    366  62da
    367  62da				  -	      if	0
    368  62da				  -	      DEF	DeletePiece
    369  62da				  -
    370  62da				  -	      lda	fromX12
    371  62da				  -	      ldy	toX12
    372  62da				  -
    373  62da				  -			;		  lda sideToMove
    374  62da				  -			;		  eor #128
    375  62da				  -			;		  asl
    376  62da				  -			;		  adc #RAMBANK_PLY
    377  62da				  -	      lda	currentPly
    378  62da				  -	      sta	SET_BANK_RAM
    379  62da				  -
    380  62da				  -	      lda	toX12
    381  62da				  -	      jsr	DeletePiece
    382  62da					      endif
    383  62da
    384  62da							;---------------------------------------------------------------------------------------------------
    385  62da
      0  62da					      DEF	alphaBeta
      1  62da				   BANK_alphaBeta SET	_CURRENT_BANK
      2  62da
      3  62da				   alphaBeta
    387  62da
    388  62da		       60		      rts
    389  62db		       e6 9c		      inc	currentPly
    390  62dd		       a5 9c		      lda	currentPly
    391  62df
    392  62df		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    393  62e1		       f0 0f		      beq	.bottomOut	; at a leaf node of the search?
    394  62e3		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    395  62e5
    396  62e5		       a5 9e		      lda	sideToMove
    397  62e7		       49 80		      eor	#128
    398  62e9		       85 9e		      sta	sideToMove
    399  62eb
    400  62eb		       20 90 f2 	      jsr	NewPlyInitialise
    401  62ee
    402  62ee		       a5 9c		      lda	currentPly
    403  62f0		       85 3e		      sta	SET_BANK_RAM
    404  62f2
    405  62f2		       a9 00		      lda	#0
    406  62f4		       85 9d		      sta	piecelistIndex
    407  62f6		       20 ac f2    iterPieces jsr	GenerateMovesForNextPiece
    408  62f9		       a5 9d		      lda	piecelistIndex
    409  62fb		       c9 0f		      cmp	#15
    410  62fd		       d0 f7		      bne	iterPieces
    411  62ff
    412  62ff							; Perform a recursive search
    413  62ff							; simulate alpha-beta cull to just 7 moves per node
    414  62ff
    415  62ff					      REPEAT	7
    416  62ff							;jsr PhysicallyMovePiece
    417  62ff							;jsr FinaliseMove
    418  62ff		       20 da f2 	      jsr	alphaBeta
    415  62ff					      REPEND
    416  6302							;jsr PhysicallyMovePiece
    417  6302							;jsr FinaliseMove
    418  6302		       20 da f2 	      jsr	alphaBeta
    415  6302					      REPEND
    416  6305							;jsr PhysicallyMovePiece
    417  6305							;jsr FinaliseMove
    418  6305		       20 da f2 	      jsr	alphaBeta
    415  6305					      REPEND
    416  6308							;jsr PhysicallyMovePiece
    417  6308							;jsr FinaliseMove
    418  6308		       20 da f2 	      jsr	alphaBeta
    415  6308					      REPEND
    416  630b							;jsr PhysicallyMovePiece
    417  630b							;jsr FinaliseMove
    418  630b		       20 da f2 	      jsr	alphaBeta
    415  630b					      REPEND
    416  630e							;jsr PhysicallyMovePiece
    417  630e							;jsr FinaliseMove
    418  630e		       20 da f2 	      jsr	alphaBeta
    415  630e					      REPEND
    416  6311							;jsr PhysicallyMovePiece
    417  6311							;jsr FinaliseMove
    418  6311		       20 da f2 	      jsr	alphaBeta
    419  6314					      REPEND
    420  6314
    421  6314				   .bottomOut
    422  6314
    423  6314							; TODO: evaluate board position
    424  6314							; reverse move to previous position
    425  6314							; check the results, update scores and move pointers
    426  6314							; and return vars to expected
    427  6314
    428  6314		       a5 9e		      lda	sideToMove
    429  6316		       49 80		      eor	#128
    430  6318		       85 9e		      sta	sideToMove
    431  631a
    432  631a		       c6 9c		      dec	currentPly
    433  631c		       a5 9c		      lda	currentPly
    434  631e		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    435  6320
    436  6320		       60		      rts
    437  6321
    438  6321							;---------------------------------------------------------------------------------------------------
    439  6321
      0  6321					      DEF	RevertMove
      1  6321				   BANK_RevertMove SET	_CURRENT_BANK
      2  6321
      3  6321				   RevertMove
    441  6321
    442  6321							; backtrack after a move, restoring things to the way they were
    443  6321
    444  6321
    445  6321
    446  6321
    447  6321
    448  6321
    449  6321
    450  6321
    451  6321		       60		      rts
    452  6322
    453  6322
    454  6322							;---------------------------------------------------------------------------------------------------
    455  6322
      0  6322					      DEF	MoveViaListAtPly
      1  6322				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  6322
      3  6322				   MoveViaListAtPly
    457  6322
    458  6322		       ad 35 f0 	      lda	moveIndex
    459  6325		       c9 ff		      cmp	#-1
    460  6327		       f0 ff		      beq	halted	; no valid moves
    461  6329
    462  6329		       a8		      tay		; loop count
    463  632a		       c0 00		      cpy	#0
    464  632c		       f0 00		      beq	muldone
    465  632e		       c8		      iny
    466  632f
      0  632f					      NEXT_RANDOM
      1  632f		       a5 81		      lda	rnd
      2  6331		       4a		      lsr
      3  6332		       90 81		      bcc	.skipEOR
      4  6334		       49 fe		      eor	#RND_EOR_VAL
      5  6336		       85 81	   .skipEOR   sta	rnd
    468  6338
    469  6338		       a2 00		      ldx	#0
    470  633a		       a9 00		      lda	#0
    471  633c		       18	   .mulx      clc
    472  633d		       65 81		      adc	rnd
    473  633f		       90 81		      bcc	.nover
    474  6341		       e8		      inx
    475  6342		       88	   .nover     dey
    476  6343		       d0 f7		      bne	.mulx
    477  6345				   muldone
    478  6345
    479  6345							; fall through...
    480  6345							;---------------------------------------------------------------------------------------------------
    481  6345
      0  6345					      DEF	PhysicallyMovePiece
      1  6345				   BANK_PhysicallyMovePiece SET	_CURRENT_BANK
      2  6345
      3  6345				   PhysicallyMovePiece
    483  6345
    484  6345				   .foundMove
    485  6345		       bd 36 f0 	      lda	MoveFrom,x
    486  6348		       85 9f		      sta	fromSquare
    487  634a		       85 86		      sta	fromX12
    488  634c		       bd 00 f1 	      lda	MoveTo,x
    489  634f		       85 a1		      sta	toSquare
    490  6351		       85 87		      sta	toX12
    491  6353
    492  6353
    493  6353							; If en-passant flag set (pawn doing opening double-move) then record its square as the
    494  6353							; en-passant square for the ply.
    495  6353
    496  6353				  -	      if	0
    497  6353				  -	      TODO	BANK/BUGGERED AFTER
    498  6353				  -	      lda	currentPly
    499  6353				  -	      sta	SET_BANK_RAM
    500  6353				  -
    501  6353				  -	      ldy	#0
    502  6353				  -	      lda	MovePiece,x
    503  6353				  -	      and	#FLAG_ENPASSANT
    504  6353				  -	      beq	.notEP
    505  6353				  -	      ldy	toSquare
    506  6353				  -.notEP     sty	enPassantSquare+RAM_WRITE
    507  6353				  -
    508  6353					      endif
    509  6353
    510  6353
    511  6353		       bd 80 f1 	      lda	MovePiece,x
    512  6356		       29 df		      and	#~FLAG_ENPASSANT	;? unsure
    513  6358		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling (for K/R)
    514  635a		       85 a0		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    515  635c
    516  635c
    517  635c		       a6 9f		      ldx	fromSquare
    518  635e		       bc 00 00 	      ldy	X12toBase64,x
    519  6361		       84 9f		      sty	fromSquare	;B64
    520  6363
    521  6363		       a6 a1		      ldx	toSquare
    522  6365		       bc 00 00 	      ldy	X12toBase64,x
    523  6368		       84 a1		      sty	toSquare	;B64
    524  636a
    525  636a		       60	   halted     rts
    526  636b
    527  636b
    528  636b							;---------------------------------------------------------------------------------------------------
    529  636b
      0  636b					      DEF	CheckMoveListFromSquare
      1  636b				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  636b
      3  636b				   CheckMoveListFromSquare
    531  636b					      SUBROUTINE
    532  636b
    533  636b							; X12 in A
    534  636b							; y = -1 on return if NOT FOUND
    535  636b
    536  636b		       ac 35 f0 	      ldy	moveIndex
    537  636e		       30 35		      bmi	.failed
    538  6370
    539  6370		       d9 36 f0    .scan      cmp	MoveFrom,y
    540  6373		       f0 36		      beq	.scanned
    541  6375		       88		      dey
    542  6376		       10 f8		      bpl	.scan
    543  6378
    544  6378		       b9 80 f1    .scanned   lda	MovePiece,y
    545  637b		       85 a6		      sta	aiPiece
    546  637d
    547  637d		       60	   .failed    rts
    548  637e
    549  637e							;---------------------------------------------------------------------------------------------------
    550  637e
      0  637e					      DEF	IsSquareUnderAttack
      1  637e				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  637e
      3  637e				   IsSquareUnderAttack
    552  637e					      SUBROUTINE
    553  637e
    554  637e							; Scan the movelist to find if given square is under attack
    555  637e
    556  637e							; Pass:	 A = X12 square to check
    557  637e							; Return:	 CC = no
    558  637e
    559  637e		       ac 35 f0 	      ldy	moveIndex
    560  6381		       30 35		      bmi	.exit
    561  6383		       d9 00 f1    .scan      cmp	MoveTo,y
    562  6386		       f0 00		      beq	.found	; YES!
    563  6388		       88		      dey
    564  6389		       10 f8		      bpl	.scan
    565  638b
    566  638b		       18	   .exit      clc
    567  638c		       60	   .found     rts
    568  638d
    569  638d
    570  638d							;---------------------------------------------------------------------------------------------------
    571  638d
      0  638d					      DEF	GetKingSquare
      1  638d				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  638d
      3  638d				   GetKingSquare
    573  638d					      SUBROUTINE
    574  638d
    575  638d							; Return:	 a = square king is on (or -1)
    576  638d
    577  638d		       ac 30 f0 	      ldy	PieceListPtr
    578  6390		       30 30		      bmi	.exit	; no pieces?!
    579  6392		       b9 20 f0    .find      lda	PieceType,y
    580  6395		       29 0f		      and	#PIECE_MASK
    581  6397		       c9 07		      cmp	#KING
    582  6399		       f0 07		      beq	.found
    583  639b		       88		      dey
    584  639c		       10 f4		      bpl	.find
    585  639e
    586  639e		       a9 ff	   .exit      lda	#-1	; not found/no king square
    587  63a0		       60		      rts
    588  63a1
    589  63a1		       b9 10 f0    .found     lda	PieceSquare,y
    590  63a4		       60		      rts
    591  63a5
    592  63a5
    593  63a5							;---------------------------------------------------------------------------------------------------
    594  63a5
      0  63a5					      DEF	GetPieceGivenFromToSquares
      1  63a5				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  63a5
      3  63a5				   GetPieceGivenFromToSquares
    596  63a5					      SUBROUTINE
    597  63a5
    598  63a5							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    599  63a5							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    600  63a5							; This fixes the move with/without castle flag
    601  63a5
    602  63a5		       ac 35 f0 	      ldy	moveIndex
    603  63a8		       30 35		      bmi	.fail	; shouldn't happen
    604  63aa		       a5 86	   .scan      lda	fromX12
    605  63ac		       d9 36 f0 	      cmp	MoveFrom,y
    606  63af		       d0 36		      bne	.next
    607  63b1		       a5 87		      lda	toX12
    608  63b3		       d9 00 f1 	      cmp	MoveTo,y
    609  63b6		       f0 00		      beq	.found
    610  63b8		       88	   .next      dey
    611  63b9		       10 ef		      bpl	.scan
    612  63bb		       60	   .fail      rts
    613  63bc
    614  63bc		       b9 80 f1    .found     lda	MovePiece,y
    615  63bf		       85 a6		      sta	aiPiece
    616  63c1		       60		      rts
    617  63c2
    618  63c2
    619  63c2
    620  63c2							;---------------------------------------------------------------------------------------------------
    621  63c2
      0  63c2					      DEF	CheckMoveListToSquare
      1  63c2				   BANK_CheckMoveListToSquare SET	_CURRENT_BANK
      2  63c2
      3  63c2				   CheckMoveListToSquare
    623  63c2					      SUBROUTINE
    624  63c2
    625  63c2							; X12 in A
    626  63c2							; y = -1 on return if NOT FOUND
    627  63c2
    628  63c2		       ac 35 f0 	      ldy	moveIndex
    629  63c5		       30 35		      bmi	.sout
    630  63c7		       d9 00 f1    .scan      cmp	MoveTo,y
    631  63ca		       d0 00		      bne	.xscanned
    632  63cc
    633  63cc		       48		      pha
    634  63cd		       b9 36 f0 	      lda	MoveFrom,y
    635  63d0		       c5 93		      cmp	aiFromSquareX12
    636  63d2		       f0 93		      beq	.scanned
    637  63d4		       68		      pla
    638  63d5
    639  63d5		       88	   .xscanned  dey
    640  63d6		       10 ef		      bpl	.scan
    641  63d8		       48		      pha
    642  63d9
    643  63d9		       68	   .scanned   pla
    644  63da		       60	   .sout      rts
    645  63db
    646  63db
      0  63db					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  63db
      2  63db
      3  63db		       03 db	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3db , FREE= $25
      4  63db					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  63db				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  63db				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  63db				  -	      ERR
      8  63db					      endif
    648  63db
    649  63db							;---------------------------------------------------------------------------------------------------
    650  63db
    651  63db							; There is space here (1K) for use as ROM
    652  63db							; but NOT when the above bank is switched in as RAM, of course!
    653  63db
    654  63db
    655  63db
    656  63db
    657  63db							;---------------------------------------------------------------------------------------------------
    658  63db							; EOF
------- FILE ./chess.asm
    363  63db
    364  63db							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 1
      0  63db					      include	"BANK_FIXED.asm"
      1  63db							; Chess
      2  63db							; Copyright (c) 2019-2020 Andrew Davie
      3  63db							; andrew@taswegian.com
      4  63db
      5  63db
      6  63db							;---------------------------------------------------------------------------------------------------
      7  63db							;#########################################  FIXED BANK  ############################################
      8  63db							;---------------------------------------------------------------------------------------------------
      9  63db
     10  63db				   ORIGIN     SET	FIXED_BANK
     11  63db
      0  63db					      NEWBANK	THE_FIXED_BANK
      1  0000 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800							;---------------------------------------------------------------------------------------------------
     16  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800
      3  7800				   Reset
     18  7800					      SUBROUTINE
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 84		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;lda #BANK_TitleScreen
     34  780e							;sta SET_BANK
     35  780e							;jsr TitleScreen
     36  780e
     37  780e
     38  780e							; Move a copy of the row bank template to the first 8 banks of RAM
     39  780e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     40  780e
      0  780e					      JSRAM_SAFE	SetupBanks
      1  780e
      2  780e
      3  780e
      4  780e		       a9 00		      lda	#BANK_SetupBanks
      5  7810		       85 8e		      sta	savedBank
      6  7812		       85 3f		      sta	SET_BANK
      7  7814		       20 17 f1 	      jsr	SetupBanks
     42  7817
     43  7817							; Patch the final row's "loop" to a RTS
     44  7817
     45  7817		       a2 07		      ldx	#7
     46  7819		       86 3e		      stx	SET_BANK_RAM
     47  781b		       a9 60		      lda	#$60	; "rts"
     48  781d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     49  7820
     50  7820
     51  7820		       a5 9c		      lda	currentPly
     52  7822		       85 3e		      sta	SET_BANK_RAM
     53  7824		       20 90 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     54  7827
     55  7827		       a9 09		      lda	#RAMBANK_PLY
     56  7829		       85 3e		      sta	SET_BANK_RAM
     57  782b		       20 00 00 	      jsr	InitialisePieceSquares
     58  782e
     59  782e		       a9 00		      lda	#WHITE
     60  7830		       85 9e		      sta	sideToMove
     61  7832
     62  7832							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     63  7832
     64  7832		       a9 00		      lda	#0
     65  7834		       85 82		      sta	drawPhase
     66  7836
     67  7836							;---------------------------------------------------------------------------------------------------
     68  7836
     69  7836							;RESYNC
     70  7836				   .StartFrame
     71  7836
     72  7836
     73  7836							; START OF FRAME
     74  7836
     75  7836		       a9 0e		      lda	#%1110	; VSYNC ON
     76  7838		       85 42	   .loopVSync3 sta	WSYNC
     77  783a		       85 40		      sta	VSYNC
     78  783c		       4a		      lsr
     79  783d		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     80  783f
     81  783f		       a0 37		      ldy	#55	;VBLANK_TIM_NTSC
     82  7841		       8c 96 02 	      sty	TIM64T
     83  7844
     84  7844							; LOTS OF PROCESSING TIME - USE IT
     85  7844
     86  7844		       a2 00		      ldx	#0
     87  7846		       86 41		      stx	VBLANK
     88  7848
     89  7848
     90  7848					      IF	ASSERTS
     91  7848							;		      lda #$C2
     92  7848							;		      sta COLUBK		     ; colour timing band top of screen
     93  7848					      ENDIF
     94  7848
     95  7848							;		      lda #STATEMACHINE
     96  7848							;		      sta SET_BANK
     97  7848		       20 00 00 	      jsr	AiStateMachine
     98  784b
     99  784b							;jsr SAFE_PhasedProcessor
    100  784b
    101  784b					      IF	ASSERTS
    102  784b							;		      lda #0
    103  784b							;		      sta COLUBK		     ; end of timing band
    104  784b					      ENDIF
    105  784b
    106  784b					      if	ASSERTS
    107  784b							; Catch timer expired already
    108  784b		       2c 85 02 	      bit	TIMINT
    109  784e							;.whoops	      bmi .whoops
    110  784e					      endif
    111  784e
    112  784e
    113  784e		       2c 85 02    .wait      bit	TIMINT
    114  7851		       10 fb		      bpl	.wait
    115  7853
    116  7853
    117  7853
    118  7853							; START OF VISIBLE SCANLINES
    119  7853
    120  7853		       85 42		      sta	WSYNC
    121  7855
    122  7855		       20 00 00 	      jsr	_rts
    123  7858		       20 00 00 	      jsr	_rts
    124  785b		       20 00 00 	      jsr	_rts
    125  785e		       20 00 00 	      jsr	_rts
      0  7861					      SLEEP	3
      1  7861				   .CYCLES    SET	3
      2  7861
      3  7861				  -	      IF	.CYCLES < 2
      4  7861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  7861				  -	      ERR
      6  7861					      ENDIF
      7  7861
      8  7861					      IF	.CYCLES & 1
      9  7861					      IFNCONST	NO_ILLEGAL_OPCODES
     10  7861		       04 00		      nop	0
     11  7863				  -	      ELSE
     12  7863				  -	      bit	VSYNC
     13  7863					      ENDIF
     14  7863				   .CYCLES    SET	.CYCLES - 3
     15  7863					      ENDIF
     16  7863
     17  7863				  -	      REPEAT	.CYCLES / 2
     18  7863				  -	      nop
     19  7863					      REPEND
    127  7863
    128  7863		       a2 00		      ldx	#0
    129  7865		       86 41		      stx	VBLANK
    130  7867
    131  7867		       86 3e		      stx	SET_BANK_RAM
    132  7869		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    133  786c
    134  786c
    135  786c
    136  786c
    137  786c		       a9 00		      lda	#0
    138  786e		       85 4d		      sta	PF0
    139  7870		       85 4e		      sta	PF1
    140  7872		       85 4f		      sta	PF2
    141  7874		       85 5b		      sta	GRP0
    142  7876		       85 5c		      sta	GRP1
    143  7878
    144  7878		       a9 42		      lda	#%01000010	; bit6 is not required
    145  787a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    146  787c
    147  787c
    148  787c							; END OF VISIBLE SCREEN
    149  787c							; HERE'S SOME TIME TO DO STUFF
    150  787c
    151  787c		       a9 26		      lda	#38
    152  787e		       8d 96 02 	      sta	TIM64T
    153  7881
    154  7881							;
      0  7881					      JSRAM	PositionSprites
      1  7881
      2  7881		       a9 09		      lda	#BANK_PositionSprites
      3  7883		       85 3f		      sta	SET_BANK
      4  7885		       20 43 f2 	      jsr	PositionSprites
    156  7888
    157  7888
    158  7888
    159  7888							; "draw" sprite shapes into row banks
    160  7888
    161  7888		       a2 07		      ldx	#7
    162  788a		       86 3e	   zapem      stx	SET_BANK_RAM
    163  788c		       20 a6 f2 	      jsr	WriteBlank
    164  788f		       ca		      dex
    165  7890		       10 f8		      bpl	zapem
    166  7892
    167  7892		       20 cf f2 	      jsr	WriteCursor
    168  7895
    169  7895
    170  7895		       2c 85 02    Waitforit  bit	TIMINT
    171  7898		       10 fb		      bpl	Waitforit
    172  789a
    173  789a		       4c 36 f8 	      jmp	.StartFrame
    174  789d
    175  789d
    176  789d		       60	   _rts       rts
    177  789e
    178  789e
    179  789e							;---------------------------------------------------------------------------------------------------
    180  789e
      0  789e					      DEF	AiStateMachine
      1  789e				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  789e
      3  789e				   AiStateMachine
    182  789e					      SUBROUTINE
    183  789e
    184  789e		       a9 09		      lda	#STATEMACHINE
    185  78a0		       85 3f		      sta	SET_BANK	; to access vectors
    186  78a2
    187  78a2		       a6 8f		      ldx	aiPhase
    188  78a4		       bd 00 f0 	      lda	AiVectorLO,x
    189  78a7		       85 ef		      sta	__ptr
    190  78a9		       bd 0e f0 	      lda	AiVectorHI,x
    191  78ac		       85 f0		      sta	__ptr+1
    192  78ae
    193  78ae		       bd 1c f0 	      lda	AiVectorBANK,x
    194  78b1		       85 8e		      sta	savedBank
    195  78b3		       85 3f		      sta	SET_BANK
    196  78b5
    197  78b5		       6c ef 00 	      jmp	(__ptr)
    198  78b8
    199  78b8
    200  78b8							;---------------------------------------------------------------------------------------------------
    201  78b8
    202  78b8							;    DEF SAFE_PhasedProcessor
    203  78b8							;    SUBROUTINE
    204  78b8
    205  78b8							;		      jsr PhaseJump
    206  78b8							;		      lda savedBank
    207  78b8							;		      sta SET_BANK
    208  78b8							;		      rts
    209  78b8
    210  78b8							;---------------------------------------------------------------------------------------------------
    211  78b8
    212  78b8				  -	      if	0
    213  78b8				  -	      DEF	PhaseJump
    214  78b8				  -	      SUBROUTINE
    215  78b8				  -
    216  78b8				  -	      ldx	drawPhase
    217  78b8				  -	      lda	DrawVectorLO,x
    218  78b8				  -	      sta	__ptr
    219  78b8				  -	      lda	DrawVectorHI,x
    220  78b8				  -	      sta	__ptr+1
    221  78b8				  -	      lda	DrawVectorBANK,x
    222  78b8				  -	      sta	savedBank
    223  78b8				  -	      sta	SET_BANK
    224  78b8				  -	      jmp	(__ptr)
    225  78b8					      endif
    226  78b8
    227  78b8		       00 0a	   MARCH      =	10
    228  78b8		       00 04	   STARTMOVE  =	4
    229  78b8		       00 07	   CSL	      =	7
    230  78b8
    231  78b8				   DrawVectorLO
    232  78b8		       41		      .byte.b	<aiStartClearBoard	; 0
    233  78b9		       48		      .byte.b	<aiClearEachRow	; 1
    234  78ba		       00		      .byte.b	<DrawEntireBoard	; 2
    235  78bb		       8c		      .byte.b	<DEB2	; 3
    236  78bc		       00		      .byte.b	<FlipBuffers	; 4
    237  78bd		       00		      .byte.b	<FB0	; 5
    238  78be		       00		      .byte.b	<FB2	; 6
    239  78bf		       58		      .byte.b	<FB3	; 7
    240  78c0		       5f		      .byte.b	<EraseStartPiece	; 8
    241  78c1		       70		      .byte.b	<WriteStartPieceBlank	; 9
    242  78c2		       00		      .byte.b	<MarchToTargetA	; 10
    243  78c3		       99		      .byte.b	<MarchB	; 11
    244  78c4		       00		      .byte.b	<MarchToTargetB	; 12
    245  78c5		       00		      .byte.b	<MarchB2	; 13
    246  78c6		       a7		      .byte.b	<FinalFlash	; 14
    247  78c7		       00		      .byte.b	<SpecialMoveFixup	; 15
    248  78c8
    249  78c8				   DrawVectorHI
    250  78c8		       f0		      .byte.b	>aiStartClearBoard
    251  78c9		       f0		      .byte.b	>aiClearEachRow
    252  78ca		       00		      .byte.b	>DrawEntireBoard
    253  78cb		       f0		      .byte.b	>DEB2
    254  78cc		       00		      .byte.b	>FlipBuffers
    255  78cd		       00		      .byte.b	>FB0
    256  78ce		       00		      .byte.b	>FB2
    257  78cf		       f0		      .byte.b	>FB3
    258  78d0		       f0		      .byte.b	>EraseStartPiece
    259  78d1		       f0		      .byte.b	>WriteStartPieceBlank
    260  78d2		       00		      .byte.b	>MarchToTargetA
    261  78d3		       f0		      .byte.b	>MarchB
    262  78d4		       00		      .byte.b	>MarchToTargetB
    263  78d5		       00		      .byte.b	>MarchB2
    264  78d6		       f0		      .byte.b	>FinalFlash
    265  78d7		       00		      .byte.b	>SpecialMoveFixup
    266  78d8
    267  78d8				   DrawVectorBANK
    268  78d8
    269  78d8		       00		      .byte.b	BANK_aiStartClearBoard
    270  78d9		       00		      .byte.b	BANK_aiClearEachRow
    271  78da		       00		      .byte.b	BANK_DrawEntireBoard
    272  78db		       00		      .byte.b	BANK_DEB2
    273  78dc		       00		      .byte.b	BANK_FlipBuffers
    274  78dd		       00		      .byte.b	BANK_FB0
    275  78de		       00		      .byte.b	BANK_FB2
    276  78df		       00		      .byte.b	BANK_FB3
    277  78e0		       00		      .byte.b	BANK_EraseStartPiece
    278  78e1		       00		      .byte.b	BANK_WriteStartPieceBlank
    279  78e2		       00		      .byte.b	BANK_MarchToTargetA
    280  78e3		       00		      .byte.b	BANK_MarchB
    281  78e4		       00		      .byte.b	BANK_MarchToTargetB
    282  78e5		       00		      .byte.b	BANK_MarchB2
    283  78e6		       00		      .byte.b	BANK_FinalFlash
    284  78e7		       00		      .byte.b	BANK_SpecialMoveFixup
    285  78e8
    286  78e8							;---------------------------------------------------------------------------------------------------
    287  78e8
      0  78e8					      DEF	CallClear
      1  78e8				   BANK_CallClear SET	_CURRENT_BANK
      2  78e8
      3  78e8				   CallClear
    289  78e8					      SUBROUTINE
    290  78e8
    291  78e8		       84 3e		      sty	SET_BANK_RAM
    292  78ea		       20 c8 f0 	      jsr	ClearRowBitmap
    293  78ed		       60		      rts
    294  78ee
    295  78ee							;---------------------------------------------------------------------------------------------------
    296  78ee
      0  78ee					      DEF	SAFE_Get64toX12Board
      1  78ee				   BANK_SAFE_Get64toX12Board SET	_CURRENT_BANK
      2  78ee
      3  78ee				   SAFE_Get64toX12Board
    298  78ee					      SUBROUTINE
    299  78ee
    300  78ee		       a9 08		      lda	#RAMBANK_MOVES_RAM
    301  78f0		       85 3e		      sta	SET_BANK_RAM
    302  78f2		       bc 4b f3 	      ldy	Base64ToIndex,x
    303  78f5		       b9 7a f0 	      lda	Board,y
    304  78f8		       a4 8e		      ldy	savedBank
    305  78fa		       84 3f		      sty	SET_BANK
    306  78fc		       60		      rts
    307  78fd
    308  78fd							;---------------------------------------------------------------------------------------------------
    309  78fd
      0  78fd					      DEF	DrawEntireBoard
      1  78fd				   BANK_DrawEntireBoard SET	_CURRENT_BANK
      2  78fd
      3  78fd				   DrawEntireBoard
    311  78fd					      SUBROUTINE
    312  78fd
    313  78fd		       a9 08		      lda	#RAMBANK_MOVES_RAM
    314  78ff		       85 3e		      sta	SET_BANK_RAM
    315  7901
    316  7901		       a6 80		      ldx	drawPieceNumber
    317  7903		       bc 4b f3 	      ldy	Base64ToIndex,x
    318  7906		       b9 7a f0 	      lda	Board,y
    319  7909		       f0 7a		      beq	.isablank
    320  790b		       48		      pha
    321  790c		       a9 00		      lda	#BLANK
    322  790e		       99 7a f4 	      sta	Board+RAM_WRITE,y
    323  7911
    324  7911		       20 00 00 	      jsr	CopySinglePiece
    325  7914
    326  7914		       a9 08		      lda	#RAMBANK_MOVES_RAM
    327  7916		       85 3e		      sta	SET_BANK_RAM
    328  7918		       a6 80		      ldx	drawPieceNumber
    329  791a		       bc 4b f3 	      ldy	Base64ToIndex,x
    330  791d		       68		      pla
    331  791e		       99 7a f4 	      sta	Board+RAM_WRITE,y
    332  7921
    333  7921		       e6 82	   .isablank  inc	drawPhase
    334  7923		       60		      rts
    335  7924
    336  7924
    337  7924							;---------------------------------------------------------------------------------------------------
    338  7924
      0  7924					      DEF	FlipBuffers
      1  7924				   BANK_FlipBuffers SET	_CURRENT_BANK
      2  7924
      3  7924				   FlipBuffers
    340  7924					      SUBROUTINE
    341  7924
    342  7924							; Initialise for a new move
    343  7924
    344  7924
    345  7924
    346  7924		       a5 9c		      lda	currentPly
    347  7926		       85 3e		      sta	SET_BANK_RAM
    348  7928
    349  7928		       20 90 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    350  792b
    351  792b		       ad 34 f0 	      lda	enPassantSquare	; potentially set by move in previous ply
    352  792e		       85 9a		      sta	enPassantPawn	; grab enPassant flag from PLY for later checking
    353  7930
    354  7930
    355  7930		       a9 0b		      lda	#AI_SartMoveGen
    356  7932		       85 8f		      sta	aiPhase
    357  7934
    358  7934		       e6 82		      inc	drawPhase
    359  7936		       60		      rts
    360  7937
    361  7937
    362  7937							;---------------------------------------------------------------------------------------------------
    363  7937
      0  7937					      DEF	SAFE_InitialiseMoveGeneration
      1  7937				   BANK_SAFE_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  7937
      3  7937				   SAFE_InitialiseMoveGeneration
    365  7937					      SUBROUTINE
    366  7937
    367  7937		       a5 9c		      lda	currentPly
    368  7939		       85 3e		      sta	SET_BANK_RAM
    369  793b
    370  793b		       20 90 f2 	      jsr	NewPlyInitialise
    371  793e
    372  793e		       a5 8e		      lda	savedBank
    373  7940		       85 3f		      sta	SET_BANK
    374  7942		       60		      rts
    375  7943
    376  7943
    377  7943							;---------------------------------------------------------------------------------------------------
    378  7943
    379  7943							;TODO...
      0  7943					      DEF	SAFE_GenerateOneMove
      1  7943				   BANK_SAFE_GenerateOneMove SET	_CURRENT_BANK
      2  7943
      3  7943				   SAFE_GenerateOneMove
    381  7943					      SUBROUTINE
    382  7943
    383  7943		       a5 9c		      lda	currentPly
    384  7945		       85 3e		      sta	SET_BANK_RAM
    385  7947		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    386  794a
    387  794a		       a5 8e		      lda	savedBank
    388  794c		       85 3f		      sta	SET_BANK
    389  794e		       60		      rts
    390  794f
    391  794f
    392  794f							;---------------------------------------------------------------------------------------------------
    393  794f
    394  794f							;TODO...
      0  794f					      DEF	SAFE_LookForCheck
      1  794f				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  794f
      3  794f				   SAFE_LookForCheck
    396  794f					      SUBROUTINE
    397  794f
    398  794f		       a5 9c		      lda	currentPly
    399  7951		       85 3e		      sta	SET_BANK_RAM
    400  7953
    401  7953		       ac 35 f0 	      ldy	moveIndex
    402  7956		       30 35		      bmi	.failed
    403  7958
    404  7958		       be 00 f1    .scan      ldx	MoveTo,y
    405  795b		       bd 7a f0 	      lda	Board,x
    406  795e		       29 0f		      and	#PIECE_MASK
    407  7960		       c9 07		      cmp	#KING
    408  7962		       f0 07		      beq	.inCheck	; --> CS too
    409  7964		       88		      dey
    410  7965		       10 f1		      bpl	.scan
    411  7967
    412  7967		       18	   .failed    clc
    413  7968
    414  7968		       a5 8e	   .inCheck   lda	savedBank	; CS or CC
    415  796a		       85 3f		      sta	SET_BANK
    416  796c		       60		      rts
    417  796d
    418  796d							;---------------------------------------------------------------------------------------------------
    419  796d
      0  796d					      DEF	FB0
      1  796d				   BANK_FB0   SET	_CURRENT_BANK
      2  796d
      3  796d				   FB0
    421  796d					      SUBROUTINE
    422  796d
    423  796d							; Call move generation for all pieces
    424  796d							; Test alpha-beta
    425  796d
    426  796d		       a5 9c		      lda	currentPly
    427  796f		       85 3e		      sta	SET_BANK_RAM
    428  7971		       20 da f2 	      jsr	alphaBeta
    429  7974
    430  7974		       a5 9c		      lda	currentPly
    431  7976		       85 3e		      sta	SET_BANK_RAM
    432  7978		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    433  797b
    434  797b		       a5 9d		      lda	piecelistIndex
    435  797d		       29 0f		      and	#15
    436  797f		       c9 00		      cmp	#0
    437  7981		       d0 00		      bne	.wait
    438  7983
    439  7983		       e6 82		      inc	drawPhase
    440  7985		       60	   .wait      rts
    441  7986
    442  7986
    443  7986							;---------------------------------------------------------------------------------------------------
    444  7986
      0  7986					      DEF	FB2
      1  7986				   BANK_FB2   SET	_CURRENT_BANK
      2  7986
      3  7986				   FB2
    446  7986					      SUBROUTINE
    447  7986
    448  7986							; Choose one of the moves
    449  7986
    450  7986		       a5 9c		      lda	currentPly
    451  7988		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    452  798a
    453  798a		       ad 35 f0 	      lda	moveIndex
    454  798d		       c9 ff		      cmp	#-1
    455  798f		       f0 ff		      beq	.halted	; no valid moves
    456  7991
    457  7991
    458  7991		       a9 ff		      lda	#-1
    459  7993		       85 9f		      sta	fromSquare
    460  7995		       85 a1		      sta	toSquare
    461  7997
    462  7997		       a5 9e		      lda	sideToMove
    463  7999		       10 9e		      bpl	.notComputer
    464  799b
    465  799b		       20 00 00 	      jsr	MoveViaList
    466  799e
    467  799e		       e6 82	   .notComputer inc	drawPhase
    468  79a0		       60	   .halted    rts
    469  79a1
    470  79a1
    471  79a1							;---------------------------------------------------------------------------------------------------
    472  79a1
      0  79a1					      DEF	debug
      1  79a1				   BANK_debug SET	_CURRENT_BANK
      2  79a1
      3  79a1				   debug
    474  79a1					      SUBROUTINE
    475  79a1
    476  79a1							; Use this to trap breakpoints in "unknown" banks. Just "jsr catch" from wherever you want
    477  79a1							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    478  79a1							; you wanted to see, without knowing the bank.
    479  79a1
    480  79a1		       60		      rts
    481  79a2
    482  79a2
    483  79a2							;---------------------------------------------------------------------------------------------------
    484  79a2
      0  79a2					      DEF	MarchToTargetA
      1  79a2				   BANK_MarchToTargetA SET	_CURRENT_BANK
      2  79a2
      3  79a2				   MarchToTargetA
    486  79a2					      SUBROUTINE
    487  79a2
    488  79a2							; Start marching towards destination
    489  79a2
    490  79a2		       a5 83		      lda	drawDelay
    491  79a4		       f0 83		      beq	.progress
    492  79a6							;dec drawDelay
    493  79a6							;rts
    494  79a6				   .progress
    495  79a6
    496  79a6
    497  79a6		       a5 9f		      lda	fromSquare
    498  79a8		       c5 a1		      cmp	toSquare
    499  79aa		       f0 a1		      beq	.unmoved
    500  79ac
    501  79ac							; Now we calculate move to new square
    502  79ac
    503  79ac		       a5 9f		      lda	fromSquare
    504  79ae		       85 84		      sta	lastSquare
    505  79b0		       4a		      lsr
    506  79b1		       4a		      lsr
    507  79b2		       4a		      lsr
    508  79b3		       85 a7		      sta	__fromRow
    509  79b5		       a5 a1		      lda	toSquare
    510  79b7		       4a		      lsr
    511  79b8		       4a		      lsr
    512  79b9		       4a		      lsr
    513  79ba		       c5 a7		      cmp	__fromRow
    514  79bc		       f0 a7		      beq	rowOK
    515  79be		       b0 a7		      bcs	.downRow
    516  79c0		       a5 9f		      lda	fromSquare
    517  79c2		       e9 07		      sbc	#7
    518  79c4		       85 9f		      sta	fromSquare
    519  79c6		       4c 00 00 	      jmp	nowcol
    520  79c9		       a5 9f	   .downRow   lda	fromSquare
    521  79cb		       69 07		      adc	#7
    522  79cd		       85 9f		      sta	fromSquare
    523  79cf				   rowOK
    524  79cf				   nowcol
    525  79cf
    526  79cf		       a5 9f		      lda	fromSquare
    527  79d1		       29 07		      and	#7
    528  79d3		       85 a7		      sta	__fromRow
    529  79d5		       a5 a1		      lda	toSquare
    530  79d7		       29 07		      and	#7
    531  79d9		       c5 a7		      cmp	__fromRow
    532  79db		       f0 a7		      beq	colok
    533  79dd		       90 a7		      bcc	.leftCol
    534  79df		       e6 9f		      inc	fromSquare
    535  79e1		       4c 00 00 	      jmp	colok
    536  79e4		       c6 9f	   .leftCol   dec	fromSquare
    537  79e6				   colok
    538  79e6
    539  79e6							; erase object in new sqare --> blank
    540  79e6
    541  79e6		       a6 9f		      ldx	fromSquare
    542  79e8		       86 80		      stx	drawPieceNumber
    543  79ea		       a9 08		      lda	#RAMBANK_MOVES_RAM
    544  79ec		       85 3e		      sta	SET_BANK_RAM
    545  79ee		       bc 4b f3 	      ldy	Base64ToIndex,x
    546  79f1		       b9 7a f0 	      lda	Board,y
    547  79f4		       f0 7a		      beq	.skipbl
    548  79f6		       20 00 00 	      jsr	CopySinglePiece	; erase next square along --> blank
    549  79f9
    550  79f9		       a9 08	   .skipbl    lda	#RAMBANK_MOVES_RAM
    551  79fb		       85 3e		      sta	SET_BANK_RAM
    552  79fd		       a6 9f		      ldx	fromSquare
    553  79ff		       bc 4b f3 	      ldy	Base64ToIndex,x
    554  7a02
    555  7a02		       b9 7a f0 	      lda	Board,y
    556  7a05		       85 a3		      sta	lastPiece	; what we are overwriting
    557  7a07		       a5 a0		      lda	fromPiece
    558  7a09		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling for K/R
    559  7a0b		       99 7a f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    560  7a0e		       e6 82		      inc	drawPhase
    561  7a10
    562  7a10		       60	   .unmoved   rts
    563  7a11
    564  7a11
    565  7a11							;---------------------------------------------------------------------------------------------------
    566  7a11
      0  7a11					      DEF	MarchToTargetB
      1  7a11				   BANK_MarchToTargetB SET	_CURRENT_BANK
      2  7a11
      3  7a11				   MarchToTargetB
    568  7a11					      SUBROUTINE
    569  7a11
    570  7a11		       a5 83		      lda	drawDelay
    571  7a13		       f0 83		      beq	.mb
    572  7a15							;dec drawDelay
    573  7a15							;rts
    574  7a15				   .mb
    575  7a15
    576  7a15
    577  7a15							; now we want to undraw the piece in the old square
    578  7a15
    579  7a15		       a5 84		      lda	lastSquare
    580  7a17		       85 80		      sta	drawPieceNumber
    581  7a19		       20 00 00 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    582  7a1c
    583  7a1c		       a9 08		      lda	#RAMBANK_MOVES_RAM
    584  7a1e		       85 3e		      sta	SET_BANK_RAM
    585  7a20		       a5 a4		      lda	previousPiece
    586  7a22
    587  7a22		       a6 84		      ldx	lastSquare
    588  7a24		       bc 4b f3 	      ldy	Base64ToIndex,x
    589  7a27		       99 7a f4 	      sta	Board+RAM_WRITE,y
    590  7a2a
    591  7a2a		       a5 a3		      lda	lastPiece
    592  7a2c		       85 a4		      sta	previousPiece
    593  7a2e
    594  7a2e		       e6 82		      inc	drawPhase
    595  7a30		       60		      rts
    596  7a31
    597  7a31
    598  7a31							;---------------------------------------------------------------------------------------------------
    599  7a31
      0  7a31					      DEF	MarchB2
      1  7a31				   BANK_MarchB2 SET	_CURRENT_BANK
      2  7a31
      3  7a31				   MarchB2
    601  7a31					      SUBROUTINE
    602  7a31
    603  7a31		       a6 84		      ldx	lastSquare
    604  7a33		       86 80		      stx	drawPieceNumber
    605  7a35
    606  7a35		       a9 08		      lda	#RAMBANK_MOVES_RAM
    607  7a37		       85 3e		      sta	SET_BANK_RAM
    608  7a39		       bc 4b f3 	      ldy	Base64ToIndex,x
    609  7a3c		       b9 7a f0 	      lda	Board,y
    610  7a3f		       f0 7a		      beq	.skipbl2
    611  7a41
    612  7a41		       20 00 00 	      jsr	CopySinglePiece	; draw previous piece back in old position
    613  7a44				   .skipbl2
    614  7a44		       a5 9f		      lda	fromSquare
    615  7a46		       c5 a1		      cmp	toSquare
    616  7a48		       f0 a1		      beq	xhalt
    617  7a4a
    618  7a4a		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    619  7a4c		       85 83		      sta	drawDelay
    620  7a4e
    621  7a4e		       a9 0a		      lda	#MARCH
    622  7a50		       85 82		      sta	drawPhase
    623  7a52		       60		      rts
    624  7a53
    625  7a53				   xhalt
    626  7a53
    627  7a53		       20 00 00 	      jsr	FinaliseMove
    628  7a56
    629  7a56
    630  7a56		       a9 04		      lda	#4	; on/off count
    631  7a58		       85 85		      sta	drawCount	; flashing for piece about to move
    632  7a5a		       a9 00		      lda	#0
    633  7a5c		       85 83		      sta	drawDelay
    634  7a5e
    635  7a5e		       e6 82		      inc	drawPhase
    636  7a60		       60		      rts
    637  7a61
    638  7a61
    639  7a61							;---------------------------------------------------------------------------------------------------
    640  7a61
      0  7a61					      DEF	SpecialMoveFixup
      1  7a61				   BANK_SpecialMoveFixup SET	_CURRENT_BANK
      2  7a61
      3  7a61				   SpecialMoveFixup
    642  7a61					      SUBROUTINE
    643  7a61
    644  7a61		       a9 04		      lda	#STARTMOVE
    645  7a63		       85 82		      sta	drawPhase
    646  7a65
      0  7a65					      JSRAM_SAFE	CastleFixup
      1  7a65
      2  7a65
      3  7a65
      4  7a65		       a9 00		      lda	#BANK_CastleFixup
      5  7a67		       85 8e		      sta	savedBank
      6  7a69		       85 3f		      sta	SET_BANK
      7  7a6b		       20 c3 f0 	      jsr	CastleFixup
    648  7a6e
    649  7a6e							; Handle en-passant captures
    650  7a6e
    651  7a6e		       a5 a0		      lda	fromPiece
    652  7a70		       29 20		      and	#FLAG_ENPASSANT
    653  7a72		       f0 20		      beq	.noEP
    654  7a74
    655  7a74
    656  7a74							; TODO - handle the en-passant capture and fixup
    657  7a74
    658  7a74				   .noEP
    659  7a74
    660  7a74
    661  7a74
    662  7a74					      if	ASSERTS
      0  7a74					      JSRAM_SAFE	DIAGNOSTIC_checkPieces
      1  7a74
      2  7a74
      3  7a74
      4  7a74		       a9 0c		      lda	#BANK_DIAGNOSTIC_checkPieces
      5  7a76		       85 8e		      sta	savedBank
      6  7a78		       85 3f		      sta	SET_BANK
      7  7a7a		       20 42 f2 	      jsr	DIAGNOSTIC_checkPieces
    664  7a7d					      endif
    665  7a7d
    666  7a7d		       60		      rts
    667  7a7e
    668  7a7e
    669  7a7e							;---------------------------------------------------------------------------------------------------
    670  7a7e
      0  7a7e					      DEF	MoveForSinglePiece
      1  7a7e				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  7a7e
      3  7a7e				   MoveForSinglePiece
    672  7a7e					      SUBROUTINE
    673  7a7e
    674  7a7e		       a9 08		      lda	#RAMBANK_MOVES_RAM
    675  7a80		       85 3e		      sta	SET_BANK_RAM
    676  7a82
    677  7a82		       a6 98		      ldx	currentSquare	; used in move handlers
    678  7a84		       bd 7a f0 	      lda	Board,x
    679  7a87		       85 97		      sta	currentPiece
    680  7a89
    681  7a89							;***********************************************************************************************
    682  7a89					      IF	ASSERTS
    683  7a89					      SUBROUTINE
    684  7a89							; DEBUG: Make sure we're looking at correct colour
    685  7a89		       45 9e		      eor	sideToMove
    686  7a8b		       30 fe	   .lock      bmi	.lock
    687  7a8d		       a5 97		      lda	currentPiece
    688  7a8f					      ENDIF
    689  7a8f							;***********************************************************************************************
    690  7a8f
    691  7a8f		       29 0f		      and	#PIECE_MASK
    692  7a91		       a8		      tay
    693  7a92
    694  7a92							;***********************************************************************************************
    695  7a92					      IF	ASSERTS
    696  7a92							; DEBUG: Make sure we have an actual piece, not an empty square
    697  7a92					      SUBROUTINE
    698  7a92		       f0 fe	   .lock      beq	.lock	; catch errors
    699  7a94					      ENDIF
    700  7a94							;***********************************************************************************************
    701  7a94
    702  7a94		       b9 ff ff 	      lda	HandlerVectorLO-1,y
    703  7a97		       85 a8		      sta	__vector
    704  7a99		       b9 ff ff 	      lda	HandlerVectorHI-1,y
    705  7a9c		       85 a9		      sta	__vector+1
    706  7a9e		       6c a8 00 	      jmp	(__vector)
    707  7aa1
    708  7aa1		       a5 9c	   MoveReturn lda	currentPly
    709  7aa3		       85 3e		      sta	SET_BANK_RAM
    710  7aa5
    711  7aa5		       60		      rts
    712  7aa6
      0  7aa6					      OPTIONAL_PAGEBREAK	"Vector Tables", 15
     10  7aa6					      LIST	ON
    714  7aa6
    715  7aa6		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    716  7aa7
    717  7aa7				   HandlerVectorLO
    718  7aa7		       00		      .byte.b	<Handle_WHITE_PAWN	; 1
    719  7aa8		       00		      .byte.b	<Handle_BLACK_PAWN	; 2
    720  7aa9		       00		      .byte.b	<Handle_KNIGHT	; 3
    721  7aaa		       a1		      .byte.b	<Handle_BISHOP	; 4
    722  7aab		       04		      .byte.b	<Handle_ROOK	; 5
    723  7aac		       de		      .byte.b	<Handle_QUEEN	; 6
    724  7aad		       67		      .byte.b	<Handle_KING	; 7
    725  7aae
    726  7aae				   HandlerVectorHI
    727  7aae		       00		      .byte.b	>Handle_WHITE_PAWN
    728  7aaf		       00		      .byte.b	>Handle_BLACK_PAWN
    729  7ab0		       00		      .byte.b	>Handle_KNIGHT
    730  7ab1		       f1		      .byte.b	>Handle_BISHOP
    731  7ab2		       f2		      .byte.b	>Handle_ROOK
    732  7ab3		       f0		      .byte.b	>Handle_QUEEN
    733  7ab4		       f2		      .byte.b	>Handle_KING
    734  7ab5
    735  7ab5							;---------------------------------------------------------------------------------------------------
    736  7ab5
------- FILE Handler_PAWN.asm LEVEL 3 PASS 1
      0  7ab5					      include	"Handler_PAWN.asm"
      1  7ab5							; Copyright (C)2020 Andrew Davie
      2  7ab5							; Pawn move handlers
      3  7ab5
      4  7ab5							;---------------------------------------------------------------------------------------------------
      5  7ab5							; WHITE PAWN
      6  7ab5							;---------------------------------------------------------------------------------------------------
      7  7ab5
      8  7ab5		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  7ab5		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  7ab5
     11  7ab5							;---------------------------------------------------------------------------------------------------
     12  7ab5
     13  7ab5					      MAC	en_passant
     14  7ab5					      SUBROUTINE
     15  7ab5							; {1} = _LEFT or _RIGHT
     16  7ab5					      ldy	ValidSquare+{1},x
     17  7ab5					      cpy	enPassantPawn
     18  7ab5					      bne	.invalid
     19  7ab5					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     20  7ab5					      lda	Board,y
     21  7ab5					      bne	.invalid
     22  7ab5					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     23  7ab5				   .invalid
     24  7ab5					      ENDM
     25  7ab5
     26  7ab5							;---------------------------------------------------------------------------------------------------
     27  7ab5
     28  7ab5					      MAC	promote_pawn
     29  7ab5					      SUBROUTINE
     30  7ab5							;{1} = BLACK or WHITE
     31  7ab5
     32  7ab5					      lda	currentPiece
     33  7ab5					      pha
     34  7ab5
     35  7ab5					      sty	__temp
     36  7ab5					      lda	#{1}|QUEEN
     37  7ab5					      sta	currentPiece
     38  7ab5					      jsr	AddMove
     39  7ab5
     40  7ab5					      lda	#{1}|ROOK
     41  7ab5					      sta	currentPiece
     42  7ab5					      ldy	__temp
     43  7ab5					      jsr	AddMove
     44  7ab5
     45  7ab5					      lda	#{1}|BISHOP
     46  7ab5					      sta	currentPiece
     47  7ab5					      ldy	__temp
     48  7ab5					      jsr	AddMove
     49  7ab5
     50  7ab5					      lda	#{1}|KNIGHT
     51  7ab5					      sta	currentPiece
     52  7ab5					      ldy	__temp
     53  7ab5					      jsr	AddMove
     54  7ab5
     55  7ab5					      pla
     56  7ab5					      sta	currentPiece
     57  7ab5					      ENDM
     58  7ab5
     59  7ab5							;---------------------------------------------------------------------------------------------------
     60  7ab5
     61  7ab5					      MAC	move_or_promote_pawn
     62  7ab5					      SUBROUTINE
     63  7ab5							; {1} = BLACK or WHITE
     64  7ab5
     65  7ab5					      IF	{1} = WHITE
     66  7ab5					      cpy	#90	; last rank?
     67  7ab5					      bcc	.standard
     68  7ab5					      jsr	PromoteWhitePawn
     69  7ab5					      jmp	.pMoved
     70  7ab5					      ENDIF
     71  7ab5
     72  7ab5					      IF	{1} = BLACK
     73  7ab5					      cpy	#30	; last rank?
     74  7ab5					      bcs	.standard
     75  7ab5					      jsr	PromoteBlackPawn
     76  7ab5					      jmp	.pMoved
     77  7ab5					      ENDIF
     78  7ab5
     79  7ab5				   .standard  jsr	AddMove	; add +1UP move
     80  7ab5				   .pMoved
     81  7ab5
     82  7ab5					      ENDM
     83  7ab5
     84  7ab5							;---------------------------------------------------------------------------------------------------
     85  7ab5
     86  7ab5					      MAC	take
     87  7ab5					      SUBROUTINE
     88  7ab5							; {1} = capture square offset
     89  7ab5
     90  7ab5					      ldy	ValidSquare+{1},x
     91  7ab5					      bmi	.invalid
     92  7ab5					      lda	Board,y
     93  7ab5					      beq	.invalid	; square empty
     94  7ab5					      eor	currentPiece
     95  7ab5					      bpl	.invalid	; same colour
     96  7ab5
     97  7ab5					      MOVE_OR_PROMOTE_PAWN	{2}
     98  7ab5				   .invalid
     99  7ab5					      ENDM
    100  7ab5
    101  7ab5							;---------------------------------------------------------------------------------------------------
    102  7ab5
      0  7ab5					      DEF	PromoteWhitePawn
      1  7ab5				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7ab5
      3  7ab5				   PromoteWhitePawn
      0  7ab5					      PROMOTE_PAWN	WHITE
      1  7ab5					      SUBROUTINE
      2  7ab5
      3  7ab5
      4  7ab5		       a5 97		      lda	currentPiece
      5  7ab7		       48		      pha
      6  7ab8
      7  7ab8		       84 a9		      sty	__temp
      8  7aba		       a9 06		      lda	#WHITE|QUEEN
      9  7abc		       85 97		      sta	currentPiece
     10  7abe		       20 00 00 	      jsr	AddMove
     11  7ac1
     12  7ac1		       a9 05		      lda	#WHITE|ROOK
     13  7ac3		       85 97		      sta	currentPiece
     14  7ac5		       a4 a9		      ldy	__temp
     15  7ac7		       20 00 00 	      jsr	AddMove
     16  7aca
     17  7aca		       a9 04		      lda	#WHITE|BISHOP
     18  7acc		       85 97		      sta	currentPiece
     19  7ace		       a4 a9		      ldy	__temp
     20  7ad0		       20 00 00 	      jsr	AddMove
     21  7ad3
     22  7ad3		       a9 03		      lda	#WHITE|KNIGHT
     23  7ad5		       85 97		      sta	currentPiece
     24  7ad7		       a4 a9		      ldy	__temp
     25  7ad9		       20 00 00 	      jsr	AddMove
     26  7adc
     27  7adc		       68		      pla
     28  7add		       85 97		      sta	currentPiece
    105  7adf		       60		      rts
    106  7ae0
    107  7ae0							;---------------------------------------------------------------------------------------------------
    108  7ae0
      0  7ae0					      DEF	Handle_WHITE_PAWN
      1  7ae0				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7ae0
      3  7ae0				   Handle_WHITE_PAWN
    110  7ae0
    111  7ae0		       bc 20 f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    112  7ae3		       b9 7a f0 	      lda	Board,y
    113  7ae6		       d0 7a		      bne	.pMoved	; occupied
    114  7ae8
    115  7ae8							; we may need to promote the pawn
    116  7ae8							; All possibilites (Q/R/B/N) are added as individual moves
    117  7ae8
      0  7ae8					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7ae8					      SUBROUTINE
      2  7ae8
      3  7ae8
      4  7ae8					      IF	WHITE = WHITE
      5  7ae8		       c0 5a		      cpy	#90
      6  7aea		       90 5a		      bcc	.standard
      7  7aec		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7aef		       4c 00 00 	      jmp	.pMoved
      9  7af2					      ENDIF
     10  7af2
     11  7af2				  -	      IF	WHITE = BLACK
     12  7af2				  -	      cpy	#30
     13  7af2				  -	      bcs	.standard
     14  7af2				  -	      jsr	PromoteBlackPawn
     15  7af2				  -	      jmp	.pMoved
     16  7af2					      ENDIF
     17  7af2
     18  7af2		       20 00 00    .standard  jsr	AddMove
     19  7af5				   .pMoved
     20  7af5
    119  7af5
    120  7af5
    121  7af5
    122  7af5							; the +2 move off the home rank...
    123  7af5
    124  7af5		       a6 98		      ldx	currentSquare
    125  7af7		       e0 28		      cpx	#WHITE_HOME_ROW
    126  7af9		       b0 28		      bcs	.pMoved	; pawn has moved so can't do +2
    127  7afb		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    128  7afe		       b9 7a f0 	      lda	Board,y
    129  7b01		       d0 7a		      bne	.pMoved	; destination square occupied
    130  7b03
    131  7b03		       20 00 00 	      jsr	AddMove	; add the +2UP move off home row
    132  7b06		       a6 98		      ldx	currentSquare
    133  7b08
    134  7b08				   .pMoved
    135  7b08
    136  7b08							; regular captures...
    137  7b08
      0  7b08					      TAKE	_UP+_LEFT, WHITE
      1  7b08					      SUBROUTINE
      2  7b08
      3  7b08
      4  7b08		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      5  7b0b		       30 1f		      bmi	.invalid
      6  7b0d		       b9 7a f0 	      lda	Board,y
      7  7b10		       f0 7a		      beq	.invalid
      8  7b12		       45 97		      eor	currentPiece
      9  7b14		       10 97		      bpl	.invalid
     10  7b16
      0  7b16					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b16					      SUBROUTINE
      2  7b16
      3  7b16
      4  7b16					      IF	WHITE = WHITE
      5  7b16		       c0 5a		      cpy	#90
      6  7b18		       90 5a		      bcc	.standard
      7  7b1a		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b1d		       4c 00 00 	      jmp	.pMoved
      9  7b20					      ENDIF
     10  7b20
     11  7b20				  -	      IF	WHITE = BLACK
     12  7b20				  -	      cpy	#30
     13  7b20				  -	      bcs	.standard
     14  7b20				  -	      jsr	PromoteBlackPawn
     15  7b20				  -	      jmp	.pMoved
     16  7b20					      ENDIF
     17  7b20
     18  7b20		       20 00 00    .standard  jsr	AddMove
     19  7b23				   .pMoved
     20  7b23
     12  7b23				   .invalid
    139  7b23		       a6 98		      ldx	currentSquare
      0  7b25					      TAKE	_UP+_RIGHT, WHITE
      1  7b25					      SUBROUTINE
      2  7b25
      3  7b25
      4  7b25		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      5  7b28		       30 21		      bmi	.invalid
      6  7b2a		       b9 7a f0 	      lda	Board,y
      7  7b2d		       f0 7a		      beq	.invalid
      8  7b2f		       45 97		      eor	currentPiece
      9  7b31		       10 97		      bpl	.invalid
     10  7b33
      0  7b33					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b33					      SUBROUTINE
      2  7b33
      3  7b33
      4  7b33					      IF	WHITE = WHITE
      5  7b33		       c0 5a		      cpy	#90
      6  7b35		       90 5a		      bcc	.standard
      7  7b37		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b3a		       4c 00 00 	      jmp	.pMoved
      9  7b3d					      ENDIF
     10  7b3d
     11  7b3d				  -	      IF	WHITE = BLACK
     12  7b3d				  -	      cpy	#30
     13  7b3d				  -	      bcs	.standard
     14  7b3d				  -	      jsr	PromoteBlackPawn
     15  7b3d				  -	      jmp	.pMoved
     16  7b3d					      ENDIF
     17  7b3d
     18  7b3d		       20 00 00    .standard  jsr	AddMove
     19  7b40				   .pMoved
     20  7b40
     12  7b40				   .invalid
    141  7b40
    142  7b40
    143  7b40							; en-passant captures...
    144  7b40				   EN_PASSANTING
    145  7b40					      if	1
    146  7b40		       a5 9a		      lda	enPassantPawn
    147  7b42		       f0 9a		      beq	.noEnPassant
    148  7b44
    149  7b44		       a5 97		      lda	currentPiece
    150  7b46		       09 20		      ora	#FLAG_ENPASSANT
    151  7b48		       85 97		      sta	currentPiece
    152  7b4a
    153  7b4a		       a6 98		      ldx	currentSquare
      0  7b4c					      EN_PASSANT	_LEFT, _UP
      1  7b4c					      SUBROUTINE
      2  7b4c
      3  7b4c		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7b4f		       c4 9a		      cpy	enPassantPawn
      5  7b51		       d0 9a		      bne	.invalid
      6  7b53		       bc 1f f0 	      ldy	ValidSquare+_LEFT+_UP,x
      7  7b56		       b9 7a f0 	      lda	Board,y
      8  7b59		       d0 7a		      bne	.invalid
      9  7b5b		       20 00 00 	      jsr	AddMove
     10  7b5e				   .invalid
    155  7b5e		       a6 98		      ldx	currentSquare
      0  7b60					      EN_PASSANT	_RIGHT, _UP
      1  7b60					      SUBROUTINE
      2  7b60
      3  7b60		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7b63		       c4 9a		      cpy	enPassantPawn
      5  7b65		       d0 9a		      bne	.invalid
      6  7b67		       bc 21 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      7  7b6a		       b9 7a f0 	      lda	Board,y
      8  7b6d		       d0 7a		      bne	.invalid
      9  7b6f		       20 00 00 	      jsr	AddMove
     10  7b72				   .invalid
    157  7b72
    158  7b72				   .noEnPassant
    159  7b72					      endif
    160  7b72
    161  7b72		       4c a1 fa 	      jmp	MoveReturn
    162  7b75
    163  7b75
    164  7b75							;---------------------------------------------------------------------------------------------------
    165  7b75							; BLACK PAWN
    166  7b75							;---------------------------------------------------------------------------------------------------
    167  7b75
      0  7b75					      DEF	PromoteBlackPawn
      1  7b75				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7b75
      3  7b75				   PromoteBlackPawn
      0  7b75					      PROMOTE_PAWN	BLACK
      1  7b75					      SUBROUTINE
      2  7b75
      3  7b75
      4  7b75		       a5 97		      lda	currentPiece
      5  7b77		       48		      pha
      6  7b78
      7  7b78		       84 a9		      sty	__temp
      8  7b7a		       a9 86		      lda	#BLACK|QUEEN
      9  7b7c		       85 97		      sta	currentPiece
     10  7b7e		       20 00 00 	      jsr	AddMove
     11  7b81
     12  7b81		       a9 85		      lda	#BLACK|ROOK
     13  7b83		       85 97		      sta	currentPiece
     14  7b85		       a4 a9		      ldy	__temp
     15  7b87		       20 00 00 	      jsr	AddMove
     16  7b8a
     17  7b8a		       a9 84		      lda	#BLACK|BISHOP
     18  7b8c		       85 97		      sta	currentPiece
     19  7b8e		       a4 a9		      ldy	__temp
     20  7b90		       20 00 00 	      jsr	AddMove
     21  7b93
     22  7b93		       a9 83		      lda	#BLACK|KNIGHT
     23  7b95		       85 97		      sta	currentPiece
     24  7b97		       a4 a9		      ldy	__temp
     25  7b99		       20 00 00 	      jsr	AddMove
     26  7b9c
     27  7b9c		       68		      pla
     28  7b9d		       85 97		      sta	currentPiece
    170  7b9f		       60		      rts
    171  7ba0
      0  7ba0					      DEF	Handle_BLACK_PAWN
      1  7ba0				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7ba0
      3  7ba0				   Handle_BLACK_PAWN
    173  7ba0					      SUBROUTINE
    174  7ba0
    175  7ba0		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    176  7ba3		       b9 7a f0 	      lda	Board,y
    177  7ba6		       d0 7a		      bne	.pMoved	; occupied
    178  7ba8
    179  7ba8							; we may need to promote the pawn
    180  7ba8							; All possibilites (Q/R/B/N) are added as individual moves
    181  7ba8
      0  7ba8					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7ba8					      SUBROUTINE
      2  7ba8
      3  7ba8
      4  7ba8				  -	      IF	BLACK = WHITE
      5  7ba8				  -	      cpy	#90
      6  7ba8				  -	      bcc	.standard
      7  7ba8				  -	      jsr	PromoteWhitePawn
      8  7ba8				  -	      jmp	.pMoved
      9  7ba8					      ENDIF
     10  7ba8
     11  7ba8					      IF	BLACK = BLACK
     12  7ba8		       c0 1e		      cpy	#30
     13  7baa		       b0 1e		      bcs	.standard
     14  7bac		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7baf		       4c 00 00 	      jmp	.pMoved
     16  7bb2					      ENDIF
     17  7bb2
     18  7bb2		       20 00 00    .standard  jsr	AddMove
     19  7bb5				   .pMoved
     20  7bb5
    183  7bb5
    184  7bb5							; the +2 move off the home rank...
    185  7bb5
    186  7bb5		       a6 98		      ldx	currentSquare
    187  7bb7		       e0 52		      cpx	#BLACK_HOME_ROW
    188  7bb9		       90 52		      bcc	.pMoved	; pawn has moved so can't do +2
    189  7bbb		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    190  7bbe		       b9 7a f0 	      lda	Board,y
    191  7bc1		       d0 7a		      bne	.pMoved	; destination square occupied
    192  7bc3
    193  7bc3		       20 00 00 	      jsr	AddMove	; add the +2DOWN move off home row
    194  7bc6		       a6 98		      ldx	currentSquare
    195  7bc8
    196  7bc8				   .pMoved
    197  7bc8
    198  7bc8							; regular captures...
    199  7bc8
      0  7bc8					      TAKE	_DOWN+_LEFT, BLACK
      1  7bc8					      SUBROUTINE
      2  7bc8
      3  7bc8
      4  7bc8		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      5  7bcb		       30 0b		      bmi	.invalid
      6  7bcd		       b9 7a f0 	      lda	Board,y
      7  7bd0		       f0 7a		      beq	.invalid
      8  7bd2		       45 97		      eor	currentPiece
      9  7bd4		       10 97		      bpl	.invalid
     10  7bd6
      0  7bd6					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bd6					      SUBROUTINE
      2  7bd6
      3  7bd6
      4  7bd6				  -	      IF	BLACK = WHITE
      5  7bd6				  -	      cpy	#90
      6  7bd6				  -	      bcc	.standard
      7  7bd6				  -	      jsr	PromoteWhitePawn
      8  7bd6				  -	      jmp	.pMoved
      9  7bd6					      ENDIF
     10  7bd6
     11  7bd6					      IF	BLACK = BLACK
     12  7bd6		       c0 1e		      cpy	#30
     13  7bd8		       b0 1e		      bcs	.standard
     14  7bda		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bdd		       4c 00 00 	      jmp	.pMoved
     16  7be0					      ENDIF
     17  7be0
     18  7be0		       20 00 00    .standard  jsr	AddMove
     19  7be3				   .pMoved
     20  7be3
     12  7be3				   .invalid
    201  7be3		       a6 98		      ldx	currentSquare
      0  7be5					      TAKE	_DOWN+_RIGHT, BLACK
      1  7be5					      SUBROUTINE
      2  7be5
      3  7be5
      4  7be5		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      5  7be8		       30 0d		      bmi	.invalid
      6  7bea		       b9 7a f0 	      lda	Board,y
      7  7bed		       f0 7a		      beq	.invalid
      8  7bef		       45 97		      eor	currentPiece
      9  7bf1		       10 97		      bpl	.invalid
     10  7bf3
      0  7bf3					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bf3					      SUBROUTINE
      2  7bf3
      3  7bf3
      4  7bf3				  -	      IF	BLACK = WHITE
      5  7bf3				  -	      cpy	#90
      6  7bf3				  -	      bcc	.standard
      7  7bf3				  -	      jsr	PromoteWhitePawn
      8  7bf3				  -	      jmp	.pMoved
      9  7bf3					      ENDIF
     10  7bf3
     11  7bf3					      IF	BLACK = BLACK
     12  7bf3		       c0 1e		      cpy	#30
     13  7bf5		       b0 1e		      bcs	.standard
     14  7bf7		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bfa		       4c 00 00 	      jmp	.pMoved
     16  7bfd					      ENDIF
     17  7bfd
     18  7bfd		       20 00 00    .standard  jsr	AddMove
     19  7c00				   .pMoved
     20  7c00
     12  7c00				   .invalid
    203  7c00
    204  7c00							; en-passant captures...
    205  7c00
    206  7c00					      if	1
    207  7c00		       a5 9a		      lda	enPassantPawn
    208  7c02		       f0 9a		      beq	.noEnPassant
    209  7c04
    210  7c04		       a5 97		      lda	currentPiece
    211  7c06		       09 20		      ora	#FLAG_ENPASSANT
    212  7c08		       85 97		      sta	currentPiece
    213  7c0a
      0  7c0a					      EN_PASSANT	_LEFT, _DOWN
      1  7c0a					      SUBROUTINE
      2  7c0a
      3  7c0a		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7c0d		       c4 9a		      cpy	enPassantPawn
      5  7c0f		       d0 9a		      bne	.invalid
      6  7c11		       bc 0b f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      7  7c14		       b9 7a f0 	      lda	Board,y
      8  7c17		       d0 7a		      bne	.invalid
      9  7c19		       20 00 00 	      jsr	AddMove
     10  7c1c				   .invalid
    215  7c1c		       a6 98		      ldx	currentSquare
      0  7c1e					      EN_PASSANT	_RIGHT, _DOWN
      1  7c1e					      SUBROUTINE
      2  7c1e
      3  7c1e		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7c21		       c4 9a		      cpy	enPassantPawn
      5  7c23		       d0 9a		      bne	.invalid
      6  7c25		       bc 0d f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      7  7c28		       b9 7a f0 	      lda	Board,y
      8  7c2b		       d0 7a		      bne	.invalid
      9  7c2d		       20 00 00 	      jsr	AddMove
     10  7c30				   .invalid
    217  7c30
    218  7c30				   .noEnPassant
    219  7c30					      endif
    220  7c30
    221  7c30		       4c a1 fa    Handle_BLANK jmp	MoveReturn
    222  7c33
    223  7c33							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 1
      0  7c33					      include	"Handler_KNIGHT.asm"
      1  7c33							; Copyright (C)2020 Andrew Davie
      2  7c33							; Knight move handler
      3  7c33
      4  7c33							;---------------------------------------------------------------------------------------------------
      5  7c33							; KNIGHT
      6  7c33							;---------------------------------------------------------------------------------------------------
      7  7c33
      0  7c33					      DEF	Handle_KNIGHT
      1  7c33				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  7c33
      3  7c33				   Handle_KNIGHT
      9  7c33
     10  7c33							; x = currentSquare (square the piece is on)
     11  7c33							; currentPiece (with flags/colour attached)
     12  7c33
      0  7c33					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  7c33					      SUBROUTINE
      2  7c33		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  7c36		       30 01		      bmi	.invalid
      4  7c38		       b9 7a f0 	      lda	Board,y
      5  7c3b		       f0 7a		      beq	.squareEmpty
      6  7c3d		       45 97		      eor	currentPiece
      7  7c3f		       10 97		      bpl	.invalid
      8  7c41		       20 00 00    .squareEmpty jsr	AddMove
      9  7c44				   .invalid
      0  7c44					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  7c44		       a6 98		      ldx	currentSquare
      0  7c46					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  7c46					      SUBROUTINE
      2  7c46		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  7c49		       30 03		      bmi	.invalid
      4  7c4b		       b9 7a f0 	      lda	Board,y
      5  7c4e		       f0 7a		      beq	.squareEmpty
      6  7c50		       45 97		      eor	currentPiece
      7  7c52		       10 97		      bpl	.invalid
      8  7c54		       20 00 00    .squareEmpty jsr	AddMove
      9  7c57				   .invalid
      0  7c57					      MOVE_TO_X	_UP+_UP+_LEFT
      1  7c57		       a6 98		      ldx	currentSquare
      0  7c59					      MOVE_TO	_UP+_UP+_LEFT
      1  7c59					      SUBROUTINE
      2  7c59		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  7c5c		       30 29		      bmi	.invalid
      4  7c5e		       b9 7a f0 	      lda	Board,y
      5  7c61		       f0 7a		      beq	.squareEmpty
      6  7c63		       45 97		      eor	currentPiece
      7  7c65		       10 97		      bpl	.invalid
      8  7c67		       20 00 00    .squareEmpty jsr	AddMove
      9  7c6a				   .invalid
      0  7c6a					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  7c6a		       a6 98		      ldx	currentSquare
      0  7c6c					      MOVE_TO	_UP+_UP+_RIGHT
      1  7c6c					      SUBROUTINE
      2  7c6c		       bc 2b f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  7c6f		       30 2b		      bmi	.invalid
      4  7c71		       b9 7a f0 	      lda	Board,y
      5  7c74		       f0 7a		      beq	.squareEmpty
      6  7c76		       45 97		      eor	currentPiece
      7  7c78		       10 97		      bpl	.invalid
      8  7c7a		       20 00 00    .squareEmpty jsr	AddMove
      9  7c7d				   .invalid
     17  7c7d
      0  7c7d					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  7c7d		       a6 98		      ldx	currentSquare
      0  7c7f					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  7c7f					      SUBROUTINE
      2  7c7f		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  7c82		       30 0a		      bmi	.invalid
      4  7c84		       b9 7a f0 	      lda	Board,y
      5  7c87		       f0 7a		      beq	.squareEmpty
      6  7c89		       45 97		      eor	currentPiece
      7  7c8b		       10 97		      bpl	.invalid
      8  7c8d		       20 00 00    .squareEmpty jsr	AddMove
      9  7c90				   .invalid
      0  7c90					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  7c90		       a6 98		      ldx	currentSquare
      0  7c92					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  7c92					      SUBROUTINE
      2  7c92		       bc 0e f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  7c95		       30 0e		      bmi	.invalid
      4  7c97		       b9 7a f0 	      lda	Board,y
      5  7c9a		       f0 7a		      beq	.squareEmpty
      6  7c9c		       45 97		      eor	currentPiece
      7  7c9e		       10 97		      bpl	.invalid
      8  7ca0		       20 00 00    .squareEmpty jsr	AddMove
      9  7ca3				   .invalid
      0  7ca3					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  7ca3		       a6 98		      ldx	currentSquare
      0  7ca5					      MOVE_TO	_UP+_LEFT+_LEFT
      1  7ca5					      SUBROUTINE
      2  7ca5		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  7ca8		       30 1e		      bmi	.invalid
      4  7caa		       b9 7a f0 	      lda	Board,y
      5  7cad		       f0 7a		      beq	.squareEmpty
      6  7caf		       45 97		      eor	currentPiece
      7  7cb1		       10 97		      bpl	.invalid
      8  7cb3		       20 00 00    .squareEmpty jsr	AddMove
      9  7cb6				   .invalid
      0  7cb6					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  7cb6		       a6 98		      ldx	currentSquare
      0  7cb8					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  7cb8					      SUBROUTINE
      2  7cb8		       bc 22 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  7cbb		       30 22		      bmi	.invalid
      4  7cbd		       b9 7a f0 	      lda	Board,y
      5  7cc0		       f0 7a		      beq	.squareEmpty
      6  7cc2		       45 97		      eor	currentPiece
      7  7cc4		       10 97		      bpl	.invalid
      8  7cc6		       20 00 00    .squareEmpty jsr	AddMove
      9  7cc9				   .invalid
     22  7cc9
     23  7cc9		       4c a1 fa 	      jmp	MoveReturn
     24  7ccc
     25  7ccc							; EOF
------- FILE BANK_FIXED.asm
    739  7ccc
    740  7ccc							;---------------------------------------------------------------------------------------------------
    741  7ccc
      0  7ccc					      DEF	AddMove
      1  7ccc				   BANK_AddMove SET	_CURRENT_BANK
      2  7ccc
      3  7ccc				   AddMove
    743  7ccc					      SUBROUTINE
    744  7ccc							; =57 including call
    745  7ccc
    746  7ccc							; add square in y register to movelist as destination (X12 format)
    747  7ccc							; currentPiece = piece moving
    748  7ccc							; currentSquare = start square (X12)
    749  7ccc							; ??do not modify y
    750  7ccc
    751  7ccc		       a5 9c		      lda	currentPly	; 3
    752  7cce		       85 3e		      sta	SET_BANK_RAM	; 3
    753  7cd0
    754  7cd0							; [y]		     to square (X12)
    755  7cd0							; currentSquare     from square (X12)
    756  7cd0							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    757  7cd0							; do not modify [Y]
    758  7cd0
    759  7cd0							; add a move to the movelist
    760  7cd0
    761  7cd0		       98		      tya		; 2
    762  7cd1
    763  7cd1		       ac 35 f0 	      ldy	moveIndex	; 3
    764  7cd4		       c8		      iny		; 2
    765  7cd5		       8c 35 f4 	      sty	moveIndex+RAM_WRITE	; 4
    766  7cd8
    767  7cd8		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    768  7cdb		       aa		      tax		; 2   new square (for projections)
    769  7cdc
    770  7cdc		       a5 98		      lda	currentSquare	; 3
    771  7cde		       99 36 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    772  7ce1		       a5 97		      lda	currentPiece	; 3
    773  7ce3		       99 80 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    774  7ce6
    775  7ce6		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2
    776  7ce8		       85 3e		      sta	SET_BANK_RAM	; 3
    777  7cea		       60		      rts		; 6
    778  7ceb
    779  7ceb
    780  7ceb							;---------------------------------------------------------------------------------------------------
    781  7ceb
      0  7ceb					      DEF	InitialisePieceSquares
      1  7ceb				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7ceb
      3  7ceb				   InitialisePieceSquares
    783  7ceb					      SUBROUTINE
    784  7ceb
    785  7ceb							; Zap the board with the "blank" ROM copy
    786  7ceb
      0  7ceb					      JSRAM_SAFE	PutAllPieces
      1  7ceb
      2  7ceb
      3  7ceb
      4  7ceb		       a9 0b		      lda	#BANK_PutAllPieces
      5  7ced		       85 8e		      sta	savedBank
      6  7cef		       85 3f		      sta	SET_BANK
      7  7cf1		       20 8b f3 	      jsr	PutAllPieces
    788  7cf4
    789  7cf4							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    790  7cf4
    791  7cf4		       a9 09		      lda	#RAMBANK_PLY
    792  7cf6		       85 3e		      sta	SET_BANK_RAM
    793  7cf8		       20 00 f2 	      jsr	InitPieceLists	; for white
    794  7cfb		       a9 0a		      lda	#RAMBANK_PLY+1
    795  7cfd		       85 3e		      sta	SET_BANK_RAM
    796  7cff		       20 00 f2 	      jsr	InitPieceLists	; for black
    797  7d02
    798  7d02
    799  7d02							; Now setup the board/piecelists
    800  7d02
    801  7d02		       a2 00		      ldx	#0
    802  7d04				   .fillPieceLists
    803  7d04
    804  7d04		       a9 09		      lda	#RAMBANK_PLY
    805  7d06		       85 3e		      sta	SET_BANK_RAM
    806  7d08
    807  7d08		       bd 4f f2 	      lda	InitPieceList,x	; colour/-1
    808  7d0b		       f0 4f		      beq	.finish
    809  7d0d
    810  7d0d		       0a		      asl
    811  7d0e		       a9 09		      lda	#RAMBANK_PLY
    812  7d10		       69 00		      adc	#0
    813  7d12		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    814  7d14
    815  7d14		       ac 30 f0 	      ldy	PieceListPtr
    816  7d17		       c8		      iny
    817  7d18
    818  7d18		       bd 50 f2 	      lda	InitPieceList+1,x	; square
    819  7d1b		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    820  7d1e		       98		      tya
    821  7d1f		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    822  7d22
    823  7d22		       bd 4f f2 	      lda	InitPieceList,x	; piece type
    824  7d25		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    825  7d28		       48		      pha
    826  7d29
    827  7d29		       8c 30 f4 	      sty	PieceListPtr+RAM_WRITE
    828  7d2c
    829  7d2c
    830  7d2c		       bc 50 f2 	      ldy	InitPieceList+1,x	; square
    831  7d2f
    832  7d2f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    833  7d31		       85 3e		      sta	SET_BANK_RAM
    834  7d33		       68		      pla
    835  7d34		       99 7a f4 	      sta	Board+RAM_WRITE,y
    836  7d37
    837  7d37		       e8		      inx
    838  7d38		       e8		      inx
    839  7d39		       10 c9		      bpl	.fillPieceLists
    840  7d3b
    841  7d3b		       60	   .finish    rts
    842  7d3c
    843  7d3c
    844  7d3c							;---------------------------------------------------------------------------------------------------
    845  7d3c
      0  7d3c					      DEF	SAFE_GetKingSquare
      1  7d3c				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  7d3c
      3  7d3c				   SAFE_GetKingSquare
    847  7d3c					      SUBROUTINE
    848  7d3c
    849  7d3c							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    850  7d3c							; Return:	 A = square king is on (or -1)
    851  7d3c
    852  7d3c		       85 3e		      sta	SET_BANK_RAM
    853  7d3e		       20 8d f3 	      jsr	GetKingSquare
    854  7d41		       a4 8e		      ldy	savedBank
    855  7d43		       84 3f		      sty	SET_BANK
    856  7d45		       60		      rts
    857  7d46
    858  7d46							;---------------------------------------------------------------------------------------------------
    859  7d46
      0  7d46					      DEF	SAFE_GetPieceFromBoard
      1  7d46				   BANK_SAFE_GetPieceFromBoard SET	_CURRENT_BANK
      2  7d46
      3  7d46				   SAFE_GetPieceFromBoard
    861  7d46					      SUBROUTINE
    862  7d46
    863  7d46							; y = X12 board index
    864  7d46
    865  7d46		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    866  7d48		       86 3e		      stx	SET_BANK_RAM
    867  7d4a		       a6 8e		      ldx	savedBank
    868  7d4c		       b9 7a f0 	      lda	Board,y
    869  7d4f		       86 3f		      stx	SET_BANK
    870  7d51		       60		      rts
    871  7d52
    872  7d52
    873  7d52							;---------------------------------------------------------------------------------------------------
    874  7d52
      0  7d52					      DEF	calculateBase64Square
      1  7d52				   BANK_calculateBase64Square SET	_CURRENT_BANK
      2  7d52
      3  7d52				   calculateBase64Square
    876  7d52					      SUBROUTINE
    877  7d52
    878  7d52							; Convert row/column into Base64 index
    879  7d52
    880  7d52		       a5 88		      lda	highlight_row
    881  7d54		       49 07		      eor	#7
    882  7d56		       0a		      asl
    883  7d57		       0a		      asl
    884  7d58		       0a		      asl
    885  7d59		       05 8a		      ora	highlight_col
    886  7d5b		       aa		      tax
    887  7d5c		       60		      rts
    888  7d5d
    889  7d5d							;---------------------------------------------------------------------------------------------------
    890  7d5d
      0  7d5d					      DEF	SAFE_IsValidMoveFromSquare
      1  7d5d				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7d5d
      3  7d5d				   SAFE_IsValidMoveFromSquare
    892  7d5d					      SUBROUTINE
    893  7d5d
    894  7d5d							; Does the square exist in the movelist?
    895  7d5d
    896  7d5d		       20 52 fd 	      jsr	calculateBase64Square
    897  7d60		       86 91		      stx	aiFromSquare
    898  7d62
    899  7d62		       a9 08		      lda	#RAMBANK_MOVES_RAM
    900  7d64		       85 3e		      sta	SET_BANK_RAM
    901  7d66		       bc 4b f3 	      ldy	Base64ToIndex,x
    902  7d69		       84 93		      sty	aiFromSquareX12
    903  7d6b
    904  7d6b		       98		      tya
    905  7d6c
    906  7d6c		       a4 9c		      ldy	currentPly
    907  7d6e		       84 3e		      sty	SET_BANK_RAM
    908  7d70		       20 6b f3 	      jsr	CheckMoveListFromSquare
    909  7d73
    910  7d73		       a5 8e		      lda	savedBank
    911  7d75		       85 3f		      sta	SET_BANK
    912  7d77		       60		      rts
    913  7d78
    914  7d78
    915  7d78							;---------------------------------------------------------------------------------------------------
    916  7d78
      0  7d78					      DEF	SAFE_GetPiece
      1  7d78				   BANK_SAFE_GetPiece SET	_CURRENT_BANK
      2  7d78
      3  7d78				   SAFE_GetPiece
    918  7d78					      SUBROUTINE
    919  7d78
    920  7d78							; Retrieve the piece+flags from the movelist, given from/to squares
    921  7d78							; Required as moves have different flags but same origin squares (e.g., castling)
    922  7d78
    923  7d78		       a5 9c		      lda	currentPly
    924  7d7a		       85 3e		      sta	SET_BANK_RAM
    925  7d7c
    926  7d7c		       20 a5 f3 	      jsr	GetPieceGivenFromToSquares
    927  7d7f
    928  7d7f		       a5 8e		      lda	savedBank
    929  7d81		       85 3f		      sta	SET_BANK
    930  7d83		       60		      rts
    931  7d84
    932  7d84							;---------------------------------------------------------------------------------------------------
    933  7d84
      0  7d84					      DEF	SAFE_IsValidMoveToSquare
      1  7d84				   BANK_SAFE_IsValidMoveToSquare SET	_CURRENT_BANK
      2  7d84
      3  7d84				   SAFE_IsValidMoveToSquare
    935  7d84					      SUBROUTINE
    936  7d84
    937  7d84							; Does the square exist in the movelist?
    938  7d84
    939  7d84		       20 52 fd 	      jsr	calculateBase64Square
    940  7d87		       86 92		      stx	aiToSquare
    941  7d89
    942  7d89		       a9 08		      lda	#RAMBANK_MOVES_RAM
    943  7d8b		       85 3e		      sta	SET_BANK_RAM
    944  7d8d		       bd 4b f3 	      lda	Base64ToIndex,x
    945  7d90		       85 94		      sta	aiToSquareX12
    946  7d92
    947  7d92		       a4 9c		      ldy	currentPly
    948  7d94		       84 3e		      sty	SET_BANK_RAM
    949  7d96		       20 c2 f3 	      jsr	CheckMoveListToSquare
    950  7d99
    951  7d99		       a5 8e	   .found     lda	savedBank
    952  7d9b		       85 3f		      sta	SET_BANK
    953  7d9d		       60		      rts
    954  7d9e
    955  7d9e							;---------------------------------------------------------------------------------------------------
    956  7d9e
      0  7d9e					      DEF	SAFE_PutPieceToBoard
      1  7d9e				   BANK_SAFE_PutPieceToBoard SET	_CURRENT_BANK
      2  7d9e
      3  7d9e				   SAFE_PutPieceToBoard
    958  7d9e					      SUBROUTINE
    959  7d9e
    960  7d9e							; y = board index
    961  7d9e							; a = piece
    962  7d9e
    963  7d9e		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    964  7da0		       86 3e		      stx	SET_BANK_RAM
    965  7da2		       99 7a f4 	      sta	Board+RAM_WRITE,y
    966  7da5		       a6 8e		      ldx	savedBank
    967  7da7		       86 3f		      stx	SET_BANK
    968  7da9		       60		      rts
    969  7daa
    970  7daa							;---------------------------------------------------------------------------------------------------
    971  7daa
      0  7daa					      DEF	SAFE_CopyShadowROMtoRAM
      1  7daa				   BANK_SAFE_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7daa
      3  7daa				   SAFE_CopyShadowROMtoRAM
    973  7daa					      SUBROUTINE
    974  7daa
    975  7daa		       20 00 00 	      jsr	CopyShadowROMtoRAM
    976  7dad		       a5 8e		      lda	savedBank
    977  7daf		       85 3f		      sta	SET_BANK
    978  7db1		       60		      rts
    979  7db2
    980  7db2
    981  7db2							;---------------------------------------------------------------------------------------------------
    982  7db2
      0  7db2					      DEF	CopyShadowROMtoRAM
      1  7db2				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7db2
      3  7db2				   CopyShadowROMtoRAM
    984  7db2					      SUBROUTINE
    985  7db2
    986  7db2							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    987  7db2							; used to setup callable RAM code from ROM templates
    988  7db2
    989  7db2							; x = source ROM bank
    990  7db2							; y = destination RAM bank (preserved)
    991  7db2
    992  7db2		       86 a8		      stx	__sourceBank
    993  7db4
    994  7db4		       a2 00		      ldx	#0
    995  7db6		       a5 a8	   .copyPage  lda	__sourceBank
    996  7db8		       85 3f		      sta	SET_BANK
    997  7dba
    998  7dba		       bd 00 f0 	      lda	$F000,x
    999  7dbd		       48		      pha
   1000  7dbe		       bd 00 f1 	      lda	$F100,x
   1001  7dc1		       48		      pha
   1002  7dc2		       bd 00 f2 	      lda	$F200,x
   1003  7dc5		       48		      pha
   1004  7dc6		       bd 00 f3 	      lda	$F300,x
   1005  7dc9
   1006  7dc9		       84 3e		      sty	SET_BANK_RAM
   1007  7dcb
   1008  7dcb		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
   1009  7dce		       68		      pla
   1010  7dcf		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
   1011  7dd2		       68		      pla
   1012  7dd3		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
   1013  7dd6		       68		      pla
   1014  7dd7		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
   1015  7dda
   1016  7dda		       ca		      dex
   1017  7ddb		       d0 d9		      bne	.copyPage
   1018  7ddd		       60		      rts
   1019  7dde
   1020  7dde
   1021  7dde							;---------------------------------------------------------------------------------------------------
   1022  7dde
      0  7dde					      DEF	SAFE_CopySinglePiece
      1  7dde				   BANK_SAFE_CopySinglePiece SET	_CURRENT_BANK
      2  7dde
      3  7dde				   SAFE_CopySinglePiece
   1024  7dde					      SUBROUTINE
   1025  7dde
   1026  7dde		       20 00 00 	      jsr	CopySinglePiece
   1027  7de1		       a5 8e		      lda	savedBank
   1028  7de3		       85 3f		      sta	SET_BANK
   1029  7de5		       60		      rts
   1030  7de6
   1031  7de6							;---------------------------------------------------------------------------------------------------
   1032  7de6
      0  7de6					      DEF	CopySinglePiece
      1  7de6				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7de6
      3  7de6				   CopySinglePiece
   1034  7de6					      SUBROUTINE
   1035  7de6							; @2150 max
   1036  7de6							; = 33 TIM64T
   1037  7de6
   1038  7de6
   1039  7de6		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1040  7de8		       85 3e		      sta	SET_BANK_RAM
   1041  7dea		       20 a0 f3 	      jsr	CopySetup
   1042  7ded
   1043  7ded
      0  7ded					      DEF	InterceptMarkerCopy
      1  7ded				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7ded
      3  7ded				   InterceptMarkerCopy
   1045  7ded
   1046  7ded							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
   1047  7ded							; y = piece index
   1048  7ded
   1049  7ded		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
   1050  7def		       85 3f		      sta	SET_BANK
   1051  7df1
   1052  7df1		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
   1053  7df4		       85 ef		      sta	__ptr
   1054  7df6		       b9 80 f0 	      lda	PIECE_VECTOR_HI,y
   1055  7df9		       85 f0		      sta	__ptr+1
   1056  7dfb		       b9 00 f1 	      lda	PIECE_VECTOR_BANK,y
   1057  7dfe		       85 3f		      sta	SET_BANK
   1058  7e00
   1059  7e00		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
   1060  7e02		       b1 ef	   .copy      lda	(__ptr),y
   1061  7e04		       99 a7 00 	      sta	__pieceShapeBuffer,y
   1062  7e07		       88		      dey
   1063  7e08		       10 f8		      bpl	.copy
   1064  7e0a
   1065  7e0a
   1066  7e0a		       a5 80		      lda	drawPieceNumber
   1067  7e0c		       4a		      lsr
   1068  7e0d		       4a		      lsr
   1069  7e0e		       4a		      lsr
   1070  7e0f		       49 07		      eor	#7
   1071  7e11		       aa		      tax
   1072  7e12
   1073  7e12		       a5 80		      lda	drawPieceNumber
   1074  7e14		       29 04		      and	#4
   1075  7e16		       c9 04		      cmp	#4	; cc = left side, cs = right side
   1076  7e18
   1077  7e18		       86 3e		      stx	SET_BANK_RAM
   1078  7e1a		       4c d3 f0 	      jmp	CopyPieceToRowBitmap
   1079  7e1d
   1080  7e1d							;---------------------------------------------------------------------------------------------------
   1081  7e1d
      0  7e1d					      DEF	MoveViaList
      1  7e1d				   BANK_MoveViaList SET	_CURRENT_BANK
      2  7e1d
      3  7e1d				   MoveViaList
   1083  7e1d					      SUBROUTINE
   1084  7e1d
   1085  7e1d							; Given an existing movelist, pick one of the moves and make it
   1086  7e1d							; Used for random computer moves
   1087  7e1d
   1088  7e1d		       a5 9c		      lda	currentPly
   1089  7e1f		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
   1090  7e21
   1091  7e21		       20 22 f3 	      jsr	MoveViaListAtPly
   1092  7e24		       60		      rts
   1093  7e25
   1094  7e25
   1095  7e25							;---------------------------------------------------------------------------------------------------
   1096  7e25
      0  7e25					      DEF	FinaliseMove
      1  7e25				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  7e25
      3  7e25				   FinaliseMove
   1098  7e25					      SUBROUTINE
   1099  7e25
   1100  7e25							; Now the visible movement on the board has happened, fix up the pointers to the pieces
   1101  7e25							; for both sides.
   1102  7e25
   1103  7e25
   1104  7e25		       a5 9e		      lda	sideToMove
   1105  7e27		       0a		      asl
   1106  7e28		       a9 09		      lda	#RAMBANK_PLY
   1107  7e2a		       69 00		      adc	#0
   1108  7e2c		       85 3e		      sta	SET_BANK_RAM
   1109  7e2e
   1110  7e2e		       20 c7 f2 	      jsr	FixPieceList
   1111  7e31
   1112  7e31		       a5 87		      lda	toX12
   1113  7e33		       85 86		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
   1114  7e35		       a9 00		      lda	#0
   1115  7e37		       85 87		      sta	toX12	; --> deleted (square=0)
   1116  7e39
   1117  7e39		       a5 a3		      lda	lastPiece
   1118  7e3b		       f0 a3		      beq	.notake
   1119  7e3d
   1120  7e3d		       a5 9e		      lda	sideToMove
   1121  7e3f		       49 80		      eor	#128
   1122  7e41		       0a		      asl
   1123  7e42		       a9 09		      lda	#RAMBANK_PLY
   1124  7e44		       69 00		      adc	#0
   1125  7e46		       85 3e		      sta	SET_BANK_RAM
   1126  7e48
   1127  7e48		       20 c7 f2 	      jsr	FixPieceList	; REMOVE any captured object
   1128  7e4b
   1129  7e4b		       60	   .notake    rts
   1130  7e4c
   1131  7e4c
   1132  7e4c							;---------------------------------------------------------------------------------------------------
   1133  7e4c
      0  7e4c					      DEF	SAFE_getMoveIndex
      1  7e4c				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7e4c
      3  7e4c				   SAFE_getMoveIndex
   1135  7e4c					      SUBROUTINE
   1136  7e4c
   1137  7e4c		       a9 09		      lda	#RAMBANK_PLY
   1138  7e4e		       85 3e		      sta	SET_BANK_RAM
   1139  7e50		       ad 35 f0 	      lda	moveIndex
   1140  7e53		       a6 8e		      ldx	savedBank
   1141  7e55		       86 3f		      stx	SET_BANK
   1142  7e57		       60		      rts
   1143  7e58
   1144  7e58
   1145  7e58							;---------------------------------------------------------------------------------------------------
   1146  7e58
      0  7e58					      DEF	SAFE_showMoveOptions
      1  7e58				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  7e58
      3  7e58				   SAFE_showMoveOptions
   1148  7e58					      SUBROUTINE
   1149  7e58
   1150  7e58							;SAFETIME = 40 	  ; time required to be able to safely do a piece draw TODO: optimise
   1151  7e58
   1152  7e58
   1153  7e58							; place a marker on the board for any square matching the piece
   1154  7e58							; EXCEPT for squares which are occupied (we'll flash those later)
   1155  7e58							; x = movelist item # being checked
   1156  7e58
   1157  7e58
   1158  7e58		       a6 95	   .next      ldx	aiMoveIndex
   1159  7e5a		       30 95		      bmi	.skip
   1160  7e5c
   1161  7e5c							;lda INTIM
   1162  7e5c							;cmp #SAFETIME
   1163  7e5c							;bcc .skip
   1164  7e5c
   1165  7e5c		       a9 09		      lda	#RAMBANK_PLY	; white
   1166  7e5e		       85 3e		      sta	SET_BANK_RAM
   1167  7e60
   1168  7e60		       c6 95		      dec	aiMoveIndex
   1169  7e62
   1170  7e62		       bd 36 f0 	      lda	MoveFrom,x
   1171  7e65		       c5 93		      cmp	aiFromSquareX12
   1172  7e67		       d0 ef		      bne	.next
   1173  7e69
   1174  7e69		       bc 00 f1 	      ldy	MoveTo,x
   1175  7e6c
   1176  7e6c		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1177  7e6e		       85 3e		      sta	SET_BANK_RAM
   1178  7e70
   1179  7e70		       b9 7a f0 	      lda	Board,y
   1180  7e73		       d0 e3		      bne	.next
   1181  7e75
   1182  7e75		       a5 80		      lda	drawPieceNumber
   1183  7e77		       48		      pha
   1184  7e78
   1185  7e78		       b9 00 00 	      lda	X12toBase64,y
   1186  7e7b		       85 80		      sta	drawPieceNumber
   1187  7e7d
   1188  7e7d		       20 97 f3 	      jsr	CopySetupForMarker
   1189  7e80		       20 ed fd 	      jsr	InterceptMarkerCopy
   1190  7e83
   1191  7e83		       68		      pla
   1192  7e84		       85 80		      sta	drawPieceNumber
   1193  7e86
   1194  7e86		       a5 8e	   .skip      lda	savedBank
   1195  7e88		       85 3f		      sta	SET_BANK
   1196  7e8a		       60		      rts
   1197  7e8b
   1198  7e8b
   1199  7e8b							;---------------------------------------------------------------------------------------------------
   1200  7e8b
      0  7e8b					      DEF	SAFE_IsSquareUnderAttack
      1  7e8b				   BANK_SAFE_IsSquareUnderAttack SET	_CURRENT_BANK
      2  7e8b
      3  7e8b				   SAFE_IsSquareUnderAttack
   1202  7e8b
   1203  7e8b							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
   1204  7e8b
   1205  7e8b							; Pass:	 currentPly = which movelist to check
   1206  7e8b							;		 A = X12 square to check
   1207  7e8b							; Return:	 CC = No, CS = Yes
   1208  7e8b
   1209  7e8b		       a6 9c		      ldx	currentPly
   1210  7e8d		       86 3e		      stx	SET_BANK_RAM
   1211  7e8f		       20 7e f3 	      jsr	IsSquareUnderAttack
   1212  7e92		       a5 8e		      lda	savedBank
   1213  7e94		       85 3f		      sta	SET_BANK
   1214  7e96		       60		      rts
   1215  7e97
   1216  7e97							;---------------------------------------------------------------------------------------------------
   1217  7e97
      0  7e97					      DEF	SAFE_showMoveCaptures
      1  7e97				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7e97
      3  7e97				   SAFE_showMoveCaptures
   1219  7e97					      SUBROUTINE
   1220  7e97
   1221  7e97							; place a marker on the board for any square matching the piece
   1222  7e97							; EXCEPT for squares which are occupied (we'll flash those later)
   1223  7e97							; x = movelist item # being checked
   1224  7e97
   1225  7e97
   1226  7e97		       a6 95	   .next      ldx	aiMoveIndex
   1227  7e99		       30 95		      bmi	.skip	; no moves in list
   1228  7e9b
   1229  7e9b							;lda INTIM
   1230  7e9b							;cmp #24 ;SAFETIME
   1231  7e9b							;bcc .skip
   1232  7e9b
   1233  7e9b		       a9 09		      lda	#RAMBANK_PLY	; white
   1234  7e9d		       85 3e		      sta	SET_BANK_RAM
   1235  7e9f		       c6 95		      dec	aiMoveIndex
   1236  7ea1
   1237  7ea1		       bd 36 f0 	      lda	MoveFrom,x
   1238  7ea4		       c5 93		      cmp	aiFromSquareX12
   1239  7ea6		       d0 ef		      bne	.next
   1240  7ea8
   1241  7ea8		       bc 00 f1 	      ldy	MoveTo,x
   1242  7eab
   1243  7eab		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1244  7ead		       85 3e		      sta	SET_BANK_RAM
   1245  7eaf
   1246  7eaf		       b9 7a f0 	      lda	Board,y
   1247  7eb2		       f0 e3		      beq	.next
   1248  7eb4
   1249  7eb4		       a5 80		      lda	drawPieceNumber
   1250  7eb6		       48		      pha
   1251  7eb7
   1252  7eb7		       b9 00 00 	      lda	X12toBase64,y
   1253  7eba		       85 80		      sta	drawPieceNumber
   1254  7ebc
   1255  7ebc		       20 e6 fd 	      jsr	CopySinglePiece
   1256  7ebf
   1257  7ebf		       68		      pla
   1258  7ec0		       85 80		      sta	drawPieceNumber
   1259  7ec2
   1260  7ec2		       a5 8e	   .skip      lda	savedBank
   1261  7ec4		       85 3f		      sta	SET_BANK
   1262  7ec6		       60		      rts
   1263  7ec7
   1264  7ec7
      0  7ec7					      OPTIONAL_PAGEBREAK	"X12toBase64", 100
 PAGE BREAK INSERTED FOR  X12toBase64
 REQUESTED SIZE =  $64
 WASTED SPACE =  $39
 PAGEBREAK LOCATION =  $ff00
     10  7f00					      LIST	ON
   1266  7f00
   1267  7f00				   X12toBase64
   1268  7f00
   1269  7f00							; Use this table to
   1270  7f00							;   a) Determine if a square is valid (-1 = NO)
   1271  7f00							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
   1272  7f00							;	if a white pawn on square "x" can move "up" the board.
   1273  7f00
   1274  7f00		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1275  7f0a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1276  7f14		       ff ff 00 01*	      .byte.b	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7
   1277  7f1e		       ff ff 08 09*	      .byte.b	-1, -1, 8, 9, 10, 11, 12, 13, 14, 15
   1278  7f28		       ff ff 10 11*	      .byte.b	-1, -1, 16, 17, 18, 19, 20, 21, 22, 23
   1279  7f32		       ff ff 18 19*	      .byte.b	-1, -1, 24, 25, 26, 27, 28, 29, 30, 31
   1280  7f3c		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
   1281  7f46		       ff ff 28 29*	      .byte.b	-1, -1, 40, 41, 42, 43, 44, 45, 46, 47
   1282  7f50		       ff ff 30 31*	      .byte.b	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55
   1283  7f5a		       ff ff 38 39*	      .byte.b	-1, -1, 56, 57, 58, 59, 60, 61, 62, 63
   1284  7f64
   1285  7f64
 FREE BYTES IN FIXED BANK =  $98
   1286  7f64					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1287  7f64
   1288  7f64							;---------------------------------------------------------------------------------------------------
   1289  7f64							; The reset vectors
   1290  7f64							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
   1291  7f64
   1292  0000 ????				      SEG	InterruptVectors
   1293  7ffc					      ORG	FIXED_BANK + $7FC
   1294  7ffc					      RORG	$7ffC
   1295  7ffc
   1296  7ffc		       00 f8		      .word.w	Reset	; RESET
   1297  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1298  8000
   1299  8000							;---------------------------------------------------------------------------------------------------
   1300  8000							; EOF
------- FILE ./chess.asm
    366  8000
    367  8000							;END
------- FILE ./chess.asm LEVEL 1 PASS 2
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 2
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						; assemble diagnostics. Remove for release.
     31  0000 ????	       00 01	   ASSERTS    =	1
     32  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     33  0000 ????
     34  0000 ????						;===================================
     35  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     36  0000 ????						;===================================
     37  0000 ????
     38  0000 ????						;-------------------------------------------------------------------------------
     39  0000 ????						; The following are optional YES/NO depending on phase of the moon
     40  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     41  0000 ????						;-------------------------------------------------------------------------------
     42  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     43  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     44  0000 ????			  -	      IF	FINAL_VERSION = YES
     45  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     46  0000 ????				      ENDIF
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????
     50  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     51  0000 ????
     52  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     53  0000 ????
     54  0000 ????						;------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????	       00 01	   PLUSCART   =	YES
     57  0000 ????
     58  0000 ????						;------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????
     61  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     62  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     63  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     64  0000 ????
     65  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     66  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     67  0000 ????
     68  0000 ????
     69  0000 ????	       10 00	   RAM_3E     =	$1000
     70  0000 ????	       04 00	   RAM_SIZE   =	$400
     71  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     72  0000 ????
     73  0000 ????
     74  0000 ????						; Platform constants:
     75  0000 ????	       00 02	   PAL	      =	%10
     76  0000 ????	       00 02	   PAL_50     =	PAL|0
     77  0000 ????	       00 03	   PAL_60     =	PAL|1
     78  0000 ????
     79  0000 ????
     80  0000 ????				      IF	L276
     81  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     82  0000 ????			  -	      ELSE
     83  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     84  0000 ????				      ENDIF
     85  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     86  0000 ????
     87  0000 ????				      IF	L276
     88  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     89  0000 ????			  -	      ELSE
     90  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     91  0000 ????				      ENDIF
     92  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     93  0000 ????
     94  0000 ????				      IF	L276
     95  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     96  0000 ????			  -	      ELSE
     97  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     98  0000 ????				      ENDIF
     99  0000 ????	       01 38	   SCANLINES_PAL =	312
    100  0000 ????
    101  0000 ????
    102  0000 ????						;------------------------------------------------------------------------------
    103  0000 ????						; MACRO definitions
    104  0000 ????
    105  0000 ????
    106  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    107  0000 ????
    108  0000 ????				      MAC	newbank
    109  0000 ????				      SEG	{1}
    110  0000 ????				      ORG	ORIGIN
    111  0000 ????				      RORG	$F000
    112  0000 ????			   BANK_START SET	*
    113  0000 ????			   {1}	      SET	ORIGIN / 2048
    114  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    115  0000 ????			   _CURRENT_BANK SET	{1}
    116  0000 ????				      ENDM		; bank name
    117  0000 ????
    118  0000 ????				      MAC	define_1k_segment
    119  0000 ????				      ALIGN	$400
    120  0000 ????			   SEGMENT_{1} SET	*
    121  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    122  0000 ????				      ENDM		; {seg name}
    123  0000 ????
    124  0000 ????				      MAC	check_bank_size
    125  0000 ????			   .TEMP      =	* - BANK_START
    126  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    127  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    128  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    129  0000 ????				      ERR
    130  0000 ????				      endif
    131  0000 ????				      ENDM		; name
    132  0000 ????
    133  0000 ????
    134  0000 ????				      MAC	check_half_bank_size
    135  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    136  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    137  0000 ????			   .TEMP      =	* - BANK_START
    138  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    139  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    140  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    141  0000 ????				      ERR
    142  0000 ????				      endif
    143  0000 ????				      ENDM		; name
    144  0000 ????
    145  0000 ????
    146  0000 ????						;---------------------------------------------------------------------------------------------------
    147  0000 ????
    148  0000 ????						; Macro inserts a page break if the object would overlap a page
    149  0000 ????
    150  0000 ????				      MAC	optional_pagebreak
    151  0000 ????				      LIST	OFF
    152  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    153  0000 ????			   EARLY_LOCATION SET	*
    154  0000 ????				      ALIGN	256
    155  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    156  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    157  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    158  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    159  0000 ????				      ENDIF
    160  0000 ????				      LIST	ON
    161  0000 ????				      ENDM		; { string, size }
    162  0000 ????
    163  0000 ????
    164  0000 ????				      MAC	check_page_crossing
    165  0000 ????				      LIST	OFF
    166  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    167  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    168  0000 ????				      endif
    169  0000 ????				      LIST	ON
    170  0000 ????				      ENDM
    171  0000 ????
    172  0000 ????				      MAC	checkpage
    173  0000 ????				      LIST	OFF
    174  0000 ????				      IF	>. != >{1}
    175  0000 ????				      ECHO	""
    176  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    177  0000 ????				      ECHO	""
    178  0000 ????				      ERR
    179  0000 ????				      ENDIF
    180  0000 ????				      LIST	ON
    181  0000 ????				      ENDM
    182  0000 ????
    183  0000 ????				      MAC	checkpagex
    184  0000 ????				      LIST	OFF
    185  0000 ????				      IF	>. != >{1}
    186  0000 ????				      ECHO	""
    187  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    188  0000 ????				      ECHO	{2}
    189  0000 ????				      ECHO	""
    190  0000 ????				      ERR
    191  0000 ????				      ENDIF
    192  0000 ????				      LIST	ON
    193  0000 ????				      ENDM
    194  0000 ????
    195  0000 ????
    196  0000 ????						;---------------------------------------------------------------------------------------------------
    197  0000 ????
    198  0000 ????				      MAC	def
    199  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    200  0000 ????						;    SUBROUTINE      ; doesn't work in a macro!
    201  0000 ????			   {1}			; entry point
    202  0000 ????				      ENDM		; name of subroutine
    203  0000 ????
    204  0000 ????						;---------------------------------------------------------------------------------------------------
    205  0000 ????
    206  0000 ????				      MAC	newrambank
    207  0000 ????						; {1}	     bank name
    208  0000 ????						; {2}	     RAM bank number
    209  0000 ????
    210  0000 ????				      SEG.U	{1}
    211  0000 ????				      ORG	ORIGIN_RAM
    212  0000 ????				      RORG	RAM_3E
    213  0000 ????			   BANK_START SET	*
    214  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    215  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    216  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    217  0000 ????				      ENDM		; bank name
    218  0000 ????
    219  0000 ????						; TODO - fix - this is faulty....
    220  0000 ????				      MAC	validate_ram_size
    221  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    222  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    223  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    224  0000 ????				      ERR
    225  0000 ????				      ENDIF
    226  0000 ????				      ENDM
    227  0000 ????
    228  0000 ????						;---------------------------------------------------------------------------------------------------
    229  0000 ????
    230  0000 ????				      MAC	resync
    231  0000 ????						; resync screen, X and Y == 0 afterwards
    232  0000 ????				      lda	#%10	; make sure VBLANK is ON
    233  0000 ????				      sta	VBLANK
    234  0000 ????
    235  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    236  0000 ????			   .loopResync
    237  0000 ????				      VERTICAL_SYNC
    238  0000 ????
    239  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    240  0000 ????				      lda	Platform
    241  0000 ????				      eor	#PAL_50	; PAL-50?
    242  0000 ????				      bne	.ntsc
    243  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    244  0000 ????			   .ntsc
    245  0000 ????			   .loopWait
    246  0000 ????				      sta	WSYNC
    247  0000 ????				      sta	WSYNC
    248  0000 ????				      dey
    249  0000 ????				      bne	.loopWait
    250  0000 ????				      dex
    251  0000 ????				      bne	.loopResync
    252  0000 ????				      ENDM
    253  0000 ????
    254  0000 ????				      MAC	set_platform
    255  0000 ????						; 00 = NTSC
    256  0000 ????						; 01 = NTSC
    257  0000 ????						; 10 = PAL-50
    258  0000 ????						; 11 = PAL-60
    259  0000 ????				      lda	SWCHB
    260  0000 ????				      rol
    261  0000 ????				      rol
    262  0000 ????				      rol
    263  0000 ????				      and	#%11
    264  0000 ????				      eor	#PAL
    265  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    266  0000 ????				      ENDM
    267  0000 ????
    268  0000 ????
    269  0000 ????						;---------------------------------------------------------------------------------------------------
    270  0000 ????
    271  0000 ????				      MAC	jsram_safe
    272  0000 ????						; Saves bank of routine to variable for later restore.
    273  0000 ????						; Switches to the bank and does a JSR to the routine.
    274  0000 ????
    275  0000 ????				      lda	#BANK_{1}
    276  0000 ????				      sta	savedBank
    277  0000 ????				      sta	SET_BANK
    278  0000 ????				      jsr	{1}
    279  0000 ????				      ENDM		; {routine}
    280  0000 ????
    281  0000 ????
    282  0000 ????				      MAC	jsram
    283  0000 ????
    284  0000 ????				      lda	#BANK_{1}
    285  0000 ????				      sta	SET_BANK
    286  0000 ????				      jsr	{1}
    287  0000 ????				      ENDM		; {routine}
    288  0000 ????
    289  0000 ????						;---------------------------------------------------------------------------------------------------
    290  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 2
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00f3 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawPhase  ds	1	; ticks through the board draw process
     12 U0083		       00	   drawDelay  ds	1
     13 U0084		       00	   lastSquare ds	1
     14 U0085		       00	   drawCount  ds	1
     15 U0086		       00	   fromX12    ds	1
     16 U0087		       00	   toX12      ds	1
     17 U0088		       00 00	   highlight_row ds	2
     18 U008a		       00 00	   highlight_col ds	2
     19 U008c		       00	   mdelay     ds	1
     20 U008d		       00	   ccur       ds	1
     21 U008e		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     22 U008f		       00	   aiPhase    ds	1	; human/computer state machine
     23 U0090		       00	   aiFlashDelay ds	1
     24 U0091		       00	   aiFromSquare ds	1
     25 U0092		       00	   aiToSquare ds	1
     26 U0093		       00	   aiFromSquareX12 ds	1
     27 U0094		       00	   aiToSquareX12 ds	1
     28 U0095		       00	   aiMoveIndex ds	1
     29 U0096
     30 U0096		       00	   aiFlashPhase ds	1
     31 U0097
     32 U0097		       00	   currentPiece ds	1
     33 U0098		       00	   currentSquare ds	1
     34 U0099		       00	   returnBank ds	1
     35 U009a		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     36 U009b		       00	   followPiece ds	1
     37 U009c		       00	   currentPly ds	1
     38 U009d		       00	   piecelistIndex ds	1
     39 U009e		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     40 U009f		       00	   fromSquare ds	1
     41 U00a0		       00	   fromPiece  ds	1
     42 U00a1		       00	   toSquare   ds	1
     43 U00a2		       00	   toPiece    ds	1
     44 U00a3		       00	   lastPiece  ds	1
     45 U00a4		       00	   previousPiece ds	1
     46 U00a5
     47 U00a5		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     48 U00a6							;BufferedJoystick		  ds 1	      ; player joystick input
     49 U00a6							;PreviousJoystick		  ds 1
     50 U00a6							;BGColour			  ds 1
     51 U00a6		       00	   aiPiece    ds	1
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 2
      0 U00a7					      include	"overlays.asm"
      1 U00a7							; Chess
      2 U00a7							; Atari 2600 Chess display system
      3 U00a7							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a7							; andrew@taswegian.com
      5 U00a7
      6 U00a7							;---------------------------------------------------------------------------------------------------
      7 U00a7							; OVERLAYS!
      8 U00a7							; These variables are overlays, and should be managed with care
      9 U00a7							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a7							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a7							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a7							; overlay #2
     13 U00a7
     14 U00a7							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a7
     16 U00a7							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a7							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a7							;---------------------------------------------------------------------------------------------------
     19 U00a7
     20 U00a7					      MAC	overlay
     21 U00a7				   OVERLAY_NAME SET	{1}
     22 U00a7					      SEG.U	OVERLAY_{1}
     23 U00a7					      org	Overlay
     24 U00a7					      ENDM		; {name}
     25 U00a7
     26 U00a7							;---------------------------------------------------------------------------------------------------
     27 U00a7
     28 U00a7					      MAC	validate_overlay
     29 U00a7					      LIST	OFF
     30 U00a7				   OVERLAY_DELTA SET	* - Overlay
     31 U00a7					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a7					      ENDIF
     34 U00a7					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a7					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a7					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a7					      ERR
     38 U00a7					      ENDIF
     39 U00a7					      LIST	ON
     40 U00a7					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a7					      ENDM
     42 U00a7
     43 U00a7							;---------------------------------------------------------------------------------------------------
     44 U00a7
     45 U00a7				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a7
     48 U00a7
     49 U00a7							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a7							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a7							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a7							; (especially the latter ones) are only used in rare occasions.
     53 U00a7
     54 U00a7							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a7							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a7
     57 U00a7		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00f3				   END_OF_OVERLAY
     59 U00f3
     60 U00f3							;---------------------------------------------------------------------------------------------------
     61 U00f3							; And now... the overlays....
     62 U00f3
 ---- OVERLAYS ( $4c bytes ) ----
     63 U00f3					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     64 U00f3
     65 U00f3							;---------------------------------------------------------------------------------------------------
     66 U00f3
      0 U00f3					      OVERLAY	"PieceBufferOverlay"
      1 U00f3				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00f3 ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a7					      org	Overlay
     68 U00a7							; used in CopyPieceFromRAMBufferToScreen
     69 U00a7							; used in CopyPieceToRAMBuffer
     70 U00a7							; used in ClearChessBitmap
     71 U00a7							; used in CopyPieceToRowBitmap
     72 U00a7		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     73 U00ef		       00 00	   __ptr      ds	2	; pointer to data
     74 U00f1		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00f3					      VALIDATE_OVERLAY
     11 U00f3					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00f3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     76 U00f3
     77 U00f3							;---------------------------------------------------------------------------------------------------
     78 U00f3
      0 U00f3					      OVERLAY	"CopyROMShadowToRAM"
      1 U00f3				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U00aa ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a7					      org	Overlay
     80 U00a7		       00	   __CopyCount ds	1
     81 U00a8		       00	   __ROM_SourceBank ds	1
     82 U00a9		       00	   __index    ds	1
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     84 U00aa
     85 U00aa							;---------------------------------------------------------------------------------------------------
     86 U00aa
      0 U00aa					      OVERLAY	"DrawTheChessScreen"
      1 U00aa				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U00a8 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a7					      org	Overlay
     88 U00a7		       00	   __rows     ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     90 U00a8
     91 U00a8							;---------------------------------------------------------------------------------------------------
     92 U00a8
      0 U00a8					      OVERLAY	"SetupShadowRAM"
      1 U00a8				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U00a9 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a7					      org	Overlay
     94 U00a7		       00	   __destinationBank ds	1
     95 U00a8		       00	   __sourceBank ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     97 U00a9
     98 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"DrawPiece"
      1 U00a9				   OVERLAY_NAME SET	"DrawPiece"
      2 U00a9 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a7					      org	Overlay
    100 U00a7		       00	   __pieceColour ds	1
    101 U00a8		       00	   __boardc   ds	1
    102 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 DrawPiece - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    104 U00a9
    105 U00a9
    106 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"InitPly"
      1 U00a9				   OVERLAY_NAME SET	"InitPly"
      2 U00a8 ????				      SEG.U	OVERLAY_"InitPly"
      3 U00a7					      org	Overlay
    108 U00a7		       00	   __plyBank  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 InitPly - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    110 U00a8
    111 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"RandomPiece"
      1 U00a8				   OVERLAY_NAME SET	"RandomPiece"
      2 U00a8 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a7					      org	Overlay
    113 U00a7		       00	   __tempx    ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    115 U00a8
      0 U00a8					      OVERLAY	"Overlay000"
      1 U00a8				   OVERLAY_NAME SET	"Overlay000"
      2 U00a8 ????				      SEG.U	OVERLAY_"Overlay000"
      3 U00a7					      org	Overlay
    117 U00a7		       00	   __fromRow  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 Overlay000 - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    119 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"Overlay001"
      1 U00a8				   OVERLAY_NAME SET	"Overlay001"
      2 U00a9 ????				      SEG.U	OVERLAY_"Overlay001"
      3 U00a7					      org	Overlay
    121 U00a7		       00	   __from     ds	1
    122 U00a8		       00	   __to       ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 Overlay001 - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    124 U00a9							;---------------------------------------------------------------------------------------------------
    125 U00a9
      0 U00a9					      OVERLAY	"Handlers"
      1 U00a9				   OVERLAY_NAME SET	"Handlers"
      2 U00aa ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a7					      org	Overlay
    127 U00a7		       00	   __piece    ds	1
    128 U00a8		       00 00	   __vector   ds	2
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Handlers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    130 U00aa
    131 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"Movers"
      1 U00aa				   OVERLAY_NAME SET	"Movers"
      2 U00aa ????				      SEG.U	OVERLAY_"Movers"
      3 U00a7					      org	Overlay
    133 U00a7		       00	   __fromCol  ds	1
    134 U00a8		       00	   __toCol    ds	1
    135 U00a9		       00	   __temp     ds	1
    136 U00aa
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Movers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    138 U00aa
    139 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"checkPieces"
      1 U00aa				   OVERLAY_NAME SET	"checkPieces"
      2 U00a9 ????				      SEG.U	OVERLAY_"checkPieces"
      3 U00a7					      org	Overlay
    141 U00a7		       00	   __x	      ds	1
    142 U00a8		       00	   __bank     ds	1
    143 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 checkPieces - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    145 U00a9
    146 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"aiSelectStartSquare"
      1 U00a9				   OVERLAY_NAME SET	"aiSelectStartSquare"
      2 U00a8 ????				      SEG.U	OVERLAY_"aiSelectStartSquare"
      3 U00a7					      org	Overlay
    148 U00a7		       00	   __cursorColour ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 aiSelectStartSquare - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    150 U00a8
    151 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"TitleScreen"
      1 U00a8				   OVERLAY_NAME SET	"TitleScreen"
      2 U00a9 ????				      SEG.U	OVERLAY_"TitleScreen"
      3 U00a7					      org	Overlay
    153 U00a7		       00 00	   __colour_table ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 TitleScreen - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    155 U00a9							;---------------------------------------------------------------------------------------------------
    156 U00a9
      0 U00a9					      OVERLAY	"SAFE_showMoveOptions"
      1 U00a9				   OVERLAY_NAME SET	"SAFE_showMoveOptions"
      2 U00ff ????				      SEG.U	OVERLAY_"SAFE_showMoveOptions"
      3 U00a7					      org	Overlay
    158 U00a7		       00 00	   __moveDotColour ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SAFE_showMoveOptions - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    160 U00a9							;---------------------------------------------------------------------------------------------------
    161 U00a9
    162 U00f3					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
    163 U00f3					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    164 U00f3					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    165 U00f3
    166 U00f3							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 2
      0 U00f3					      include	"stack.asm"
      1 U00f3							; Chess
      2 U00f3							; Atari 2600 Chess display system
      3 U00f3							; Copyright (c) 2019-2020 Andrew Davie
      4 U00f3							; andrew@taswegian.com
      5 U00f3
      6 U00f3
      7 U00f3		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00f3
      9 U00f3		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00ff
     11 U00ff							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00ff							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00ff							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    294 U00ff
 FREE BYTES IN ZERO PAGE =  $0
    295 U00ff					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    296 U00ff				  -	      IF	* > $FF
    297 U00ff				  -	      ERR	"Zero Page overflow!"
    298 U00ff					      ENDIF
    299 U00ff
    300 U00ff							;------------------------------------------------------------------------------
    301 U00ff							;##############################################################################
    302 U00ff							;------------------------------------------------------------------------------
    303 U00ff
    304 U00ff							; NOW THE VERY INTERESTING '3E' RAM BANKS
    305 U00ff							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    306 U00ff							; IN A 2K MEMORY SPACE
    307 U00ff
      0 U00ff					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00ff
      2 U00ff
      3 U00ff
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    309 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    309 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    309 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    309 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    309 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    309 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    309 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    312 U1c00					      REPEND
    313 U1c00
    314 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    315 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    316 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    317 U1c00
    318 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    319 U1c00							; is that we can use that code to switch between banks, and the system will happily
    320 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    321 U1c00
    322 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    323 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    324 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    325 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    326 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    327 U1c00
    328 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    329 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    330 U1c00
    331 U1c00							;------------------------------------------------------------------------------
    332 U1c00
    333 U1c00
    334 U1c00							;---------------------------------------------------------------------------------------------------
    335 U1c00
    336 U1c00
    337 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    338 U1c00
    339 U1c00					      MAC	next_random
    340 U1c00					      lda	rnd
    341 U1c00					      lsr
    342 U1c00					      bcc	.skipEOR
    343 U1c00					      eor	#RND_EOR_VAL
    344 U1c00				   .skipEOR   sta	rnd
    345 U1c00					      ENDM
    346 U1c00
    347 U1c00							;--------------------------------------------------------------------------------
    348 U1c00
    349 U1c00							;ORIGIN      SET 0
    350 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 2
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00							; = 76 for single square (empty/take)
     12 U1c00
     13 U1c00					      ldx	currentSquare	; 3
     14 U1c00					      bne	.project	; 3   unconditional
     15 U1c00
     16 U1c00				   .empty     jsr	AddMove	; 57
     17 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     18 U1c00					      bmi	.invalid	; 2/3 off board!
     19 U1c00					      lda	Board,y	; 4   piece @ destination
     20 U1c00					      beq	.empty	; 2/3
     21 U1c00					      eor	currentPiece	; 3
     22 U1c00					      bpl	.invalid	; 2/3 same colour
     23 U1c00					      jsr	AddMove	; 57  and exit
     24 U1c00
     25 U1c00				   .invalid
     26 U1c00					      ENDM
     27 U1c00
     28 U1c00							;---------------------------------------------------------------------------------------------------
     29 U1c00
     30 U1c00					      MAC	move_to
     31 U1c00					      SUBROUTINE
     32 U1c00					      ldy	ValidSquare+{1},x
     33 U1c00					      bmi	.invalid	; off board!
     34 U1c00					      lda	Board,y	; piece @ destination
     35 U1c00					      beq	.squareEmpty
     36 U1c00					      eor	currentPiece
     37 U1c00					      bpl	.invalid	; same colour
     38 U1c00				   .squareEmpty jsr	AddMove
     39 U1c00				   .invalid
     40 U1c00					      ENDM
     41 U1c00
     42 U1c00
     43 U1c00					      MAC	move_to_x
     44 U1c00					      ldx	currentSquare
     45 U1c00					      MOVE_TO	{1}
     46 U1c00					      ENDM
     47 U1c00
     48 U1c00
     49 U1c00							;---------------------------------------------------------------------------------------------------
     50 U1c00							; EOF
------- FILE ./chess.asm
    352 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 2
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  013b ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;---------------------------------------------------------------------------------------------------
     18  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;---------------------------------------------------------------------------------------------------
     22  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004
      3  0004				   Cart_Init
     24  0004					      SUBROUTINE
     25  0004
     26  0004		       a9 00		      lda	#0
     27  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     28  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     29  000c		       85 6b		      sta	HMCLR
     30  000e
     31  000e							; cleanup remains of title screen
     32  000e		       85 5b		      sta	GRP0
     33  0010		       85 5c		      sta	GRP1
     34  0012
     35  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     36  0014		       85 44		      sta	NUSIZ0
     37  0016		       85 45		      sta	NUSIZ1
     38  0018
     39  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     40  001a		       85 4a		      sta	CTRLPF
     41  001c
     42  001c		       60		      rts
     43  001d
     44  001d
     45  001d							;---------------------------------------------------------------------------------------------------
     46  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d
      3  001d				   Resync
     48  001d					      SUBROUTINE
     49  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 a5		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     51  0040		       60		      rts
     52  0041
     53  0041
     54  0041							;---------------------------------------------------------------------------------------------------
     55  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041
      3  0041				   aiStartClearBoard
     57  0041					      SUBROUTINE
     58  0041
     59  0041		       a2 08		      ldx	#8
     60  0043		       86 85		      stx	drawCount	; = bank
     61  0045		       e6 82		      inc	drawPhase
     62  0047
      0  0047					      PHASE	AI_Halt
      1  0047		       a9 09		      lda	#AI_Halt
      2  0049		       85 8f		      sta	aiPhase
     64  004b		       60		      rts
     65  004c
     66  004c							;---------------------------------------------------------------------------------------------------
     67  004c
      0  004c					      DEF	aiClearEachRow
      1  004c				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  004c
BANK_GENERIC.asm (68): error: Label mismatch...
 --> aiClearEachRow f048                  
      3  004c				   aiClearEachRow
     69  004c					      SUBROUTINE
     70  004c
     71  004c		       c6 85		      dec	drawCount
     72  004e		       30 85		      bmi	.bitmapCleared
     73  0050		       a4 85		      ldy	drawCount
     74  0052		       4c e8 f8 	      jmp	CallClear
     75  0055
     76  0055				   .bitmapCleared
     77  0055
     78  0055		       a9 3f		      lda	#63
     79  0057		       85 80		      sta	drawPieceNumber
     80  0059
     81  0059		       e6 82		      inc	drawPhase
     82  005b
      0  005b					      PHASE	AI_Halt	;tmp
      1  005b		       a9 09		      lda	#AI_Halt
      2  005d		       85 8f		      sta	aiPhase
     84  005f		       60		      rts
     85  0060
     86  0060
     87  0060							;---------------------------------------------------------------------------------------------------
     88  0060
      0  0060					      DEF	FB3
      1  0060				   BANK_FB3   SET	_CURRENT_BANK
      2  0060
BANK_GENERIC.asm (89): error: Label mismatch...
 --> FB3 f058                  
      3  0060				   FB3
     90  0060					      SUBROUTINE
     91  0060
     92  0060		       a9 00		      lda	#BLANK
     93  0062		       85 a4		      sta	previousPiece
     94  0064
     95  0064		       e6 82		      inc	drawPhase
     96  0066		       60		      rts
     97  0067
     98  0067							;---------------------------------------------------------------------------------------------------
     99  0067
      0  0067					      DEF	EraseStartPiece
      1  0067				   BANK_EraseStartPiece SET	_CURRENT_BANK
      2  0067
BANK_GENERIC.asm (100): error: Label mismatch...
 --> EraseStartPiece f05f                  
      3  0067				   EraseStartPiece
    101  0067					      SUBROUTINE
    102  0067
    103  0067		       a5 a1		      lda	toSquare
    104  0069		       c5 9f		      cmp	fromSquare
    105  006b		       f0 9f		      beq	.idleErase
    106  006d
    107  006d		       a9 06		      lda	#6	; on/off count
    108  006f		       85 85		      sta	drawCount	; flashing for piece about to move
    109  0071		       a9 00		      lda	#0
    110  0073		       85 83		      sta	drawDelay
    111  0075
    112  0075		       e6 82		      inc	drawPhase
    113  0077		       60	   .idleErase rts
    114  0078
    115  0078
    116  0078							;---------------------------------------------------------------------------------------------------
    117  0078
      0  0078					      DEF	WriteStartPieceBlank
      1  0078				   BANK_WriteStartPieceBlank SET	_CURRENT_BANK
      2  0078
BANK_GENERIC.asm (118): error: Label mismatch...
 --> WriteStartPieceBlank f070                  
      3  0078				   WriteStartPieceBlank
    119  0078					      SUBROUTINE
    120  0078
    121  0078							; Flash the piece in-place preparatory to moving it.
    122  0078							; drawDelay = flash speed
    123  0078							; drawCount = # of flashes
    124  0078
    125  0078		       a5 83		      lda	drawDelay
    126  007a		       f0 fb		      beq	deCount
    127  007c		       c6 83		      dec	drawDelay
    128  007e		       60		      rts
    129  007f
BANK_GENERIC.asm (130): error: Label mismatch...
 --> deCount f077                  
    130  007f				   deCount
    131  007f
    132  007f		       a5 85		      lda	drawCount
    133  0081		       f0 06		      beq	flashDone
    134  0083		       c6 85		      dec	drawCount
    135  0085
    136  0085		       a9 04		      lda	#4
    137  0087		       85 83		      sta	drawDelay	; "getting ready to move" flash
    138  0089
    139  0089		       a5 9f		      lda	fromSquare
    140  008b		       85 80		      sta	drawPieceNumber
    141  008d		       20 de fd 	      jsr	SAFE_CopySinglePiece	; EOR-draw = flash
    142  0090		       60		      rts
    143  0091
BANK_GENERIC.asm (144): error: Label mismatch...
 --> flashDone f089                  
    144  0091		       e6 82	   flashDone  inc	drawPhase
    145  0093		       60		      rts
    146  0094
    147  0094
    148  0094							;---------------------------------------------------------------------------------------------------
    149  0094
      0  0094					      DEF	DEB2
      1  0094				   BANK_DEB2  SET	_CURRENT_BANK
      2  0094
BANK_GENERIC.asm (150): error: Label mismatch...
 --> DEB2 f08c                  
      3  0094				   DEB2
    151  0094					      SUBROUTINE
    152  0094
    153  0094		       20 de fd 	      jsr	SAFE_CopySinglePiece
    154  0097		       c6 80		      dec	drawPieceNumber
    155  0099		       30 80		      bmi	.comp
    156  009b
    157  009b		       c6 82		      dec	drawPhase
    158  009d		       60		      rts
    159  009e
    160  009e		       e6 82	   .comp      inc	drawPhase
    161  00a0		       60		      rts
    162  00a1
    163  00a1
    164  00a1							;---------------------------------------------------------------------------------------------------
    165  00a1
      0  00a1					      DEF	MarchB
      1  00a1				   BANK_MarchB SET	_CURRENT_BANK
      2  00a1
BANK_GENERIC.asm (166): error: Label mismatch...
 --> MarchB f099                  
      3  00a1				   MarchB
    167  00a1					      SUBROUTINE
    168  00a1
    169  00a1							; Draw the piece in the new square
    170  00a1
    171  00a1		       a5 9f		      lda	fromSquare
    172  00a3		       85 80		      sta	drawPieceNumber
    173  00a5		       20 de fd 	      jsr	SAFE_CopySinglePiece	; draw the moving piece into the new square
    174  00a8
    175  00a8		       a9 06		      lda	#6	; snail trail delay
    176  00aa		       85 83		      sta	drawDelay
    177  00ac
    178  00ac		       e6 82		      inc	drawPhase
    179  00ae		       60		      rts
    180  00af
    181  00af
    182  00af							;---------------------------------------------------------------------------------------------------
    183  00af
      0  00af					      DEF	FinalFlash
      1  00af				   BANK_FinalFlash SET	_CURRENT_BANK
      2  00af
BANK_GENERIC.asm (184): error: Label mismatch...
 --> FinalFlash f0a7                  
      3  00af				   FinalFlash
    185  00af					      SUBROUTINE
    186  00af
    187  00af		       a5 83		      lda	drawDelay
    188  00b1		       f0 83		      beq	.deCount
    189  00b3		       c6 83		      dec	drawDelay
    190  00b5		       60		      rts
    191  00b6
    192  00b6		       a5 85	   .deCount   lda	drawCount
    193  00b8		       f0 06		      beq	flashDone2
    194  00ba		       c6 85		      dec	drawCount
    195  00bc
    196  00bc		       a9 0a		      lda	#10
    197  00be		       85 83		      sta	drawDelay	; "getting ready to move" flash
    198  00c0
    199  00c0		       a5 9f		      lda	fromSquare
    200  00c2		       85 80		      sta	drawPieceNumber
    201  00c4		       20 de fd 	      jsr	SAFE_CopySinglePiece
    202  00c7		       60		      rts
    203  00c8
BANK_GENERIC.asm (204): error: Label mismatch...
 --> flashDone2 f0c0                  
    204  00c8		       e6 82	   flashDone2 inc	drawPhase
    205  00ca		       60		      rts
    206  00cb
    207  00cb
    208  00cb							;---------------------------------------------------------------------------------------------------
    209  00cb
      0  00cb					      DEF	CastleFixup
      1  00cb				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00cb
BANK_GENERIC.asm (210): error: Label mismatch...
 --> CastleFixup f0c3                  
      3  00cb				   CastleFixup
    211  00cb					      SUBROUTINE
    212  00cb
    213  00cb							; fixup any castling issues
    214  00cb							; at this point the king has finished his two-square march
    215  00cb							; based on the finish square, we determine which rook we're interacting with
    216  00cb							; and generate a 'move' for the rook to position on the other side of the king
    217  00cb
    218  00cb
    219  00cb		       a5 a0		      lda	fromPiece
    220  00cd		       29 10		      and	#FLAG_CASTLE
    221  00cf		       f0 10		      beq	.noCast	; NOT involved in castle!
    222  00d1
    223  00d1		       a2 04		      ldx	#4
    224  00d3		       a5 a1		      lda	toSquare
    225  00d5		       ca	   .findCast  dex
    226  00d6		       30 a1		      bmi	.noCast
    227  00d8		       dd 03 f1 	      cmp	KSquare,x
    228  00db		       d0 f8		      bne	.findCast
    229  00dd
    230  00dd
    231  00dd		       bd 0b f1 	      lda	RSquareEnd,x
    232  00e0		       85 87		      sta	toX12
    233  00e2		       bd 0f f1 	      lda	RSquareStart64,x
    234  00e5		       85 9f		      sta	fromSquare
    235  00e7		       bd 13 f1 	      lda	RSquareEnd64,x
    236  00ea		       85 a1		      sta	toSquare
    237  00ec
    238  00ec		       bc 07 f1 	      ldy	RSquareStart,x
    239  00ef		       84 86		      sty	fromX12
    240  00f1
    241  00f1		       a5 a0		      lda	fromPiece
    242  00f3		       29 80		      and	#128
    243  00f5		       09 05		      ora	#ROOK	; preserve colour
    244  00f7		       85 a0		      sta	fromPiece
    245  00f9
    246  00f9		       a9 07		      lda	#CSL
    247  00fb		       85 82		      sta	drawPhase
    248  00fd		       60		      rts
    249  00fe
    250  00fe				   .noCast
    251  00fe
    252  00fe		       a5 9e		      lda	sideToMove
    253  0100		       49 80		      eor	#128
    254  0102		       85 9e		      sta	sideToMove	; swap
    255  0104
    256  0104		       30 9e		      bmi	.skip	; not human's turn?
    257  0106
    258  0106		       a9 0b		      lda	#AI_SartMoveGen
    259  0108		       85 8f		      sta	aiPhase	; start "AI" state machine
    260  010a
    261  010a		       60	   .skip      rts
    262  010b
    263  010b
BANK_GENERIC.asm (264): error: Label mismatch...
 --> KSquare f103                  
    264  010b		       02 06 3a 3e KSquare    .byte.b	2,6,58,62
BANK_GENERIC.asm (265): error: Label mismatch...
 --> RSquareStart f107                  
    265  010f		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
BANK_GENERIC.asm (266): error: Label mismatch...
 --> RSquareEnd f10b                  
    266  0113		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
BANK_GENERIC.asm (267): error: Label mismatch...
 --> RSquareStart64 f10f                  
    267  0117		       00 07 38 3f RSquareStart64 .byte.b	0,7,56,63
BANK_GENERIC.asm (268): error: Label mismatch...
 --> RSquareEnd64 f113                  
    268  011b		       03 05 3b 3d RSquareEnd64 .byte.b	3,5,59,61
    269  011f
    270  011f
    271  011f							;---------------------------------------------------------------------------------------------------
    272  011f
      0  011f					      DEF	SetupBanks
      1  011f				   BANK_SetupBanks SET	_CURRENT_BANK
      2  011f
BANK_GENERIC.asm (273): error: Label mismatch...
 --> SetupBanks f117                  
      3  011f				   SetupBanks
    274  011f					      SUBROUTINE
    275  011f
    276  011f							; SAFE
    277  011f
    278  011f		       a0 07		      ldy	#7
    279  0121		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    280  0123		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM
    281  0126		       88		      dey
    282  0127		       10 f8		      bpl	.copyRowBanks
    283  0129
    284  0129							; copy the BOARD/MOVES bank
    285  0129
    286  0129		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    287  012b		       a2 0b		      ldx	#MOVES
    288  012d		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM	; this auto-initialises Board too
    289  0130
    290  0130							; copy the PLY banks
    291  0130
    292  0130		       a9 06		      lda	#MAX_PLY
    293  0132		       85 a7		      sta	__plyBank
    294  0134		       a0 09		      ldy	#RAMBANK_PLY
    295  0136		       84 9c		      sty	currentPly
    296  0138		       a2 0c	   .copyPlyBanks ldx	#BANK_PLY
    297  013a		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM
    298  013d		       c8		      iny
    299  013e		       c6 a7		      dec	__plyBank
    300  0140		       d0 f6		      bne	.copyPlyBanks
    301  0142
    302  0142		       60		      rts
    303  0143
    304  0143
    305  0143							;---------------------------------------------------------------------------------------------------
    306  0143
      0  0143					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  0143		       01 43	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $143 , FREE= $6bd
      2  0143					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  0143				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  0143				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  0143				  -	      ERR
      6  0143					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 2
      0  0143					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  0143
      0  0143					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0aec ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a6	   COLOUR_LINE_1 =	$a6
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 24	   COLOUR_LINE_3 =	$24
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800							; good 94/46/28/0
     18  0800							; good 94/44/26/0
     19  0800
     20  0800
     21  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     22  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     24  0800
     25  0800				   ChessBitmap
     26  0800		       00 00 00 00*ChessBitmap0 ds	24
     27  0818		       00 00 00 00*ChessBitmap1 ds	24
     28  0830		       00 00 00 00*ChessBitmap2 ds	24
     29  0848		       00 00 00 00*ChessBitmap3 ds	24
     30  0860		       00 00 00 00*ChessBitmap4 ds	24
     31  0878		       00 00 00 00*ChessBitmap5 ds	24
     32  0890
     33  0890
     34  0890				   BlankSprite
     35  0890		       00 00 00 00*	      ds	8,0
     36  0898
     37  0898				   SpriteBuffer
     38  0898					      REPEAT	24
     39  0898		       f8		      .byte.b	%11111000	;%00011111
     38  0898					      REPEND
     39  0899		       f8		      .byte.b	%11111000	;%00011111
     38  0899					      REPEND
     39  089a		       f8		      .byte.b	%11111000	;%00011111
     38  089a					      REPEND
     39  089b		       f8		      .byte.b	%11111000	;%00011111
     38  089b					      REPEND
     39  089c		       f8		      .byte.b	%11111000	;%00011111
     38  089c					      REPEND
     39  089d		       f8		      .byte.b	%11111000	;%00011111
     38  089d					      REPEND
     39  089e		       f8		      .byte.b	%11111000	;%00011111
     38  089e					      REPEND
     39  089f		       f8		      .byte.b	%11111000	;%00011111
     38  089f					      REPEND
     39  08a0		       f8		      .byte.b	%11111000	;%00011111
     38  08a0					      REPEND
     39  08a1		       f8		      .byte.b	%11111000	;%00011111
     38  08a1					      REPEND
     39  08a2		       f8		      .byte.b	%11111000	;%00011111
     38  08a2					      REPEND
     39  08a3		       f8		      .byte.b	%11111000	;%00011111
     38  08a3					      REPEND
     39  08a4		       f8		      .byte.b	%11111000	;%00011111
     38  08a4					      REPEND
     39  08a5		       f8		      .byte.b	%11111000	;%00011111
     38  08a5					      REPEND
     39  08a6		       f8		      .byte.b	%11111000	;%00011111
     38  08a6					      REPEND
     39  08a7		       f8		      .byte.b	%11111000	;%00011111
     38  08a7					      REPEND
     39  08a8		       f8		      .byte.b	%11111000	;%00011111
     38  08a8					      REPEND
     39  08a9		       f8		      .byte.b	%11111000	;%00011111
     38  08a9					      REPEND
     39  08aa		       f8		      .byte.b	%11111000	;%00011111
     38  08aa					      REPEND
     39  08ab		       f8		      .byte.b	%11111000	;%00011111
     38  08ab					      REPEND
     39  08ac		       f8		      .byte.b	%11111000	;%00011111
     38  08ac					      REPEND
     39  08ad		       f8		      .byte.b	%11111000	;%00011111
     38  08ad					      REPEND
     39  08ae		       f8		      .byte.b	%11111000	;%00011111
     38  08ae					      REPEND
     39  08af		       f8		      .byte.b	%11111000	;%00011111
     40  08b0					      REPEND
     41  08b0
     42  08b0				   SpriteBuffer2
     43  08b0					      REPEAT	24
     44  08b0		       f8		      .byte.b	%11111000	;%00011111
     43  08b0					      REPEND
     44  08b1		       f8		      .byte.b	%11111000	;%00011111
     43  08b1					      REPEND
     44  08b2		       f8		      .byte.b	%11111000	;%00011111
     43  08b2					      REPEND
     44  08b3		       f8		      .byte.b	%11111000	;%00011111
     43  08b3					      REPEND
     44  08b4		       f8		      .byte.b	%11111000	;%00011111
     43  08b4					      REPEND
     44  08b5		       f8		      .byte.b	%11111000	;%00011111
     43  08b5					      REPEND
     44  08b6		       f8		      .byte.b	%11111000	;%00011111
     43  08b6					      REPEND
     44  08b7		       f8		      .byte.b	%11111000	;%00011111
     43  08b7					      REPEND
     44  08b8		       f8		      .byte.b	%11111000	;%00011111
     43  08b8					      REPEND
     44  08b9		       f8		      .byte.b	%11111000	;%00011111
     43  08b9					      REPEND
     44  08ba		       f8		      .byte.b	%11111000	;%00011111
     43  08ba					      REPEND
     44  08bb		       f8		      .byte.b	%11111000	;%00011111
     43  08bb					      REPEND
     44  08bc		       f8		      .byte.b	%11111000	;%00011111
     43  08bc					      REPEND
     44  08bd		       f8		      .byte.b	%11111000	;%00011111
     43  08bd					      REPEND
     44  08be		       f8		      .byte.b	%11111000	;%00011111
     43  08be					      REPEND
     44  08bf		       f8		      .byte.b	%11111000	;%00011111
     43  08bf					      REPEND
     44  08c0		       f8		      .byte.b	%11111000	;%00011111
     43  08c0					      REPEND
     44  08c1		       f8		      .byte.b	%11111000	;%00011111
     43  08c1					      REPEND
     44  08c2		       f8		      .byte.b	%11111000	;%00011111
     43  08c2					      REPEND
     44  08c3		       f8		      .byte.b	%11111000	;%00011111
     43  08c3					      REPEND
     44  08c4		       f8		      .byte.b	%11111000	;%00011111
     43  08c4					      REPEND
     44  08c5		       f8		      .byte.b	%11111000	;%00011111
     43  08c5					      REPEND
     44  08c6		       f8		      .byte.b	%11111000	;%00011111
     43  08c6					      REPEND
     44  08c7		       f8		      .byte.b	%11111000	;%00011111
     45  08c8					      REPEND
     46  08c8				  -	      if	0
     47  08c8				  -	      .byte	%00011111
     48  08c8				  -	      .byte	%00011111
     49  08c8				  -	      .byte	%00011111
     50  08c8				  -	      .byte	%00011111
     51  08c8				  -	      .byte	%00011111
     52  08c8				  -	      .byte	%00011111
     53  08c8				  -	      .byte	%00011111
     54  08c8				  -	      .byte	%00011111
     55  08c8				  -
     56  08c8				  -	      .byte	%00011111
     57  08c8				  -	      .byte	%00011111
     58  08c8				  -	      .byte	%00011111
     59  08c8				  -	      .byte	%00011111
     60  08c8				  -	      .byte	%00011111
     61  08c8				  -	      .byte	%00011111
     62  08c8				  -	      .byte	%00011111
     63  08c8				  -	      .byte	%00011111
     64  08c8				  -
     65  08c8				  -	      .byte	%00011111
     66  08c8				  -	      .byte	%00011111
     67  08c8				  -	      .byte	%00011111
     68  08c8				  -	      .byte	%00011111
     69  08c8				  -	      .byte	%00011111
     70  08c8				  -	      .byte	%00011111
     71  08c8				  -	      .byte	%00011111
     72  08c8				  -	      .byte	%00011111
     73  08c8					      endif
     74  08c8
     75  08c8
     76  08c8							;---------------------------------------------------------------------------------------------------
     77  08c8					      if	1
      0  08c8					      DEF	ClearRowBitmap
      1  08c8				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  08c8
      3  08c8				   ClearRowBitmap
     79  08c8
     80  08c8		       a9 00		      lda	#0
     81  08ca		       a0 90		      ldy	#ROW_BITMAP_SIZE
     82  08cc		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     83  08cf		       88		      dey
     84  08d0		       d0 fa		      bne	.clearRow
     85  08d2		       60		      rts
     86  08d3					      endif
     87  08d3
     88  08d3							;---------------------------------------------------------------------------------------------------
     89  08d3
      0  08d3					      DEF	CopyPieceToRowBitmap
      1  08d3				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  08d3
      3  08d3				   CopyPieceToRowBitmap
     91  08d3
     92  08d3		       a0 11		      ldy	#17
     93  08d5		       b0 11		      bcs	.rightSide
     94  08d7
     95  08d7				   .copyPiece
     96  08d7		       b9 a7 00 	      lda	__pieceShapeBuffer,y
     97  08da		       f0 a7		      beq	.blank1
     98  08dc		       59 00 f0 	      eor	ChessBitmap,y
     99  08df		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    100  08e2
    101  08e2		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    102  08e5		       f0 b9		      beq	.blank2
    103  08e7		       59 12 f0 	      eor	ChessBitmap+18,y
    104  08ea		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
    105  08ed
    106  08ed		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    107  08f0		       f0 cb		      beq	.blank3
    108  08f2		       59 24 f0 	      eor	ChessBitmap+36,y
    109  08f5		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
    110  08f8
    111  08f8		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    112  08fb		       f0 dd		      beq	.blank4
    113  08fd		       59 36 f0 	      eor	ChessBitmap+54,y
    114  0900		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
    115  0903
    116  0903		       88	   .blank4    dey
    117  0904		       10 d1		      bpl	.copyPiece
    118  0906
    119  0906		       60		      rts
    120  0907
    121  0907				   .rightSide
    122  0907
    123  0907					      SUBROUTINE
    124  0907
    125  0907				   .copyPieceR
    126  0907
    127  0907		       b9 a7 00 	      lda	__pieceShapeBuffer,y
    128  090a		       f0 a7		      beq	.blank1
    129  090c		       59 48 f0 	      eor	ChessBitmap+72,y
    130  090f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    131  0912
    132  0912		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    133  0915		       f0 b9		      beq	.blank2
    134  0917		       59 5a f0 	      eor	ChessBitmap+72+18,y
    135  091a		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    136  091d
    137  091d		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    138  0920		       f0 cb		      beq	.blank3
    139  0922		       59 6c f0 	      eor	ChessBitmap+72+36,y
    140  0925		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    141  0928
    142  0928		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    143  092b		       f0 dd		      beq	.blank4
    144  092d		       59 7e f0 	      eor	ChessBitmap+72+54,y
    145  0930		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    146  0933
    147  0933				   .blank4
    148  0933		       88		      dey
    149  0934		       10 d1		      bpl	.copyPieceR
    150  0936
    151  0936		       60		      rts
    152  0937
    153  0937							;---------------------------------------------------------------------------------------------------
    154  0937
    155  0a00		       00 00 00 00*	      ALIGN	256
    156  0a00
    157  0a00							; x = row # (and bank#)
    158  0a00
    159  0a00				   .endline
    160  0a00
    161  0a00							;@59
    162  0a00
    163  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    164  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    165  0a00				   SELFMOD_RTS_ON_LAST_ROW
    166  0a00		       e8		      inx		; 2
    167  0a01
    168  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    169  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03
      3  0a03				   DrawRow
    171  0a03
    172  0a03							;@64
    173  0a03		       a0 07		      ldy	#7	; 2
    174  0a05		       10 07		      bpl	.dl2	; 3   (must be 69 here)
    175  0a07
    176  0a07							;@58...
    177  0a07
    178  0a07				   .l3
    179  0a07
    180  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    181  0a0a		       85 5b		      sta	GRP0	; 3
    182  0a0c		       b9 c0 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    183  0a0f		       85 5c		      sta	GRP1	; 3
    184  0a11
    185  0a11							;@-4
    186  0a11
    187  0a11		       a9 a6		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    188  0a13		       85 48		      sta	COLUPF	; 3 @1
    189  0a15
    190  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    191  0a18		       85 4d		      sta	PF0	; 3
    192  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    193  0a1d		       85 4e		      sta	PF1	; 3
    194  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    195  0a22		       85 4f		      sta	PF2	; 3 @22
    196  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    198  0a27
    199  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    200  0a2a		       85 4d		      sta	PF0	; 3
    201  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    202  0a2f		       85 4e		      sta	PF1	; 3
    203  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    204  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    205  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    207  0a39
    208  0a39		       88		      dey		; 2
    209  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    210  0a3c
    211  0a3c							;@57
    212  0a3c				   .drawLine
    213  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    215  0a42
    216  0a42				   .dl2
    217  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    218  0a45		       85 5b		      sta	GRP0	; 3
    219  0a47		       b9 b0 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    220  0a4a		       85 5c		      sta	GRP1	; 3
    221  0a4c
    222  0a4c							;@7
    223  0a4c
    224  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    225  0a4e		       85 48		      sta	COLUPF	; 3 @12
    226  0a50
    227  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    228  0a53		       85 4d		      sta	PF0	; 3
    229  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    230  0a58		       85 4e		      sta	PF1	; 3
    231  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    232  0a5d		       85 4f		      sta	PF2	; 3 @33
    233  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    235  0a61
    236  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    237  0a64		       85 4d		      sta	PF0	; 3
    238  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    239  0a69		       85 4e		      sta	PF1	; 3
    240  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    241  0a6e		       85 4f		      sta	PF2	; 3 @57
    242  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    244  0a73
    245  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    246  0a76		       85 5b		      sta	GRP0	; 3
    247  0a78		       b9 b8 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    248  0a7b		       85 5c		      sta	GRP1	; 3
    249  0a7d
    250  0a7d							;@0
    251  0a7d		       a9 24		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    252  0a7f		       85 48		      sta	COLUPF	; 3 @5
    253  0a81
    254  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    255  0a84		       85 4d		      sta	PF0	; 3
    256  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    257  0a89		       85 4e		      sta	PF1	; 3
    258  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    259  0a8e		       85 4f		      sta	PF2	; 3 @26
    260  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    262  0a94
    263  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    264  0a97		       85 4d		      sta	PF0	; 3
    265  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    266  0a9c		       85 4e		      sta	PF1	; 3
    267  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    268  0aa1		       85 4f		      sta	PF2	; 3 @55
    269  0aa3
    270  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    271  0aa6
    272  0aa6
    273  0aa6							;.LineColour
    274  0aa6							; The ICC triplet colour definitions for a single row of the chessboard
    275  0aa6							;    REPEAT 8
    276  0aa6							;	  .byte $4A, $28, $94
    277  0aa6							;    REPEND
    278  0aa6
    279  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6
      3  0aa6				   WriteBlank
    281  0aa6
    282  0aa6		       a9 90		      lda	#<BlankSprite
    283  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    284  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    285  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    286  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    287  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    288  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    289  0aba
    290  0aba		       a9 f0		      lda	#>BlankSprite
    291  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    292  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    293  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    294  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    295  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    296  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    297  0ace
    298  0ace		       60		      rts
    299  0acf
    300  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf
      3  0acf				   WriteCursor
    302  0acf
    303  0acf		       a6 88		      ldx	highlight_row
    304  0ad1		       30 88		      bmi	.noCursor
    305  0ad3
    306  0ad3		       86 3e		      stx	SET_BANK_RAM
    307  0ad5		       a9 98		      lda	#<SpriteBuffer
    308  0ad7		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    309  0ada		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    310  0add		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    311  0ae0		       a9 f0		      lda	#>SpriteBuffer
    312  0ae2		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    313  0ae5		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    314  0ae8		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    315  0aeb
    316  0aeb				  -	      if	0
    317  0aeb				  -	      ldx	highlight_row+1
    318  0aeb				  -	      stx	SET_BANK_RAM
    319  0aeb				  -	      lda	#<SpriteBuffer
    320  0aeb				  -	      sta	SMSPRITE0_1+1+RAM_WRITE
    321  0aeb				  -	      sta	SMSPRITE8_1+1+RAM_WRITE
    322  0aeb				  -	      sta	SMSPRITE16_1+1+RAM_WRITE
    323  0aeb				  -	      lda	#>SpriteBuffer
    324  0aeb				  -	      sta	SMSPRITE0_1+2+RAM_WRITE
    325  0aeb				  -	      sta	SMSPRITE8_1+2+RAM_WRITE
    326  0aeb				  -	      sta	SMSPRITE16_1+2+RAM_WRITE
    327  0aeb					      endif
    328  0aeb
    329  0aeb				   .noCursor
    330  0aeb		       60		      rts
    331  0aec
      0  0aec					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0aec
      2  0aec
      3  0aec		       02 ec	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $2ec , FREE= $114
      4  0aec					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0aec				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0aec				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0aec				  -	      ERR
      8  0aec					      endif
    333  0aec							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 2
      0  0aec					      include	"BANK_CHESS_INCLUDES.asm"
      1  0aec							; Chess
      2  0aec							; Atari 2600 Chess display system
      3  0aec							; Copyright (c) 2019-2020 Andrew Davie
      4  0aec							; andrew@taswegian.com
      5  0aec
      6  0aec
      7  0aec							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  0aec							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  0aec							; a single gif of the format..
     10  0aec							; a row of white pieces on black squares
     11  0aec							; a row of white pieces on white squares
     12  0aec							; a row of black pieces on black squares
     13  0aec							; a row of black pieces on white squares
     14  0aec
     15  0aec							; each row has the pieces ordered thus:
     16  0aec							; a blank, then pawn, knight, bishop, rook, queen, king
     17  0aec							; each piece is 5 pixels wide x 8 pixels deep
     18  0aec							; each pixel is from an 8-colour palette.
     19  0aec							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  0aec							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  0aec							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  0aec							; bit "b" becomes the second ICC pixel line (2)
     23  0aec							; bit "c" becomes the third ICC pixel line (3)
     24  0aec							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  0aec							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  0aec							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  0aec							; These 4 shifted positions are stored consecutively in the shape definition
     28  0aec
     29  0aec							; Example...
     30  0aec							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     31  0aec							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  0aec							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  0aec							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  0aec
     35  0aec							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  0aec							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  0aec							; actually have any data in PF1 or PF2.
     38  0aec
     39  0aec
     40  0aec
------- FILE piece_graphics.asm LEVEL 3 PASS 2
      0  0aec					      include	"piece_graphics.asm"
      1  0aec							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0aec					      NEWBANK	PIECES_0
      1  17d8 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000
      3  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048
      3  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090
      3  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100
      3  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148
      3  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190
      3  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200
      3  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248
      3  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290
      3  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300
      3  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348
      3  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390
      3  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400
      3  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448
      3  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490
      3  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500
      3  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548
      3  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590
      3  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600
      3  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648
      3  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690
      3  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700
      3  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748
      3  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790
      3  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  1fd8 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800
      3  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$00,$a0,$a0,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848
      3  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$00,$28,$28,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890
      3  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900
      3  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$00,$50,$50,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948
      3  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990
      3  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00
      3  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48
      3  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90
      3  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00
      3  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48
      3  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90
      3  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00
      3  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48
      3  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90
      3  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00
      3  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48
      3  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90
      3  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00
      3  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48
      3  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90
      3  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00
      3  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48
      3  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90
      3  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  27d8 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000
      3  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048
      3  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090
      3  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100
      3  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148
      3  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$f0,$50,$50,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190
      3  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$7c,$54,$54,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200
      3  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$03,$02,$02,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248
      3  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$f8,$a8,$a8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290
      3  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300
      3  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348
      3  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390
      3  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400
      3  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$00,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448
      3  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$00,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490
      3  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$00,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500
      3  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$00,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548
      3  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590
      3  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$78,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600
      3  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$03,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648
      3  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$78,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690
      3  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700
      3  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748
      3  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790
      3  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  2fd8 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800
      3  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848
      3  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890
      3  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900
      3  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948
      3  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990
      3  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00
      3  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48
      3  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90
      3  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00
      3  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48
      3  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90
      3  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00
      3  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48
      3  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90
      3  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00
      3  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48
      3  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$00,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90
      3  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$00,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00
      3  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$00,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48
      3  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$00,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90
      3  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$20,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00
      3  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$78,$38,$18,$78,$68,$14,$00,$00,$00,$00,$20,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48
      3  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$03,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90
      3  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$78,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$10,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_4
      1  37d8 ????				      SEG	PIECES_4
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_4   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3000					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3000				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3000
      3  3000				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3000		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3048					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3048				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3048
      3  3048				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3090					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3090				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3090
      3  3090				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  30c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  30d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3100				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3100
      3  3100				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3148					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3148				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3148
      3  3148				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3148		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  3160		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3190					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3190				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3190
      3  3190				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  31d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3200				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3200
      3  3200				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  3230		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3248					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3248				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3248
      3  3248				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3290					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3290				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3290
      3  3290				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3290		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  32a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  32d8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3300				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3300
      3  3300				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3348					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3348				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3348
      3  3348				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3378		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3390					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3390				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3390
      3  3390				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  33d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400
      3  3400				   BLACK_KING_on_BLACK_SQUARE_0
      3  3400		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  3418		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3448					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448
      3  3448				   BLACK_KING_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3490					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490
      3  3490				   BLACK_KING_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  34c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  34d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500
      3  3500				   BLACK_KING_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE piece_graphics.asm
    124  3548
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3548					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  3548				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548
      3  3548				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  3590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590
      3  3590				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  35d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  3600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600
      3  3600				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  3648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  3648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648
      3  3648				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3690					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  3690				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3690
      3  3690				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  3690		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  36d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  3700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3700
      3  3700				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  3748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  3748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3748
      3  3748				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3778		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  3790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3790
      3  3790				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
    134  37d8
      0  37d8					      NEWBANK	PIECES_5
      1  3a90 ????				      SEG	PIECES_5
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_5   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_5
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 2
      0  3800					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800
      3  3800				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3800		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 2
      0  3848					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848
      3  3848				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 2
      0  3890					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890
      3  3890				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  38c0		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 2
      0  38d8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900
      3  3900				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 2
      0  3948					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3948				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3948
      3  3948				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3948		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 2
      0  3990					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3990				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3990
      3  3990				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 2
      0  39d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3a00				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3a00
      3  3a00				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a30		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 2
      0  3a48					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3a48				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3a48
      3  3a48				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    144  3a90
    145  3a90				  -	      if	0
    146  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    147  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    148  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    149  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    150  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    151  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    152  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    153  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    154  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    155  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    156  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    157  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    158  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    159  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    160  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    161  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    162  3a90					      endif
      0  3a90					      CHECK_BANK_SIZE	"PIECES_5 (2K)"
      1  3a90		       02 90	   .TEMP      =	* - BANK_START
 PIECES_5 (2K) (2K) SIZE =  $290 , FREE= $570
      2  3a90					      ECHO	"PIECES_5 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3a90				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3a90				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3a90				  -	      ERR
      6  3a90					      endif
    164  3a90
    165  3a90				  -	      if	0
    166  3a90				  -	      NEWBANK	PIECES_6
    167  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    168  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    169  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    170  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    171  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    172  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    173  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    174  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    175  3a90				  -
    176  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    177  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    178  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    179  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    180  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    181  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    182  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    183  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    184  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    185  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    186  3a90				  -
    187  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    188  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    189  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    190  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    191  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    192  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    193  3a90				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    194  3a90				  -
    195  3a90				  -
    196  3a90				  -	      NEWBANK	PIECES_7
    197  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    198  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    199  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    200  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    201  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    202  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    203  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    204  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    205  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    206  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    207  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    208  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    209  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    210  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    211  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    212  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    213  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    214  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    215  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    216  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    217  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    218  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    219  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    220  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    221  3a90				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    222  3a90				  -
    223  3a90				  -
    224  3a90				  -	      NEWBANK	PIECES_8
    225  3a90				  -
    226  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    227  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    228  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    229  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    230  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    231  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    232  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    233  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    234  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    235  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    236  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    237  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    238  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    239  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    240  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    241  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    242  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    243  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    244  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    245  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    246  3a90				  -
    247  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    248  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    249  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    250  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    251  3a90				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    252  3a90				  -
    253  3a90					      endif
    254  3a90
    255  3a90							;    NEWBANK PIECES_9
    256  3a90
    257  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    258  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    259  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    260  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    261  3a90							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    262  3a90
    263  3a90				  -	      if	0
    264  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    265  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    266  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    267  3a90					      endif
    268  3a90
    269  3a90							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    270  3a90
    271  3a90				  -	      if	0
    272  3a90				  -
    273  3a90				  -
    274  3a90				  -
    275  3a90				  -
    276  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    277  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    278  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    279  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    280  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    281  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    282  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    283  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    284  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    285  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    286  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    287  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    288  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    289  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    290  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    291  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    292  3a90				  -
    293  3a90				  -
    294  3a90					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3a90
      0  3a90					      NEWBANK	PIECE_VECTORS
      1  4180 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 2
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEF	PIECE_VECTOR_LO
      1  4000				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4000
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  401d		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  401e		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  401f		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  4020		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     36  4021		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     37  4022		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     38  4023		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     39  4024		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     40  4025		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     41  4026		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     42  4027		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     43  4028		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     44  4029		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     45  402a		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     46  402b		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     47  402c		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     48  402d		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     49  402e		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     50  402f		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     51  4030		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     52  4031		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     53  4032		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     54  4033		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     55  4034		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     56  4035		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     57  4036		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     58  4037		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     59  4038		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     60  4039		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     61  403a		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     62  403b		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     63  403c		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     64  403d		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     65  403e		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     66  403f		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     67  4040		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     68  4041		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     69  4042		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     70  4043		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     71  4044		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     72  4045		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     73  4046		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     74  4047		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     75  4048		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     76  4049		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     77  404a		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     78  404b		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     79  404c		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     80  404d		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     81  404e		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     82  404f		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     83  4050		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     84  4051		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     85  4052		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     86  4053		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     87  4054		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     88  4055		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     89  4056		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     90  4057		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     91  4058		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     92  4059		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     93  405a		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     94  405b		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     95  405c		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
     96  405d		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
     97  405e		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
     98  405f		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
     99  4060		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    100  4061		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    101  4062		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    102  4063		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    115  4070		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    116  4071		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    117  4072		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    118  4073		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    119  4074		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    120  4075		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    121  4076		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    122  4077		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    123  4078		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    124  4079		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    125  407a		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    126  407b		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    127  407c		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    128  407d		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    129  407e		       90		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    130  407f		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
      0  4080					      DEF	PIECE_VECTOR_HI
      1  4080				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4080
      3  4080				   PIECE_VECTOR_HI
    132  4080		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    133  4081		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    134  4082		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    135  4083		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    136  4084		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    137  4085		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    138  4086		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    139  4087		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    140  4088		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    141  4089		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    142  408a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    143  408b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    144  408c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    145  408d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    146  408e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    147  408f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    148  4090		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    149  4091		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    150  4092		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    151  4093		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    152  4094		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    153  4095		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    154  4096		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    155  4097		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    156  4098		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    157  4099		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    158  409a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    159  409b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    160  409c		       f6		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    161  409d		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    162  409e		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    163  409f		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    164  40a0		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    165  40a1		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    166  40a2		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    167  40a3		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    168  40a4		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    169  40a5		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    170  40a6		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    171  40a7		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    172  40a8		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    173  40a9		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    174  40aa		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    175  40ab		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    176  40ac		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    177  40ad		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    178  40ae		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    179  40af		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    180  40b0		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    181  40b1		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    182  40b2		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    183  40b3		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    184  40b4		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    185  40b5		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    186  40b6		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    187  40b7		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    188  40b8		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    189  40b9		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    190  40ba		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    191  40bb		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    192  40bc		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    193  40bd		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    194  40be		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    195  40bf		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    196  40c0		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    197  40c1		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    198  40c2		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    199  40c3		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    200  40c4		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    201  40c5		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    202  40c6		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    203  40c7		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    204  40c8		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    205  40c9		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    206  40ca		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    207  40cb		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    208  40cc		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    209  40cd		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    210  40ce		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    211  40cf		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    212  40d0		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    213  40d1		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    214  40d2		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    215  40d3		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    216  40d4		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    217  40d5		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    218  40d6		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    219  40d7		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    224  40dc		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    225  40dd		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    226  40de		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    227  40df		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    228  40e0		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    229  40e1		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    230  40e2		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    231  40e3		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    232  40e4		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    233  40e5		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    234  40e6		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    235  40e7		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    236  40e8		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    237  40e9		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    238  40ea		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    239  40eb		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    240  40ec		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    241  40ed		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    242  40ee		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    243  40ef		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    244  40f0		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    245  40f1		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    246  40f2		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    247  40f3		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    248  40f4		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    249  40f5		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    250  40f6		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    251  40f7		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    252  40f8		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    253  40f9		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    254  40fa		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    255  40fb		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    256  40fc		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    257  40fd		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    258  40fe		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    259  40ff		       f1		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
      0  4100					      DEF	PIECE_VECTOR_BANK
      1  4100				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  4100
      3  4100				   PIECE_VECTOR_BANK
    261  4100		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    262  4101		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    263  4102		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    264  4103		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    265  4104		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    266  4105		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    267  4106		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    268  4107		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    269  4108		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    270  4109		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    271  410a		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    272  410b		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    273  410c		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    274  410d		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    275  410e		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    276  410f		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    277  4110		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    278  4111		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    279  4112		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    280  4113		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    281  4114		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    282  4115		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    283  4116		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    284  4117		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    285  4118		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    286  4119		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    287  411a		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    288  411b		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    289  411c		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    290  411d		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    291  411e		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    292  411f		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    293  4120		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    294  4121		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    295  4122		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    296  4123		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    297  4124		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    298  4125		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    299  4126		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    300  4127		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    301  4128		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    302  4129		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    303  412a		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    304  412b		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    305  412c		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    306  412d		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    307  412e		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    308  412f		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    309  4130		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    310  4131		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    311  4132		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    312  4133		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    313  4134		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    314  4135		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    315  4136		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    316  4137		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    317  4138		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    318  4139		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    319  413a		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    320  413b		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    321  413c		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    322  413d		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    323  413e		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    324  413f		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    325  4140		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    326  4141		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    327  4142		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    328  4143		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    329  4144		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    330  4145		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    331  4146		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    332  4147		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    333  4148		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    334  4149		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    335  414a		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    336  414b		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    337  414c		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    338  414d		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    339  414e		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    340  414f		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    341  4150		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    342  4151		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    343  4152		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    344  4153		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    345  4154		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    346  4155		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    347  4156		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    348  4157		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    349  4158		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    350  4159		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    351  415a		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    352  415b		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    353  415c		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    354  415d		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    355  415e		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    356  415f		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    357  4160		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    358  4161		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    359  4162		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    360  4163		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    361  4164		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    362  4165		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    363  4166		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    364  4167		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    365  4168		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    366  4169		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    367  416a		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    368  416b		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    369  416c		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    370  416d		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    371  416e		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    372  416f		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    373  4170		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    374  4171		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    375  4172		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    376  4173		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    377  4174		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    378  4175		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    379  4176		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    380  4177		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    381  4178		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    382  4179		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    383  417a		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    384  417b		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    385  417c		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    386  417d		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    387  417e		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    388  417f		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    389  4180
    390  4180							; piece index equates...
    391  4180		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    392  4180		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    393  4180		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    394  4180		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    395  4180		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    396  4180		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    397  4180		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    398  4180		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    399  4180		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    400  4180		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    401  4180		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    402  4180		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    403  4180		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    404  4180		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    405  4180		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    406  4180		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    407  4180		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    408  4180		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    409  4180		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    410  4180		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    411  4180		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    412  4180		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    413  4180		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    414  4180		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    415  4180		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    416  4180		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    417  4180		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    418  4180		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    419  4180		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    420  4180		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    421  4180		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    422  4180		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    423  4180		       00 20	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	32
    424  4180		       00 21	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	33
    425  4180		       00 22	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	34
    426  4180		       00 23	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	35
    427  4180		       00 24	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	36
    428  4180		       00 25	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	37
    429  4180		       00 26	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	38
    430  4180		       00 27	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	39
    431  4180		       00 28	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	40
    432  4180		       00 29	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	41
    433  4180		       00 2a	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	42
    434  4180		       00 2b	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	43
    435  4180		       00 2c	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	44
    436  4180		       00 2d	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	45
    437  4180		       00 2e	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	46
    438  4180		       00 2f	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	47
    439  4180		       00 30	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	48
    440  4180		       00 31	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	49
    441  4180		       00 32	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	50
    442  4180		       00 33	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	51
    443  4180		       00 34	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	52
    444  4180		       00 35	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	53
    445  4180		       00 36	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	54
    446  4180		       00 37	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	55
    447  4180		       00 38	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	56
    448  4180		       00 39	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	57
    449  4180		       00 3a	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	58
    450  4180		       00 3b	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	59
    451  4180		       00 3c	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	60
    452  4180		       00 3d	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	61
    453  4180		       00 3e	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	62
    454  4180		       00 3f	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	63
    455  4180		       00 40	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	64
    456  4180		       00 41	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	65
    457  4180		       00 42	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	66
    458  4180		       00 43	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	67
    459  4180		       00 44	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	68
    460  4180		       00 45	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	69
    461  4180		       00 46	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	70
    462  4180		       00 47	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	71
    463  4180		       00 48	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	72
    464  4180		       00 49	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	73
    465  4180		       00 4a	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	74
    466  4180		       00 4b	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	75
    467  4180		       00 4c	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	76
    468  4180		       00 4d	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	77
    469  4180		       00 4e	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	78
    470  4180		       00 4f	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	79
    471  4180		       00 50	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	80
    472  4180		       00 51	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	81
    473  4180		       00 52	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	82
    474  4180		       00 53	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	83
    475  4180		       00 54	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	84
    476  4180		       00 55	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	85
    477  4180		       00 56	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	86
    478  4180		       00 57	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	87
    479  4180		       00 58	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	88
    480  4180		       00 59	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	89
    481  4180		       00 5a	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	90
    482  4180		       00 5b	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	91
    483  4180		       00 5c	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	92
    484  4180		       00 5d	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	93
    485  4180		       00 5e	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	94
    486  4180		       00 5f	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	95
    487  4180		       00 60	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	96
    488  4180		       00 61	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	97
    489  4180		       00 62	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	98
    490  4180		       00 63	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	99
    491  4180		       00 64	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	100
    492  4180		       00 65	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	101
    493  4180		       00 66	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	102
    494  4180		       00 67	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	103
    495  4180		       00 68	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	104
    496  4180		       00 69	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	105
    497  4180		       00 6a	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	106
    498  4180		       00 6b	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	107
    499  4180		       00 6c	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	108
    500  4180		       00 6d	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	109
    501  4180		       00 6e	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	110
    502  4180		       00 6f	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	111
    503  4180		       00 70	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	112
    504  4180		       00 71	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	113
    505  4180		       00 72	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	114
    506  4180		       00 73	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	115
    507  4180		       00 74	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	116
    508  4180		       00 75	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	117
    509  4180		       00 76	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	118
    510  4180		       00 77	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	119
    511  4180		       00 78	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	120
    512  4180		       00 79	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	121
    513  4180		       00 7a	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	122
    514  4180		       00 7b	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	123
    515  4180		       00 7c	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	124
    516  4180		       00 7d	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	125
    517  4180		       00 7e	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	126
    518  4180		       00 7f	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	127
------- FILE BANK_CHESS_INCLUDES.asm
      0  4180					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4180		       01 80	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $180 , FREE= $680
      2  4180					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4180				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4180				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4180				  -	      ERR
      6  4180					      endif
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 2
      0  4180					      include	"BANK_StateMachine.asm"
      1  4180
      2  4180
      0  4180					      NEWBANK	STATEMACHINE
      1  4b17 ????				      SEG	STATEMACHINE
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   STATEMACHINE SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	STATEMACHINE
      4  4800
      5  4800
      6  4800							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
      7  4800
      8  4800		       00 09	   PLAYER     =	RAMBANK_PLY
      9  4800		       00 0a	   OPPONENT   =	PLAYER + 1
     10  4800
     11  4800							;---------------------------------------------------------------------------------------------------
     12  4800
     13  4800		       00 01	   STARTSELECTPIECE =	1
     14  4800
     15  4800		       00 00	   AI_BeginSelectMovePhase =	0
     16  4800		       00 01	   AI_SelectStartSquare =	1
     17  4800		       00 02	   AI_StartSquareSelected =	2
     18  4800		       00 03	   AI_DrawMoves =	3
     19  4800		       00 04	   AI_ShowMoveCaptures =	4
     20  4800		       00 05	   AI_SlowFlash =	5
     21  4800		       00 06	   AI_DrawTargetSquares =	6
     22  4800		       00 07	   AI_SelectDestinationSquare =	7
     23  4800		       00 08	   AI_Quiescent =	8
     24  4800		       00 09	   AI_Halt    =	9
     25  4800		       00 0a	   AI_ReselectDebounce =	10
     26  4800		       00 0b	   AI_SartMoveGen =	11
     27  4800		       00 0c	   AI_StepMoveGen =	12
     28  4800		       00 0d	   AI_LookForCheck =	13
     29  4800							;AI_StartClearBoard		    = 14
     30  4800							;AI_ClearEachRow2		   = 15
     31  4800
     32  4800					      MAC	phase
     33  4800					      lda	#{1}
     34  4800					      sta	aiPhase
     35  4800					      ENDM		;#
     36  4800
     37  4800
     38  4800		       69	   AiVectorLO .byte.b	<aiBeginSelectMovePhase	; 0
     39  4801		       84		      .byte.b	<aiSelectStartSquare	; 1
     40  4802		       f3		      .byte.b	<aiStartSquareSelected	; 2
     41  4803		       15		      .byte.b	<aiDrawMoves	; 3
     42  4804		       6e		      .byte.b	<aiShowMoveCaptures	; 4
     43  4805		       8c		      .byte.b	<aiSlowFlash	; 5
     44  4806		       4c		      .byte.b	<aiDrawTargetSquares	; 6
     45  4807		       eb		      .byte.b	<aiSelectDestinationSquare	; 7
     46  4808		       1e		      .byte.b	<aiQuiescent	; 9
     47  4809		       42		      .byte.b	<aiHalt	; 10
     48  480a		       15		      .byte.b	<aiReselectDebounce	; 11
     49  480b		       2a		      .byte.b	<aiStartMoveGen	; 12
     50  480c		       3c		      .byte.b	<aiStepMoveGen	; 13
     51  480d		       52		      .byte.b	<aiLookForCheck	; 14
     52  480e							;		      .byte <aiStartClearBoard		      ; 15
     53  480e							;		      .byte <aiClearEachRow		      ; 16
     54  480e
     55  480e		       f0	   AiVectorHI .byte.b	>aiBeginSelectMovePhase	; 0
     56  480f		       f0		      .byte.b	>aiSelectStartSquare	; 1
     57  4810		       f0		      .byte.b	>aiStartSquareSelected	; 2
     58  4811		       f1		      .byte.b	>aiDrawMoves	; 3
     59  4812		       f1		      .byte.b	>aiShowMoveCaptures	; 4
     60  4813		       f1		      .byte.b	>aiSlowFlash	; 5
     61  4814		       f1		      .byte.b	>aiDrawTargetSquares	; 6
     62  4815		       f1		      .byte.b	>aiSelectDestinationSquare	; 7
     63  4816		       f2		      .byte.b	>aiQuiescent	; 9
     64  4817		       f2		      .byte.b	>aiHalt	; 10
     65  4818		       f2		      .byte.b	>aiReselectDebounce	; 11
     66  4819		       f0		      .byte.b	>aiStartMoveGen	; 12
     67  481a		       f0		      .byte.b	>aiStepMoveGen	; 13
     68  481b		       f0		      .byte.b	>aiLookForCheck	; 14
     69  481c							;		      .byte >aiStartClearBoard		      ; 15
     70  481c							;		      .byte >aiClearEachRow		      ; 16
     71  481c
     72  481c		       09	   AiVectorBANK .byte.b	BANK_aiBeginSelectMovePhase	; 0
     73  481d		       09		      .byte.b	BANK_aiSelectStartSquare	; 1
     74  481e		       09		      .byte.b	BANK_aiStartSquareSelected	; 2
     75  481f		       09		      .byte.b	BANK_aiDrawMoves	; 3
     76  4820		       09		      .byte.b	BANK_aiShowMoveCaptures	; 4
     77  4821		       09		      .byte.b	BANK_aiSlowFlash	; 5
     78  4822		       09		      .byte.b	BANK_aiDrawTargetSquares	; 6
     79  4823		       09		      .byte.b	BANK_aiSelectDestinationSquare	; 7
     80  4824		       09		      .byte.b	BANK_aiQuiescent	; 9
     81  4825		       09		      .byte.b	BANK_aiHalt	; 10
     82  4826		       09		      .byte.b	BANK_aiReselectDebounce	; 11
     83  4827		       09		      .byte.b	BANK_aiStartMoveGen	; 12
     84  4828		       09		      .byte.b	BANK_aiStepMoveGen	; 13
     85  4829		       09		      .byte.b	BANK_aiLookForCheck	; 14
     86  482a							;		      .byte BANK_aiStartClearBoard	      ; 15
     87  482a							;		      .byte BANK_aiClearEachRow 	      ; 16
     88  482a
     89  482a							;---------------------------------------------------------------------------------------------------
     90  482a
      0  482a					      DEF	aiStartMoveGen
      1  482a				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  482a
      3  482a				   aiStartMoveGen
     92  482a					      SUBROUTINE
     93  482a
     94  482a							; To assist with castling, generate the moves for the opponent, giving us effectively
     95  482a							; a list of squares that are being attacked. The castling can't happen if the king is
     96  482a							; in check or if the squares it would have to move over are in check
     97  482a
     98  482a							; we don't need to worry about this if K has moved, or relevant R has moved or if
     99  482a							; the squares between are occupied. We can tell THAT by examining the movelist to see
    100  482a							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    101  482a
    102  482a		       a9 0a		      lda	#OPPONENT
    103  482c		       85 9c		      sta	currentPly
    104  482e		       20 37 f9 	      jsr	SAFE_InitialiseMoveGeneration
    105  4831
    106  4831		       a5 9e		      lda	sideToMove
    107  4833		       49 80		      eor	#128
    108  4835		       85 9e		      sta	sideToMove	; for movegen to know
    109  4837
      0  4837					      PHASE	AI_StepMoveGen
      1  4837		       a9 0c		      lda	#AI_StepMoveGen
      2  4839		       85 8f		      sta	aiPhase
    111  483b		       60		      rts
    112  483c
    113  483c
    114  483c							;---------------------------------------------------------------------------------------------------
    115  483c
      0  483c					      DEF	aiStepMoveGen
      1  483c				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  483c
      3  483c				   aiStepMoveGen
    117  483c					      SUBROUTINE
    118  483c
    119  483c							; Because we're (possibly) running with the screen on, processing time is very short and
    120  483c							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    121  483c							; this happens over multiple frames.
    122  483c
    123  483c		       20 43 f9 	      jsr	SAFE_GenerateOneMove
    124  483f
    125  483f		       a5 9d		      lda	piecelistIndex
    126  4841		       29 0f		      and	#15
    127  4843		       c9 00		      cmp	#0
    128  4845		       d0 00		      bne	.wait	; still generating
    129  4847
    130  4847		       a5 9e		      lda	sideToMove
    131  4849		       49 80		      eor	#128
    132  484b		       85 9e		      sta	sideToMove
    133  484d
    134  484d
      0  484d					      PHASE	AI_LookForCheck
      1  484d		       a9 0d		      lda	#AI_LookForCheck
      2  484f		       85 8f		      sta	aiPhase
    136  4851		       60	   .wait      rts
    137  4852
    138  4852
    139  4852							;---------------------------------------------------------------------------------------------------
    140  4852
      0  4852					      DEF	aiLookForCheck
      1  4852				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  4852
      3  4852				   aiLookForCheck
    142  4852					      SUBROUTINE
    143  4852
    144  4852							; now we've finished generating the opponent moves
    145  4852							; See if the square our king is on is an attacked square (that is, it appears as a TO
    146  4852							; square in the opponent's movelist)
    147  4852
    148  4852		       20 a1 f9 	      jsr	debug
    149  4855
    150  4855		       a9 09		      lda	#PLAYER
    151  4857		       85 9c		      sta	currentPly
    152  4859		       20 3c fd 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    153  485c		       20 8b fe 	      jsr	SAFE_IsSquareUnderAttack
    154  485f		       90 8b		      bcc	.exit
    155  4861
    156  4861							; king attack found!
    157  4861		       4c 61 f0    kk	      jmp	kk
    158  4864
    159  4864
      0  4864				   .exit      PHASE	AI_BeginSelectMovePhase
      1  4864		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  4866		       85 8f		      sta	aiPhase
    161  4868		       60		      rts
    162  4869
    163  4869							;---------------------------------------------------------------------------------------------------
    164  4869
      0  4869					      DEF	aiBeginSelectMovePhase
      1  4869				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  4869
      3  4869				   aiBeginSelectMovePhase
    166  4869					      SUBROUTINE
    167  4869
    168  4869		       a9 04		      lda	#4
    169  486b		       85 88		      sta	highlight_row
    170  486d		       85 89		      sta	highlight_row+1
    171  486f		       85 8a		      sta	highlight_col
    172  4871		       85 8b		      sta	highlight_col+1
    173  4873
    174  4873		       a9 00		      lda	#0
    175  4875		       85 8c		      sta	mdelay	;?
    176  4877		       85 96		      sta	aiFlashPhase	;?
    177  4879
    178  4879		       a9 ff		      lda	#-1
    179  487b		       85 91		      sta	aiFromSquare
    180  487d		       85 92		      sta	aiToSquare
    181  487f
      0  487f					      PHASE	AI_SelectStartSquare
      1  487f		       a9 01		      lda	#AI_SelectStartSquare
      2  4881		       85 8f		      sta	aiPhase
    183  4883		       60		      rts
    184  4884
    185  4884							;---------------------------------------------------------------------------------------------------
    186  4884
      0  4884					      DEF	aiSelectStartSquare
      1  4884				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  4884
      3  4884				   aiSelectStartSquare
    188  4884					      SUBROUTINE
    189  4884
    190  4884		       20 b1 f1 	      jsr	moveCursor
    191  4887		       20 5d fd 	      jsr	SAFE_IsValidMoveFromSquare
    192  488a
    193  488a		       c6 8d		      dec	ccur	; pulse colour for valid squares
    194  488c		       20 be f0 	      jsr	setCursorColours
    195  488f
    196  488f		       c0 ff		      cpy	#-1
    197  4891		       f0 ff		      beq	.noButton	; illegal square
    198  4893
    199  4893		       a5 96		      lda	aiFlashPhase
    200  4895		       29 01		      and	#1
    201  4897		       d0 01		      bne	.noButton	; prevent EOR-error on flashing selected piece
    202  4899
    203  4899		       a5 4c		      lda	INPT4
    204  489b		       30 4c		      bmi	.noButton
      0  489d					      PHASE	AI_StartSquareSelected
      1  489d		       a9 02		      lda	#AI_StartSquareSelected
      2  489f		       85 8f		      sta	aiPhase
    206  48a1				   .noButton
    207  48a1
    208  48a1		       60		      rts
    209  48a2
    210  48a2							;---------------------------------------------------------------------------------------------------
    211  48a2
      0  48a2					      DEF	setCursorPriority
      1  48a2				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  48a2
      3  48a2				   setCursorPriority
    213  48a2					      SUBROUTINE
    214  48a2
    215  48a2		       98		      tya
    216  48a3		       48		      pha
    217  48a4
    218  48a4					      if	1
    219  48a4
    220  48a4		       a5 88		      lda	highlight_row
    221  48a6		       49 07		      eor	#7
    222  48a8		       0a		      asl
    223  48a9		       0a		      asl
    224  48aa		       0a		      asl
    225  48ab		       05 8a		      ora	highlight_col
    226  48ad		       aa		      tax
    227  48ae
    228  48ae		       20 ee f8 	      jsr	SAFE_Get64toX12Board
    229  48b1		       a2 04		      ldx	#%100
    230  48b3		       c9 00		      cmp	#0
    231  48b5		       d0 00		      bne	.under
    232  48b7		       a2 00		      ldx	#0
    233  48b9		       86 4a	   .under     stx	CTRLPF	; UNDER
    234  48bb					      endif
    235  48bb
    236  48bb		       68		      pla
    237  48bc		       a8		      tay
    238  48bd		       60		      rts
    239  48be
    240  48be							;---------------------------------------------------------------------------------------------------
    241  48be
      0  48be					      DEF	setCursorColours
      1  48be				   BANK_setCursorColours SET	_CURRENT_BANK
      2  48be
      3  48be				   setCursorColours
    243  48be					      SUBROUTINE
    244  48be
    245  48be							; pass y=-1 if move is NOT in the movelist
    246  48be							; preserve y
    247  48be
    248  48be		       a9 44		      lda	#$44
    249  48c0
    250  48c0		       c0 ff		      cpy	#-1
    251  48c2		       f0 ff		      beq	.writeCursorCol	; NOT in the movelist
    252  48c4
    253  48c4		       a5 8d		      lda	ccur
    254  48c6		       4a		      lsr
    255  48c7		       4a		      lsr
    256  48c8		       4a		      lsr
    257  48c9		       29 04		      and	#4
    258  48cb		       49 ff		      eor	#$FF
    259  48cd		       38		      sec
    260  48ce		       69 a6		      adc	#COLOUR_LINE_1
    261  48d0
    262  48d0		       85 46	   .writeCursorCol sta	COLUP0
    263  48d2		       60		      rts
    264  48d3
    265  48d3
      0  48d3					      OPTIONAL_PAGEBREAK	"Joystik Tables", 32
     10  48d3					      LIST	ON
    267  48d3
    268  48d3							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
    269  48d3							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    270  48d3		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
    271  48e3		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
    272  48f3
    273  48f3							;---------------------------------------------------------------------------------------------------
    274  48f3
      0  48f3					      DEF	aiStartSquareSelected
      1  48f3				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  48f3
      3  48f3				   aiStartSquareSelected
    276  48f3					      SUBROUTINE
    277  48f3
    278  48f3							; Mark all the valid moves for the selected piece on the board
    279  48f3							; and then start pulsing the piece
    280  48f3							; AND start choosing for selection of TO square
    281  48f3
    282  48f3
    283  48f3
    284  48f3							; Iterate the movelist and for all from squares which = drawPieceNumber
    285  48f3							; then draw a BLANK at that square
    286  48f3							; do 1 by one, when none found then increment state
    287  48f3
    288  48f3		       a5 88		      lda	highlight_row
    289  48f5		       49 07		      eor	#7
    290  48f7		       0a		      asl
    291  48f8		       0a		      asl
    292  48f9		       0a		      asl
    293  48fa		       05 8a		      ora	highlight_col
    294  48fc		       85 80		      sta	drawPieceNumber
    295  48fe
    296  48fe		       a9 0a		      lda	#10
    297  4900		       85 90		      sta	aiFlashDelay
    298  4902		       a9 00		      lda	#0
    299  4904		       85 92		      sta	aiToSquare
    300  4906		       85 96		      sta	aiFlashPhase	; for debounce exit timing
    301  4908
    302  4908		       a9 ff		      lda	#-1
    303  490a		       85 95		      sta	aiMoveIndex
    304  490c
    305  490c		       a9 0f		      lda	#15
    306  490e		       85 8c		      sta	mdelay	; hold-down delay before moves are shown
    307  4910
      0  4910					      PHASE	AI_DrawMoves
      1  4910		       a9 03		      lda	#AI_DrawMoves
      2  4912		       85 8f		      sta	aiPhase
    309  4914		       60		      rts
    310  4915
    311  4915							;---------------------------------------------------------------------------------------------------
    312  4915
      0  4915					      DEF	aiDrawMoves
      1  4915				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  4915
      3  4915				   aiDrawMoves
    314  4915					      SUBROUTINE
    315  4915
    316  4915
    317  4915		       c6 8d		      dec	ccur
    318  4917		       20 be f0 	      jsr	setCursorColours
    319  491a
    320  491a		       c6 8c		      dec	mdelay
    321  491c		       d0 8c		      bne	.exit
    322  491e		       a9 01		      lda	#1
    323  4920		       85 8c		      sta	mdelay	; once triggered, runs always
    324  4922
    325  4922
    326  4922		       a5 95		      lda	aiMoveIndex
    327  4924		       10 95		      bpl	.valid
    328  4926
    329  4926		       20 4c fe 	      jsr	SAFE_getMoveIndex
    330  4929		       85 95		      sta	aiMoveIndex
    331  492b
    332  492b		       20 58 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    333  492e		       a5 95		      lda	aiMoveIndex
    334  4930		       10 95		      bpl	.unsure	; still drawing in this phase
    335  4932
    336  4932		       a9 08		      lda	#CAP_SPEED
    337  4934		       85 8c		      sta	mdelay
    338  4936
    339  4936		       a9 00		      lda	#0
    340  4938		       85 96		      sta	aiFlashPhase	; controls odd/even exit of flashing
    341  493a
      0  493a					      PHASE	AI_ShowMoveCaptures
      1  493a		       a9 04		      lda	#AI_ShowMoveCaptures
      2  493c		       85 8f		      sta	aiPhase
    343  493e		       60		      rts
    344  493f
    345  493f				   .exit
    346  493f
    347  493f							; Initial piece selection has happened, but the button hasn't been released yet
    348  493f							; AND we're still in the waiting phase to see if the button was held long enough for move show
    349  493f
    350  493f		       a5 4c		      lda	INPT4
    351  4941		       10 4c		      bpl	.unsure	; button still pressed, so still unsure what to do
    352  4943
    353  4943							; Aha! Button released, so we know the selected piece and can start flashing it
    354  4943							; and allowing movement of the selector to a destination square...
    355  4943
    356  4943		       a9 00		      lda	#0*4
    357  4945		       85 8d		      sta	ccur	; bright green square for selection
    358  4947
      0  4947					      PHASE	AI_SelectDestinationSquare
      1  4947		       a9 07		      lda	#AI_SelectDestinationSquare
      2  4949		       85 8f		      sta	aiPhase
    360  494b
    361  494b		       60	   .unsure    rts
    362  494c
    363  494c							;---------------------------------------------------------------------------------------------------
    364  494c
      0  494c					      DEF	aiDrawTargetSquares
      1  494c				   BANK_aiDrawTargetSquares SET	_CURRENT_BANK
      2  494c
      3  494c				   aiDrawTargetSquares
    366  494c					      SUBROUTINE
    367  494c
    368  494c		       c6 8d		      dec	ccur
    369  494e		       20 be f0 	      jsr	setCursorColours
    370  4951
    371  4951		       c6 8c		      dec	mdelay
    372  4953		       d0 8c		      bne	.exit
    373  4955		       a9 01		      lda	#1
    374  4957		       85 8c		      sta	mdelay	; once triggered, runs always
    375  4959
    376  4959		       a5 95		      lda	aiMoveIndex
    377  495b		       10 95		      bpl	.valid
    378  495d
    379  495d		       20 4c fe 	      jsr	SAFE_getMoveIndex
    380  4960		       85 95		      sta	aiMoveIndex
    381  4962
    382  4962		       20 58 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    383  4965		       a5 95		      lda	aiMoveIndex
    384  4967		       10 95		      bpl	.exit	; still drawing in this phase
    385  4969
      0  4969					      PHASE	AI_SelectStartSquare
      1  4969		       a9 01		      lda	#AI_SelectStartSquare
      2  496b		       85 8f		      sta	aiPhase
    387  496d
    388  496d		       60	   .exit      rts
    389  496e
    390  496e							;---------------------------------------------------------------------------------------------------
    391  496e
    392  496e		       00 08	   CAP_SPEED  =	8
    393  496e
      0  496e					      DEF	aiShowMoveCaptures
      1  496e				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  496e
      3  496e				   aiShowMoveCaptures
    395  496e					      SUBROUTINE
    396  496e
    397  496e							; draw/undraw ALL captured pieces
    398  496e							; we should do this an even number of times so that pieces don't disappEOR
    399  496e
    400  496e		       c6 8d		      dec	ccur
    401  4970		       20 be f0 	      jsr	setCursorColours
    402  4973
    403  4973		       c6 8c		      dec	mdelay	; flash speed UNVARYING despite draw happening
    404  4975
    405  4975		       a5 95		      lda	aiMoveIndex
    406  4977		       10 95		      bpl	.valid	; guaranteed -1 on 1st call
    407  4979		       20 4c fe 	      jsr	SAFE_getMoveIndex
    408  497c		       85 95		      sta	aiMoveIndex
    409  497e
    410  497e				   .valid		;lda INTIM
    411  497e							;cmp #22
    412  497e							;bcc .exit		     ; try to prevent time overflows
    413  497e
    414  497e		       20 97 fe 	      jsr	SAFE_showMoveCaptures
    415  4981		       a5 95		      lda	aiMoveIndex
    416  4983		       10 95		      bpl	.exit
    417  4985
    418  4985		       e6 96		      inc	aiFlashPhase
    419  4987
      0  4987					      PHASE	AI_SlowFlash
      1  4987		       a9 05		      lda	#AI_SlowFlash
      2  4989		       85 8f		      sta	aiPhase
    421  498b
    422  498b		       60	   .exit      rts
    423  498c
    424  498c							;---------------------------------------------------------------------------------------------------
    425  498c
      0  498c					      DEF	aiSlowFlash
      1  498c				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  498c
      3  498c				   aiSlowFlash
    427  498c					      SUBROUTINE
    428  498c
    429  498c							; Joystick button is held down, so we're displaying the available moves
    430  498c							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    431  498c
    432  498c		       c6 8d		      dec	ccur
    433  498e		       20 be f0 	      jsr	setCursorColours
    434  4991
    435  4991		       a5 96		      lda	aiFlashPhase
    436  4993		       29 01		      and	#1
    437  4995		       d0 01		      bne	.notEven	; only exit after even # EOR-draws
    438  4997
    439  4997		       a5 4c		      lda	INPT4
    440  4999		       30 4c		      bmi	.butpress	; exit on button release
    441  499b
    442  499b				   .notEven
    443  499b
    444  499b							; Wait for delay to expire then back and flash 'em again
    445  499b
    446  499b		       c6 8c		      dec	mdelay
    447  499d		       10 8c		      bpl	.slowWait
    448  499f
    449  499f		       a9 08		      lda	#CAP_SPEED
    450  49a1		       85 8c		      sta	mdelay
    451  49a3
      0  49a3					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  49a3		       a9 04		      lda	#AI_ShowMoveCaptures
      2  49a5		       85 8f		      sta	aiPhase
    453  49a7
    454  49a7		       60	   .slowWait  rts
    455  49a8
    456  49a8
    457  49a8		       a9 01	   .butpress  lda	#1
    458  49aa		       85 8c		      sta	mdelay
    459  49ac
      0  49ac					      PHASE	AI_DrawTargetSquares
      1  49ac		       a9 06		      lda	#AI_DrawTargetSquares
      2  49ae		       85 8f		      sta	aiPhase
    461  49b0		       60		      rts
    462  49b1
    463  49b1
    464  49b1							;---------------------------------------------------------------------------------------------------
    465  49b1
      0  49b1					      DEF	moveCursor
      1  49b1				   BANK_moveCursor SET	_CURRENT_BANK
      2  49b1
      3  49b1				   moveCursor
    467  49b1					      SUBROUTINE
    468  49b1
    469  49b1							; Part (a) move cursor around the board waiting for joystick press
    470  49b1
    471  49b1		       c6 8c		      dec	mdelay
    472  49b3		       10 8c		      bpl	.delaym
    473  49b5
    474  49b5		       ad 80 02 	      lda	SWCHA
    475  49b8		       4a		      lsr
    476  49b9		       4a		      lsr
    477  49ba		       4a		      lsr
    478  49bb		       4a		      lsr
    479  49bc		       a8		      tay
    480  49bd
    481  49bd		       18		      clc
    482  49be		       a5 88		      lda	highlight_row
    483  49c0		       79 e3 f0 	      adc	JoyMoveY,y
    484  49c3		       c9 08		      cmp	#$8
    485  49c5		       b0 08		      bcs	.abandon
    486  49c7		       85 88		      sta	highlight_row
    487  49c9				   .abandon
    488  49c9		       18		      clc
    489  49ca		       a5 8a		      lda	highlight_col
    490  49cc		       79 d3 f0 	      adc	JoyMoveX,y
    491  49cf		       c9 08		      cmp	#$8
    492  49d1		       b0 08		      bcs	.abandon2
    493  49d3		       85 8a		      sta	highlight_col
    494  49d5				   .abandon2
    495  49d5
    496  49d5		       a9 05		      lda	#5
    497  49d7		       85 8c		      sta	mdelay
    498  49d9
    499  49d9		       20 a2 f0 	      jsr	setCursorPriority
    500  49dc
    501  49dc
    502  49dc		       60	   .delaym    rts
    503  49dd
    504  49dd
    505  49dd							;---------------------------------------------------------------------------------------------------
    506  49dd
      0  49dd					      DEF	FlashPiece
      1  49dd				   BANK_FlashPiece SET	_CURRENT_BANK
      2  49dd
      3  49dd				   FlashPiece
    508  49dd					      SUBROUTINE
    509  49dd
    510  49dd							; Flash the selected piece
    511  49dd
    512  49dd		       c6 90		      dec	aiFlashDelay
    513  49df		       d0 90		      bne	.noFlashAi
    514  49e1
    515  49e1		       e6 96		      inc	aiFlashPhase
    516  49e3
    517  49e3		       a9 0a		      lda	#10
    518  49e5		       85 90		      sta	aiFlashDelay
    519  49e7
    520  49e7		       20 de fd 	      jsr	SAFE_CopySinglePiece
    521  49ea
    522  49ea		       60	   .noFlashAi rts
    523  49eb
    524  49eb							;---------------------------------------------------------------------------------------------------
    525  49eb
      0  49eb					      DEF	aiSelectDestinationSquare
      1  49eb				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  49eb
      3  49eb				   aiSelectDestinationSquare
    527  49eb					      SUBROUTINE
    528  49eb
    529  49eb							; Piece is selected and now we're looking for a button press on a destination square
    530  49eb							; we flash the piece on-and-off while we're doing that
    531  49eb
    532  49eb		       20 dd f1 	      jsr	FlashPiece
    533  49ee		       20 b1 f1 	      jsr	moveCursor
    534  49f1		       20 84 fd 	      jsr	SAFE_IsValidMoveToSquare
    535  49f4		       20 be f0 	      jsr	setCursorColours
    536  49f7
    537  49f7							; y = valid square
    538  49f7
    539  49f7		       a5 96		      lda	aiFlashPhase
    540  49f9		       29 01		      and	#1
    541  49fb		       d0 01		      bne	.noButton	; prevent EOR-error on flashing selected piece
    542  49fd
    543  49fd		       a5 4c		      lda	INPT4
    544  49ff		       30 4c		      bmi	.noButton
    545  4a01
    546  4a01		       c0 ff		      cpy	#-1
    547  4a03		       d0 ff		      bne	.done	; valid square
    548  4a05
    549  4a05		       a5 92		      lda	aiToSquare
    550  4a07		       c5 91		      cmp	aiFromSquare	; is to==from?  that's a cancelllation
    551  4a09		       d0 91		      bne	.noButton	; no, so it's an INVALID square
    552  4a0b
      0  4a0b					      PHASE	AI_ReselectDebounce
      1  4a0b		       a9 0a		      lda	#AI_ReselectDebounce
      2  4a0d		       85 8f		      sta	aiPhase
    554  4a0f		       60		      rts
    555  4a10
      0  4a10				   .done      PHASE	AI_Quiescent	; destination selected!
      1  4a10		       a9 08		      lda	#AI_Quiescent
      2  4a12		       85 8f		      sta	aiPhase
    557  4a14
    558  4a14		       60	   .noButton  rts
    559  4a15
    560  4a15
    561  4a15							;---------------------------------------------------------------------------------------------------
    562  4a15
      0  4a15					      DEF	aiReselectDebounce
      1  4a15				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  4a15
      3  4a15				   aiReselectDebounce
    564  4a15					      SUBROUTINE
    565  4a15
    566  4a15							; We've just cancelled the move. Wait for the button to be released
    567  4a15							; and then go back to selecting a piece to move
    568  4a15
    569  4a15		       a5 4c		      lda	INPT4
    570  4a17		       10 4c		      bpl	.exit	; button still pressed, so wait
    571  4a19
      0  4a19					      PHASE	AI_SelectStartSquare
      1  4a19		       a9 01		      lda	#AI_SelectStartSquare
      2  4a1b		       85 8f		      sta	aiPhase
    573  4a1d		       60	   .exit      rts
    574  4a1e
    575  4a1e							;---------------------------------------------------------------------------------------------------
    576  4a1e
      0  4a1e					      DEF	aiQuiescent
      1  4a1e				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  4a1e
      3  4a1e				   aiQuiescent
    578  4a1e					      SUBROUTINE
    579  4a1e
    580  4a1e		       a9 ff		      lda	#-1
    581  4a20		       85 88		      sta	highlight_row	;??? piece move error when removed...???!
    582  4a22
    583  4a22		       a5 91		      lda	aiFromSquare
    584  4a24		       85 9f		      sta	fromSquare
    585  4a26		       a5 92		      lda	aiToSquare
    586  4a28		       85 a1		      sta	toSquare
    587  4a2a
    588  4a2a		       a5 93		      lda	aiFromSquareX12
    589  4a2c		       85 86		      sta	fromX12
    590  4a2e		       a5 94		      lda	aiToSquareX12
    591  4a30		       85 87		      sta	toX12
    592  4a32
    593  4a32		       20 78 fd 	      jsr	SAFE_GetPiece
    594  4a35
    595  4a35		       a5 a6		      lda	aiPiece
    596  4a37		       85 a0		      sta	fromPiece
    597  4a39		       09 40		      ora	#FLAG_MOVED	; for K/R prevents usage in castling
    598  4a3b		       85 a2		      sta	toPiece
    599  4a3d
      0  4a3d					      PHASE	AI_Halt
      1  4a3d		       a9 09		      lda	#AI_Halt
      2  4a3f		       85 8f		      sta	aiPhase
    601  4a41		       60		      rts
    602  4a42
    603  4a42							;---------------------------------------------------------------------------------------------------
    604  4a42
      0  4a42					      DEF	aiHalt
      1  4a42				   BANK_aiHalt SET	_CURRENT_BANK
      2  4a42
      3  4a42				   aiHalt
    606  4a42					      SUBROUTINE
    607  4a42
    608  4a42							; Effectively halt at this point until the other state machine resets the AI state machine
    609  4a42
    610  4a42		       60		      rts
    611  4a43
    612  4a43							;---------------------------------------------------------------------------------------------------
    613  4a43
    614  4a43							;    align 256
      0  4a43					      DEF	PositionSprites
      1  4a43				   BANK_PositionSprites SET	_CURRENT_BANK
      2  4a43
      3  4a43				   PositionSprites
    616  4a43					      SUBROUTINE
    617  4a43
    618  4a43		       a4 8a		      ldy	highlight_col
    619  4a45
    620  4a45		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    621  4a47
    622  4a47		       b9 0f f3 	      lda	colToPixel,y
    623  4a4a
    624  4a4a		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    625  4a4b		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    626  4a4d		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    627  4a4f
    628  4a4f		       a8		      tay
    629  4a50		       b9 0f f2 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    630  4a53		       85 60		      sta	HMP0
    631  4a55		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    632  4a57
    633  4a57		       85 42		      sta	WSYNC
    634  4a59		       85 6a		      sta	HMOVE
    635  4a5b
    636  4a5b		       60		      rts
    637  4a5c
    638  4a5c							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    639  4a5c							; fine adjustment value. This table is on a page boundary to guarantee the processor
    640  4a5c							; will cross a page boundary and waste a cycle in order to be at the precise position
    641  4a5c							; for a RESP0,x write
    642  4a5c
    643  4a5c
    644  4b00		       00 00 00 00*	      align	256
    645  4b00
    646  4b00				   fineAdjustBegin
    647  4b00
    648  4b00		       70		      DC.B	%01110000	; Left 7
    649  4b01		       60		      DC.B	%01100000	; Left 6
    650  4b02		       50		      DC.B	%01010000	; Left 5
    651  4b03		       40		      DC.B	%01000000	; Left 4
    652  4b04		       30		      DC.B	%00110000	; Left 3
    653  4b05		       20		      DC.B	%00100000	; Left 2
    654  4b06		       10		      DC.B	%00010000	; Left 1
    655  4b07		       00		      DC.B	%00000000	; No movement.
    656  4b08		       f0		      DC.B	%11110000	; Right 1
    657  4b09		       e0		      DC.B	%11100000	; Right 2
    658  4b0a		       d0		      DC.B	%11010000	; Right 3
    659  4b0b		       c0		      DC.B	%11000000	; Right 4
    660  4b0c		       b0		      DC.B	%10110000	; Right 5
    661  4b0d		       a0		      DC.B	%10100000	; Right 6
    662  4b0e		       90		      DC.B	%10010000	; Right 7
    663  4b0f
    664  4b0f		       f2 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    665  4b0f
    666  4b0f
      0  4b0f					      OPTIONAL_PAGEBREAK	"colToPixel", 8
     10  4b0f					      LIST	ON
    668  4b0f		       00 14 28 3c*colToPixel .byte.b	0,20,40,60,80,100,120,140
    669  4b17
      0  4b17					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  4b17		       03 17	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $317 , FREE= $4e9
      2  4b17					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4b17				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4b17				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4b17				  -	      ERR
      6  4b17					      endif
    671  4b17
    672  4b17
    673  4b17							; EOF
------- FILE ./chess.asm
    357  4b17
------- FILE titleScreen.asm LEVEL 2 PASS 2
      0  4b17					      include	"titleScreen.asm"
      0  4b17					      NEWBANK	TITLESCREEN
      1  57c0 ????				      SEG	TITLESCREEN
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   TITLESCREEN SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	TITLESCREEN
      2  5000
      3  5000				   OverscanTime2
      4  5000		       1a 1a		      .byte.b	26, 26
      5  5002		       20 20		      .byte.b	32, 32
      6  5004
      7  5004				   colvec
      8  5004		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  5008
     10  5008
     11  5008		       32 32	   VBlankTime .byte.b	50,50
     12  500a
      0  500a					      DEF	TitleScreen
      1  500a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  500a
      3  500a				   TitleScreen
     14  500a
     15  500a							; Start of new frame
     16  500a
     17  500a							; Start of vertical blank processing
     18  500a
     19  500a				   TitleSequence
     20  500a
     21  500a		       a9 00		      lda	#%00000000
     22  500c		       85 4a		      sta	CTRLPF
     23  500e		       85 49		      sta	COLUBK
     24  5010
     25  5010		       a2 00		      ldx	#0	;Platform
     26  5012		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  5014		       85 a7		      sta	__colour_table
     28  5016		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     29  5018		       85 a8		      sta	__colour_table+1
     30  501a
     31  501a							;		  sta rndHi
     32  501a							;		  sta rnd
     33  501a
     34  501a
     35  501a				  -	      if	0
     36  501a				  -	      lda	#0
     37  501a				  -	      sta	digit
     38  501a				  -	      lda	#$10
     39  501a				  -	      sta	digit+1
     40  501a				  -	      lda	#$20
     41  501a				  -	      sta	digit+2
     42  501a					      endif
     43  501a
     44  501a
     45  501a
     46  501a
      0  501a					      RESYNC
      1  501a
      2  501a		       a9 02		      lda	#%10
      3  501c		       85 41		      sta	VBLANK
      4  501e
      5  501e		       a2 08		      ldx	#8
      6  5020				   .loopResync
      0  5020					      VERTICAL_SYNC
      1  5020		       a9 0e		      lda	#%1110
      2  5022		       85 42	   .VSLP1     sta	WSYNC
      3  5024		       85 40		      sta	VSYNC
      4  5026		       4a		      lsr
      5  5027		       d0 f9		      bne	.VSLP1
      8  5029
      9  5029		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  502b		       a5 a5		      lda	Platform
     11  502d		       49 02		      eor	#PAL_50
     12  502f		       d0 02		      bne	.ntsc
     13  5031		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  5033				   .ntsc
     15  5033				   .loopWait
     16  5033		       85 42		      sta	WSYNC
     17  5035		       85 42		      sta	WSYNC
     18  5037		       88		      dey
     19  5038		       d0 f9		      bne	.loopWait
     20  503a		       ca		      dex
     21  503b		       d0 e3		      bne	.loopResync
     48  503d
     49  503d				   RestartFrame0
     50  503d
     51  503d				  -	      if	0
     52  503d				  -	      ldx	#2
     53  503d				  -rollcols   clc
     54  503d				  -	      lda	digit+2
     55  503d				  -	      adc	#$10
     56  503d				  -	      sta	digit+2
     57  503d				  -	      bcc	finxc
     58  503d				  -	      dex
     59  503d				  -	      bpl	rollcols
     60  503d				  -finxc
     61  503d					      endif
     62  503d
      0  503d					      DEF	RestartFrame
      1  503d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  503d
      3  503d				   RestartFrame
     64  503d		       a9 00		      LDA	#0
     65  503f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  5041		       85 42	   .loopVSync2 sta	WSYNC
     67  5043		       85 40		      sta	VSYNC
     68  5045		       4a		      lsr
     69  5046		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  5048
     71  5048							;------------------------------------------------------------------
     72  5048
     73  5048		       a6 a5		      ldx	Platform
     74  504a		       bc 08 f0 	      ldy	VBlankTime,x
     75  504d		       8c 96 02 	      sty	TIM64T
     76  5050
     77  5050
     78  5050				  -	      if	0
     79  5050				  -	      lda	SWCHB
     80  5050				  -	      rol
     81  5050				  -	      rol
     82  5050				  -	      rol
     83  5050				  -	      and	#%11
     84  5050				  -	      eor	#PAL
     85  5050				  -	      cmp	Platform
     86  5050				  -	      beq	platOK
     87  5050				  -	      sta	Platform
     88  5050				  -	      jmp	TitleSequence
     89  5050				  -platOK
     90  5050					      endif
     91  5050
     92  5050		       e6 81	   k2	      inc	rnd
     93  5052		       f0 fc		      beq	k2
     94  5054
     95  5054
     96  5054		       85 42	   VerticalBlank sta	WSYNC
     97  5056		       ad 84 02 	      lda	INTIM
     98  5059		       d0 f9		      bne	VerticalBlank
     99  505b		       85 41		      sta	VBLANK
    100  505d
    101  505d							;sta COLUBK
    102  505d
    103  505d							;------------------------------------------------------------------
    104  505d
    105  505d							; Do X scanlines of color-changing (our picture)
    106  505d
    107  505d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  505f		       a2 03	   SokoLogo   ldx	#3
    109  5061		       b1 a7	   triplet    lda	(__colour_table),y
    110  5063							;    eor digit-1,x
    111  5063		       85 42		      sta	WSYNC
    112  5065		       85 48		      sta	COLUPF	; 3
    113  5067
    114  5067		       b9 b0 f2 	      lda	COL_0,y	; 5
    115  506a		       85 4d		      sta	PF0	; 3   @11
    116  506c		       b9 88 f3 	      lda	COL_1,y	; 5
    117  506f		       85 4e		      sta	PF1	; 3   @19
    118  5071		       b9 60 f4 	      lda	COL_2,y	; 5
    119  5074		       85 4f		      sta	PF2	; 3   @27
    120  5076
    121  5076		       b9 38 f5 	      lda	COL_3,y	; 5
    122  5079		       85 4d		      sta	PF0	; 3   @35
      0  507b					      SLEEP	2	; @37
      1  507b				   .CYCLES    SET	2
      2  507b
      3  507b				  -	      IF	.CYCLES < 2
      4  507b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  507b				  -	      ERR
      6  507b					      ENDIF
      7  507b
      8  507b				  -	      IF	.CYCLES & 1
      9  507b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  507b				  -	      nop	0
     11  507b				  -	      ELSE
     12  507b				  -	      bit	VSYNC
     13  507b				  -	      ENDIF
     14  507b				  -.CYCLES    SET	.CYCLES - 3
     15  507b					      ENDIF
     16  507b
     17  507b					      REPEAT	.CYCLES / 2
     18  507b		       ea		      nop
     19  507c					      REPEND
    124  507c		       b9 10 f6 	      lda	COL_4,y	; 5
    125  507f		       85 4e		      sta	PF1	; 3   @45
      0  5081					      SLEEP	3	; @45
      1  5081				   .CYCLES    SET	3
      2  5081
      3  5081				  -	      IF	.CYCLES < 2
      4  5081				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  5081				  -	      ERR
      6  5081					      ENDIF
      7  5081
      8  5081					      IF	.CYCLES & 1
      9  5081					      IFNCONST	NO_ILLEGAL_OPCODES
     10  5081		       04 00		      nop	0
     11  5083				  -	      ELSE
     12  5083				  -	      bit	VSYNC
     13  5083					      ENDIF
     14  5083				   .CYCLES    SET	.CYCLES - 3
     15  5083					      ENDIF
     16  5083
     17  5083				  -	      REPEAT	.CYCLES / 2
     18  5083				  -	      nop
     19  5083					      REPEND
    127  5083		       b9 e8 f6 	      lda	COL_5,y	; 5
    128  5086		       85 4f		      sta	PF2	; 3
    129  5088
    130  5088		       88		      dey		; 2
    131  5089		       ca		      dex		; 2
    132  508a		       d0 d5		      bne	triplet	; 2(3)
    133  508c
    134  508c		       c0 ff		      cpy	#-1	; 2
    135  508e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  5090
    137  5090							;lda #0
    138  5090							;sta PF0
    139  5090							;sta PF1
    140  5090							;sta PF2
    141  5090
    142  5090		       a6 a5		      ldx	Platform
    143  5092		       bd 00 f0 	      lda	OverscanTime2,x
    144  5095		       8d 96 02 	      sta	TIM64T
    145  5098
    146  5098				  -	      if	0
    147  5098				  -	      sta	WSYNC
    148  5098				  -	      sta	WSYNC
    149  5098				  -	      sta	WSYNC
    150  5098				  -	      sta	WSYNC
    151  5098				  -	      sta	WSYNC
    152  5098				  -	      SLEEP	8
    153  5098				  -	      jsr	SokoScreen
    154  5098				  -
    155  5098				  -	      lda	#0
    156  5098				  -	      sta	BoardScrollX
    157  5098				  -	      sta	BoardScrollY
    158  5098					      endif
    159  5098
    160  5098							;		ldy #63
    161  5098							;bot2		 sta WSYNC
    162  5098							;		dey
    163  5098							;		bpl bot2
    164  5098
    165  5098							;--------------------------------------------------------------------------
    166  5098
    167  5098		       a9 00		      lda	#0
    168  509a		       85 4d		      sta	PF0
    169  509c		       85 4e		      sta	PF1
    170  509e		       85 4f		      sta	PF2
    171  50a0
    172  50a0
      0  50a0					      NEXT_RANDOM
      1  50a0		       a5 81		      lda	rnd
      2  50a2		       4a		      lsr
      3  50a3		       90 81		      bcc	.skipEOR
      4  50a5		       49 fe		      eor	#RND_EOR_VAL
      5  50a7		       85 81	   .skipEOR   sta	rnd
    174  50a9
    175  50a9							; D1 VBLANK turns off beam
    176  50a9							; It needs to be turned on 37 scanlines later
    177  50a9
    178  50a9				   oscan
    179  50a9		       ad 84 02 	      lda	INTIM
    180  50ac		       d0 fb		      bne	oscan
    181  50ae
    182  50ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  50b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  50b2
    185  50b2				  -	      if	0
    186  50b2				  -	      inc	rnd
    187  50b2				  -	      bne	rdd
    188  50b2				  -	      inc	rndHi
    189  50b2				  -rdd
    190  50b2				  -
    191  50b2				  -	      dec	digitick
    192  50b2				  -	      bpl	ret2
    193  50b2				  -	      lda	#40
    194  50b2				  -	      sta	digitick
    195  50b2				  -
    196  50b2				  -	      jsr	Random
    197  50b2				  -	      and	#3
    198  50b2				  -	      beq	ret2
    199  50b2				  -	      tax
    200  50b2				  -	      jsr	Random
    201  50b2				  -	      and	#$F0
    202  50b2				  -	      sta	digit-1,x
    203  50b2				  -	      jmp	RestartFrame0
    204  50b2				  -
    205  50b2				  -ret2
    206  50b2					      endif
    207  50b2
    208  50b2
    209  50b2		       a5 4c		      lda	INPT4
    210  50b4		       10 03		      bpl	ret
    211  50b6
    212  50b6		       4c 3d f0 	      jmp	RestartFrame
    213  50b9
    214  50b9				   ret
    215  50b9		       60		      rts
    216  50ba
    217  50ba
    218  50ba
    219  50ba					      MAC	lumtable
    220  50ba							; {4} MIN LUM 1
    221  50ba							; {5} MIN LUM 2
    222  50ba							; {6} MIN LUM 3
    223  50ba
    224  50ba				   .LUM1      SET	{4}*256
    225  50ba				   .LUM2      SET	{5}*256
    226  50ba				   .LUM3      SET	{6}*256
    227  50ba
    228  50ba				   .STEP1     =	(256*({7}-{4}))/72
    229  50ba				   .STEP2     =	(256*({8}-{5}))/72
    230  50ba				   .STEP3     =	(256*({9}-{6}))/72
    231  50ba
    232  50ba					      REPEAT	72
    233  50ba					      .byte	{1}+(.LUM1/256)
    234  50ba					      .byte	{2}+(.LUM2/256)
    235  50ba					      .byte	{3}+(.LUM3/256)
    236  50ba
    237  50ba							;    ECHO {1}+(.LUM1/256)
    238  50ba							;    ECHO {2}+(.LUM1/256)
    239  50ba							;    ECHO {3}+(.LUM1/256)
    240  50ba
    241  50ba				   .LUM1      SET	.LUM1 + .STEP1
    242  50ba				   .LUM2      SET	.LUM2 + .STEP2
    243  50ba				   .LUM3      SET	.LUM3 + .STEP3
    244  50ba					      REPEND
    245  50ba					      ENDM		;{1}{2}{3} base colours
    246  50ba
    247  50ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  50ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  50ba
    250  5100		       00 00 00 00*	      align	256
    251  5100							;    ECHO "NTSC LUMS"
    252  5100				   colr_ntsc2
      0  5100					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  5100
      2  5100
      3  5100
      4  5100
      5  5100				   .LUM1      SET	$4*256
      6  5100				   .LUM2      SET	$6*256
      7  5100				   .LUM3      SET	$8*256
      8  5100
      9  5100		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  5100		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  5100		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  5100
     13  5100					      REPEAT	72
     14  5100		       44		      .byte.b	$40+(.LUM1/256)
     15  5101		       26		      .byte.b	$20+(.LUM2/256)
     16  5102		       98		      .byte.b	$90+(.LUM3/256)
     17  5103
     18  5103
     19  5103
     20  5103
     21  5103
     22  5103				   .LUM1      SET	.LUM1 + .STEP1
     23  5103				   .LUM2      SET	.LUM2 + .STEP2
     24  5103				   .LUM3      SET	.LUM3 + .STEP3
     13  5103					      REPEND
     14  5103		       44		      .byte.b	$40+(.LUM1/256)
     15  5104		       26		      .byte.b	$20+(.LUM2/256)
     16  5105		       98		      .byte.b	$90+(.LUM3/256)
     17  5106
     18  5106
     19  5106
     20  5106
     21  5106
     22  5106				   .LUM1      SET	.LUM1 + .STEP1
     23  5106				   .LUM2      SET	.LUM2 + .STEP2
     24  5106				   .LUM3      SET	.LUM3 + .STEP3
     13  5106					      REPEND
     14  5106		       44		      .byte.b	$40+(.LUM1/256)
     15  5107		       26		      .byte.b	$20+(.LUM2/256)
     16  5108		       98		      .byte.b	$90+(.LUM3/256)
     17  5109
     18  5109
     19  5109
     20  5109
     21  5109
     22  5109				   .LUM1      SET	.LUM1 + .STEP1
     23  5109				   .LUM2      SET	.LUM2 + .STEP2
     24  5109				   .LUM3      SET	.LUM3 + .STEP3
     13  5109					      REPEND
     14  5109		       44		      .byte.b	$40+(.LUM1/256)
     15  510a		       26		      .byte.b	$20+(.LUM2/256)
     16  510b		       98		      .byte.b	$90+(.LUM3/256)
     17  510c
     18  510c
     19  510c
     20  510c
     21  510c
     22  510c				   .LUM1      SET	.LUM1 + .STEP1
     23  510c				   .LUM2      SET	.LUM2 + .STEP2
     24  510c				   .LUM3      SET	.LUM3 + .STEP3
     13  510c					      REPEND
     14  510c		       44		      .byte.b	$40+(.LUM1/256)
     15  510d		       26		      .byte.b	$20+(.LUM2/256)
     16  510e		       98		      .byte.b	$90+(.LUM3/256)
     17  510f
     18  510f
     19  510f
     20  510f
     21  510f
     22  510f				   .LUM1      SET	.LUM1 + .STEP1
     23  510f				   .LUM2      SET	.LUM2 + .STEP2
     24  510f				   .LUM3      SET	.LUM3 + .STEP3
     13  510f					      REPEND
     14  510f		       44		      .byte.b	$40+(.LUM1/256)
     15  5110		       26		      .byte.b	$20+(.LUM2/256)
     16  5111		       98		      .byte.b	$90+(.LUM3/256)
     17  5112
     18  5112
     19  5112
     20  5112
     21  5112
     22  5112				   .LUM1      SET	.LUM1 + .STEP1
     23  5112				   .LUM2      SET	.LUM2 + .STEP2
     24  5112				   .LUM3      SET	.LUM3 + .STEP3
     13  5112					      REPEND
     14  5112		       44		      .byte.b	$40+(.LUM1/256)
     15  5113		       26		      .byte.b	$20+(.LUM2/256)
     16  5114		       98		      .byte.b	$90+(.LUM3/256)
     17  5115
     18  5115
     19  5115
     20  5115
     21  5115
     22  5115				   .LUM1      SET	.LUM1 + .STEP1
     23  5115				   .LUM2      SET	.LUM2 + .STEP2
     24  5115				   .LUM3      SET	.LUM3 + .STEP3
     13  5115					      REPEND
     14  5115		       44		      .byte.b	$40+(.LUM1/256)
     15  5116		       26		      .byte.b	$20+(.LUM2/256)
     16  5117		       98		      .byte.b	$90+(.LUM3/256)
     17  5118
     18  5118
     19  5118
     20  5118
     21  5118
     22  5118				   .LUM1      SET	.LUM1 + .STEP1
     23  5118				   .LUM2      SET	.LUM2 + .STEP2
     24  5118				   .LUM3      SET	.LUM3 + .STEP3
     13  5118					      REPEND
     14  5118		       44		      .byte.b	$40+(.LUM1/256)
     15  5119		       26		      .byte.b	$20+(.LUM2/256)
     16  511a		       98		      .byte.b	$90+(.LUM3/256)
     17  511b
     18  511b
     19  511b
     20  511b
     21  511b
     22  511b				   .LUM1      SET	.LUM1 + .STEP1
     23  511b				   .LUM2      SET	.LUM2 + .STEP2
     24  511b				   .LUM3      SET	.LUM3 + .STEP3
     13  511b					      REPEND
     14  511b		       44		      .byte.b	$40+(.LUM1/256)
     15  511c		       26		      .byte.b	$20+(.LUM2/256)
     16  511d		       98		      .byte.b	$90+(.LUM3/256)
     17  511e
     18  511e
     19  511e
     20  511e
     21  511e
     22  511e				   .LUM1      SET	.LUM1 + .STEP1
     23  511e				   .LUM2      SET	.LUM2 + .STEP2
     24  511e				   .LUM3      SET	.LUM3 + .STEP3
     13  511e					      REPEND
     14  511e		       44		      .byte.b	$40+(.LUM1/256)
     15  511f		       26		      .byte.b	$20+(.LUM2/256)
     16  5120		       98		      .byte.b	$90+(.LUM3/256)
     17  5121
     18  5121
     19  5121
     20  5121
     21  5121
     22  5121				   .LUM1      SET	.LUM1 + .STEP1
     23  5121				   .LUM2      SET	.LUM2 + .STEP2
     24  5121				   .LUM3      SET	.LUM3 + .STEP3
     13  5121					      REPEND
     14  5121		       44		      .byte.b	$40+(.LUM1/256)
     15  5122		       26		      .byte.b	$20+(.LUM2/256)
     16  5123		       98		      .byte.b	$90+(.LUM3/256)
     17  5124
     18  5124
     19  5124
     20  5124
     21  5124
     22  5124				   .LUM1      SET	.LUM1 + .STEP1
     23  5124				   .LUM2      SET	.LUM2 + .STEP2
     24  5124				   .LUM3      SET	.LUM3 + .STEP3
     13  5124					      REPEND
     14  5124		       44		      .byte.b	$40+(.LUM1/256)
     15  5125		       26		      .byte.b	$20+(.LUM2/256)
     16  5126		       98		      .byte.b	$90+(.LUM3/256)
     17  5127
     18  5127
     19  5127
     20  5127
     21  5127
     22  5127				   .LUM1      SET	.LUM1 + .STEP1
     23  5127				   .LUM2      SET	.LUM2 + .STEP2
     24  5127				   .LUM3      SET	.LUM3 + .STEP3
     13  5127					      REPEND
     14  5127		       44		      .byte.b	$40+(.LUM1/256)
     15  5128		       26		      .byte.b	$20+(.LUM2/256)
     16  5129		       98		      .byte.b	$90+(.LUM3/256)
     17  512a
     18  512a
     19  512a
     20  512a
     21  512a
     22  512a				   .LUM1      SET	.LUM1 + .STEP1
     23  512a				   .LUM2      SET	.LUM2 + .STEP2
     24  512a				   .LUM3      SET	.LUM3 + .STEP3
     13  512a					      REPEND
     14  512a		       44		      .byte.b	$40+(.LUM1/256)
     15  512b		       26		      .byte.b	$20+(.LUM2/256)
     16  512c		       98		      .byte.b	$90+(.LUM3/256)
     17  512d
     18  512d
     19  512d
     20  512d
     21  512d
     22  512d				   .LUM1      SET	.LUM1 + .STEP1
     23  512d				   .LUM2      SET	.LUM2 + .STEP2
     24  512d				   .LUM3      SET	.LUM3 + .STEP3
     13  512d					      REPEND
     14  512d		       44		      .byte.b	$40+(.LUM1/256)
     15  512e		       26		      .byte.b	$20+(.LUM2/256)
     16  512f		       98		      .byte.b	$90+(.LUM3/256)
     17  5130
     18  5130
     19  5130
     20  5130
     21  5130
     22  5130				   .LUM1      SET	.LUM1 + .STEP1
     23  5130				   .LUM2      SET	.LUM2 + .STEP2
     24  5130				   .LUM3      SET	.LUM3 + .STEP3
     13  5130					      REPEND
     14  5130		       44		      .byte.b	$40+(.LUM1/256)
     15  5131		       26		      .byte.b	$20+(.LUM2/256)
     16  5132		       98		      .byte.b	$90+(.LUM3/256)
     17  5133
     18  5133
     19  5133
     20  5133
     21  5133
     22  5133				   .LUM1      SET	.LUM1 + .STEP1
     23  5133				   .LUM2      SET	.LUM2 + .STEP2
     24  5133				   .LUM3      SET	.LUM3 + .STEP3
     13  5133					      REPEND
     14  5133		       44		      .byte.b	$40+(.LUM1/256)
     15  5134		       26		      .byte.b	$20+(.LUM2/256)
     16  5135		       98		      .byte.b	$90+(.LUM3/256)
     17  5136
     18  5136
     19  5136
     20  5136
     21  5136
     22  5136				   .LUM1      SET	.LUM1 + .STEP1
     23  5136				   .LUM2      SET	.LUM2 + .STEP2
     24  5136				   .LUM3      SET	.LUM3 + .STEP3
     13  5136					      REPEND
     14  5136		       44		      .byte.b	$40+(.LUM1/256)
     15  5137		       26		      .byte.b	$20+(.LUM2/256)
     16  5138		       98		      .byte.b	$90+(.LUM3/256)
     17  5139
     18  5139
     19  5139
     20  5139
     21  5139
     22  5139				   .LUM1      SET	.LUM1 + .STEP1
     23  5139				   .LUM2      SET	.LUM2 + .STEP2
     24  5139				   .LUM3      SET	.LUM3 + .STEP3
     13  5139					      REPEND
     14  5139		       44		      .byte.b	$40+(.LUM1/256)
     15  513a		       26		      .byte.b	$20+(.LUM2/256)
     16  513b		       98		      .byte.b	$90+(.LUM3/256)
     17  513c
     18  513c
     19  513c
     20  513c
     21  513c
     22  513c				   .LUM1      SET	.LUM1 + .STEP1
     23  513c				   .LUM2      SET	.LUM2 + .STEP2
     24  513c				   .LUM3      SET	.LUM3 + .STEP3
     13  513c					      REPEND
     14  513c		       44		      .byte.b	$40+(.LUM1/256)
     15  513d		       26		      .byte.b	$20+(.LUM2/256)
     16  513e		       98		      .byte.b	$90+(.LUM3/256)
     17  513f
     18  513f
     19  513f
     20  513f
     21  513f
     22  513f				   .LUM1      SET	.LUM1 + .STEP1
     23  513f				   .LUM2      SET	.LUM2 + .STEP2
     24  513f				   .LUM3      SET	.LUM3 + .STEP3
     13  513f					      REPEND
     14  513f		       44		      .byte.b	$40+(.LUM1/256)
     15  5140		       26		      .byte.b	$20+(.LUM2/256)
     16  5141		       98		      .byte.b	$90+(.LUM3/256)
     17  5142
     18  5142
     19  5142
     20  5142
     21  5142
     22  5142				   .LUM1      SET	.LUM1 + .STEP1
     23  5142				   .LUM2      SET	.LUM2 + .STEP2
     24  5142				   .LUM3      SET	.LUM3 + .STEP3
     13  5142					      REPEND
     14  5142		       44		      .byte.b	$40+(.LUM1/256)
     15  5143		       26		      .byte.b	$20+(.LUM2/256)
     16  5144		       98		      .byte.b	$90+(.LUM3/256)
     17  5145
     18  5145
     19  5145
     20  5145
     21  5145
     22  5145				   .LUM1      SET	.LUM1 + .STEP1
     23  5145				   .LUM2      SET	.LUM2 + .STEP2
     24  5145				   .LUM3      SET	.LUM3 + .STEP3
     13  5145					      REPEND
     14  5145		       44		      .byte.b	$40+(.LUM1/256)
     15  5146		       26		      .byte.b	$20+(.LUM2/256)
     16  5147		       98		      .byte.b	$90+(.LUM3/256)
     17  5148
     18  5148
     19  5148
     20  5148
     21  5148
     22  5148				   .LUM1      SET	.LUM1 + .STEP1
     23  5148				   .LUM2      SET	.LUM2 + .STEP2
     24  5148				   .LUM3      SET	.LUM3 + .STEP3
     13  5148					      REPEND
     14  5148		       44		      .byte.b	$40+(.LUM1/256)
     15  5149		       26		      .byte.b	$20+(.LUM2/256)
     16  514a		       98		      .byte.b	$90+(.LUM3/256)
     17  514b
     18  514b
     19  514b
     20  514b
     21  514b
     22  514b				   .LUM1      SET	.LUM1 + .STEP1
     23  514b				   .LUM2      SET	.LUM2 + .STEP2
     24  514b				   .LUM3      SET	.LUM3 + .STEP3
     13  514b					      REPEND
     14  514b		       44		      .byte.b	$40+(.LUM1/256)
     15  514c		       26		      .byte.b	$20+(.LUM2/256)
     16  514d		       98		      .byte.b	$90+(.LUM3/256)
     17  514e
     18  514e
     19  514e
     20  514e
     21  514e
     22  514e				   .LUM1      SET	.LUM1 + .STEP1
     23  514e				   .LUM2      SET	.LUM2 + .STEP2
     24  514e				   .LUM3      SET	.LUM3 + .STEP3
     13  514e					      REPEND
     14  514e		       44		      .byte.b	$40+(.LUM1/256)
     15  514f		       26		      .byte.b	$20+(.LUM2/256)
     16  5150		       98		      .byte.b	$90+(.LUM3/256)
     17  5151
     18  5151
     19  5151
     20  5151
     21  5151
     22  5151				   .LUM1      SET	.LUM1 + .STEP1
     23  5151				   .LUM2      SET	.LUM2 + .STEP2
     24  5151				   .LUM3      SET	.LUM3 + .STEP3
     13  5151					      REPEND
     14  5151		       44		      .byte.b	$40+(.LUM1/256)
     15  5152		       26		      .byte.b	$20+(.LUM2/256)
     16  5153		       98		      .byte.b	$90+(.LUM3/256)
     17  5154
     18  5154
     19  5154
     20  5154
     21  5154
     22  5154				   .LUM1      SET	.LUM1 + .STEP1
     23  5154				   .LUM2      SET	.LUM2 + .STEP2
     24  5154				   .LUM3      SET	.LUM3 + .STEP3
     13  5154					      REPEND
     14  5154		       44		      .byte.b	$40+(.LUM1/256)
     15  5155		       26		      .byte.b	$20+(.LUM2/256)
     16  5156		       98		      .byte.b	$90+(.LUM3/256)
     17  5157
     18  5157
     19  5157
     20  5157
     21  5157
     22  5157				   .LUM1      SET	.LUM1 + .STEP1
     23  5157				   .LUM2      SET	.LUM2 + .STEP2
     24  5157				   .LUM3      SET	.LUM3 + .STEP3
     13  5157					      REPEND
     14  5157		       44		      .byte.b	$40+(.LUM1/256)
     15  5158		       26		      .byte.b	$20+(.LUM2/256)
     16  5159		       98		      .byte.b	$90+(.LUM3/256)
     17  515a
     18  515a
     19  515a
     20  515a
     21  515a
     22  515a				   .LUM1      SET	.LUM1 + .STEP1
     23  515a				   .LUM2      SET	.LUM2 + .STEP2
     24  515a				   .LUM3      SET	.LUM3 + .STEP3
     13  515a					      REPEND
     14  515a		       44		      .byte.b	$40+(.LUM1/256)
     15  515b		       26		      .byte.b	$20+(.LUM2/256)
     16  515c		       98		      .byte.b	$90+(.LUM3/256)
     17  515d
     18  515d
     19  515d
     20  515d
     21  515d
     22  515d				   .LUM1      SET	.LUM1 + .STEP1
     23  515d				   .LUM2      SET	.LUM2 + .STEP2
     24  515d				   .LUM3      SET	.LUM3 + .STEP3
     13  515d					      REPEND
     14  515d		       44		      .byte.b	$40+(.LUM1/256)
     15  515e		       26		      .byte.b	$20+(.LUM2/256)
     16  515f		       98		      .byte.b	$90+(.LUM3/256)
     17  5160
     18  5160
     19  5160
     20  5160
     21  5160
     22  5160				   .LUM1      SET	.LUM1 + .STEP1
     23  5160				   .LUM2      SET	.LUM2 + .STEP2
     24  5160				   .LUM3      SET	.LUM3 + .STEP3
     13  5160					      REPEND
     14  5160		       44		      .byte.b	$40+(.LUM1/256)
     15  5161		       26		      .byte.b	$20+(.LUM2/256)
     16  5162		       98		      .byte.b	$90+(.LUM3/256)
     17  5163
     18  5163
     19  5163
     20  5163
     21  5163
     22  5163				   .LUM1      SET	.LUM1 + .STEP1
     23  5163				   .LUM2      SET	.LUM2 + .STEP2
     24  5163				   .LUM3      SET	.LUM3 + .STEP3
     13  5163					      REPEND
     14  5163		       44		      .byte.b	$40+(.LUM1/256)
     15  5164		       26		      .byte.b	$20+(.LUM2/256)
     16  5165		       98		      .byte.b	$90+(.LUM3/256)
     17  5166
     18  5166
     19  5166
     20  5166
     21  5166
     22  5166				   .LUM1      SET	.LUM1 + .STEP1
     23  5166				   .LUM2      SET	.LUM2 + .STEP2
     24  5166				   .LUM3      SET	.LUM3 + .STEP3
     13  5166					      REPEND
     14  5166		       44		      .byte.b	$40+(.LUM1/256)
     15  5167		       26		      .byte.b	$20+(.LUM2/256)
     16  5168		       98		      .byte.b	$90+(.LUM3/256)
     17  5169
     18  5169
     19  5169
     20  5169
     21  5169
     22  5169				   .LUM1      SET	.LUM1 + .STEP1
     23  5169				   .LUM2      SET	.LUM2 + .STEP2
     24  5169				   .LUM3      SET	.LUM3 + .STEP3
     13  5169					      REPEND
     14  5169		       44		      .byte.b	$40+(.LUM1/256)
     15  516a		       26		      .byte.b	$20+(.LUM2/256)
     16  516b		       98		      .byte.b	$90+(.LUM3/256)
     17  516c
     18  516c
     19  516c
     20  516c
     21  516c
     22  516c				   .LUM1      SET	.LUM1 + .STEP1
     23  516c				   .LUM2      SET	.LUM2 + .STEP2
     24  516c				   .LUM3      SET	.LUM3 + .STEP3
     13  516c					      REPEND
     14  516c		       44		      .byte.b	$40+(.LUM1/256)
     15  516d		       26		      .byte.b	$20+(.LUM2/256)
     16  516e		       98		      .byte.b	$90+(.LUM3/256)
     17  516f
     18  516f
     19  516f
     20  516f
     21  516f
     22  516f				   .LUM1      SET	.LUM1 + .STEP1
     23  516f				   .LUM2      SET	.LUM2 + .STEP2
     24  516f				   .LUM3      SET	.LUM3 + .STEP3
     13  516f					      REPEND
     14  516f		       44		      .byte.b	$40+(.LUM1/256)
     15  5170		       26		      .byte.b	$20+(.LUM2/256)
     16  5171		       98		      .byte.b	$90+(.LUM3/256)
     17  5172
     18  5172
     19  5172
     20  5172
     21  5172
     22  5172				   .LUM1      SET	.LUM1 + .STEP1
     23  5172				   .LUM2      SET	.LUM2 + .STEP2
     24  5172				   .LUM3      SET	.LUM3 + .STEP3
     13  5172					      REPEND
     14  5172		       44		      .byte.b	$40+(.LUM1/256)
     15  5173		       26		      .byte.b	$20+(.LUM2/256)
     16  5174		       98		      .byte.b	$90+(.LUM3/256)
     17  5175
     18  5175
     19  5175
     20  5175
     21  5175
     22  5175				   .LUM1      SET	.LUM1 + .STEP1
     23  5175				   .LUM2      SET	.LUM2 + .STEP2
     24  5175				   .LUM3      SET	.LUM3 + .STEP3
     13  5175					      REPEND
     14  5175		       44		      .byte.b	$40+(.LUM1/256)
     15  5176		       26		      .byte.b	$20+(.LUM2/256)
     16  5177		       98		      .byte.b	$90+(.LUM3/256)
     17  5178
     18  5178
     19  5178
     20  5178
     21  5178
     22  5178				   .LUM1      SET	.LUM1 + .STEP1
     23  5178				   .LUM2      SET	.LUM2 + .STEP2
     24  5178				   .LUM3      SET	.LUM3 + .STEP3
     13  5178					      REPEND
     14  5178		       44		      .byte.b	$40+(.LUM1/256)
     15  5179		       26		      .byte.b	$20+(.LUM2/256)
     16  517a		       98		      .byte.b	$90+(.LUM3/256)
     17  517b
     18  517b
     19  517b
     20  517b
     21  517b
     22  517b				   .LUM1      SET	.LUM1 + .STEP1
     23  517b				   .LUM2      SET	.LUM2 + .STEP2
     24  517b				   .LUM3      SET	.LUM3 + .STEP3
     13  517b					      REPEND
     14  517b		       44		      .byte.b	$40+(.LUM1/256)
     15  517c		       26		      .byte.b	$20+(.LUM2/256)
     16  517d		       98		      .byte.b	$90+(.LUM3/256)
     17  517e
     18  517e
     19  517e
     20  517e
     21  517e
     22  517e				   .LUM1      SET	.LUM1 + .STEP1
     23  517e				   .LUM2      SET	.LUM2 + .STEP2
     24  517e				   .LUM3      SET	.LUM3 + .STEP3
     13  517e					      REPEND
     14  517e		       44		      .byte.b	$40+(.LUM1/256)
     15  517f		       26		      .byte.b	$20+(.LUM2/256)
     16  5180		       98		      .byte.b	$90+(.LUM3/256)
     17  5181
     18  5181
     19  5181
     20  5181
     21  5181
     22  5181				   .LUM1      SET	.LUM1 + .STEP1
     23  5181				   .LUM2      SET	.LUM2 + .STEP2
     24  5181				   .LUM3      SET	.LUM3 + .STEP3
     13  5181					      REPEND
     14  5181		       44		      .byte.b	$40+(.LUM1/256)
     15  5182		       26		      .byte.b	$20+(.LUM2/256)
     16  5183		       98		      .byte.b	$90+(.LUM3/256)
     17  5184
     18  5184
     19  5184
     20  5184
     21  5184
     22  5184				   .LUM1      SET	.LUM1 + .STEP1
     23  5184				   .LUM2      SET	.LUM2 + .STEP2
     24  5184				   .LUM3      SET	.LUM3 + .STEP3
     13  5184					      REPEND
     14  5184		       44		      .byte.b	$40+(.LUM1/256)
     15  5185		       26		      .byte.b	$20+(.LUM2/256)
     16  5186		       98		      .byte.b	$90+(.LUM3/256)
     17  5187
     18  5187
     19  5187
     20  5187
     21  5187
     22  5187				   .LUM1      SET	.LUM1 + .STEP1
     23  5187				   .LUM2      SET	.LUM2 + .STEP2
     24  5187				   .LUM3      SET	.LUM3 + .STEP3
     13  5187					      REPEND
     14  5187		       44		      .byte.b	$40+(.LUM1/256)
     15  5188		       26		      .byte.b	$20+(.LUM2/256)
     16  5189		       98		      .byte.b	$90+(.LUM3/256)
     17  518a
     18  518a
     19  518a
     20  518a
     21  518a
     22  518a				   .LUM1      SET	.LUM1 + .STEP1
     23  518a				   .LUM2      SET	.LUM2 + .STEP2
     24  518a				   .LUM3      SET	.LUM3 + .STEP3
     13  518a					      REPEND
     14  518a		       44		      .byte.b	$40+(.LUM1/256)
     15  518b		       26		      .byte.b	$20+(.LUM2/256)
     16  518c		       98		      .byte.b	$90+(.LUM3/256)
     17  518d
     18  518d
     19  518d
     20  518d
     21  518d
     22  518d				   .LUM1      SET	.LUM1 + .STEP1
     23  518d				   .LUM2      SET	.LUM2 + .STEP2
     24  518d				   .LUM3      SET	.LUM3 + .STEP3
     13  518d					      REPEND
     14  518d		       44		      .byte.b	$40+(.LUM1/256)
     15  518e		       26		      .byte.b	$20+(.LUM2/256)
     16  518f		       98		      .byte.b	$90+(.LUM3/256)
     17  5190
     18  5190
     19  5190
     20  5190
     21  5190
     22  5190				   .LUM1      SET	.LUM1 + .STEP1
     23  5190				   .LUM2      SET	.LUM2 + .STEP2
     24  5190				   .LUM3      SET	.LUM3 + .STEP3
     13  5190					      REPEND
     14  5190		       44		      .byte.b	$40+(.LUM1/256)
     15  5191		       26		      .byte.b	$20+(.LUM2/256)
     16  5192		       98		      .byte.b	$90+(.LUM3/256)
     17  5193
     18  5193
     19  5193
     20  5193
     21  5193
     22  5193				   .LUM1      SET	.LUM1 + .STEP1
     23  5193				   .LUM2      SET	.LUM2 + .STEP2
     24  5193				   .LUM3      SET	.LUM3 + .STEP3
     13  5193					      REPEND
     14  5193		       44		      .byte.b	$40+(.LUM1/256)
     15  5194		       26		      .byte.b	$20+(.LUM2/256)
     16  5195		       98		      .byte.b	$90+(.LUM3/256)
     17  5196
     18  5196
     19  5196
     20  5196
     21  5196
     22  5196				   .LUM1      SET	.LUM1 + .STEP1
     23  5196				   .LUM2      SET	.LUM2 + .STEP2
     24  5196				   .LUM3      SET	.LUM3 + .STEP3
     13  5196					      REPEND
     14  5196		       44		      .byte.b	$40+(.LUM1/256)
     15  5197		       26		      .byte.b	$20+(.LUM2/256)
     16  5198		       98		      .byte.b	$90+(.LUM3/256)
     17  5199
     18  5199
     19  5199
     20  5199
     21  5199
     22  5199				   .LUM1      SET	.LUM1 + .STEP1
     23  5199				   .LUM2      SET	.LUM2 + .STEP2
     24  5199				   .LUM3      SET	.LUM3 + .STEP3
     13  5199					      REPEND
     14  5199		       44		      .byte.b	$40+(.LUM1/256)
     15  519a		       26		      .byte.b	$20+(.LUM2/256)
     16  519b		       98		      .byte.b	$90+(.LUM3/256)
     17  519c
     18  519c
     19  519c
     20  519c
     21  519c
     22  519c				   .LUM1      SET	.LUM1 + .STEP1
     23  519c				   .LUM2      SET	.LUM2 + .STEP2
     24  519c				   .LUM3      SET	.LUM3 + .STEP3
     13  519c					      REPEND
     14  519c		       44		      .byte.b	$40+(.LUM1/256)
     15  519d		       26		      .byte.b	$20+(.LUM2/256)
     16  519e		       98		      .byte.b	$90+(.LUM3/256)
     17  519f
     18  519f
     19  519f
     20  519f
     21  519f
     22  519f				   .LUM1      SET	.LUM1 + .STEP1
     23  519f				   .LUM2      SET	.LUM2 + .STEP2
     24  519f				   .LUM3      SET	.LUM3 + .STEP3
     13  519f					      REPEND
     14  519f		       44		      .byte.b	$40+(.LUM1/256)
     15  51a0		       26		      .byte.b	$20+(.LUM2/256)
     16  51a1		       98		      .byte.b	$90+(.LUM3/256)
     17  51a2
     18  51a2
     19  51a2
     20  51a2
     21  51a2
     22  51a2				   .LUM1      SET	.LUM1 + .STEP1
     23  51a2				   .LUM2      SET	.LUM2 + .STEP2
     24  51a2				   .LUM3      SET	.LUM3 + .STEP3
     13  51a2					      REPEND
     14  51a2		       44		      .byte.b	$40+(.LUM1/256)
     15  51a3		       26		      .byte.b	$20+(.LUM2/256)
     16  51a4		       98		      .byte.b	$90+(.LUM3/256)
     17  51a5
     18  51a5
     19  51a5
     20  51a5
     21  51a5
     22  51a5				   .LUM1      SET	.LUM1 + .STEP1
     23  51a5				   .LUM2      SET	.LUM2 + .STEP2
     24  51a5				   .LUM3      SET	.LUM3 + .STEP3
     13  51a5					      REPEND
     14  51a5		       44		      .byte.b	$40+(.LUM1/256)
     15  51a6		       26		      .byte.b	$20+(.LUM2/256)
     16  51a7		       98		      .byte.b	$90+(.LUM3/256)
     17  51a8
     18  51a8
     19  51a8
     20  51a8
     21  51a8
     22  51a8				   .LUM1      SET	.LUM1 + .STEP1
     23  51a8				   .LUM2      SET	.LUM2 + .STEP2
     24  51a8				   .LUM3      SET	.LUM3 + .STEP3
     13  51a8					      REPEND
     14  51a8		       44		      .byte.b	$40+(.LUM1/256)
     15  51a9		       26		      .byte.b	$20+(.LUM2/256)
     16  51aa		       98		      .byte.b	$90+(.LUM3/256)
     17  51ab
     18  51ab
     19  51ab
     20  51ab
     21  51ab
     22  51ab				   .LUM1      SET	.LUM1 + .STEP1
     23  51ab				   .LUM2      SET	.LUM2 + .STEP2
     24  51ab				   .LUM3      SET	.LUM3 + .STEP3
     13  51ab					      REPEND
     14  51ab		       44		      .byte.b	$40+(.LUM1/256)
     15  51ac		       26		      .byte.b	$20+(.LUM2/256)
     16  51ad		       98		      .byte.b	$90+(.LUM3/256)
     17  51ae
     18  51ae
     19  51ae
     20  51ae
     21  51ae
     22  51ae				   .LUM1      SET	.LUM1 + .STEP1
     23  51ae				   .LUM2      SET	.LUM2 + .STEP2
     24  51ae				   .LUM3      SET	.LUM3 + .STEP3
     13  51ae					      REPEND
     14  51ae		       44		      .byte.b	$40+(.LUM1/256)
     15  51af		       26		      .byte.b	$20+(.LUM2/256)
     16  51b0		       98		      .byte.b	$90+(.LUM3/256)
     17  51b1
     18  51b1
     19  51b1
     20  51b1
     21  51b1
     22  51b1				   .LUM1      SET	.LUM1 + .STEP1
     23  51b1				   .LUM2      SET	.LUM2 + .STEP2
     24  51b1				   .LUM3      SET	.LUM3 + .STEP3
     13  51b1					      REPEND
     14  51b1		       44		      .byte.b	$40+(.LUM1/256)
     15  51b2		       26		      .byte.b	$20+(.LUM2/256)
     16  51b3		       98		      .byte.b	$90+(.LUM3/256)
     17  51b4
     18  51b4
     19  51b4
     20  51b4
     21  51b4
     22  51b4				   .LUM1      SET	.LUM1 + .STEP1
     23  51b4				   .LUM2      SET	.LUM2 + .STEP2
     24  51b4				   .LUM3      SET	.LUM3 + .STEP3
     13  51b4					      REPEND
     14  51b4		       44		      .byte.b	$40+(.LUM1/256)
     15  51b5		       26		      .byte.b	$20+(.LUM2/256)
     16  51b6		       98		      .byte.b	$90+(.LUM3/256)
     17  51b7
     18  51b7
     19  51b7
     20  51b7
     21  51b7
     22  51b7				   .LUM1      SET	.LUM1 + .STEP1
     23  51b7				   .LUM2      SET	.LUM2 + .STEP2
     24  51b7				   .LUM3      SET	.LUM3 + .STEP3
     13  51b7					      REPEND
     14  51b7		       44		      .byte.b	$40+(.LUM1/256)
     15  51b8		       26		      .byte.b	$20+(.LUM2/256)
     16  51b9		       98		      .byte.b	$90+(.LUM3/256)
     17  51ba
     18  51ba
     19  51ba
     20  51ba
     21  51ba
     22  51ba				   .LUM1      SET	.LUM1 + .STEP1
     23  51ba				   .LUM2      SET	.LUM2 + .STEP2
     24  51ba				   .LUM3      SET	.LUM3 + .STEP3
     13  51ba					      REPEND
     14  51ba		       44		      .byte.b	$40+(.LUM1/256)
     15  51bb		       26		      .byte.b	$20+(.LUM2/256)
     16  51bc		       98		      .byte.b	$90+(.LUM3/256)
     17  51bd
     18  51bd
     19  51bd
     20  51bd
     21  51bd
     22  51bd				   .LUM1      SET	.LUM1 + .STEP1
     23  51bd				   .LUM2      SET	.LUM2 + .STEP2
     24  51bd				   .LUM3      SET	.LUM3 + .STEP3
     13  51bd					      REPEND
     14  51bd		       44		      .byte.b	$40+(.LUM1/256)
     15  51be		       26		      .byte.b	$20+(.LUM2/256)
     16  51bf		       98		      .byte.b	$90+(.LUM3/256)
     17  51c0
     18  51c0
     19  51c0
     20  51c0
     21  51c0
     22  51c0				   .LUM1      SET	.LUM1 + .STEP1
     23  51c0				   .LUM2      SET	.LUM2 + .STEP2
     24  51c0				   .LUM3      SET	.LUM3 + .STEP3
     13  51c0					      REPEND
     14  51c0		       44		      .byte.b	$40+(.LUM1/256)
     15  51c1		       26		      .byte.b	$20+(.LUM2/256)
     16  51c2		       98		      .byte.b	$90+(.LUM3/256)
     17  51c3
     18  51c3
     19  51c3
     20  51c3
     21  51c3
     22  51c3				   .LUM1      SET	.LUM1 + .STEP1
     23  51c3				   .LUM2      SET	.LUM2 + .STEP2
     24  51c3				   .LUM3      SET	.LUM3 + .STEP3
     13  51c3					      REPEND
     14  51c3		       44		      .byte.b	$40+(.LUM1/256)
     15  51c4		       26		      .byte.b	$20+(.LUM2/256)
     16  51c5		       98		      .byte.b	$90+(.LUM3/256)
     17  51c6
     18  51c6
     19  51c6
     20  51c6
     21  51c6
     22  51c6				   .LUM1      SET	.LUM1 + .STEP1
     23  51c6				   .LUM2      SET	.LUM2 + .STEP2
     24  51c6				   .LUM3      SET	.LUM3 + .STEP3
     13  51c6					      REPEND
     14  51c6		       44		      .byte.b	$40+(.LUM1/256)
     15  51c7		       26		      .byte.b	$20+(.LUM2/256)
     16  51c8		       98		      .byte.b	$90+(.LUM3/256)
     17  51c9
     18  51c9
     19  51c9
     20  51c9
     21  51c9
     22  51c9				   .LUM1      SET	.LUM1 + .STEP1
     23  51c9				   .LUM2      SET	.LUM2 + .STEP2
     24  51c9				   .LUM3      SET	.LUM3 + .STEP3
     13  51c9					      REPEND
     14  51c9		       44		      .byte.b	$40+(.LUM1/256)
     15  51ca		       26		      .byte.b	$20+(.LUM2/256)
     16  51cb		       98		      .byte.b	$90+(.LUM3/256)
     17  51cc
     18  51cc
     19  51cc
     20  51cc
     21  51cc
     22  51cc				   .LUM1      SET	.LUM1 + .STEP1
     23  51cc				   .LUM2      SET	.LUM2 + .STEP2
     24  51cc				   .LUM3      SET	.LUM3 + .STEP3
     13  51cc					      REPEND
     14  51cc		       44		      .byte.b	$40+(.LUM1/256)
     15  51cd		       26		      .byte.b	$20+(.LUM2/256)
     16  51ce		       98		      .byte.b	$90+(.LUM3/256)
     17  51cf
     18  51cf
     19  51cf
     20  51cf
     21  51cf
     22  51cf				   .LUM1      SET	.LUM1 + .STEP1
     23  51cf				   .LUM2      SET	.LUM2 + .STEP2
     24  51cf				   .LUM3      SET	.LUM3 + .STEP3
     13  51cf					      REPEND
     14  51cf		       44		      .byte.b	$40+(.LUM1/256)
     15  51d0		       26		      .byte.b	$20+(.LUM2/256)
     16  51d1		       98		      .byte.b	$90+(.LUM3/256)
     17  51d2
     18  51d2
     19  51d2
     20  51d2
     21  51d2
     22  51d2				   .LUM1      SET	.LUM1 + .STEP1
     23  51d2				   .LUM2      SET	.LUM2 + .STEP2
     24  51d2				   .LUM3      SET	.LUM3 + .STEP3
     13  51d2					      REPEND
     14  51d2		       44		      .byte.b	$40+(.LUM1/256)
     15  51d3		       26		      .byte.b	$20+(.LUM2/256)
     16  51d4		       98		      .byte.b	$90+(.LUM3/256)
     17  51d5
     18  51d5
     19  51d5
     20  51d5
     21  51d5
     22  51d5				   .LUM1      SET	.LUM1 + .STEP1
     23  51d5				   .LUM2      SET	.LUM2 + .STEP2
     24  51d5				   .LUM3      SET	.LUM3 + .STEP3
     13  51d5					      REPEND
     14  51d5		       44		      .byte.b	$40+(.LUM1/256)
     15  51d6		       26		      .byte.b	$20+(.LUM2/256)
     16  51d7		       98		      .byte.b	$90+(.LUM3/256)
     17  51d8
     18  51d8
     19  51d8
     20  51d8
     21  51d8
     22  51d8				   .LUM1      SET	.LUM1 + .STEP1
     23  51d8				   .LUM2      SET	.LUM2 + .STEP2
     24  51d8				   .LUM3      SET	.LUM3 + .STEP3
     25  51d8					      REPEND
    254  51d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  51d8
    256  51d8							;    ECHO "PAL LUMS"
    257  51d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  51d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  51d8
      2  51d8
      3  51d8
      4  51d8
      5  51d8				   .LUM1      SET	$6*256
      6  51d8				   .LUM2      SET	$4*256
      7  51d8				   .LUM3      SET	$8*256
      8  51d8
      9  51d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  51d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  51d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  51d8
     13  51d8					      REPEAT	72
     14  51d8		       66		      .byte.b	$60+(.LUM1/256)
     15  51d9		       84		      .byte.b	$80+(.LUM2/256)
     16  51da		       18		      .byte.b	$10+(.LUM3/256)
     17  51db
     18  51db
     19  51db
     20  51db
     21  51db
     22  51db				   .LUM1      SET	.LUM1 + .STEP1
     23  51db				   .LUM2      SET	.LUM2 + .STEP2
     24  51db				   .LUM3      SET	.LUM3 + .STEP3
     13  51db					      REPEND
     14  51db		       66		      .byte.b	$60+(.LUM1/256)
     15  51dc		       84		      .byte.b	$80+(.LUM2/256)
     16  51dd		       18		      .byte.b	$10+(.LUM3/256)
     17  51de
     18  51de
     19  51de
     20  51de
     21  51de
     22  51de				   .LUM1      SET	.LUM1 + .STEP1
     23  51de				   .LUM2      SET	.LUM2 + .STEP2
     24  51de				   .LUM3      SET	.LUM3 + .STEP3
     13  51de					      REPEND
     14  51de		       66		      .byte.b	$60+(.LUM1/256)
     15  51df		       84		      .byte.b	$80+(.LUM2/256)
     16  51e0		       18		      .byte.b	$10+(.LUM3/256)
     17  51e1
     18  51e1
     19  51e1
     20  51e1
     21  51e1
     22  51e1				   .LUM1      SET	.LUM1 + .STEP1
     23  51e1				   .LUM2      SET	.LUM2 + .STEP2
     24  51e1				   .LUM3      SET	.LUM3 + .STEP3
     13  51e1					      REPEND
     14  51e1		       66		      .byte.b	$60+(.LUM1/256)
     15  51e2		       84		      .byte.b	$80+(.LUM2/256)
     16  51e3		       18		      .byte.b	$10+(.LUM3/256)
     17  51e4
     18  51e4
     19  51e4
     20  51e4
     21  51e4
     22  51e4				   .LUM1      SET	.LUM1 + .STEP1
     23  51e4				   .LUM2      SET	.LUM2 + .STEP2
     24  51e4				   .LUM3      SET	.LUM3 + .STEP3
     13  51e4					      REPEND
     14  51e4		       66		      .byte.b	$60+(.LUM1/256)
     15  51e5		       84		      .byte.b	$80+(.LUM2/256)
     16  51e6		       18		      .byte.b	$10+(.LUM3/256)
     17  51e7
     18  51e7
     19  51e7
     20  51e7
     21  51e7
     22  51e7				   .LUM1      SET	.LUM1 + .STEP1
     23  51e7				   .LUM2      SET	.LUM2 + .STEP2
     24  51e7				   .LUM3      SET	.LUM3 + .STEP3
     13  51e7					      REPEND
     14  51e7		       66		      .byte.b	$60+(.LUM1/256)
     15  51e8		       84		      .byte.b	$80+(.LUM2/256)
     16  51e9		       18		      .byte.b	$10+(.LUM3/256)
     17  51ea
     18  51ea
     19  51ea
     20  51ea
     21  51ea
     22  51ea				   .LUM1      SET	.LUM1 + .STEP1
     23  51ea				   .LUM2      SET	.LUM2 + .STEP2
     24  51ea				   .LUM3      SET	.LUM3 + .STEP3
     13  51ea					      REPEND
     14  51ea		       66		      .byte.b	$60+(.LUM1/256)
     15  51eb		       84		      .byte.b	$80+(.LUM2/256)
     16  51ec		       18		      .byte.b	$10+(.LUM3/256)
     17  51ed
     18  51ed
     19  51ed
     20  51ed
     21  51ed
     22  51ed				   .LUM1      SET	.LUM1 + .STEP1
     23  51ed				   .LUM2      SET	.LUM2 + .STEP2
     24  51ed				   .LUM3      SET	.LUM3 + .STEP3
     13  51ed					      REPEND
     14  51ed		       66		      .byte.b	$60+(.LUM1/256)
     15  51ee		       84		      .byte.b	$80+(.LUM2/256)
     16  51ef		       18		      .byte.b	$10+(.LUM3/256)
     17  51f0
     18  51f0
     19  51f0
     20  51f0
     21  51f0
     22  51f0				   .LUM1      SET	.LUM1 + .STEP1
     23  51f0				   .LUM2      SET	.LUM2 + .STEP2
     24  51f0				   .LUM3      SET	.LUM3 + .STEP3
     13  51f0					      REPEND
     14  51f0		       66		      .byte.b	$60+(.LUM1/256)
     15  51f1		       84		      .byte.b	$80+(.LUM2/256)
     16  51f2		       18		      .byte.b	$10+(.LUM3/256)
     17  51f3
     18  51f3
     19  51f3
     20  51f3
     21  51f3
     22  51f3				   .LUM1      SET	.LUM1 + .STEP1
     23  51f3				   .LUM2      SET	.LUM2 + .STEP2
     24  51f3				   .LUM3      SET	.LUM3 + .STEP3
     13  51f3					      REPEND
     14  51f3		       66		      .byte.b	$60+(.LUM1/256)
     15  51f4		       84		      .byte.b	$80+(.LUM2/256)
     16  51f5		       18		      .byte.b	$10+(.LUM3/256)
     17  51f6
     18  51f6
     19  51f6
     20  51f6
     21  51f6
     22  51f6				   .LUM1      SET	.LUM1 + .STEP1
     23  51f6				   .LUM2      SET	.LUM2 + .STEP2
     24  51f6				   .LUM3      SET	.LUM3 + .STEP3
     13  51f6					      REPEND
     14  51f6		       66		      .byte.b	$60+(.LUM1/256)
     15  51f7		       84		      .byte.b	$80+(.LUM2/256)
     16  51f8		       18		      .byte.b	$10+(.LUM3/256)
     17  51f9
     18  51f9
     19  51f9
     20  51f9
     21  51f9
     22  51f9				   .LUM1      SET	.LUM1 + .STEP1
     23  51f9				   .LUM2      SET	.LUM2 + .STEP2
     24  51f9				   .LUM3      SET	.LUM3 + .STEP3
     13  51f9					      REPEND
     14  51f9		       66		      .byte.b	$60+(.LUM1/256)
     15  51fa		       84		      .byte.b	$80+(.LUM2/256)
     16  51fb		       18		      .byte.b	$10+(.LUM3/256)
     17  51fc
     18  51fc
     19  51fc
     20  51fc
     21  51fc
     22  51fc				   .LUM1      SET	.LUM1 + .STEP1
     23  51fc				   .LUM2      SET	.LUM2 + .STEP2
     24  51fc				   .LUM3      SET	.LUM3 + .STEP3
     13  51fc					      REPEND
     14  51fc		       66		      .byte.b	$60+(.LUM1/256)
     15  51fd		       84		      .byte.b	$80+(.LUM2/256)
     16  51fe		       18		      .byte.b	$10+(.LUM3/256)
     17  51ff
     18  51ff
     19  51ff
     20  51ff
     21  51ff
     22  51ff				   .LUM1      SET	.LUM1 + .STEP1
     23  51ff				   .LUM2      SET	.LUM2 + .STEP2
     24  51ff				   .LUM3      SET	.LUM3 + .STEP3
     13  51ff					      REPEND
     14  51ff		       66		      .byte.b	$60+(.LUM1/256)
     15  5200		       84		      .byte.b	$80+(.LUM2/256)
     16  5201		       18		      .byte.b	$10+(.LUM3/256)
     17  5202
     18  5202
     19  5202
     20  5202
     21  5202
     22  5202				   .LUM1      SET	.LUM1 + .STEP1
     23  5202				   .LUM2      SET	.LUM2 + .STEP2
     24  5202				   .LUM3      SET	.LUM3 + .STEP3
     13  5202					      REPEND
     14  5202		       66		      .byte.b	$60+(.LUM1/256)
     15  5203		       84		      .byte.b	$80+(.LUM2/256)
     16  5204		       18		      .byte.b	$10+(.LUM3/256)
     17  5205
     18  5205
     19  5205
     20  5205
     21  5205
     22  5205				   .LUM1      SET	.LUM1 + .STEP1
     23  5205				   .LUM2      SET	.LUM2 + .STEP2
     24  5205				   .LUM3      SET	.LUM3 + .STEP3
     13  5205					      REPEND
     14  5205		       66		      .byte.b	$60+(.LUM1/256)
     15  5206		       84		      .byte.b	$80+(.LUM2/256)
     16  5207		       18		      .byte.b	$10+(.LUM3/256)
     17  5208
     18  5208
     19  5208
     20  5208
     21  5208
     22  5208				   .LUM1      SET	.LUM1 + .STEP1
     23  5208				   .LUM2      SET	.LUM2 + .STEP2
     24  5208				   .LUM3      SET	.LUM3 + .STEP3
     13  5208					      REPEND
     14  5208		       66		      .byte.b	$60+(.LUM1/256)
     15  5209		       84		      .byte.b	$80+(.LUM2/256)
     16  520a		       18		      .byte.b	$10+(.LUM3/256)
     17  520b
     18  520b
     19  520b
     20  520b
     21  520b
     22  520b				   .LUM1      SET	.LUM1 + .STEP1
     23  520b				   .LUM2      SET	.LUM2 + .STEP2
     24  520b				   .LUM3      SET	.LUM3 + .STEP3
     13  520b					      REPEND
     14  520b		       66		      .byte.b	$60+(.LUM1/256)
     15  520c		       84		      .byte.b	$80+(.LUM2/256)
     16  520d		       18		      .byte.b	$10+(.LUM3/256)
     17  520e
     18  520e
     19  520e
     20  520e
     21  520e
     22  520e				   .LUM1      SET	.LUM1 + .STEP1
     23  520e				   .LUM2      SET	.LUM2 + .STEP2
     24  520e				   .LUM3      SET	.LUM3 + .STEP3
     13  520e					      REPEND
     14  520e		       66		      .byte.b	$60+(.LUM1/256)
     15  520f		       84		      .byte.b	$80+(.LUM2/256)
     16  5210		       18		      .byte.b	$10+(.LUM3/256)
     17  5211
     18  5211
     19  5211
     20  5211
     21  5211
     22  5211				   .LUM1      SET	.LUM1 + .STEP1
     23  5211				   .LUM2      SET	.LUM2 + .STEP2
     24  5211				   .LUM3      SET	.LUM3 + .STEP3
     13  5211					      REPEND
     14  5211		       66		      .byte.b	$60+(.LUM1/256)
     15  5212		       84		      .byte.b	$80+(.LUM2/256)
     16  5213		       18		      .byte.b	$10+(.LUM3/256)
     17  5214
     18  5214
     19  5214
     20  5214
     21  5214
     22  5214				   .LUM1      SET	.LUM1 + .STEP1
     23  5214				   .LUM2      SET	.LUM2 + .STEP2
     24  5214				   .LUM3      SET	.LUM3 + .STEP3
     13  5214					      REPEND
     14  5214		       66		      .byte.b	$60+(.LUM1/256)
     15  5215		       84		      .byte.b	$80+(.LUM2/256)
     16  5216		       18		      .byte.b	$10+(.LUM3/256)
     17  5217
     18  5217
     19  5217
     20  5217
     21  5217
     22  5217				   .LUM1      SET	.LUM1 + .STEP1
     23  5217				   .LUM2      SET	.LUM2 + .STEP2
     24  5217				   .LUM3      SET	.LUM3 + .STEP3
     13  5217					      REPEND
     14  5217		       66		      .byte.b	$60+(.LUM1/256)
     15  5218		       84		      .byte.b	$80+(.LUM2/256)
     16  5219		       18		      .byte.b	$10+(.LUM3/256)
     17  521a
     18  521a
     19  521a
     20  521a
     21  521a
     22  521a				   .LUM1      SET	.LUM1 + .STEP1
     23  521a				   .LUM2      SET	.LUM2 + .STEP2
     24  521a				   .LUM3      SET	.LUM3 + .STEP3
     13  521a					      REPEND
     14  521a		       66		      .byte.b	$60+(.LUM1/256)
     15  521b		       84		      .byte.b	$80+(.LUM2/256)
     16  521c		       18		      .byte.b	$10+(.LUM3/256)
     17  521d
     18  521d
     19  521d
     20  521d
     21  521d
     22  521d				   .LUM1      SET	.LUM1 + .STEP1
     23  521d				   .LUM2      SET	.LUM2 + .STEP2
     24  521d				   .LUM3      SET	.LUM3 + .STEP3
     13  521d					      REPEND
     14  521d		       66		      .byte.b	$60+(.LUM1/256)
     15  521e		       84		      .byte.b	$80+(.LUM2/256)
     16  521f		       18		      .byte.b	$10+(.LUM3/256)
     17  5220
     18  5220
     19  5220
     20  5220
     21  5220
     22  5220				   .LUM1      SET	.LUM1 + .STEP1
     23  5220				   .LUM2      SET	.LUM2 + .STEP2
     24  5220				   .LUM3      SET	.LUM3 + .STEP3
     13  5220					      REPEND
     14  5220		       66		      .byte.b	$60+(.LUM1/256)
     15  5221		       84		      .byte.b	$80+(.LUM2/256)
     16  5222		       18		      .byte.b	$10+(.LUM3/256)
     17  5223
     18  5223
     19  5223
     20  5223
     21  5223
     22  5223				   .LUM1      SET	.LUM1 + .STEP1
     23  5223				   .LUM2      SET	.LUM2 + .STEP2
     24  5223				   .LUM3      SET	.LUM3 + .STEP3
     13  5223					      REPEND
     14  5223		       66		      .byte.b	$60+(.LUM1/256)
     15  5224		       84		      .byte.b	$80+(.LUM2/256)
     16  5225		       18		      .byte.b	$10+(.LUM3/256)
     17  5226
     18  5226
     19  5226
     20  5226
     21  5226
     22  5226				   .LUM1      SET	.LUM1 + .STEP1
     23  5226				   .LUM2      SET	.LUM2 + .STEP2
     24  5226				   .LUM3      SET	.LUM3 + .STEP3
     13  5226					      REPEND
     14  5226		       66		      .byte.b	$60+(.LUM1/256)
     15  5227		       84		      .byte.b	$80+(.LUM2/256)
     16  5228		       18		      .byte.b	$10+(.LUM3/256)
     17  5229
     18  5229
     19  5229
     20  5229
     21  5229
     22  5229				   .LUM1      SET	.LUM1 + .STEP1
     23  5229				   .LUM2      SET	.LUM2 + .STEP2
     24  5229				   .LUM3      SET	.LUM3 + .STEP3
     13  5229					      REPEND
     14  5229		       66		      .byte.b	$60+(.LUM1/256)
     15  522a		       84		      .byte.b	$80+(.LUM2/256)
     16  522b		       18		      .byte.b	$10+(.LUM3/256)
     17  522c
     18  522c
     19  522c
     20  522c
     21  522c
     22  522c				   .LUM1      SET	.LUM1 + .STEP1
     23  522c				   .LUM2      SET	.LUM2 + .STEP2
     24  522c				   .LUM3      SET	.LUM3 + .STEP3
     13  522c					      REPEND
     14  522c		       66		      .byte.b	$60+(.LUM1/256)
     15  522d		       84		      .byte.b	$80+(.LUM2/256)
     16  522e		       18		      .byte.b	$10+(.LUM3/256)
     17  522f
     18  522f
     19  522f
     20  522f
     21  522f
     22  522f				   .LUM1      SET	.LUM1 + .STEP1
     23  522f				   .LUM2      SET	.LUM2 + .STEP2
     24  522f				   .LUM3      SET	.LUM3 + .STEP3
     13  522f					      REPEND
     14  522f		       66		      .byte.b	$60+(.LUM1/256)
     15  5230		       84		      .byte.b	$80+(.LUM2/256)
     16  5231		       18		      .byte.b	$10+(.LUM3/256)
     17  5232
     18  5232
     19  5232
     20  5232
     21  5232
     22  5232				   .LUM1      SET	.LUM1 + .STEP1
     23  5232				   .LUM2      SET	.LUM2 + .STEP2
     24  5232				   .LUM3      SET	.LUM3 + .STEP3
     13  5232					      REPEND
     14  5232		       66		      .byte.b	$60+(.LUM1/256)
     15  5233		       84		      .byte.b	$80+(.LUM2/256)
     16  5234		       18		      .byte.b	$10+(.LUM3/256)
     17  5235
     18  5235
     19  5235
     20  5235
     21  5235
     22  5235				   .LUM1      SET	.LUM1 + .STEP1
     23  5235				   .LUM2      SET	.LUM2 + .STEP2
     24  5235				   .LUM3      SET	.LUM3 + .STEP3
     13  5235					      REPEND
     14  5235		       66		      .byte.b	$60+(.LUM1/256)
     15  5236		       84		      .byte.b	$80+(.LUM2/256)
     16  5237		       18		      .byte.b	$10+(.LUM3/256)
     17  5238
     18  5238
     19  5238
     20  5238
     21  5238
     22  5238				   .LUM1      SET	.LUM1 + .STEP1
     23  5238				   .LUM2      SET	.LUM2 + .STEP2
     24  5238				   .LUM3      SET	.LUM3 + .STEP3
     13  5238					      REPEND
     14  5238		       66		      .byte.b	$60+(.LUM1/256)
     15  5239		       84		      .byte.b	$80+(.LUM2/256)
     16  523a		       18		      .byte.b	$10+(.LUM3/256)
     17  523b
     18  523b
     19  523b
     20  523b
     21  523b
     22  523b				   .LUM1      SET	.LUM1 + .STEP1
     23  523b				   .LUM2      SET	.LUM2 + .STEP2
     24  523b				   .LUM3      SET	.LUM3 + .STEP3
     13  523b					      REPEND
     14  523b		       66		      .byte.b	$60+(.LUM1/256)
     15  523c		       84		      .byte.b	$80+(.LUM2/256)
     16  523d		       18		      .byte.b	$10+(.LUM3/256)
     17  523e
     18  523e
     19  523e
     20  523e
     21  523e
     22  523e				   .LUM1      SET	.LUM1 + .STEP1
     23  523e				   .LUM2      SET	.LUM2 + .STEP2
     24  523e				   .LUM3      SET	.LUM3 + .STEP3
     13  523e					      REPEND
     14  523e		       66		      .byte.b	$60+(.LUM1/256)
     15  523f		       84		      .byte.b	$80+(.LUM2/256)
     16  5240		       18		      .byte.b	$10+(.LUM3/256)
     17  5241
     18  5241
     19  5241
     20  5241
     21  5241
     22  5241				   .LUM1      SET	.LUM1 + .STEP1
     23  5241				   .LUM2      SET	.LUM2 + .STEP2
     24  5241				   .LUM3      SET	.LUM3 + .STEP3
     13  5241					      REPEND
     14  5241		       66		      .byte.b	$60+(.LUM1/256)
     15  5242		       84		      .byte.b	$80+(.LUM2/256)
     16  5243		       18		      .byte.b	$10+(.LUM3/256)
     17  5244
     18  5244
     19  5244
     20  5244
     21  5244
     22  5244				   .LUM1      SET	.LUM1 + .STEP1
     23  5244				   .LUM2      SET	.LUM2 + .STEP2
     24  5244				   .LUM3      SET	.LUM3 + .STEP3
     13  5244					      REPEND
     14  5244		       66		      .byte.b	$60+(.LUM1/256)
     15  5245		       84		      .byte.b	$80+(.LUM2/256)
     16  5246		       18		      .byte.b	$10+(.LUM3/256)
     17  5247
     18  5247
     19  5247
     20  5247
     21  5247
     22  5247				   .LUM1      SET	.LUM1 + .STEP1
     23  5247				   .LUM2      SET	.LUM2 + .STEP2
     24  5247				   .LUM3      SET	.LUM3 + .STEP3
     13  5247					      REPEND
     14  5247		       66		      .byte.b	$60+(.LUM1/256)
     15  5248		       84		      .byte.b	$80+(.LUM2/256)
     16  5249		       18		      .byte.b	$10+(.LUM3/256)
     17  524a
     18  524a
     19  524a
     20  524a
     21  524a
     22  524a				   .LUM1      SET	.LUM1 + .STEP1
     23  524a				   .LUM2      SET	.LUM2 + .STEP2
     24  524a				   .LUM3      SET	.LUM3 + .STEP3
     13  524a					      REPEND
     14  524a		       66		      .byte.b	$60+(.LUM1/256)
     15  524b		       84		      .byte.b	$80+(.LUM2/256)
     16  524c		       18		      .byte.b	$10+(.LUM3/256)
     17  524d
     18  524d
     19  524d
     20  524d
     21  524d
     22  524d				   .LUM1      SET	.LUM1 + .STEP1
     23  524d				   .LUM2      SET	.LUM2 + .STEP2
     24  524d				   .LUM3      SET	.LUM3 + .STEP3
     13  524d					      REPEND
     14  524d		       66		      .byte.b	$60+(.LUM1/256)
     15  524e		       84		      .byte.b	$80+(.LUM2/256)
     16  524f		       18		      .byte.b	$10+(.LUM3/256)
     17  5250
     18  5250
     19  5250
     20  5250
     21  5250
     22  5250				   .LUM1      SET	.LUM1 + .STEP1
     23  5250				   .LUM2      SET	.LUM2 + .STEP2
     24  5250				   .LUM3      SET	.LUM3 + .STEP3
     13  5250					      REPEND
     14  5250		       66		      .byte.b	$60+(.LUM1/256)
     15  5251		       84		      .byte.b	$80+(.LUM2/256)
     16  5252		       18		      .byte.b	$10+(.LUM3/256)
     17  5253
     18  5253
     19  5253
     20  5253
     21  5253
     22  5253				   .LUM1      SET	.LUM1 + .STEP1
     23  5253				   .LUM2      SET	.LUM2 + .STEP2
     24  5253				   .LUM3      SET	.LUM3 + .STEP3
     13  5253					      REPEND
     14  5253		       66		      .byte.b	$60+(.LUM1/256)
     15  5254		       84		      .byte.b	$80+(.LUM2/256)
     16  5255		       18		      .byte.b	$10+(.LUM3/256)
     17  5256
     18  5256
     19  5256
     20  5256
     21  5256
     22  5256				   .LUM1      SET	.LUM1 + .STEP1
     23  5256				   .LUM2      SET	.LUM2 + .STEP2
     24  5256				   .LUM3      SET	.LUM3 + .STEP3
     13  5256					      REPEND
     14  5256		       66		      .byte.b	$60+(.LUM1/256)
     15  5257		       84		      .byte.b	$80+(.LUM2/256)
     16  5258		       18		      .byte.b	$10+(.LUM3/256)
     17  5259
     18  5259
     19  5259
     20  5259
     21  5259
     22  5259				   .LUM1      SET	.LUM1 + .STEP1
     23  5259				   .LUM2      SET	.LUM2 + .STEP2
     24  5259				   .LUM3      SET	.LUM3 + .STEP3
     13  5259					      REPEND
     14  5259		       66		      .byte.b	$60+(.LUM1/256)
     15  525a		       84		      .byte.b	$80+(.LUM2/256)
     16  525b		       18		      .byte.b	$10+(.LUM3/256)
     17  525c
     18  525c
     19  525c
     20  525c
     21  525c
     22  525c				   .LUM1      SET	.LUM1 + .STEP1
     23  525c				   .LUM2      SET	.LUM2 + .STEP2
     24  525c				   .LUM3      SET	.LUM3 + .STEP3
     13  525c					      REPEND
     14  525c		       66		      .byte.b	$60+(.LUM1/256)
     15  525d		       84		      .byte.b	$80+(.LUM2/256)
     16  525e		       18		      .byte.b	$10+(.LUM3/256)
     17  525f
     18  525f
     19  525f
     20  525f
     21  525f
     22  525f				   .LUM1      SET	.LUM1 + .STEP1
     23  525f				   .LUM2      SET	.LUM2 + .STEP2
     24  525f				   .LUM3      SET	.LUM3 + .STEP3
     13  525f					      REPEND
     14  525f		       66		      .byte.b	$60+(.LUM1/256)
     15  5260		       84		      .byte.b	$80+(.LUM2/256)
     16  5261		       18		      .byte.b	$10+(.LUM3/256)
     17  5262
     18  5262
     19  5262
     20  5262
     21  5262
     22  5262				   .LUM1      SET	.LUM1 + .STEP1
     23  5262				   .LUM2      SET	.LUM2 + .STEP2
     24  5262				   .LUM3      SET	.LUM3 + .STEP3
     13  5262					      REPEND
     14  5262		       66		      .byte.b	$60+(.LUM1/256)
     15  5263		       84		      .byte.b	$80+(.LUM2/256)
     16  5264		       18		      .byte.b	$10+(.LUM3/256)
     17  5265
     18  5265
     19  5265
     20  5265
     21  5265
     22  5265				   .LUM1      SET	.LUM1 + .STEP1
     23  5265				   .LUM2      SET	.LUM2 + .STEP2
     24  5265				   .LUM3      SET	.LUM3 + .STEP3
     13  5265					      REPEND
     14  5265		       66		      .byte.b	$60+(.LUM1/256)
     15  5266		       84		      .byte.b	$80+(.LUM2/256)
     16  5267		       18		      .byte.b	$10+(.LUM3/256)
     17  5268
     18  5268
     19  5268
     20  5268
     21  5268
     22  5268				   .LUM1      SET	.LUM1 + .STEP1
     23  5268				   .LUM2      SET	.LUM2 + .STEP2
     24  5268				   .LUM3      SET	.LUM3 + .STEP3
     13  5268					      REPEND
     14  5268		       66		      .byte.b	$60+(.LUM1/256)
     15  5269		       84		      .byte.b	$80+(.LUM2/256)
     16  526a		       18		      .byte.b	$10+(.LUM3/256)
     17  526b
     18  526b
     19  526b
     20  526b
     21  526b
     22  526b				   .LUM1      SET	.LUM1 + .STEP1
     23  526b				   .LUM2      SET	.LUM2 + .STEP2
     24  526b				   .LUM3      SET	.LUM3 + .STEP3
     13  526b					      REPEND
     14  526b		       66		      .byte.b	$60+(.LUM1/256)
     15  526c		       84		      .byte.b	$80+(.LUM2/256)
     16  526d		       18		      .byte.b	$10+(.LUM3/256)
     17  526e
     18  526e
     19  526e
     20  526e
     21  526e
     22  526e				   .LUM1      SET	.LUM1 + .STEP1
     23  526e				   .LUM2      SET	.LUM2 + .STEP2
     24  526e				   .LUM3      SET	.LUM3 + .STEP3
     13  526e					      REPEND
     14  526e		       66		      .byte.b	$60+(.LUM1/256)
     15  526f		       84		      .byte.b	$80+(.LUM2/256)
     16  5270		       18		      .byte.b	$10+(.LUM3/256)
     17  5271
     18  5271
     19  5271
     20  5271
     21  5271
     22  5271				   .LUM1      SET	.LUM1 + .STEP1
     23  5271				   .LUM2      SET	.LUM2 + .STEP2
     24  5271				   .LUM3      SET	.LUM3 + .STEP3
     13  5271					      REPEND
     14  5271		       66		      .byte.b	$60+(.LUM1/256)
     15  5272		       84		      .byte.b	$80+(.LUM2/256)
     16  5273		       18		      .byte.b	$10+(.LUM3/256)
     17  5274
     18  5274
     19  5274
     20  5274
     21  5274
     22  5274				   .LUM1      SET	.LUM1 + .STEP1
     23  5274				   .LUM2      SET	.LUM2 + .STEP2
     24  5274				   .LUM3      SET	.LUM3 + .STEP3
     13  5274					      REPEND
     14  5274		       66		      .byte.b	$60+(.LUM1/256)
     15  5275		       84		      .byte.b	$80+(.LUM2/256)
     16  5276		       18		      .byte.b	$10+(.LUM3/256)
     17  5277
     18  5277
     19  5277
     20  5277
     21  5277
     22  5277				   .LUM1      SET	.LUM1 + .STEP1
     23  5277				   .LUM2      SET	.LUM2 + .STEP2
     24  5277				   .LUM3      SET	.LUM3 + .STEP3
     13  5277					      REPEND
     14  5277		       66		      .byte.b	$60+(.LUM1/256)
     15  5278		       84		      .byte.b	$80+(.LUM2/256)
     16  5279		       18		      .byte.b	$10+(.LUM3/256)
     17  527a
     18  527a
     19  527a
     20  527a
     21  527a
     22  527a				   .LUM1      SET	.LUM1 + .STEP1
     23  527a				   .LUM2      SET	.LUM2 + .STEP2
     24  527a				   .LUM3      SET	.LUM3 + .STEP3
     13  527a					      REPEND
     14  527a		       66		      .byte.b	$60+(.LUM1/256)
     15  527b		       84		      .byte.b	$80+(.LUM2/256)
     16  527c		       18		      .byte.b	$10+(.LUM3/256)
     17  527d
     18  527d
     19  527d
     20  527d
     21  527d
     22  527d				   .LUM1      SET	.LUM1 + .STEP1
     23  527d				   .LUM2      SET	.LUM2 + .STEP2
     24  527d				   .LUM3      SET	.LUM3 + .STEP3
     13  527d					      REPEND
     14  527d		       66		      .byte.b	$60+(.LUM1/256)
     15  527e		       84		      .byte.b	$80+(.LUM2/256)
     16  527f		       18		      .byte.b	$10+(.LUM3/256)
     17  5280
     18  5280
     19  5280
     20  5280
     21  5280
     22  5280				   .LUM1      SET	.LUM1 + .STEP1
     23  5280				   .LUM2      SET	.LUM2 + .STEP2
     24  5280				   .LUM3      SET	.LUM3 + .STEP3
     13  5280					      REPEND
     14  5280		       66		      .byte.b	$60+(.LUM1/256)
     15  5281		       84		      .byte.b	$80+(.LUM2/256)
     16  5282		       18		      .byte.b	$10+(.LUM3/256)
     17  5283
     18  5283
     19  5283
     20  5283
     21  5283
     22  5283				   .LUM1      SET	.LUM1 + .STEP1
     23  5283				   .LUM2      SET	.LUM2 + .STEP2
     24  5283				   .LUM3      SET	.LUM3 + .STEP3
     13  5283					      REPEND
     14  5283		       66		      .byte.b	$60+(.LUM1/256)
     15  5284		       84		      .byte.b	$80+(.LUM2/256)
     16  5285		       18		      .byte.b	$10+(.LUM3/256)
     17  5286
     18  5286
     19  5286
     20  5286
     21  5286
     22  5286				   .LUM1      SET	.LUM1 + .STEP1
     23  5286				   .LUM2      SET	.LUM2 + .STEP2
     24  5286				   .LUM3      SET	.LUM3 + .STEP3
     13  5286					      REPEND
     14  5286		       66		      .byte.b	$60+(.LUM1/256)
     15  5287		       84		      .byte.b	$80+(.LUM2/256)
     16  5288		       18		      .byte.b	$10+(.LUM3/256)
     17  5289
     18  5289
     19  5289
     20  5289
     21  5289
     22  5289				   .LUM1      SET	.LUM1 + .STEP1
     23  5289				   .LUM2      SET	.LUM2 + .STEP2
     24  5289				   .LUM3      SET	.LUM3 + .STEP3
     13  5289					      REPEND
     14  5289		       66		      .byte.b	$60+(.LUM1/256)
     15  528a		       84		      .byte.b	$80+(.LUM2/256)
     16  528b		       18		      .byte.b	$10+(.LUM3/256)
     17  528c
     18  528c
     19  528c
     20  528c
     21  528c
     22  528c				   .LUM1      SET	.LUM1 + .STEP1
     23  528c				   .LUM2      SET	.LUM2 + .STEP2
     24  528c				   .LUM3      SET	.LUM3 + .STEP3
     13  528c					      REPEND
     14  528c		       66		      .byte.b	$60+(.LUM1/256)
     15  528d		       84		      .byte.b	$80+(.LUM2/256)
     16  528e		       18		      .byte.b	$10+(.LUM3/256)
     17  528f
     18  528f
     19  528f
     20  528f
     21  528f
     22  528f				   .LUM1      SET	.LUM1 + .STEP1
     23  528f				   .LUM2      SET	.LUM2 + .STEP2
     24  528f				   .LUM3      SET	.LUM3 + .STEP3
     13  528f					      REPEND
     14  528f		       66		      .byte.b	$60+(.LUM1/256)
     15  5290		       84		      .byte.b	$80+(.LUM2/256)
     16  5291		       18		      .byte.b	$10+(.LUM3/256)
     17  5292
     18  5292
     19  5292
     20  5292
     21  5292
     22  5292				   .LUM1      SET	.LUM1 + .STEP1
     23  5292				   .LUM2      SET	.LUM2 + .STEP2
     24  5292				   .LUM3      SET	.LUM3 + .STEP3
     13  5292					      REPEND
     14  5292		       66		      .byte.b	$60+(.LUM1/256)
     15  5293		       84		      .byte.b	$80+(.LUM2/256)
     16  5294		       18		      .byte.b	$10+(.LUM3/256)
     17  5295
     18  5295
     19  5295
     20  5295
     21  5295
     22  5295				   .LUM1      SET	.LUM1 + .STEP1
     23  5295				   .LUM2      SET	.LUM2 + .STEP2
     24  5295				   .LUM3      SET	.LUM3 + .STEP3
     13  5295					      REPEND
     14  5295		       66		      .byte.b	$60+(.LUM1/256)
     15  5296		       84		      .byte.b	$80+(.LUM2/256)
     16  5297		       18		      .byte.b	$10+(.LUM3/256)
     17  5298
     18  5298
     19  5298
     20  5298
     21  5298
     22  5298				   .LUM1      SET	.LUM1 + .STEP1
     23  5298				   .LUM2      SET	.LUM2 + .STEP2
     24  5298				   .LUM3      SET	.LUM3 + .STEP3
     13  5298					      REPEND
     14  5298		       66		      .byte.b	$60+(.LUM1/256)
     15  5299		       84		      .byte.b	$80+(.LUM2/256)
     16  529a		       18		      .byte.b	$10+(.LUM3/256)
     17  529b
     18  529b
     19  529b
     20  529b
     21  529b
     22  529b				   .LUM1      SET	.LUM1 + .STEP1
     23  529b				   .LUM2      SET	.LUM2 + .STEP2
     24  529b				   .LUM3      SET	.LUM3 + .STEP3
     13  529b					      REPEND
     14  529b		       66		      .byte.b	$60+(.LUM1/256)
     15  529c		       84		      .byte.b	$80+(.LUM2/256)
     16  529d		       18		      .byte.b	$10+(.LUM3/256)
     17  529e
     18  529e
     19  529e
     20  529e
     21  529e
     22  529e				   .LUM1      SET	.LUM1 + .STEP1
     23  529e				   .LUM2      SET	.LUM2 + .STEP2
     24  529e				   .LUM3      SET	.LUM3 + .STEP3
     13  529e					      REPEND
     14  529e		       66		      .byte.b	$60+(.LUM1/256)
     15  529f		       84		      .byte.b	$80+(.LUM2/256)
     16  52a0		       18		      .byte.b	$10+(.LUM3/256)
     17  52a1
     18  52a1
     19  52a1
     20  52a1
     21  52a1
     22  52a1				   .LUM1      SET	.LUM1 + .STEP1
     23  52a1				   .LUM2      SET	.LUM2 + .STEP2
     24  52a1				   .LUM3      SET	.LUM3 + .STEP3
     13  52a1					      REPEND
     14  52a1		       66		      .byte.b	$60+(.LUM1/256)
     15  52a2		       84		      .byte.b	$80+(.LUM2/256)
     16  52a3		       18		      .byte.b	$10+(.LUM3/256)
     17  52a4
     18  52a4
     19  52a4
     20  52a4
     21  52a4
     22  52a4				   .LUM1      SET	.LUM1 + .STEP1
     23  52a4				   .LUM2      SET	.LUM2 + .STEP2
     24  52a4				   .LUM3      SET	.LUM3 + .STEP3
     13  52a4					      REPEND
     14  52a4		       66		      .byte.b	$60+(.LUM1/256)
     15  52a5		       84		      .byte.b	$80+(.LUM2/256)
     16  52a6		       18		      .byte.b	$10+(.LUM3/256)
     17  52a7
     18  52a7
     19  52a7
     20  52a7
     21  52a7
     22  52a7				   .LUM1      SET	.LUM1 + .STEP1
     23  52a7				   .LUM2      SET	.LUM2 + .STEP2
     24  52a7				   .LUM3      SET	.LUM3 + .STEP3
     13  52a7					      REPEND
     14  52a7		       66		      .byte.b	$60+(.LUM1/256)
     15  52a8		       84		      .byte.b	$80+(.LUM2/256)
     16  52a9		       18		      .byte.b	$10+(.LUM3/256)
     17  52aa
     18  52aa
     19  52aa
     20  52aa
     21  52aa
     22  52aa				   .LUM1      SET	.LUM1 + .STEP1
     23  52aa				   .LUM2      SET	.LUM2 + .STEP2
     24  52aa				   .LUM3      SET	.LUM3 + .STEP3
     13  52aa					      REPEND
     14  52aa		       66		      .byte.b	$60+(.LUM1/256)
     15  52ab		       84		      .byte.b	$80+(.LUM2/256)
     16  52ac		       18		      .byte.b	$10+(.LUM3/256)
     17  52ad
     18  52ad
     19  52ad
     20  52ad
     21  52ad
     22  52ad				   .LUM1      SET	.LUM1 + .STEP1
     23  52ad				   .LUM2      SET	.LUM2 + .STEP2
     24  52ad				   .LUM3      SET	.LUM3 + .STEP3
     13  52ad					      REPEND
     14  52ad		       66		      .byte.b	$60+(.LUM1/256)
     15  52ae		       84		      .byte.b	$80+(.LUM2/256)
     16  52af		       18		      .byte.b	$10+(.LUM3/256)
     17  52b0
     18  52b0
     19  52b0
     20  52b0
     21  52b0
     22  52b0				   .LUM1      SET	.LUM1 + .STEP1
     23  52b0				   .LUM2      SET	.LUM2 + .STEP2
     24  52b0				   .LUM3      SET	.LUM3 + .STEP3
     25  52b0					      REPEND
    259  52b0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  52b0
------- FILE titleData.asm LEVEL 3 PASS 2
      0  52b0					      include	"titleData.asm"
      1  52b0				   COL_0
      2  52b0		       00		      .byte.b	0	;R (71)
      3  52b1		       00		      .byte.b	0	;G
      4  52b2		       00		      .byte.b	0	;B
      5  52b3		       40		      .byte.b	64	;R (70)
      6  52b4		       40		      .byte.b	64	;G
      7  52b5		       00		      .byte.b	0	;B
      8  52b6		       00		      .byte.b	0	;R (69)
      9  52b7		       00		      .byte.b	0	;G
     10  52b8		       00		      .byte.b	0	;B
     11  52b9		       00		      .byte.b	0	;R (68)
     12  52ba		       80		      .byte.b	128	;G
     13  52bb		       00		      .byte.b	0	;B
     14  52bc		       00		      .byte.b	0	;R (67)
     15  52bd		       20		      .byte.b	32	;G
     16  52be		       00		      .byte.b	0	;B
     17  52bf		       80		      .byte.b	128	;R (66)
     18  52c0		       80		      .byte.b	128	;G
     19  52c1		       00		      .byte.b	0	;B
     20  52c2		       c0		      .byte.b	192	;R (65)
     21  52c3		       c0		      .byte.b	192	;G
     22  52c4		       00		      .byte.b	0	;B
     23  52c5		       40		      .byte.b	64	;R (64)
     24  52c6		       c0		      .byte.b	192	;G
     25  52c7		       00		      .byte.b	0	;B
     26  52c8		       00		      .byte.b	0	;R (63)
     27  52c9		       a0		      .byte.b	160	;G
     28  52ca		       00		      .byte.b	0	;B
     29  52cb		       10		      .byte.b	16	;R (62)
     30  52cc		       70		      .byte.b	112	;G
     31  52cd		       00		      .byte.b	0	;B
     32  52ce		       00		      .byte.b	0	;R (61)
     33  52cf		       80		      .byte.b	128	;G
     34  52d0		       40		      .byte.b	64	;B
     35  52d1		       00		      .byte.b	0	;R (60)
     36  52d2		       c0		      .byte.b	192	;G
     37  52d3		       00		      .byte.b	0	;B
     38  52d4		       00		      .byte.b	0	;R (59)
     39  52d5		       c0		      .byte.b	192	;G
     40  52d6		       00		      .byte.b	0	;B
     41  52d7		       00		      .byte.b	0	;R (58)
     42  52d8		       40		      .byte.b	64	;G
     43  52d9		       00		      .byte.b	0	;B
     44  52da		       00		      .byte.b	0	;R (57)
     45  52db		       c0		      .byte.b	192	;G
     46  52dc		       00		      .byte.b	0	;B
     47  52dd		       00		      .byte.b	0	;R (56)
     48  52de		       60		      .byte.b	96	;G
     49  52df		       00		      .byte.b	0	;B
     50  52e0		       00		      .byte.b	0	;R (55)
     51  52e1		       80		      .byte.b	128	;G
     52  52e2		       00		      .byte.b	0	;B
     53  52e3		       00		      .byte.b	0	;R (54)
     54  52e4		       40		      .byte.b	64	;G
     55  52e5		       00		      .byte.b	0	;B
     56  52e6		       00		      .byte.b	0	;R (53)
     57  52e7		       80		      .byte.b	128	;G
     58  52e8		       00		      .byte.b	0	;B
     59  52e9		       00		      .byte.b	0	;R (52)
     60  52ea		       80		      .byte.b	128	;G
     61  52eb		       00		      .byte.b	0	;B
     62  52ec		       00		      .byte.b	0	;R (51)
     63  52ed		       10		      .byte.b	16	;G
     64  52ee		       00		      .byte.b	0	;B
     65  52ef		       00		      .byte.b	0	;R (50)
     66  52f0		       00		      .byte.b	0	;G
     67  52f1		       00		      .byte.b	0	;B
     68  52f2		       00		      .byte.b	0	;R (49)
     69  52f3		       00		      .byte.b	0	;G
     70  52f4		       00		      .byte.b	0	;B
     71  52f5		       00		      .byte.b	0	;R (48)
     72  52f6		       00		      .byte.b	0	;G
     73  52f7		       00		      .byte.b	0	;B
     74  52f8		       00		      .byte.b	0	;R (47)
     75  52f9		       00		      .byte.b	0	;G
     76  52fa		       00		      .byte.b	0	;B
     77  52fb		       00		      .byte.b	0	;R (46)
     78  52fc		       40		      .byte.b	64	;G
     79  52fd		       00		      .byte.b	0	;B
     80  52fe		       00		      .byte.b	0	;R (45)
     81  52ff		       00		      .byte.b	0	;G
     82  5300		       00		      .byte.b	0	;B
     83  5301		       00		      .byte.b	0	;R (44)
     84  5302		       00		      .byte.b	0	;G
     85  5303		       00		      .byte.b	0	;B
     86  5304		       00		      .byte.b	0	;R (43)
     87  5305		       00		      .byte.b	0	;G
     88  5306		       00		      .byte.b	0	;B
     89  5307		       00		      .byte.b	0	;R (42)
     90  5308		       40		      .byte.b	64	;G
     91  5309		       00		      .byte.b	0	;B
     92  530a		       00		      .byte.b	0	;R (41)
     93  530b		       00		      .byte.b	0	;G
     94  530c		       00		      .byte.b	0	;B
     95  530d		       00		      .byte.b	0	;R (40)
     96  530e		       00		      .byte.b	0	;G
     97  530f		       00		      .byte.b	0	;B
     98  5310		       00		      .byte.b	0	;R (39)
     99  5311		       20		      .byte.b	32	;G
    100  5312		       00		      .byte.b	0	;B
    101  5313		       00		      .byte.b	0	;R (38)
    102  5314		       00		      .byte.b	0	;G
    103  5315		       00		      .byte.b	0	;B
    104  5316		       00		      .byte.b	0	;R (37)
    105  5317		       10		      .byte.b	16	;G
    106  5318		       00		      .byte.b	0	;B
    107  5319		       00		      .byte.b	0	;R (36)
    108  531a		       00		      .byte.b	0	;G
    109  531b		       00		      .byte.b	0	;B
    110  531c		       00		      .byte.b	0	;R (35)
    111  531d		       40		      .byte.b	64	;G
    112  531e		       00		      .byte.b	0	;B
    113  531f		       00		      .byte.b	0	;R (34)
    114  5320		       20		      .byte.b	32	;G
    115  5321		       00		      .byte.b	0	;B
    116  5322		       00		      .byte.b	0	;R (33)
    117  5323		       00		      .byte.b	0	;G
    118  5324		       00		      .byte.b	0	;B
    119  5325		       00		      .byte.b	0	;R (32)
    120  5326		       00		      .byte.b	0	;G
    121  5327		       00		      .byte.b	0	;B
    122  5328		       00		      .byte.b	0	;R (31)
    123  5329		       20		      .byte.b	32	;G
    124  532a		       00		      .byte.b	0	;B
    125  532b		       00		      .byte.b	0	;R (30)
    126  532c		       00		      .byte.b	0	;G
    127  532d		       00		      .byte.b	0	;B
    128  532e		       00		      .byte.b	0	;R (29)
    129  532f		       80		      .byte.b	128	;G
    130  5330		       00		      .byte.b	0	;B
    131  5331		       00		      .byte.b	0	;R (28)
    132  5332		       00		      .byte.b	0	;G
    133  5333		       00		      .byte.b	0	;B
    134  5334		       00		      .byte.b	0	;R (27)
    135  5335		       20		      .byte.b	32	;G
    136  5336		       00		      .byte.b	0	;B
    137  5337		       00		      .byte.b	0	;R (26)
    138  5338		       00		      .byte.b	0	;G
    139  5339		       00		      .byte.b	0	;B
    140  533a		       00		      .byte.b	0	;R (25)
    141  533b		       00		      .byte.b	0	;G
    142  533c		       00		      .byte.b	0	;B
    143  533d		       00		      .byte.b	0	;R (24)
    144  533e		       20		      .byte.b	32	;G
    145  533f		       00		      .byte.b	0	;B
    146  5340		       00		      .byte.b	0	;R (23)
    147  5341		       00		      .byte.b	0	;G
    148  5342		       00		      .byte.b	0	;B
    149  5343		       00		      .byte.b	0	;R (22)
    150  5344		       00		      .byte.b	0	;G
    151  5345		       00		      .byte.b	0	;B
    152  5346		       00		      .byte.b	0	;R (21)
    153  5347		       20		      .byte.b	32	;G
    154  5348		       00		      .byte.b	0	;B
    155  5349		       00		      .byte.b	0	;R (20)
    156  534a		       00		      .byte.b	0	;G
    157  534b		       00		      .byte.b	0	;B
    158  534c		       00		      .byte.b	0	;R (19)
    159  534d		       00		      .byte.b	0	;G
    160  534e		       00		      .byte.b	0	;B
    161  534f		       00		      .byte.b	0	;R (18)
    162  5350		       00		      .byte.b	0	;G
    163  5351		       00		      .byte.b	0	;B
    164  5352		       00		      .byte.b	0	;R (17)
    165  5353		       80		      .byte.b	128	;G
    166  5354		       00		      .byte.b	0	;B
    167  5355		       00		      .byte.b	0	;R (16)
    168  5356		       00		      .byte.b	0	;G
    169  5357		       00		      .byte.b	0	;B
    170  5358		       00		      .byte.b	0	;R (15)
    171  5359		       10		      .byte.b	16	;G
    172  535a		       00		      .byte.b	0	;B
    173  535b		       00		      .byte.b	0	;R (14)
    174  535c		       00		      .byte.b	0	;G
    175  535d		       00		      .byte.b	0	;B
    176  535e		       00		      .byte.b	0	;R (13)
    177  535f		       00		      .byte.b	0	;G
    178  5360		       00		      .byte.b	0	;B
    179  5361		       00		      .byte.b	0	;R (12)
    180  5362		       80		      .byte.b	128	;G
    181  5363		       00		      .byte.b	0	;B
    182  5364		       00		      .byte.b	0	;R (11)
    183  5365		       00		      .byte.b	0	;G
    184  5366		       00		      .byte.b	0	;B
    185  5367		       00		      .byte.b	0	;R (10)
    186  5368		       00		      .byte.b	0	;G
    187  5369		       00		      .byte.b	0	;B
    188  536a		       00		      .byte.b	0	;R (9)
    189  536b		       80		      .byte.b	128	;G
    190  536c		       00		      .byte.b	0	;B
    191  536d		       00		      .byte.b	0	;R (8)
    192  536e		       00		      .byte.b	0	;G
    193  536f		       00		      .byte.b	0	;B
    194  5370		       00		      .byte.b	0	;R (7)
    195  5371		       20		      .byte.b	32	;G
    196  5372		       00		      .byte.b	0	;B
    197  5373		       00		      .byte.b	0	;R (6)
    198  5374		       00		      .byte.b	0	;G
    199  5375		       00		      .byte.b	0	;B
    200  5376		       00		      .byte.b	0	;R (5)
    201  5377		       10		      .byte.b	16	;G
    202  5378		       00		      .byte.b	0	;B
    203  5379		       00		      .byte.b	0	;R (4)
    204  537a		       00		      .byte.b	0	;G
    205  537b		       00		      .byte.b	0	;B
    206  537c		       00		      .byte.b	0	;R (3)
    207  537d		       00		      .byte.b	0	;G
    208  537e		       00		      .byte.b	0	;B
    209  537f		       00		      .byte.b	0	;R (2)
    210  5380		       40		      .byte.b	64	;G
    211  5381		       00		      .byte.b	0	;B
    212  5382		       00		      .byte.b	0	;R (1)
    213  5383		       00		      .byte.b	0	;G
    214  5384		       00		      .byte.b	0	;B
    215  5385		       00		      .byte.b	0	;R (0)
    216  5386		       00		      .byte.b	0	;G
    217  5387		       00		      .byte.b	0	;B
    218  5388				   COL_1
    219  5388		       80		      .byte.b	128	;R (71)
    220  5389		       80		      .byte.b	128	;G
    221  538a		       00		      .byte.b	0	;B
    222  538b		       10		      .byte.b	16	;R (70)
    223  538c		       14		      .byte.b	20	;G
    224  538d		       00		      .byte.b	0	;B
    225  538e		       00		      .byte.b	0	;R (69)
    226  538f		       41		      .byte.b	65	;G
    227  5390		       00		      .byte.b	0	;B
    228  5391		       00		      .byte.b	0	;R (68)
    229  5392		       08		      .byte.b	8	;G
    230  5393		       00		      .byte.b	0	;B
    231  5394		       20		      .byte.b	32	;R (67)
    232  5395		       20		      .byte.b	32	;G
    233  5396		       00		      .byte.b	0	;B
    234  5397		       63		      .byte.b	99	;R (66)
    235  5398		       6b		      .byte.b	107	;G
    236  5399		       00		      .byte.b	0	;B
    237  539a		       ff		      .byte.b	255	;R (65)
    238  539b		       f5		      .byte.b	245	;G
    239  539c		       00		      .byte.b	0	;B
    240  539d		       80		      .byte.b	128	;R (64)
    241  539e		       fb		      .byte.b	251	;G
    242  539f		       04		      .byte.b	4	;B
    243  53a0		       00		      .byte.b	0	;R (63)
    244  53a1		       b7		      .byte.b	183	;G
    245  53a2		       00		      .byte.b	0	;B
    246  53a3		       00		      .byte.b	0	;R (62)
    247  53a4		       b5		      .byte.b	181	;G
    248  53a5		       00		      .byte.b	0	;B
    249  53a6		       00		      .byte.b	0	;R (61)
    250  53a7		       ef		      .byte.b	239	;G
    251  53a8		       10		      .byte.b	16	;B
    252  53a9		       00		      .byte.b	0	;R (60)
    253  53aa		       bd		      .byte.b	189	;G
    254  53ab		       42		      .byte.b	66	;B
    255  53ac		       00		      .byte.b	0	;R (59)
    256  53ad		       77		      .byte.b	119	;G
    257  53ae		       00		      .byte.b	0	;B
    258  53af		       00		      .byte.b	0	;R (58)
    259  53b0		       ee		      .byte.b	238	;G
    260  53b1		       00		      .byte.b	0	;B
    261  53b2		       00		      .byte.b	0	;R (57)
    262  53b3		       9b		      .byte.b	155	;G
    263  53b4		       00		      .byte.b	0	;B
    264  53b5		       00		      .byte.b	0	;R (56)
    265  53b6		       f2		      .byte.b	242	;G
    266  53b7		       00		      .byte.b	0	;B
    267  53b8		       00		      .byte.b	0	;R (55)
    268  53b9		       40		      .byte.b	64	;G
    269  53ba		       00		      .byte.b	0	;B
    270  53bb		       00		      .byte.b	0	;R (54)
    271  53bc		       df		      .byte.b	223	;G
    272  53bd		       00		      .byte.b	0	;B
    273  53be		       10		      .byte.b	16	;R (53)
    274  53bf		       69		      .byte.b	105	;G
    275  53c0		       10		      .byte.b	16	;B
    276  53c1		       00		      .byte.b	0	;R (52)
    277  53c2		       4b		      .byte.b	75	;G
    278  53c3		       00		      .byte.b	0	;B
    279  53c4		       00		      .byte.b	0	;R (51)
    280  53c5		       b0		      .byte.b	176	;G
    281  53c6		       00		      .byte.b	0	;B
    282  53c7		       00		      .byte.b	0	;R (50)
    283  53c8		       a7		      .byte.b	167	;G
    284  53c9		       00		      .byte.b	0	;B
    285  53ca		       00		      .byte.b	0	;R (49)
    286  53cb		       7d		      .byte.b	125	;G
    287  53cc		       02		      .byte.b	2	;B
    288  53cd		       00		      .byte.b	0	;R (48)
    289  53ce		       db		      .byte.b	219	;G
    290  53cf		       20		      .byte.b	32	;B
    291  53d0		       00		      .byte.b	0	;R (47)
    292  53d1		       6d		      .byte.b	109	;G
    293  53d2		       00		      .byte.b	0	;B
    294  53d3		       00		      .byte.b	0	;R (46)
    295  53d4		       ea		      .byte.b	234	;G
    296  53d5		       00		      .byte.b	0	;B
    297  53d6		       00		      .byte.b	0	;R (45)
    298  53d7		       13		      .byte.b	19	;G
    299  53d8		       00		      .byte.b	0	;B
    300  53d9		       00		      .byte.b	0	;R (44)
    301  53da		       7e		      .byte.b	126	;G
    302  53db		       01		      .byte.b	1	;B
    303  53dc		       22		      .byte.b	34	;R (43)
    304  53dd		       77		      .byte.b	119	;G
    305  53de		       08		      .byte.b	8	;B
    306  53df		       04		      .byte.b	4	;R (42)
    307  53e0		       5f		      .byte.b	95	;G
    308  53e1		       00		      .byte.b	0	;B
    309  53e2		       00		      .byte.b	0	;R (41)
    310  53e3		       6f		      .byte.b	111	;G
    311  53e4		       00		      .byte.b	0	;B
    312  53e5		       00		      .byte.b	0	;R (40)
    313  53e6		       b5		      .byte.b	181	;G
    314  53e7		       00		      .byte.b	0	;B
    315  53e8		       00		      .byte.b	0	;R (39)
    316  53e9		       5b		      .byte.b	91	;G
    317  53ea		       00		      .byte.b	0	;B
    318  53eb		       00		      .byte.b	0	;R (38)
    319  53ec		       57		      .byte.b	87	;G
    320  53ed		       00		      .byte.b	0	;B
    321  53ee		       20		      .byte.b	32	;R (37)
    322  53ef		       4d		      .byte.b	77	;G
    323  53f0		       22		      .byte.b	34	;B
    324  53f1		       00		      .byte.b	0	;R (36)
    325  53f2		       55		      .byte.b	85	;G
    326  53f3		       00		      .byte.b	0	;B
    327  53f4		       01		      .byte.b	1	;R (35)
    328  53f5		       56		      .byte.b	86	;G
    329  53f6		       00		      .byte.b	0	;B
    330  53f7		       02		      .byte.b	2	;R (34)
    331  53f8		       57		      .byte.b	87	;G
    332  53f9		       00		      .byte.b	0	;B
    333  53fa		       00		      .byte.b	0	;R (33)
    334  53fb		       2a		      .byte.b	42	;G
    335  53fc		       01		      .byte.b	1	;B
    336  53fd		       01		      .byte.b	1	;R (32)
    337  53fe		       ab		      .byte.b	171	;G
    338  53ff		       00		      .byte.b	0	;B
    339  5400		       22		      .byte.b	34	;R (31)
    340  5401		       17		      .byte.b	23	;G
    341  5402		       20		      .byte.b	32	;B
    342  5403		       00		      .byte.b	0	;R (30)
    343  5404		       55		      .byte.b	85	;G
    344  5405		       02		      .byte.b	2	;B
    345  5406		       22		      .byte.b	34	;R (29)
    346  5407		       17		      .byte.b	23	;G
    347  5408		       20		      .byte.b	32	;B
    348  5409		       00		      .byte.b	0	;R (28)
    349  540a		       2b		      .byte.b	43	;G
    350  540b		       00		      .byte.b	0	;B
    351  540c		       00		      .byte.b	0	;R (27)
    352  540d		       95		      .byte.b	149	;G
    353  540e		       02		      .byte.b	2	;B
    354  540f		       00		      .byte.b	0	;R (26)
    355  5410		       17		      .byte.b	23	;G
    356  5411		       00		      .byte.b	0	;B
    357  5412		       00		      .byte.b	0	;R (25)
    358  5413		       2d		      .byte.b	45	;G
    359  5414		       00		      .byte.b	0	;B
    360  5415		       00		      .byte.b	0	;R (24)
    361  5416		       b4		      .byte.b	180	;G
    362  5417		       00		      .byte.b	0	;B
    363  5418		       00		      .byte.b	0	;R (23)
    364  5419		       0a		      .byte.b	10	;G
    365  541a		       00		      .byte.b	0	;B
    366  541b		       10		      .byte.b	16	;R (22)
    367  541c		       3c		      .byte.b	60	;G
    368  541d		       00		      .byte.b	0	;B
    369  541e		       10		      .byte.b	16	;R (21)
    370  541f		       98		      .byte.b	152	;G
    371  5420		       00		      .byte.b	0	;B
    372  5421		       10		      .byte.b	16	;R (20)
    373  5422		       1a		      .byte.b	26	;G
    374  5423		       00		      .byte.b	0	;B
    375  5424		       00		      .byte.b	0	;R (19)
    376  5425		       14		      .byte.b	20	;G
    377  5426		       00		      .byte.b	0	;B
    378  5427		       00		      .byte.b	0	;R (18)
    379  5428		       5a		      .byte.b	90	;G
    380  5429		       00		      .byte.b	0	;B
    381  542a		       00		      .byte.b	0	;R (17)
    382  542b		       09		      .byte.b	9	;G
    383  542c		       00		      .byte.b	0	;B
    384  542d		       08		      .byte.b	8	;R (16)
    385  542e		       1d		      .byte.b	29	;G
    386  542f		       00		      .byte.b	0	;B
    387  5430		       00		      .byte.b	0	;R (15)
    388  5431		       1a		      .byte.b	26	;G
    389  5432		       00		      .byte.b	0	;B
    390  5433		       20		      .byte.b	32	;R (14)
    391  5434		       ba		      .byte.b	186	;G
    392  5435		       00		      .byte.b	0	;B
    393  5436		       00		      .byte.b	0	;R (13)
    394  5437		       12		      .byte.b	18	;G
    395  5438		       00		      .byte.b	0	;B
    396  5439		       00		      .byte.b	0	;R (12)
    397  543a		       1a		      .byte.b	26	;G
    398  543b		       00		      .byte.b	0	;B
    399  543c		       00		      .byte.b	0	;R (11)
    400  543d		       2d		      .byte.b	45	;G
    401  543e		       10		      .byte.b	16	;B
    402  543f		       10		      .byte.b	16	;R (10)
    403  5440		       3b		      .byte.b	59	;G
    404  5441		       00		      .byte.b	0	;B
    405  5442		       24		      .byte.b	36	;R (9)
    406  5443		       39		      .byte.b	57	;G
    407  5444		       04		      .byte.b	4	;B
    408  5445		       20		      .byte.b	32	;R (8)
    409  5446		       35		      .byte.b	53	;G
    410  5447		       00		      .byte.b	0	;B
    411  5448		       00		      .byte.b	0	;R (7)
    412  5449		       3d		      .byte.b	61	;G
    413  544a		       00		      .byte.b	0	;B
    414  544b		       00		      .byte.b	0	;R (6)
    415  544c		       32		      .byte.b	50	;G
    416  544d		       00		      .byte.b	0	;B
    417  544e		       00		      .byte.b	0	;R (5)
    418  544f		       98		      .byte.b	152	;G
    419  5450		       00		      .byte.b	0	;B
    420  5451		       00		      .byte.b	0	;R (4)
    421  5452		       12		      .byte.b	18	;G
    422  5453		       00		      .byte.b	0	;B
    423  5454		       00		      .byte.b	0	;R (3)
    424  5455		       20		      .byte.b	32	;G
    425  5456		       00		      .byte.b	0	;B
    426  5457		       01		      .byte.b	1	;R (2)
    427  5458		       49		      .byte.b	73	;G
    428  5459		       00		      .byte.b	0	;B
    429  545a		       20		      .byte.b	32	;R (1)
    430  545b		       20		      .byte.b	32	;G
    431  545c		       00		      .byte.b	0	;B
    432  545d		       00		      .byte.b	0	;R (0)
    433  545e		       00		      .byte.b	0	;G
    434  545f		       00		      .byte.b	0	;B
    435  5460				   COL_2
    436  5460		       14		      .byte.b	20	;R (71)
    437  5461		       14		      .byte.b	20	;G
    438  5462		       00		      .byte.b	0	;B
    439  5463		       40		      .byte.b	64	;R (70)
    440  5464		       42		      .byte.b	66	;G
    441  5465		       00		      .byte.b	0	;B
    442  5466		       a8		      .byte.b	168	;R (69)
    443  5467		       a8		      .byte.b	168	;G
    444  5468		       00		      .byte.b	0	;B
    445  5469		       fd		      .byte.b	253	;R (68)
    446  546a		       1d		      .byte.b	29	;G
    447  546b		       00		      .byte.b	0	;B
    448  546c		       f0		      .byte.b	240	;R (67)
    449  546d		       44		      .byte.b	68	;G
    450  546e		       08		      .byte.b	8	;B
    451  546f		       ff		      .byte.b	255	;R (66)
    452  5470		       2f		      .byte.b	47	;G
    453  5471		       00		      .byte.b	0	;B
    454  5472		       ff		      .byte.b	255	;R (65)
    455  5473		       0e		      .byte.b	14	;G
    456  5474		       00		      .byte.b	0	;B
    457  5475		       f8		      .byte.b	248	;R (64)
    458  5476		       0f		      .byte.b	15	;G
    459  5477		       00		      .byte.b	0	;B
    460  5478		       f8		      .byte.b	248	;R (63)
    461  5479		       2e		      .byte.b	46	;G
    462  547a		       00		      .byte.b	0	;B
    463  547b		       f8		      .byte.b	248	;R (62)
    464  547c		       1e		      .byte.b	30	;G
    465  547d		       01		      .byte.b	1	;B
    466  547e		       74		      .byte.b	116	;R (61)
    467  547f		       23		      .byte.b	35	;G
    468  5480		       88		      .byte.b	136	;B
    469  5481		       fc		      .byte.b	252	;R (60)
    470  5482		       0f		      .byte.b	15	;G
    471  5483		       00		      .byte.b	0	;B
    472  5484		       f8		      .byte.b	248	;R (59)
    473  5485		       06		      .byte.b	6	;G
    474  5486		       01		      .byte.b	1	;B
    475  5487		       f8		      .byte.b	248	;R (58)
    476  5488		       8f		      .byte.b	143	;G
    477  5489		       00		      .byte.b	0	;B
    478  548a		       e8		      .byte.b	232	;R (57)
    479  548b		       0e		      .byte.b	14	;G
    480  548c		       10		      .byte.b	16	;B
    481  548d		       e0		      .byte.b	224	;R (56)
    482  548e		       97		      .byte.b	151	;G
    483  548f		       00		      .byte.b	0	;B
    484  5490		       f0		      .byte.b	240	;R (55)
    485  5491		       3a		      .byte.b	58	;G
    486  5492		       00		      .byte.b	0	;B
    487  5493		       e0		      .byte.b	224	;R (54)
    488  5494		       bb		      .byte.b	187	;G
    489  5495		       04		      .byte.b	4	;B
    490  5496		       e0		      .byte.b	224	;R (53)
    491  5497		       3e		      .byte.b	62	;G
    492  5498		       00		      .byte.b	0	;B
    493  5499		       c0		      .byte.b	192	;R (52)
    494  549a		       2a		      .byte.b	42	;G
    495  549b		       00		      .byte.b	0	;B
    496  549c		       80		      .byte.b	128	;R (51)
    497  549d		       3f		      .byte.b	63	;G
    498  549e		       40		      .byte.b	64	;B
    499  549f		       f5		      .byte.b	245	;R (50)
    500  54a0		       3f		      .byte.b	63	;G
    501  54a1		       00		      .byte.b	0	;B
    502  54a2		       e8		      .byte.b	232	;R (49)
    503  54a3		       7f		      .byte.b	127	;G
    504  54a4		       00		      .byte.b	0	;B
    505  54a5		       e0		      .byte.b	224	;R (48)
    506  54a6		       7a		      .byte.b	122	;G
    507  54a7		       04		      .byte.b	4	;B
    508  54a8		       c0		      .byte.b	192	;R (47)
    509  54a9		       5f		      .byte.b	95	;G
    510  54aa		       00		      .byte.b	0	;B
    511  54ab		       90		      .byte.b	144	;R (46)
    512  54ac		       dd		      .byte.b	221	;G
    513  54ad		       02		      .byte.b	2	;B
    514  54ae		       84		      .byte.b	132	;R (45)
    515  54af		       9f		      .byte.b	159	;G
    516  54b0		       00		      .byte.b	0	;B
    517  54b1		       c4		      .byte.b	196	;R (44)
    518  54b2		       cf		      .byte.b	207	;G
    519  54b3		       00		      .byte.b	0	;B
    520  54b4		       c5		      .byte.b	197	;R (43)
    521  54b5		       1f		      .byte.b	31	;G
    522  54b6		       00		      .byte.b	0	;B
    523  54b7		       d4		      .byte.b	212	;R (42)
    524  54b8		       9f		      .byte.b	159	;G
    525  54b9		       20		      .byte.b	32	;B
    526  54ba		       c8		      .byte.b	200	;R (41)
    527  54bb		       1e		      .byte.b	30	;G
    528  54bc		       01		      .byte.b	1	;B
    529  54bd		       c8		      .byte.b	200	;R (40)
    530  54be		       5f		      .byte.b	95	;G
    531  54bf		       00		      .byte.b	0	;B
    532  54c0		       cd		      .byte.b	205	;R (39)
    533  54c1		       5e		      .byte.b	94	;G
    534  54c2		       00		      .byte.b	0	;B
    535  54c3		       c7		      .byte.b	199	;R (38)
    536  54c4		       5b		      .byte.b	91	;G
    537  54c5		       00		      .byte.b	0	;B
    538  54c6		       8b		      .byte.b	139	;R (37)
    539  54c7		       1c		      .byte.b	28	;G
    540  54c8		       00		      .byte.b	0	;B
    541  54c9		       81		      .byte.b	129	;R (36)
    542  54ca		       9a		      .byte.b	154	;G
    543  54cb		       04		      .byte.b	4	;B
    544  54cc		       8e		      .byte.b	142	;R (35)
    545  54cd		       9d		      .byte.b	157	;G
    546  54ce		       00		      .byte.b	0	;B
    547  54cf		       2b		      .byte.b	43	;R (34)
    548  54d0		       36		      .byte.b	54	;G
    549  54d1		       00		      .byte.b	0	;B
    550  54d2		       3a		      .byte.b	58	;R (33)
    551  54d3		       0d		      .byte.b	13	;G
    552  54d4		       00		      .byte.b	0	;B
    553  54d5		       3e		      .byte.b	62	;R (32)
    554  54d6		       85		      .byte.b	133	;G
    555  54d7		       40		      .byte.b	64	;B
    556  54d8		       fa		      .byte.b	250	;R (31)
    557  54d9		       17		      .byte.b	23	;G
    558  54da		       00		      .byte.b	0	;B
    559  54db		       ff		      .byte.b	255	;R (30)
    560  54dc		       03		      .byte.b	3	;G
    561  54dd		       00		      .byte.b	0	;B
    562  54de		       fc		      .byte.b	252	;R (29)
    563  54df		       93		      .byte.b	147	;G
    564  54e0		       00		      .byte.b	0	;B
    565  54e1		       f7		      .byte.b	247	;R (28)
    566  54e2		       81		      .byte.b	129	;G
    567  54e3		       08		      .byte.b	8	;B
    568  54e4		       ff		      .byte.b	255	;R (27)
    569  54e5		       03		      .byte.b	3	;G
    570  54e6		       00		      .byte.b	0	;B
    571  54e7		       fe		      .byte.b	254	;R (26)
    572  54e8		       2b		      .byte.b	43	;G
    573  54e9		       00		      .byte.b	0	;B
    574  54ea		       fe		      .byte.b	254	;R (25)
    575  54eb		       0a		      .byte.b	10	;G
    576  54ec		       00		      .byte.b	0	;B
    577  54ed		       fc		      .byte.b	252	;R (24)
    578  54ee		       4f		      .byte.b	79	;G
    579  54ef		       00		      .byte.b	0	;B
    580  54f0		       fc		      .byte.b	252	;R (23)
    581  54f1		       55		      .byte.b	85	;G
    582  54f2		       00		      .byte.b	0	;B
    583  54f3		       f8		      .byte.b	248	;R (22)
    584  54f4		       45		      .byte.b	69	;G
    585  54f5		       00		      .byte.b	0	;B
    586  54f6		       e8		      .byte.b	232	;R (21)
    587  54f7		       05		      .byte.b	5	;G
    588  54f8		       10		      .byte.b	16	;B
    589  54f9		       f8		      .byte.b	248	;R (20)
    590  54fa		       5b		      .byte.b	91	;G
    591  54fb		       00		      .byte.b	0	;B
    592  54fc		       f8		      .byte.b	248	;R (19)
    593  54fd		       1d		      .byte.b	29	;G
    594  54fe		       00		      .byte.b	0	;B
    595  54ff		       f0		      .byte.b	240	;R (18)
    596  5500		       55		      .byte.b	85	;G
    597  5501		       00		      .byte.b	0	;B
    598  5502		       f0		      .byte.b	240	;R (17)
    599  5503		       16		      .byte.b	22	;G
    600  5504		       00		      .byte.b	0	;B
    601  5505		       f0		      .byte.b	240	;R (16)
    602  5506		       b2		      .byte.b	178	;G
    603  5507		       00		      .byte.b	0	;B
    604  5508		       e0		      .byte.b	224	;R (15)
    605  5509		       0e		      .byte.b	14	;G
    606  550a		       10		      .byte.b	16	;B
    607  550b		       f0		      .byte.b	240	;R (14)
    608  550c		       93		      .byte.b	147	;G
    609  550d		       00		      .byte.b	0	;B
    610  550e		       e0		      .byte.b	224	;R (13)
    611  550f		       25		      .byte.b	37	;G
    612  5510		       00		      .byte.b	0	;B
    613  5511		       c0		      .byte.b	192	;R (12)
    614  5512		       e5		      .byte.b	229	;G
    615  5513		       00		      .byte.b	0	;B
    616  5514		       80		      .byte.b	128	;R (11)
    617  5515		       0e		      .byte.b	14	;G
    618  5516		       00		      .byte.b	0	;B
    619  5517		       c0		      .byte.b	192	;R (10)
    620  5518		       ca		      .byte.b	202	;G
    621  5519		       00		      .byte.b	0	;B
    622  551a		       84		      .byte.b	132	;R (9)
    623  551b		       8e		      .byte.b	142	;G
    624  551c		       00		      .byte.b	0	;B
    625  551d		       00		      .byte.b	0	;R (8)
    626  551e		       8e		      .byte.b	142	;G
    627  551f		       00		      .byte.b	0	;B
    628  5520		       00		      .byte.b	0	;R (7)
    629  5521		       15		      .byte.b	21	;G
    630  5522		       00		      .byte.b	0	;B
    631  5523		       00		      .byte.b	0	;R (6)
    632  5524		       14		      .byte.b	20	;G
    633  5525		       00		      .byte.b	0	;B
    634  5526		       00		      .byte.b	0	;R (5)
    635  5527		       14		      .byte.b	20	;G
    636  5528		       00		      .byte.b	0	;B
    637  5529		       00		      .byte.b	0	;R (4)
    638  552a		       0a		      .byte.b	10	;G
    639  552b		       00		      .byte.b	0	;B
    640  552c		       00		      .byte.b	0	;R (3)
    641  552d		       10		      .byte.b	16	;G
    642  552e		       00		      .byte.b	0	;B
    643  552f		       08		      .byte.b	8	;R (2)
    644  5530		       88		      .byte.b	136	;G
    645  5531		       00		      .byte.b	0	;B
    646  5532		       40		      .byte.b	64	;R (1)
    647  5533		       42		      .byte.b	66	;G
    648  5534		       00		      .byte.b	0	;B
    649  5535		       00		      .byte.b	0	;R (0)
    650  5536		       00		      .byte.b	0	;G
    651  5537		       00		      .byte.b	0	;B
    652  5538				   COL_3
    653  5538		       90		      .byte.b	144	;R (71)
    654  5539		       90		      .byte.b	144	;G
    655  553a		       00		      .byte.b	0	;B
    656  553b		       40		      .byte.b	64	;R (70)
    657  553c		       40		      .byte.b	64	;G
    658  553d		       00		      .byte.b	0	;B
    659  553e		       b0		      .byte.b	176	;R (69)
    660  553f		       b0		      .byte.b	176	;G
    661  5540		       00		      .byte.b	0	;B
    662  5541		       d0		      .byte.b	208	;R (68)
    663  5542		       00		      .byte.b	0	;G
    664  5543		       20		      .byte.b	32	;B
    665  5544		       f0		      .byte.b	240	;R (67)
    666  5545		       00		      .byte.b	0	;G
    667  5546		       00		      .byte.b	0	;B
    668  5547		       f0		      .byte.b	240	;R (66)
    669  5548		       d0		      .byte.b	208	;G
    670  5549		       00		      .byte.b	0	;B
    671  554a		       f0		      .byte.b	240	;R (65)
    672  554b		       00		      .byte.b	0	;G
    673  554c		       00		      .byte.b	0	;B
    674  554d		       f0		      .byte.b	240	;R (64)
    675  554e		       00		      .byte.b	0	;G
    676  554f		       00		      .byte.b	0	;B
    677  5550		       f0		      .byte.b	240	;R (63)
    678  5551		       50		      .byte.b	80	;G
    679  5552		       00		      .byte.b	0	;B
    680  5553		       f0		      .byte.b	240	;R (62)
    681  5554		       00		      .byte.b	0	;G
    682  5555		       00		      .byte.b	0	;B
    683  5556		       f0		      .byte.b	240	;R (61)
    684  5557		       a0		      .byte.b	160	;G
    685  5558		       00		      .byte.b	0	;B
    686  5559		       f0		      .byte.b	240	;R (60)
    687  555a		       00		      .byte.b	0	;G
    688  555b		       00		      .byte.b	0	;B
    689  555c		       f0		      .byte.b	240	;R (59)
    690  555d		       d0		      .byte.b	208	;G
    691  555e		       00		      .byte.b	0	;B
    692  555f		       f0		      .byte.b	240	;R (58)
    693  5560		       c0		      .byte.b	192	;G
    694  5561		       00		      .byte.b	0	;B
    695  5562		       f0		      .byte.b	240	;R (57)
    696  5563		       90		      .byte.b	144	;G
    697  5564		       00		      .byte.b	0	;B
    698  5565		       f0		      .byte.b	240	;R (56)
    699  5566		       80		      .byte.b	128	;G
    700  5567		       00		      .byte.b	0	;B
    701  5568		       f0		      .byte.b	240	;R (55)
    702  5569		       40		      .byte.b	64	;G
    703  556a		       00		      .byte.b	0	;B
    704  556b		       70		      .byte.b	112	;R (54)
    705  556c		       00		      .byte.b	0	;G
    706  556d		       80		      .byte.b	128	;B
    707  556e		       d0		      .byte.b	208	;R (53)
    708  556f		       00		      .byte.b	0	;G
    709  5570		       20		      .byte.b	32	;B
    710  5571		       f0		      .byte.b	240	;R (52)
    711  5572		       80		      .byte.b	128	;G
    712  5573		       00		      .byte.b	0	;B
    713  5574		       f0		      .byte.b	240	;R (51)
    714  5575		       00		      .byte.b	0	;G
    715  5576		       00		      .byte.b	0	;B
    716  5577		       f0		      .byte.b	240	;R (50)
    717  5578		       a0		      .byte.b	160	;G
    718  5579		       00		      .byte.b	0	;B
    719  557a		       f0		      .byte.b	240	;R (49)
    720  557b		       80		      .byte.b	128	;G
    721  557c		       00		      .byte.b	0	;B
    722  557d		       f0		      .byte.b	240	;R (48)
    723  557e		       40		      .byte.b	64	;G
    724  557f		       00		      .byte.b	0	;B
    725  5580		       f0		      .byte.b	240	;R (47)
    726  5581		       20		      .byte.b	32	;G
    727  5582		       00		      .byte.b	0	;B
    728  5583		       f0		      .byte.b	240	;R (46)
    729  5584		       00		      .byte.b	0	;G
    730  5585		       00		      .byte.b	0	;B
    731  5586		       f0		      .byte.b	240	;R (45)
    732  5587		       80		      .byte.b	128	;G
    733  5588		       00		      .byte.b	0	;B
    734  5589		       f0		      .byte.b	240	;R (44)
    735  558a		       00		      .byte.b	0	;G
    736  558b		       00		      .byte.b	0	;B
    737  558c		       f0		      .byte.b	240	;R (43)
    738  558d		       40		      .byte.b	64	;G
    739  558e		       00		      .byte.b	0	;B
    740  558f		       f0		      .byte.b	240	;R (42)
    741  5590		       00		      .byte.b	0	;G
    742  5591		       00		      .byte.b	0	;B
    743  5592		       f0		      .byte.b	240	;R (41)
    744  5593		       20		      .byte.b	32	;G
    745  5594		       00		      .byte.b	0	;B
    746  5595		       f0		      .byte.b	240	;R (40)
    747  5596		       20		      .byte.b	32	;G
    748  5597		       00		      .byte.b	0	;B
    749  5598		       f0		      .byte.b	240	;R (39)
    750  5599		       50		      .byte.b	80	;G
    751  559a		       00		      .byte.b	0	;B
    752  559b		       f0		      .byte.b	240	;R (38)
    753  559c		       10		      .byte.b	16	;G
    754  559d		       00		      .byte.b	0	;B
    755  559e		       70		      .byte.b	112	;R (37)
    756  559f		       80		      .byte.b	128	;G
    757  55a0		       80		      .byte.b	128	;B
    758  55a1		       f0		      .byte.b	240	;R (36)
    759  55a2		       50		      .byte.b	80	;G
    760  55a3		       00		      .byte.b	0	;B
    761  55a4		       f0		      .byte.b	240	;R (35)
    762  55a5		       00		      .byte.b	0	;G
    763  55a6		       00		      .byte.b	0	;B
    764  55a7		       f0		      .byte.b	240	;R (34)
    765  55a8		       40		      .byte.b	64	;G
    766  55a9		       00		      .byte.b	0	;B
    767  55aa		       f0		      .byte.b	240	;R (33)
    768  55ab		       10		      .byte.b	16	;G
    769  55ac		       00		      .byte.b	0	;B
    770  55ad		       f0		      .byte.b	240	;R (32)
    771  55ae		       b0		      .byte.b	176	;G
    772  55af		       00		      .byte.b	0	;B
    773  55b0		       e0		      .byte.b	224	;R (31)
    774  55b1		       00		      .byte.b	0	;G
    775  55b2		       10		      .byte.b	16	;B
    776  55b3		       e0		      .byte.b	224	;R (30)
    777  55b4		       40		      .byte.b	64	;G
    778  55b5		       00		      .byte.b	0	;B
    779  55b6		       e0		      .byte.b	224	;R (29)
    780  55b7		       20		      .byte.b	32	;G
    781  55b8		       00		      .byte.b	0	;B
    782  55b9		       c0		      .byte.b	192	;R (28)
    783  55ba		       00		      .byte.b	0	;G
    784  55bb		       00		      .byte.b	0	;B
    785  55bc		       c0		      .byte.b	192	;R (27)
    786  55bd		       10		      .byte.b	16	;G
    787  55be		       00		      .byte.b	0	;B
    788  55bf		       c0		      .byte.b	192	;R (26)
    789  55c0		       40		      .byte.b	64	;G
    790  55c1		       10		      .byte.b	16	;B
    791  55c2		       90		      .byte.b	144	;R (25)
    792  55c3		       00		      .byte.b	0	;G
    793  55c4		       00		      .byte.b	0	;B
    794  55c5		       f0		      .byte.b	240	;R (24)
    795  55c6		       60		      .byte.b	96	;G
    796  55c7		       00		      .byte.b	0	;B
    797  55c8		       f0		      .byte.b	240	;R (23)
    798  55c9		       00		      .byte.b	0	;G
    799  55ca		       00		      .byte.b	0	;B
    800  55cb		       f0		      .byte.b	240	;R (22)
    801  55cc		       40		      .byte.b	64	;G
    802  55cd		       00		      .byte.b	0	;B
    803  55ce		       f0		      .byte.b	240	;R (21)
    804  55cf		       10		      .byte.b	16	;G
    805  55d0		       00		      .byte.b	0	;B
    806  55d1		       f0		      .byte.b	240	;R (20)
    807  55d2		       00		      .byte.b	0	;G
    808  55d3		       00		      .byte.b	0	;B
    809  55d4		       f0		      .byte.b	240	;R (19)
    810  55d5		       60		      .byte.b	96	;G
    811  55d6		       00		      .byte.b	0	;B
    812  55d7		       f0		      .byte.b	240	;R (18)
    813  55d8		       20		      .byte.b	32	;G
    814  55d9		       00		      .byte.b	0	;B
    815  55da		       f0		      .byte.b	240	;R (17)
    816  55db		       50		      .byte.b	80	;G
    817  55dc		       00		      .byte.b	0	;B
    818  55dd		       f0		      .byte.b	240	;R (16)
    819  55de		       40		      .byte.b	64	;G
    820  55df		       00		      .byte.b	0	;B
    821  55e0		       f0		      .byte.b	240	;R (15)
    822  55e1		       80		      .byte.b	128	;G
    823  55e2		       00		      .byte.b	0	;B
    824  55e3		       f0		      .byte.b	240	;R (14)
    825  55e4		       40		      .byte.b	64	;G
    826  55e5		       00		      .byte.b	0	;B
    827  55e6		       f0		      .byte.b	240	;R (13)
    828  55e7		       00		      .byte.b	0	;G
    829  55e8		       00		      .byte.b	0	;B
    830  55e9		       f0		      .byte.b	240	;R (12)
    831  55ea		       10		      .byte.b	16	;G
    832  55eb		       00		      .byte.b	0	;B
    833  55ec		       f0		      .byte.b	240	;R (11)
    834  55ed		       50		      .byte.b	80	;G
    835  55ee		       00		      .byte.b	0	;B
    836  55ef		       f0		      .byte.b	240	;R (10)
    837  55f0		       00		      .byte.b	0	;G
    838  55f1		       00		      .byte.b	0	;B
    839  55f2		       f0		      .byte.b	240	;R (9)
    840  55f3		       b0		      .byte.b	176	;G
    841  55f4		       00		      .byte.b	0	;B
    842  55f5		       f0		      .byte.b	240	;R (8)
    843  55f6		       90		      .byte.b	144	;G
    844  55f7		       00		      .byte.b	0	;B
    845  55f8		       e0		      .byte.b	224	;R (7)
    846  55f9		       e0		      .byte.b	224	;G
    847  55fa		       00		      .byte.b	0	;B
    848  55fb		       f0		      .byte.b	240	;R (6)
    849  55fc		       d0		      .byte.b	208	;G
    850  55fd		       00		      .byte.b	0	;B
    851  55fe		       60		      .byte.b	96	;R (5)
    852  55ff		       00		      .byte.b	0	;G
    853  5600		       00		      .byte.b	0	;B
    854  5601		       60		      .byte.b	96	;R (4)
    855  5602		       40		      .byte.b	64	;G
    856  5603		       00		      .byte.b	0	;B
    857  5604		       40		      .byte.b	64	;R (3)
    858  5605		       50		      .byte.b	80	;G
    859  5606		       00		      .byte.b	0	;B
    860  5607		       00		      .byte.b	0	;R (2)
    861  5608		       00		      .byte.b	0	;G
    862  5609		       00		      .byte.b	0	;B
    863  560a		       00		      .byte.b	0	;R (1)
    864  560b		       80		      .byte.b	128	;G
    865  560c		       00		      .byte.b	0	;B
    866  560d		       00		      .byte.b	0	;R (0)
    867  560e		       00		      .byte.b	0	;G
    868  560f		       00		      .byte.b	0	;B
    869  5610				   COL_4
    870  5610		       25		      .byte.b	37	;R (71)
    871  5611		       25		      .byte.b	37	;G
    872  5612		       00		      .byte.b	0	;B
    873  5613		       48		      .byte.b	72	;R (70)
    874  5614		       48		      .byte.b	72	;G
    875  5615		       00		      .byte.b	0	;B
    876  5616		       25		      .byte.b	37	;R (69)
    877  5617		       25		      .byte.b	37	;G
    878  5618		       88		      .byte.b	136	;B
    879  5619		       ff		      .byte.b	255	;R (68)
    880  561a		       00		      .byte.b	0	;G
    881  561b		       00		      .byte.b	0	;B
    882  561c		       ff		      .byte.b	255	;R (67)
    883  561d		       04		      .byte.b	4	;G
    884  561e		       00		      .byte.b	0	;B
    885  561f		       ef		      .byte.b	239	;R (66)
    886  5620		       40		      .byte.b	64	;G
    887  5621		       10		      .byte.b	16	;B
    888  5622		       ff		      .byte.b	255	;R (65)
    889  5623		       00		      .byte.b	0	;G
    890  5624		       00		      .byte.b	0	;B
    891  5625		       ff		      .byte.b	255	;R (64)
    892  5626		       02		      .byte.b	2	;G
    893  5627		       00		      .byte.b	0	;B
    894  5628		       ff		      .byte.b	255	;R (63)
    895  5629		       20		      .byte.b	32	;G
    896  562a		       00		      .byte.b	0	;B
    897  562b		       ff		      .byte.b	255	;R (62)
    898  562c		       a5		      .byte.b	165	;G
    899  562d		       00		      .byte.b	0	;B
    900  562e		       ff		      .byte.b	255	;R (61)
    901  562f		       09		      .byte.b	9	;G
    902  5630		       00		      .byte.b	0	;B
    903  5631		       ff		      .byte.b	255	;R (60)
    904  5632		       00		      .byte.b	0	;G
    905  5633		       00		      .byte.b	0	;B
    906  5634		       7f		      .byte.b	127	;R (59)
    907  5635		       42		      .byte.b	66	;G
    908  5636		       80		      .byte.b	128	;B
    909  5637		       ff		      .byte.b	255	;R (58)
    910  5638		       88		      .byte.b	136	;G
    911  5639		       00		      .byte.b	0	;B
    912  563a		       ff		      .byte.b	255	;R (57)
    913  563b		       40		      .byte.b	64	;G
    914  563c		       00		      .byte.b	0	;B
    915  563d		       ff		      .byte.b	255	;R (56)
    916  563e		       09		      .byte.b	9	;G
    917  563f		       00		      .byte.b	0	;B
    918  5640		       7f		      .byte.b	127	;R (55)
    919  5641		       01		      .byte.b	1	;G
    920  5642		       80		      .byte.b	128	;B
    921  5643		       ff		      .byte.b	255	;R (54)
    922  5644		       91		      .byte.b	145	;G
    923  5645		       00		      .byte.b	0	;B
    924  5646		       fe		      .byte.b	254	;R (53)
    925  5647		       81		      .byte.b	129	;G
    926  5648		       00		      .byte.b	0	;B
    927  5649		       fe		      .byte.b	254	;R (52)
    928  564a		       20		      .byte.b	32	;G
    929  564b		       00		      .byte.b	0	;B
    930  564c		       ff		      .byte.b	255	;R (51)
    931  564d		       03		      .byte.b	3	;G
    932  564e		       00		      .byte.b	0	;B
    933  564f		       ff		      .byte.b	255	;R (50)
    934  5650		       83		      .byte.b	131	;G
    935  5651		       00		      .byte.b	0	;B
    936  5652		       fe		      .byte.b	254	;R (49)
    937  5653		       90		      .byte.b	144	;G
    938  5654		       00		      .byte.b	0	;B
    939  5655		       fe		      .byte.b	254	;R (48)
    940  5656		       83		      .byte.b	131	;G
    941  5657		       00		      .byte.b	0	;B
    942  5658		       7e		      .byte.b	126	;R (47)
    943  5659		       12		      .byte.b	18	;G
    944  565a		       80		      .byte.b	128	;B
    945  565b		       fc		      .byte.b	252	;R (46)
    946  565c		       00		      .byte.b	0	;G
    947  565d		       00		      .byte.b	0	;B
    948  565e		       fe		      .byte.b	254	;R (45)
    949  565f		       07		      .byte.b	7	;G
    950  5660		       00		      .byte.b	0	;B
    951  5661		       ef		      .byte.b	239	;R (44)
    952  5662		       03		      .byte.b	3	;G
    953  5663		       10		      .byte.b	16	;B
    954  5664		       ff		      .byte.b	255	;R (43)
    955  5665		       40		      .byte.b	64	;G
    956  5666		       00		      .byte.b	0	;B
    957  5667		       ff		      .byte.b	255	;R (42)
    958  5668		       01		      .byte.b	1	;G
    959  5669		       00		      .byte.b	0	;B
    960  566a		       ff		      .byte.b	255	;R (41)
    961  566b		       01		      .byte.b	1	;G
    962  566c		       00		      .byte.b	0	;B
    963  566d		       bf		      .byte.b	191	;R (40)
    964  566e		       01		      .byte.b	1	;G
    965  566f		       40		      .byte.b	64	;B
    966  5670		       f7		      .byte.b	247	;R (39)
    967  5671		       80		      .byte.b	128	;G
    968  5672		       08		      .byte.b	8	;B
    969  5673		       ff		      .byte.b	255	;R (38)
    970  5674		       40		      .byte.b	64	;G
    971  5675		       00		      .byte.b	0	;B
    972  5676		       ff		      .byte.b	255	;R (37)
    973  5677		       00		      .byte.b	0	;G
    974  5678		       00		      .byte.b	0	;B
    975  5679		       ff		      .byte.b	255	;R (36)
    976  567a		       40		      .byte.b	64	;G
    977  567b		       00		      .byte.b	0	;B
    978  567c		       ff		      .byte.b	255	;R (35)
    979  567d		       a1		      .byte.b	161	;G
    980  567e		       00		      .byte.b	0	;B
    981  567f		       7f		      .byte.b	127	;R (34)
    982  5680		       05		      .byte.b	5	;G
    983  5681		       80		      .byte.b	128	;B
    984  5682		       ff		      .byte.b	255	;R (33)
    985  5683		       21		      .byte.b	33	;G
    986  5684		       00		      .byte.b	0	;B
    987  5685		       bf		      .byte.b	191	;R (32)
    988  5686		       40		      .byte.b	64	;G
    989  5687		       40		      .byte.b	64	;B
    990  5688		       ff		      .byte.b	255	;R (31)
    991  5689		       61		      .byte.b	97	;G
    992  568a		       00		      .byte.b	0	;B
    993  568b		       7f		      .byte.b	127	;R (30)
    994  568c		       81		      .byte.b	129	;G
    995  568d		       80		      .byte.b	128	;B
    996  568e		       f7		      .byte.b	247	;R (29)
    997  568f		       60		      .byte.b	96	;G
    998  5690		       08		      .byte.b	8	;B
    999  5691		       ff		      .byte.b	255	;R (28)
   1000  5692		       81		      .byte.b	129	;G
   1001  5693		       00		      .byte.b	0	;B
   1002  5694		       ef		      .byte.b	239	;R (27)
   1003  5695		       40		      .byte.b	64	;G
   1004  5696		       10		      .byte.b	16	;B
   1005  5697		       ff		      .byte.b	255	;R (26)
   1006  5698		       60		      .byte.b	96	;G
   1007  5699		       00		      .byte.b	0	;B
   1008  569a		       ff		      .byte.b	255	;R (25)
   1009  569b		       18		      .byte.b	24	;G
   1010  569c		       00		      .byte.b	0	;B
   1011  569d		       ff		      .byte.b	255	;R (24)
   1012  569e		       20		      .byte.b	32	;G
   1013  569f		       00		      .byte.b	0	;B
   1014  56a0		       ff		      .byte.b	255	;R (23)
   1015  56a1		       8a		      .byte.b	138	;G
   1016  56a2		       00		      .byte.b	0	;B
   1017  56a3		       f7		      .byte.b	247	;R (22)
   1018  56a4		       10		      .byte.b	16	;G
   1019  56a5		       08		      .byte.b	8	;B
   1020  56a6		       ff		      .byte.b	255	;R (21)
   1021  56a7		       04		      .byte.b	4	;G
   1022  56a8		       00		      .byte.b	0	;B
   1023  56a9		       df		      .byte.b	223	;R (20)
   1024  56aa		       10		      .byte.b	16	;G
   1025  56ab		       20		      .byte.b	32	;B
   1026  56ac		       ff		      .byte.b	255	;R (19)
   1027  56ad		       90		      .byte.b	144	;G
   1028  56ae		       00		      .byte.b	0	;B
   1029  56af		       ff		      .byte.b	255	;R (18)
   1030  56b0		       12		      .byte.b	18	;G
   1031  56b1		       00		      .byte.b	0	;B
   1032  56b2		       ff		      .byte.b	255	;R (17)
   1033  56b3		       00		      .byte.b	0	;G
   1034  56b4		       00		      .byte.b	0	;B
   1035  56b5		       ff		      .byte.b	255	;R (16)
   1036  56b6		       45		      .byte.b	69	;G
   1037  56b7		       00		      .byte.b	0	;B
   1038  56b8		       ff		      .byte.b	255	;R (15)
   1039  56b9		       10		      .byte.b	16	;G
   1040  56ba		       00		      .byte.b	0	;B
   1041  56bb		       ff		      .byte.b	255	;R (14)
   1042  56bc		       23		      .byte.b	35	;G
   1043  56bd		       00		      .byte.b	0	;B
   1044  56be		       fc		      .byte.b	252	;R (13)
   1045  56bf		       12		      .byte.b	18	;G
   1046  56c0		       00		      .byte.b	0	;B
   1047  56c1		       fc		      .byte.b	252	;R (12)
   1048  56c2		       20		      .byte.b	32	;G
   1049  56c3		       00		      .byte.b	0	;B
   1050  56c4		       fe		      .byte.b	254	;R (11)
   1051  56c5		       46		      .byte.b	70	;G
   1052  56c6		       00		      .byte.b	0	;B
   1053  56c7		       f8		      .byte.b	248	;R (10)
   1054  56c8		       48		      .byte.b	72	;G
   1055  56c9		       00		      .byte.b	0	;B
   1056  56ca		       f0		      .byte.b	240	;R (9)
   1057  56cb		       04		      .byte.b	4	;G
   1058  56cc		       00		      .byte.b	0	;B
   1059  56cd		       e0		      .byte.b	224	;R (8)
   1060  56ce		       20		      .byte.b	32	;G
   1061  56cf		       00		      .byte.b	0	;B
   1062  56d0		       e0		      .byte.b	224	;R (7)
   1063  56d1		       29		      .byte.b	41	;G
   1064  56d2		       00		      .byte.b	0	;B
   1065  56d3		       e0		      .byte.b	224	;R (6)
   1066  56d4		       20		      .byte.b	32	;G
   1067  56d5		       00		      .byte.b	0	;B
   1068  56d6		       e0		      .byte.b	224	;R (5)
   1069  56d7		       84		      .byte.b	132	;G
   1070  56d8		       00		      .byte.b	0	;B
   1071  56d9		       60		      .byte.b	96	;R (4)
   1072  56da		       40		      .byte.b	64	;G
   1073  56db		       00		      .byte.b	0	;B
   1074  56dc		       00		      .byte.b	0	;R (3)
   1075  56dd		       88		      .byte.b	136	;G
   1076  56de		       00		      .byte.b	0	;B
   1077  56df		       00		      .byte.b	0	;R (2)
   1078  56e0		       11		      .byte.b	17	;G
   1079  56e1		       00		      .byte.b	0	;B
   1080  56e2		       24		      .byte.b	36	;R (1)
   1081  56e3		       24		      .byte.b	36	;G
   1082  56e4		       00		      .byte.b	0	;B
   1083  56e5		       00		      .byte.b	0	;R (0)
   1084  56e6		       00		      .byte.b	0	;G
   1085  56e7		       00		      .byte.b	0	;B
   1086  56e8				   COL_5
   1087  56e8		       02		      .byte.b	2	;R (71)
   1088  56e9		       12		      .byte.b	18	;G
   1089  56ea		       00		      .byte.b	0	;B
   1090  56eb		       00		      .byte.b	0	;R (70)
   1091  56ec		       00		      .byte.b	0	;G
   1092  56ed		       00		      .byte.b	0	;B
   1093  56ee		       00		      .byte.b	0	;R (69)
   1094  56ef		       02		      .byte.b	2	;G
   1095  56f0		       00		      .byte.b	0	;B
   1096  56f1		       03		      .byte.b	3	;R (68)
   1097  56f2		       12		      .byte.b	18	;G
   1098  56f3		       00		      .byte.b	0	;B
   1099  56f4		       0b		      .byte.b	11	;R (67)
   1100  56f5		       09		      .byte.b	9	;G
   1101  56f6		       00		      .byte.b	0	;B
   1102  56f7		       07		      .byte.b	7	;R (66)
   1103  56f8		       05		      .byte.b	5	;G
   1104  56f9		       00		      .byte.b	0	;B
   1105  56fa		       03		      .byte.b	3	;R (65)
   1106  56fb		       06		      .byte.b	6	;G
   1107  56fc		       00		      .byte.b	0	;B
   1108  56fd		       01		      .byte.b	1	;R (64)
   1109  56fe		       20		      .byte.b	32	;G
   1110  56ff		       00		      .byte.b	0	;B
   1111  5700		       03		      .byte.b	3	;R (63)
   1112  5701		       03		      .byte.b	3	;G
   1113  5702		       00		      .byte.b	0	;B
   1114  5703		       03		      .byte.b	3	;R (62)
   1115  5704		       0a		      .byte.b	10	;G
   1116  5705		       00		      .byte.b	0	;B
   1117  5706		       03		      .byte.b	3	;R (61)
   1118  5707		       02		      .byte.b	2	;G
   1119  5708		       00		      .byte.b	0	;B
   1120  5709		       03		      .byte.b	3	;R (60)
   1121  570a		       00		      .byte.b	0	;G
   1122  570b		       00		      .byte.b	0	;B
   1123  570c		       03		      .byte.b	3	;R (59)
   1124  570d		       0a		      .byte.b	10	;G
   1125  570e		       00		      .byte.b	0	;B
   1126  570f		       03		      .byte.b	3	;R (58)
   1127  5710		       02		      .byte.b	2	;G
   1128  5711		       00		      .byte.b	0	;B
   1129  5712		       01		      .byte.b	1	;R (57)
   1130  5713		       03		      .byte.b	3	;G
   1131  5714		       00		      .byte.b	0	;B
   1132  5715		       01		      .byte.b	1	;R (56)
   1133  5716		       01		      .byte.b	1	;G
   1134  5717		       00		      .byte.b	0	;B
   1135  5718		       00		      .byte.b	0	;R (55)
   1136  5719		       25		      .byte.b	37	;G
   1137  571a		       00		      .byte.b	0	;B
   1138  571b		       00		      .byte.b	0	;R (54)
   1139  571c		       00		      .byte.b	0	;G
   1140  571d		       00		      .byte.b	0	;B
   1141  571e		       00		      .byte.b	0	;R (53)
   1142  571f		       20		      .byte.b	32	;G
   1143  5720		       00		      .byte.b	0	;B
   1144  5721		       00		      .byte.b	0	;R (52)
   1145  5722		       08		      .byte.b	8	;G
   1146  5723		       00		      .byte.b	0	;B
   1147  5724		       00		      .byte.b	0	;R (51)
   1148  5725		       02		      .byte.b	2	;G
   1149  5726		       00		      .byte.b	0	;B
   1150  5727		       00		      .byte.b	0	;R (50)
   1151  5728		       40		      .byte.b	64	;G
   1152  5729		       00		      .byte.b	0	;B
   1153  572a		       00		      .byte.b	0	;R (49)
   1154  572b		       11		      .byte.b	17	;G
   1155  572c		       00		      .byte.b	0	;B
   1156  572d		       00		      .byte.b	0	;R (48)
   1157  572e		       00		      .byte.b	0	;G
   1158  572f		       00		      .byte.b	0	;B
   1159  5730		       00		      .byte.b	0	;R (47)
   1160  5731		       20		      .byte.b	32	;G
   1161  5732		       00		      .byte.b	0	;B
   1162  5733		       00		      .byte.b	0	;R (46)
   1163  5734		       08		      .byte.b	8	;G
   1164  5735		       00		      .byte.b	0	;B
   1165  5736		       00		      .byte.b	0	;R (45)
   1166  5737		       00		      .byte.b	0	;G
   1167  5738		       00		      .byte.b	0	;B
   1168  5739		       00		      .byte.b	0	;R (44)
   1169  573a		       24		      .byte.b	36	;G
   1170  573b		       00		      .byte.b	0	;B
   1171  573c		       00		      .byte.b	0	;R (43)
   1172  573d		       00		      .byte.b	0	;G
   1173  573e		       00		      .byte.b	0	;B
   1174  573f		       00		      .byte.b	0	;R (42)
   1175  5740		       04		      .byte.b	4	;G
   1176  5741		       00		      .byte.b	0	;B
   1177  5742		       00		      .byte.b	0	;R (41)
   1178  5743		       21		      .byte.b	33	;G
   1179  5744		       00		      .byte.b	0	;B
   1180  5745		       01		      .byte.b	1	;R (40)
   1181  5746		       01		      .byte.b	1	;G
   1182  5747		       00		      .byte.b	0	;B
   1183  5748		       01		      .byte.b	1	;R (39)
   1184  5749		       25		      .byte.b	37	;G
   1185  574a		       00		      .byte.b	0	;B
   1186  574b		       01		      .byte.b	1	;R (38)
   1187  574c		       01		      .byte.b	1	;G
   1188  574d		       00		      .byte.b	0	;B
   1189  574e		       03		      .byte.b	3	;R (37)
   1190  574f		       23		      .byte.b	35	;G
   1191  5750		       00		      .byte.b	0	;B
   1192  5751		       03		      .byte.b	3	;R (36)
   1193  5752		       13		      .byte.b	19	;G
   1194  5753		       00		      .byte.b	0	;B
   1195  5754		       01		      .byte.b	1	;R (35)
   1196  5755		       02		      .byte.b	2	;G
   1197  5756		       00		      .byte.b	0	;B
   1198  5757		       01		      .byte.b	1	;R (34)
   1199  5758		       10		      .byte.b	16	;G
   1200  5759		       00		      .byte.b	0	;B
   1201  575a		       03		      .byte.b	3	;R (33)
   1202  575b		       02		      .byte.b	2	;G
   1203  575c		       00		      .byte.b	0	;B
   1204  575d		       01		      .byte.b	1	;R (32)
   1205  575e		       08		      .byte.b	8	;G
   1206  575f		       00		      .byte.b	0	;B
   1207  5760		       03		      .byte.b	3	;R (31)
   1208  5761		       20		      .byte.b	32	;G
   1209  5762		       00		      .byte.b	0	;B
   1210  5763		       03		      .byte.b	3	;R (30)
   1211  5764		       00		      .byte.b	0	;G
   1212  5765		       00		      .byte.b	0	;B
   1213  5766		       03		      .byte.b	3	;R (29)
   1214  5767		       10		      .byte.b	16	;G
   1215  5768		       00		      .byte.b	0	;B
   1216  5769		       03		      .byte.b	3	;R (28)
   1217  576a		       00		      .byte.b	0	;G
   1218  576b		       00		      .byte.b	0	;B
   1219  576c		       07		      .byte.b	7	;R (27)
   1220  576d		       0e		      .byte.b	14	;G
   1221  576e		       00		      .byte.b	0	;B
   1222  576f		       03		      .byte.b	3	;R (26)
   1223  5770		       41		      .byte.b	65	;G
   1224  5771		       00		      .byte.b	0	;B
   1225  5772		       07		      .byte.b	7	;R (25)
   1226  5773		       04		      .byte.b	4	;G
   1227  5774		       00		      .byte.b	0	;B
   1228  5775		       03		      .byte.b	3	;R (24)
   1229  5776		       21		      .byte.b	33	;G
   1230  5777		       00		      .byte.b	0	;B
   1231  5778		       03		      .byte.b	3	;R (23)
   1232  5779		       04		      .byte.b	4	;G
   1233  577a		       00		      .byte.b	0	;B
   1234  577b		       03		      .byte.b	3	;R (22)
   1235  577c		       02		      .byte.b	2	;G
   1236  577d		       00		      .byte.b	0	;B
   1237  577e		       03		      .byte.b	3	;R (21)
   1238  577f		       26		      .byte.b	38	;G
   1239  5780		       00		      .byte.b	0	;B
   1240  5781		       01		      .byte.b	1	;R (20)
   1241  5782		       01		      .byte.b	1	;G
   1242  5783		       00		      .byte.b	0	;B
   1243  5784		       00		      .byte.b	0	;R (19)
   1244  5785		       21		      .byte.b	33	;G
   1245  5786		       00		      .byte.b	0	;B
   1246  5787		       01		      .byte.b	1	;R (18)
   1247  5788		       09		      .byte.b	9	;G
   1248  5789		       00		      .byte.b	0	;B
   1249  578a		       23		      .byte.b	35	;R (17)
   1250  578b		       22		      .byte.b	34	;G
   1251  578c		       00		      .byte.b	0	;B
   1252  578d		       01		      .byte.b	1	;R (16)
   1253  578e		       01		      .byte.b	1	;G
   1254  578f		       00		      .byte.b	0	;B
   1255  5790		       00		      .byte.b	0	;R (15)
   1256  5791		       29		      .byte.b	41	;G
   1257  5792		       00		      .byte.b	0	;B
   1258  5793		       00		      .byte.b	0	;R (14)
   1259  5794		       00		      .byte.b	0	;G
   1260  5795		       00		      .byte.b	0	;B
   1261  5796		       00		      .byte.b	0	;R (13)
   1262  5797		       04		      .byte.b	4	;G
   1263  5798		       00		      .byte.b	0	;B
   1264  5799		       00		      .byte.b	0	;R (12)
   1265  579a		       20		      .byte.b	32	;G
   1266  579b		       00		      .byte.b	0	;B
   1267  579c		       10		      .byte.b	16	;R (11)
   1268  579d		       12		      .byte.b	18	;G
   1269  579e		       00		      .byte.b	0	;B
   1270  579f		       00		      .byte.b	0	;R (10)
   1271  57a0		       00		      .byte.b	0	;G
   1272  57a1		       00		      .byte.b	0	;B
   1273  57a2		       00		      .byte.b	0	;R (9)
   1274  57a3		       21		      .byte.b	33	;G
   1275  57a4		       00		      .byte.b	0	;B
   1276  57a5		       00		      .byte.b	0	;R (8)
   1277  57a6		       08		      .byte.b	8	;G
   1278  57a7		       00		      .byte.b	0	;B
   1279  57a8		       00		      .byte.b	0	;R (7)
   1280  57a9		       20		      .byte.b	32	;G
   1281  57aa		       00		      .byte.b	0	;B
   1282  57ab		       00		      .byte.b	0	;R (6)
   1283  57ac		       04		      .byte.b	4	;G
   1284  57ad		       00		      .byte.b	0	;B
   1285  57ae		       20		      .byte.b	32	;R (5)
   1286  57af		       20		      .byte.b	32	;G
   1287  57b0		       00		      .byte.b	0	;B
   1288  57b1		       00		      .byte.b	0	;R (4)
   1289  57b2		       09		      .byte.b	9	;G
   1290  57b3		       00		      .byte.b	0	;B
   1291  57b4		       00		      .byte.b	0	;R (3)
   1292  57b5		       00		      .byte.b	0	;G
   1293  57b6		       00		      .byte.b	0	;B
   1294  57b7		       00		      .byte.b	0	;R (2)
   1295  57b8		       48		      .byte.b	72	;G
   1296  57b9		       00		      .byte.b	0	;B
   1297  57ba		       02		      .byte.b	2	;R (1)
   1298  57bb		       02		      .byte.b	2	;G
   1299  57bc		       00		      .byte.b	0	;B
   1300  57bd		       00		      .byte.b	0	;R (0)
   1301  57be		       00		      .byte.b	0	;G
   1302  57bf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  57c0							;    include "pizza.asm"
    263  57c0
      0  57c0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  57c0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  57c0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  57c0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  57c0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  57c0				  -	      ERR
      6  57c0					      endif
------- FILE ./chess.asm
    359  57c0
    360  57c0							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 2
      0  57c0					      include	"Handler_BANK1.asm"
      1  57c0							; Copyright (C)2020 Andrew Davie
      2  57c0
      3  57c0							;---------------------------------------------------------------------------------------------------
      4  57c0
      0  57c0					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  57c0
      2  57c0
      3  57c0
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  5bdf ????				      SEG	MOVES
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   MOVES      SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	MOVES
      7  5800
      8  5800
      9  5800							; Board is a 10 x 12 object which simplifies the generation of moves
     10  5800							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     11  5800							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     12  5800							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     13  5800
     14  5800							;     X12 numbering
     15  5800							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     16  5800							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     17  5800							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     18  5800							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     19  5800							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     20  5800							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     21  5800							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     22  5800							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     23  5800							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     24  5800							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     25  5800							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     26  5800							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     27  5800							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     28  5800							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     29  5800							;	0   1	2   3	4   5	6   7	8   9
     30  5800							;		A   B	C   D	E   F	G   H
     31  5800
     32  5800							;     HEX X12
     33  5800							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     34  5800							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     35  5800							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     36  5800							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     37  5800							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     38  5800							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     39  5800							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     40  5800							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     41  5800							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     42  5800							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     43  5800							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     44  5800							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     45  5800							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     46  5800							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     47  5800							;	0   1	2   3	4   5	6   7	8   9
     48  5800							;		A   B	C   D	E   F	G   H
     49  5800
     50  5800
     51  5800							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     52  5800							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     53  5800							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     54  5800							; be re-used for something else - we just need to guarantee there are 22 of them there
     55  5800
     56  5800		       00 00 00 00*	      ds	22	; so indexing of "ValidSquare-22,x" won't fail
     57  5816
     58  5816							; Note, we will never index INTO the above bytes - x will always be >= 22
     59  5816							; We just need to make sure that the actual indexing will not have an address before
     60  5816							; the index of outside the page.
     61  5816
      0  5816					      OPTIONAL_PAGEBREAK	"ValidSquare", 120 + 80
     10  5816					      LIST	ON
      0  5816					      DEF	ValidSquare
      1  5816				   BANK_ValidSquare SET	_CURRENT_BANK
      2  5816
      3  5816				   ValidSquare
     64  5816
     65  5816
     66  5816							; Use this table to
     67  5816							;   a) Determine if a square is valid (-1 = NO)
     68  5816							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     69  5816							;	if a white pawn on square "x" can move "up" the board.
     70  5816
     71  5816		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     72  5820		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     73  582a		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     74  5834		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     75  583e		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     76  5848		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     77  5852		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     78  585c		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     79  5866		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     80  5870		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     81  587a
      0  587a					      DEF	Board
      1  587a				   BANK_Board SET	_CURRENT_BANK
      2  587a
      3  587a				   Board
     83  587a
     84  587a							; A 10X10... we should never write using invalid square
     85  587a							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     86  587a							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     87  587a
     88  587a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     89  5884		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     90  588e
     91  588e					      REPEAT	8
     92  588e		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  588e					      REPEND
     92  5898		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  5898					      REPEND
     92  58a2		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58a2					      REPEND
     92  58ac		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58ac					      REPEND
     92  58b6		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58b6					      REPEND
     92  58c0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58c0					      REPEND
     92  58ca		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58ca					      REPEND
     92  58d4		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     93  58de					      REPEND
     94  58de
     95  58de							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     96  58de
     97  58de							; PARANOIA... following not used, but there in case above violated
     98  58de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
     99  58de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    100  58de
    101  58de							;---------------------------------------------------------------------------------------------------
    102  58de
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 2
      0  58de					      include	"Handler_QUEEN.asm"
      1  58de							; Copyright (C)2020 Andrew Davie
      2  58de
      3  58de							;---------------------------------------------------------------------------------------------------
      4  58de							; QUEEN
      5  58de							;---------------------------------------------------------------------------------------------------
      6  58de
      0  58de					      DEF	Handle_QUEEN
      1  58de				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  58de
      3  58de				   Handle_QUEEN
      8  58de
      9  58de							; Pass...
     10  58de							; x = currentSquare (square the piece is on)
     11  58de							; currentPiece (with flags/colour attached)
     12  58de
      0  58de					      MOVE_TOWARDS	_DOWN+_LEFT
      1  58de					      SUBROUTINE
      2  58de
      3  58de
      4  58de		       a6 98		      ldx	currentSquare
      5  58e0		       d0 1b		      bne	.project
      6  58e2
Handler_QUEEN.asm (13): error: Label mismatch...
 --> 445.empty f0fa                  
      7  58e2		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (13): error: Label mismatch...
 --> 445.project f0fd                  
      8  58e5		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  58e8		       30 24		      bmi	.invalid
     10  58ea		       b9 7a f0 	      lda	Board,y
     11  58ed		       f0 f3		      beq	.empty
     12  58ef		       45 97		      eor	currentPiece
     13  58f1		       10 1b		      bpl	.invalid
     14  58f3		       20 cc fc 	      jsr	AddMove
     15  58f6
Handler_QUEEN.asm (13): error: Label mismatch...
 --> 445.invalid f10e                  
     16  58f6				   .invalid
      0  58f6					      MOVE_TOWARDS	_DOWN
      1  58f6					      SUBROUTINE
      2  58f6
      3  58f6
      4  58f6		       a6 98		      ldx	currentSquare
      5  58f8		       d0 1b		      bne	.project
      6  58fa
Handler_QUEEN.asm (14): error: Label mismatch...
 --> 447.empty f112                  
      7  58fa		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (14): error: Label mismatch...
 --> 447.project f115                  
      8  58fd		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  5900		       30 24		      bmi	.invalid
     10  5902		       b9 7a f0 	      lda	Board,y
     11  5905		       f0 f3		      beq	.empty
     12  5907		       45 97		      eor	currentPiece
     13  5909		       10 1b		      bpl	.invalid
     14  590b		       20 cc fc 	      jsr	AddMove
     15  590e
Handler_QUEEN.asm (14): error: Label mismatch...
 --> 447.invalid f126                  
     16  590e				   .invalid
      0  590e					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  590e					      SUBROUTINE
      2  590e
      3  590e
      4  590e		       a6 98		      ldx	currentSquare
      5  5910		       d0 1b		      bne	.project
      6  5912
Handler_QUEEN.asm (15): error: Label mismatch...
 --> 449.empty f12a                  
      7  5912		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (15): error: Label mismatch...
 --> 449.project f12d                  
      8  5915		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  5918		       30 24		      bmi	.invalid
     10  591a		       b9 7a f0 	      lda	Board,y
     11  591d		       f0 f3		      beq	.empty
     12  591f		       45 97		      eor	currentPiece
     13  5921		       10 1b		      bpl	.invalid
     14  5923		       20 cc fc 	      jsr	AddMove
     15  5926
Handler_QUEEN.asm (15): error: Label mismatch...
 --> 449.invalid f13e                  
     16  5926				   .invalid
      0  5926					      MOVE_TOWARDS	_RIGHT
      1  5926					      SUBROUTINE
      2  5926
      3  5926
      4  5926		       a6 98		      ldx	currentSquare
      5  5928		       d0 1b		      bne	.project
      6  592a
Handler_QUEEN.asm (16): error: Label mismatch...
 --> 451.empty f142                  
      7  592a		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (16): error: Label mismatch...
 --> 451.project f145                  
      8  592d		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  5930		       30 24		      bmi	.invalid
     10  5932		       b9 7a f0 	      lda	Board,y
     11  5935		       f0 f3		      beq	.empty
     12  5937		       45 97		      eor	currentPiece
     13  5939		       10 1b		      bpl	.invalid
     14  593b		       20 cc fc 	      jsr	AddMove
     15  593e
Handler_QUEEN.asm (16): error: Label mismatch...
 --> 451.invalid f156                  
     16  593e				   .invalid
      0  593e					      MOVE_TOWARDS	_UP+_RIGHT
      1  593e					      SUBROUTINE
      2  593e
      3  593e
      4  593e		       a6 98		      ldx	currentSquare
      5  5940		       d0 1b		      bne	.project
      6  5942
Handler_QUEEN.asm (17): error: Label mismatch...
 --> 453.empty f15a                  
      7  5942		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (17): error: Label mismatch...
 --> 453.project f15d                  
      8  5945		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  5948		       30 24		      bmi	.invalid
     10  594a		       b9 7a f0 	      lda	Board,y
     11  594d		       f0 f3		      beq	.empty
     12  594f		       45 97		      eor	currentPiece
     13  5951		       10 1b		      bpl	.invalid
     14  5953		       20 cc fc 	      jsr	AddMove
     15  5956
Handler_QUEEN.asm (17): error: Label mismatch...
 --> 453.invalid f16e                  
     16  5956				   .invalid
      0  5956					      MOVE_TOWARDS	_UP
      1  5956					      SUBROUTINE
      2  5956
      3  5956
      4  5956		       a6 98		      ldx	currentSquare
      5  5958		       d0 1b		      bne	.project
      6  595a
Handler_QUEEN.asm (18): error: Label mismatch...
 --> 455.empty f172                  
      7  595a		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (18): error: Label mismatch...
 --> 455.project f175                  
      8  595d		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  5960		       30 24		      bmi	.invalid
     10  5962		       b9 7a f0 	      lda	Board,y
     11  5965		       f0 f3		      beq	.empty
     12  5967		       45 97		      eor	currentPiece
     13  5969		       10 1b		      bpl	.invalid
     14  596b		       20 cc fc 	      jsr	AddMove
     15  596e
Handler_QUEEN.asm (18): error: Label mismatch...
 --> 455.invalid f186                  
     16  596e				   .invalid
      0  596e					      MOVE_TOWARDS	_UP+_LEFT
      1  596e					      SUBROUTINE
      2  596e
      3  596e
      4  596e		       a6 98		      ldx	currentSquare
      5  5970		       d0 1b		      bne	.project
      6  5972
Handler_QUEEN.asm (19): error: Label mismatch...
 --> 457.empty f18a                  
      7  5972		       20 cc fc    .empty     jsr	AddMove
Handler_QUEEN.asm (19): error: Label mismatch...
 --> 457.project f18d                  
      8  5975		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  5978		       30 24		      bmi	.invalid
     10  597a		       b9 7a f0 	      lda	Board,y
     11  597d		       f0 f3		      beq	.empty
     12  597f		       45 97		      eor	currentPiece
     13  5981		       10 1b		      bpl	.invalid
     14  5983		       20 cc fc 	      jsr	AddMove
     15  5986
Handler_QUEEN.asm (19): error: Label mismatch...
 --> 457.invalid f19e                  
     16  5986				   .invalid
      0  5986					      MOVE_TOWARDS	_LEFT
      1  5986					      SUBROUTINE
      2  5986
      3  5986
      4  5986		       a6 98		      ldx	currentSquare
      5  5988		       d0 98		      bne	.project
      6  598a
      7  598a		       20 cc fc    .empty     jsr	AddMove
      8  598d		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  5990		       30 15		      bmi	.invalid
     10  5992		       b9 7a f0 	      lda	Board,y
     11  5995		       f0 f3		      beq	.empty
     12  5997		       45 97		      eor	currentPiece
     13  5999		       10 97		      bpl	.invalid
     14  599b		       20 cc fc 	      jsr	AddMove
     15  599e
     16  599e				   .invalid
     21  599e
     22  599e		       4c a1 fa 	      jmp	MoveReturn
     23  59a1
     24  59a1							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 2
      0  59a1					      include	"Handler_BISHOP.asm"
      1  59a1							; Copyright (C)2020 Andrew Davie
      2  59a1
      3  59a1							;---------------------------------------------------------------------------------------------------
      4  59a1							; BISHOP
      5  59a1							;---------------------------------------------------------------------------------------------------
      6  59a1
      0  59a1					      DEF	Handle_BISHOP
      1  59a1				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  59a1
      3  59a1				   Handle_BISHOP
      8  59a1
      9  59a1							; x = currentSquare (square the piece is on)
     10  59a1							; currentPiece (with flags/colour attached)
     11  59a1
      0  59a1					      MOVE_TOWARDS	_DOWN+_LEFT
      1  59a1					      SUBROUTINE
      2  59a1
      3  59a1
      4  59a1		       a6 98		      ldx	currentSquare
      5  59a3		       d0 1b		      bne	.project
      6  59a5
Handler_BISHOP.asm (12): error: Label mismatch...
 --> 462.empty f1bd                  
      7  59a5		       20 cc fc    .empty     jsr	AddMove
Handler_BISHOP.asm (12): error: Label mismatch...
 --> 462.project f1c0                  
      8  59a8		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  59ab		       30 24		      bmi	.invalid
     10  59ad		       b9 7a f0 	      lda	Board,y
     11  59b0		       f0 f3		      beq	.empty
     12  59b2		       45 97		      eor	currentPiece
     13  59b4		       10 1b		      bpl	.invalid
     14  59b6		       20 cc fc 	      jsr	AddMove
     15  59b9
Handler_BISHOP.asm (12): error: Label mismatch...
 --> 462.invalid f1d1                  
     16  59b9				   .invalid
      0  59b9					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  59b9					      SUBROUTINE
      2  59b9
      3  59b9
      4  59b9		       a6 98		      ldx	currentSquare
      5  59bb		       d0 1b		      bne	.project
      6  59bd
Handler_BISHOP.asm (13): error: Label mismatch...
 --> 464.empty f1d5                  
      7  59bd		       20 cc fc    .empty     jsr	AddMove
Handler_BISHOP.asm (13): error: Label mismatch...
 --> 464.project f1d8                  
      8  59c0		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  59c3		       30 24		      bmi	.invalid
     10  59c5		       b9 7a f0 	      lda	Board,y
     11  59c8		       f0 f3		      beq	.empty
     12  59ca		       45 97		      eor	currentPiece
     13  59cc		       10 1b		      bpl	.invalid
     14  59ce		       20 cc fc 	      jsr	AddMove
     15  59d1
Handler_BISHOP.asm (13): error: Label mismatch...
 --> 464.invalid f1e9                  
     16  59d1				   .invalid
      0  59d1					      MOVE_TOWARDS	_UP+_LEFT
      1  59d1					      SUBROUTINE
      2  59d1
      3  59d1
      4  59d1		       a6 98		      ldx	currentSquare
      5  59d3		       d0 1b		      bne	.project
      6  59d5
Handler_BISHOP.asm (14): error: Label mismatch...
 --> 466.empty f1ed                  
      7  59d5		       20 cc fc    .empty     jsr	AddMove
Handler_BISHOP.asm (14): error: Label mismatch...
 --> 466.project f1f0                  
      8  59d8		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  59db		       30 24		      bmi	.invalid
     10  59dd		       b9 7a f0 	      lda	Board,y
     11  59e0		       f0 f3		      beq	.empty
     12  59e2		       45 97		      eor	currentPiece
     13  59e4		       10 1b		      bpl	.invalid
     14  59e6		       20 cc fc 	      jsr	AddMove
     15  59e9
Handler_BISHOP.asm (14): error: Label mismatch...
 --> 466.invalid f201                  
     16  59e9				   .invalid
      0  59e9					      MOVE_TOWARDS	_UP+_RIGHT
      1  59e9					      SUBROUTINE
      2  59e9
      3  59e9
      4  59e9		       a6 98		      ldx	currentSquare
      5  59eb		       d0 98		      bne	.project
      6  59ed
      7  59ed		       20 cc fc    .empty     jsr	AddMove
      8  59f0		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  59f3		       30 21		      bmi	.invalid
     10  59f5		       b9 7a f0 	      lda	Board,y
     11  59f8		       f0 f3		      beq	.empty
     12  59fa		       45 97		      eor	currentPiece
     13  59fc		       10 97		      bpl	.invalid
     14  59fe		       20 cc fc 	      jsr	AddMove
     15  5a01
     16  5a01				   .invalid
     16  5a01
     17  5a01		       4c a1 fa 	      jmp	MoveReturn
     18  5a04
     19  5a04							;---------------------------------------------------------------------------------------------------
     20  5a04							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 2
      0  5a04					      include	"Handler_ROOK.asm"
      1  5a04							; Copyright (C)2020 Andrew Davie
      2  5a04							; Rook move handler
      3  5a04
      4  5a04							;---------------------------------------------------------------------------------------------------
      5  5a04							; ROOK
      6  5a04							;---------------------------------------------------------------------------------------------------
      7  5a04
      0  5a04					      DEF	Handle_ROOK
      1  5a04				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  5a04
      3  5a04				   Handle_ROOK
      9  5a04
     10  5a04							; Pass...
     11  5a04							; x = currentSquare (square the piece is on)
     12  5a04							; currentPiece (with flags/colour attached)
     13  5a04
      0  5a04					      MOVE_TOWARDS	_DOWN
      1  5a04					      SUBROUTINE
      2  5a04
      3  5a04
      4  5a04		       a6 98		      ldx	currentSquare
      5  5a06		       d0 1b		      bne	.project
      6  5a08
Handler_ROOK.asm (14): error: Label mismatch...
 --> 471.empty f220                  
      7  5a08		       20 cc fc    .empty     jsr	AddMove
Handler_ROOK.asm (14): error: Label mismatch...
 --> 471.project f223                  
      8  5a0b		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  5a0e		       30 24		      bmi	.invalid
     10  5a10		       b9 7a f0 	      lda	Board,y
     11  5a13		       f0 f3		      beq	.empty
     12  5a15		       45 97		      eor	currentPiece
     13  5a17		       10 1b		      bpl	.invalid
     14  5a19		       20 cc fc 	      jsr	AddMove
     15  5a1c
Handler_ROOK.asm (14): error: Label mismatch...
 --> 471.invalid f234                  
     16  5a1c				   .invalid
      0  5a1c					      MOVE_TOWARDS	_RIGHT
      1  5a1c					      SUBROUTINE
      2  5a1c
      3  5a1c
      4  5a1c		       a6 98		      ldx	currentSquare
      5  5a1e		       d0 1b		      bne	.project
      6  5a20
Handler_ROOK.asm (15): error: Label mismatch...
 --> 473.empty f238                  
      7  5a20		       20 cc fc    .empty     jsr	AddMove
Handler_ROOK.asm (15): error: Label mismatch...
 --> 473.project f23b                  
      8  5a23		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  5a26		       30 24		      bmi	.invalid
     10  5a28		       b9 7a f0 	      lda	Board,y
     11  5a2b		       f0 f3		      beq	.empty
     12  5a2d		       45 97		      eor	currentPiece
     13  5a2f		       10 1b		      bpl	.invalid
     14  5a31		       20 cc fc 	      jsr	AddMove
     15  5a34
Handler_ROOK.asm (15): error: Label mismatch...
 --> 473.invalid f24c                  
     16  5a34				   .invalid
      0  5a34					      MOVE_TOWARDS	_UP
      1  5a34					      SUBROUTINE
      2  5a34
      3  5a34
      4  5a34		       a6 98		      ldx	currentSquare
      5  5a36		       d0 1b		      bne	.project
      6  5a38
Handler_ROOK.asm (16): error: Label mismatch...
 --> 475.empty f250                  
      7  5a38		       20 cc fc    .empty     jsr	AddMove
Handler_ROOK.asm (16): error: Label mismatch...
 --> 475.project f253                  
      8  5a3b		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  5a3e		       30 24		      bmi	.invalid
     10  5a40		       b9 7a f0 	      lda	Board,y
     11  5a43		       f0 f3		      beq	.empty
     12  5a45		       45 97		      eor	currentPiece
     13  5a47		       10 1b		      bpl	.invalid
     14  5a49		       20 cc fc 	      jsr	AddMove
     15  5a4c
Handler_ROOK.asm (16): error: Label mismatch...
 --> 475.invalid f264                  
     16  5a4c				   .invalid
      0  5a4c					      MOVE_TOWARDS	_LEFT
      1  5a4c					      SUBROUTINE
      2  5a4c
      3  5a4c
      4  5a4c		       a6 98		      ldx	currentSquare
      5  5a4e		       d0 98		      bne	.project
      6  5a50
      7  5a50		       20 cc fc    .empty     jsr	AddMove
      8  5a53		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  5a56		       30 15		      bmi	.invalid
     10  5a58		       b9 7a f0 	      lda	Board,y
     11  5a5b		       f0 f3		      beq	.empty
     12  5a5d		       45 97		      eor	currentPiece
     13  5a5f		       10 97		      bpl	.invalid
     14  5a61		       20 cc fc 	      jsr	AddMove
     15  5a64
     16  5a64				   .invalid
     18  5a64
     19  5a64		       4c a1 fa 	      jmp	MoveReturn
     20  5a67
     21  5a67							;---------------------------------------------------------------------------------------------------
     22  5a67							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 2
      0  5a67					      include	"Handler_KING.asm"
      1  5a67							; Copyright (C)2020 Andrew Davie
      2  5a67
      3  5a67							;---------------------------------------------------------------------------------------------------
      4  5a67							; KING
      5  5a67							; This is the move handler for a KING
      6  5a67							; "Check" is detected in the next ply of the search.
      7  5a67
      8  5a67
      9  5a67							;---------------------------------------------------------------------------------------------------
     10  5a67
     11  5a67							; MACRO - Castling
     12  5a67
     13  5a67		       00 03	   KINGSIDE   =	3
     14  5a67		       ff ff ff fc QUEENSIDE  =	-4
     15  5a67
     16  5a67					      MAC	castle
     17  5a67							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  5a67
     19  5a67					      ldx	currentSquare
     20  5a67					      lda	Board+{1},x	; kingside/queenside R position
     21  5a67					      and	#PIECE_MASK|FLAG_MOVED
     22  5a67					      cmp	#ROOK
     23  5a67					      bne	.noCastle	; not a R that hasn't moved
     24  5a67
     25  5a67							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  5a67							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  5a67
     28  5a67					      IF	{1} = QUEENSIDE
     29  5a67					      lda	Board-3,x	; nothing in N pos
     30  5a67					      bne	.noCastle
     31  5a67					      lda	Board-2,x	; nothing in B pos
     32  5a67					      bne	.noCastle
     33  5a67					      lda	Board-1,x	; nothing in Q pos
     34  5a67					      bne	.noCastle
     35  5a67
     36  5a67					      ENDIF
     37  5a67
     38  5a67					      IF	{1} = KINGSIDE
     39  5a67					      lda	Board+2,x	; check N pos
     40  5a67					      bne	.noCastle
     41  5a67					      lda	Board+1,x	; check B pos
     42  5a67					      bne	.noCastle
     43  5a67					      ENDIF
     44  5a67
     45  5a67							; appropriate N/B/(Q) squares are vacant so we proceed...
     46  5a67
     47  5a67							; FINALLY -- king can castle
     48  5a67							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     49  5a67							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     50  5a67							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     51  5a67
     52  5a67					      lda	currentPiece
     53  5a67					      ora	#FLAG_CASTLE	; flag it's a castling move
     54  5a67					      sta	currentPiece
     55  5a67
     56  5a67					      IF	{1} = KINGSIDE
     57  5a67					      ldy	ValidSquare+2,x
     58  5a67					      ENDIF
     59  5a67
     60  5a67					      IF	{1} = QUEENSIDE
     61  5a67					      ldy	ValidSquare-2,x
     62  5a67					      ENDIF
     63  5a67
     64  5a67					      jsr	AddMove	; 57
     65  5a67
     66  5a67				   .noCastle
     67  5a67					      ENDM
     68  5a67
     69  5a67
     70  5a67							;---------------------------------------------------------------------------------------------------
     71  5a67
      0  5a67					      DEF	Handle_KING
      1  5a67				   BANK_Handle_KING SET	_CURRENT_BANK
      2  5a67
      3  5a67				   Handle_KING
     73  5a67					      SUBROUTINE
     74  5a67
     75  5a67							; x = currentSquare (square the KING is on)
     76  5a67							; currentPiece (KING of course, but with flags/colour attached)
     77  5a67
      0  5a67					      MOVE_TO	_DOWN+_LEFT
      1  5a67					      SUBROUTINE
      2  5a67		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  5a6a		       30 0b		      bmi	.invalid
      4  5a6c		       b9 7a f0 	      lda	Board,y
      5  5a6f		       f0 7a		      beq	.squareEmpty
      6  5a71		       45 97		      eor	currentPiece
      7  5a73		       10 97		      bpl	.invalid
      8  5a75		       20 cc fc    .squareEmpty jsr	AddMove
      9  5a78				   .invalid
      0  5a78					      MOVE_TO_X	_DOWN
      1  5a78		       a6 98		      ldx	currentSquare
      0  5a7a					      MOVE_TO	_DOWN
      1  5a7a					      SUBROUTINE
      2  5a7a		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x
      3  5a7d		       30 0c		      bmi	.invalid
      4  5a7f		       b9 7a f0 	      lda	Board,y
      5  5a82		       f0 7a		      beq	.squareEmpty
      6  5a84		       45 97		      eor	currentPiece
      7  5a86		       10 97		      bpl	.invalid
      8  5a88		       20 cc fc    .squareEmpty jsr	AddMove
      9  5a8b				   .invalid
      0  5a8b					      MOVE_TO_X	_DOWN+_RIGHT
      1  5a8b		       a6 98		      ldx	currentSquare
      0  5a8d					      MOVE_TO	_DOWN+_RIGHT
      1  5a8d					      SUBROUTINE
      2  5a8d		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  5a90		       30 0d		      bmi	.invalid
      4  5a92		       b9 7a f0 	      lda	Board,y
      5  5a95		       f0 7a		      beq	.squareEmpty
      6  5a97		       45 97		      eor	currentPiece
      7  5a99		       10 97		      bpl	.invalid
      8  5a9b		       20 cc fc    .squareEmpty jsr	AddMove
      9  5a9e				   .invalid
      0  5a9e					      MOVE_TO_X	_RIGHT
      1  5a9e		       a6 98		      ldx	currentSquare
      0  5aa0					      MOVE_TO	_RIGHT
      1  5aa0					      SUBROUTINE
      2  5aa0		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      3  5aa3		       30 17		      bmi	.invalid
      4  5aa5		       b9 7a f0 	      lda	Board,y
      5  5aa8		       f0 7a		      beq	.squareEmpty
      6  5aaa		       45 97		      eor	currentPiece
      7  5aac		       10 97		      bpl	.invalid
      8  5aae		       20 cc fc    .squareEmpty jsr	AddMove
      9  5ab1				   .invalid
      0  5ab1					      MOVE_TO_X	_UP+_RIGHT
      1  5ab1		       a6 98		      ldx	currentSquare
      0  5ab3					      MOVE_TO	_UP+_RIGHT
      1  5ab3					      SUBROUTINE
      2  5ab3		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  5ab6		       30 21		      bmi	.invalid
      4  5ab8		       b9 7a f0 	      lda	Board,y
      5  5abb		       f0 7a		      beq	.squareEmpty
      6  5abd		       45 97		      eor	currentPiece
      7  5abf		       10 97		      bpl	.invalid
      8  5ac1		       20 cc fc    .squareEmpty jsr	AddMove
      9  5ac4				   .invalid
      0  5ac4					      MOVE_TO_X	_UP
      1  5ac4		       a6 98		      ldx	currentSquare
      0  5ac6					      MOVE_TO	_UP
      1  5ac6					      SUBROUTINE
      2  5ac6		       bc 20 f0 	      ldy	ValidSquare+_UP,x
      3  5ac9		       30 20		      bmi	.invalid
      4  5acb		       b9 7a f0 	      lda	Board,y
      5  5ace		       f0 7a		      beq	.squareEmpty
      6  5ad0		       45 97		      eor	currentPiece
      7  5ad2		       10 97		      bpl	.invalid
      8  5ad4		       20 cc fc    .squareEmpty jsr	AddMove
      9  5ad7				   .invalid
      0  5ad7					      MOVE_TO_X	_UP+_LEFT
      1  5ad7		       a6 98		      ldx	currentSquare
      0  5ad9					      MOVE_TO	_UP+_LEFT
      1  5ad9					      SUBROUTINE
      2  5ad9		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  5adc		       30 1f		      bmi	.invalid
      4  5ade		       b9 7a f0 	      lda	Board,y
      5  5ae1		       f0 7a		      beq	.squareEmpty
      6  5ae3		       45 97		      eor	currentPiece
      7  5ae5		       10 97		      bpl	.invalid
      8  5ae7		       20 cc fc    .squareEmpty jsr	AddMove
      9  5aea				   .invalid
      0  5aea					      MOVE_TO_X	_LEFT
      1  5aea		       a6 98		      ldx	currentSquare
      0  5aec					      MOVE_TO	_LEFT
      1  5aec					      SUBROUTINE
      2  5aec		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      3  5aef		       30 15		      bmi	.invalid
      4  5af1		       b9 7a f0 	      lda	Board,y
      5  5af4		       f0 7a		      beq	.squareEmpty
      6  5af6		       45 97		      eor	currentPiece
      7  5af8		       10 97		      bpl	.invalid
      8  5afa		       20 cc fc    .squareEmpty jsr	AddMove
      9  5afd				   .invalid
     86  5afd
     87  5afd		       24 97		      bit	currentPiece
     88  5aff		       70 97		      bvs	.exit	; king has moved, so no castling
     89  5b01
      0  5b01					      CASTLE	KINGSIDE
      1  5b01
      2  5b01
      3  5b01		       a6 98		      ldx	currentSquare
      4  5b03		       bd 7d f0 	      lda	Board+KINGSIDE,x
      5  5b06		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5b08		       c9 05		      cmp	#ROOK
      7  5b0a		       d0 05		      bne	.noCastle
      8  5b0c
      9  5b0c
     10  5b0c
     11  5b0c
     12  5b0c				  -	      IF	KINGSIDE = QUEENSIDE
     13  5b0c				  -	      lda	Board-3,x
     14  5b0c				  -	      bne	.noCastle
     15  5b0c				  -	      lda	Board-2,x
     16  5b0c				  -	      bne	.noCastle
     17  5b0c				  -	      lda	Board-1,x
     18  5b0c				  -	      bne	.noCastle
     19  5b0c				  -
     20  5b0c					      ENDIF
     21  5b0c
     22  5b0c					      IF	KINGSIDE = KINGSIDE
     23  5b0c		       bd 7c f0 	      lda	Board+2,x
     24  5b0f		       d0 7c		      bne	.noCastle
     25  5b11		       bd 7b f0 	      lda	Board+1,x
     26  5b14		       d0 7b		      bne	.noCastle
     27  5b16					      ENDIF
     28  5b16
     29  5b16
     30  5b16
     31  5b16
     32  5b16
     33  5b16
     34  5b16
     35  5b16
     36  5b16		       a5 97		      lda	currentPiece
     37  5b18		       09 10		      ora	#FLAG_CASTLE
     38  5b1a		       85 97		      sta	currentPiece
     39  5b1c
     40  5b1c					      IF	KINGSIDE = KINGSIDE
     41  5b1c		       bc 18 f0 	      ldy	ValidSquare+2,x
     42  5b1f					      ENDIF
     43  5b1f
     44  5b1f				  -	      IF	KINGSIDE = QUEENSIDE
     45  5b1f				  -	      ldy	ValidSquare-2,x
     46  5b1f					      ENDIF
     47  5b1f
     48  5b1f		       20 cc fc 	      jsr	AddMove
     49  5b22
     50  5b22				   .noCastle
      0  5b22					      CASTLE	QUEENSIDE
      1  5b22
      2  5b22
      3  5b22		       a6 98		      ldx	currentSquare
      4  5b24		       bd 76 f0 	      lda	Board+QUEENSIDE,x
      5  5b27		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5b29		       c9 05		      cmp	#ROOK
      7  5b2b		       d0 05		      bne	.noCastle
      8  5b2d
      9  5b2d
     10  5b2d
     11  5b2d
     12  5b2d					      IF	QUEENSIDE = QUEENSIDE
     13  5b2d		       bd 77 f0 	      lda	Board-3,x
     14  5b30		       d0 77		      bne	.noCastle
     15  5b32		       bd 78 f0 	      lda	Board-2,x
     16  5b35		       d0 78		      bne	.noCastle
     17  5b37		       bd 79 f0 	      lda	Board-1,x
     18  5b3a		       d0 79		      bne	.noCastle
     19  5b3c
     20  5b3c					      ENDIF
     21  5b3c
     22  5b3c				  -	      IF	QUEENSIDE = KINGSIDE
     23  5b3c				  -	      lda	Board+2,x
     24  5b3c				  -	      bne	.noCastle
     25  5b3c				  -	      lda	Board+1,x
     26  5b3c				  -	      bne	.noCastle
     27  5b3c					      ENDIF
     28  5b3c
     29  5b3c
     30  5b3c
     31  5b3c
     32  5b3c
     33  5b3c
     34  5b3c
     35  5b3c
     36  5b3c		       a5 97		      lda	currentPiece
     37  5b3e		       09 10		      ora	#FLAG_CASTLE
     38  5b40		       85 97		      sta	currentPiece
     39  5b42
     40  5b42				  -	      IF	QUEENSIDE = KINGSIDE
     41  5b42				  -	      ldy	ValidSquare+2,x
     42  5b42					      ENDIF
     43  5b42
     44  5b42					      IF	QUEENSIDE = QUEENSIDE
     45  5b42		       bc 14 f0 	      ldy	ValidSquare-2,x
     46  5b45					      ENDIF
     47  5b45
     48  5b45		       20 cc fc 	      jsr	AddMove
     49  5b48
     50  5b48				   .noCastle
     92  5b48
     93  5b48		       4c a1 fa    .exit      jmp	MoveReturn
     94  5b4b
     95  5b4b							;---------------------------------------------------------------------------------------------------
     96  5b4b							; EOF
------- FILE Handler_BANK1.asm
    107  5b4b
    108  5b4b
      0  5b4b					      OPTIONAL_PAGEBREAK	"Base64ToIndex", 64
     10  5b4b					      LIST	ON
      0  5b4b					      DEF	Base64ToIndex
      1  5b4b				   BANK_Base64ToIndex SET	_CURRENT_BANK
      2  5b4b
      3  5b4b				   Base64ToIndex
    111  5b4b							; Convert from 0-63 numbering into an index into the Chessboard
    112  5b4b
    113  5b4b		       16 17 18 19*	      .byte.b	22,23,24,25,26,27,28,29
    114  5b53		       20 21 22 23*	      .byte.b	32,33,34,35,36,37,38,39
    115  5b5b		       2a 2b 2c 2d*	      .byte.b	42,43,44,45,46,47,48,49
    116  5b63		       34 35 36 37*	      .byte.b	52,53,54,55,56,57,58,59
    117  5b6b		       3e 3f 40 41*	      .byte.b	62,63,64,65,66,67,68,69
    118  5b73		       48 49 4a 4b*	      .byte.b	72,73,74,75,76,77,78,79
    119  5b7b		       52 53 54 55*	      .byte.b	82,83,84,85,86,87,88,89
    120  5b83		       5c 5d 5e 5f*	      .byte.b	92,93,94,95,96,97,98,99
    121  5b8b
    122  5b8b
    123  5b8b							;---------------------------------------------------------------------------------------------------
    124  5b8b
      0  5b8b					      DEF	PutAllPieces
      1  5b8b				   BANK_PutAllPieces SET	_CURRENT_BANK
      2  5b8b
      3  5b8b				   PutAllPieces
    126  5b8b					      SUBROUTINE
    127  5b8b
    128  5b8b							; Call SAFEly
    129  5b8b
    130  5b8b		       a0 63		      ldy	#99
    131  5b8d		       b9 7a f0    .zeroBoard lda	Board,y
    132  5b90		       20 9e fd 	      jsr	SAFE_PutPieceToBoard
    133  5b93
    134  5b93		       88		      dey
    135  5b94		       10 f7		      bpl	.zeroBoard
    136  5b96		       60		      rts
    137  5b97
    138  5b97
    139  5b97							;---------------------------------------------------------------------------------------------------
    140  5b97
      0  5b97					      DEF	CopySetupForMarker
      1  5b97				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  5b97
      3  5b97				   CopySetupForMarker
    142  5b97					      SUBROUTINE
    143  5b97
    144  5b97							;lda #RAMBANK_MOVES_RAM
    145  5b97							;sta SET_BANK_RAM
    146  5b97
    147  5b97		       a5 80		      lda	drawPieceNumber
    148  5b99		       29 03		      and	#3	; shift position in PF
    149  5b9b		       18		      clc
    150  5b9c		       69 3c		      adc	#INDEX_WHITE_MARKER_on_BLACK_SQUARE_0
    151  5b9e		       a8		      tay
    152  5b9f		       60		      rts
    153  5ba0
    154  5ba0
    155  5ba0							;---------------------------------------------------------------------------------------------------
    156  5ba0
      0  5ba0					      DEF	CopySetup
      1  5ba0				   BANK_CopySetup SET	_CURRENT_BANK
      2  5ba0
      3  5ba0				   CopySetup
    158  5ba0					      SUBROUTINE
    159  5ba0
    160  5ba0							; figure colouration of square
    161  5ba0
    162  5ba0		       a5 80		      lda	drawPieceNumber	;0-63
    163  5ba2		       4a		      lsr
    164  5ba3		       4a		      lsr
    165  5ba4		       4a		      lsr
    166  5ba5		       18		      clc
    167  5ba6		       65 80		      adc	drawPieceNumber
    168  5ba8		       29 01		      and	#1
    169  5baa		       49 01		      eor	#1
    170  5bac		       f0 01		      beq	.white
    171  5bae		       a9 20		      lda	#32
    172  5bb0		       85 a7	   .white     sta	__pieceColour	; actually SQUARE black/white
    173  5bb2
    174  5bb2							; PieceColour = 0 for white square, 28 for black square
    175  5bb2
    176  5bb2							;lda #RAMBANK_MOVES_RAM
    177  5bb2							;sta SET_BANK_RAM
    178  5bb2
    179  5bb2		       a4 80		      ldy	drawPieceNumber	; 0-63
    180  5bb4		       be 4b f3 	      ldx	Base64ToIndex,y
    181  5bb7
    182  5bb7		       bd 7a f0 	      lda	Board,x
    183  5bba		       0a		      asl
    184  5bbb		       90 7a		      bcc	.blackAdjust
    185  5bbd		       09 10		      ora	#16
    186  5bbf		       4a	   .blackAdjust lsr
    187  5bc0		       29 0f		      and	#%1111
    188  5bc2		       aa		      tax
    189  5bc3
    190  5bc3		       98		      tya
    191  5bc4		       29 03		      and	#3	; shift position in PF
    192  5bc6
    193  5bc6		       18		      clc
    194  5bc7		       7d cf f3 	      adc	PieceToShape,x
    195  5bca		       18		      clc
    196  5bcb		       65 a7		      adc	__pieceColour
    197  5bcd		       a8		      tay
    198  5bce		       60		      rts
    199  5bcf
    200  5bcf				   PieceToShape
    201  5bcf
    202  5bcf		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    203  5bd0		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    204  5bd1		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    205  5bd2		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    206  5bd3		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    207  5bd4		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    208  5bd5		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    209  5bd6		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    210  5bd7
    211  5bd7		       40		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    212  5bd8		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    213  5bd9		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    214  5bda		       48		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    215  5bdb		       4c		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    216  5bdc		       50		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    217  5bdd		       54		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    218  5bde		       58		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    219  5bdf
    220  5bdf
    221  5bdf							;---------------------------------------------------------------------------------------------------
    222  5bdf
    223  5bdf
      0  5bdf					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  5bdf
      2  5bdf
      3  5bdf		       03 df	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3df , FREE= $21
      4  5bdf					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  5bdf				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  5bdf				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  5bdf				  -	      ERR
      8  5bdf					      endif
    225  5bdf
    226  5bdf
    227  5bdf							; There is space here (1K) for use as ROM
    228  5bdf							; but NOT when the above bank is switched in as RAM, of course!
    229  5bdf
    230  5bdf
    231  5bdf
    232  5bdf
    233  5bdf							;---------------------------------------------------------------------------------------------------
    234  5bdf							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 2
      0  5bdf					      include	"ply.asm"
      1  5bdf							; Copyright (C)2020 Andrew Davie
      2  5bdf							; andrew@taswegian.com
      3  5bdf
      4  5bdf							;---------------------------------------------------------------------------------------------------
      5  5bdf							; Define the RAM banks
      6  5bdf							; A "PLY" bank represents all the data required on any single ply of the search tree.
      7  5bdf							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      8  5bdf							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
      9  5bdf							; they act as independant switchable banks usable for data on each ply during the search.
     10  5bdf							; A ply will hold the move list for that position
     11  5bdf
     12  5bdf
     13  5bdf		       00 06	   MAX_PLY    =	6
      0  5bdf					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  5bdf
      2  5bdf
      3  5bdf
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     17 U3800					      REPEND
     18 U3800
     19 U3800							;---------------------------------------------------------------------------------------------------
     20 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     21 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  63db ????				      SEG	BANK_PLY
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   BANK_PLY   SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	BANK_PLY
     23  6000
     24  6000
     25  6000							;---------------------------------------------------------------------------------------------------
     26  6000							; The piece-lists
     27  6000							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     28  6000							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     29  6000							; but this needs to be initialised programatically on new game.
     30  6000
     31  6000							; We have TWO piecelists, in different banks
     32  6000							; WHITE pieces in bank BANK_PLY
     33  6000							; BLACK pieces in bank BANK_PLY+1
     34  6000
      0  6000					      OPTIONAL_PAGEBREAK	"PieceLists", 48
     10  6000					      LIST	ON
     36  6000
     37  6000		       00 00 00 00*SortedPieceList ds	16	; indexes into PieceSquare, PieceType.  NEG = no piece
     38  6010		       00 00 00 00*PieceSquare ds	16
     39  6020		       00 00 00 00*PieceType  ds	16
     40  6030
     41  6030		       00	   PieceListPtr ds	1
     42  6031
     43  6031							;---------------------------------------------------------------------------------------------------
     44  6031
     45  6031		       7f ff	   infinity   =	32767
     46  6031
     47  6031		       00 00	   plyValue   ds	2	; 16-bit signed score value
     48  6033		       00	   bestMove   ds	1	; index of move (-1 = none)
     49  6034
     50  6034				  -	      if	0
     51  6034				  -			; reverting a move
     52  6034				  -			; from/to/piece/toOriginal
     53  6034				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     54  6034				  -			; en-passant
     55  6034				  -
     56  6034				  -from/to/piece
     57  6034				  -
     58  6034				  -
     59  6034				  -from       =	piece
     60  6034				  -to	      =	originalPiece
     61  6034				  -from2      =	piece2
     62  6034				  -to2	      =	originalPiece2
     63  6034				  -
     64  6034				  -
     65  6034				  -
     66  6034				  -so,	      normal	move (N)
     67  6034				  -
     68  6034				  -B1	      =	knight
     69  6034				  -C3	      =	blank
     70  6034				  -null/null
     71  6034				  -
     72  6034				  -pawn       promot	with capture
     73  6034				  -A7	      =	WP
     74  6034				  -B8	      =	BLACK_ROOK
     75  6034				  -
     76  6034				  -
     77  6034				  -castle
     78  6034				  -E1	      =	king
     79  6034				  -G1	      =	blank
     80  6034				  -H1	      =	rook
     81  6034				  -F1	      =	blank
     82  6034				  -
     83  6034				  -
     84  6034				  -en-passant
     85  6034				  -B4	      =	P
     86  6034				  -A3	      =	blank
     87  6034				  -A4	      =	P
     88  6034				  -A3	      =	blank
     89  6034				  -
     90  6034				  -FROM
     91  6034				  -TO
     92  6034				  -CAPTURED_PIECE
     93  6034				  -ORIG_PIECE
     94  6034				  -FROM2
     95  6034				  -TO2
     96  6034				  -PIECE2
     97  6034				  -
     98  6034				  -board[FROM] =	ORIG_PIECE
     99  6034				  -board[TO]  =	CAPTURED_PIECE
    100  6034				  -
    101  6034				  -value      =	-new_piece + orig_piece - captured_piece
    102  6034				  -
    103  6034				  -
    104  6034					      endif
    105  6034
    106  6034
    107  6034
    108  6034
    109  6034
    110  6034
    111  6034
    112  6034
    113  6034
    114  6034
    115  6034							;---------------------------------------------------------------------------------------------------
    116  6034
    117  6034							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
    118  6034							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
    119  6034
    120  6034		       00	   enPassantSquare ds	1
    121  6035
    122  6035							;---------------------------------------------------------------------------------------------------
    123  6035							; Move tables hold piece moves for this current ply
    124  6035
    125  6035		       00	   moveIndex  ds	1	; points to first available 'slot' for move storage
    126  6036
    127  6036
    128  6036		       00 80	   MAX_MOVES  =	128
    129  6036
      0  6036					      OPTIONAL_PAGEBREAK	"MoveFrom", MAX_MOVES
     10  6036					      LIST	ON
      0  6036					      DEF	MoveFrom
      1  6036				   BANK_MoveFrom SET	_CURRENT_BANK
      2  6036
      3  6036				   MoveFrom
    132  6036		       00 00 00 00*	      ds	MAX_MOVES
    133  60b6
      0  60b6					      OPTIONAL_PAGEBREAK	"MoveTo", MAX_MOVES
 PAGE BREAK INSERTED FOR  MoveTo
 REQUESTED SIZE =  $80
 WASTED SPACE =  $4a
 PAGEBREAK LOCATION =  $f100
     10  6100					      LIST	ON
      0  6100					      DEF	MoveTo
      1  6100				   BANK_MoveTo SET	_CURRENT_BANK
      2  6100
      3  6100				   MoveTo
    136  6100		       00 00 00 00*	      ds	MAX_MOVES
    137  6180
      0  6180					      OPTIONAL_PAGEBREAK	"MovePiece", MAX_MOVES
     10  6180					      LIST	ON
      0  6180					      DEF	MovePiece
      1  6180				   BANK_MovePiece SET	_CURRENT_BANK
      2  6180
      3  6180				   MovePiece
    140  6180		       00 00 00 00*	      ds	MAX_MOVES
    141  6200
    142  6200							;---------------------------------------------------------------------------------------------------
    143  6200
      0  6200					      DEF	InitPieceLists
      1  6200				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  6200
      3  6200				   InitPieceLists
    145  6200
    146  6200		       a9 ff		      lda	#-1
    147  6202		       8d 30 f4 	      sta	PieceListPtr+RAM_WRITE
    148  6205
    149  6205		       a2 0f		      ldx	#15
    150  6207		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    151  620a		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    152  620d		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    153  6210		       ca		      dex
    154  6211		       10 f4		      bpl	.clearLists
    155  6213
    156  6213							; General inits that are moved out of FIXED....
    157  6213
    158  6213
    159  6213		       a9 07		      lda	#%111	; 111= quad
    160  6215		       85 44		      sta	NUSIZ0
    161  6217		       85 45		      sta	NUSIZ1	; quad-width
    162  6219
    163  6219
    164  6219
    165  6219
    166  6219		       a9 04		      lda	#%00000100
    167  621b		       85 4a		      sta	CTRLPF
    168  621d		       a9 00		      lda	#BACKGCOL
    169  621f		       85 49		      sta	COLUBK
    170  6221
    171  6221		       a9 09		      lda	#AI_Halt
    172  6223		       85 8f		      sta	aiPhase
    173  6225
    174  6225		       60		      rts
    175  6226
    176  6226
    177  6226							;---------------------------------------------------------------------------------------------------
    178  6226
    179  6226					      if	ASSERTS
    180  6226
      0  6226					      DEF	checkPiecesBank
      1  6226				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  6226
      3  6226				   checkPiecesBank
    182  6226							; odd usage - switches between concurrent bank code
    183  6226
    184  6226		       a2 0f		      ldx	#15
    185  6228		       a5 a8	   .check     lda	__bank
    186  622a		       85 3e		      sta	SET_BANK_RAM
    187  622c		       bc 10 f0 	      ldy	PieceSquare,x
    188  622f		       f0 10		      beq	.nonehere
    189  6231
    190  6231		       86 a7		      stx	__x
    191  6233
    192  6233		       20 46 fd 	      jsr	SAFE_GetPieceFromBoard
    193  6236		       f0 fe	   .fail      beq	.fail
    194  6238		       c9 ff		      cmp	#-1
    195  623a		       f0 fe	   .fail2     beq	.fail2
    196  623c
    197  623c		       a6 a7		      ldx	__x
    198  623e
    199  623e		       ca	   .nonehere  dex
    200  623f		       10 e7		      bpl	.check
    201  6241		       60		      rts
    202  6242
    203  6242
      0  6242					      DEF	DIAGNOSTIC_checkPieces
      1  6242				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  6242
      3  6242				   DIAGNOSTIC_checkPieces
    205  6242							; SAFE call
    206  6242							; DIAGNOSTIC ONLY
    207  6242							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    208  6242
    209  6242		       a9 09		      lda	#RAMBANK_PLY
    210  6244		       85 a8		      sta	__bank
    211  6246		       20 26 f2 	      jsr	checkPiecesBank
    212  6249		       e6 a8		      inc	__bank
    213  624b		       20 26 f2 	      jsr	checkPiecesBank
    214  624e		       60		      rts
    215  624f
    216  624f					      endif
    217  624f
    218  624f							;---------------------------------------------------------------------------------------------------
    219  624f
    220  624f					      if	!TEST_POSITION
    221  624f				   InitPieceList
    222  624f
    223  624f		       06 19		      .byte.b	WHITE|Q, 25
    224  6251		       04 18		      .byte.b	WHITE|B, 24
    225  6253		       04 1b		      .byte.b	WHITE|B, 27
    226  6255		       05 16		      .byte.b	WHITE|R, 22
    227  6257		       05 1d		      .byte.b	WHITE|R, 29
    228  6259		       03 17		      .byte.b	WHITE|N, 23
    229  625b		       03 1c		      .byte.b	WHITE|N, 28
    230  625d
    231  625d		       01 23		      .byte.b	WHITE|WP, 35
    232  625f		       01 24		      .byte.b	WHITE|WP, 36
    233  6261		       01 22		      .byte.b	WHITE|WP, 34
    234  6263		       01 25		      .byte.b	WHITE|WP, 37
    235  6265		       01 21		      .byte.b	WHITE|WP, 33
    236  6267		       01 26		      .byte.b	WHITE|WP, 38
    237  6269		       01 20		      .byte.b	WHITE|WP, 32
    238  626b		       01 27		      .byte.b	WHITE|WP, 39
    239  626d
    240  626d		       07 1a		      .byte.b	WHITE|K, 26
    241  626f
    242  626f		       86 5f		      .byte.b	BLACK|Q, 95
    243  6271		       84 5e		      .byte.b	BLACK|B, 94
    244  6273		       84 61		      .byte.b	BLACK|B, 97
    245  6275		       85 5c		      .byte.b	BLACK|R, 92
    246  6277		       85 63		      .byte.b	BLACK|R, 99
    247  6279		       83 5d		      .byte.b	BLACK|N, 93
    248  627b		       83 62		      .byte.b	BLACK|N, 98
    249  627d
    250  627d		       82 55		      .byte.b	BLACK|BP, 85
    251  627f		       82 56		      .byte.b	BLACK|BP, 86
    252  6281		       82 54		      .byte.b	BLACK|BP, 84
    253  6283		       82 57		      .byte.b	BLACK|BP, 87
    254  6285		       82 53		      .byte.b	BLACK|BP, 83
    255  6287		       82 58		      .byte.b	BLACK|BP, 88
    256  6289		       82 52		      .byte.b	BLACK|BP, 82
    257  628b		       82 59		      .byte.b	BLACK|BP, 89
    258  628d
    259  628d		       87 60		      .byte.b	BLACK|K, 96
    260  628f
    261  628f		       00		      .byte.b	0	;end
    262  6290
    263  6290					      endif
    264  6290
    265  6290				  -	      if	TEST_POSITION
    266  6290				  -WhitePiecelist
    267  6290				  -	      .byte	65,0,0,0,0,0,0,0
    268  6290				  -	      .byte	0,0,0,0,0,0,0,0
    269  6290				  -
    270  6290				  -BlackPiecelist
    271  6290				  -	      .byte	66,0,0,0,0,0,0,0
    272  6290				  -	      .byte	0,0,0,0,0,0,0,0
    273  6290					      endif
    274  6290
    275  6290
    276  6290
    277  6290							;---------------------------------------------------------------------------------------------------
    278  6290
    279  6290
      0  6290					      DEF	NewPlyInitialise
      1  6290				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  6290
      3  6290				   NewPlyInitialise
    281  6290
    282  6290							; This MUST be called at the start of a new ply
    283  6290							; It initialises the movelist to empty
    284  6290
    285  6290		       a2 ff		      ldx	#-1
    286  6292		       8e 35 f4 	      stx	moveIndex+RAM_WRITE	; no valid moves
    287  6295		       8d 33 f4 	      sta	bestMove+RAM_WRITE
    288  6298
    289  6298					      if	!TEST_POSITION
    290  6298		       a9 00		      lda	#0
    291  629a					      endif
    292  629a
    293  629a				  -	      if	TEST_POSITION
    294  629a				  -	      lda	#66
    295  629a					      endif
    296  629a		       8d 34 f4 	      sta	enPassantSquare+RAM_WRITE	; no enPassant available
    297  629d
    298  629d
    299  629d							; The evaluation of the current position is a signed 16-bit number
    300  629d							; +ve is good for the current side.
    301  629d							; This is used during the alpha-beta search for finding best position
    302  629d
    303  629d		       a9 01		      lda	#<(-infinity)
    304  629f		       8d 31 f4 	      sta	plyValue+RAM_WRITE
    305  62a2		       a9 80		      lda	#>(-infinity)
    306  62a4		       8d 32 f4 	      sta	plyValue+RAM_WRITE+1
    307  62a7
    308  62a7
    309  62a7		       a9 00		      lda	#0
    310  62a9		       85 9d		      sta	piecelistIndex
    311  62ab
    312  62ab		       60		      rts
    313  62ac
    314  62ac
    315  62ac							;---------------------------------------------------------------------------------------------------
    316  62ac
      0  62ac					      DEF	GenerateMovesForNextPiece
      1  62ac				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  62ac
      3  62ac				   GenerateMovesForNextPiece
    318  62ac
    319  62ac		       a5 9d		      lda	piecelistIndex
    320  62ae		       29 0f		      and	#15
    321  62b0		       aa		      tax
    322  62b1
    323  62b1		       a5 9e		      lda	sideToMove
    324  62b3		       0a		      asl
    325  62b4		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    326  62b6		       69 00		      adc	#0
    327  62b8		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    328  62ba
    329  62ba		       bd 10 f0 	      lda	PieceSquare,x
    330  62bd		       f0 10		      beq	.noPieceHere	; piece deleted
    331  62bf		       85 98		      sta	currentSquare
    332  62c1
    333  62c1		       20 7e fa 	      jsr	MoveForSinglePiece
    334  62c4
    335  62c4		       e6 9d	   .noPieceHere inc	piecelistIndex
    336  62c6		       60		      rts
    337  62c7
    338  62c7							;---------------------------------------------------------------------------------------------------
    339  62c7
      0  62c7					      DEF	FixPieceList
      1  62c7				   BANK_FixPieceList SET	_CURRENT_BANK
      2  62c7
      3  62c7				   FixPieceList
    341  62c7
    342  62c7							; uses OVERLAY Overlay001
    343  62c7							; fromX12	      X12 square piece moved from
    344  62c7							; toX12	      X12 square piece moved to (0 to erase piece from list)
    345  62c7
    346  62c7							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    347  62c7							; Eventually this will have to be more sophisticated when moves (like castling) involve
    348  62c7							; more than one piece.
    349  62c7
    350  62c7							; TODO: this is slow and should use a pointer to pieces instead
    351  62c7
    352  62c7
    353  62c7		       a2 0f		      ldx	#15
    354  62c9		       a5 86		      lda	fromX12
    355  62cb		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    356  62ce		       f0 10		      beq	.adjustPiece
    357  62d0		       ca		      dex
    358  62d1		       10 f8		      bpl	.pieceCheck
    359  62d3		       60		      rts
    360  62d4
    361  62d4		       a5 87	   .adjustPiece lda	toX12
    362  62d6		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    363  62d9		       60		      rts
    364  62da
    365  62da							;---------------------------------------------------------------------------------------------------
    366  62da
    367  62da				  -	      if	0
    368  62da				  -	      DEF	DeletePiece
    369  62da				  -
    370  62da				  -	      lda	fromX12
    371  62da				  -	      ldy	toX12
    372  62da				  -
    373  62da				  -			;		  lda sideToMove
    374  62da				  -			;		  eor #128
    375  62da				  -			;		  asl
    376  62da				  -			;		  adc #RAMBANK_PLY
    377  62da				  -	      lda	currentPly
    378  62da				  -	      sta	SET_BANK_RAM
    379  62da				  -
    380  62da				  -	      lda	toX12
    381  62da				  -	      jsr	DeletePiece
    382  62da					      endif
    383  62da
    384  62da							;---------------------------------------------------------------------------------------------------
    385  62da
      0  62da					      DEF	alphaBeta
      1  62da				   BANK_alphaBeta SET	_CURRENT_BANK
      2  62da
      3  62da				   alphaBeta
    387  62da
    388  62da		       60		      rts
    389  62db		       e6 9c		      inc	currentPly
    390  62dd		       a5 9c		      lda	currentPly
    391  62df
    392  62df		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    393  62e1		       f0 0f		      beq	.bottomOut	; at a leaf node of the search?
    394  62e3		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    395  62e5
    396  62e5		       a5 9e		      lda	sideToMove
    397  62e7		       49 80		      eor	#128
    398  62e9		       85 9e		      sta	sideToMove
    399  62eb
    400  62eb		       20 90 f2 	      jsr	NewPlyInitialise
    401  62ee
    402  62ee		       a5 9c		      lda	currentPly
    403  62f0		       85 3e		      sta	SET_BANK_RAM
    404  62f2
    405  62f2		       a9 00		      lda	#0
    406  62f4		       85 9d		      sta	piecelistIndex
    407  62f6		       20 ac f2    iterPieces jsr	GenerateMovesForNextPiece
    408  62f9		       a5 9d		      lda	piecelistIndex
    409  62fb		       c9 0f		      cmp	#15
    410  62fd		       d0 f7		      bne	iterPieces
    411  62ff
    412  62ff							; Perform a recursive search
    413  62ff							; simulate alpha-beta cull to just 7 moves per node
    414  62ff
    415  62ff					      REPEAT	7
    416  62ff							;jsr PhysicallyMovePiece
    417  62ff							;jsr FinaliseMove
    418  62ff		       20 da f2 	      jsr	alphaBeta
    415  62ff					      REPEND
    416  6302							;jsr PhysicallyMovePiece
    417  6302							;jsr FinaliseMove
    418  6302		       20 da f2 	      jsr	alphaBeta
    415  6302					      REPEND
    416  6305							;jsr PhysicallyMovePiece
    417  6305							;jsr FinaliseMove
    418  6305		       20 da f2 	      jsr	alphaBeta
    415  6305					      REPEND
    416  6308							;jsr PhysicallyMovePiece
    417  6308							;jsr FinaliseMove
    418  6308		       20 da f2 	      jsr	alphaBeta
    415  6308					      REPEND
    416  630b							;jsr PhysicallyMovePiece
    417  630b							;jsr FinaliseMove
    418  630b		       20 da f2 	      jsr	alphaBeta
    415  630b					      REPEND
    416  630e							;jsr PhysicallyMovePiece
    417  630e							;jsr FinaliseMove
    418  630e		       20 da f2 	      jsr	alphaBeta
    415  630e					      REPEND
    416  6311							;jsr PhysicallyMovePiece
    417  6311							;jsr FinaliseMove
    418  6311		       20 da f2 	      jsr	alphaBeta
    419  6314					      REPEND
    420  6314
    421  6314				   .bottomOut
    422  6314
    423  6314							; TODO: evaluate board position
    424  6314							; reverse move to previous position
    425  6314							; check the results, update scores and move pointers
    426  6314							; and return vars to expected
    427  6314
    428  6314		       a5 9e		      lda	sideToMove
    429  6316		       49 80		      eor	#128
    430  6318		       85 9e		      sta	sideToMove
    431  631a
    432  631a		       c6 9c		      dec	currentPly
    433  631c		       a5 9c		      lda	currentPly
    434  631e		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    435  6320
    436  6320		       60		      rts
    437  6321
    438  6321							;---------------------------------------------------------------------------------------------------
    439  6321
      0  6321					      DEF	RevertMove
      1  6321				   BANK_RevertMove SET	_CURRENT_BANK
      2  6321
      3  6321				   RevertMove
    441  6321
    442  6321							; backtrack after a move, restoring things to the way they were
    443  6321
    444  6321
    445  6321
    446  6321
    447  6321
    448  6321
    449  6321
    450  6321
    451  6321		       60		      rts
    452  6322
    453  6322
    454  6322							;---------------------------------------------------------------------------------------------------
    455  6322
      0  6322					      DEF	MoveViaListAtPly
      1  6322				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  6322
      3  6322				   MoveViaListAtPly
    457  6322
    458  6322		       ad 35 f0 	      lda	moveIndex
    459  6325		       c9 ff		      cmp	#-1
    460  6327		       f0 41		      beq	halted	; no valid moves
    461  6329
    462  6329		       a8		      tay		; loop count
    463  632a		       c0 00		      cpy	#0
    464  632c		       f0 17		      beq	muldone
    465  632e		       c8		      iny
    466  632f
      0  632f					      NEXT_RANDOM
      1  632f		       a5 81		      lda	rnd
      2  6331		       4a		      lsr
      3  6332		       90 81		      bcc	.skipEOR
      4  6334		       49 fe		      eor	#RND_EOR_VAL
      5  6336		       85 81	   .skipEOR   sta	rnd
    468  6338
    469  6338		       a2 00		      ldx	#0
    470  633a		       a9 00		      lda	#0
    471  633c		       18	   .mulx      clc
    472  633d		       65 81		      adc	rnd
    473  633f		       90 81		      bcc	.nover
    474  6341		       e8		      inx
    475  6342		       88	   .nover     dey
    476  6343		       d0 f7		      bne	.mulx
    477  6345				   muldone
    478  6345
    479  6345							; fall through...
    480  6345							;---------------------------------------------------------------------------------------------------
    481  6345
      0  6345					      DEF	PhysicallyMovePiece
      1  6345				   BANK_PhysicallyMovePiece SET	_CURRENT_BANK
      2  6345
      3  6345				   PhysicallyMovePiece
    483  6345
    484  6345				   .foundMove
    485  6345		       bd 36 f0 	      lda	MoveFrom,x
    486  6348		       85 9f		      sta	fromSquare
    487  634a		       85 86		      sta	fromX12
    488  634c		       bd 00 f1 	      lda	MoveTo,x
    489  634f		       85 a1		      sta	toSquare
    490  6351		       85 87		      sta	toX12
    491  6353
    492  6353
    493  6353							; If en-passant flag set (pawn doing opening double-move) then record its square as the
    494  6353							; en-passant square for the ply.
    495  6353
    496  6353				  -	      if	0
    497  6353				  -	      TODO	BANK/BUGGERED AFTER
    498  6353				  -	      lda	currentPly
    499  6353				  -	      sta	SET_BANK_RAM
    500  6353				  -
    501  6353				  -	      ldy	#0
    502  6353				  -	      lda	MovePiece,x
    503  6353				  -	      and	#FLAG_ENPASSANT
    504  6353				  -	      beq	.notEP
    505  6353				  -	      ldy	toSquare
    506  6353				  -.notEP     sty	enPassantSquare+RAM_WRITE
    507  6353				  -
    508  6353					      endif
    509  6353
    510  6353
    511  6353		       bd 80 f1 	      lda	MovePiece,x
    512  6356		       29 df		      and	#~FLAG_ENPASSANT	;? unsure
    513  6358		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling (for K/R)
    514  635a		       85 a0		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    515  635c
    516  635c
    517  635c		       a6 9f		      ldx	fromSquare
    518  635e		       bc 00 ff 	      ldy	X12toBase64,x
    519  6361		       84 9f		      sty	fromSquare	;B64
    520  6363
    521  6363		       a6 a1		      ldx	toSquare
    522  6365		       bc 00 ff 	      ldy	X12toBase64,x
    523  6368		       84 a1		      sty	toSquare	;B64
    524  636a
    525  636a		       60	   halted     rts
    526  636b
    527  636b
    528  636b							;---------------------------------------------------------------------------------------------------
    529  636b
      0  636b					      DEF	CheckMoveListFromSquare
      1  636b				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  636b
      3  636b				   CheckMoveListFromSquare
    531  636b					      SUBROUTINE
    532  636b
    533  636b							; X12 in A
    534  636b							; y = -1 on return if NOT FOUND
    535  636b
    536  636b		       ac 35 f0 	      ldy	moveIndex
    537  636e		       30 35		      bmi	.failed
    538  6370
ply.asm (539): error: Label mismatch...
 --> 540.scan f383                  
    539  6370		       d9 36 f0    .scan      cmp	MoveFrom,y
    540  6373		       f0 36		      beq	.scanned
    541  6375		       88		      dey
    542  6376		       10 f8		      bpl	.scan
    543  6378
    544  6378		       b9 80 f1    .scanned   lda	MovePiece,y
    545  637b		       85 a6		      sta	aiPiece
    546  637d
    547  637d		       60	   .failed    rts
    548  637e
    549  637e							;---------------------------------------------------------------------------------------------------
    550  637e
      0  637e					      DEF	IsSquareUnderAttack
      1  637e				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  637e
      3  637e				   IsSquareUnderAttack
    552  637e					      SUBROUTINE
    553  637e
    554  637e							; Scan the movelist to find if given square is under attack
    555  637e
    556  637e							; Pass:	 A = X12 square to check
    557  637e							; Return:	 CC = no
    558  637e
    559  637e		       ac 35 f0 	      ldy	moveIndex
    560  6381		       30 1b		      bmi	.exit
    561  6383		       d9 00 f1    .scan      cmp	MoveTo,y
    562  6386		       f0 19		      beq	.found	; YES!
    563  6388		       88		      dey
    564  6389		       10 f8		      bpl	.scan
    565  638b
ply.asm (566): error: Label mismatch...
 --> 542.exit f39e                  
    566  638b		       18	   .exit      clc
ply.asm (567): error: Label mismatch...
 --> 542.found f3a1                  
    567  638c		       60	   .found     rts
    568  638d
    569  638d
    570  638d							;---------------------------------------------------------------------------------------------------
    571  638d
      0  638d					      DEF	GetKingSquare
      1  638d				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  638d
      3  638d				   GetKingSquare
    573  638d					      SUBROUTINE
    574  638d
    575  638d							; Return:	 a = square king is on (or -1)
    576  638d
    577  638d		       ac 30 f0 	      ldy	PieceListPtr
    578  6390		       30 30		      bmi	.exit	; no pieces?!
    579  6392		       b9 20 f0    .find      lda	PieceType,y
    580  6395		       29 0f		      and	#PIECE_MASK
    581  6397		       c9 07		      cmp	#KING
    582  6399		       f0 21		      beq	.found
    583  639b		       88		      dey
    584  639c		       10 f4		      bpl	.find
    585  639e
    586  639e		       a9 ff	   .exit      lda	#-1	; not found/no king square
    587  63a0		       60		      rts
    588  63a1
ply.asm (589): error: Label mismatch...
 --> 544.found f3bc                  
    589  63a1		       b9 10 f0    .found     lda	PieceSquare,y
    590  63a4		       60		      rts
    591  63a5
    592  63a5
    593  63a5							;---------------------------------------------------------------------------------------------------
    594  63a5
      0  63a5					      DEF	GetPieceGivenFromToSquares
      1  63a5				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  63a5
      3  63a5				   GetPieceGivenFromToSquares
    596  63a5					      SUBROUTINE
    597  63a5
    598  63a5							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    599  63a5							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    600  63a5							; This fixes the move with/without castle flag
    601  63a5
    602  63a5		       ac 35 f0 	      ldy	moveIndex
    603  63a8		       30 35		      bmi	.fail	; shouldn't happen
ply.asm (604): error: Label mismatch...
 --> 546.scan f3c7                  
    604  63aa		       a5 86	   .scan      lda	fromX12
    605  63ac		       d9 36 f0 	      cmp	MoveFrom,y
    606  63af		       d0 36		      bne	.next
    607  63b1		       a5 87		      lda	toX12
    608  63b3		       d9 00 f1 	      cmp	MoveTo,y
    609  63b6		       f0 00		      beq	.found
    610  63b8		       88	   .next      dey
    611  63b9		       10 ef		      bpl	.scan
    612  63bb		       60	   .fail      rts
    613  63bc
    614  63bc		       b9 80 f1    .found     lda	MovePiece,y
    615  63bf		       85 a6		      sta	aiPiece
    616  63c1		       60		      rts
    617  63c2
    618  63c2
    619  63c2
    620  63c2							;---------------------------------------------------------------------------------------------------
    621  63c2
      0  63c2					      DEF	CheckMoveListToSquare
      1  63c2				   BANK_CheckMoveListToSquare SET	_CURRENT_BANK
      2  63c2
      3  63c2				   CheckMoveListToSquare
    623  63c2					      SUBROUTINE
    624  63c2
    625  63c2							; X12 in A
    626  63c2							; y = -1 on return if NOT FOUND
    627  63c2
    628  63c2		       ac 35 f0 	      ldy	moveIndex
    629  63c5		       30 35		      bmi	.sout
    630  63c7		       d9 00 f1    .scan      cmp	MoveTo,y
    631  63ca		       d0 00		      bne	.xscanned
    632  63cc
    633  63cc		       48		      pha
    634  63cd		       b9 36 f0 	      lda	MoveFrom,y
    635  63d0		       c5 93		      cmp	aiFromSquareX12
    636  63d2		       f0 93		      beq	.scanned
    637  63d4		       68		      pla
    638  63d5
    639  63d5		       88	   .xscanned  dey
    640  63d6		       10 ef		      bpl	.scan
    641  63d8		       48		      pha
    642  63d9
    643  63d9		       68	   .scanned   pla
    644  63da		       60	   .sout      rts
    645  63db
    646  63db
      0  63db					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  63db
      2  63db
      3  63db		       03 db	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3db , FREE= $25
      4  63db					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  63db				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  63db				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  63db				  -	      ERR
      8  63db					      endif
    648  63db
    649  63db							;---------------------------------------------------------------------------------------------------
    650  63db
    651  63db							; There is space here (1K) for use as ROM
    652  63db							; but NOT when the above bank is switched in as RAM, of course!
    653  63db
    654  63db
    655  63db
    656  63db
    657  63db							;---------------------------------------------------------------------------------------------------
    658  63db							; EOF
------- FILE ./chess.asm
    363  63db
    364  63db							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 2
      0  63db					      include	"BANK_FIXED.asm"
      1  63db							; Chess
      2  63db							; Copyright (c) 2019-2020 Andrew Davie
      3  63db							; andrew@taswegian.com
      4  63db
      5  63db
      6  63db							;---------------------------------------------------------------------------------------------------
      7  63db							;#########################################  FIXED BANK  ############################################
      8  63db							;---------------------------------------------------------------------------------------------------
      9  63db
     10  63db				   ORIGIN     SET	FIXED_BANK
     11  63db
      0  63db					      NEWBANK	THE_FIXED_BANK
      1  7f64 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800							;---------------------------------------------------------------------------------------------------
     16  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800
      3  7800				   Reset
     18  7800					      SUBROUTINE
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 84		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;lda #BANK_TitleScreen
     34  780e							;sta SET_BANK
     35  780e							;jsr TitleScreen
     36  780e
     37  780e
     38  780e							; Move a copy of the row bank template to the first 8 banks of RAM
     39  780e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     40  780e
      0  780e					      JSRAM_SAFE	SetupBanks
      1  780e
      2  780e
      3  780e
      4  780e		       a9 00		      lda	#BANK_SetupBanks
      5  7810		       85 8e		      sta	savedBank
      6  7812		       85 3f		      sta	SET_BANK
      7  7814		       20 1f f1 	      jsr	SetupBanks
     42  7817
     43  7817							; Patch the final row's "loop" to a RTS
     44  7817
     45  7817		       a2 07		      ldx	#7
     46  7819		       86 3e		      stx	SET_BANK_RAM
     47  781b		       a9 60		      lda	#$60	; "rts"
     48  781d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     49  7820
     50  7820
     51  7820		       a5 9c		      lda	currentPly
     52  7822		       85 3e		      sta	SET_BANK_RAM
     53  7824		       20 90 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     54  7827
     55  7827		       a9 09		      lda	#RAMBANK_PLY
     56  7829		       85 3e		      sta	SET_BANK_RAM
     57  782b		       20 eb fc 	      jsr	InitialisePieceSquares
     58  782e
     59  782e		       a9 00		      lda	#WHITE
     60  7830		       85 9e		      sta	sideToMove
     61  7832
     62  7832							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     63  7832
     64  7832		       a9 00		      lda	#0
     65  7834		       85 82		      sta	drawPhase
     66  7836
     67  7836							;---------------------------------------------------------------------------------------------------
     68  7836
     69  7836							;RESYNC
     70  7836				   .StartFrame
     71  7836
     72  7836
     73  7836							; START OF FRAME
     74  7836
     75  7836		       a9 0e		      lda	#%1110	; VSYNC ON
     76  7838		       85 42	   .loopVSync3 sta	WSYNC
     77  783a		       85 40		      sta	VSYNC
     78  783c		       4a		      lsr
     79  783d		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     80  783f
     81  783f		       a0 37		      ldy	#55	;VBLANK_TIM_NTSC
     82  7841		       8c 96 02 	      sty	TIM64T
     83  7844
     84  7844							; LOTS OF PROCESSING TIME - USE IT
     85  7844
     86  7844		       a2 00		      ldx	#0
     87  7846		       86 41		      stx	VBLANK
     88  7848
     89  7848
     90  7848					      IF	ASSERTS
     91  7848							;		      lda #$C2
     92  7848							;		      sta COLUBK		     ; colour timing band top of screen
     93  7848					      ENDIF
     94  7848
     95  7848							;		      lda #STATEMACHINE
     96  7848							;		      sta SET_BANK
     97  7848		       20 9e f8 	      jsr	AiStateMachine
     98  784b
     99  784b							;jsr SAFE_PhasedProcessor
    100  784b
    101  784b					      IF	ASSERTS
    102  784b							;		      lda #0
    103  784b							;		      sta COLUBK		     ; end of timing band
    104  784b					      ENDIF
    105  784b
    106  784b					      if	ASSERTS
    107  784b							; Catch timer expired already
    108  784b		       2c 85 02 	      bit	TIMINT
    109  784e							;.whoops	      bmi .whoops
    110  784e					      endif
    111  784e
    112  784e
    113  784e		       2c 85 02    .wait      bit	TIMINT
    114  7851		       10 fb		      bpl	.wait
    115  7853
    116  7853
    117  7853
    118  7853							; START OF VISIBLE SCANLINES
    119  7853
    120  7853		       85 42		      sta	WSYNC
    121  7855
    122  7855		       20 9d f8 	      jsr	_rts
    123  7858		       20 9d f8 	      jsr	_rts
    124  785b		       20 9d f8 	      jsr	_rts
    125  785e		       20 9d f8 	      jsr	_rts
      0  7861					      SLEEP	3
      1  7861				   .CYCLES    SET	3
      2  7861
      3  7861				  -	      IF	.CYCLES < 2
      4  7861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  7861				  -	      ERR
      6  7861					      ENDIF
      7  7861
      8  7861					      IF	.CYCLES & 1
      9  7861					      IFNCONST	NO_ILLEGAL_OPCODES
     10  7861		       04 00		      nop	0
     11  7863				  -	      ELSE
     12  7863				  -	      bit	VSYNC
     13  7863					      ENDIF
     14  7863				   .CYCLES    SET	.CYCLES - 3
     15  7863					      ENDIF
     16  7863
     17  7863				  -	      REPEAT	.CYCLES / 2
     18  7863				  -	      nop
     19  7863					      REPEND
    127  7863
    128  7863		       a2 00		      ldx	#0
    129  7865		       86 41		      stx	VBLANK
    130  7867
    131  7867		       86 3e		      stx	SET_BANK_RAM
    132  7869		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    133  786c
    134  786c
    135  786c
    136  786c
    137  786c		       a9 00		      lda	#0
    138  786e		       85 4d		      sta	PF0
    139  7870		       85 4e		      sta	PF1
    140  7872		       85 4f		      sta	PF2
    141  7874		       85 5b		      sta	GRP0
    142  7876		       85 5c		      sta	GRP1
    143  7878
    144  7878		       a9 42		      lda	#%01000010	; bit6 is not required
    145  787a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    146  787c
    147  787c
    148  787c							; END OF VISIBLE SCREEN
    149  787c							; HERE'S SOME TIME TO DO STUFF
    150  787c
    151  787c		       a9 26		      lda	#38
    152  787e		       8d 96 02 	      sta	TIM64T
    153  7881
    154  7881							;
      0  7881					      JSRAM	PositionSprites
      1  7881
      2  7881		       a9 09		      lda	#BANK_PositionSprites
      3  7883		       85 3f		      sta	SET_BANK
      4  7885		       20 43 f2 	      jsr	PositionSprites
    156  7888
    157  7888
    158  7888
    159  7888							; "draw" sprite shapes into row banks
    160  7888
    161  7888		       a2 07		      ldx	#7
    162  788a		       86 3e	   zapem      stx	SET_BANK_RAM
    163  788c		       20 a6 f2 	      jsr	WriteBlank
    164  788f		       ca		      dex
    165  7890		       10 f8		      bpl	zapem
    166  7892
    167  7892		       20 cf f2 	      jsr	WriteCursor
    168  7895
    169  7895
    170  7895		       2c 85 02    Waitforit  bit	TIMINT
    171  7898		       10 fb		      bpl	Waitforit
    172  789a
    173  789a		       4c 36 f8 	      jmp	.StartFrame
    174  789d
    175  789d
    176  789d		       60	   _rts       rts
    177  789e
    178  789e
    179  789e							;---------------------------------------------------------------------------------------------------
    180  789e
      0  789e					      DEF	AiStateMachine
      1  789e				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  789e
      3  789e				   AiStateMachine
    182  789e					      SUBROUTINE
    183  789e
    184  789e		       a9 09		      lda	#STATEMACHINE
    185  78a0		       85 3f		      sta	SET_BANK	; to access vectors
    186  78a2
    187  78a2		       a6 8f		      ldx	aiPhase
    188  78a4		       bd 00 f0 	      lda	AiVectorLO,x
    189  78a7		       85 ef		      sta	__ptr
    190  78a9		       bd 0e f0 	      lda	AiVectorHI,x
    191  78ac		       85 f0		      sta	__ptr+1
    192  78ae
    193  78ae		       bd 1c f0 	      lda	AiVectorBANK,x
    194  78b1		       85 8e		      sta	savedBank
    195  78b3		       85 3f		      sta	SET_BANK
    196  78b5
    197  78b5		       6c ef 00 	      jmp	(__ptr)
    198  78b8
    199  78b8
    200  78b8							;---------------------------------------------------------------------------------------------------
    201  78b8
    202  78b8							;    DEF SAFE_PhasedProcessor
    203  78b8							;    SUBROUTINE
    204  78b8
    205  78b8							;		      jsr PhaseJump
    206  78b8							;		      lda savedBank
    207  78b8							;		      sta SET_BANK
    208  78b8							;		      rts
    209  78b8
    210  78b8							;---------------------------------------------------------------------------------------------------
    211  78b8
    212  78b8				  -	      if	0
    213  78b8				  -	      DEF	PhaseJump
    214  78b8				  -	      SUBROUTINE
    215  78b8				  -
    216  78b8				  -	      ldx	drawPhase
    217  78b8				  -	      lda	DrawVectorLO,x
    218  78b8				  -	      sta	__ptr
    219  78b8				  -	      lda	DrawVectorHI,x
    220  78b8				  -	      sta	__ptr+1
    221  78b8				  -	      lda	DrawVectorBANK,x
    222  78b8				  -	      sta	savedBank
    223  78b8				  -	      sta	SET_BANK
    224  78b8				  -	      jmp	(__ptr)
    225  78b8					      endif
    226  78b8
    227  78b8		       00 0a	   MARCH      =	10
    228  78b8		       00 04	   STARTMOVE  =	4
    229  78b8		       00 07	   CSL	      =	7
    230  78b8
    231  78b8				   DrawVectorLO
    232  78b8		       41		      .byte.b	<aiStartClearBoard	; 0
    233  78b9		       4c		      .byte.b	<aiClearEachRow	; 1
    234  78ba		       fd		      .byte.b	<DrawEntireBoard	; 2
    235  78bb		       94		      .byte.b	<DEB2	; 3
    236  78bc		       24		      .byte.b	<FlipBuffers	; 4
    237  78bd		       6d		      .byte.b	<FB0	; 5
    238  78be		       86		      .byte.b	<FB2	; 6
    239  78bf		       60		      .byte.b	<FB3	; 7
    240  78c0		       67		      .byte.b	<EraseStartPiece	; 8
    241  78c1		       78		      .byte.b	<WriteStartPieceBlank	; 9
    242  78c2		       a2		      .byte.b	<MarchToTargetA	; 10
    243  78c3		       a1		      .byte.b	<MarchB	; 11
    244  78c4		       11		      .byte.b	<MarchToTargetB	; 12
    245  78c5		       31		      .byte.b	<MarchB2	; 13
    246  78c6		       af		      .byte.b	<FinalFlash	; 14
    247  78c7		       61		      .byte.b	<SpecialMoveFixup	; 15
    248  78c8
    249  78c8				   DrawVectorHI
    250  78c8		       f0		      .byte.b	>aiStartClearBoard
    251  78c9		       f0		      .byte.b	>aiClearEachRow
    252  78ca		       f8		      .byte.b	>DrawEntireBoard
    253  78cb		       f0		      .byte.b	>DEB2
    254  78cc		       f9		      .byte.b	>FlipBuffers
    255  78cd		       f9		      .byte.b	>FB0
    256  78ce		       f9		      .byte.b	>FB2
    257  78cf		       f0		      .byte.b	>FB3
    258  78d0		       f0		      .byte.b	>EraseStartPiece
    259  78d1		       f0		      .byte.b	>WriteStartPieceBlank
    260  78d2		       f9		      .byte.b	>MarchToTargetA
    261  78d3		       f0		      .byte.b	>MarchB
    262  78d4		       fa		      .byte.b	>MarchToTargetB
    263  78d5		       fa		      .byte.b	>MarchB2
    264  78d6		       f0		      .byte.b	>FinalFlash
    265  78d7		       fa		      .byte.b	>SpecialMoveFixup
    266  78d8
    267  78d8				   DrawVectorBANK
    268  78d8
    269  78d8		       00		      .byte.b	BANK_aiStartClearBoard
    270  78d9		       00		      .byte.b	BANK_aiClearEachRow
    271  78da		       0f		      .byte.b	BANK_DrawEntireBoard
    272  78db		       00		      .byte.b	BANK_DEB2
    273  78dc		       0f		      .byte.b	BANK_FlipBuffers
    274  78dd		       0f		      .byte.b	BANK_FB0
    275  78de		       0f		      .byte.b	BANK_FB2
    276  78df		       00		      .byte.b	BANK_FB3
    277  78e0		       00		      .byte.b	BANK_EraseStartPiece
    278  78e1		       00		      .byte.b	BANK_WriteStartPieceBlank
    279  78e2		       0f		      .byte.b	BANK_MarchToTargetA
    280  78e3		       00		      .byte.b	BANK_MarchB
    281  78e4		       0f		      .byte.b	BANK_MarchToTargetB
    282  78e5		       0f		      .byte.b	BANK_MarchB2
    283  78e6		       00		      .byte.b	BANK_FinalFlash
    284  78e7		       0f		      .byte.b	BANK_SpecialMoveFixup
    285  78e8
    286  78e8							;---------------------------------------------------------------------------------------------------
    287  78e8
      0  78e8					      DEF	CallClear
      1  78e8				   BANK_CallClear SET	_CURRENT_BANK
      2  78e8
      3  78e8				   CallClear
    289  78e8					      SUBROUTINE
    290  78e8
    291  78e8		       84 3e		      sty	SET_BANK_RAM
    292  78ea		       20 c8 f0 	      jsr	ClearRowBitmap
    293  78ed		       60		      rts
    294  78ee
    295  78ee							;---------------------------------------------------------------------------------------------------
    296  78ee
      0  78ee					      DEF	SAFE_Get64toX12Board
      1  78ee				   BANK_SAFE_Get64toX12Board SET	_CURRENT_BANK
      2  78ee
      3  78ee				   SAFE_Get64toX12Board
    298  78ee					      SUBROUTINE
    299  78ee
    300  78ee		       a9 08		      lda	#RAMBANK_MOVES_RAM
    301  78f0		       85 3e		      sta	SET_BANK_RAM
    302  78f2		       bc 4b f3 	      ldy	Base64ToIndex,x
    303  78f5		       b9 7a f0 	      lda	Board,y
    304  78f8		       a4 8e		      ldy	savedBank
    305  78fa		       84 3f		      sty	SET_BANK
    306  78fc		       60		      rts
    307  78fd
    308  78fd							;---------------------------------------------------------------------------------------------------
    309  78fd
      0  78fd					      DEF	DrawEntireBoard
      1  78fd				   BANK_DrawEntireBoard SET	_CURRENT_BANK
      2  78fd
      3  78fd				   DrawEntireBoard
    311  78fd					      SUBROUTINE
    312  78fd
    313  78fd		       a9 08		      lda	#RAMBANK_MOVES_RAM
    314  78ff		       85 3e		      sta	SET_BANK_RAM
    315  7901
    316  7901		       a6 80		      ldx	drawPieceNumber
    317  7903		       bc 4b f3 	      ldy	Base64ToIndex,x
    318  7906		       b9 7a f0 	      lda	Board,y
    319  7909		       f0 7a		      beq	.isablank
    320  790b		       48		      pha
    321  790c		       a9 00		      lda	#BLANK
    322  790e		       99 7a f4 	      sta	Board+RAM_WRITE,y
    323  7911
    324  7911		       20 e6 fd 	      jsr	CopySinglePiece
    325  7914
    326  7914		       a9 08		      lda	#RAMBANK_MOVES_RAM
    327  7916		       85 3e		      sta	SET_BANK_RAM
    328  7918		       a6 80		      ldx	drawPieceNumber
    329  791a		       bc 4b f3 	      ldy	Base64ToIndex,x
    330  791d		       68		      pla
    331  791e		       99 7a f4 	      sta	Board+RAM_WRITE,y
    332  7921
    333  7921		       e6 82	   .isablank  inc	drawPhase
    334  7923		       60		      rts
    335  7924
    336  7924
    337  7924							;---------------------------------------------------------------------------------------------------
    338  7924
      0  7924					      DEF	FlipBuffers
      1  7924				   BANK_FlipBuffers SET	_CURRENT_BANK
      2  7924
      3  7924				   FlipBuffers
    340  7924					      SUBROUTINE
    341  7924
    342  7924							; Initialise for a new move
    343  7924
    344  7924
    345  7924
    346  7924		       a5 9c		      lda	currentPly
    347  7926		       85 3e		      sta	SET_BANK_RAM
    348  7928
    349  7928		       20 90 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    350  792b
    351  792b		       ad 34 f0 	      lda	enPassantSquare	; potentially set by move in previous ply
    352  792e		       85 9a		      sta	enPassantPawn	; grab enPassant flag from PLY for later checking
    353  7930
    354  7930
    355  7930		       a9 0b		      lda	#AI_SartMoveGen
    356  7932		       85 8f		      sta	aiPhase
    357  7934
    358  7934		       e6 82		      inc	drawPhase
    359  7936		       60		      rts
    360  7937
    361  7937
    362  7937							;---------------------------------------------------------------------------------------------------
    363  7937
      0  7937					      DEF	SAFE_InitialiseMoveGeneration
      1  7937				   BANK_SAFE_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  7937
      3  7937				   SAFE_InitialiseMoveGeneration
    365  7937					      SUBROUTINE
    366  7937
    367  7937		       a5 9c		      lda	currentPly
    368  7939		       85 3e		      sta	SET_BANK_RAM
    369  793b
    370  793b		       20 90 f2 	      jsr	NewPlyInitialise
    371  793e
    372  793e		       a5 8e		      lda	savedBank
    373  7940		       85 3f		      sta	SET_BANK
    374  7942		       60		      rts
    375  7943
    376  7943
    377  7943							;---------------------------------------------------------------------------------------------------
    378  7943
    379  7943							;TODO...
      0  7943					      DEF	SAFE_GenerateOneMove
      1  7943				   BANK_SAFE_GenerateOneMove SET	_CURRENT_BANK
      2  7943
      3  7943				   SAFE_GenerateOneMove
    381  7943					      SUBROUTINE
    382  7943
    383  7943		       a5 9c		      lda	currentPly
    384  7945		       85 3e		      sta	SET_BANK_RAM
    385  7947		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    386  794a
    387  794a		       a5 8e		      lda	savedBank
    388  794c		       85 3f		      sta	SET_BANK
    389  794e		       60		      rts
    390  794f
    391  794f
    392  794f							;---------------------------------------------------------------------------------------------------
    393  794f
    394  794f							;TODO...
      0  794f					      DEF	SAFE_LookForCheck
      1  794f				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  794f
      3  794f				   SAFE_LookForCheck
    396  794f					      SUBROUTINE
    397  794f
    398  794f		       a5 9c		      lda	currentPly
    399  7951		       85 3e		      sta	SET_BANK_RAM
    400  7953
    401  7953		       ac 35 f0 	      ldy	moveIndex
    402  7956		       30 35		      bmi	.failed
    403  7958
    404  7958		       be 00 f1    .scan      ldx	MoveTo,y
    405  795b		       bd 7a f0 	      lda	Board,x
    406  795e		       29 0f		      and	#PIECE_MASK
    407  7960		       c9 07		      cmp	#KING
    408  7962		       f0 07		      beq	.inCheck	; --> CS too
    409  7964		       88		      dey
    410  7965		       10 f1		      bpl	.scan
    411  7967
    412  7967		       18	   .failed    clc
    413  7968
    414  7968		       a5 8e	   .inCheck   lda	savedBank	; CS or CC
    415  796a		       85 3f		      sta	SET_BANK
    416  796c		       60		      rts
    417  796d
    418  796d							;---------------------------------------------------------------------------------------------------
    419  796d
      0  796d					      DEF	FB0
      1  796d				   BANK_FB0   SET	_CURRENT_BANK
      2  796d
      3  796d				   FB0
    421  796d					      SUBROUTINE
    422  796d
    423  796d							; Call move generation for all pieces
    424  796d							; Test alpha-beta
    425  796d
    426  796d		       a5 9c		      lda	currentPly
    427  796f		       85 3e		      sta	SET_BANK_RAM
    428  7971		       20 da f2 	      jsr	alphaBeta
    429  7974
    430  7974		       a5 9c		      lda	currentPly
    431  7976		       85 3e		      sta	SET_BANK_RAM
    432  7978		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    433  797b
    434  797b		       a5 9d		      lda	piecelistIndex
    435  797d		       29 0f		      and	#15
    436  797f		       c9 00		      cmp	#0
    437  7981		       d0 00		      bne	.wait
    438  7983
    439  7983		       e6 82		      inc	drawPhase
    440  7985		       60	   .wait      rts
    441  7986
    442  7986
    443  7986							;---------------------------------------------------------------------------------------------------
    444  7986
      0  7986					      DEF	FB2
      1  7986				   BANK_FB2   SET	_CURRENT_BANK
      2  7986
      3  7986				   FB2
    446  7986					      SUBROUTINE
    447  7986
    448  7986							; Choose one of the moves
    449  7986
    450  7986		       a5 9c		      lda	currentPly
    451  7988		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    452  798a
    453  798a		       ad 35 f0 	      lda	moveIndex
    454  798d		       c9 ff		      cmp	#-1
    455  798f		       f0 ff		      beq	.halted	; no valid moves
    456  7991
    457  7991
    458  7991		       a9 ff		      lda	#-1
    459  7993		       85 9f		      sta	fromSquare
    460  7995		       85 a1		      sta	toSquare
    461  7997
    462  7997		       a5 9e		      lda	sideToMove
    463  7999		       10 9e		      bpl	.notComputer
    464  799b
    465  799b		       20 1d fe 	      jsr	MoveViaList
    466  799e
    467  799e		       e6 82	   .notComputer inc	drawPhase
    468  79a0		       60	   .halted    rts
    469  79a1
    470  79a1
    471  79a1							;---------------------------------------------------------------------------------------------------
    472  79a1
      0  79a1					      DEF	debug
      1  79a1				   BANK_debug SET	_CURRENT_BANK
      2  79a1
      3  79a1				   debug
    474  79a1					      SUBROUTINE
    475  79a1
    476  79a1							; Use this to trap breakpoints in "unknown" banks. Just "jsr catch" from wherever you want
    477  79a1							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    478  79a1							; you wanted to see, without knowing the bank.
    479  79a1
    480  79a1		       60		      rts
    481  79a2
    482  79a2
    483  79a2							;---------------------------------------------------------------------------------------------------
    484  79a2
      0  79a2					      DEF	MarchToTargetA
      1  79a2				   BANK_MarchToTargetA SET	_CURRENT_BANK
      2  79a2
      3  79a2				   MarchToTargetA
    486  79a2					      SUBROUTINE
    487  79a2
    488  79a2							; Start marching towards destination
    489  79a2
    490  79a2		       a5 83		      lda	drawDelay
    491  79a4		       f0 83		      beq	.progress
    492  79a6							;dec drawDelay
    493  79a6							;rts
    494  79a6				   .progress
    495  79a6
    496  79a6
    497  79a6		       a5 9f		      lda	fromSquare
    498  79a8		       c5 a1		      cmp	toSquare
    499  79aa		       f0 a1		      beq	.unmoved
    500  79ac
    501  79ac							; Now we calculate move to new square
    502  79ac
    503  79ac		       a5 9f		      lda	fromSquare
    504  79ae		       85 84		      sta	lastSquare
    505  79b0		       4a		      lsr
    506  79b1		       4a		      lsr
    507  79b2		       4a		      lsr
    508  79b3		       85 a7		      sta	__fromRow
    509  79b5		       a5 a1		      lda	toSquare
    510  79b7		       4a		      lsr
    511  79b8		       4a		      lsr
    512  79b9		       4a		      lsr
    513  79ba		       c5 a7		      cmp	__fromRow
    514  79bc		       f0 11		      beq	rowOK
    515  79be		       b0 11		      bcs	.downRow
    516  79c0		       a5 9f		      lda	fromSquare
    517  79c2		       e9 07		      sbc	#7
    518  79c4		       85 9f		      sta	fromSquare
    519  79c6		       4c cf f9 	      jmp	nowcol
    520  79c9		       a5 9f	   .downRow   lda	fromSquare
    521  79cb		       69 07		      adc	#7
    522  79cd		       85 9f		      sta	fromSquare
    523  79cf				   rowOK
    524  79cf				   nowcol
    525  79cf
    526  79cf		       a5 9f		      lda	fromSquare
    527  79d1		       29 07		      and	#7
    528  79d3		       85 a7		      sta	__fromRow
    529  79d5		       a5 a1		      lda	toSquare
    530  79d7		       29 07		      and	#7
    531  79d9		       c5 a7		      cmp	__fromRow
    532  79db		       f0 09		      beq	colok
    533  79dd		       90 09		      bcc	.leftCol
    534  79df		       e6 9f		      inc	fromSquare
    535  79e1		       4c e6 f9 	      jmp	colok
    536  79e4		       c6 9f	   .leftCol   dec	fromSquare
    537  79e6				   colok
    538  79e6
    539  79e6							; erase object in new sqare --> blank
    540  79e6
    541  79e6		       a6 9f		      ldx	fromSquare
    542  79e8		       86 80		      stx	drawPieceNumber
    543  79ea		       a9 08		      lda	#RAMBANK_MOVES_RAM
    544  79ec		       85 3e		      sta	SET_BANK_RAM
    545  79ee		       bc 4b f3 	      ldy	Base64ToIndex,x
    546  79f1		       b9 7a f0 	      lda	Board,y
    547  79f4		       f0 7a		      beq	.skipbl
    548  79f6		       20 e6 fd 	      jsr	CopySinglePiece	; erase next square along --> blank
    549  79f9
    550  79f9		       a9 08	   .skipbl    lda	#RAMBANK_MOVES_RAM
    551  79fb		       85 3e		      sta	SET_BANK_RAM
    552  79fd		       a6 9f		      ldx	fromSquare
    553  79ff		       bc 4b f3 	      ldy	Base64ToIndex,x
    554  7a02
    555  7a02		       b9 7a f0 	      lda	Board,y
    556  7a05		       85 a3		      sta	lastPiece	; what we are overwriting
    557  7a07		       a5 a0		      lda	fromPiece
    558  7a09		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling for K/R
    559  7a0b		       99 7a f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    560  7a0e		       e6 82		      inc	drawPhase
    561  7a10
    562  7a10		       60	   .unmoved   rts
    563  7a11
    564  7a11
    565  7a11							;---------------------------------------------------------------------------------------------------
    566  7a11
      0  7a11					      DEF	MarchToTargetB
      1  7a11				   BANK_MarchToTargetB SET	_CURRENT_BANK
      2  7a11
      3  7a11				   MarchToTargetB
    568  7a11					      SUBROUTINE
    569  7a11
    570  7a11		       a5 83		      lda	drawDelay
    571  7a13		       f0 83		      beq	.mb
    572  7a15							;dec drawDelay
    573  7a15							;rts
    574  7a15				   .mb
    575  7a15
    576  7a15
    577  7a15							; now we want to undraw the piece in the old square
    578  7a15
    579  7a15		       a5 84		      lda	lastSquare
    580  7a17		       85 80		      sta	drawPieceNumber
    581  7a19		       20 e6 fd 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    582  7a1c
    583  7a1c		       a9 08		      lda	#RAMBANK_MOVES_RAM
    584  7a1e		       85 3e		      sta	SET_BANK_RAM
    585  7a20		       a5 a4		      lda	previousPiece
    586  7a22
    587  7a22		       a6 84		      ldx	lastSquare
    588  7a24		       bc 4b f3 	      ldy	Base64ToIndex,x
    589  7a27		       99 7a f4 	      sta	Board+RAM_WRITE,y
    590  7a2a
    591  7a2a		       a5 a3		      lda	lastPiece
    592  7a2c		       85 a4		      sta	previousPiece
    593  7a2e
    594  7a2e		       e6 82		      inc	drawPhase
    595  7a30		       60		      rts
    596  7a31
    597  7a31
    598  7a31							;---------------------------------------------------------------------------------------------------
    599  7a31
      0  7a31					      DEF	MarchB2
      1  7a31				   BANK_MarchB2 SET	_CURRENT_BANK
      2  7a31
      3  7a31				   MarchB2
    601  7a31					      SUBROUTINE
    602  7a31
    603  7a31		       a6 84		      ldx	lastSquare
    604  7a33		       86 80		      stx	drawPieceNumber
    605  7a35
    606  7a35		       a9 08		      lda	#RAMBANK_MOVES_RAM
    607  7a37		       85 3e		      sta	SET_BANK_RAM
    608  7a39		       bc 4b f3 	      ldy	Base64ToIndex,x
    609  7a3c		       b9 7a f0 	      lda	Board,y
    610  7a3f		       f0 7a		      beq	.skipbl2
    611  7a41
    612  7a41		       20 e6 fd 	      jsr	CopySinglePiece	; draw previous piece back in old position
    613  7a44				   .skipbl2
    614  7a44		       a5 9f		      lda	fromSquare
    615  7a46		       c5 a1		      cmp	toSquare
    616  7a48		       f0 09		      beq	xhalt
    617  7a4a
    618  7a4a		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    619  7a4c		       85 83		      sta	drawDelay
    620  7a4e
    621  7a4e		       a9 0a		      lda	#MARCH
    622  7a50		       85 82		      sta	drawPhase
    623  7a52		       60		      rts
    624  7a53
    625  7a53				   xhalt
    626  7a53
    627  7a53		       20 25 fe 	      jsr	FinaliseMove
    628  7a56
    629  7a56
    630  7a56		       a9 04		      lda	#4	; on/off count
    631  7a58		       85 85		      sta	drawCount	; flashing for piece about to move
    632  7a5a		       a9 00		      lda	#0
    633  7a5c		       85 83		      sta	drawDelay
    634  7a5e
    635  7a5e		       e6 82		      inc	drawPhase
    636  7a60		       60		      rts
    637  7a61
    638  7a61
    639  7a61							;---------------------------------------------------------------------------------------------------
    640  7a61
      0  7a61					      DEF	SpecialMoveFixup
      1  7a61				   BANK_SpecialMoveFixup SET	_CURRENT_BANK
      2  7a61
      3  7a61				   SpecialMoveFixup
    642  7a61					      SUBROUTINE
    643  7a61
    644  7a61		       a9 04		      lda	#STARTMOVE
    645  7a63		       85 82		      sta	drawPhase
    646  7a65
      0  7a65					      JSRAM_SAFE	CastleFixup
      1  7a65
      2  7a65
      3  7a65
      4  7a65		       a9 00		      lda	#BANK_CastleFixup
      5  7a67		       85 8e		      sta	savedBank
      6  7a69		       85 3f		      sta	SET_BANK
      7  7a6b		       20 cb f0 	      jsr	CastleFixup
    648  7a6e
    649  7a6e							; Handle en-passant captures
    650  7a6e
    651  7a6e		       a5 a0		      lda	fromPiece
    652  7a70		       29 20		      and	#FLAG_ENPASSANT
    653  7a72		       f0 20		      beq	.noEP
    654  7a74
    655  7a74
    656  7a74							; TODO - handle the en-passant capture and fixup
    657  7a74
    658  7a74				   .noEP
    659  7a74
    660  7a74
    661  7a74
    662  7a74					      if	ASSERTS
      0  7a74					      JSRAM_SAFE	DIAGNOSTIC_checkPieces
      1  7a74
      2  7a74
      3  7a74
      4  7a74		       a9 0c		      lda	#BANK_DIAGNOSTIC_checkPieces
      5  7a76		       85 8e		      sta	savedBank
      6  7a78		       85 3f		      sta	SET_BANK
      7  7a7a		       20 42 f2 	      jsr	DIAGNOSTIC_checkPieces
    664  7a7d					      endif
    665  7a7d
    666  7a7d		       60		      rts
    667  7a7e
    668  7a7e
    669  7a7e							;---------------------------------------------------------------------------------------------------
    670  7a7e
      0  7a7e					      DEF	MoveForSinglePiece
      1  7a7e				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  7a7e
      3  7a7e				   MoveForSinglePiece
    672  7a7e					      SUBROUTINE
    673  7a7e
    674  7a7e		       a9 08		      lda	#RAMBANK_MOVES_RAM
    675  7a80		       85 3e		      sta	SET_BANK_RAM
    676  7a82
    677  7a82		       a6 98		      ldx	currentSquare	; used in move handlers
    678  7a84		       bd 7a f0 	      lda	Board,x
    679  7a87		       85 97		      sta	currentPiece
    680  7a89
    681  7a89							;***********************************************************************************************
    682  7a89					      IF	ASSERTS
    683  7a89					      SUBROUTINE
    684  7a89							; DEBUG: Make sure we're looking at correct colour
    685  7a89		       45 9e		      eor	sideToMove
    686  7a8b		       30 fe	   .lock      bmi	.lock
    687  7a8d		       a5 97		      lda	currentPiece
    688  7a8f					      ENDIF
    689  7a8f							;***********************************************************************************************
    690  7a8f
    691  7a8f		       29 0f		      and	#PIECE_MASK
    692  7a91		       a8		      tay
    693  7a92
    694  7a92							;***********************************************************************************************
    695  7a92					      IF	ASSERTS
    696  7a92							; DEBUG: Make sure we have an actual piece, not an empty square
    697  7a92					      SUBROUTINE
    698  7a92		       f0 fe	   .lock      beq	.lock	; catch errors
    699  7a94					      ENDIF
    700  7a94							;***********************************************************************************************
    701  7a94
    702  7a94		       b9 a6 fa 	      lda	HandlerVectorLO-1,y
    703  7a97		       85 a8		      sta	__vector
    704  7a99		       b9 ad fa 	      lda	HandlerVectorHI-1,y
    705  7a9c		       85 a9		      sta	__vector+1
    706  7a9e		       6c a8 00 	      jmp	(__vector)
    707  7aa1
    708  7aa1		       a5 9c	   MoveReturn lda	currentPly
    709  7aa3		       85 3e		      sta	SET_BANK_RAM
    710  7aa5
    711  7aa5		       60		      rts
    712  7aa6
      0  7aa6					      OPTIONAL_PAGEBREAK	"Vector Tables", 15
     10  7aa6					      LIST	ON
    714  7aa6
    715  7aa6		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    716  7aa7
    717  7aa7				   HandlerVectorLO
    718  7aa7		       e0		      .byte.b	<Handle_WHITE_PAWN	; 1
    719  7aa8		       a0		      .byte.b	<Handle_BLACK_PAWN	; 2
    720  7aa9		       33		      .byte.b	<Handle_KNIGHT	; 3
    721  7aaa		       a1		      .byte.b	<Handle_BISHOP	; 4
    722  7aab		       04		      .byte.b	<Handle_ROOK	; 5
    723  7aac		       de		      .byte.b	<Handle_QUEEN	; 6
    724  7aad		       67		      .byte.b	<Handle_KING	; 7
    725  7aae
    726  7aae				   HandlerVectorHI
    727  7aae		       fa		      .byte.b	>Handle_WHITE_PAWN
    728  7aaf		       fb		      .byte.b	>Handle_BLACK_PAWN
    729  7ab0		       fc		      .byte.b	>Handle_KNIGHT
    730  7ab1		       f1		      .byte.b	>Handle_BISHOP
    731  7ab2		       f2		      .byte.b	>Handle_ROOK
    732  7ab3		       f0		      .byte.b	>Handle_QUEEN
    733  7ab4		       f2		      .byte.b	>Handle_KING
    734  7ab5
    735  7ab5							;---------------------------------------------------------------------------------------------------
    736  7ab5
------- FILE Handler_PAWN.asm LEVEL 3 PASS 2
      0  7ab5					      include	"Handler_PAWN.asm"
      1  7ab5							; Copyright (C)2020 Andrew Davie
      2  7ab5							; Pawn move handlers
      3  7ab5
      4  7ab5							;---------------------------------------------------------------------------------------------------
      5  7ab5							; WHITE PAWN
      6  7ab5							;---------------------------------------------------------------------------------------------------
      7  7ab5
      8  7ab5		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  7ab5		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  7ab5
     11  7ab5							;---------------------------------------------------------------------------------------------------
     12  7ab5
     13  7ab5					      MAC	en_passant
     14  7ab5					      SUBROUTINE
     15  7ab5							; {1} = _LEFT or _RIGHT
     16  7ab5					      ldy	ValidSquare+{1},x
     17  7ab5					      cpy	enPassantPawn
     18  7ab5					      bne	.invalid
     19  7ab5					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     20  7ab5					      lda	Board,y
     21  7ab5					      bne	.invalid
     22  7ab5					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     23  7ab5				   .invalid
     24  7ab5					      ENDM
     25  7ab5
     26  7ab5							;---------------------------------------------------------------------------------------------------
     27  7ab5
     28  7ab5					      MAC	promote_pawn
     29  7ab5					      SUBROUTINE
     30  7ab5							;{1} = BLACK or WHITE
     31  7ab5
     32  7ab5					      lda	currentPiece
     33  7ab5					      pha
     34  7ab5
     35  7ab5					      sty	__temp
     36  7ab5					      lda	#{1}|QUEEN
     37  7ab5					      sta	currentPiece
     38  7ab5					      jsr	AddMove
     39  7ab5
     40  7ab5					      lda	#{1}|ROOK
     41  7ab5					      sta	currentPiece
     42  7ab5					      ldy	__temp
     43  7ab5					      jsr	AddMove
     44  7ab5
     45  7ab5					      lda	#{1}|BISHOP
     46  7ab5					      sta	currentPiece
     47  7ab5					      ldy	__temp
     48  7ab5					      jsr	AddMove
     49  7ab5
     50  7ab5					      lda	#{1}|KNIGHT
     51  7ab5					      sta	currentPiece
     52  7ab5					      ldy	__temp
     53  7ab5					      jsr	AddMove
     54  7ab5
     55  7ab5					      pla
     56  7ab5					      sta	currentPiece
     57  7ab5					      ENDM
     58  7ab5
     59  7ab5							;---------------------------------------------------------------------------------------------------
     60  7ab5
     61  7ab5					      MAC	move_or_promote_pawn
     62  7ab5					      SUBROUTINE
     63  7ab5							; {1} = BLACK or WHITE
     64  7ab5
     65  7ab5					      IF	{1} = WHITE
     66  7ab5					      cpy	#90	; last rank?
     67  7ab5					      bcc	.standard
     68  7ab5					      jsr	PromoteWhitePawn
     69  7ab5					      jmp	.pMoved
     70  7ab5					      ENDIF
     71  7ab5
     72  7ab5					      IF	{1} = BLACK
     73  7ab5					      cpy	#30	; last rank?
     74  7ab5					      bcs	.standard
     75  7ab5					      jsr	PromoteBlackPawn
     76  7ab5					      jmp	.pMoved
     77  7ab5					      ENDIF
     78  7ab5
     79  7ab5				   .standard  jsr	AddMove	; add +1UP move
     80  7ab5				   .pMoved
     81  7ab5
     82  7ab5					      ENDM
     83  7ab5
     84  7ab5							;---------------------------------------------------------------------------------------------------
     85  7ab5
     86  7ab5					      MAC	take
     87  7ab5					      SUBROUTINE
     88  7ab5							; {1} = capture square offset
     89  7ab5
     90  7ab5					      ldy	ValidSquare+{1},x
     91  7ab5					      bmi	.invalid
     92  7ab5					      lda	Board,y
     93  7ab5					      beq	.invalid	; square empty
     94  7ab5					      eor	currentPiece
     95  7ab5					      bpl	.invalid	; same colour
     96  7ab5
     97  7ab5					      MOVE_OR_PROMOTE_PAWN	{2}
     98  7ab5				   .invalid
     99  7ab5					      ENDM
    100  7ab5
    101  7ab5							;---------------------------------------------------------------------------------------------------
    102  7ab5
      0  7ab5					      DEF	PromoteWhitePawn
      1  7ab5				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7ab5
      3  7ab5				   PromoteWhitePawn
      0  7ab5					      PROMOTE_PAWN	WHITE
      1  7ab5					      SUBROUTINE
      2  7ab5
      3  7ab5
      4  7ab5		       a5 97		      lda	currentPiece
      5  7ab7		       48		      pha
      6  7ab8
      7  7ab8		       84 a9		      sty	__temp
      8  7aba		       a9 06		      lda	#WHITE|QUEEN
      9  7abc		       85 97		      sta	currentPiece
     10  7abe		       20 cc fc 	      jsr	AddMove
     11  7ac1
     12  7ac1		       a9 05		      lda	#WHITE|ROOK
     13  7ac3		       85 97		      sta	currentPiece
     14  7ac5		       a4 a9		      ldy	__temp
     15  7ac7		       20 cc fc 	      jsr	AddMove
     16  7aca
     17  7aca		       a9 04		      lda	#WHITE|BISHOP
     18  7acc		       85 97		      sta	currentPiece
     19  7ace		       a4 a9		      ldy	__temp
     20  7ad0		       20 cc fc 	      jsr	AddMove
     21  7ad3
     22  7ad3		       a9 03		      lda	#WHITE|KNIGHT
     23  7ad5		       85 97		      sta	currentPiece
     24  7ad7		       a4 a9		      ldy	__temp
     25  7ad9		       20 cc fc 	      jsr	AddMove
     26  7adc
     27  7adc		       68		      pla
     28  7add		       85 97		      sta	currentPiece
    105  7adf		       60		      rts
    106  7ae0
    107  7ae0							;---------------------------------------------------------------------------------------------------
    108  7ae0
      0  7ae0					      DEF	Handle_WHITE_PAWN
      1  7ae0				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7ae0
      3  7ae0				   Handle_WHITE_PAWN
    110  7ae0
    111  7ae0		       bc 20 f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    112  7ae3		       b9 7a f0 	      lda	Board,y
    113  7ae6		       d0 7a		      bne	.pMoved	; occupied
    114  7ae8
    115  7ae8							; we may need to promote the pawn
    116  7ae8							; All possibilites (Q/R/B/N) are added as individual moves
    117  7ae8
      0  7ae8					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7ae8					      SUBROUTINE
      2  7ae8
      3  7ae8
      4  7ae8					      IF	WHITE = WHITE
      5  7ae8		       c0 5a		      cpy	#90
      6  7aea		       90 5a		      bcc	.standard
      7  7aec		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7aef		       4c 00 00 	      jmp	.pMoved
      9  7af2					      ENDIF
     10  7af2
     11  7af2				  -	      IF	WHITE = BLACK
     12  7af2				  -	      cpy	#30
     13  7af2				  -	      bcs	.standard
     14  7af2				  -	      jsr	PromoteBlackPawn
     15  7af2				  -	      jmp	.pMoved
     16  7af2					      ENDIF
     17  7af2
     18  7af2		       20 cc fc    .standard  jsr	AddMove
     19  7af5				   .pMoved
     20  7af5
    119  7af5
    120  7af5
    121  7af5
    122  7af5							; the +2 move off the home rank...
    123  7af5
    124  7af5		       a6 98		      ldx	currentSquare
    125  7af7		       e0 28		      cpx	#WHITE_HOME_ROW
    126  7af9		       b0 28		      bcs	.pMoved	; pawn has moved so can't do +2
    127  7afb		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    128  7afe		       b9 7a f0 	      lda	Board,y
    129  7b01		       d0 7a		      bne	.pMoved	; destination square occupied
    130  7b03
    131  7b03		       20 cc fc 	      jsr	AddMove	; add the +2UP move off home row
    132  7b06		       a6 98		      ldx	currentSquare
    133  7b08
    134  7b08				   .pMoved
    135  7b08
    136  7b08							; regular captures...
    137  7b08
      0  7b08					      TAKE	_UP+_LEFT, WHITE
      1  7b08					      SUBROUTINE
      2  7b08
      3  7b08
      4  7b08		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      5  7b0b		       30 1f		      bmi	.invalid
      6  7b0d		       b9 7a f0 	      lda	Board,y
      7  7b10		       f0 7a		      beq	.invalid
      8  7b12		       45 97		      eor	currentPiece
      9  7b14		       10 97		      bpl	.invalid
     10  7b16
      0  7b16					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b16					      SUBROUTINE
      2  7b16
      3  7b16
      4  7b16					      IF	WHITE = WHITE
      5  7b16		       c0 5a		      cpy	#90
      6  7b18		       90 5a		      bcc	.standard
      7  7b1a		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b1d		       4c 00 00 	      jmp	.pMoved
      9  7b20					      ENDIF
     10  7b20
     11  7b20				  -	      IF	WHITE = BLACK
     12  7b20				  -	      cpy	#30
     13  7b20				  -	      bcs	.standard
     14  7b20				  -	      jsr	PromoteBlackPawn
     15  7b20				  -	      jmp	.pMoved
     16  7b20					      ENDIF
     17  7b20
     18  7b20		       20 cc fc    .standard  jsr	AddMove
     19  7b23				   .pMoved
     20  7b23
     12  7b23				   .invalid
    139  7b23		       a6 98		      ldx	currentSquare
      0  7b25					      TAKE	_UP+_RIGHT, WHITE
      1  7b25					      SUBROUTINE
      2  7b25
      3  7b25
      4  7b25		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      5  7b28		       30 21		      bmi	.invalid
      6  7b2a		       b9 7a f0 	      lda	Board,y
      7  7b2d		       f0 7a		      beq	.invalid
      8  7b2f		       45 97		      eor	currentPiece
      9  7b31		       10 97		      bpl	.invalid
     10  7b33
      0  7b33					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b33					      SUBROUTINE
      2  7b33
      3  7b33
      4  7b33					      IF	WHITE = WHITE
      5  7b33		       c0 5a		      cpy	#90
      6  7b35		       90 5a		      bcc	.standard
      7  7b37		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b3a		       4c 00 00 	      jmp	.pMoved
      9  7b3d					      ENDIF
     10  7b3d
     11  7b3d				  -	      IF	WHITE = BLACK
     12  7b3d				  -	      cpy	#30
     13  7b3d				  -	      bcs	.standard
     14  7b3d				  -	      jsr	PromoteBlackPawn
     15  7b3d				  -	      jmp	.pMoved
     16  7b3d					      ENDIF
     17  7b3d
     18  7b3d		       20 cc fc    .standard  jsr	AddMove
     19  7b40				   .pMoved
     20  7b40
     12  7b40				   .invalid
    141  7b40
    142  7b40
    143  7b40							; en-passant captures...
    144  7b40				   EN_PASSANTING
    145  7b40					      if	1
    146  7b40		       a5 9a		      lda	enPassantPawn
    147  7b42		       f0 9a		      beq	.noEnPassant
    148  7b44
    149  7b44		       a5 97		      lda	currentPiece
    150  7b46		       09 20		      ora	#FLAG_ENPASSANT
    151  7b48		       85 97		      sta	currentPiece
    152  7b4a
    153  7b4a		       a6 98		      ldx	currentSquare
      0  7b4c					      EN_PASSANT	_LEFT, _UP
      1  7b4c					      SUBROUTINE
      2  7b4c
      3  7b4c		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7b4f		       c4 9a		      cpy	enPassantPawn
      5  7b51		       d0 1f		      bne	.invalid
      6  7b53		       bc 1f f0 	      ldy	ValidSquare+_LEFT+_UP,x
      7  7b56		       b9 7a f0 	      lda	Board,y
      8  7b59		       d0 17		      bne	.invalid
      9  7b5b		       20 cc fc 	      jsr	AddMove
Handler_PAWN.asm (154): error: Label mismatch...
 --> 608.invalid fb72                  
     10  7b5e				   .invalid
    155  7b5e		       a6 98		      ldx	currentSquare
      0  7b60					      EN_PASSANT	_RIGHT, _UP
      1  7b60					      SUBROUTINE
      2  7b60
      3  7b60		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7b63		       c4 9a		      cpy	enPassantPawn
      5  7b65		       d0 9a		      bne	.invalid
      6  7b67		       bc 21 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      7  7b6a		       b9 7a f0 	      lda	Board,y
      8  7b6d		       d0 7a		      bne	.invalid
      9  7b6f		       20 cc fc 	      jsr	AddMove
     10  7b72				   .invalid
    157  7b72
    158  7b72				   .noEnPassant
    159  7b72					      endif
    160  7b72
    161  7b72		       4c a1 fa 	      jmp	MoveReturn
    162  7b75
    163  7b75
    164  7b75							;---------------------------------------------------------------------------------------------------
    165  7b75							; BLACK PAWN
    166  7b75							;---------------------------------------------------------------------------------------------------
    167  7b75
      0  7b75					      DEF	PromoteBlackPawn
      1  7b75				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7b75
      3  7b75				   PromoteBlackPawn
      0  7b75					      PROMOTE_PAWN	BLACK
      1  7b75					      SUBROUTINE
      2  7b75
      3  7b75
      4  7b75		       a5 97		      lda	currentPiece
      5  7b77		       48		      pha
      6  7b78
      7  7b78		       84 a9		      sty	__temp
      8  7b7a		       a9 86		      lda	#BLACK|QUEEN
      9  7b7c		       85 97		      sta	currentPiece
     10  7b7e		       20 cc fc 	      jsr	AddMove
     11  7b81
     12  7b81		       a9 85		      lda	#BLACK|ROOK
     13  7b83		       85 97		      sta	currentPiece
     14  7b85		       a4 a9		      ldy	__temp
     15  7b87		       20 cc fc 	      jsr	AddMove
     16  7b8a
     17  7b8a		       a9 84		      lda	#BLACK|BISHOP
     18  7b8c		       85 97		      sta	currentPiece
     19  7b8e		       a4 a9		      ldy	__temp
     20  7b90		       20 cc fc 	      jsr	AddMove
     21  7b93
     22  7b93		       a9 83		      lda	#BLACK|KNIGHT
     23  7b95		       85 97		      sta	currentPiece
     24  7b97		       a4 a9		      ldy	__temp
     25  7b99		       20 cc fc 	      jsr	AddMove
     26  7b9c
     27  7b9c		       68		      pla
     28  7b9d		       85 97		      sta	currentPiece
    170  7b9f		       60		      rts
    171  7ba0
      0  7ba0					      DEF	Handle_BLACK_PAWN
      1  7ba0				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7ba0
      3  7ba0				   Handle_BLACK_PAWN
    173  7ba0					      SUBROUTINE
    174  7ba0
    175  7ba0		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    176  7ba3		       b9 7a f0 	      lda	Board,y
    177  7ba6		       d0 0d		      bne	.pMoved	; occupied
    178  7ba8
    179  7ba8							; we may need to promote the pawn
    180  7ba8							; All possibilites (Q/R/B/N) are added as individual moves
    181  7ba8
      0  7ba8					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7ba8					      SUBROUTINE
      2  7ba8
      3  7ba8
      4  7ba8				  -	      IF	BLACK = WHITE
      5  7ba8				  -	      cpy	#90
      6  7ba8				  -	      bcc	.standard
      7  7ba8				  -	      jsr	PromoteWhitePawn
      8  7ba8				  -	      jmp	.pMoved
      9  7ba8					      ENDIF
     10  7ba8
     11  7ba8					      IF	BLACK = BLACK
     12  7ba8		       c0 1e		      cpy	#30
     13  7baa		       b0 1e		      bcs	.standard
     14  7bac		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7baf		       4c 00 00 	      jmp	.pMoved
     16  7bb2					      ENDIF
     17  7bb2
     18  7bb2		       20 cc fc    .standard  jsr	AddMove
     19  7bb5				   .pMoved
     20  7bb5
    183  7bb5
    184  7bb5							; the +2 move off the home rank...
    185  7bb5
    186  7bb5		       a6 98		      ldx	currentSquare
    187  7bb7		       e0 52		      cpx	#BLACK_HOME_ROW
    188  7bb9		       90 fa		      bcc	.pMoved	; pawn has moved so can't do +2
    189  7bbb		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    190  7bbe		       b9 7a f0 	      lda	Board,y
    191  7bc1		       d0 f2		      bne	.pMoved	; destination square occupied
    192  7bc3
    193  7bc3		       20 cc fc 	      jsr	AddMove	; add the +2DOWN move off home row
    194  7bc6		       a6 98		      ldx	currentSquare
    195  7bc8
Handler_PAWN.asm (196): error: Label mismatch...
 --> 615.pMoved fbb5                  
    196  7bc8				   .pMoved
    197  7bc8
    198  7bc8							; regular captures...
    199  7bc8
      0  7bc8					      TAKE	_DOWN+_LEFT, BLACK
      1  7bc8					      SUBROUTINE
      2  7bc8
      3  7bc8
      4  7bc8		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      5  7bcb		       30 0b		      bmi	.invalid
      6  7bcd		       b9 7a f0 	      lda	Board,y
      7  7bd0		       f0 7a		      beq	.invalid
      8  7bd2		       45 97		      eor	currentPiece
      9  7bd4		       10 97		      bpl	.invalid
     10  7bd6
      0  7bd6					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bd6					      SUBROUTINE
      2  7bd6
      3  7bd6
      4  7bd6				  -	      IF	BLACK = WHITE
      5  7bd6				  -	      cpy	#90
      6  7bd6				  -	      bcc	.standard
      7  7bd6				  -	      jsr	PromoteWhitePawn
      8  7bd6				  -	      jmp	.pMoved
      9  7bd6					      ENDIF
     10  7bd6
     11  7bd6					      IF	BLACK = BLACK
     12  7bd6		       c0 1e		      cpy	#30
     13  7bd8		       b0 1e		      bcs	.standard
     14  7bda		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bdd		       4c 00 00 	      jmp	.pMoved
     16  7be0					      ENDIF
     17  7be0
     18  7be0		       20 cc fc    .standard  jsr	AddMove
     19  7be3				   .pMoved
     20  7be3
     12  7be3				   .invalid
    201  7be3		       a6 98		      ldx	currentSquare
      0  7be5					      TAKE	_DOWN+_RIGHT, BLACK
      1  7be5					      SUBROUTINE
      2  7be5
      3  7be5
      4  7be5		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      5  7be8		       30 0d		      bmi	.invalid
      6  7bea		       b9 7a f0 	      lda	Board,y
      7  7bed		       f0 7a		      beq	.invalid
      8  7bef		       45 97		      eor	currentPiece
      9  7bf1		       10 97		      bpl	.invalid
     10  7bf3
      0  7bf3					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bf3					      SUBROUTINE
      2  7bf3
      3  7bf3
      4  7bf3				  -	      IF	BLACK = WHITE
      5  7bf3				  -	      cpy	#90
      6  7bf3				  -	      bcc	.standard
      7  7bf3				  -	      jsr	PromoteWhitePawn
      8  7bf3				  -	      jmp	.pMoved
      9  7bf3					      ENDIF
     10  7bf3
     11  7bf3					      IF	BLACK = BLACK
     12  7bf3		       c0 1e		      cpy	#30
     13  7bf5		       b0 1e		      bcs	.standard
     14  7bf7		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bfa		       4c 00 00 	      jmp	.pMoved
     16  7bfd					      ENDIF
     17  7bfd
     18  7bfd		       20 cc fc    .standard  jsr	AddMove
     19  7c00				   .pMoved
     20  7c00
     12  7c00				   .invalid
    203  7c00
    204  7c00							; en-passant captures...
    205  7c00
    206  7c00					      if	1
    207  7c00		       a5 9a		      lda	enPassantPawn
    208  7c02		       f0 9a		      beq	.noEnPassant
    209  7c04
    210  7c04		       a5 97		      lda	currentPiece
    211  7c06		       09 20		      ora	#FLAG_ENPASSANT
    212  7c08		       85 97		      sta	currentPiece
    213  7c0a
      0  7c0a					      EN_PASSANT	_LEFT, _DOWN
      1  7c0a					      SUBROUTINE
      2  7c0a
      3  7c0a		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7c0d		       c4 9a		      cpy	enPassantPawn
      5  7c0f		       d0 1f		      bne	.invalid
      6  7c11		       bc 0b f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      7  7c14		       b9 7a f0 	      lda	Board,y
      8  7c17		       d0 17		      bne	.invalid
      9  7c19		       20 cc fc 	      jsr	AddMove
Handler_PAWN.asm (214): error: Label mismatch...
 --> 627.invalid fc30                  
     10  7c1c				   .invalid
    215  7c1c		       a6 98		      ldx	currentSquare
      0  7c1e					      EN_PASSANT	_RIGHT, _DOWN
      1  7c1e					      SUBROUTINE
      2  7c1e
      3  7c1e		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7c21		       c4 9a		      cpy	enPassantPawn
      5  7c23		       d0 9a		      bne	.invalid
      6  7c25		       bc 0d f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      7  7c28		       b9 7a f0 	      lda	Board,y
      8  7c2b		       d0 7a		      bne	.invalid
      9  7c2d		       20 cc fc 	      jsr	AddMove
     10  7c30				   .invalid
    217  7c30
    218  7c30				   .noEnPassant
    219  7c30					      endif
    220  7c30
    221  7c30		       4c a1 fa    Handle_BLANK jmp	MoveReturn
    222  7c33
    223  7c33							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 2
      0  7c33					      include	"Handler_KNIGHT.asm"
      1  7c33							; Copyright (C)2020 Andrew Davie
      2  7c33							; Knight move handler
      3  7c33
      4  7c33							;---------------------------------------------------------------------------------------------------
      5  7c33							; KNIGHT
      6  7c33							;---------------------------------------------------------------------------------------------------
      7  7c33
      0  7c33					      DEF	Handle_KNIGHT
      1  7c33				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  7c33
      3  7c33				   Handle_KNIGHT
      9  7c33
     10  7c33							; x = currentSquare (square the piece is on)
     11  7c33							; currentPiece (with flags/colour attached)
     12  7c33
      0  7c33					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  7c33					      SUBROUTINE
      2  7c33		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  7c36		       30 01		      bmi	.invalid
      4  7c38		       b9 7a f0 	      lda	Board,y
      5  7c3b		       f0 7a		      beq	.squareEmpty
      6  7c3d		       45 97		      eor	currentPiece
      7  7c3f		       10 97		      bpl	.invalid
      8  7c41		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c44				   .invalid
      0  7c44					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  7c44		       a6 98		      ldx	currentSquare
      0  7c46					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  7c46					      SUBROUTINE
      2  7c46		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  7c49		       30 03		      bmi	.invalid
      4  7c4b		       b9 7a f0 	      lda	Board,y
      5  7c4e		       f0 7a		      beq	.squareEmpty
      6  7c50		       45 97		      eor	currentPiece
      7  7c52		       10 97		      bpl	.invalid
      8  7c54		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c57				   .invalid
      0  7c57					      MOVE_TO_X	_UP+_UP+_LEFT
      1  7c57		       a6 98		      ldx	currentSquare
      0  7c59					      MOVE_TO	_UP+_UP+_LEFT
      1  7c59					      SUBROUTINE
      2  7c59		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  7c5c		       30 29		      bmi	.invalid
      4  7c5e		       b9 7a f0 	      lda	Board,y
      5  7c61		       f0 7a		      beq	.squareEmpty
      6  7c63		       45 97		      eor	currentPiece
      7  7c65		       10 97		      bpl	.invalid
      8  7c67		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c6a				   .invalid
      0  7c6a					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  7c6a		       a6 98		      ldx	currentSquare
      0  7c6c					      MOVE_TO	_UP+_UP+_RIGHT
      1  7c6c					      SUBROUTINE
      2  7c6c		       bc 2b f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  7c6f		       30 2b		      bmi	.invalid
      4  7c71		       b9 7a f0 	      lda	Board,y
      5  7c74		       f0 7a		      beq	.squareEmpty
      6  7c76		       45 97		      eor	currentPiece
      7  7c78		       10 97		      bpl	.invalid
      8  7c7a		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c7d				   .invalid
     17  7c7d
      0  7c7d					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  7c7d		       a6 98		      ldx	currentSquare
      0  7c7f					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  7c7f					      SUBROUTINE
      2  7c7f		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  7c82		       30 0a		      bmi	.invalid
      4  7c84		       b9 7a f0 	      lda	Board,y
      5  7c87		       f0 7a		      beq	.squareEmpty
      6  7c89		       45 97		      eor	currentPiece
      7  7c8b		       10 97		      bpl	.invalid
      8  7c8d		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c90				   .invalid
      0  7c90					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  7c90		       a6 98		      ldx	currentSquare
      0  7c92					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  7c92					      SUBROUTINE
      2  7c92		       bc 0e f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  7c95		       30 0e		      bmi	.invalid
      4  7c97		       b9 7a f0 	      lda	Board,y
      5  7c9a		       f0 7a		      beq	.squareEmpty
      6  7c9c		       45 97		      eor	currentPiece
      7  7c9e		       10 97		      bpl	.invalid
      8  7ca0		       20 cc fc    .squareEmpty jsr	AddMove
      9  7ca3				   .invalid
      0  7ca3					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  7ca3		       a6 98		      ldx	currentSquare
      0  7ca5					      MOVE_TO	_UP+_LEFT+_LEFT
      1  7ca5					      SUBROUTINE
      2  7ca5		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  7ca8		       30 1e		      bmi	.invalid
      4  7caa		       b9 7a f0 	      lda	Board,y
      5  7cad		       f0 7a		      beq	.squareEmpty
      6  7caf		       45 97		      eor	currentPiece
      7  7cb1		       10 97		      bpl	.invalid
      8  7cb3		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cb6				   .invalid
      0  7cb6					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  7cb6		       a6 98		      ldx	currentSquare
      0  7cb8					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  7cb8					      SUBROUTINE
      2  7cb8		       bc 22 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  7cbb		       30 22		      bmi	.invalid
      4  7cbd		       b9 7a f0 	      lda	Board,y
      5  7cc0		       f0 7a		      beq	.squareEmpty
      6  7cc2		       45 97		      eor	currentPiece
      7  7cc4		       10 97		      bpl	.invalid
      8  7cc6		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cc9				   .invalid
     22  7cc9
     23  7cc9		       4c a1 fa 	      jmp	MoveReturn
     24  7ccc
     25  7ccc							; EOF
------- FILE BANK_FIXED.asm
    739  7ccc
    740  7ccc							;---------------------------------------------------------------------------------------------------
    741  7ccc
      0  7ccc					      DEF	AddMove
      1  7ccc				   BANK_AddMove SET	_CURRENT_BANK
      2  7ccc
      3  7ccc				   AddMove
    743  7ccc					      SUBROUTINE
    744  7ccc							; =57 including call
    745  7ccc
    746  7ccc							; add square in y register to movelist as destination (X12 format)
    747  7ccc							; currentPiece = piece moving
    748  7ccc							; currentSquare = start square (X12)
    749  7ccc							; ??do not modify y
    750  7ccc
    751  7ccc		       a5 9c		      lda	currentPly	; 3
    752  7cce		       85 3e		      sta	SET_BANK_RAM	; 3
    753  7cd0
    754  7cd0							; [y]		     to square (X12)
    755  7cd0							; currentSquare     from square (X12)
    756  7cd0							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    757  7cd0							; do not modify [Y]
    758  7cd0
    759  7cd0							; add a move to the movelist
    760  7cd0
    761  7cd0		       98		      tya		; 2
    762  7cd1
    763  7cd1		       ac 35 f0 	      ldy	moveIndex	; 3
    764  7cd4		       c8		      iny		; 2
    765  7cd5		       8c 35 f4 	      sty	moveIndex+RAM_WRITE	; 4
    766  7cd8
    767  7cd8		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    768  7cdb		       aa		      tax		; 2   new square (for projections)
    769  7cdc
    770  7cdc		       a5 98		      lda	currentSquare	; 3
    771  7cde		       99 36 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    772  7ce1		       a5 97		      lda	currentPiece	; 3
    773  7ce3		       99 80 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    774  7ce6
    775  7ce6		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2
    776  7ce8		       85 3e		      sta	SET_BANK_RAM	; 3
    777  7cea		       60		      rts		; 6
    778  7ceb
    779  7ceb
    780  7ceb							;---------------------------------------------------------------------------------------------------
    781  7ceb
      0  7ceb					      DEF	InitialisePieceSquares
      1  7ceb				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7ceb
      3  7ceb				   InitialisePieceSquares
    783  7ceb					      SUBROUTINE
    784  7ceb
    785  7ceb							; Zap the board with the "blank" ROM copy
    786  7ceb
      0  7ceb					      JSRAM_SAFE	PutAllPieces
      1  7ceb
      2  7ceb
      3  7ceb
      4  7ceb		       a9 0b		      lda	#BANK_PutAllPieces
      5  7ced		       85 8e		      sta	savedBank
      6  7cef		       85 3f		      sta	SET_BANK
      7  7cf1		       20 8b f3 	      jsr	PutAllPieces
    788  7cf4
    789  7cf4							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    790  7cf4
    791  7cf4		       a9 09		      lda	#RAMBANK_PLY
    792  7cf6		       85 3e		      sta	SET_BANK_RAM
    793  7cf8		       20 00 f2 	      jsr	InitPieceLists	; for white
    794  7cfb		       a9 0a		      lda	#RAMBANK_PLY+1
    795  7cfd		       85 3e		      sta	SET_BANK_RAM
    796  7cff		       20 00 f2 	      jsr	InitPieceLists	; for black
    797  7d02
    798  7d02
    799  7d02							; Now setup the board/piecelists
    800  7d02
    801  7d02		       a2 00		      ldx	#0
    802  7d04				   .fillPieceLists
    803  7d04
    804  7d04		       a9 09		      lda	#RAMBANK_PLY
    805  7d06		       85 3e		      sta	SET_BANK_RAM
    806  7d08
    807  7d08		       bd 4f f2 	      lda	InitPieceList,x	; colour/-1
    808  7d0b		       f0 4f		      beq	.finish
    809  7d0d
    810  7d0d		       0a		      asl
    811  7d0e		       a9 09		      lda	#RAMBANK_PLY
    812  7d10		       69 00		      adc	#0
    813  7d12		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    814  7d14
    815  7d14		       ac 30 f0 	      ldy	PieceListPtr
    816  7d17		       c8		      iny
    817  7d18
    818  7d18		       bd 50 f2 	      lda	InitPieceList+1,x	; square
    819  7d1b		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    820  7d1e		       98		      tya
    821  7d1f		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    822  7d22
    823  7d22		       bd 4f f2 	      lda	InitPieceList,x	; piece type
    824  7d25		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    825  7d28		       48		      pha
    826  7d29
    827  7d29		       8c 30 f4 	      sty	PieceListPtr+RAM_WRITE
    828  7d2c
    829  7d2c
    830  7d2c		       bc 50 f2 	      ldy	InitPieceList+1,x	; square
    831  7d2f
    832  7d2f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    833  7d31		       85 3e		      sta	SET_BANK_RAM
    834  7d33		       68		      pla
    835  7d34		       99 7a f4 	      sta	Board+RAM_WRITE,y
    836  7d37
    837  7d37		       e8		      inx
    838  7d38		       e8		      inx
    839  7d39		       10 c9		      bpl	.fillPieceLists
    840  7d3b
    841  7d3b		       60	   .finish    rts
    842  7d3c
    843  7d3c
    844  7d3c							;---------------------------------------------------------------------------------------------------
    845  7d3c
      0  7d3c					      DEF	SAFE_GetKingSquare
      1  7d3c				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  7d3c
      3  7d3c				   SAFE_GetKingSquare
    847  7d3c					      SUBROUTINE
    848  7d3c
    849  7d3c							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    850  7d3c							; Return:	 A = square king is on (or -1)
    851  7d3c
    852  7d3c		       85 3e		      sta	SET_BANK_RAM
    853  7d3e		       20 8d f3 	      jsr	GetKingSquare
    854  7d41		       a4 8e		      ldy	savedBank
    855  7d43		       84 3f		      sty	SET_BANK
    856  7d45		       60		      rts
    857  7d46
    858  7d46							;---------------------------------------------------------------------------------------------------
    859  7d46
      0  7d46					      DEF	SAFE_GetPieceFromBoard
      1  7d46				   BANK_SAFE_GetPieceFromBoard SET	_CURRENT_BANK
      2  7d46
      3  7d46				   SAFE_GetPieceFromBoard
    861  7d46					      SUBROUTINE
    862  7d46
    863  7d46							; y = X12 board index
    864  7d46
    865  7d46		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    866  7d48		       86 3e		      stx	SET_BANK_RAM
    867  7d4a		       a6 8e		      ldx	savedBank
    868  7d4c		       b9 7a f0 	      lda	Board,y
    869  7d4f		       86 3f		      stx	SET_BANK
    870  7d51		       60		      rts
    871  7d52
    872  7d52
    873  7d52							;---------------------------------------------------------------------------------------------------
    874  7d52
      0  7d52					      DEF	calculateBase64Square
      1  7d52				   BANK_calculateBase64Square SET	_CURRENT_BANK
      2  7d52
      3  7d52				   calculateBase64Square
    876  7d52					      SUBROUTINE
    877  7d52
    878  7d52							; Convert row/column into Base64 index
    879  7d52
    880  7d52		       a5 88		      lda	highlight_row
    881  7d54		       49 07		      eor	#7
    882  7d56		       0a		      asl
    883  7d57		       0a		      asl
    884  7d58		       0a		      asl
    885  7d59		       05 8a		      ora	highlight_col
    886  7d5b		       aa		      tax
    887  7d5c		       60		      rts
    888  7d5d
    889  7d5d							;---------------------------------------------------------------------------------------------------
    890  7d5d
      0  7d5d					      DEF	SAFE_IsValidMoveFromSquare
      1  7d5d				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7d5d
      3  7d5d				   SAFE_IsValidMoveFromSquare
    892  7d5d					      SUBROUTINE
    893  7d5d
    894  7d5d							; Does the square exist in the movelist?
    895  7d5d
    896  7d5d		       20 52 fd 	      jsr	calculateBase64Square
    897  7d60		       86 91		      stx	aiFromSquare
    898  7d62
    899  7d62		       a9 08		      lda	#RAMBANK_MOVES_RAM
    900  7d64		       85 3e		      sta	SET_BANK_RAM
    901  7d66		       bc 4b f3 	      ldy	Base64ToIndex,x
    902  7d69		       84 93		      sty	aiFromSquareX12
    903  7d6b
    904  7d6b		       98		      tya
    905  7d6c
    906  7d6c		       a4 9c		      ldy	currentPly
    907  7d6e		       84 3e		      sty	SET_BANK_RAM
    908  7d70		       20 6b f3 	      jsr	CheckMoveListFromSquare
    909  7d73
    910  7d73		       a5 8e		      lda	savedBank
    911  7d75		       85 3f		      sta	SET_BANK
    912  7d77		       60		      rts
    913  7d78
    914  7d78
    915  7d78							;---------------------------------------------------------------------------------------------------
    916  7d78
      0  7d78					      DEF	SAFE_GetPiece
      1  7d78				   BANK_SAFE_GetPiece SET	_CURRENT_BANK
      2  7d78
      3  7d78				   SAFE_GetPiece
    918  7d78					      SUBROUTINE
    919  7d78
    920  7d78							; Retrieve the piece+flags from the movelist, given from/to squares
    921  7d78							; Required as moves have different flags but same origin squares (e.g., castling)
    922  7d78
    923  7d78		       a5 9c		      lda	currentPly
    924  7d7a		       85 3e		      sta	SET_BANK_RAM
    925  7d7c
    926  7d7c		       20 a5 f3 	      jsr	GetPieceGivenFromToSquares
    927  7d7f
    928  7d7f		       a5 8e		      lda	savedBank
    929  7d81		       85 3f		      sta	SET_BANK
    930  7d83		       60		      rts
    931  7d84
    932  7d84							;---------------------------------------------------------------------------------------------------
    933  7d84
      0  7d84					      DEF	SAFE_IsValidMoveToSquare
      1  7d84				   BANK_SAFE_IsValidMoveToSquare SET	_CURRENT_BANK
      2  7d84
      3  7d84				   SAFE_IsValidMoveToSquare
    935  7d84					      SUBROUTINE
    936  7d84
    937  7d84							; Does the square exist in the movelist?
    938  7d84
    939  7d84		       20 52 fd 	      jsr	calculateBase64Square
    940  7d87		       86 92		      stx	aiToSquare
    941  7d89
    942  7d89		       a9 08		      lda	#RAMBANK_MOVES_RAM
    943  7d8b		       85 3e		      sta	SET_BANK_RAM
    944  7d8d		       bd 4b f3 	      lda	Base64ToIndex,x
    945  7d90		       85 94		      sta	aiToSquareX12
    946  7d92
    947  7d92		       a4 9c		      ldy	currentPly
    948  7d94		       84 3e		      sty	SET_BANK_RAM
    949  7d96		       20 c2 f3 	      jsr	CheckMoveListToSquare
    950  7d99
    951  7d99		       a5 8e	   .found     lda	savedBank
    952  7d9b		       85 3f		      sta	SET_BANK
    953  7d9d		       60		      rts
    954  7d9e
    955  7d9e							;---------------------------------------------------------------------------------------------------
    956  7d9e
      0  7d9e					      DEF	SAFE_PutPieceToBoard
      1  7d9e				   BANK_SAFE_PutPieceToBoard SET	_CURRENT_BANK
      2  7d9e
      3  7d9e				   SAFE_PutPieceToBoard
    958  7d9e					      SUBROUTINE
    959  7d9e
    960  7d9e							; y = board index
    961  7d9e							; a = piece
    962  7d9e
    963  7d9e		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    964  7da0		       86 3e		      stx	SET_BANK_RAM
    965  7da2		       99 7a f4 	      sta	Board+RAM_WRITE,y
    966  7da5		       a6 8e		      ldx	savedBank
    967  7da7		       86 3f		      stx	SET_BANK
    968  7da9		       60		      rts
    969  7daa
    970  7daa							;---------------------------------------------------------------------------------------------------
    971  7daa
      0  7daa					      DEF	SAFE_CopyShadowROMtoRAM
      1  7daa				   BANK_SAFE_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7daa
      3  7daa				   SAFE_CopyShadowROMtoRAM
    973  7daa					      SUBROUTINE
    974  7daa
    975  7daa		       20 b2 fd 	      jsr	CopyShadowROMtoRAM
    976  7dad		       a5 8e		      lda	savedBank
    977  7daf		       85 3f		      sta	SET_BANK
    978  7db1		       60		      rts
    979  7db2
    980  7db2
    981  7db2							;---------------------------------------------------------------------------------------------------
    982  7db2
      0  7db2					      DEF	CopyShadowROMtoRAM
      1  7db2				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7db2
      3  7db2				   CopyShadowROMtoRAM
    984  7db2					      SUBROUTINE
    985  7db2
    986  7db2							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    987  7db2							; used to setup callable RAM code from ROM templates
    988  7db2
    989  7db2							; x = source ROM bank
    990  7db2							; y = destination RAM bank (preserved)
    991  7db2
    992  7db2		       86 a8		      stx	__sourceBank
    993  7db4
    994  7db4		       a2 00		      ldx	#0
    995  7db6		       a5 a8	   .copyPage  lda	__sourceBank
    996  7db8		       85 3f		      sta	SET_BANK
    997  7dba
    998  7dba		       bd 00 f0 	      lda	$F000,x
    999  7dbd		       48		      pha
   1000  7dbe		       bd 00 f1 	      lda	$F100,x
   1001  7dc1		       48		      pha
   1002  7dc2		       bd 00 f2 	      lda	$F200,x
   1003  7dc5		       48		      pha
   1004  7dc6		       bd 00 f3 	      lda	$F300,x
   1005  7dc9
   1006  7dc9		       84 3e		      sty	SET_BANK_RAM
   1007  7dcb
   1008  7dcb		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
   1009  7dce		       68		      pla
   1010  7dcf		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
   1011  7dd2		       68		      pla
   1012  7dd3		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
   1013  7dd6		       68		      pla
   1014  7dd7		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
   1015  7dda
   1016  7dda		       ca		      dex
   1017  7ddb		       d0 d9		      bne	.copyPage
   1018  7ddd		       60		      rts
   1019  7dde
   1020  7dde
   1021  7dde							;---------------------------------------------------------------------------------------------------
   1022  7dde
      0  7dde					      DEF	SAFE_CopySinglePiece
      1  7dde				   BANK_SAFE_CopySinglePiece SET	_CURRENT_BANK
      2  7dde
      3  7dde				   SAFE_CopySinglePiece
   1024  7dde					      SUBROUTINE
   1025  7dde
   1026  7dde		       20 e6 fd 	      jsr	CopySinglePiece
   1027  7de1		       a5 8e		      lda	savedBank
   1028  7de3		       85 3f		      sta	SET_BANK
   1029  7de5		       60		      rts
   1030  7de6
   1031  7de6							;---------------------------------------------------------------------------------------------------
   1032  7de6
      0  7de6					      DEF	CopySinglePiece
      1  7de6				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7de6
      3  7de6				   CopySinglePiece
   1034  7de6					      SUBROUTINE
   1035  7de6							; @2150 max
   1036  7de6							; = 33 TIM64T
   1037  7de6
   1038  7de6
   1039  7de6		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1040  7de8		       85 3e		      sta	SET_BANK_RAM
   1041  7dea		       20 a0 f3 	      jsr	CopySetup
   1042  7ded
   1043  7ded
      0  7ded					      DEF	InterceptMarkerCopy
      1  7ded				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7ded
      3  7ded				   InterceptMarkerCopy
   1045  7ded
   1046  7ded							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
   1047  7ded							; y = piece index
   1048  7ded
   1049  7ded		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
   1050  7def		       85 3f		      sta	SET_BANK
   1051  7df1
   1052  7df1		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
   1053  7df4		       85 ef		      sta	__ptr
   1054  7df6		       b9 80 f0 	      lda	PIECE_VECTOR_HI,y
   1055  7df9		       85 f0		      sta	__ptr+1
   1056  7dfb		       b9 00 f1 	      lda	PIECE_VECTOR_BANK,y
   1057  7dfe		       85 3f		      sta	SET_BANK
   1058  7e00
   1059  7e00		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
   1060  7e02		       b1 ef	   .copy      lda	(__ptr),y
   1061  7e04		       99 a7 00 	      sta	__pieceShapeBuffer,y
   1062  7e07		       88		      dey
   1063  7e08		       10 f8		      bpl	.copy
   1064  7e0a
   1065  7e0a
   1066  7e0a		       a5 80		      lda	drawPieceNumber
   1067  7e0c		       4a		      lsr
   1068  7e0d		       4a		      lsr
   1069  7e0e		       4a		      lsr
   1070  7e0f		       49 07		      eor	#7
   1071  7e11		       aa		      tax
   1072  7e12
   1073  7e12		       a5 80		      lda	drawPieceNumber
   1074  7e14		       29 04		      and	#4
   1075  7e16		       c9 04		      cmp	#4	; cc = left side, cs = right side
   1076  7e18
   1077  7e18		       86 3e		      stx	SET_BANK_RAM
   1078  7e1a		       4c d3 f0 	      jmp	CopyPieceToRowBitmap
   1079  7e1d
   1080  7e1d							;---------------------------------------------------------------------------------------------------
   1081  7e1d
      0  7e1d					      DEF	MoveViaList
      1  7e1d				   BANK_MoveViaList SET	_CURRENT_BANK
      2  7e1d
      3  7e1d				   MoveViaList
   1083  7e1d					      SUBROUTINE
   1084  7e1d
   1085  7e1d							; Given an existing movelist, pick one of the moves and make it
   1086  7e1d							; Used for random computer moves
   1087  7e1d
   1088  7e1d		       a5 9c		      lda	currentPly
   1089  7e1f		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
   1090  7e21
   1091  7e21		       20 22 f3 	      jsr	MoveViaListAtPly
   1092  7e24		       60		      rts
   1093  7e25
   1094  7e25
   1095  7e25							;---------------------------------------------------------------------------------------------------
   1096  7e25
      0  7e25					      DEF	FinaliseMove
      1  7e25				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  7e25
      3  7e25				   FinaliseMove
   1098  7e25					      SUBROUTINE
   1099  7e25
   1100  7e25							; Now the visible movement on the board has happened, fix up the pointers to the pieces
   1101  7e25							; for both sides.
   1102  7e25
   1103  7e25
   1104  7e25		       a5 9e		      lda	sideToMove
   1105  7e27		       0a		      asl
   1106  7e28		       a9 09		      lda	#RAMBANK_PLY
   1107  7e2a		       69 00		      adc	#0
   1108  7e2c		       85 3e		      sta	SET_BANK_RAM
   1109  7e2e
   1110  7e2e		       20 c7 f2 	      jsr	FixPieceList
   1111  7e31
   1112  7e31		       a5 87		      lda	toX12
   1113  7e33		       85 86		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
   1114  7e35		       a9 00		      lda	#0
   1115  7e37		       85 87		      sta	toX12	; --> deleted (square=0)
   1116  7e39
   1117  7e39		       a5 a3		      lda	lastPiece
   1118  7e3b		       f0 a3		      beq	.notake
   1119  7e3d
   1120  7e3d		       a5 9e		      lda	sideToMove
   1121  7e3f		       49 80		      eor	#128
   1122  7e41		       0a		      asl
   1123  7e42		       a9 09		      lda	#RAMBANK_PLY
   1124  7e44		       69 00		      adc	#0
   1125  7e46		       85 3e		      sta	SET_BANK_RAM
   1126  7e48
   1127  7e48		       20 c7 f2 	      jsr	FixPieceList	; REMOVE any captured object
   1128  7e4b
   1129  7e4b		       60	   .notake    rts
   1130  7e4c
   1131  7e4c
   1132  7e4c							;---------------------------------------------------------------------------------------------------
   1133  7e4c
      0  7e4c					      DEF	SAFE_getMoveIndex
      1  7e4c				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7e4c
      3  7e4c				   SAFE_getMoveIndex
   1135  7e4c					      SUBROUTINE
   1136  7e4c
   1137  7e4c		       a9 09		      lda	#RAMBANK_PLY
   1138  7e4e		       85 3e		      sta	SET_BANK_RAM
   1139  7e50		       ad 35 f0 	      lda	moveIndex
   1140  7e53		       a6 8e		      ldx	savedBank
   1141  7e55		       86 3f		      stx	SET_BANK
   1142  7e57		       60		      rts
   1143  7e58
   1144  7e58
   1145  7e58							;---------------------------------------------------------------------------------------------------
   1146  7e58
      0  7e58					      DEF	SAFE_showMoveOptions
      1  7e58				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  7e58
      3  7e58				   SAFE_showMoveOptions
   1148  7e58					      SUBROUTINE
   1149  7e58
   1150  7e58							;SAFETIME = 40 	  ; time required to be able to safely do a piece draw TODO: optimise
   1151  7e58
   1152  7e58
   1153  7e58							; place a marker on the board for any square matching the piece
   1154  7e58							; EXCEPT for squares which are occupied (we'll flash those later)
   1155  7e58							; x = movelist item # being checked
   1156  7e58
   1157  7e58
   1158  7e58		       a6 95	   .next      ldx	aiMoveIndex
   1159  7e5a		       30 95		      bmi	.skip
   1160  7e5c
   1161  7e5c							;lda INTIM
   1162  7e5c							;cmp #SAFETIME
   1163  7e5c							;bcc .skip
   1164  7e5c
   1165  7e5c		       a9 09		      lda	#RAMBANK_PLY	; white
   1166  7e5e		       85 3e		      sta	SET_BANK_RAM
   1167  7e60
   1168  7e60		       c6 95		      dec	aiMoveIndex
   1169  7e62
   1170  7e62		       bd 36 f0 	      lda	MoveFrom,x
   1171  7e65		       c5 93		      cmp	aiFromSquareX12
   1172  7e67		       d0 ef		      bne	.next
   1173  7e69
   1174  7e69		       bc 00 f1 	      ldy	MoveTo,x
   1175  7e6c
   1176  7e6c		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1177  7e6e		       85 3e		      sta	SET_BANK_RAM
   1178  7e70
   1179  7e70		       b9 7a f0 	      lda	Board,y
   1180  7e73		       d0 e3		      bne	.next
   1181  7e75
   1182  7e75		       a5 80		      lda	drawPieceNumber
   1183  7e77		       48		      pha
   1184  7e78
   1185  7e78		       b9 00 ff 	      lda	X12toBase64,y
   1186  7e7b		       85 80		      sta	drawPieceNumber
   1187  7e7d
   1188  7e7d		       20 97 f3 	      jsr	CopySetupForMarker
   1189  7e80		       20 ed fd 	      jsr	InterceptMarkerCopy
   1190  7e83
   1191  7e83		       68		      pla
   1192  7e84		       85 80		      sta	drawPieceNumber
   1193  7e86
   1194  7e86		       a5 8e	   .skip      lda	savedBank
   1195  7e88		       85 3f		      sta	SET_BANK
   1196  7e8a		       60		      rts
   1197  7e8b
   1198  7e8b
   1199  7e8b							;---------------------------------------------------------------------------------------------------
   1200  7e8b
      0  7e8b					      DEF	SAFE_IsSquareUnderAttack
      1  7e8b				   BANK_SAFE_IsSquareUnderAttack SET	_CURRENT_BANK
      2  7e8b
      3  7e8b				   SAFE_IsSquareUnderAttack
   1202  7e8b
   1203  7e8b							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
   1204  7e8b
   1205  7e8b							; Pass:	 currentPly = which movelist to check
   1206  7e8b							;		 A = X12 square to check
   1207  7e8b							; Return:	 CC = No, CS = Yes
   1208  7e8b
   1209  7e8b		       a6 9c		      ldx	currentPly
   1210  7e8d		       86 3e		      stx	SET_BANK_RAM
   1211  7e8f		       20 7e f3 	      jsr	IsSquareUnderAttack
   1212  7e92		       a5 8e		      lda	savedBank
   1213  7e94		       85 3f		      sta	SET_BANK
   1214  7e96		       60		      rts
   1215  7e97
   1216  7e97							;---------------------------------------------------------------------------------------------------
   1217  7e97
      0  7e97					      DEF	SAFE_showMoveCaptures
      1  7e97				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7e97
      3  7e97				   SAFE_showMoveCaptures
   1219  7e97					      SUBROUTINE
   1220  7e97
   1221  7e97							; place a marker on the board for any square matching the piece
   1222  7e97							; EXCEPT for squares which are occupied (we'll flash those later)
   1223  7e97							; x = movelist item # being checked
   1224  7e97
   1225  7e97
   1226  7e97		       a6 95	   .next      ldx	aiMoveIndex
   1227  7e99		       30 95		      bmi	.skip	; no moves in list
   1228  7e9b
   1229  7e9b							;lda INTIM
   1230  7e9b							;cmp #24 ;SAFETIME
   1231  7e9b							;bcc .skip
   1232  7e9b
   1233  7e9b		       a9 09		      lda	#RAMBANK_PLY	; white
   1234  7e9d		       85 3e		      sta	SET_BANK_RAM
   1235  7e9f		       c6 95		      dec	aiMoveIndex
   1236  7ea1
   1237  7ea1		       bd 36 f0 	      lda	MoveFrom,x
   1238  7ea4		       c5 93		      cmp	aiFromSquareX12
   1239  7ea6		       d0 ef		      bne	.next
   1240  7ea8
   1241  7ea8		       bc 00 f1 	      ldy	MoveTo,x
   1242  7eab
   1243  7eab		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1244  7ead		       85 3e		      sta	SET_BANK_RAM
   1245  7eaf
   1246  7eaf		       b9 7a f0 	      lda	Board,y
   1247  7eb2		       f0 e3		      beq	.next
   1248  7eb4
   1249  7eb4		       a5 80		      lda	drawPieceNumber
   1250  7eb6		       48		      pha
   1251  7eb7
   1252  7eb7		       b9 00 ff 	      lda	X12toBase64,y
   1253  7eba		       85 80		      sta	drawPieceNumber
   1254  7ebc
   1255  7ebc		       20 e6 fd 	      jsr	CopySinglePiece
   1256  7ebf
   1257  7ebf		       68		      pla
   1258  7ec0		       85 80		      sta	drawPieceNumber
   1259  7ec2
   1260  7ec2		       a5 8e	   .skip      lda	savedBank
   1261  7ec4		       85 3f		      sta	SET_BANK
   1262  7ec6		       60		      rts
   1263  7ec7
   1264  7ec7
      0  7ec7					      OPTIONAL_PAGEBREAK	"X12toBase64", 100
 PAGE BREAK INSERTED FOR  X12toBase64
 REQUESTED SIZE =  $64
 WASTED SPACE =  $39
 PAGEBREAK LOCATION =  $ff00
     10  7f00					      LIST	ON
   1266  7f00
   1267  7f00				   X12toBase64
   1268  7f00
   1269  7f00							; Use this table to
   1270  7f00							;   a) Determine if a square is valid (-1 = NO)
   1271  7f00							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
   1272  7f00							;	if a white pawn on square "x" can move "up" the board.
   1273  7f00
   1274  7f00		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1275  7f0a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1276  7f14		       ff ff 00 01*	      .byte.b	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7
   1277  7f1e		       ff ff 08 09*	      .byte.b	-1, -1, 8, 9, 10, 11, 12, 13, 14, 15
   1278  7f28		       ff ff 10 11*	      .byte.b	-1, -1, 16, 17, 18, 19, 20, 21, 22, 23
   1279  7f32		       ff ff 18 19*	      .byte.b	-1, -1, 24, 25, 26, 27, 28, 29, 30, 31
   1280  7f3c		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
   1281  7f46		       ff ff 28 29*	      .byte.b	-1, -1, 40, 41, 42, 43, 44, 45, 46, 47
   1282  7f50		       ff ff 30 31*	      .byte.b	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55
   1283  7f5a		       ff ff 38 39*	      .byte.b	-1, -1, 56, 57, 58, 59, 60, 61, 62, 63
   1284  7f64
   1285  7f64
 FREE BYTES IN FIXED BANK =  $98
   1286  7f64					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1287  7f64
   1288  7f64							;---------------------------------------------------------------------------------------------------
   1289  7f64							; The reset vectors
   1290  7f64							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
   1291  7f64
   1292  8000 ????				      SEG	InterruptVectors
   1293  7ffc					      ORG	FIXED_BANK + $7FC
   1294  7ffc					      RORG	$7ffC
   1295  7ffc
   1296  7ffc		       00 f8		      .word.w	Reset	; RESET
   1297  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1298  8000
   1299  8000							;---------------------------------------------------------------------------------------------------
   1300  8000							; EOF
------- FILE ./chess.asm
    366  8000
    367  8000							;END
------- FILE ./chess.asm LEVEL 1 PASS 3
      1  8000 ????						; Chess
      2  8000 ????						; Atari 2600 Chess display system
      3  8000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  8000 ????						; andrew@taswegian.com
      5  8000 ????
      6  8000 ????
      7  8000 ????	       00 40	   TIA_BASE_ADDRESS =	$40
      8  8000 ????
      9  8000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  8000 ????				      include	"vcs.h"
      1  8000 ????						; VCS.H
      2  8000 ????						; Version 1.05, 13/November/2003
      3  8000 ????
      4  8000 ????	       00 69	   VERSION_VCS =	105
      5  8000 ????
      6  8000 ????						; This file defines hardware registers and memory mapping for the
      7  8000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
      8  8000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
      9  8000 ????						; available at at http://www.atari2600.org/dasm
     10  8000 ????						;
     11  8000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     12  8000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     13  8000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     14  8000 ????						; with your views.  Please contribute, if you think you can improve this
     15  8000 ????						; file!
     16  8000 ????						;
     17  8000 ????						; Latest Revisions...
     18  8000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     19  8000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     20  8000 ????						;			    This will allow conditional code to verify VCS.H being
     21  8000 ????						;			    used for code assembly.
     22  8000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     23  8000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     24  8000 ????						;			 mirrored reading/writing differences.	This is more a
     25  8000 ????						;			 readability issue, and binary compatibility with disassembled
     26  8000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     27  8000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     28  8000 ????						;			 which was broken by the use of segments in this file, as
     29  8000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     30  8000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     31  8000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     32  8000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     33  8000 ????						;						   it is safe to leave it undefined, and the base address will
     34  8000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     35  8000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     36  8000 ????						;			  - register definitions are now generated through assignment
     37  8000 ????						;			    in uninitialised segments.	This allows a changeable base
     38  8000 ????						;			    address architecture.
     39  8000 ????						; 1.0	22/MAR/2003		Initial release
     40  8000 ????
     41  8000 ????
     42  8000 ????						;-------------------------------------------------------------------------------
     43  8000 ????
     44  8000 ????						; TIA_BASE_ADDRESS
     45  8000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     46  8000 ????						; Normally 0, the base address should (externally, before including this file)
     47  8000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     48  8000 ????						; The reason is that this bankswitching scheme treats any access to locations
     49  8000 ????						; < $40 as a bankswitch.
     50  8000 ????
     51  8000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     52  8000 ????			  -TIA_BASE_ADDRESS =	0
     53  8000 ????				      ENDIF
     54  8000 ????
     55  8000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     56  8000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     57  8000 ????						; *OR* by declaring the label before including this file, eg:
     58  8000 ????						; TIA_BASE_ADDRESS = $40
     59  8000 ????						;   include "vcs.h"
     60  8000 ????
     61  8000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     62  8000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     63  8000 ????						; for the mirrored ROM hardware registers.
     64  8000 ????
     65  8000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     66  8000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     67  8000 ????						; they defaut to the TIA_BASE_ADDRESS.
     68  8000 ????
     69  8000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     70  8000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     71  8000 ????				      ENDIF
     72  8000 ????
     73  8000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     74  8000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     75  8000 ????				      ENDIF
     76  8000 ????
     77  8000 ????						;-------------------------------------------------------------------------------
     78  8000 ????
     79 U006d ????				      SEG.U	TIA_REGISTERS_WRITE
     80 U0040					      ORG	TIA_BASE_WRITE_ADDRESS
     81 U0040
     82 U0040							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     83 U0040
     84 U0040		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     85 U0041		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     86 U0042		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     87 U0043		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     88 U0044		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     89 U0045		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     90 U0046		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     91 U0047		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     92 U0048		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     93 U0049		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     94 U004a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     95 U004b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     96 U004c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     97 U004d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     98 U004e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     99 U004f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    100 U0050		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    101 U0051		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    102 U0052		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    103 U0053		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    104 U0054		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    105 U0055		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    106 U0056		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    107 U0057		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    108 U0058		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    109 U0059		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    110 U005a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    111 U005b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    112 U005c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    113 U005d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    114 U005e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    115 U005f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    116 U0060		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    117 U0061		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    118 U0062		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    119 U0063		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    120 U0064		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    121 U0065		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    122 U0066		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    123 U0067		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    124 U0068		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    125 U0069		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    126 U006a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    127 U006b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    128 U006c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    129 U006d
    130 U006d							;-------------------------------------------------------------------------------
    131 U006d
    132 U004e ????				      SEG.U	TIA_REGISTERS_READ
    133 U0040					      ORG	TIA_BASE_READ_ADDRESS
    134 U0040
    135 U0040							;											bit 7	 bit 6
    136 U0040		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    137 U0041		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    138 U0042		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    139 U0043		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    140 U0044		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    141 U0045		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    142 U0046		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    143 U0047		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    144 U0048		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    145 U0049		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    146 U004a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    147 U004b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    148 U004c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    149 U004d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    150 U004e
    151 U004e							;-------------------------------------------------------------------------------
    152 U004e
    153 U0298 ????				      SEG.U	RIOT
    154 U0280					      ORG	$280
    155 U0280
    156 U0280							; RIOT MEMORY MAP
    157 U0280
    158 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    159 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    160 U0281
    161 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    162 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    163 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    164 U0284		       00	   INTIM      ds	1	; $284		Timer output
    165 U0285
    166 U0285		       00	   TIMINT     ds	1	; $285
    167 U0286
    168 U0286							; Unused/undefined registers ($285-$294)
    169 U0286
    170 U0286		       00		      ds	1	; $286
    171 U0287		       00		      ds	1	; $287
    172 U0288		       00		      ds	1	; $288
    173 U0289		       00		      ds	1	; $289
    174 U028a		       00		      ds	1	; $28A
    175 U028b		       00		      ds	1	; $28B
    176 U028c		       00		      ds	1	; $28C
    177 U028d		       00		      ds	1	; $28D
    178 U028e		       00		      ds	1	; $28E
    179 U028f		       00		      ds	1	; $28F
    180 U0290		       00		      ds	1	; $290
    181 U0291		       00		      ds	1	; $291
    182 U0292		       00		      ds	1	; $292
    183 U0293		       00		      ds	1	; $293
    184 U0294
    185 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    186 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    187 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    188 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    189 U0298
    190 U0298							;-------------------------------------------------------------------------------
    191 U0298							; The following required for back-compatibility with code which does not use
    192 U0298							; segments.
    193 U0298
    194  0000 ????				      SEG
    195  0000 ????
    196  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  0000 ????				      include	"macro.h"
      1  0000 ????
      2  0000 ????						; MACRO.H
      3  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      4  0000 ????
      5  0000 ????	       00 6a	   VERSION_MACRO =	106
      6  0000 ????
      7  0000 ????						;
      8  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      9  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     10  0000 ????						;
     11  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     12  0000 ????						; It is distributed as a companion machine-specific support package
     13  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     14  0000 ????						; available at at http://www.atari2600.org/dasm
     15  0000 ????						;
     16  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     17  0000 ????						; contents, or would like to add something, please write to me
     18  0000 ????						; (atari2600@taswegian.com) with your contribution.
     19  0000 ????						;
     20  0000 ????						; Latest Revisions...
     21  0000 ????						;
     22  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     23  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     25  0000 ????						;			   used for code assembly.
     26  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  0000 ????						;
     28  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  0000 ????						;
     30  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  0000 ????						;			   (standardised macro for vertical synch code)
     32  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  0000 ????						; 1.0	22/MAR/2003		Initial release
     35  0000 ????
     36  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  0000 ????						;   registers and require them to be defined first).
     41  0000 ????
     42  0000 ????						; Available macros...
     43  0000 ????						;   SLEEP n		 - sleep for n cycles
     44  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????						; SLEEP duration
     50  0000 ????						; Original author: Thomas Jentzsch
     51  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  0000 ????						; useful for code where precise timing is required.
     53  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  0000 ????
     57  0000 ????				      MAC	sleep
     58  0000 ????			   .CYCLES    SET	{1}
     59  0000 ????
     60  0000 ????				      IF	.CYCLES < 2
     61  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  0000 ????				      ERR
     63  0000 ????				      ENDIF
     64  0000 ????
     65  0000 ????				      IF	.CYCLES & 1
     66  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  0000 ????				      nop	0
     68  0000 ????				      ELSE
     69  0000 ????				      bit	VSYNC
     70  0000 ????				      ENDIF
     71  0000 ????			   .CYCLES    SET	.CYCLES - 3
     72  0000 ????				      ENDIF
     73  0000 ????
     74  0000 ????				      REPEAT	.CYCLES / 2
     75  0000 ????				      nop
     76  0000 ????				      REPEND
     77  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  0000 ????
     79  0000 ????						;-------------------------------------------------------------------------------
     80  0000 ????						; VERTICAL_SYNC
     81  0000 ????						; revised version by Edwin Blink -- saves bytes!
     82  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????
     85  0000 ????						; OUT: A = 0
     86  0000 ????
     87  0000 ????				      MAC	vertical_sync
     88  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     89  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     90  0000 ????				      sta	VSYNC
     91  0000 ????				      lsr
     92  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????						;-------------------------------------------------------------------------------
     96  0000 ????						; CLEAN_START
     97  0000 ????						; Original author: Andrew Davie
     98  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     99  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    100  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    101  0000 ????						; Use as very first section of code on boot (ie: at reset)
    102  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    103  0000 ????
    104  0000 ????				      MAC	clean_start
    105  0000 ????				      sei
    106  0000 ????				      cld
    107  0000 ????
    108  0000 ????				      ldx	#0
    109  0000 ????				      txa
    110  0000 ????				      tay
    111  0000 ????			   .CLEAR_STACK dex
    112  0000 ????				      txs
    113  0000 ????				      pha
    114  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    115  0000 ????
    116  0000 ????				      ENDM
    117  0000 ????
    118  0000 ????						;-------------------------------------------------------
    119  0000 ????						; SET_POINTER
    120  0000 ????						; Original author: Manuel Rotschkar
    121  0000 ????						;
    122  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    123  0000 ????						;
    124  0000 ????						; Usage: SET_POINTER pointer, address
    125  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    126  0000 ????						;
    127  0000 ????						; Note: Alters the accumulator, NZ flags
    128  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    129  0000 ????						; IN 2: absolute address
    130  0000 ????
    131  0000 ????				      MAC	set_pointer
    132  0000 ????			   .POINTER   SET	{1}
    133  0000 ????			   .ADDRESS   SET	{2}
    134  0000 ????
    135  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    136  0000 ????				      STA	.POINTER	; Store in pointer
    137  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    138  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    139  0000 ????
    140  0000 ????				      ENDM
    141  0000 ????
    142  0000 ????						;-------------------------------------------------------
    143  0000 ????						; BOUNDARY byte#
    144  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    145  0000 ????						;
    146  0000 ????						; Push data to a certain position inside a page and keep count of how
    147  0000 ????						; many free bytes the programmer will have.
    148  0000 ????						;
    149  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    150  0000 ????
    151  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	0
    152  0000 ????			   .FREE_BYTES SET	0
    153  0000 ????				      MAC	boundary
    154  0000 ????				      REPEAT	256
    155  0000 ????				      IF	<. % {1} = 0
    156  0000 ????				      MEXIT
    157  0000 ????				      ELSE
    158  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    159  0000 ????				      .byte	$00
    160  0000 ????				      ENDIF
    161  0000 ????				      REPEND
    162  0000 ????			   __DASM__TOTAL_FREE_MEMORY SET	__DASM__TOTAL_FREE_MEMORY + .FREE_BYTES
    163  0000 ????				      ENDM
    164  0000 ????
    165  0000 ????
    166  0000 ????						; EOF
------- FILE ./chess.asm
------- FILE piece_defines.h LEVEL 2 PASS 3
      0  0000 ????				      include	"piece_defines.h"
      1  0000 ????						; Copyright (C)2020 Andrew Davie
      2  0000 ????
      3  0000 ????	       00 80	   BLACK      =	128
      4  0000 ????	       00 00	   WHITE      =	0
      5  0000 ????
      6  0000 ????	       00 80	   FLAG_COLOUR =	128	; mask
      7  0000 ????	       00 40	   FLAG_MOVED =	64	; mark ALL pieces when moved. Used for castling
      8  0000 ????						; but maybe useful for evaluation of development
      9  0000 ????	       00 20	   FLAG_ENPASSANT =	32
     10  0000 ????	       00 10	   FLAG_CASTLE =	16
     11  0000 ????
     12  0000 ????						;---------------------------------------------------------------------------------------------------
     13  0000 ????						; DEFINE THE PIECES
     14  0000 ????						; ID lives in bits 0-2
     15  0000 ????
     16  0000 ????	       00 00	   BLANK      =	0
     17  0000 ????	       00 00	   ███  =	BLANK
     18  0000 ????
     19  0000 ????	       00 01	   WPAWN      =	1
     20  0000 ????	       00 01	   WP	      =	WPAWN
     21  0000 ????	       00 02	   BPAWN      =	2
     22  0000 ????	       00 02	   BP	      =	BPAWN
     23  0000 ????	       00 03	   KNIGHT     =	3
     24  0000 ????	       00 03	   N	      =	KNIGHT
     25  0000 ????	       00 04	   BISHOP     =	4
     26  0000 ????	       00 04	   B	      =	BISHOP
     27  0000 ????	       00 05	   ROOK       =	5
     28  0000 ????	       00 05	   R	      =	ROOK
     29  0000 ????	       00 06	   QUEEN      =	6
     30  0000 ????	       00 06	   Q	      =	QUEEN
     31  0000 ????	       00 07	   KING       =	7
     32  0000 ????	       00 07	   K	      =	KING
     33  0000 ????	       00 08	   MARKER     =	8
     34  0000 ????
     35  0000 ????	       00 0f	   PIECE_MASK =	15	; trim off the flags leaving just piece ID
     36  0000 ????
     37  0000 ????						;---------------------------------------------------------------------------------------------------
     38  0000 ????
     39  0000 ????						; Movements
     40  0000 ????
     41  0000 ????	       00 0a	   _UP	      =	10	; up
     42  0000 ????	       ff ff ff ff _LEFT      =	-1	; left
     43  0000 ????	       ff ff ff f6 _DOWN      =	-10	; down
     44  0000 ????	       00 01	   _RIGHT     =	1	; right
     45  0000 ????
     46  0000 ????						; EOF
------- FILE ./chess.asm
     13  0000 ????
     14  0000 ????			   ORIGIN     SET	0
     15  0000 ????			   ORIGIN_RAM SET	0
     16  0000 ????
------- FILE segtime.asm LEVEL 2 PASS 3
      0  0000 ????				      include	"segtime.asm"
      1  0000 ????						;    Sokoboo - a Sokoban implementation
      2  0000 ????						;    using a generic tile-based display engine for the Atari 2600
      3  0000 ????						;    Sokoban (倉庫番)™ is © Falcon Co., Ltd.
      4  0000 ????						;
      5  0000 ????						;    Code related to this Sokoban™ implementation was developed by Andrew Davie.
      6  0000 ????						;
      7  0000 ????						;    Code related to the generic tile-based display engine was developed by
      8  0000 ????						;    Andrew Davie and Thomas Jentzsch during 2003-2011 and is
      9  0000 ????						;    Copyright(C)2003-2019 Thomas Jentzsch and Andrew Davie - contacts details:
     10  0000 ????						;    Andrew Davie (andrew@taswegian.com), Thomas Jentzsch (tjentzsch@yahoo.de).
     11  0000 ????						;
     12  0000 ????						;    Code related to music and sound effects uses the TIATracker music player
     13  0000 ????						;    Copyright 2016 Andre "Kylearan" Wichmann - see source code in the "sound"
     14  0000 ????						;    directory for Apache licensing details.
     15  0000 ????						;
     16  0000 ????						;    Some level data incorporated in this program were created by Lee J Haywood.
     17  0000 ????						;    See the copyright notices in the License directory for a list of level
     18  0000 ????						;    contributors.
     19  0000 ????						;
     20  0000 ????						;    Except where otherwise indicated, this software is released under the
     21  0000 ????						;    following licensing arrangement...
     22  0000 ????						;
     23  0000 ????						;    This program is free software: you can redistribute it and/or modify
     24  0000 ????						;    it under the terms of the GNU General Public License as published by
     25  0000 ????						;    the Free Software Foundation, either version 3 of the License, or
     26  0000 ????						;    (at your option) any later version.
     27  0000 ????						;    see https://www.gnu.org/licenses/gpl-3.0.en.html
     28  0000 ????
     29  0000 ????						;    This program is distributed in the hope that it will be useful,
     30  0000 ????						;    but WITHOUT ANY WARRANTY; without even the implied warranty of
     31  0000 ????						;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     32  0000 ????						;    GNU General Public License for more details.
     33  0000 ????
     34  0000 ????						; segtime optimization (averages):
     35  0000 ????						;   lost time = segtime/2 * 64
     36  0000 ????						;   num-segments = (vblank + overscan time) (NTSC 276=62+51=113) / 2 / segtime
     37  0000 ????						;   overhead: num-segments * 8 (assuming minimal INTIM check only)
     38  0000 ????						;
     39  0000 ????						; segtime = 2:
     40  0000 ????						;   lost time = 64
     41  0000 ????						;   num-segments = 28
     42  0000 ????						;   overhead = 224!
     43  0000 ????						; segtime = 3:
     44  0000 ????						;   lost time = 96
     45  0000 ????						;   num-segments = 18
     46  0000 ????						;   overhead = 144!
     47  0000 ????						; segtime = 4: 	     <--!!!
     48  0000 ????						;   lost time = 128!
     49  0000 ????						;   num-segments = 28
     50  0000 ????						;   overhead = 112
     51  0000 ????						; segtime = 5:
     52  0000 ????						;   lost time = 160!
     53  0000 ????						;   num-segments = 11
     54  0000 ????						;   overhead = 88
     55  0000 ????						; segtime = 6:
     56  0000 ????						;   lost time = 192!
     57  0000 ????						;   num-segments = 9
     58  0000 ????						;   overhead = 72
     59  0000 ????						; segtime = 7:
     60  0000 ????						;   lost time = 224!
     61  0000 ????						;   num-segments = 8
     62  0000 ????						;   overhead = 64
     63  0000 ????						; segtime = 10:
     64  0000 ????						;   lost time = 320!
     65  0000 ????						;   num-segments = 5
     66  0000 ????						;   overhead = 40
     67  0000 ????						; segtime = 20:
     68  0000 ????						;   lost time = 640!
     69  0000 ????						;   num-segments = 2
     70  0000 ????						;   overhead = 16
     71  0000 ????						; segtime = 40:
     72  0000 ????						;   lost time = 1280!
     73  0000 ????						;   num-segments = 1
     74  0000 ????						;   overhead = 8
     75  0000 ????
     76  0000 ????						; optimal INTIM segtime is 4 + 1 = 5,
     77  0000 ????						; below wasted time increases rapidly, above only moderately
     78  0000 ????						; if the overhead becomes larger, optimal segtimes will increase too
     79  0000 ????						; also the lost time will become smaller, if smaller segments can be used instead,
     80  0000 ????						;  so larger segtimes are not that bad then
     81  0000 ????
     82  0000 ????
     83  0000 ????				      MAC	segtime
     84  0000 ????			   {1}	      SET	{2}
     85  0000 ????			   TEST_{1}   =	0
     86  0000 ????				      ENDM
     87  0000 ????
     88  0000 ????				      MAC	segtime_c
     89  0000 ????			   {1}	      SET	({2}+32)/64 + 2
     90  0000 ????			   TEST_{1}   =	0
     91  0000 ????				      ENDM
     92  0000 ????
     93  0000 ????						; Pathways
     94  0000 ????						; StealPart3, not enough time for SCD_SLOW --> 79✅
     95  0000 ????						; if QuickDraw does immediate exit, 58✅
     96  0000 ????
     97  0000 ????						;---------------------------------------------------------------------------------------------------
     98  0000 ????
      0  0000 ????				      SEGTIME_C	MINIMUM_SEGTIME, 95	;✅ processing slice minimum requirement
      1  0000 ????			   MINIMUM_SEGTIME SET	(95+32)/64 + 2
      2  0000 ????	       00 00	   TEST_MINIMUM_SEGTIME =	0
      0  0000 ????				      SEGTIME_C	SEGTIME_MINIMUM_TIMESLICE, 54	;✅ abort time maximum requirement for timeslice
      1  0000 ????			   SEGTIME_MINIMUM_TIMESLICE SET	(54+32)/64 + 2
      2  0000 ????	       00 00	   TEST_SEGTIME_MINIMUM_TIMESLICE =	0
    101  0000 ????
    102  0000 ????						; Note: we add 1 to the minimum because there's a bit of overhead at the start of the timeslice code which vectors
    103  0000 ????						; to the appropriate timeslice.  That timeslice then checks the segtime again -- and in the case of the minimum we
    104  0000 ????						; will already have used 55 cycles of the available timeslice to get to the segtime check. Given that there are only
    105  0000 ????						; 9 spare cycles in the 'unit' left, it's probably more efficient to abort earlier and save those 55 cycles for other
    106  0000 ????						; uses ...
    107  0000 ????
    108  0000 ????
    109  0000 ????						; The following timings have been physicaly timed via code/debugger... the comment shows the worst observed time.
    110  0000 ????						; Generally the allocated segtime should be a bit bigger than the worst observed, to cater for the minor code
    111  0000 ????						; outside the creature itself which might otherwise cause screen time over-run.
    112  0000 ????
    113  0000 ????						; The following are NOT object-related and timing is a bit of manual guesswork/calculation
    114  0000 ????						; Comment may indicate at what value a glitch was DEFINITELY seen. These timings may not be optimal.
    115  0000 ????
      0  0000 ????				      SEGTIME	SEGTIME_MAN,22	;18 ;12	  ;NFI
      1  0000 ????			   SEGTIME_MAN SET	22
      2  0000 ????	       00 00	   TEST_SEGTIME_MAN =	0
------- FILE ./chess.asm
     18  0000 ????
     19  0000 ????						;FIXED_BANK		 = 3 * 2048	      ;-->  8K ROM tested OK
     20  0000 ????						;FIXED_BANK		  = 7 * 2048	      ;-->  16K ROM tested OK
     21  0000 ????	       78 00	   FIXED_BANK =	15 * 2048	; ->> 32K
     22  0000 ????						;FIXED_BANK		 = 31 * 2048	       ; ->> 64K
     23  0000 ????						;FIXED_BANK		 = 239 * 2048	      ;--> 480K ROM tested OK (KK/CC2 compatibility)
     24  0000 ????						;FIXED_BANK		 = 127 * 2048	      ;--> 256K ROM tested OK
     25  0000 ????						;FIXED_BANK		 = 255 * 2048	      ;--> 512K ROM tested OK (CC2 can't handle this)
     26  0000 ????
     27  0000 ????	       00 01	   YES	      =	1
     28  0000 ????	       00 00	   NO	      =	0
     29  0000 ????
     30  0000 ????						; assemble diagnostics. Remove for release.
     31  0000 ????	       00 01	   ASSERTS    =	1
     32  0000 ????	       00 00	   TEST_POSITION =	0	; 0=normal, 1 = setup test position
     33  0000 ????
     34  0000 ????						;===================================
     35  0000 ????	       00 00	   FINAL_VERSION =	NO	; this OVERRIDES any selections below and sets everything correct for a final release
     36  0000 ????						;===================================
     37  0000 ????
     38  0000 ????						;-------------------------------------------------------------------------------
     39  0000 ????						; The following are optional YES/NO depending on phase of the moon
     40  0000 ????			   L276       SET	YES	; use 276 line display for NTSC
     41  0000 ????						;-------------------------------------------------------------------------------
     42  0000 ????						; DO NOT MODIFY THE BELOW SETTINGS -- USE THE ONES ABOVE!
     43  0000 ????						; Here we make sure everyting is OK based on the single switch -- less chance for accidents
     44  0000 ????			  -	      IF	FINAL_VERSION = YES
     45  0000 ????			  -L276       SET	YES	; use 276 line display for NTSC
     46  0000 ????				      ENDIF
     47  0000 ????
     48  0000 ????						;-------------------------------------------------------------------------------
     49  0000 ????
     50  0000 ????	       00 01	   COMPILE_ILLEGALOPCODES =	1
     51  0000 ????
     52  0000 ????	       00 07	   DIRECTION_BITS =	%111	; for ManLastDirection
     53  0000 ????
     54  0000 ????						;------------------------------------------------------------------------------
     55  0000 ????
     56  0000 ????	       00 01	   PLUSCART   =	YES
     57  0000 ????
     58  0000 ????						;------------------------------------------------------------------------------
     59  0000 ????
     60  0000 ????
     61  0000 ????	       00 08	   CHESSBOARD_ROWS =	8	; number of ROWS of chessboard
     62  0000 ????	       00 18	   LINES_PER_CHAR =	24	; MULTIPLE OF 3 SO RGB INTERFACES CHARS OK
     63  0000 ????	       00 48	   PIECE_SHAPE_SIZE =	72	; 3 PF bytes x 24 scanlines
     64  0000 ????
     65  0000 ????	       00 3f	   SET_BANK   =	$3F	; write address to switch ROM banks
     66  0000 ????	       00 3e	   SET_BANK_RAM =	$3E	; write address to switch RAM banks
     67  0000 ????
     68  0000 ????
     69  0000 ????	       10 00	   RAM_3E     =	$1000
     70  0000 ????	       04 00	   RAM_SIZE   =	$400
     71  0000 ????	       04 00	   RAM_WRITE  =	$400	; add this to RAM address when doing writes
     72  0000 ????
     73  0000 ????
     74  0000 ????						; Platform constants:
     75  0000 ????	       00 02	   PAL	      =	%10
     76  0000 ????	       00 02	   PAL_50     =	PAL|0
     77  0000 ????	       00 03	   PAL_60     =	PAL|1
     78  0000 ????
     79  0000 ????
     80  0000 ????				      IF	L276
     81  0000 ????	       00 30	   VBLANK_TIM_NTSC =	48	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     82  0000 ????			  -	      ELSE
     83  0000 ????			  -VBLANK_TIM_NTSC =	50	; NTSC 262
     84  0000 ????				      ENDIF
     85  0000 ????	       00 55	   VBLANK_TIM_PAL =	85	;85			    ; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     86  0000 ????
     87  0000 ????				      IF	L276
     88  0000 ????	       00 23	   OVERSCAN_TIM_NTSC =	35	;24 ;51			; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     89  0000 ????			  -	      ELSE
     90  0000 ????			  -OVERSCAN_TIM_NTSC =	8	;51			    ; NTSC 262
     91  0000 ????				      ENDIF
     92  0000 ????	       00 29	   OVERSCAN_TIM_PAL =	41	; PAL 312 (we could increase this too, if we want to, but I suppose the used vertical screen size would become very small then)
     93  0000 ????
     94  0000 ????				      IF	L276
     95  0000 ????	       01 14	   SCANLINES_NTSC =	276	; NTSC 276 (Desert Falcon does 280, so this should be pretty safe)
     96  0000 ????			  -	      ELSE
     97  0000 ????			  -SCANLINES_NTSC =	262	; NTSC 262
     98  0000 ????				      ENDIF
     99  0000 ????	       01 38	   SCANLINES_PAL =	312
    100  0000 ????
    101  0000 ????
    102  0000 ????						;------------------------------------------------------------------------------
    103  0000 ????						; MACRO definitions
    104  0000 ????
    105  0000 ????
    106  0000 ????	       08 00	   ROM_BANK_SIZE =	$800
    107  0000 ????
    108  0000 ????				      MAC	newbank
    109  0000 ????				      SEG	{1}
    110  0000 ????				      ORG	ORIGIN
    111  0000 ????				      RORG	$F000
    112  0000 ????			   BANK_START SET	*
    113  0000 ????			   {1}	      SET	ORIGIN / 2048
    114  0000 ????			   ORIGIN     SET	ORIGIN + 2048
    115  0000 ????			   _CURRENT_BANK SET	{1}
    116  0000 ????				      ENDM		; bank name
    117  0000 ????
    118  0000 ????				      MAC	define_1k_segment
    119  0000 ????				      ALIGN	$400
    120  0000 ????			   SEGMENT_{1} SET	*
    121  0000 ????			   BANK_{1}   SET	_CURRENT_BANK
    122  0000 ????				      ENDM		; {seg name}
    123  0000 ????
    124  0000 ????				      MAC	check_bank_size
    125  0000 ????			   .TEMP      =	* - BANK_START
    126  0000 ????				      ECHO	{1}, "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
    127  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE
    128  0000 ????				      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
    129  0000 ????				      ERR
    130  0000 ????				      endif
    131  0000 ????				      ENDM		; name
    132  0000 ????
    133  0000 ????
    134  0000 ????				      MAC	check_half_bank_size
    135  0000 ????						; This macro is for checking the first 1K of ROM bank data that is to be copied to RAM.
    136  0000 ????						; Note that these ROM banks can contain 2K, so this macro will generally go 'halfway'
    137  0000 ????			   .TEMP      =	* - BANK_START
    138  0000 ????				      ECHO	{1}, "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
    139  0000 ????				      if	( .TEMP ) > ROM_BANK_SIZE/2
    140  0000 ????				      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
    141  0000 ????				      ERR
    142  0000 ????				      endif
    143  0000 ????				      ENDM		; name
    144  0000 ????
    145  0000 ????
    146  0000 ????						;---------------------------------------------------------------------------------------------------
    147  0000 ????
    148  0000 ????						; Macro inserts a page break if the object would overlap a page
    149  0000 ????
    150  0000 ????				      MAC	optional_pagebreak
    151  0000 ????				      LIST	OFF
    152  0000 ????				      IF	(>( * + {2} -1 )) > ( >* )
    153  0000 ????			   EARLY_LOCATION SET	*
    154  0000 ????				      ALIGN	256
    155  0000 ????				      ECHO	"PAGE BREAK INSERTED FOR ", {1}
    156  0000 ????				      ECHO	"REQUESTED SIZE = ", {2}
    157  0000 ????				      ECHO	"WASTED SPACE = ", *-EARLY_LOCATION
    158  0000 ????				      ECHO	"PAGEBREAK LOCATION = ", *
    159  0000 ????				      ENDIF
    160  0000 ????				      LIST	ON
    161  0000 ????				      ENDM		; { string, size }
    162  0000 ????
    163  0000 ????
    164  0000 ????				      MAC	check_page_crossing
    165  0000 ????				      LIST	OFF
    166  0000 ????				      if	( >BLOCK_END != >BLOCK_START )
    167  0000 ????				      ECHO	"PAGE CROSSING @ ", BLOCK_START
    168  0000 ????				      endif
    169  0000 ????				      LIST	ON
    170  0000 ????				      ENDM
    171  0000 ????
    172  0000 ????				      MAC	checkpage
    173  0000 ????				      LIST	OFF
    174  0000 ????				      IF	>. != >{1}
    175  0000 ????				      ECHO	""
    176  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ")"
    177  0000 ????				      ECHO	""
    178  0000 ????				      ERR
    179  0000 ????				      ENDIF
    180  0000 ????				      LIST	ON
    181  0000 ????				      ENDM
    182  0000 ????
    183  0000 ????				      MAC	checkpagex
    184  0000 ????				      LIST	OFF
    185  0000 ????				      IF	>. != >{1}
    186  0000 ????				      ECHO	""
    187  0000 ????				      ECHO	"ERROR: different pages! (", {1}, ",", ., ") @ {0}"
    188  0000 ????				      ECHO	{2}
    189  0000 ????				      ECHO	""
    190  0000 ????				      ERR
    191  0000 ????				      ENDIF
    192  0000 ????				      LIST	ON
    193  0000 ????				      ENDM
    194  0000 ????
    195  0000 ????
    196  0000 ????						;---------------------------------------------------------------------------------------------------
    197  0000 ????
    198  0000 ????				      MAC	def
    199  0000 ????			   BANK_{1}   SET	_CURRENT_BANK	; bank in which this subroutine resides
    200  0000 ????						;    SUBROUTINE      ; doesn't work in a macro!
    201  0000 ????			   {1}			; entry point
    202  0000 ????				      ENDM		; name of subroutine
    203  0000 ????
    204  0000 ????						;---------------------------------------------------------------------------------------------------
    205  0000 ????
    206  0000 ????				      MAC	newrambank
    207  0000 ????						; {1}	     bank name
    208  0000 ????						; {2}	     RAM bank number
    209  0000 ????
    210  0000 ????				      SEG.U	{1}
    211  0000 ????				      ORG	ORIGIN_RAM
    212  0000 ????				      RORG	RAM_3E
    213  0000 ????			   BANK_START SET	*
    214  0000 ????			   RAMBANK_{1} SET	ORIGIN_RAM / RAM_SIZE
    215  0000 ????			   _CURRENT_RAMBANK SET	RAMBANK_{1}
    216  0000 ????			   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    217  0000 ????				      ENDM		; bank name
    218  0000 ????
    219  0000 ????						; TODO - fix - this is faulty....
    220  0000 ????				      MAC	validate_ram_size
    221  0000 ????			   .RAM_BANK_SIZE SET	* - RAM_3E
    222  0000 ????				      IF	.RAM_BANK_SIZE > RAM_SIZE
    223  0000 ????				      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
    224  0000 ????				      ERR
    225  0000 ????				      ENDIF
    226  0000 ????				      ENDM
    227  0000 ????
    228  0000 ????						;---------------------------------------------------------------------------------------------------
    229  0000 ????
    230  0000 ????				      MAC	resync
    231  0000 ????						; resync screen, X and Y == 0 afterwards
    232  0000 ????				      lda	#%10	; make sure VBLANK is ON
    233  0000 ????				      sta	VBLANK
    234  0000 ????
    235  0000 ????				      ldx	#8	; 5 or more RESYNC_FRAMES
    236  0000 ????			   .loopResync
    237  0000 ????				      VERTICAL_SYNC
    238  0000 ????
    239  0000 ????				      ldy	#SCANLINES_NTSC/2 - 2
    240  0000 ????				      lda	Platform
    241  0000 ????				      eor	#PAL_50	; PAL-50?
    242  0000 ????				      bne	.ntsc
    243  0000 ????				      ldy	#SCANLINES_PAL/2 - 2
    244  0000 ????			   .ntsc
    245  0000 ????			   .loopWait
    246  0000 ????				      sta	WSYNC
    247  0000 ????				      sta	WSYNC
    248  0000 ????				      dey
    249  0000 ????				      bne	.loopWait
    250  0000 ????				      dex
    251  0000 ????				      bne	.loopResync
    252  0000 ????				      ENDM
    253  0000 ????
    254  0000 ????				      MAC	set_platform
    255  0000 ????						; 00 = NTSC
    256  0000 ????						; 01 = NTSC
    257  0000 ????						; 10 = PAL-50
    258  0000 ????						; 11 = PAL-60
    259  0000 ????				      lda	SWCHB
    260  0000 ????				      rol
    261  0000 ????				      rol
    262  0000 ????				      rol
    263  0000 ????				      and	#%11
    264  0000 ????				      eor	#PAL
    265  0000 ????				      sta	Platform	; P1 difficulty --> TV system (0=NTSC, 1=PAL)
    266  0000 ????				      ENDM
    267  0000 ????
    268  0000 ????
    269  0000 ????						;---------------------------------------------------------------------------------------------------
    270  0000 ????
    271  0000 ????				      MAC	jsram_safe
    272  0000 ????						; Saves bank of routine to variable for later restore.
    273  0000 ????						; Switches to the bank and does a JSR to the routine.
    274  0000 ????
    275  0000 ????				      lda	#BANK_{1}
    276  0000 ????				      sta	savedBank
    277  0000 ????				      sta	SET_BANK
    278  0000 ????				      jsr	{1}
    279  0000 ????				      ENDM		; {routine}
    280  0000 ????
    281  0000 ????
    282  0000 ????				      MAC	jsram
    283  0000 ????
    284  0000 ????				      lda	#BANK_{1}
    285  0000 ????				      sta	SET_BANK
    286  0000 ????				      jsr	{1}
    287  0000 ????				      ENDM		; {routine}
    288  0000 ????
    289  0000 ????						;---------------------------------------------------------------------------------------------------
    290  0000 ????
------- FILE zeropage.asm LEVEL 2 PASS 3
      0  0000 ????				      include	"zeropage.asm"
      1  0000 ????						; Chess
      2  0000 ????						; Atari 2600 Chess display system
      3  0000 ????						; Copyright (c) 2019-2020 Andrew Davie
      4  0000 ????						; andrew@taswegian.com
      5  0000 ????
      6 U00f3 ????				      SEG.U	variables
      7 U0080					      ORG	$80
      8 U0080		       00	   drawPieceNumber ds	1	; partial - square being drawn
      9 U0081
     10 U0081		       00	   rnd	      ds	1	; random
     11 U0082		       00	   drawPhase  ds	1	; ticks through the board draw process
     12 U0083		       00	   drawDelay  ds	1
     13 U0084		       00	   lastSquare ds	1
     14 U0085		       00	   drawCount  ds	1
     15 U0086		       00	   fromX12    ds	1
     16 U0087		       00	   toX12      ds	1
     17 U0088		       00 00	   highlight_row ds	2
     18 U008a		       00 00	   highlight_col ds	2
     19 U008c		       00	   mdelay     ds	1
     20 U008d		       00	   ccur       ds	1
     21 U008e		       00	   savedBank  ds	1	; switched-in bank for FIXED returns
     22 U008f		       00	   aiPhase    ds	1	; human/computer state machine
     23 U0090		       00	   aiFlashDelay ds	1
     24 U0091		       00	   aiFromSquare ds	1
     25 U0092		       00	   aiToSquare ds	1
     26 U0093		       00	   aiFromSquareX12 ds	1
     27 U0094		       00	   aiToSquareX12 ds	1
     28 U0095		       00	   aiMoveIndex ds	1
     29 U0096
     30 U0096		       00	   aiFlashPhase ds	1
     31 U0097
     32 U0097		       00	   currentPiece ds	1
     33 U0098		       00	   currentSquare ds	1
     34 U0099		       00	   returnBank ds	1
     35 U009a		       00	   enPassantPawn ds	1	; TODO - this belongs in PLY bank
     36 U009b		       00	   followPiece ds	1
     37 U009c		       00	   currentPly ds	1
     38 U009d		       00	   piecelistIndex ds	1
     39 U009e		       00	   sideToMove ds	1	; d7 == side, 0=white, 128 = black
     40 U009f		       00	   fromSquare ds	1
     41 U00a0		       00	   fromPiece  ds	1
     42 U00a1		       00	   toSquare   ds	1
     43 U00a2		       00	   toPiece    ds	1
     44 U00a3		       00	   lastPiece  ds	1
     45 U00a4		       00	   previousPiece ds	1
     46 U00a5
     47 U00a5		       00	   Platform   ds	1	; TV system (%0x=NTSC, %10=PAL-50, %11=PAL-60)
     48 U00a6							;BufferedJoystick		  ds 1	      ; player joystick input
     49 U00a6							;PreviousJoystick		  ds 1
     50 U00a6							;BGColour			  ds 1
     51 U00a6		       00	   aiPiece    ds	1
------- FILE ./chess.asm
------- FILE overlays.asm LEVEL 2 PASS 3
      0 U00a7					      include	"overlays.asm"
      1 U00a7							; Chess
      2 U00a7							; Atari 2600 Chess display system
      3 U00a7							; Copyright (c) 2019-2020 Andrew Davie
      4 U00a7							; andrew@taswegian.com
      5 U00a7
      6 U00a7							;---------------------------------------------------------------------------------------------------
      7 U00a7							; OVERLAYS!
      8 U00a7							; These variables are overlays, and should be managed with care
      9 U00a7							; They co-exist (each "OVERLAY" starts at the zero-page variable "Overlay"
     10 U00a7							; and thus, overlays cannot be used at the same time (that is, you cannot
     11 U00a7							; use a variable in overlay #1 while at the same time using a variable in
     12 U00a7							; overlay #2
     13 U00a7
     14 U00a7							; for clarity, prefix ALL overlay variables with double-underscore (__)
     15 U00a7
     16 U00a7							; TOTAL SPACE USED BY ANY OVERLAY GROUP SHOULD BE <= SIZE OF 'Overlay'
     17 U00a7							; ensure this by using the VALIDATE_OVERLAY macro
     18 U00a7							;---------------------------------------------------------------------------------------------------
     19 U00a7
     20 U00a7					      MAC	overlay
     21 U00a7				   OVERLAY_NAME SET	{1}
     22 U00a7					      SEG.U	OVERLAY_{1}
     23 U00a7					      org	Overlay
     24 U00a7					      ENDM		; {name}
     25 U00a7
     26 U00a7							;---------------------------------------------------------------------------------------------------
     27 U00a7
     28 U00a7					      MAC	validate_overlay
     29 U00a7					      LIST	OFF
     30 U00a7				   OVERLAY_DELTA SET	* - Overlay
     31 U00a7					      IF	OVERLAY_DELTA > MAXIMUM_REQUIRED_OVERLAY_SIZE
     32 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	OVERLAY_DELTA
     33 U00a7					      ENDIF
     34 U00a7					      IF	OVERLAY_DELTA > OVERLAY_SIZE
     35 U00a7					      ECHO	"Overlay", OVERLAY_NAME, "is too big!"
     36 U00a7					      ECHO	"REQUIRED SIZE =", OVERLAY_DELTA
     37 U00a7					      ERR
     38 U00a7					      ENDIF
     39 U00a7					      LIST	ON
     40 U00a7					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     41 U00a7					      ENDM
     42 U00a7
     43 U00a7							;---------------------------------------------------------------------------------------------------
     44 U00a7
     45 U00a7				   OVERLAY_SIZE SET	$4C	; maximum size
     46 U00a7				   MAXIMUM_REQUIRED_OVERLAY_SIZE SET	0
     47 U00a7
     48 U00a7
     49 U00a7							; This overlay variable is used for the overlay variables.  That's OK.
     50 U00a7							; However, it is positioned at the END of the variables so, if on the off chance we're overlapping
     51 U00a7							; stack space and variable, it is LIKELY that that won't be a problem, as the temp variables
     52 U00a7							; (especially the latter ones) are only used in rare occasions.
     53 U00a7
     54 U00a7							; FOR SAFETY, DO NOT USE THIS AREA DIRECTLY (ie: NEVER reference 'Overlay' in the code)
     55 U00a7							; ADD AN OVERLAY FOR EACH ROUTINE'S USE, SO CLASHES CAN BE EASILY CHECKED
     56 U00a7
     57 U00a7		       00 00 00 00*Overlay    ds	OVERLAY_SIZE	;--> overlay (share) variables
     58 U00f3				   END_OF_OVERLAY
     59 U00f3
     60 U00f3							;---------------------------------------------------------------------------------------------------
     61 U00f3							; And now... the overlays....
     62 U00f3
 ---- OVERLAYS ( $4c bytes ) ----
     63 U00f3					      ECHO	"---- OVERLAYS (", OVERLAY_SIZE, "bytes ) ----"
     64 U00f3
     65 U00f3							;---------------------------------------------------------------------------------------------------
     66 U00f3
      0 U00f3					      OVERLAY	"PieceBufferOverlay"
      1 U00f3				   OVERLAY_NAME SET	"PieceBufferOverlay"
      2 U00f3 ????				      SEG.U	OVERLAY_"PieceBufferOverlay"
      3 U00a7					      org	Overlay
     68 U00a7							; used in CopyPieceFromRAMBufferToScreen
     69 U00a7							; used in CopyPieceToRAMBuffer
     70 U00a7							; used in ClearChessBitmap
     71 U00a7							; used in CopyPieceToRowBitmap
     72 U00a7		       00 00 00 00*__pieceShapeBuffer ds	PIECE_SHAPE_SIZE
     73 U00ef		       00 00	   __ptr      ds	2	; pointer to data
     74 U00f1		       00 00	   __ptr2     ds	2	; pointer to data
      0 U00f3					      VALIDATE_OVERLAY
     11 U00f3					      LIST	ON
 PieceBufferOverlay - $0 bytes available
     12 U00f3					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     76 U00f3
     77 U00f3							;---------------------------------------------------------------------------------------------------
     78 U00f3
      0 U00f3					      OVERLAY	"CopyROMShadowToRAM"
      1 U00f3				   OVERLAY_NAME SET	"CopyROMShadowToRAM"
      2 U00aa ????				      SEG.U	OVERLAY_"CopyROMShadowToRAM"
      3 U00a7					      org	Overlay
     80 U00a7		       00	   __CopyCount ds	1
     81 U00a8		       00	   __ROM_SourceBank ds	1
     82 U00a9		       00	   __index    ds	1
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 CopyROMShadowToRAM - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     84 U00aa
     85 U00aa							;---------------------------------------------------------------------------------------------------
     86 U00aa
      0 U00aa					      OVERLAY	"DrawTheChessScreen"
      1 U00aa				   OVERLAY_NAME SET	"DrawTheChessScreen"
      2 U00a8 ????				      SEG.U	OVERLAY_"DrawTheChessScreen"
      3 U00a7					      org	Overlay
     88 U00a7		       00	   __rows     ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 DrawTheChessScreen - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     90 U00a8
     91 U00a8							;---------------------------------------------------------------------------------------------------
     92 U00a8
      0 U00a8					      OVERLAY	"SetupShadowRAM"
      1 U00a8				   OVERLAY_NAME SET	"SetupShadowRAM"
      2 U00a9 ????				      SEG.U	OVERLAY_"SetupShadowRAM"
      3 U00a7					      org	Overlay
     94 U00a7		       00	   __destinationBank ds	1
     95 U00a8		       00	   __sourceBank ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SetupShadowRAM - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
     97 U00a9
     98 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"DrawPiece"
      1 U00a9				   OVERLAY_NAME SET	"DrawPiece"
      2 U00a9 ????				      SEG.U	OVERLAY_"DrawPiece"
      3 U00a7					      org	Overlay
    100 U00a7		       00	   __pieceColour ds	1
    101 U00a8		       00	   __boardc   ds	1
    102 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 DrawPiece - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    104 U00a9
    105 U00a9
    106 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"InitPly"
      1 U00a9				   OVERLAY_NAME SET	"InitPly"
      2 U00a8 ????				      SEG.U	OVERLAY_"InitPly"
      3 U00a7					      org	Overlay
    108 U00a7		       00	   __plyBank  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 InitPly - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    110 U00a8
    111 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"RandomPiece"
      1 U00a8				   OVERLAY_NAME SET	"RandomPiece"
      2 U00a8 ????				      SEG.U	OVERLAY_"RandomPiece"
      3 U00a7					      org	Overlay
    113 U00a7		       00	   __tempx    ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 RandomPiece - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    115 U00a8
      0 U00a8					      OVERLAY	"Overlay000"
      1 U00a8				   OVERLAY_NAME SET	"Overlay000"
      2 U00a8 ????				      SEG.U	OVERLAY_"Overlay000"
      3 U00a7					      org	Overlay
    117 U00a7		       00	   __fromRow  ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 Overlay000 - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    119 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"Overlay001"
      1 U00a8				   OVERLAY_NAME SET	"Overlay001"
      2 U00a9 ????				      SEG.U	OVERLAY_"Overlay001"
      3 U00a7					      org	Overlay
    121 U00a7		       00	   __from     ds	1
    122 U00a8		       00	   __to       ds	1
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 Overlay001 - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    124 U00a9							;---------------------------------------------------------------------------------------------------
    125 U00a9
      0 U00a9					      OVERLAY	"Handlers"
      1 U00a9				   OVERLAY_NAME SET	"Handlers"
      2 U00aa ????				      SEG.U	OVERLAY_"Handlers"
      3 U00a7					      org	Overlay
    127 U00a7		       00	   __piece    ds	1
    128 U00a8		       00 00	   __vector   ds	2
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Handlers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    130 U00aa
    131 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"Movers"
      1 U00aa				   OVERLAY_NAME SET	"Movers"
      2 U00aa ????				      SEG.U	OVERLAY_"Movers"
      3 U00a7					      org	Overlay
    133 U00a7		       00	   __fromCol  ds	1
    134 U00a8		       00	   __toCol    ds	1
    135 U00a9		       00	   __temp     ds	1
    136 U00aa
      0 U00aa					      VALIDATE_OVERLAY
     11 U00aa					      LIST	ON
 Movers - $49 bytes available
     12 U00aa					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    138 U00aa
    139 U00aa							;---------------------------------------------------------------------------------------------------
      0 U00aa					      OVERLAY	"checkPieces"
      1 U00aa				   OVERLAY_NAME SET	"checkPieces"
      2 U00a9 ????				      SEG.U	OVERLAY_"checkPieces"
      3 U00a7					      org	Overlay
    141 U00a7		       00	   __x	      ds	1
    142 U00a8		       00	   __bank     ds	1
    143 U00a9
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 checkPieces - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    145 U00a9
    146 U00a9							;---------------------------------------------------------------------------------------------------
      0 U00a9					      OVERLAY	"aiSelectStartSquare"
      1 U00a9				   OVERLAY_NAME SET	"aiSelectStartSquare"
      2 U00a8 ????				      SEG.U	OVERLAY_"aiSelectStartSquare"
      3 U00a7					      org	Overlay
    148 U00a7		       00	   __cursorColour ds	1
      0 U00a8					      VALIDATE_OVERLAY
     11 U00a8					      LIST	ON
 aiSelectStartSquare - $4b bytes available
     12 U00a8					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    150 U00a8
    151 U00a8							;---------------------------------------------------------------------------------------------------
      0 U00a8					      OVERLAY	"TitleScreen"
      1 U00a8				   OVERLAY_NAME SET	"TitleScreen"
      2 U00a9 ????				      SEG.U	OVERLAY_"TitleScreen"
      3 U00a7					      org	Overlay
    153 U00a7		       00 00	   __colour_table ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 TitleScreen - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    155 U00a9							;---------------------------------------------------------------------------------------------------
    156 U00a9
      0 U00a9					      OVERLAY	"SAFE_showMoveOptions"
      1 U00a9				   OVERLAY_NAME SET	"SAFE_showMoveOptions"
      2 U00ff ????				      SEG.U	OVERLAY_"SAFE_showMoveOptions"
      3 U00a7					      org	Overlay
    158 U00a7		       00 00	   __moveDotColour ds	2
      0 U00a9					      VALIDATE_OVERLAY
     11 U00a9					      LIST	ON
 SAFE_showMoveOptions - $4a bytes available
     12 U00a9					      ECHO	OVERLAY_NAME, "-", OVERLAY_SIZE - ( * - Overlay ), "bytes available"
    160 U00a9							;---------------------------------------------------------------------------------------------------
    161 U00a9
    162 U00f3					      ORG	END_OF_OVERLAY
 ---- END OF OVERLAYS ----
    163 U00f3					      ECHO	"---- END OF OVERLAYS ----"
 MAXIMUM OVERLAY SIZE NEEDED =  $4c
    164 U00f3					      ECHO	"MAXIMUM OVERLAY SIZE NEEDED = ", MAXIMUM_REQUIRED_OVERLAY_SIZE
    165 U00f3
    166 U00f3							;EOF
------- FILE ./chess.asm
------- FILE stack.asm LEVEL 2 PASS 3
      0 U00f3					      include	"stack.asm"
      1 U00f3							; Chess
      2 U00f3							; Atari 2600 Chess display system
      3 U00f3							; Copyright (c) 2019-2020 Andrew Davie
      4 U00f3							; andrew@taswegian.com
      5 U00f3
      6 U00f3
      7 U00f3		       00 0c	   RESERVED_FOR_STACK =	12	; bytes guaranteed not overwritten by variable use
      8 U00f3
      9 U00f3		       00 00 00 00*	      ds	RESERVED_FOR_STACK
     10 U00ff
     11 U00ff							; WARNING/NOTE - the alphabeta search violates the above size constraints
     12 U00ff							; HOWEVER, the "OVERLAY" segment is beneath this, and will be stomped, depending on # plys
     13 U00ff							;  but since overlay is not generally stressed during alphabeta, we're good.
------- FILE ./chess.asm
    294 U00ff
 FREE BYTES IN ZERO PAGE =  $0
    295 U00ff					      ECHO	"FREE BYTES IN ZERO PAGE = ", $FF - *
    296 U00ff				  -	      IF	* > $FF
    297 U00ff				  -	      ERR	"Zero Page overflow!"
    298 U00ff					      ENDIF
    299 U00ff
    300 U00ff							;------------------------------------------------------------------------------
    301 U00ff							;##############################################################################
    302 U00ff							;------------------------------------------------------------------------------
    303 U00ff
    304 U00ff							; NOW THE VERY INTERESTING '3E' RAM BANKS
    305 U00ff							; EACH BANK HAS A READ-ADDRESS AND A WRITE-ADDRESS, WITH 1k TOTAL ACCESSIBLE
    306 U00ff							; IN A 2K MEMORY SPACE
    307 U00ff
      0 U00ff					      NEWRAMBANK	CHESS_BOARD_ROW
      1 U00ff
      2 U00ff
      3 U00ff
      4 U0000 ????				      SEG.U	CHESS_BOARD_ROW
      5 U0000					      ORG	ORIGIN_RAM
      6 U0000					      RORG	RAM_3E
      7 U0000				   BANK_START SET	*
      8 U0000				   RAMBANK_CHESS_BOARD_ROW SET	ORIGIN_RAM / RAM_SIZE
      9 U0000				   _CURRENT_RAMBANK SET	RAMBANK_CHESS_BOARD_ROW
     10 U0000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
    309 U0000					      REPEAT	(CHESSBOARD_ROWS) - 1
      0 U0000					      NEWRAMBANK	.DUMMY
      1 U0000
      2 U0000
      3 U0000
      4 U1c00 ????				      SEG.U	.DUMMY
      5 U0400					      ORG	ORIGIN_RAM
      6 U0400					      RORG	RAM_3E
      7 U0400				   BANK_START SET	*
      8 U0400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0400					      VALIDATE_RAM_SIZE
      1 U0400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0400				  -	      ERR
      5 U0400					      ENDIF
    309 U0400					      REPEND
      0 U0400					      NEWRAMBANK	.DUMMY
      1 U0400
      2 U0400
      3 U0400
      4 U0400					      SEG.U	.DUMMY
      5 U0800					      ORG	ORIGIN_RAM
      6 U0800					      RORG	RAM_3E
      7 U0800				   BANK_START SET	*
      8 U0800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0800					      VALIDATE_RAM_SIZE
      1 U0800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0800				  -	      ERR
      5 U0800					      ENDIF
    309 U0800					      REPEND
      0 U0800					      NEWRAMBANK	.DUMMY
      1 U0800
      2 U0800
      3 U0800
      4 U0800					      SEG.U	.DUMMY
      5 U0c00					      ORG	ORIGIN_RAM
      6 U0c00					      RORG	RAM_3E
      7 U0c00				   BANK_START SET	*
      8 U0c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U0c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U0c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U0c00					      VALIDATE_RAM_SIZE
      1 U0c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U0c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U0c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U0c00				  -	      ERR
      5 U0c00					      ENDIF
    309 U0c00					      REPEND
      0 U0c00					      NEWRAMBANK	.DUMMY
      1 U0c00
      2 U0c00
      3 U0c00
      4 U0c00					      SEG.U	.DUMMY
      5 U1000					      ORG	ORIGIN_RAM
      6 U1000					      RORG	RAM_3E
      7 U1000				   BANK_START SET	*
      8 U1000				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1000					      VALIDATE_RAM_SIZE
      1 U1000				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1000				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1000				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1000				  -	      ERR
      5 U1000					      ENDIF
    309 U1000					      REPEND
      0 U1000					      NEWRAMBANK	.DUMMY
      1 U1000
      2 U1000
      3 U1000
      4 U1000					      SEG.U	.DUMMY
      5 U1400					      ORG	ORIGIN_RAM
      6 U1400					      RORG	RAM_3E
      7 U1400				   BANK_START SET	*
      8 U1400				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1400					      VALIDATE_RAM_SIZE
      1 U1400				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1400				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1400				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1400				  -	      ERR
      5 U1400					      ENDIF
    309 U1400					      REPEND
      0 U1400					      NEWRAMBANK	.DUMMY
      1 U1400
      2 U1400
      3 U1400
      4 U1400					      SEG.U	.DUMMY
      5 U1800					      ORG	ORIGIN_RAM
      6 U1800					      RORG	RAM_3E
      7 U1800				   BANK_START SET	*
      8 U1800				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1800					      VALIDATE_RAM_SIZE
      1 U1800				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1800				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1800				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1800				  -	      ERR
      5 U1800					      ENDIF
    309 U1800					      REPEND
      0 U1800					      NEWRAMBANK	.DUMMY
      1 U1800
      2 U1800
      3 U1800
      4 U1800					      SEG.U	.DUMMY
      5 U1c00					      ORG	ORIGIN_RAM
      6 U1c00					      RORG	RAM_3E
      7 U1c00				   BANK_START SET	*
      8 U1c00				   RAMBANK_.DUMMY SET	ORIGIN_RAM / RAM_SIZE
      9 U1c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY
     10 U1c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U1c00					      VALIDATE_RAM_SIZE
      1 U1c00				   .RAM_BANK_SIZE SET	* - RAM_3E
      2 U1c00				  -	      IF	.RAM_BANK_SIZE > RAM_SIZE
      3 U1c00				  -	      ECHO	"RAM BANK OVERFLOW @ ", (* - RAM_3E)
      4 U1c00				  -	      ERR
      5 U1c00					      ENDIF
    312 U1c00					      REPEND
    313 U1c00
    314 U1c00							; NOTE: THIS BANK JUST *LOOKS* EMPTY.
    315 U1c00							; It actually contains everything copied from the ROM copy of the ROW RAM banks.
    316 U1c00							; The variable definitions are also in that ROM bank (even though they're RAM :)
    317 U1c00
    318 U1c00							; A neat feature of having multiple copies of the same code in different RAM banks
    319 U1c00							; is that we can use that code to switch between banks, and the system will happily
    320 U1c00							; execute the next instruction from the newly switched-in bank without a problem.
    321 U1c00
    322 U1c00							; Now we have the actual graphics data for each of the rows.  This consists of an
    323 U1c00							; actual bitmap (in exact PF-style format, 6 bytes per line) into which the
    324 U1c00							; character shapes are masked/copied. The depth of the character shapes may be
    325 U1c00							; changed by changing the #LINES_PER_CHAR value.  Note that this depth should be
    326 U1c00							; a multiple of 3, so that the RGB scanlines match at character joins.
    327 U1c00
    328 U1c00							; We have one bank for each chessboard row.  These banks are duplicates of the above,
    329 U1c00							; accessed via the above labels but with the appropriate bank switched in.
    330 U1c00
    331 U1c00							;------------------------------------------------------------------------------
    332 U1c00
    333 U1c00
    334 U1c00							;---------------------------------------------------------------------------------------------------
    335 U1c00
    336 U1c00
    337 U1c00		       00 fe	   RND_EOR_VAL =	$FE	;B4
    338 U1c00
    339 U1c00					      MAC	next_random
    340 U1c00					      lda	rnd
    341 U1c00					      lsr
    342 U1c00					      bcc	.skipEOR
    343 U1c00					      eor	#RND_EOR_VAL
    344 U1c00				   .skipEOR   sta	rnd
    345 U1c00					      ENDM
    346 U1c00
    347 U1c00							;--------------------------------------------------------------------------------
    348 U1c00
    349 U1c00							;ORIGIN      SET 0
    350 U1c00
------- FILE Handler_MACROS.asm LEVEL 2 PASS 3
      0 U1c00					      include	"Handler_MACROS.asm"
      1 U1c00							; Copyright (C)2020 Andrew Davie
      2 U1c00							; Common macros for piece move handlers
      3 U1c00
      4 U1c00							;---------------------------------------------------------------------------------------------------
      5 U1c00							; Looks at a square offset {1} to see if piece can move to it
      6 U1c00							; Adds the square to the movelist if it can
      7 U1c00							; Keeps moving in the same direction until it's blocked/off=board
      8 U1c00
      9 U1c00					      MAC	move_towards
     10 U1c00					      SUBROUTINE
     11 U1c00							; = 76 for single square (empty/take)
     12 U1c00
     13 U1c00					      ldx	currentSquare	; 3
     14 U1c00					      bne	.project	; 3   unconditional
     15 U1c00
     16 U1c00				   .empty     jsr	AddMove	; 57
     17 U1c00				   .project   ldy	ValidSquare+{1},x	; 4
     18 U1c00					      bmi	.invalid	; 2/3 off board!
     19 U1c00					      lda	Board,y	; 4   piece @ destination
     20 U1c00					      beq	.empty	; 2/3
     21 U1c00					      eor	currentPiece	; 3
     22 U1c00					      bpl	.invalid	; 2/3 same colour
     23 U1c00					      jsr	AddMove	; 57  and exit
     24 U1c00
     25 U1c00				   .invalid
     26 U1c00					      ENDM
     27 U1c00
     28 U1c00							;---------------------------------------------------------------------------------------------------
     29 U1c00
     30 U1c00					      MAC	move_to
     31 U1c00					      SUBROUTINE
     32 U1c00					      ldy	ValidSquare+{1},x
     33 U1c00					      bmi	.invalid	; off board!
     34 U1c00					      lda	Board,y	; piece @ destination
     35 U1c00					      beq	.squareEmpty
     36 U1c00					      eor	currentPiece
     37 U1c00					      bpl	.invalid	; same colour
     38 U1c00				   .squareEmpty jsr	AddMove
     39 U1c00				   .invalid
     40 U1c00					      ENDM
     41 U1c00
     42 U1c00
     43 U1c00					      MAC	move_to_x
     44 U1c00					      ldx	currentSquare
     45 U1c00					      MOVE_TO	{1}
     46 U1c00					      ENDM
     47 U1c00
     48 U1c00
     49 U1c00							;---------------------------------------------------------------------------------------------------
     50 U1c00							; EOF
------- FILE ./chess.asm
    352 U1c00
------- FILE BANK_GENERIC.asm LEVEL 2 PASS 3
      0 U1c00					      include	"BANK_GENERIC.asm"
      1 U1c00
      0 U1c00					      NEWBANK	GENERIC_BANK_1
      1  0143 ????				      SEG	GENERIC_BANK_1
      2  0000					      ORG	ORIGIN
      3  0000					      RORG	$F000
      4  0000				   BANK_START SET	*
      5  0000				   GENERIC_BANK_1 SET	ORIGIN / 2048
      6  0000				   ORIGIN     SET	ORIGIN + 2048
      7  0000				   _CURRENT_BANK SET	GENERIC_BANK_1
      3  0000
      0  0000					      DEFINE_1K_SEGMENT	DECODE_LEVEL_SHADOW
      1  0000					      ALIGN	$400
      2  0000				   SEGMENT_DECODE_LEVEL_SHADOW SET	*
      3  0000				   BANK_DECODE_LEVEL_SHADOW SET	_CURRENT_BANK
      5  0000
      6  0000				  -	      if	0
      7  0000				  -	      IF	PLUSCART = YES
      8  0000				  -	      .byte	"ChessAPI.php", #0 //TODO: change!
      9  0000				  -	      .byte	"pluscart.firmaplus.de", #0
     10  0000				  -	      ENDIF
     11  0000					      endif
     12  0000
     13  0000		       85 3e a9 00 STELLA_AUTODETECT .byte.b	$85,$3e,$a9,$00	; 3E
     14  0004
      0  0004					      CHECK_HALF_BANK_SIZE	"GENERIC_BANK_1 (DECODE_LEVEL)"
      1  0004
      2  0004
      3  0004		       00 04	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 (DECODE_LEVEL) (1K) SIZE =  $4 , FREE= $3fc
      4  0004					      ECHO	"GENERIC_BANK_1 (DECODE_LEVEL)", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0004				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0004				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0004				  -	      ERR
      8  0004					      endif
     16  0004
     17  0004							;---------------------------------------------------------------------------------------------------
     18  0004							; ... the above is a (potentially) RAM-copied section -- the following is ROM-only.  Note that
     19  0004							; we do not configure a 1K boundary, as we con't really care when the above 'RAM'
     20  0004							; bank finishes.  Just continue on from where it left off...
     21  0004							;---------------------------------------------------------------------------------------------------
     22  0004
      0  0004					      DEF	Cart_Init
      1  0004				   BANK_Cart_Init SET	_CURRENT_BANK
      2  0004
      3  0004				   Cart_Init
     24  0004					      SUBROUTINE
     25  0004
     26  0004		       a9 00		      lda	#0
     27  0006		       8d 83 02 	      sta	SWBCNT	; console I/O always set to INPUT
     28  0009		       8d 81 02 	      sta	SWACNT	; set controller I/O to INPUT
     29  000c		       85 6b		      sta	HMCLR
     30  000e
     31  000e							; cleanup remains of title screen
     32  000e		       85 5b		      sta	GRP0
     33  0010		       85 5c		      sta	GRP1
     34  0012
     35  0012		       a9 10		      lda	#%00010000	; double width missile, double width player
     36  0014		       85 44		      sta	NUSIZ0
     37  0016		       85 45		      sta	NUSIZ1
     38  0018
     39  0018		       a9 04		      lda	#%100	; players/missiles BEHIND BG
     40  001a		       85 4a		      sta	CTRLPF
     41  001c
     42  001c		       60		      rts
     43  001d
     44  001d
     45  001d							;---------------------------------------------------------------------------------------------------
     46  001d
      0  001d					      DEF	Resync
      1  001d				   BANK_Resync SET	_CURRENT_BANK
      2  001d
      3  001d				   Resync
     48  001d					      SUBROUTINE
     49  001d
      0  001d					      RESYNC
      1  001d
      2  001d		       a9 02		      lda	#%10
      3  001f		       85 41		      sta	VBLANK
      4  0021
      5  0021		       a2 08		      ldx	#8
      6  0023				   .loopResync
      0  0023					      VERTICAL_SYNC
      1  0023		       a9 0e		      lda	#%1110
      2  0025		       85 42	   .VSLP1     sta	WSYNC
      3  0027		       85 40		      sta	VSYNC
      4  0029		       4a		      lsr
      5  002a		       d0 f9		      bne	.VSLP1
      8  002c
      9  002c		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  002e		       a5 a5		      lda	Platform
     11  0030		       49 02		      eor	#PAL_50
     12  0032		       d0 02		      bne	.ntsc
     13  0034		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  0036				   .ntsc
     15  0036				   .loopWait
     16  0036		       85 42		      sta	WSYNC
     17  0038		       85 42		      sta	WSYNC
     18  003a		       88		      dey
     19  003b		       d0 f9		      bne	.loopWait
     20  003d		       ca		      dex
     21  003e		       d0 e3		      bne	.loopResync
     51  0040		       60		      rts
     52  0041
     53  0041
     54  0041							;---------------------------------------------------------------------------------------------------
     55  0041
      0  0041					      DEF	aiStartClearBoard
      1  0041				   BANK_aiStartClearBoard SET	_CURRENT_BANK
      2  0041
      3  0041				   aiStartClearBoard
     57  0041					      SUBROUTINE
     58  0041
     59  0041		       a2 08		      ldx	#8
     60  0043		       86 85		      stx	drawCount	; = bank
     61  0045		       e6 82		      inc	drawPhase
     62  0047
      0  0047					      PHASE	AI_Halt
      1  0047		       a9 09		      lda	#AI_Halt
      2  0049		       85 8f		      sta	aiPhase
     64  004b		       60		      rts
     65  004c
     66  004c							;---------------------------------------------------------------------------------------------------
     67  004c
      0  004c					      DEF	aiClearEachRow
      1  004c				   BANK_aiClearEachRow SET	_CURRENT_BANK
      2  004c
      3  004c				   aiClearEachRow
     69  004c					      SUBROUTINE
     70  004c
     71  004c		       c6 85		      dec	drawCount
     72  004e		       30 05		      bmi	.bitmapCleared
     73  0050		       a4 85		      ldy	drawCount
     74  0052		       4c e8 f8 	      jmp	CallClear
     75  0055
     76  0055				   .bitmapCleared
     77  0055
     78  0055		       a9 3f		      lda	#63
     79  0057		       85 80		      sta	drawPieceNumber
     80  0059
     81  0059		       e6 82		      inc	drawPhase
     82  005b
      0  005b					      PHASE	AI_Halt	;tmp
      1  005b		       a9 09		      lda	#AI_Halt
      2  005d		       85 8f		      sta	aiPhase
     84  005f		       60		      rts
     85  0060
     86  0060
     87  0060							;---------------------------------------------------------------------------------------------------
     88  0060
      0  0060					      DEF	FB3
      1  0060				   BANK_FB3   SET	_CURRENT_BANK
      2  0060
      3  0060				   FB3
     90  0060					      SUBROUTINE
     91  0060
     92  0060		       a9 00		      lda	#BLANK
     93  0062		       85 a4		      sta	previousPiece
     94  0064
     95  0064		       e6 82		      inc	drawPhase
     96  0066		       60		      rts
     97  0067
     98  0067							;---------------------------------------------------------------------------------------------------
     99  0067
      0  0067					      DEF	EraseStartPiece
      1  0067				   BANK_EraseStartPiece SET	_CURRENT_BANK
      2  0067
      3  0067				   EraseStartPiece
    101  0067					      SUBROUTINE
    102  0067
    103  0067		       a5 a1		      lda	toSquare
    104  0069		       c5 9f		      cmp	fromSquare
    105  006b		       f0 0a		      beq	.idleErase
    106  006d
    107  006d		       a9 06		      lda	#6	; on/off count
    108  006f		       85 85		      sta	drawCount	; flashing for piece about to move
    109  0071		       a9 00		      lda	#0
    110  0073		       85 83		      sta	drawDelay
    111  0075
    112  0075		       e6 82		      inc	drawPhase
    113  0077		       60	   .idleErase rts
    114  0078
    115  0078
    116  0078							;---------------------------------------------------------------------------------------------------
    117  0078
      0  0078					      DEF	WriteStartPieceBlank
      1  0078				   BANK_WriteStartPieceBlank SET	_CURRENT_BANK
      2  0078
      3  0078				   WriteStartPieceBlank
    119  0078					      SUBROUTINE
    120  0078
    121  0078							; Flash the piece in-place preparatory to moving it.
    122  0078							; drawDelay = flash speed
    123  0078							; drawCount = # of flashes
    124  0078
    125  0078		       a5 83		      lda	drawDelay
    126  007a		       f0 03		      beq	deCount
    127  007c		       c6 83		      dec	drawDelay
    128  007e		       60		      rts
    129  007f
    130  007f				   deCount
    131  007f
    132  007f		       a5 85		      lda	drawCount
    133  0081		       f0 0e		      beq	flashDone
    134  0083		       c6 85		      dec	drawCount
    135  0085
    136  0085		       a9 04		      lda	#4
    137  0087		       85 83		      sta	drawDelay	; "getting ready to move" flash
    138  0089
    139  0089		       a5 9f		      lda	fromSquare
    140  008b		       85 80		      sta	drawPieceNumber
    141  008d		       20 de fd 	      jsr	SAFE_CopySinglePiece	; EOR-draw = flash
    142  0090		       60		      rts
    143  0091
    144  0091		       e6 82	   flashDone  inc	drawPhase
    145  0093		       60		      rts
    146  0094
    147  0094
    148  0094							;---------------------------------------------------------------------------------------------------
    149  0094
      0  0094					      DEF	DEB2
      1  0094				   BANK_DEB2  SET	_CURRENT_BANK
      2  0094
      3  0094				   DEB2
    151  0094					      SUBROUTINE
    152  0094
    153  0094		       20 de fd 	      jsr	SAFE_CopySinglePiece
    154  0097		       c6 80		      dec	drawPieceNumber
    155  0099		       30 03		      bmi	.comp
    156  009b
    157  009b		       c6 82		      dec	drawPhase
    158  009d		       60		      rts
    159  009e
    160  009e		       e6 82	   .comp      inc	drawPhase
    161  00a0		       60		      rts
    162  00a1
    163  00a1
    164  00a1							;---------------------------------------------------------------------------------------------------
    165  00a1
      0  00a1					      DEF	MarchB
      1  00a1				   BANK_MarchB SET	_CURRENT_BANK
      2  00a1
      3  00a1				   MarchB
    167  00a1					      SUBROUTINE
    168  00a1
    169  00a1							; Draw the piece in the new square
    170  00a1
    171  00a1		       a5 9f		      lda	fromSquare
    172  00a3		       85 80		      sta	drawPieceNumber
    173  00a5		       20 de fd 	      jsr	SAFE_CopySinglePiece	; draw the moving piece into the new square
    174  00a8
    175  00a8		       a9 06		      lda	#6	; snail trail delay
    176  00aa		       85 83		      sta	drawDelay
    177  00ac
    178  00ac		       e6 82		      inc	drawPhase
    179  00ae		       60		      rts
    180  00af
    181  00af
    182  00af							;---------------------------------------------------------------------------------------------------
    183  00af
      0  00af					      DEF	FinalFlash
      1  00af				   BANK_FinalFlash SET	_CURRENT_BANK
      2  00af
      3  00af				   FinalFlash
    185  00af					      SUBROUTINE
    186  00af
    187  00af		       a5 83		      lda	drawDelay
    188  00b1		       f0 03		      beq	.deCount
    189  00b3		       c6 83		      dec	drawDelay
    190  00b5		       60		      rts
    191  00b6
    192  00b6		       a5 85	   .deCount   lda	drawCount
    193  00b8		       f0 0e		      beq	flashDone2
    194  00ba		       c6 85		      dec	drawCount
    195  00bc
    196  00bc		       a9 0a		      lda	#10
    197  00be		       85 83		      sta	drawDelay	; "getting ready to move" flash
    198  00c0
    199  00c0		       a5 9f		      lda	fromSquare
    200  00c2		       85 80		      sta	drawPieceNumber
    201  00c4		       20 de fd 	      jsr	SAFE_CopySinglePiece
    202  00c7		       60		      rts
    203  00c8
    204  00c8		       e6 82	   flashDone2 inc	drawPhase
    205  00ca		       60		      rts
    206  00cb
    207  00cb
    208  00cb							;---------------------------------------------------------------------------------------------------
    209  00cb
      0  00cb					      DEF	CastleFixup
      1  00cb				   BANK_CastleFixup SET	_CURRENT_BANK
      2  00cb
      3  00cb				   CastleFixup
    211  00cb					      SUBROUTINE
    212  00cb
    213  00cb							; fixup any castling issues
    214  00cb							; at this point the king has finished his two-square march
    215  00cb							; based on the finish square, we determine which rook we're interacting with
    216  00cb							; and generate a 'move' for the rook to position on the other side of the king
    217  00cb
    218  00cb
    219  00cb		       a5 a0		      lda	fromPiece
    220  00cd		       29 10		      and	#FLAG_CASTLE
    221  00cf		       f0 2d		      beq	.noCast	; NOT involved in castle!
    222  00d1
    223  00d1		       a2 04		      ldx	#4
    224  00d3		       a5 a1		      lda	toSquare
    225  00d5		       ca	   .findCast  dex
    226  00d6		       30 26		      bmi	.noCast
    227  00d8		       dd 0b f1 	      cmp	KSquare,x
    228  00db		       d0 f8		      bne	.findCast
    229  00dd
    230  00dd
    231  00dd		       bd 13 f1 	      lda	RSquareEnd,x
    232  00e0		       85 87		      sta	toX12
    233  00e2		       bd 17 f1 	      lda	RSquareStart64,x
    234  00e5		       85 9f		      sta	fromSquare
    235  00e7		       bd 1b f1 	      lda	RSquareEnd64,x
    236  00ea		       85 a1		      sta	toSquare
    237  00ec
    238  00ec		       bc 0f f1 	      ldy	RSquareStart,x
    239  00ef		       84 86		      sty	fromX12
    240  00f1
    241  00f1		       a5 a0		      lda	fromPiece
    242  00f3		       29 80		      and	#128
    243  00f5		       09 05		      ora	#ROOK	; preserve colour
    244  00f7		       85 a0		      sta	fromPiece
    245  00f9
    246  00f9		       a9 07		      lda	#CSL
    247  00fb		       85 82		      sta	drawPhase
    248  00fd		       60		      rts
    249  00fe
    250  00fe				   .noCast
    251  00fe
    252  00fe		       a5 9e		      lda	sideToMove
    253  0100		       49 80		      eor	#128
    254  0102		       85 9e		      sta	sideToMove	; swap
    255  0104
    256  0104		       30 04		      bmi	.skip	; not human's turn?
    257  0106
    258  0106		       a9 0b		      lda	#AI_SartMoveGen
    259  0108		       85 8f		      sta	aiPhase	; start "AI" state machine
    260  010a
    261  010a		       60	   .skip      rts
    262  010b
    263  010b
    264  010b		       02 06 3a 3e KSquare    .byte.b	2,6,58,62
    265  010f		       16 1d 5c 63 RSquareStart .byte.b	22,29,92,99
    266  0113		       19 1b 5f 61 RSquareEnd .byte.b	25,27,95,97
    267  0117		       00 07 38 3f RSquareStart64 .byte.b	0,7,56,63
    268  011b		       03 05 3b 3d RSquareEnd64 .byte.b	3,5,59,61
    269  011f
    270  011f
    271  011f							;---------------------------------------------------------------------------------------------------
    272  011f
      0  011f					      DEF	SetupBanks
      1  011f				   BANK_SetupBanks SET	_CURRENT_BANK
      2  011f
      3  011f				   SetupBanks
    274  011f					      SUBROUTINE
    275  011f
    276  011f							; SAFE
    277  011f
    278  011f		       a0 07		      ldy	#7
    279  0121		       a2 01	   .copyRowBanks ldx	#BANK_ROM_SHADOW_OF_CHESS_BITMAP
    280  0123		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM
    281  0126		       88		      dey
    282  0127		       10 f8		      bpl	.copyRowBanks
    283  0129
    284  0129							; copy the BOARD/MOVES bank
    285  0129
    286  0129		       a0 08		      ldy	#RAMBANK_MOVES_RAM
    287  012b		       a2 0b		      ldx	#MOVES
    288  012d		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM	; this auto-initialises Board too
    289  0130
    290  0130							; copy the PLY banks
    291  0130
    292  0130		       a9 06		      lda	#MAX_PLY
    293  0132		       85 a7		      sta	__plyBank
    294  0134		       a0 09		      ldy	#RAMBANK_PLY
    295  0136		       84 9c		      sty	currentPly
    296  0138		       a2 0c	   .copyPlyBanks ldx	#BANK_PLY
    297  013a		       20 aa fd 	      jsr	SAFE_CopyShadowROMtoRAM
    298  013d		       c8		      iny
    299  013e		       c6 a7		      dec	__plyBank
    300  0140		       d0 f6		      bne	.copyPlyBanks
    301  0142
    302  0142		       60		      rts
    303  0143
    304  0143
    305  0143							;---------------------------------------------------------------------------------------------------
    306  0143
      0  0143					      CHECK_BANK_SIZE	"GENERIC_BANK_1 -- full 2K"
      1  0143		       01 43	   .TEMP      =	* - BANK_START
 GENERIC_BANK_1 -- full 2K (2K) SIZE =  $143 , FREE= $6bd
      2  0143					      ECHO	"GENERIC_BANK_1 -- full 2K", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  0143				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  0143				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  0143				  -	      ERR
      6  0143					      endif
------- FILE ./chess.asm
------- FILE BANK_ROM_SHADOW_SCREEN.asm LEVEL 2 PASS 3
      0  0143					      include	"BANK_ROM_SHADOW_SCREEN.asm"
      1  0143
      0  0143					      NEWBANK	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      1  0aec ????				      SEG	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      2  0800					      ORG	ORIGIN
      3  0800					      RORG	$F000
      4  0800				   BANK_START SET	*
      5  0800				   BANK_ROM_SHADOW_OF_CHESS_BITMAP SET	ORIGIN / 2048
      6  0800				   ORIGIN     SET	ORIGIN + 2048
      7  0800				   _CURRENT_BANK SET	BANK_ROM_SHADOW_OF_CHESS_BITMAP
      3  0800
      4  0800							; Template bank for a SINGLE ROW of the chessboard display.
      5  0800							; There are 8x of these.
      6  0800							; The bank contains the definition of the bitmap, and also the code to draw the bitmap
      7  0800							; The bank is copied from ROM into RAM at startup.
      8  0800							; The draw switches between consecutive row banks, with the last returning
      9  0800							; we effectively have 1K
     10  0800							;---------------------------------------------------------------------------------------------------
     11  0800
     12  0800		       00 a6	   COLOUR_LINE_1 =	$a6
     13  0800		       00 4a	   COLOUR_LINE_2 =	$4a
     14  0800		       00 24	   COLOUR_LINE_3 =	$24
     15  0800		       00 00	   BACKGCOL   =	$00
     16  0800
     17  0800							; good 94/46/28/0
     18  0800							; good 94/44/26/0
     19  0800
     20  0800
     21  0800		       00 90	   ROW_BITMAP_SIZE =	6 * 24	; PF0/PF1/PF2/(PF0)/(PF1)/(PF2) x 8 ICC pixels
     22  0800
      0  0800					      OPTIONAL_PAGEBREAK	ChessBitmap, ROW_BITMAP_SIZE
     10  0800					      LIST	ON
     24  0800
     25  0800				   ChessBitmap
     26  0800		       00 00 00 00*ChessBitmap0 ds	24
     27  0818		       00 00 00 00*ChessBitmap1 ds	24
     28  0830		       00 00 00 00*ChessBitmap2 ds	24
     29  0848		       00 00 00 00*ChessBitmap3 ds	24
     30  0860		       00 00 00 00*ChessBitmap4 ds	24
     31  0878		       00 00 00 00*ChessBitmap5 ds	24
     32  0890
     33  0890
     34  0890				   BlankSprite
     35  0890		       00 00 00 00*	      ds	8,0
     36  0898
     37  0898				   SpriteBuffer
     38  0898					      REPEAT	24
     39  0898		       f8		      .byte.b	%11111000	;%00011111
     38  0898					      REPEND
     39  0899		       f8		      .byte.b	%11111000	;%00011111
     38  0899					      REPEND
     39  089a		       f8		      .byte.b	%11111000	;%00011111
     38  089a					      REPEND
     39  089b		       f8		      .byte.b	%11111000	;%00011111
     38  089b					      REPEND
     39  089c		       f8		      .byte.b	%11111000	;%00011111
     38  089c					      REPEND
     39  089d		       f8		      .byte.b	%11111000	;%00011111
     38  089d					      REPEND
     39  089e		       f8		      .byte.b	%11111000	;%00011111
     38  089e					      REPEND
     39  089f		       f8		      .byte.b	%11111000	;%00011111
     38  089f					      REPEND
     39  08a0		       f8		      .byte.b	%11111000	;%00011111
     38  08a0					      REPEND
     39  08a1		       f8		      .byte.b	%11111000	;%00011111
     38  08a1					      REPEND
     39  08a2		       f8		      .byte.b	%11111000	;%00011111
     38  08a2					      REPEND
     39  08a3		       f8		      .byte.b	%11111000	;%00011111
     38  08a3					      REPEND
     39  08a4		       f8		      .byte.b	%11111000	;%00011111
     38  08a4					      REPEND
     39  08a5		       f8		      .byte.b	%11111000	;%00011111
     38  08a5					      REPEND
     39  08a6		       f8		      .byte.b	%11111000	;%00011111
     38  08a6					      REPEND
     39  08a7		       f8		      .byte.b	%11111000	;%00011111
     38  08a7					      REPEND
     39  08a8		       f8		      .byte.b	%11111000	;%00011111
     38  08a8					      REPEND
     39  08a9		       f8		      .byte.b	%11111000	;%00011111
     38  08a9					      REPEND
     39  08aa		       f8		      .byte.b	%11111000	;%00011111
     38  08aa					      REPEND
     39  08ab		       f8		      .byte.b	%11111000	;%00011111
     38  08ab					      REPEND
     39  08ac		       f8		      .byte.b	%11111000	;%00011111
     38  08ac					      REPEND
     39  08ad		       f8		      .byte.b	%11111000	;%00011111
     38  08ad					      REPEND
     39  08ae		       f8		      .byte.b	%11111000	;%00011111
     38  08ae					      REPEND
     39  08af		       f8		      .byte.b	%11111000	;%00011111
     40  08b0					      REPEND
     41  08b0
     42  08b0				   SpriteBuffer2
     43  08b0					      REPEAT	24
     44  08b0		       f8		      .byte.b	%11111000	;%00011111
     43  08b0					      REPEND
     44  08b1		       f8		      .byte.b	%11111000	;%00011111
     43  08b1					      REPEND
     44  08b2		       f8		      .byte.b	%11111000	;%00011111
     43  08b2					      REPEND
     44  08b3		       f8		      .byte.b	%11111000	;%00011111
     43  08b3					      REPEND
     44  08b4		       f8		      .byte.b	%11111000	;%00011111
     43  08b4					      REPEND
     44  08b5		       f8		      .byte.b	%11111000	;%00011111
     43  08b5					      REPEND
     44  08b6		       f8		      .byte.b	%11111000	;%00011111
     43  08b6					      REPEND
     44  08b7		       f8		      .byte.b	%11111000	;%00011111
     43  08b7					      REPEND
     44  08b8		       f8		      .byte.b	%11111000	;%00011111
     43  08b8					      REPEND
     44  08b9		       f8		      .byte.b	%11111000	;%00011111
     43  08b9					      REPEND
     44  08ba		       f8		      .byte.b	%11111000	;%00011111
     43  08ba					      REPEND
     44  08bb		       f8		      .byte.b	%11111000	;%00011111
     43  08bb					      REPEND
     44  08bc		       f8		      .byte.b	%11111000	;%00011111
     43  08bc					      REPEND
     44  08bd		       f8		      .byte.b	%11111000	;%00011111
     43  08bd					      REPEND
     44  08be		       f8		      .byte.b	%11111000	;%00011111
     43  08be					      REPEND
     44  08bf		       f8		      .byte.b	%11111000	;%00011111
     43  08bf					      REPEND
     44  08c0		       f8		      .byte.b	%11111000	;%00011111
     43  08c0					      REPEND
     44  08c1		       f8		      .byte.b	%11111000	;%00011111
     43  08c1					      REPEND
     44  08c2		       f8		      .byte.b	%11111000	;%00011111
     43  08c2					      REPEND
     44  08c3		       f8		      .byte.b	%11111000	;%00011111
     43  08c3					      REPEND
     44  08c4		       f8		      .byte.b	%11111000	;%00011111
     43  08c4					      REPEND
     44  08c5		       f8		      .byte.b	%11111000	;%00011111
     43  08c5					      REPEND
     44  08c6		       f8		      .byte.b	%11111000	;%00011111
     43  08c6					      REPEND
     44  08c7		       f8		      .byte.b	%11111000	;%00011111
     45  08c8					      REPEND
     46  08c8				  -	      if	0
     47  08c8				  -	      .byte	%00011111
     48  08c8				  -	      .byte	%00011111
     49  08c8				  -	      .byte	%00011111
     50  08c8				  -	      .byte	%00011111
     51  08c8				  -	      .byte	%00011111
     52  08c8				  -	      .byte	%00011111
     53  08c8				  -	      .byte	%00011111
     54  08c8				  -	      .byte	%00011111
     55  08c8				  -
     56  08c8				  -	      .byte	%00011111
     57  08c8				  -	      .byte	%00011111
     58  08c8				  -	      .byte	%00011111
     59  08c8				  -	      .byte	%00011111
     60  08c8				  -	      .byte	%00011111
     61  08c8				  -	      .byte	%00011111
     62  08c8				  -	      .byte	%00011111
     63  08c8				  -	      .byte	%00011111
     64  08c8				  -
     65  08c8				  -	      .byte	%00011111
     66  08c8				  -	      .byte	%00011111
     67  08c8				  -	      .byte	%00011111
     68  08c8				  -	      .byte	%00011111
     69  08c8				  -	      .byte	%00011111
     70  08c8				  -	      .byte	%00011111
     71  08c8				  -	      .byte	%00011111
     72  08c8				  -	      .byte	%00011111
     73  08c8					      endif
     74  08c8
     75  08c8
     76  08c8							;---------------------------------------------------------------------------------------------------
     77  08c8					      if	1
      0  08c8					      DEF	ClearRowBitmap
      1  08c8				   BANK_ClearRowBitmap SET	_CURRENT_BANK
      2  08c8
      3  08c8				   ClearRowBitmap
     79  08c8
     80  08c8		       a9 00		      lda	#0
     81  08ca		       a0 90		      ldy	#ROW_BITMAP_SIZE
     82  08cc		       99 ff f3    .clearRow  sta	ChessBitmap+RAM_WRITE-1,y
     83  08cf		       88		      dey
     84  08d0		       d0 fa		      bne	.clearRow
     85  08d2		       60		      rts
     86  08d3					      endif
     87  08d3
     88  08d3							;---------------------------------------------------------------------------------------------------
     89  08d3
      0  08d3					      DEF	CopyPieceToRowBitmap
      1  08d3				   BANK_CopyPieceToRowBitmap SET	_CURRENT_BANK
      2  08d3
      3  08d3				   CopyPieceToRowBitmap
     91  08d3
     92  08d3		       a0 11		      ldy	#17
     93  08d5		       b0 30		      bcs	.rightSide
     94  08d7
     95  08d7				   .copyPiece
     96  08d7		       b9 a7 00 	      lda	__pieceShapeBuffer,y
     97  08da		       f0 06		      beq	.blank1
     98  08dc		       59 00 f0 	      eor	ChessBitmap,y
     99  08df		       99 00 f4 	      sta	ChessBitmap+RAM_WRITE,y
    100  08e2
    101  08e2		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    102  08e5		       f0 06		      beq	.blank2
    103  08e7		       59 12 f0 	      eor	ChessBitmap+18,y
    104  08ea		       99 12 f4 	      sta	ChessBitmap+RAM_WRITE+18,y
    105  08ed
    106  08ed		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    107  08f0		       f0 06		      beq	.blank3
    108  08f2		       59 24 f0 	      eor	ChessBitmap+36,y
    109  08f5		       99 24 f4 	      sta	ChessBitmap+RAM_WRITE+36,y
    110  08f8
    111  08f8		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    112  08fb		       f0 06		      beq	.blank4
    113  08fd		       59 36 f0 	      eor	ChessBitmap+54,y
    114  0900		       99 36 f4 	      sta	ChessBitmap+RAM_WRITE+54,y
    115  0903
    116  0903		       88	   .blank4    dey
    117  0904		       10 d1		      bpl	.copyPiece
    118  0906
    119  0906		       60		      rts
    120  0907
    121  0907				   .rightSide
    122  0907
    123  0907					      SUBROUTINE
    124  0907
    125  0907				   .copyPieceR
    126  0907
    127  0907		       b9 a7 00 	      lda	__pieceShapeBuffer,y
    128  090a		       f0 06		      beq	.blank1
    129  090c		       59 48 f0 	      eor	ChessBitmap+72,y
    130  090f		       99 48 f4 	      sta	ChessBitmap+RAM_WRITE+72,y
    131  0912
    132  0912		       b9 b9 00    .blank1    lda	__pieceShapeBuffer+18,y
    133  0915		       f0 06		      beq	.blank2
    134  0917		       59 5a f0 	      eor	ChessBitmap+72+18,y
    135  091a		       99 5a f4 	      sta	ChessBitmap+RAM_WRITE+72+18,y
    136  091d
    137  091d		       b9 cb 00    .blank2    lda	__pieceShapeBuffer+36,y
    138  0920		       f0 06		      beq	.blank3
    139  0922		       59 6c f0 	      eor	ChessBitmap+72+36,y
    140  0925		       99 6c f4 	      sta	ChessBitmap+RAM_WRITE+72+36,y
    141  0928
    142  0928		       b9 dd 00    .blank3    lda	__pieceShapeBuffer+54,y
    143  092b		       f0 06		      beq	.blank4
    144  092d		       59 7e f0 	      eor	ChessBitmap+72+54,y
    145  0930		       99 7e f4 	      sta	ChessBitmap+RAM_WRITE+72+54,y
    146  0933
    147  0933				   .blank4
    148  0933		       88		      dey
    149  0934		       10 d1		      bpl	.copyPieceR
    150  0936
    151  0936		       60		      rts
    152  0937
    153  0937							;---------------------------------------------------------------------------------------------------
    154  0937
    155  0a00		       00 00 00 00*	      ALIGN	256
    156  0a00
    157  0a00							; x = row # (and bank#)
    158  0a00
    159  0a00				   .endline
    160  0a00
    161  0a00							;@59
    162  0a00
    163  0a00							; The following 'inx' is replaced in the LAST row bank with a 'RTS', thus ending the draw loop
    164  0a00							; Note that the other 7 row banks are unmodified (keeping the 'inx')
    165  0a00				   SELFMOD_RTS_ON_LAST_ROW
    166  0a00		       e8		      inx		; 2
    167  0a01
    168  0a01		       86 3e		      stx	SET_BANK_RAM	; 3 @64     BANK switch to next row
    169  0a03
      0  0a03					      DEF	DrawRow
      1  0a03				   BANK_DrawRow SET	_CURRENT_BANK
      2  0a03
      3  0a03				   DrawRow
    171  0a03
    172  0a03							;@64
    173  0a03		       a0 07		      ldy	#7	; 2
    174  0a05		       10 3b		      bpl	.dl2	; 3   (must be 69 here)
    175  0a07
    176  0a07							;@58...
    177  0a07
    178  0a07				   .l3
    179  0a07
    180  0a07		       b9 a8 f0    SMSPRITE16_0 lda	SpriteBuffer+16,y	; 4
    181  0a0a		       85 5b		      sta	GRP0	; 3
    182  0a0c		       b9 c0 f0    SMSPRITE16_1 lda	SpriteBuffer2+16,y	; 4
    183  0a0f		       85 5c		      sta	GRP1	; 3
    184  0a11
    185  0a11							;@-4
    186  0a11
    187  0a11		       a9 a6		      lda	#COLOUR_LINE_1	;#$94			  ; 2
    188  0a13		       85 48		      sta	COLUPF	; 3 @1
    189  0a15
    190  0a15		       b9 10 f0 	      lda	ChessBitmap0+16,y	; 4
    191  0a18		       85 4d		      sta	PF0	; 3
    192  0a1a		       b9 28 f0 	      lda	ChessBitmap1+16,y	; 4
    193  0a1d		       85 4e		      sta	PF1	; 3
    194  0a1f		       b9 40 f0 	      lda	ChessBitmap2+16,y	; 4
    195  0a22		       85 4f		      sta	PF2	; 3 @22
    196  0a24
      0  0a24					      SLEEP	6	; 6 @28
      1  0a24				   .CYCLES    SET	6
      2  0a24
      3  0a24				  -	      IF	.CYCLES < 2
      4  0a24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a24				  -	      ERR
      6  0a24					      ENDIF
      7  0a24
      8  0a24				  -	      IF	.CYCLES & 1
      9  0a24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a24				  -	      nop	0
     11  0a24				  -	      ELSE
     12  0a24				  -	      bit	VSYNC
     13  0a24				  -	      ENDIF
     14  0a24				  -.CYCLES    SET	.CYCLES - 3
     15  0a24					      ENDIF
     16  0a24
     17  0a24					      REPEAT	.CYCLES / 2
     18  0a24		       ea		      nop
     17  0a24					      REPEND
     18  0a25		       ea		      nop
     17  0a25					      REPEND
     18  0a26		       ea		      nop
     19  0a27					      REPEND
    198  0a27
    199  0a27		       b9 58 f0 	      lda	ChessBitmap3+16,y	; 4
    200  0a2a		       85 4d		      sta	PF0	; 3
    201  0a2c		       b9 70 f0 	      lda	ChessBitmap4+16,y	; 4
    202  0a2f		       85 4e		      sta	PF1	; 3
    203  0a31		       b9 88 f0 	      lda	ChessBitmap5+16,y	; 4
    204  0a34		       8d 4f 00 	      sta.w	PF2	; 4 @50
    205  0a37
      0  0a37					      SLEEP	4	; 4
      1  0a37				   .CYCLES    SET	4
      2  0a37
      3  0a37				  -	      IF	.CYCLES < 2
      4  0a37				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a37				  -	      ERR
      6  0a37					      ENDIF
      7  0a37
      8  0a37				  -	      IF	.CYCLES & 1
      9  0a37				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a37				  -	      nop	0
     11  0a37				  -	      ELSE
     12  0a37				  -	      bit	VSYNC
     13  0a37				  -	      ENDIF
     14  0a37				  -.CYCLES    SET	.CYCLES - 3
     15  0a37					      ENDIF
     16  0a37
     17  0a37					      REPEAT	.CYCLES / 2
     18  0a37		       ea		      nop
     17  0a37					      REPEND
     18  0a38		       ea		      nop
     19  0a39					      REPEND
    207  0a39
    208  0a39		       88		      dey		; 2
    209  0a3a		       30 c4		      bmi	.endline	; 2 (3)
    210  0a3c
    211  0a3c							;@57
    212  0a3c				   .drawLine
    213  0a3c
      0  0a3c					      SLEEP	11
      1  0a3c				   .CYCLES    SET	11
      2  0a3c
      3  0a3c				  -	      IF	.CYCLES < 2
      4  0a3c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a3c				  -	      ERR
      6  0a3c					      ENDIF
      7  0a3c
      8  0a3c					      IF	.CYCLES & 1
      9  0a3c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a3c		       04 00		      nop	0
     11  0a3e				  -	      ELSE
     12  0a3e				  -	      bit	VSYNC
     13  0a3e					      ENDIF
     14  0a3e				   .CYCLES    SET	.CYCLES - 3
     15  0a3e					      ENDIF
     16  0a3e
     17  0a3e					      REPEAT	.CYCLES / 2
     18  0a3e		       ea		      nop
     17  0a3e					      REPEND
     18  0a3f		       ea		      nop
     17  0a3f					      REPEND
     18  0a40		       ea		      nop
     17  0a40					      REPEND
     18  0a41		       ea		      nop
     19  0a42					      REPEND
    215  0a42
    216  0a42				   .dl2
    217  0a42		       b9 98 f0    SMSPRITE0_0 lda	SpriteBuffer,y	; 4
    218  0a45		       85 5b		      sta	GRP0	; 3
    219  0a47		       b9 b0 f0    SMSPRITE0_1 lda	SpriteBuffer2,y	; 4
    220  0a4a		       85 5c		      sta	GRP1	; 3
    221  0a4c
    222  0a4c							;@7
    223  0a4c
    224  0a4c		       a9 4a		      lda	#COLOUR_LINE_2	;#$4A			  ; 2
    225  0a4e		       85 48		      sta	COLUPF	; 3 @12
    226  0a50
    227  0a50		       b9 00 f0 	      lda	ChessBitmap0,y	; 4
    228  0a53		       85 4d		      sta	PF0	; 3
    229  0a55		       b9 18 f0 	      lda	ChessBitmap1,y	; 4
    230  0a58		       85 4e		      sta	PF1	; 3
    231  0a5a		       b9 30 f0 	      lda	ChessBitmap2,y	; 4
    232  0a5d		       85 4f		      sta	PF2	; 3 @33
    233  0a5f
      0  0a5f					      SLEEP	3	; 3 @36
      1  0a5f				   .CYCLES    SET	3
      2  0a5f
      3  0a5f				  -	      IF	.CYCLES < 2
      4  0a5f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a5f				  -	      ERR
      6  0a5f					      ENDIF
      7  0a5f
      8  0a5f					      IF	.CYCLES & 1
      9  0a5f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a5f		       04 00		      nop	0
     11  0a61				  -	      ELSE
     12  0a61				  -	      bit	VSYNC
     13  0a61					      ENDIF
     14  0a61				   .CYCLES    SET	.CYCLES - 3
     15  0a61					      ENDIF
     16  0a61
     17  0a61				  -	      REPEAT	.CYCLES / 2
     18  0a61				  -	      nop
     19  0a61					      REPEND
    235  0a61
    236  0a61		       b9 48 f0 	      lda	ChessBitmap3,y	; 4
    237  0a64		       85 4d		      sta	PF0	; 3
    238  0a66		       b9 60 f0 	      lda	ChessBitmap4,y	; 4
    239  0a69		       85 4e		      sta	PF1	; 3
    240  0a6b		       b9 78 f0 	      lda	ChessBitmap5,y	; 4
    241  0a6e		       85 4f		      sta	PF2	; 3 @57
    242  0a70
      0  0a70					      SLEEP	5
      1  0a70				   .CYCLES    SET	5
      2  0a70
      3  0a70				  -	      IF	.CYCLES < 2
      4  0a70				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a70				  -	      ERR
      6  0a70					      ENDIF
      7  0a70
      8  0a70					      IF	.CYCLES & 1
      9  0a70					      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a70		       04 00		      nop	0
     11  0a72				  -	      ELSE
     12  0a72				  -	      bit	VSYNC
     13  0a72					      ENDIF
     14  0a72				   .CYCLES    SET	.CYCLES - 3
     15  0a72					      ENDIF
     16  0a72
     17  0a72					      REPEAT	.CYCLES / 2
     18  0a72		       ea		      nop
     19  0a73					      REPEND
    244  0a73
    245  0a73		       b9 a0 f0    SMSPRITE8_0 lda	SpriteBuffer+8,y	; 4
    246  0a76		       85 5b		      sta	GRP0	; 3
    247  0a78		       b9 b8 f0    SMSPRITE8_1 lda	SpriteBuffer2+8,y	; 4
    248  0a7b		       85 5c		      sta	GRP1	; 3
    249  0a7d
    250  0a7d							;@0
    251  0a7d		       a9 24		      lda	#COLOUR_LINE_3	;#$28			  ; 2
    252  0a7f		       85 48		      sta	COLUPF	; 3 @5
    253  0a81
    254  0a81		       b9 08 f0 	      lda	ChessBitmap0+8,y	; 4
    255  0a84		       85 4d		      sta	PF0	; 3
    256  0a86		       b9 20 f0 	      lda	ChessBitmap1+8,y	; 4
    257  0a89		       85 4e		      sta	PF1	; 3
    258  0a8b		       b9 38 f0 	      lda	ChessBitmap2+8,y	; 4
    259  0a8e		       85 4f		      sta	PF2	; 3 @26
    260  0a90
      0  0a90					      SLEEP	8	; 6 @34
      1  0a90				   .CYCLES    SET	8
      2  0a90
      3  0a90				  -	      IF	.CYCLES < 2
      4  0a90				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  0a90				  -	      ERR
      6  0a90					      ENDIF
      7  0a90
      8  0a90				  -	      IF	.CYCLES & 1
      9  0a90				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  0a90				  -	      nop	0
     11  0a90				  -	      ELSE
     12  0a90				  -	      bit	VSYNC
     13  0a90				  -	      ENDIF
     14  0a90				  -.CYCLES    SET	.CYCLES - 3
     15  0a90					      ENDIF
     16  0a90
     17  0a90					      REPEAT	.CYCLES / 2
     18  0a90		       ea		      nop
     17  0a90					      REPEND
     18  0a91		       ea		      nop
     17  0a91					      REPEND
     18  0a92		       ea		      nop
     17  0a92					      REPEND
     18  0a93		       ea		      nop
     19  0a94					      REPEND
    262  0a94
    263  0a94		       b9 50 f0 	      lda	ChessBitmap3+8,y	; 4
    264  0a97		       85 4d		      sta	PF0	; 3
    265  0a99		       b9 68 f0 	      lda	ChessBitmap4+8,y	; 4
    266  0a9c		       85 4e		      sta	PF1	; 3
    267  0a9e		       b9 80 f0 	      lda	ChessBitmap5+8,y	; 4
    268  0aa1		       85 4f		      sta	PF2	; 3 @55
    269  0aa3
    270  0aa3		       4c 07 f2 	      jmp	.l3	; 3 @58
    271  0aa6
    272  0aa6
    273  0aa6							;.LineColour
    274  0aa6							; The ICC triplet colour definitions for a single row of the chessboard
    275  0aa6							;    REPEAT 8
    276  0aa6							;	  .byte $4A, $28, $94
    277  0aa6							;    REPEND
    278  0aa6
    279  0aa6
      0  0aa6					      DEF	WriteBlank
      1  0aa6				   BANK_WriteBlank SET	_CURRENT_BANK
      2  0aa6
      3  0aa6				   WriteBlank
    281  0aa6
    282  0aa6		       a9 90		      lda	#<BlankSprite
    283  0aa8		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    284  0aab		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    285  0aae		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    286  0ab1		       8d 48 f6 	      sta	SMSPRITE0_1+1+RAM_WRITE
    287  0ab4		       8d 79 f6 	      sta	SMSPRITE8_1+1+RAM_WRITE
    288  0ab7		       8d 0d f6 	      sta	SMSPRITE16_1+1+RAM_WRITE
    289  0aba
    290  0aba		       a9 f0		      lda	#>BlankSprite
    291  0abc		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    292  0abf		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    293  0ac2		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    294  0ac5		       8d 49 f6 	      sta	SMSPRITE0_1+2+RAM_WRITE
    295  0ac8		       8d 7a f6 	      sta	SMSPRITE8_1+2+RAM_WRITE
    296  0acb		       8d 0e f6 	      sta	SMSPRITE16_1+2+RAM_WRITE
    297  0ace
    298  0ace		       60		      rts
    299  0acf
    300  0acf
      0  0acf					      DEF	WriteCursor
      1  0acf				   BANK_WriteCursor SET	_CURRENT_BANK
      2  0acf
      3  0acf				   WriteCursor
    302  0acf
    303  0acf		       a6 88		      ldx	highlight_row
    304  0ad1		       30 18		      bmi	.noCursor
    305  0ad3
    306  0ad3		       86 3e		      stx	SET_BANK_RAM
    307  0ad5		       a9 98		      lda	#<SpriteBuffer
    308  0ad7		       8d 43 f6 	      sta	SMSPRITE0_0+1+RAM_WRITE
    309  0ada		       8d 74 f6 	      sta	SMSPRITE8_0+1+RAM_WRITE
    310  0add		       8d 08 f6 	      sta	SMSPRITE16_0+1+RAM_WRITE
    311  0ae0		       a9 f0		      lda	#>SpriteBuffer
    312  0ae2		       8d 44 f6 	      sta	SMSPRITE0_0+2+RAM_WRITE
    313  0ae5		       8d 75 f6 	      sta	SMSPRITE8_0+2+RAM_WRITE
    314  0ae8		       8d 09 f6 	      sta	SMSPRITE16_0+2+RAM_WRITE
    315  0aeb
    316  0aeb				  -	      if	0
    317  0aeb				  -	      ldx	highlight_row+1
    318  0aeb				  -	      stx	SET_BANK_RAM
    319  0aeb				  -	      lda	#<SpriteBuffer
    320  0aeb				  -	      sta	SMSPRITE0_1+1+RAM_WRITE
    321  0aeb				  -	      sta	SMSPRITE8_1+1+RAM_WRITE
    322  0aeb				  -	      sta	SMSPRITE16_1+1+RAM_WRITE
    323  0aeb				  -	      lda	#>SpriteBuffer
    324  0aeb				  -	      sta	SMSPRITE0_1+2+RAM_WRITE
    325  0aeb				  -	      sta	SMSPRITE8_1+2+RAM_WRITE
    326  0aeb				  -	      sta	SMSPRITE16_1+2+RAM_WRITE
    327  0aeb					      endif
    328  0aeb
    329  0aeb				   .noCursor
    330  0aeb		       60		      rts
    331  0aec
      0  0aec					      CHECK_HALF_BANK_SIZE	"ROM_SHADOW_SCREEN"
      1  0aec
      2  0aec
      3  0aec		       02 ec	   .TEMP      =	* - BANK_START
 ROM_SHADOW_SCREEN (1K) SIZE =  $2ec , FREE= $114
      4  0aec					      ECHO	"ROM_SHADOW_SCREEN", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  0aec				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  0aec				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  0aec				  -	      ERR
      8  0aec					      endif
    333  0aec							;VALIDATE_RAM_SIZE
------- FILE ./chess.asm
------- FILE BANK_CHESS_INCLUDES.asm LEVEL 2 PASS 3
      0  0aec					      include	"BANK_CHESS_INCLUDES.asm"
      1  0aec							; Chess
      2  0aec							; Atari 2600 Chess display system
      3  0aec							; Copyright (c) 2019-2020 Andrew Davie
      4  0aec							; andrew@taswegian.com
      5  0aec
      6  0aec
      7  0aec							; Each piece is defined as 3 PF bytes (horizontal) x 24 scanlines (vertical)
      8  0aec							; The pieces are converted by ConvertChessPieces.py (in tools), which takes
      9  0aec							; a single gif of the format..
     10  0aec							; a row of white pieces on black squares
     11  0aec							; a row of white pieces on white squares
     12  0aec							; a row of black pieces on black squares
     13  0aec							; a row of black pieces on white squares
     14  0aec
     15  0aec							; each row has the pieces ordered thus:
     16  0aec							; a blank, then pawn, knight, bishop, rook, queen, king
     17  0aec							; each piece is 5 pixels wide x 8 pixels deep
     18  0aec							; each pixel is from an 8-colour palette.
     19  0aec							; Given a pixel colour 0-7 (represented in binary 000 - 111) then if the bits
     20  0aec							; for the colour are abc (i.e., colour #3 = binary 011 = bits 0bc)
     21  0aec							; then bit "a" becomes the first interleaved chronocolour pixel (line 1)
     22  0aec							; bit "b" becomes the second ICC pixel line (2)
     23  0aec							; bit "c" becomes the third ICC pixel line (3)
     24  0aec							; Thus, a 5 pxel x 8 pixel shape becomes 24 lines deep
     25  0aec							; The tool produces 4 variants of the piece; shifted into the 4 squares
     26  0aec							; in the PF - thus, at pixel 0, pixel 5, pixel 10, pixel 15.
     27  0aec							; These 4 shifted positions are stored consecutively in the shape definition
     28  0aec
     29  0aec							; Example...
     30  0aec							;DEF WHITE_BISHOP_on_BLACK_SQUARE_0
     31  0aec							;.byte $00,$40,$40,$40,$00,$00,$e0,$e0,$e0,$d0,$d0,$d0,$b0,$b0,$b0,$f0,$f0,$f0,$e0,$60,$e0,$f0,$f0,$f0 ;PF0
     32  0aec							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$80,$00,$80,$80,$00,$80,$00,$00,$00,$00,$80,$00 ;PF1
     33  0aec							;.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;PF2
     34  0aec
     35  0aec							; The above defines the three 24-byte vertical strips for the 3 PF bytes that
     36  0aec							; the piece (could) overlay. In this case, on square 0 (leftmost), it doesn't
     37  0aec							; actually have any data in PF1 or PF2.
     38  0aec
     39  0aec
     40  0aec
------- FILE piece_graphics.asm LEVEL 3 PASS 3
      0  0aec					      include	"piece_graphics.asm"
      1  0aec							; Import the graphics definitions generated by ConvertChessPieces.py
      0  0aec					      NEWBANK	PIECES_0
      1  17d8 ????				      SEG	PIECES_0
      2  1000					      ORG	ORIGIN
      3  1000					      RORG	$F000
      4  1000				   BANK_START SET	*
      5  1000				   PIECES_0   SET	ORIGIN / 2048
      6  1000				   ORIGIN     SET	ORIGIN + 2048
      7  1000				   _CURRENT_BANK SET	PIECES_0
      3  1000
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  1000					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_0.asm"
      0  1000					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_0", 72
     10  1000					      LIST	ON
      0  1000					      DEF	WHITE_BLANK_on_WHITE_SQUARE_0
      1  1000				   BANK_WHITE_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1000
      3  1000				   WHITE_BLANK_on_WHITE_SQUARE_0
      3  1000		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  1018		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  1030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  1048					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_1.asm"
      0  1048					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_1", 72
     10  1048					      LIST	ON
      0  1048					      DEF	WHITE_BLANK_on_WHITE_SQUARE_1
      1  1048				   BANK_WHITE_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1048
      3  1048				   WHITE_BLANK_on_WHITE_SQUARE_1
      3  1048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1060		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  1078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  1090					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_2.asm"
      0  1090					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_2", 72
     10  1090					      LIST	ON
      0  1090					      DEF	WHITE_BLANK_on_WHITE_SQUARE_2
      1  1090				   BANK_WHITE_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1090
      3  1090				   WHITE_BLANK_on_WHITE_SQUARE_2
      3  1090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  10a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  10c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  10d8					      include	"gfx/WHITE_BLANK_on_WHITE_SQUARE_3.asm"
      0  10d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1100					      LIST	ON
      0  1100					      DEF	WHITE_BLANK_on_WHITE_SQUARE_3
      1  1100				   BANK_WHITE_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1100
      3  1100				   WHITE_BLANK_on_WHITE_SQUARE_3
      3  1100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1130		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  1148					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_0.asm"
      0  1148					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_0", 72
     10  1148					      LIST	ON
      0  1148					      DEF	WHITE_PAWN_on_WHITE_SQUARE_0
      1  1148				   BANK_WHITE_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1148
      3  1148				   WHITE_PAWN_on_WHITE_SQUARE_0
      3  1148		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1160		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  1190					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_1.asm"
      0  1190					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_1", 72
     10  1190					      LIST	ON
      0  1190					      DEF	WHITE_PAWN_on_WHITE_SQUARE_1
      1  1190				   BANK_WHITE_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1190
      3  1190				   WHITE_PAWN_on_WHITE_SQUARE_1
      3  1190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  11a8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  11c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  11d8					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_2.asm"
      0  11d8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1200					      LIST	ON
      0  1200					      DEF	WHITE_PAWN_on_WHITE_SQUARE_2
      1  1200				   BANK_WHITE_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1200
      3  1200				   WHITE_PAWN_on_WHITE_SQUARE_2
      3  1200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1218		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1230		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  1248					      include	"gfx/WHITE_PAWN_on_WHITE_SQUARE_3.asm"
      0  1248					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_WHITE_SQUARE_3", 72
     10  1248					      LIST	ON
      0  1248					      DEF	WHITE_PAWN_on_WHITE_SQUARE_3
      1  1248				   BANK_WHITE_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1248
      3  1248				   WHITE_PAWN_on_WHITE_SQUARE_3
      3  1248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1278		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  1290					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  1290					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_0", 72
     10  1290					      LIST	ON
      0  1290					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_0
      1  1290				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1290
      3  1290				   WHITE_KNIGHT_on_WHITE_SQUARE_0
      3  1290		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  12a8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  12c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  12d8					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  12d8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1300					      LIST	ON
      0  1300					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_1
      1  1300				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1300
      3  1300				   WHITE_KNIGHT_on_WHITE_SQUARE_1
      3  1300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1318		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  1348					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  1348					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_2", 72
     10  1348					      LIST	ON
      0  1348					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_2
      1  1348				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1348
      3  1348				   WHITE_KNIGHT_on_WHITE_SQUARE_2
      3  1348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1360		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1378		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  1390					      include	"gfx/WHITE_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  1390					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_WHITE_SQUARE_3", 72
     10  1390					      LIST	ON
      0  1390					      DEF	WHITE_KNIGHT_on_WHITE_SQUARE_3
      1  1390				   BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1390
      3  1390				   WHITE_KNIGHT_on_WHITE_SQUARE_3
      3  1390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  13a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  13c0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  13d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_0.asm"
      0  13d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1400					      LIST	ON
      0  1400					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_0
      1  1400				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1400
      3  1400				   WHITE_BISHOP_on_WHITE_SQUARE_0
      3  1400		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$40,$20,$00,$00,$00	;PF0
      4  1418		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  1448					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_1.asm"
      0  1448					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_1", 72
     10  1448					      LIST	ON
      0  1448					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_1
      1  1448				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1448
      3  1448				   WHITE_BISHOP_on_WHITE_SQUARE_1
      3  1448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1460		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$10,$20,$00,$00,$00	;PF1
      5  1478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  1490					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_2.asm"
      0  1490					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_2", 72
     10  1490					      LIST	ON
      0  1490					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_2
      1  1490				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1490
      3  1490				   WHITE_BISHOP_on_WHITE_SQUARE_2
      3  1490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  14a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00	;PF1
      5  14c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  14d8					      include	"gfx/WHITE_BISHOP_on_WHITE_SQUARE_3.asm"
      0  14d8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1500					      LIST	ON
      0  1500					      DEF	WHITE_BISHOP_on_WHITE_SQUARE_3
      1  1500				   BANK_WHITE_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1500
      3  1500				   WHITE_BISHOP_on_WHITE_SQUARE_3
      3  1500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1530		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$20,$10,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  1548					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_0.asm"
      0  1548					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_0", 72
     10  1548					      LIST	ON
      0  1548					      DEF	WHITE_ROOK_on_WHITE_SQUARE_0
      1  1548				   BANK_WHITE_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1548
      3  1548				   WHITE_ROOK_on_WHITE_SQUARE_0
      3  1548		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1560		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  1590					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_1.asm"
      0  1590					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_1", 72
     10  1590					      LIST	ON
      0  1590					      DEF	WHITE_ROOK_on_WHITE_SQUARE_1
      1  1590				   BANK_WHITE_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1590
      3  1590				   WHITE_ROOK_on_WHITE_SQUARE_1
      3  1590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  15a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  15c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  15d8					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_2.asm"
      0  15d8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1600					      LIST	ON
      0  1600					      DEF	WHITE_ROOK_on_WHITE_SQUARE_2
      1  1600				   BANK_WHITE_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1600
      3  1600				   WHITE_ROOK_on_WHITE_SQUARE_2
      3  1600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1618		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1630		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  1648					      include	"gfx/WHITE_ROOK_on_WHITE_SQUARE_3.asm"
      0  1648					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_WHITE_SQUARE_3", 72
     10  1648					      LIST	ON
      0  1648					      DEF	WHITE_ROOK_on_WHITE_SQUARE_3
      1  1648				   BANK_WHITE_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1648
      3  1648				   WHITE_ROOK_on_WHITE_SQUARE_3
      3  1648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1678		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  1690					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_0.asm"
      0  1690					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_0", 72
     10  1690					      LIST	ON
      0  1690					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_0
      1  1690				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1690
      3  1690				   WHITE_QUEEN_on_WHITE_SQUARE_0
      3  1690		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  16a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  16c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  16d8					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_1.asm"
      0  16d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1700					      LIST	ON
      0  1700					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_1
      1  1700				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1700
      3  1700				   WHITE_QUEEN_on_WHITE_SQUARE_1
      3  1700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1718		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  1748					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_2.asm"
      0  1748					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_2", 72
     10  1748					      LIST	ON
      0  1748					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_2
      1  1748				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1748
      3  1748				   WHITE_QUEEN_on_WHITE_SQUARE_2
      3  1748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1760		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1778		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  1790					      include	"gfx/WHITE_QUEEN_on_WHITE_SQUARE_3.asm"
      0  1790					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_WHITE_SQUARE_3", 72
     10  1790					      LIST	ON
      0  1790					      DEF	WHITE_QUEEN_on_WHITE_SQUARE_3
      1  1790				   BANK_WHITE_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1790
      3  1790				   WHITE_QUEEN_on_WHITE_SQUARE_3
      3  1790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  17a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  17c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  17d8					      CHECK_BANK_SIZE	"PIECE_0 (2K)"
      1  17d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_0 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  17d8					      ECHO	"PIECE_0 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  17d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  17d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  17d8				  -	      ERR
      6  17d8					      endif
      0  17d8					      NEWBANK	PIECES_1
      1  1fd8 ????				      SEG	PIECES_1
      2  1800					      ORG	ORIGIN
      3  1800					      RORG	$F000
      4  1800				   BANK_START SET	*
      5  1800				   PIECES_1   SET	ORIGIN / 2048
      6  1800				   ORIGIN     SET	ORIGIN + 2048
      7  1800				   _CURRENT_BANK SET	PIECES_1
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  1800					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_0.asm"
      0  1800					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_0", 72
     10  1800					      LIST	ON
      0  1800					      DEF	WHITE_KING_on_WHITE_SQUARE_0
      1  1800				   BANK_WHITE_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  1800
      3  1800				   WHITE_KING_on_WHITE_SQUARE_0
      3  1800		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$00,$a0,$a0,$40,$00,$00	;PF0
      4  1818		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  1848					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_1.asm"
      0  1848					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_1", 72
     10  1848					      LIST	ON
      0  1848					      DEF	WHITE_KING_on_WHITE_SQUARE_1
      1  1848				   BANK_WHITE_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  1848
      3  1848				   WHITE_KING_on_WHITE_SQUARE_1
      3  1848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1860		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$00,$28,$28,$10,$00,$00	;PF1
      5  1878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  1890					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_2.asm"
      0  1890					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_2", 72
     10  1890					      LIST	ON
      0  1890					      DEF	WHITE_KING_on_WHITE_SQUARE_2
      1  1890				   BANK_WHITE_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  1890
      3  1890				   WHITE_KING_on_WHITE_SQUARE_2
      3  1890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  18a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF1
      5  18c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$00,$02,$02,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  18d8					      include	"gfx/WHITE_KING_on_WHITE_SQUARE_3.asm"
      0  18d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  1900					      LIST	ON
      0  1900					      DEF	WHITE_KING_on_WHITE_SQUARE_3
      1  1900				   BANK_WHITE_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  1900
      3  1900				   WHITE_KING_on_WHITE_SQUARE_3
      3  1900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1930		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$00,$50,$50,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  1948					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_0.asm"
      0  1948					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_0", 72
     10  1948					      LIST	ON
      0  1948					      DEF	WHITE_BLANK_on_BLACK_SQUARE_0
      1  1948				   BANK_WHITE_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1948
      3  1948				   WHITE_BLANK_on_BLACK_SQUARE_0
      3  1948		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  1990					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_1.asm"
      0  1990					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_1", 72
     10  1990					      LIST	ON
      0  1990					      DEF	WHITE_BLANK_on_BLACK_SQUARE_1
      1  1990				   BANK_WHITE_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1990
      3  1990				   WHITE_BLANK_on_BLACK_SQUARE_1
      3  1990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  19a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  19c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  19d8					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_2.asm"
      0  19d8					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BLANK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  1a00					      LIST	ON
      0  1a00					      DEF	WHITE_BLANK_on_BLACK_SQUARE_2
      1  1a00				   BANK_WHITE_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1a00
      3  1a00				   WHITE_BLANK_on_BLACK_SQUARE_2
      3  1a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  1a48					      include	"gfx/WHITE_BLANK_on_BLACK_SQUARE_3.asm"
      0  1a48					      OPTIONAL_PAGEBREAK	"WHITE_BLANK_on_BLACK_SQUARE_3", 72
     10  1a48					      LIST	ON
      0  1a48					      DEF	WHITE_BLANK_on_BLACK_SQUARE_3
      1  1a48				   BANK_WHITE_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1a48
      3  1a48				   WHITE_BLANK_on_BLACK_SQUARE_3
      3  1a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1a78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  1a90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_0.asm"
      0  1a90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_0", 72
     10  1a90					      LIST	ON
      0  1a90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_0
      1  1a90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1a90
      3  1a90				   WHITE_PAWN_on_BLACK_SQUARE_0
      3  1a90		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00,$00,$e0,$40,$40,$e0,$00,$40,$00	;PF0
      4  1aa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  1ad8					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_1.asm"
      0  1ad8					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_PAWN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  1b00					      LIST	ON
      0  1b00					      DEF	WHITE_PAWN_on_BLACK_SQUARE_1
      1  1b00				   BANK_WHITE_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1b00
      3  1b00				   WHITE_PAWN_on_BLACK_SQUARE_1
      3  1b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b18		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00,$00,$38,$10,$10,$38,$00,$10,$00	;PF1
      5  1b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  1b48					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_2.asm"
      0  1b48					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_2", 72
     10  1b48					      LIST	ON
      0  1b48					      DEF	WHITE_PAWN_on_BLACK_SQUARE_2
      1  1b48				   BANK_WHITE_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1b48
      3  1b48				   WHITE_PAWN_on_BLACK_SQUARE_2
      3  1b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1b60		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00	;PF1
      5  1b78		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00,$00,$03,$01,$01,$03,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  1b90					      include	"gfx/WHITE_PAWN_on_BLACK_SQUARE_3.asm"
      0  1b90					      OPTIONAL_PAGEBREAK	"WHITE_PAWN_on_BLACK_SQUARE_3", 72
     10  1b90					      LIST	ON
      0  1b90					      DEF	WHITE_PAWN_on_BLACK_SQUARE_3
      1  1b90				   BANK_WHITE_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1b90
      3  1b90				   WHITE_PAWN_on_BLACK_SQUARE_3
      3  1b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1bc0		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00,$00,$70,$20,$20,$70,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  1bd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  1bd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  1c00					      LIST	ON
      0  1c00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_0
      1  1c00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1c00
      3  1c00				   WHITE_KNIGHT_on_BLACK_SQUARE_0
      3  1c00		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$70,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$e0,$f0,$f0,$40,$00	;PF0
      4  1c18		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  1c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  1c48					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  1c48					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_1", 72
     10  1c48					      LIST	ON
      0  1c48					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_1
      1  1c48				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1c48
      3  1c48				   WHITE_KNIGHT_on_BLACK_SQUARE_1
      3  1c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1c60		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$70,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$3c,$7c,$7c,$14,$00	;PF1
      5  1c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  1c90					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  1c90					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_2", 72
     10  1c90					      LIST	ON
      0  1c90					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_2
      1  1c90				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1c90
      3  1c90				   WHITE_KNIGHT_on_BLACK_SQUARE_2
      3  1c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1ca8		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$01,$03,$03,$00,$00	;PF1
      5  1cc0		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$01,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  1cd8					      include	"gfx/WHITE_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  1cd8					      OPTIONAL_PAGEBREAK	"WHITE_KNIGHT_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_KNIGHT_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  1d00					      LIST	ON
      0  1d00					      DEF	WHITE_KNIGHT_on_BLACK_SQUARE_3
      1  1d00				   BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1d00
      3  1d00				   WHITE_KNIGHT_on_BLACK_SQUARE_3
      3  1d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1d30		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$38,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$f0,$f8,$f8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  1d48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_0.asm"
      0  1d48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_0", 72
     10  1d48					      LIST	ON
      0  1d48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_0
      1  1d48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1d48
      3  1d48				   WHITE_BISHOP_on_BLACK_SQUARE_0
      3  1d48		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$b0,$d0,$e0,$40,$40	;PF0
      4  1d60		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  1d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  1d90					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_1.asm"
      0  1d90					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_1", 72
     10  1d90					      LIST	ON
      0  1d90					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_1
      1  1d90				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1d90
      3  1d90				   WHITE_BISHOP_on_BLACK_SQUARE_1
      3  1d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1da8		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$6c,$5c,$38,$10,$10	;PF1
      5  1dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  1dd8					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_2.asm"
      0  1dd8					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_BISHOP_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  1e00					      LIST	ON
      0  1e00					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_2
      1  1e00				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1e00
      3  1e00				   WHITE_BISHOP_on_BLACK_SQUARE_2
      3  1e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e18		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00	;PF1
      5  1e30		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$06,$07,$03,$01,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  1e48					      include	"gfx/WHITE_BISHOP_on_BLACK_SQUARE_3.asm"
      0  1e48					      OPTIONAL_PAGEBREAK	"WHITE_BISHOP_on_BLACK_SQUARE_3", 72
     10  1e48					      LIST	ON
      0  1e48					      DEF	WHITE_BISHOP_on_BLACK_SQUARE_3
      1  1e48				   BANK_WHITE_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1e48
      3  1e48				   WHITE_BISHOP_on_BLACK_SQUARE_3
      3  1e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1e78		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$d8,$e8,$70,$20,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  1e90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_0.asm"
      0  1e90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_0", 72
     10  1e90					      LIST	ON
      0  1e90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_0
      1  1e90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  1e90
      3  1e90				   WHITE_ROOK_on_BLACK_SQUARE_0
      3  1e90		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$f0,$50,$00	;PF0
      4  1ea8		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  1ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  1ed8					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_1.asm"
      0  1ed8					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_ROOK_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  1f00					      LIST	ON
      0  1f00					      DEF	WHITE_ROOK_on_BLACK_SQUARE_1
      1  1f00				   BANK_WHITE_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  1f00
      3  1f00				   WHITE_ROOK_on_BLACK_SQUARE_1
      3  1f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f18		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$7c,$54,$00	;PF1
      5  1f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  1f48					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_2.asm"
      0  1f48					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_2", 72
     10  1f48					      LIST	ON
      0  1f48					      DEF	WHITE_ROOK_on_BLACK_SQUARE_2
      1  1f48				   BANK_WHITE_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  1f48
      3  1f48				   WHITE_ROOK_on_BLACK_SQUARE_2
      3  1f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1f60		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$03,$02,$00	;PF1
      5  1f78		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$07,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  1f90					      include	"gfx/WHITE_ROOK_on_BLACK_SQUARE_3.asm"
      0  1f90					      OPTIONAL_PAGEBREAK	"WHITE_ROOK_on_BLACK_SQUARE_3", 72
     10  1f90					      LIST	ON
      0  1f90					      DEF	WHITE_ROOK_on_BLACK_SQUARE_3
      1  1f90				   BANK_WHITE_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  1f90
      3  1f90				   WHITE_ROOK_on_BLACK_SQUARE_3
      3  1f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  1fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  1fc0		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$f8,$a8,$00	;PF2
------- FILE piece_graphics.asm
      0  1fd8					      CHECK_BANK_SIZE	"PIECE_1 (2K)"
      1  1fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_1 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  1fd8					      ECHO	"PIECE_1 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  1fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  1fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  1fd8				  -	      ERR
      6  1fd8					      endif
      0  1fd8					      NEWBANK	PIECES_2
      1  27d8 ????				      SEG	PIECES_2
      2  2000					      ORG	ORIGIN
      3  2000					      RORG	$F000
      4  2000				   BANK_START SET	*
      5  2000				   PIECES_2   SET	ORIGIN / 2048
      6  2000				   ORIGIN     SET	ORIGIN + 2048
      7  2000				   _CURRENT_BANK SET	PIECES_2
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  2000					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_0.asm"
      0  2000					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_0", 72
     10  2000					      LIST	ON
      0  2000					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_0
      1  2000				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2000
      3  2000				   WHITE_QUEEN_on_BLACK_SQUARE_0
      3  2000		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00,$80,$00	;PF1
      5  2030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  2048					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_1.asm"
      0  2048					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_1", 72
     10  2048					      LIST	ON
      0  2048					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_1
      1  2048				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2048
      3  2048				   WHITE_QUEEN_on_BLACK_SQUARE_1
      3  2048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2060		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$7c,$7c,$54,$00,$54,$00	;PF1
      5  2078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  2090					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_2.asm"
      0  2090					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_2", 72
     10  2090					      LIST	ON
      0  2090					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_2
      1  2090				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2090
      3  2090				   WHITE_QUEEN_on_BLACK_SQUARE_2
      3  2090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  20a8		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  20c0		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$07,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  20d8					      include	"gfx/WHITE_QUEEN_on_BLACK_SQUARE_3.asm"
      0  20d8					      OPTIONAL_PAGEBREAK	"WHITE_QUEEN_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  WHITE_QUEEN_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2100					      LIST	ON
      0  2100					      DEF	WHITE_QUEEN_on_BLACK_SQUARE_3
      1  2100				   BANK_WHITE_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2100
      3  2100				   WHITE_QUEEN_on_BLACK_SQUARE_3
      3  2100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2130		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$f8,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  2148					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_0.asm"
      0  2148					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_0", 72
     10  2148					      LIST	ON
      0  2148					      DEF	WHITE_KING_on_BLACK_SQUARE_0
      1  2148				   BANK_WHITE_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2148
      3  2148				   WHITE_KING_on_BLACK_SQUARE_0
      3  2148		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$00,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$f0,$50,$50,$b0,$e0,$40	;PF0
      4  2160		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$00,$00	;PF1
      5  2178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  2190					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_1.asm"
      0  2190					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_1", 72
     10  2190					      LIST	ON
      0  2190					      DEF	WHITE_KING_on_BLACK_SQUARE_1
      1  2190				   BANK_WHITE_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2190
      3  2190				   WHITE_KING_on_BLACK_SQUARE_1
      3  2190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  21a8		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$00,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$7c,$54,$54,$6c,$38,$10	;PF1
      5  21c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  21d8					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_2.asm"
      0  21d8					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_KING_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2200					      LIST	ON
      0  2200					      DEF	WHITE_KING_on_BLACK_SQUARE_2
      1  2200				   BANK_WHITE_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2200
      3  2200				   WHITE_KING_on_BLACK_SQUARE_2
      3  2200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2218		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$03,$02,$02,$03,$01,$00	;PF1
      5  2230		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$00,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$07,$05,$05,$06,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  2248					      include	"gfx/WHITE_KING_on_BLACK_SQUARE_3.asm"
      0  2248					      OPTIONAL_PAGEBREAK	"WHITE_KING_on_BLACK_SQUARE_3", 72
     10  2248					      LIST	ON
      0  2248					      DEF	WHITE_KING_on_BLACK_SQUARE_3
      1  2248				   BANK_WHITE_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2248
      3  2248				   WHITE_KING_on_BLACK_SQUARE_3
      3  2248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2278		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$00,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$f8,$a8,$a8,$d8,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  2290					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_0.asm"
      0  2290					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_0", 72
     10  2290					      LIST	ON
      0  2290					      DEF	BLACK_BLANK_on_WHITE_SQUARE_0
      1  2290				   BANK_BLACK_BLANK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2290
      3  2290				   BLACK_BLANK_on_WHITE_SQUARE_0
      3  2290		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0	;PF0
      4  22a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$80,$80	;PF1
      5  22c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  22d8					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_1.asm"
      0  22d8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2300					      LIST	ON
      0  2300					      DEF	BLACK_BLANK_on_WHITE_SQUARE_1
      1  2300				   BANK_BLACK_BLANK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2300
      3  2300				   BLACK_BLANK_on_WHITE_SQUARE_1
      3  2300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2318		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7c,$7c,$7c,$7c,$7c,$7c,$7c,$7c	;PF1
      5  2330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  2348					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_2.asm"
      0  2348					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_2", 72
     10  2348					      LIST	ON
      0  2348					      DEF	BLACK_BLANK_on_WHITE_SQUARE_2
      1  2348				   BANK_BLACK_BLANK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2348
      3  2348				   BLACK_BLANK_on_WHITE_SQUARE_2
      3  2348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2360		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$03,$03,$03,$03	;PF1
      5  2378		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  2390					      include	"gfx/BLACK_BLANK_on_WHITE_SQUARE_3.asm"
      0  2390					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_WHITE_SQUARE_3", 72
     10  2390					      LIST	ON
      0  2390					      DEF	BLACK_BLANK_on_WHITE_SQUARE_3
      1  2390				   BANK_BLACK_BLANK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2390
      3  2390				   BLACK_BLANK_on_WHITE_SQUARE_3
      3  2390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  23a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  23c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  23d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_0.asm"
      0  23d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2400					      LIST	ON
      0  2400					      DEF	BLACK_PAWN_on_WHITE_SQUARE_0
      1  2400				   BANK_BLACK_PAWN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2400
      3  2400				   BLACK_PAWN_on_WHITE_SQUARE_0
      3  2400		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$00,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00	;PF0
      4  2418		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  2448					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_1.asm"
      0  2448					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_1", 72
     10  2448					      LIST	ON
      0  2448					      DEF	BLACK_PAWN_on_WHITE_SQUARE_1
      1  2448				   BANK_BLACK_PAWN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2448
      3  2448				   BLACK_PAWN_on_WHITE_SQUARE_1
      3  2448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2460		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$00,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00	;PF1
      5  2478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  2490					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_2.asm"
      0  2490					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_2", 72
     10  2490					      LIST	ON
      0  2490					      DEF	BLACK_PAWN_on_WHITE_SQUARE_2
      1  2490				   BANK_BLACK_PAWN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2490
      3  2490				   BLACK_PAWN_on_WHITE_SQUARE_2
      3  2490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  24a8		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00	;PF1
      5  24c0		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$00,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  24d8					      include	"gfx/BLACK_PAWN_on_WHITE_SQUARE_3.asm"
      0  24d8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2500					      LIST	ON
      0  2500					      DEF	BLACK_PAWN_on_WHITE_SQUARE_3
      1  2500				   BANK_BLACK_PAWN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2500
      3  2500				   BLACK_PAWN_on_WHITE_SQUARE_3
      3  2500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2530		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$00,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  2548					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_0.asm"
      0  2548					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_0", 72
     10  2548					      LIST	ON
      0  2548					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_0
      1  2548				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2548
      3  2548				   BLACK_KNIGHT_on_WHITE_SQUARE_0
      3  2548		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00	;PF0
      4  2560		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$80,$00,$00,$80,$80,$80,$80,$00	;PF1
      5  2578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  2590					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_1.asm"
      0  2590					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_1", 72
     10  2590					      LIST	ON
      0  2590					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_1
      1  2590				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2590
      3  2590				   BLACK_KNIGHT_on_WHITE_SQUARE_1
      3  2590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  25a8		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$78,$38,$18,$78,$68,$14,$00,$7c,$78,$38,$1c,$7c,$6c,$14,$00	;PF1
      5  25c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  25d8					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_2.asm"
      0  25d8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2600					      LIST	ON
      0  2600					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_2
      1  2600				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2600
      3  2600				   BLACK_KNIGHT_on_WHITE_SQUARE_2
      3  2600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2618		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00	;PF1
      5  2630		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$03,$03,$03,$03,$02,$05,$00,$07,$03,$03,$07,$07,$06,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  2648					      include	"gfx/BLACK_KNIGHT_on_WHITE_SQUARE_3.asm"
      0  2648					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_WHITE_SQUARE_3", 72
     10  2648					      LIST	ON
      0  2648					      DEF	BLACK_KNIGHT_on_WHITE_SQUARE_3
      1  2648				   BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2648
      3  2648				   BLACK_KNIGHT_on_WHITE_SQUARE_3
      3  2648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2678		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$78,$70,$60,$78,$58,$a0,$00,$f8,$78,$70,$e0,$f8,$d8,$a0,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  2690					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_0.asm"
      0  2690					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_0", 72
     10  2690					      LIST	ON
      0  2690					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_0
      1  2690				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2690
      3  2690				   BLACK_BISHOP_on_WHITE_SQUARE_0
      3  2690		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$f0,$e0,$f0,$f0,$f0,$e0,$00,$40	;PF0
      4  26a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$80,$80,$00,$00,$00	;PF1
      5  26c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  26d8					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_1.asm"
      0  26d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2700					      LIST	ON
      0  2700					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_1
      1  2700				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2700
      3  2700				   BLACK_BISHOP_on_WHITE_SQUARE_1
      3  2700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2718		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$7c,$38,$78,$7c,$7c,$38,$00,$10	;PF1
      5  2730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  2748					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_2.asm"
      0  2748					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_2", 72
     10  2748					      LIST	ON
      0  2748					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_2
      1  2748				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2748
      3  2748				   BLACK_BISHOP_on_WHITE_SQUARE_2
      3  2748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2760		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$03,$01,$00,$00	;PF1
      5  2778		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$07,$03,$03,$07,$07,$03,$00,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  2790					      include	"gfx/BLACK_BISHOP_on_WHITE_SQUARE_3.asm"
      0  2790					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_WHITE_SQUARE_3", 72
     10  2790					      LIST	ON
      0  2790					      DEF	BLACK_BISHOP_on_WHITE_SQUARE_3
      1  2790				   BANK_BLACK_BISHOP_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2790
      3  2790				   BLACK_BISHOP_on_WHITE_SQUARE_3
      3  2790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  27a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  27c0		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$f8,$70,$78,$f8,$f8,$70,$00,$20	;PF2
------- FILE piece_graphics.asm
      0  27d8					      CHECK_BANK_SIZE	"PIECE_2 (2K)"
      1  27d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECE_2 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  27d8					      ECHO	"PIECE_2 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  27d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  27d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  27d8				  -	      ERR
      6  27d8					      endif
      0  27d8					      NEWBANK	PIECES_3
      1  2fd8 ????				      SEG	PIECES_3
      2  2800					      ORG	ORIGIN
      3  2800					      RORG	$F000
      4  2800				   BANK_START SET	*
      5  2800				   PIECES_3   SET	ORIGIN / 2048
      6  2800				   ORIGIN     SET	ORIGIN + 2048
      7  2800				   _CURRENT_BANK SET	PIECES_3
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  2800					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_0.asm"
      0  2800					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_0", 72
     10  2800					      LIST	ON
      0  2800					      DEF	BLACK_ROOK_on_WHITE_SQUARE_0
      1  2800				   BANK_BLACK_ROOK_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2800
      3  2800				   BLACK_ROOK_on_WHITE_SQUARE_0
      3  2800		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$f0,$e0,$e0,$e0,$f0,$50,$50,$00	;PF0
      4  2818		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$80,$80,$80,$00	;PF1
      5  2830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  2848					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_1.asm"
      0  2848					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_1", 72
     10  2848					      LIST	ON
      0  2848					      DEF	BLACK_ROOK_on_WHITE_SQUARE_1
      1  2848				   BANK_BLACK_ROOK_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2848
      3  2848				   BLACK_ROOK_on_WHITE_SQUARE_1
      3  2848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2860		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$7c,$38,$38,$38,$7c,$54,$54,$00	;PF1
      5  2878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  2890					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_2.asm"
      0  2890					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_2", 72
     10  2890					      LIST	ON
      0  2890					      DEF	BLACK_ROOK_on_WHITE_SQUARE_2
      1  2890				   BANK_BLACK_ROOK_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2890
      3  2890				   BLACK_ROOK_on_WHITE_SQUARE_2
      3  2890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  28a8		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$03,$01,$01,$01,$03,$02,$02,$00	;PF1
      5  28c0		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$07,$03,$03,$03,$07,$05,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  28d8					      include	"gfx/BLACK_ROOK_on_WHITE_SQUARE_3.asm"
      0  28d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_WHITE_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_WHITE_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  2900					      LIST	ON
      0  2900					      DEF	BLACK_ROOK_on_WHITE_SQUARE_3
      1  2900				   BANK_BLACK_ROOK_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2900
      3  2900				   BLACK_ROOK_on_WHITE_SQUARE_3
      3  2900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2930		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$f8,$70,$70,$70,$f8,$a8,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  2948					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_0.asm"
      0  2948					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_0", 72
     10  2948					      LIST	ON
      0  2948					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_0
      1  2948				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2948
      3  2948				   BLACK_QUEEN_on_WHITE_SQUARE_0
      3  2948		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$e0,$e0,$f0,$f0,$50,$00,$50,$00	;PF0
      4  2960		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$80,$80,$00,$80,$00	;PF1
      5  2978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  2990					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_1.asm"
      0  2990					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_1", 72
     10  2990					      LIST	ON
      0  2990					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_1
      1  2990				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2990
      3  2990				   BLACK_QUEEN_on_WHITE_SQUARE_1
      3  2990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  29a8		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$38,$38,$78,$7c,$54,$00,$54,$00	;PF1
      5  29c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  29d8					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_2.asm"
      0  29d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  2a00					      LIST	ON
      0  2a00					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_2
      1  2a00				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2a00
      3  2a00				   BLACK_QUEEN_on_WHITE_SQUARE_2
      3  2a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a18		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$01,$01,$03,$03,$02,$00,$02,$00	;PF1
      5  2a30		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$03,$03,$03,$07,$05,$00,$05,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  2a48					      include	"gfx/BLACK_QUEEN_on_WHITE_SQUARE_3.asm"
      0  2a48					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_WHITE_SQUARE_3", 72
     10  2a48					      LIST	ON
      0  2a48					      DEF	BLACK_QUEEN_on_WHITE_SQUARE_3
      1  2a48				   BANK_BLACK_QUEEN_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2a48
      3  2a48				   BLACK_QUEEN_on_WHITE_SQUARE_3
      3  2a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2a78		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$70,$70,$78,$f8,$a8,$00,$a8,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  2a90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_0.asm"
      0  2a90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_0", 72
     10  2a90					      LIST	ON
      0  2a90					      DEF	BLACK_KING_on_WHITE_SQUARE_0
      1  2a90				   BANK_BLACK_KING_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  2a90
      3  2a90				   BLACK_KING_on_WHITE_SQUARE_0
      3  2a90		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$e0,$e0,$50,$f0,$f0,$40,$e0,$40	;PF0
      4  2aa8		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$80,$00,$00,$00	;PF1
      5  2ac0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  2ad8					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_1.asm"
      0  2ad8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  2b00					      LIST	ON
      0  2b00					      DEF	BLACK_KING_on_WHITE_SQUARE_1
      1  2b00				   BANK_BLACK_KING_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  2b00
      3  2b00				   BLACK_KING_on_WHITE_SQUARE_1
      3  2b00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b18		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$38,$38,$54,$7c,$7c,$10,$38,$10	;PF1
      5  2b30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  2b48					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_2.asm"
      0  2b48					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_2", 72
     10  2b48					      LIST	ON
      0  2b48					      DEF	BLACK_KING_on_WHITE_SQUARE_2
      1  2b48				   BANK_BLACK_KING_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  2b48
      3  2b48				   BLACK_KING_on_WHITE_SQUARE_2
      3  2b48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2b60		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$01,$01,$02,$03,$03,$00,$01,$00	;PF1
      5  2b78		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$03,$03,$05,$07,$07,$01,$03,$01	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  2b90					      include	"gfx/BLACK_KING_on_WHITE_SQUARE_3.asm"
      0  2b90					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_WHITE_SQUARE_3", 72
     10  2b90					      LIST	ON
      0  2b90					      DEF	BLACK_KING_on_WHITE_SQUARE_3
      1  2b90				   BANK_BLACK_KING_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  2b90
      3  2b90				   BLACK_KING_on_WHITE_SQUARE_3
      3  2b90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ba8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2bc0		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$70,$70,$a8,$f8,$f8,$20,$70,$20	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  2bd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_0.asm"
      0  2bd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  2c00					      LIST	ON
      0  2c00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_0
      1  2c00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2c00
      3  2c00				   BLACK_BLANK_on_BLACK_SQUARE_0
      3  2c00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  2c48					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_1.asm"
      0  2c48					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_1", 72
     10  2c48					      LIST	ON
      0  2c48					      DEF	BLACK_BLANK_on_BLACK_SQUARE_1
      1  2c48				   BANK_BLACK_BLANK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2c48
      3  2c48				   BLACK_BLANK_on_BLACK_SQUARE_1
      3  2c48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2c60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2c78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  2c90					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_2.asm"
      0  2c90					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_2", 72
     10  2c90					      LIST	ON
      0  2c90					      DEF	BLACK_BLANK_on_BLACK_SQUARE_2
      1  2c90				   BANK_BLACK_BLANK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2c90
      3  2c90				   BLACK_BLANK_on_BLACK_SQUARE_2
      3  2c90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2ca8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2cc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  2cd8					      include	"gfx/BLACK_BLANK_on_BLACK_SQUARE_3.asm"
      0  2cd8					      OPTIONAL_PAGEBREAK	"BLACK_BLANK_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BLANK_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  2d00					      LIST	ON
      0  2d00					      DEF	BLACK_BLANK_on_BLACK_SQUARE_3
      1  2d00				   BANK_BLACK_BLANK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2d00
      3  2d00				   BLACK_BLANK_on_BLACK_SQUARE_3
      3  2d00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  2d48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_0.asm"
      0  2d48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_0", 72
     10  2d48					      LIST	ON
      0  2d48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_0
      1  2d48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2d48
      3  2d48				   BLACK_PAWN_on_BLACK_SQUARE_0
      3  2d48		       e0 e0 40 40*	      .byte.b	$e0,$e0,$40,$40,$00,$40,$40,$00,$00,$e0,$40,$40,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2d60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2d78		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  2d90					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_1.asm"
      0  2d90					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_1", 72
     10  2d90					      LIST	ON
      0  2d90					      DEF	BLACK_PAWN_on_BLACK_SQUARE_1
      1  2d90				   BANK_BLACK_PAWN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2d90
      3  2d90				   BLACK_PAWN_on_BLACK_SQUARE_1
      3  2d90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2da8		       38 38 10 10*	      .byte.b	$38,$38,$10,$10,$00,$10,$10,$00,$00,$38,$10,$10,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2dc0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  2dd8					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_2.asm"
      0  2dd8					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_PAWN_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  2e00					      LIST	ON
      0  2e00					      DEF	BLACK_PAWN_on_BLACK_SQUARE_2
      1  2e00				   BANK_BLACK_PAWN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2e00
      3  2e00				   BLACK_PAWN_on_BLACK_SQUARE_2
      3  2e00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e18		       01 01 00 00*	      .byte.b	$01,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e30		       03 03 01 01*	      .byte.b	$03,$03,$01,$01,$00,$01,$01,$00,$00,$03,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  2e48					      include	"gfx/BLACK_PAWN_on_BLACK_SQUARE_3.asm"
      0  2e48					      OPTIONAL_PAGEBREAK	"BLACK_PAWN_on_BLACK_SQUARE_3", 72
     10  2e48					      LIST	ON
      0  2e48					      DEF	BLACK_PAWN_on_BLACK_SQUARE_3
      1  2e48				   BANK_BLACK_PAWN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2e48
      3  2e48				   BLACK_PAWN_on_BLACK_SQUARE_3
      3  2e48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2e60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2e78		       70 70 20 20*	      .byte.b	$70,$70,$20,$20,$00,$20,$20,$00,$00,$70,$20,$20,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  2e90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_0.asm"
      0  2e90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_0", 72
     10  2e90					      LIST	ON
      0  2e90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_0
      1  2e90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  2e90
      3  2e90				   BLACK_KNIGHT_on_BLACK_SQUARE_0
      3  2e90		       f0 f0 e0 f0*	      .byte.b	$f0,$f0,$e0,$f0,$f0,$a0,$40,$00,$f0,$f0,$e0,$c0,$f0,$b0,$40,$00,$00,$00,$00,$20,$00,$40,$00,$00	;PF0
      4  2ea8		       80 00 80 80*	      .byte.b	$80,$00,$80,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2ec0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  2ed8					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_1.asm"
      0  2ed8					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_KNIGHT_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  2f00					      LIST	ON
      0  2f00					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_1
      1  2f00				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  2f00
      3  2f00				   BLACK_KNIGHT_on_BLACK_SQUARE_1
      3  2f00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f18		       7c 78 3c 7c*	      .byte.b	$7c,$78,$3c,$7c,$7c,$2c,$14,$00,$7c,$78,$38,$18,$78,$68,$14,$00,$00,$00,$00,$20,$00,$10,$00,$00	;PF1
      5  2f30		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  2f48					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_2.asm"
      0  2f48					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_2", 72
     10  2f48					      LIST	ON
      0  2f48					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_2
      1  2f48				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  2f48
      3  2f48				   BLACK_KNIGHT_on_BLACK_SQUARE_2
      3  2f48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2f60		       03 03 01 03*	      .byte.b	$03,$03,$01,$03,$03,$01,$00,$00,$03,$03,$01,$00,$03,$03,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00	;PF1
      5  2f78		       07 03 07 07*	      .byte.b	$07,$03,$07,$07,$07,$06,$05,$00,$07,$03,$03,$03,$03,$02,$05,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  2f90					      include	"gfx/BLACK_KNIGHT_on_BLACK_SQUARE_3.asm"
      0  2f90					      OPTIONAL_PAGEBREAK	"BLACK_KNIGHT_on_BLACK_SQUARE_3", 72
     10  2f90					      LIST	ON
      0  2f90					      DEF	BLACK_KNIGHT_on_BLACK_SQUARE_3
      1  2f90				   BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  2f90
      3  2f90				   BLACK_KNIGHT_on_BLACK_SQUARE_3
      3  2f90		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  2fa8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  2fc0		       f8 78 f0 f8*	      .byte.b	$f8,$78,$f0,$f8,$f8,$d0,$a0,$00,$f8,$78,$70,$60,$78,$58,$a0,$00,$00,$00,$00,$10,$00,$20,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  2fd8					      CHECK_BANK_SIZE	"PIECES_3 (2K)"
      1  2fd8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_3 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  2fd8					      ECHO	"PIECES_3 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  2fd8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  2fd8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  2fd8				  -	      ERR
      6  2fd8					      endif
      0  2fd8					      NEWBANK	PIECES_4
      1  37d8 ????				      SEG	PIECES_4
      2  3000					      ORG	ORIGIN
      3  3000					      RORG	$F000
      4  3000				   BANK_START SET	*
      5  3000				   PIECES_4   SET	ORIGIN / 2048
      6  3000				   ORIGIN     SET	ORIGIN + 2048
      7  3000				   _CURRENT_BANK SET	PIECES_4
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  3000					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_0.asm"
      0  3000					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_0", 72
     10  3000					      LIST	ON
      0  3000					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_0
      1  3000				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3000
      3  3000				   BLACK_BISHOP_on_BLACK_SQUARE_0
      3  3000		       f0 e0 f0 b0*	      .byte.b	$f0,$e0,$f0,$b0,$d0,$e0,$40,$40,$f0,$60,$f0,$b0,$d0,$e0,$00,$40,$00,$00,$00,$00,$00,$00,$40,$00	;PF0
      4  3018		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3030		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  3048					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_1.asm"
      0  3048					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_1", 72
     10  3048					      LIST	ON
      0  3048					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_1
      1  3048				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3048
      3  3048				   BLACK_BISHOP_on_BLACK_SQUARE_1
      3  3048		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3060		       78 38 7c 6c*	      .byte.b	$78,$38,$7c,$6c,$5c,$38,$10,$10,$7c,$30,$78,$68,$58,$38,$00,$10,$00,$00,$00,$00,$00,$00,$10,$00	;PF1
      5  3078		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  3090					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_2.asm"
      0  3090					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_2", 72
     10  3090					      LIST	ON
      0  3090					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_2
      1  3090				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3090
      3  3090				   BLACK_BISHOP_on_BLACK_SQUARE_2
      3  3090		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  30a8		       03 01 03 03*	      .byte.b	$03,$01,$03,$03,$02,$01,$00,$00,$03,$01,$03,$03,$02,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  30c0		       03 03 07 06*	      .byte.b	$03,$03,$07,$06,$07,$03,$01,$01,$07,$01,$03,$02,$03,$03,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  30d8					      include	"gfx/BLACK_BISHOP_on_BLACK_SQUARE_3.asm"
      0  30d8					      OPTIONAL_PAGEBREAK	"BLACK_BISHOP_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_BISHOP_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3100					      LIST	ON
      0  3100					      DEF	BLACK_BISHOP_on_BLACK_SQUARE_3
      1  3100				   BANK_BLACK_BISHOP_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3100
      3  3100				   BLACK_BISHOP_on_BLACK_SQUARE_3
      3  3100		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3118		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3130		       78 70 f8 d8*	      .byte.b	$78,$70,$f8,$d8,$e8,$70,$20,$20,$f8,$30,$78,$58,$68,$70,$00,$20,$00,$00,$00,$00,$00,$00,$20,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  3148					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_0.asm"
      0  3148					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_0", 72
     10  3148					      LIST	ON
      0  3148					      DEF	BLACK_ROOK_on_BLACK_SQUARE_0
      1  3148				   BANK_BLACK_ROOK_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3148
      3  3148				   BLACK_ROOK_on_BLACK_SQUARE_0
      3  3148		       f0 e0 e0 e0*	      .byte.b	$f0,$e0,$e0,$e0,$f0,$50,$50,$00,$f0,$60,$60,$60,$f0,$50,$00,$00,$00,$00,$00,$00,$00,$a0,$00,$00	;PF0
      4  3160		       00 00 00 80*	      .byte.b	$00,$00,$00,$80,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3178		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  3190					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_1.asm"
      0  3190					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_1", 72
     10  3190					      LIST	ON
      0  3190					      DEF	BLACK_ROOK_on_BLACK_SQUARE_1
      1  3190				   BANK_BLACK_ROOK_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3190
      3  3190				   BLACK_ROOK_on_BLACK_SQUARE_1
      3  3190		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  31a8		       78 38 38 3c*	      .byte.b	$78,$38,$38,$3c,$7c,$54,$54,$00,$7c,$30,$30,$30,$78,$50,$00,$00,$00,$00,$00,$00,$00,$28,$00,$00	;PF1
      5  31c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  31d8					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_2.asm"
      0  31d8					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_ROOK_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3200					      LIST	ON
      0  3200					      DEF	BLACK_ROOK_on_BLACK_SQUARE_2
      1  3200				   BANK_BLACK_ROOK_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3200
      3  3200				   BLACK_ROOK_on_BLACK_SQUARE_2
      3  3200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3218		       03 01 01 01*	      .byte.b	$03,$01,$01,$01,$03,$02,$02,$00,$03,$01,$01,$01,$03,$02,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00	;PF1
      5  3230		       03 03 03 07*	      .byte.b	$03,$03,$03,$07,$07,$05,$05,$00,$07,$01,$01,$01,$03,$01,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  3248					      include	"gfx/BLACK_ROOK_on_BLACK_SQUARE_3.asm"
      0  3248					      OPTIONAL_PAGEBREAK	"BLACK_ROOK_on_BLACK_SQUARE_3", 72
     10  3248					      LIST	ON
      0  3248					      DEF	BLACK_ROOK_on_BLACK_SQUARE_3
      1  3248				   BANK_BLACK_ROOK_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3248
      3  3248				   BLACK_ROOK_on_BLACK_SQUARE_3
      3  3248		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3260		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3278		       78 70 70 f0*	      .byte.b	$78,$70,$70,$f0,$f8,$a8,$a8,$00,$f8,$30,$30,$30,$78,$28,$00,$00,$00,$00,$00,$00,$00,$50,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  3290					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_0.asm"
      0  3290					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_0", 72
     10  3290					      LIST	ON
      0  3290					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_0
      1  3290				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3290
      3  3290				   BLACK_QUEEN_on_BLACK_SQUARE_0
      3  3290		       e0 e0 f0 f0*	      .byte.b	$e0,$e0,$f0,$f0,$50,$00,$50,$00,$e0,$40,$f0,$f0,$50,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  32a8		       00 00 80 80*	      .byte.b	$00,$00,$80,$80,$80,$00,$80,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  32c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  32d8					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_1.asm"
      0  32d8					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  BLACK_QUEEN_on_BLACK_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f300
     10  3300					      LIST	ON
      0  3300					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_1
      1  3300				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3300
      3  3300				   BLACK_QUEEN_on_BLACK_SQUARE_1
      3  3300		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3318		       38 38 7c 7c*	      .byte.b	$38,$38,$7c,$7c,$54,$00,$54,$00,$38,$10,$78,$78,$50,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3330		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  3348					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_2.asm"
      0  3348					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_2", 72
     10  3348					      LIST	ON
      0  3348					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_2
      1  3348				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3348
      3  3348				   BLACK_QUEEN_on_BLACK_SQUARE_2
      3  3348		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3360		       01 01 03 03*	      .byte.b	$01,$01,$03,$03,$02,$00,$02,$00,$01,$00,$03,$03,$02,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3378		       03 03 07 07*	      .byte.b	$03,$03,$07,$07,$05,$00,$05,$00,$03,$01,$03,$03,$01,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  3390					      include	"gfx/BLACK_QUEEN_on_BLACK_SQUARE_3.asm"
      0  3390					      OPTIONAL_PAGEBREAK	"BLACK_QUEEN_on_BLACK_SQUARE_3", 72
     10  3390					      LIST	ON
      0  3390					      DEF	BLACK_QUEEN_on_BLACK_SQUARE_3
      1  3390				   BANK_BLACK_QUEEN_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3390
      3  3390				   BLACK_QUEEN_on_BLACK_SQUARE_3
      3  3390		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  33a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  33c0		       70 70 f8 f8*	      .byte.b	$70,$70,$f8,$f8,$a8,$00,$a8,$00,$70,$20,$78,$78,$28,$00,$a8,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  33d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_0.asm"
      0  33d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_0", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_0
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f400
     10  3400					      LIST	ON
      0  3400					      DEF	BLACK_KING_on_BLACK_SQUARE_0
      1  3400				   BANK_BLACK_KING_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3400
      3  3400				   BLACK_KING_on_BLACK_SQUARE_0
      3  3400		       e0 f0 50 50*	      .byte.b	$e0,$f0,$50,$50,$f0,$40,$e0,$40,$e0,$60,$50,$50,$50,$40,$e0,$40,$00,$00,$a0,$00,$00,$b0,$00,$00	;PF0
      4  3418		       00 80 80 80*	      .byte.b	$00,$80,$80,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00	;PF1
      5  3430		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  3448					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_1.asm"
      0  3448					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_1", 72
     10  3448					      LIST	ON
      0  3448					      DEF	BLACK_KING_on_BLACK_SQUARE_1
      1  3448				   BANK_BLACK_KING_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3448
      3  3448				   BLACK_KING_on_BLACK_SQUARE_1
      3  3448		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3460		       38 7c 54 54*	      .byte.b	$38,$7c,$54,$54,$7c,$10,$38,$10,$38,$30,$50,$50,$50,$10,$38,$10,$00,$00,$28,$00,$00,$6c,$00,$00	;PF1
      5  3478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  3490					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_2.asm"
      0  3490					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_2", 72
     10  3490					      LIST	ON
      0  3490					      DEF	BLACK_KING_on_BLACK_SQUARE_2
      1  3490				   BANK_BLACK_KING_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3490
      3  3490				   BLACK_KING_on_BLACK_SQUARE_2
      3  3490		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  34a8		       01 03 02 02*	      .byte.b	$01,$03,$02,$02,$03,$00,$01,$00,$01,$01,$02,$02,$02,$00,$01,$00,$00,$00,$01,$00,$00,$03,$00,$00	;PF1
      5  34c0		       03 07 05 05*	      .byte.b	$03,$07,$05,$05,$07,$01,$03,$01,$03,$01,$01,$01,$01,$01,$03,$01,$00,$00,$02,$00,$00,$06,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_KING_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  34d8					      include	"gfx/BLACK_KING_on_BLACK_SQUARE_3.asm"
      0  34d8					      OPTIONAL_PAGEBREAK	"BLACK_KING_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_KING_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f500
     10  3500					      LIST	ON
      0  3500					      DEF	BLACK_KING_on_BLACK_SQUARE_3
      1  3500				   BANK_BLACK_KING_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3500
      3  3500				   BLACK_KING_on_BLACK_SQUARE_3
      3  3500		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3518		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3530		       70 f8 a8 a8*	      .byte.b	$70,$f8,$a8,$a8,$f8,$20,$70,$20,$70,$30,$28,$28,$28,$20,$70,$20,$00,$00,$50,$00,$00,$d8,$00,$00	;PF2
------- FILE piece_graphics.asm
    124  3548
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  3548					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_0.asm"
      0  3548					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_0", 72
     10  3548					      LIST	ON
      0  3548					      DEF	WHITE_MARKER_on_BLACK_SQUARE_0
      1  3548				   BANK_WHITE_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3548
      3  3548				   WHITE_MARKER_on_BLACK_SQUARE_0
      3  3548		       00 00 00 40*	      .byte.b	$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00,$00,$00,$00,$40,$40,$00,$00,$00	;PF0
      4  3560		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3578		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  3590					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_1.asm"
      0  3590					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_1", 72
     10  3590					      LIST	ON
      0  3590					      DEF	WHITE_MARKER_on_BLACK_SQUARE_1
      1  3590				   BANK_WHITE_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3590
      3  3590				   WHITE_MARKER_on_BLACK_SQUARE_1
      3  3590		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  35a8		       00 00 00 10*	      .byte.b	$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00,$00,$00,$00,$10,$10,$00,$00,$00	;PF1
      5  35c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  35d8					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_2.asm"
      0  35d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_BLACK_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f600
     10  3600					      LIST	ON
      0  3600					      DEF	WHITE_MARKER_on_BLACK_SQUARE_2
      1  3600				   BANK_WHITE_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3600
      3  3600				   WHITE_MARKER_on_BLACK_SQUARE_2
      3  3600		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3630		       00 00 00 01*	      .byte.b	$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  3648					      include	"gfx/WHITE_MARKER_on_BLACK_SQUARE_3.asm"
      0  3648					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_BLACK_SQUARE_3", 72
     10  3648					      LIST	ON
      0  3648					      DEF	WHITE_MARKER_on_BLACK_SQUARE_3
      1  3648				   BANK_WHITE_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3648
      3  3648				   WHITE_MARKER_on_BLACK_SQUARE_3
      3  3648		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3660		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3678		       00 00 00 20*	      .byte.b	$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00,$00,$00,$00,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  3690					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_0.asm"
      0  3690					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_0", 72
     10  3690					      LIST	ON
      0  3690					      DEF	WHITE_MARKER_on_WHITE_SQUARE_0
      1  3690				   BANK_WHITE_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3690
      3  3690				   WHITE_MARKER_on_WHITE_SQUARE_0
      3  3690		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  36a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  36c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  36d8					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_1.asm"
      0  36d8					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_1", 72
 PAGE BREAK INSERTED FOR  WHITE_MARKER_on_WHITE_SQUARE_1
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f700
     10  3700					      LIST	ON
      0  3700					      DEF	WHITE_MARKER_on_WHITE_SQUARE_1
      1  3700				   BANK_WHITE_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3700
      3  3700				   WHITE_MARKER_on_WHITE_SQUARE_1
      3  3700		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3718		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3730		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  3748					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_2.asm"
      0  3748					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_2", 72
     10  3748					      LIST	ON
      0  3748					      DEF	WHITE_MARKER_on_WHITE_SQUARE_2
      1  3748				   BANK_WHITE_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3748
      3  3748				   WHITE_MARKER_on_WHITE_SQUARE_2
      3  3748		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3760		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3778		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  3790					      include	"gfx/WHITE_MARKER_on_WHITE_SQUARE_3.asm"
      0  3790					      OPTIONAL_PAGEBREAK	"WHITE_MARKER_on_WHITE_SQUARE_3", 72
     10  3790					      LIST	ON
      0  3790					      DEF	WHITE_MARKER_on_WHITE_SQUARE_3
      1  3790				   BANK_WHITE_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3790
      3  3790				   WHITE_MARKER_on_WHITE_SQUARE_3
      3  3790		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  37a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  37c0		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
      0  37d8					      CHECK_BANK_SIZE	"PIECES_4 (2K)"
      1  37d8		       07 d8	   .TEMP      =	* - BANK_START
 PIECES_4 (2K) (2K) SIZE =  $7d8 , FREE= $28
      2  37d8					      ECHO	"PIECES_4 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  37d8				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  37d8				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  37d8				  -	      ERR
      6  37d8					      endif
    134  37d8
      0  37d8					      NEWBANK	PIECES_5
      1  3a90 ????				      SEG	PIECES_5
      2  3800					      ORG	ORIGIN
      3  3800					      RORG	$F000
      4  3800				   BANK_START SET	*
      5  3800				   PIECES_5   SET	ORIGIN / 2048
      6  3800				   ORIGIN     SET	ORIGIN + 2048
      7  3800				   _CURRENT_BANK SET	PIECES_5
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm LEVEL 4 PASS 3
      0  3800					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_0.asm"
      0  3800					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_0", 72
     10  3800					      LIST	ON
      0  3800					      DEF	BLACK_MARKER_on_BLACK_SQUARE_0
      1  3800				   BANK_BLACK_MARKER_on_BLACK_SQUARE_0 SET	_CURRENT_BANK
      2  3800
      3  3800				   BLACK_MARKER_on_BLACK_SQUARE_0
      3  3800		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00	;PF0
      4  3818		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3830		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm LEVEL 4 PASS 3
      0  3848					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_1.asm"
      0  3848					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_1", 72
     10  3848					      LIST	ON
      0  3848					      DEF	BLACK_MARKER_on_BLACK_SQUARE_1
      1  3848				   BANK_BLACK_MARKER_on_BLACK_SQUARE_1 SET	_CURRENT_BANK
      2  3848
      3  3848				   BLACK_MARKER_on_BLACK_SQUARE_1
      3  3848		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3860		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00	;PF1
      5  3878		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm LEVEL 4 PASS 3
      0  3890					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_2.asm"
      0  3890					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_2", 72
     10  3890					      LIST	ON
      0  3890					      DEF	BLACK_MARKER_on_BLACK_SQUARE_2
      1  3890				   BANK_BLACK_MARKER_on_BLACK_SQUARE_2 SET	_CURRENT_BANK
      2  3890
      3  3890				   BLACK_MARKER_on_BLACK_SQUARE_2
      3  3890		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  38a8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  38c0		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm LEVEL 4 PASS 3
      0  38d8					      include	"gfx/BLACK_MARKER_on_BLACK_SQUARE_3.asm"
      0  38d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_BLACK_SQUARE_3", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_BLACK_SQUARE_3
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f100
     10  3900					      LIST	ON
      0  3900					      DEF	BLACK_MARKER_on_BLACK_SQUARE_3
      1  3900				   BANK_BLACK_MARKER_on_BLACK_SQUARE_3 SET	_CURRENT_BANK
      2  3900
      3  3900				   BLACK_MARKER_on_BLACK_SQUARE_3
      3  3900		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3918		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3930		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm LEVEL 4 PASS 3
      0  3948					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_0.asm"
      0  3948					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_0", 72
     10  3948					      LIST	ON
      0  3948					      DEF	BLACK_MARKER_on_WHITE_SQUARE_0
      1  3948				   BANK_BLACK_MARKER_on_WHITE_SQUARE_0 SET	_CURRENT_BANK
      2  3948
      3  3948				   BLACK_MARKER_on_WHITE_SQUARE_0
      3  3948		       00 00 40 40*	      .byte.b	$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$40,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3960		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3978		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm LEVEL 4 PASS 3
      0  3990					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_1.asm"
      0  3990					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_1", 72
     10  3990					      LIST	ON
      0  3990					      DEF	BLACK_MARKER_on_WHITE_SQUARE_1
      1  3990				   BANK_BLACK_MARKER_on_WHITE_SQUARE_1 SET	_CURRENT_BANK
      2  3990
      3  3990				   BLACK_MARKER_on_WHITE_SQUARE_1
      3  3990		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  39a8		       00 00 10 10*	      .byte.b	$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  39c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm LEVEL 4 PASS 3
      0  39d8					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_2.asm"
      0  39d8					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_2", 72
 PAGE BREAK INSERTED FOR  BLACK_MARKER_on_WHITE_SQUARE_2
 REQUESTED SIZE =  $48
 WASTED SPACE =  $28
 PAGEBREAK LOCATION =  $f200
     10  3a00					      LIST	ON
      0  3a00					      DEF	BLACK_MARKER_on_WHITE_SQUARE_2
      1  3a00				   BANK_BLACK_MARKER_on_WHITE_SQUARE_2 SET	_CURRENT_BANK
      2  3a00
      3  3a00				   BLACK_MARKER_on_WHITE_SQUARE_2
      3  3a00		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a18		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a30		       00 00 01 01*	      .byte.b	$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
------- FILE gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm LEVEL 4 PASS 3
      0  3a48					      include	"gfx/BLACK_MARKER_on_WHITE_SQUARE_3.asm"
      0  3a48					      OPTIONAL_PAGEBREAK	"BLACK_MARKER_on_WHITE_SQUARE_3", 72
     10  3a48					      LIST	ON
      0  3a48					      DEF	BLACK_MARKER_on_WHITE_SQUARE_3
      1  3a48				   BANK_BLACK_MARKER_on_WHITE_SQUARE_3 SET	_CURRENT_BANK
      2  3a48
      3  3a48				   BLACK_MARKER_on_WHITE_SQUARE_3
      3  3a48		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF0
      4  3a60		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF1
      5  3a78		       00 00 20 20*	      .byte.b	$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$20,$20,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;PF2
------- FILE piece_graphics.asm
    144  3a90
    145  3a90				  -	      if	0
    146  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    147  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    148  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    149  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    150  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    151  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    152  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    153  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    154  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    155  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    156  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    157  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    158  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    159  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    160  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    161  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    162  3a90					      endif
      0  3a90					      CHECK_BANK_SIZE	"PIECES_5 (2K)"
      1  3a90		       02 90	   .TEMP      =	* - BANK_START
 PIECES_5 (2K) (2K) SIZE =  $290 , FREE= $570
      2  3a90					      ECHO	"PIECES_5 (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  3a90				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  3a90				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  3a90				  -	      ERR
      6  3a90					      endif
    164  3a90
    165  3a90				  -	      if	0
    166  3a90				  -	      NEWBANK	PIECES_6
    167  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    168  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    169  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    170  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    171  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    172  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    173  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    174  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    175  3a90				  -
    176  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_0.asm"
    177  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_1.asm"
    178  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_2.asm"
    179  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_WHITE_SQUARE_3.asm"
    180  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    181  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    182  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    183  3a90				  -	      include	"gfx/WHITE_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    184  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    185  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    186  3a90				  -
    187  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    188  3a90				  -	      include	"gfx/WHITE_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    189  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    190  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    191  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    192  3a90				  -	      include	"gfx/WHITE_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    193  3a90				  -	      CHECK_BANK_SIZE	"PIECES_6 (2K)"
    194  3a90				  -
    195  3a90				  -
    196  3a90				  -	      NEWBANK	PIECES_7
    197  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    198  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    199  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    200  3a90				  -	      include	"gfx/WHITE_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    201  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    202  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    203  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    204  3a90				  -	      include	"gfx/WHITE_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    205  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    206  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    207  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    208  3a90				  -	      include	"gfx/WHITE_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    209  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_0.asm"
    210  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_1.asm"
    211  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_2.asm"
    212  3a90				  -	      include	"gfx/WHITE_MARKED_KING_on_BLACK_SQUARE_3.asm"
    213  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_0.asm"
    214  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_1.asm"
    215  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_2.asm"
    216  3a90				  -	      include	"gfx/BLACK_MARKED_BLANK_on_WHITE_SQUARE_3.asm"
    217  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_0.asm"
    218  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_1.asm"
    219  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_2.asm"
    220  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_WHITE_SQUARE_3.asm"
    221  3a90				  -	      CHECK_BANK_SIZE	"PIECES_7 (2K)"
    222  3a90				  -
    223  3a90				  -
    224  3a90				  -	      NEWBANK	PIECES_8
    225  3a90				  -
    226  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_0.asm"
    227  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_1.asm"
    228  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_2.asm"
    229  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_WHITE_SQUARE_3.asm"
    230  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_0.asm"
    231  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_1.asm"
    232  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_2.asm"
    233  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_WHITE_SQUARE_3.asm"
    234  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_0.asm"
    235  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_1.asm"
    236  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_2.asm"
    237  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_WHITE_SQUARE_3.asm"
    238  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_0.asm"
    239  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_1.asm"
    240  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_2.asm"
    241  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_WHITE_SQUARE_3.asm"
    242  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_0.asm"
    243  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_1.asm"
    244  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_2.asm"
    245  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_WHITE_SQUARE_3.asm"
    246  3a90				  -
    247  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_0.asm"
    248  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_1.asm"
    249  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_2.asm"
    250  3a90				  -	      include	"gfx/BLACK_MARKED_PAWN_on_BLACK_SQUARE_3.asm"
    251  3a90				  -	      CHECK_BANK_SIZE	"PIECES_8 (2K)"
    252  3a90				  -
    253  3a90					      endif
    254  3a90
    255  3a90							;    NEWBANK PIECES_9
    256  3a90
    257  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_0.asm"
    258  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_1.asm"
    259  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_2.asm"
    260  3a90							; include "gfx/BLACK_MARKED_BLANK_on_BLACK_SQUARE_3.asm"
    261  3a90							; include "gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_0.asm"
    262  3a90
    263  3a90				  -	      if	0
    264  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_1.asm"
    265  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_2.asm"
    266  3a90				  -	      include	"gfx/BLACK_MARKED_KNIGHT_on_BLACK_SQUARE_3.asm"
    267  3a90					      endif
    268  3a90
    269  3a90							;    CHECK_BANK_SIZE "PIECES_9 (2K)"
    270  3a90
    271  3a90				  -	      if	0
    272  3a90				  -
    273  3a90				  -
    274  3a90				  -
    275  3a90				  -
    276  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_0.asm"
    277  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_1.asm"
    278  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_2.asm"
    279  3a90				  -	      include	"gfx/BLACK_MARKED_BISHOP_on_BLACK_SQUARE_3.asm"
    280  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_0.asm"
    281  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_1.asm"
    282  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_2.asm"
    283  3a90				  -	      include	"gfx/BLACK_MARKED_ROOK_on_BLACK_SQUARE_3.asm"
    284  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_0.asm"
    285  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_1.asm"
    286  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_2.asm"
    287  3a90				  -	      include	"gfx/BLACK_MARKED_QUEEN_on_BLACK_SQUARE_3.asm"
    288  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_0.asm"
    289  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_1.asm"
    290  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_2.asm"
    291  3a90				  -	      include	"gfx/BLACK_MARKED_KING_on_BLACK_SQUARE_3.asm"
    292  3a90				  -
    293  3a90				  -
    294  3a90					      endif
------- FILE BANK_CHESS_INCLUDES.asm
     42  3a90
      0  3a90					      NEWBANK	PIECE_VECTORS
      1  4180 ????				      SEG	PIECE_VECTORS
      2  4000					      ORG	ORIGIN
      3  4000					      RORG	$F000
      4  4000				   BANK_START SET	*
      5  4000				   PIECE_VECTORS SET	ORIGIN / 2048
      6  4000				   ORIGIN     SET	ORIGIN + 2048
      7  4000				   _CURRENT_BANK SET	PIECE_VECTORS
------- FILE piece_vectors.asm LEVEL 3 PASS 3
      0  4000					      include	"piece_vectors.asm"
      1  4000							; Created by ConvertChessPieces.py
      0  4000					      DEF	PIECE_VECTOR_LO
      1  4000				   BANK_PIECE_VECTOR_LO SET	_CURRENT_BANK
      2  4000
      3  4000				   PIECE_VECTOR_LO
      3  4000		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_0
      4  4001		       48		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_1
      5  4002		       90		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_2
      6  4003		       00		      .byte.b	<WHITE_BLANK_on_WHITE_SQUARE_3
      7  4004		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_0
      8  4005		       90		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_1
      9  4006		       00		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_2
     10  4007		       48		      .byte.b	<WHITE_PAWN_on_WHITE_SQUARE_3
     11  4008		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_0
     12  4009		       00		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_1
     13  400a		       48		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_2
     14  400b		       90		      .byte.b	<WHITE_KNIGHT_on_WHITE_SQUARE_3
     15  400c		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_0
     16  400d		       48		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_1
     17  400e		       90		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_2
     18  400f		       00		      .byte.b	<WHITE_BISHOP_on_WHITE_SQUARE_3
     19  4010		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_0
     20  4011		       90		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_1
     21  4012		       00		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_2
     22  4013		       48		      .byte.b	<WHITE_ROOK_on_WHITE_SQUARE_3
     23  4014		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_0
     24  4015		       00		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_1
     25  4016		       48		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_2
     26  4017		       90		      .byte.b	<WHITE_QUEEN_on_WHITE_SQUARE_3
     27  4018		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_0
     28  4019		       48		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_1
     29  401a		       90		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_2
     30  401b		       00		      .byte.b	<WHITE_KING_on_WHITE_SQUARE_3
     31  401c		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_0
     32  401d		       00		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_1
     33  401e		       48		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_2
     34  401f		       90		      .byte.b	<WHITE_MARKER_on_WHITE_SQUARE_3
     35  4020		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_0
     36  4021		       90		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_1
     37  4022		       00		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_2
     38  4023		       48		      .byte.b	<WHITE_BLANK_on_BLACK_SQUARE_3
     39  4024		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_0
     40  4025		       00		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_1
     41  4026		       48		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_2
     42  4027		       90		      .byte.b	<WHITE_PAWN_on_BLACK_SQUARE_3
     43  4028		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_0
     44  4029		       48		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_1
     45  402a		       90		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_2
     46  402b		       00		      .byte.b	<WHITE_KNIGHT_on_BLACK_SQUARE_3
     47  402c		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_0
     48  402d		       90		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_1
     49  402e		       00		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_2
     50  402f		       48		      .byte.b	<WHITE_BISHOP_on_BLACK_SQUARE_3
     51  4030		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_0
     52  4031		       00		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_1
     53  4032		       48		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_2
     54  4033		       90		      .byte.b	<WHITE_ROOK_on_BLACK_SQUARE_3
     55  4034		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_0
     56  4035		       48		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_1
     57  4036		       90		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_2
     58  4037		       00		      .byte.b	<WHITE_QUEEN_on_BLACK_SQUARE_3
     59  4038		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_0
     60  4039		       90		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_1
     61  403a		       00		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_2
     62  403b		       48		      .byte.b	<WHITE_KING_on_BLACK_SQUARE_3
     63  403c		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_0
     64  403d		       90		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_1
     65  403e		       00		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_2
     66  403f		       48		      .byte.b	<WHITE_MARKER_on_BLACK_SQUARE_3
     67  4040		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_0
     68  4041		       00		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_1
     69  4042		       48		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_2
     70  4043		       90		      .byte.b	<BLACK_BLANK_on_WHITE_SQUARE_3
     71  4044		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_0
     72  4045		       48		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_1
     73  4046		       90		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_2
     74  4047		       00		      .byte.b	<BLACK_PAWN_on_WHITE_SQUARE_3
     75  4048		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_0
     76  4049		       90		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_1
     77  404a		       00		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_2
     78  404b		       48		      .byte.b	<BLACK_KNIGHT_on_WHITE_SQUARE_3
     79  404c		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_0
     80  404d		       00		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_1
     81  404e		       48		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_2
     82  404f		       90		      .byte.b	<BLACK_BISHOP_on_WHITE_SQUARE_3
     83  4050		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_0
     84  4051		       48		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_1
     85  4052		       90		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_2
     86  4053		       00		      .byte.b	<BLACK_ROOK_on_WHITE_SQUARE_3
     87  4054		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_0
     88  4055		       90		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_1
     89  4056		       00		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_2
     90  4057		       48		      .byte.b	<BLACK_QUEEN_on_WHITE_SQUARE_3
     91  4058		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_0
     92  4059		       00		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_1
     93  405a		       48		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_2
     94  405b		       90		      .byte.b	<BLACK_KING_on_WHITE_SQUARE_3
     95  405c		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_0
     96  405d		       90		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_1
     97  405e		       00		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_2
     98  405f		       48		      .byte.b	<BLACK_MARKER_on_WHITE_SQUARE_3
     99  4060		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_0
    100  4061		       48		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_1
    101  4062		       90		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_2
    102  4063		       00		      .byte.b	<BLACK_BLANK_on_BLACK_SQUARE_3
    103  4064		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_0
    104  4065		       90		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_1
    105  4066		       00		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_2
    106  4067		       48		      .byte.b	<BLACK_PAWN_on_BLACK_SQUARE_3
    107  4068		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_0
    108  4069		       00		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_1
    109  406a		       48		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_2
    110  406b		       90		      .byte.b	<BLACK_KNIGHT_on_BLACK_SQUARE_3
    111  406c		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_0
    112  406d		       48		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_1
    113  406e		       90		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_2
    114  406f		       00		      .byte.b	<BLACK_BISHOP_on_BLACK_SQUARE_3
    115  4070		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_0
    116  4071		       90		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_1
    117  4072		       00		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_2
    118  4073		       48		      .byte.b	<BLACK_ROOK_on_BLACK_SQUARE_3
    119  4074		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_0
    120  4075		       00		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_1
    121  4076		       48		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_2
    122  4077		       90		      .byte.b	<BLACK_QUEEN_on_BLACK_SQUARE_3
    123  4078		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_0
    124  4079		       48		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_1
    125  407a		       90		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_2
    126  407b		       00		      .byte.b	<BLACK_KING_on_BLACK_SQUARE_3
    127  407c		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_0
    128  407d		       48		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_1
    129  407e		       90		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_2
    130  407f		       00		      .byte.b	<BLACK_MARKER_on_BLACK_SQUARE_3
      0  4080					      DEF	PIECE_VECTOR_HI
      1  4080				   BANK_PIECE_VECTOR_HI SET	_CURRENT_BANK
      2  4080
      3  4080				   PIECE_VECTOR_HI
    132  4080		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_0
    133  4081		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_1
    134  4082		       f0		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_2
    135  4083		       f1		      .byte.b	>WHITE_BLANK_on_WHITE_SQUARE_3
    136  4084		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_0
    137  4085		       f1		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_1
    138  4086		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_2
    139  4087		       f2		      .byte.b	>WHITE_PAWN_on_WHITE_SQUARE_3
    140  4088		       f2		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_0
    141  4089		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_1
    142  408a		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_2
    143  408b		       f3		      .byte.b	>WHITE_KNIGHT_on_WHITE_SQUARE_3
    144  408c		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_0
    145  408d		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_1
    146  408e		       f4		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_2
    147  408f		       f5		      .byte.b	>WHITE_BISHOP_on_WHITE_SQUARE_3
    148  4090		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_0
    149  4091		       f5		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_1
    150  4092		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_2
    151  4093		       f6		      .byte.b	>WHITE_ROOK_on_WHITE_SQUARE_3
    152  4094		       f6		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_0
    153  4095		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_1
    154  4096		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_2
    155  4097		       f7		      .byte.b	>WHITE_QUEEN_on_WHITE_SQUARE_3
    156  4098		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_0
    157  4099		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_1
    158  409a		       f0		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_2
    159  409b		       f1		      .byte.b	>WHITE_KING_on_WHITE_SQUARE_3
    160  409c		       f6		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_0
    161  409d		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_1
    162  409e		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_2
    163  409f		       f7		      .byte.b	>WHITE_MARKER_on_WHITE_SQUARE_3
    164  40a0		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_0
    165  40a1		       f1		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_1
    166  40a2		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_2
    167  40a3		       f2		      .byte.b	>WHITE_BLANK_on_BLACK_SQUARE_3
    168  40a4		       f2		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_0
    169  40a5		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_1
    170  40a6		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_2
    171  40a7		       f3		      .byte.b	>WHITE_PAWN_on_BLACK_SQUARE_3
    172  40a8		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_0
    173  40a9		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_1
    174  40aa		       f4		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_2
    175  40ab		       f5		      .byte.b	>WHITE_KNIGHT_on_BLACK_SQUARE_3
    176  40ac		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_0
    177  40ad		       f5		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_1
    178  40ae		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_2
    179  40af		       f6		      .byte.b	>WHITE_BISHOP_on_BLACK_SQUARE_3
    180  40b0		       f6		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_0
    181  40b1		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_1
    182  40b2		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_2
    183  40b3		       f7		      .byte.b	>WHITE_ROOK_on_BLACK_SQUARE_3
    184  40b4		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_0
    185  40b5		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_1
    186  40b6		       f0		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_2
    187  40b7		       f1		      .byte.b	>WHITE_QUEEN_on_BLACK_SQUARE_3
    188  40b8		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_0
    189  40b9		       f1		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_1
    190  40ba		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_2
    191  40bb		       f2		      .byte.b	>WHITE_KING_on_BLACK_SQUARE_3
    192  40bc		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_0
    193  40bd		       f5		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_1
    194  40be		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_2
    195  40bf		       f6		      .byte.b	>WHITE_MARKER_on_BLACK_SQUARE_3
    196  40c0		       f2		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_0
    197  40c1		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_1
    198  40c2		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_2
    199  40c3		       f3		      .byte.b	>BLACK_BLANK_on_WHITE_SQUARE_3
    200  40c4		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_0
    201  40c5		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_1
    202  40c6		       f4		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_2
    203  40c7		       f5		      .byte.b	>BLACK_PAWN_on_WHITE_SQUARE_3
    204  40c8		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_0
    205  40c9		       f5		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_1
    206  40ca		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_2
    207  40cb		       f6		      .byte.b	>BLACK_KNIGHT_on_WHITE_SQUARE_3
    208  40cc		       f6		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_0
    209  40cd		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_1
    210  40ce		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_2
    211  40cf		       f7		      .byte.b	>BLACK_BISHOP_on_WHITE_SQUARE_3
    212  40d0		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_0
    213  40d1		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_1
    214  40d2		       f0		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_2
    215  40d3		       f1		      .byte.b	>BLACK_ROOK_on_WHITE_SQUARE_3
    216  40d4		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_0
    217  40d5		       f1		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_1
    218  40d6		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_2
    219  40d7		       f2		      .byte.b	>BLACK_QUEEN_on_WHITE_SQUARE_3
    220  40d8		       f2		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_0
    221  40d9		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_1
    222  40da		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_2
    223  40db		       f3		      .byte.b	>BLACK_KING_on_WHITE_SQUARE_3
    224  40dc		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_0
    225  40dd		       f1		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_1
    226  40de		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_2
    227  40df		       f2		      .byte.b	>BLACK_MARKER_on_WHITE_SQUARE_3
    228  40e0		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_0
    229  40e1		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_1
    230  40e2		       f4		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_2
    231  40e3		       f5		      .byte.b	>BLACK_BLANK_on_BLACK_SQUARE_3
    232  40e4		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_0
    233  40e5		       f5		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_1
    234  40e6		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_2
    235  40e7		       f6		      .byte.b	>BLACK_PAWN_on_BLACK_SQUARE_3
    236  40e8		       f6		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_0
    237  40e9		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_1
    238  40ea		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_2
    239  40eb		       f7		      .byte.b	>BLACK_KNIGHT_on_BLACK_SQUARE_3
    240  40ec		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_0
    241  40ed		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_1
    242  40ee		       f0		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_2
    243  40ef		       f1		      .byte.b	>BLACK_BISHOP_on_BLACK_SQUARE_3
    244  40f0		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_0
    245  40f1		       f1		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_1
    246  40f2		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_2
    247  40f3		       f2		      .byte.b	>BLACK_ROOK_on_BLACK_SQUARE_3
    248  40f4		       f2		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_0
    249  40f5		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_1
    250  40f6		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_2
    251  40f7		       f3		      .byte.b	>BLACK_QUEEN_on_BLACK_SQUARE_3
    252  40f8		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_0
    253  40f9		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_1
    254  40fa		       f4		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_2
    255  40fb		       f5		      .byte.b	>BLACK_KING_on_BLACK_SQUARE_3
    256  40fc		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_0
    257  40fd		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_1
    258  40fe		       f0		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_2
    259  40ff		       f1		      .byte.b	>BLACK_MARKER_on_BLACK_SQUARE_3
      0  4100					      DEF	PIECE_VECTOR_BANK
      1  4100				   BANK_PIECE_VECTOR_BANK SET	_CURRENT_BANK
      2  4100
      3  4100				   PIECE_VECTOR_BANK
    261  4100		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_0
    262  4101		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_1
    263  4102		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_2
    264  4103		       02		      .byte.b	BANK_WHITE_BLANK_on_WHITE_SQUARE_3
    265  4104		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_0
    266  4105		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_1
    267  4106		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_2
    268  4107		       02		      .byte.b	BANK_WHITE_PAWN_on_WHITE_SQUARE_3
    269  4108		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_0
    270  4109		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_1
    271  410a		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_2
    272  410b		       02		      .byte.b	BANK_WHITE_KNIGHT_on_WHITE_SQUARE_3
    273  410c		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_0
    274  410d		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_1
    275  410e		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_2
    276  410f		       02		      .byte.b	BANK_WHITE_BISHOP_on_WHITE_SQUARE_3
    277  4110		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_0
    278  4111		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_1
    279  4112		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_2
    280  4113		       02		      .byte.b	BANK_WHITE_ROOK_on_WHITE_SQUARE_3
    281  4114		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_0
    282  4115		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_1
    283  4116		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_2
    284  4117		       02		      .byte.b	BANK_WHITE_QUEEN_on_WHITE_SQUARE_3
    285  4118		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_0
    286  4119		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_1
    287  411a		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_2
    288  411b		       03		      .byte.b	BANK_WHITE_KING_on_WHITE_SQUARE_3
    289  411c		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_0
    290  411d		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_1
    291  411e		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_2
    292  411f		       06		      .byte.b	BANK_WHITE_MARKER_on_WHITE_SQUARE_3
    293  4120		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_0
    294  4121		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_1
    295  4122		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_2
    296  4123		       03		      .byte.b	BANK_WHITE_BLANK_on_BLACK_SQUARE_3
    297  4124		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_0
    298  4125		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_1
    299  4126		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_2
    300  4127		       03		      .byte.b	BANK_WHITE_PAWN_on_BLACK_SQUARE_3
    301  4128		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_0
    302  4129		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_1
    303  412a		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_2
    304  412b		       03		      .byte.b	BANK_WHITE_KNIGHT_on_BLACK_SQUARE_3
    305  412c		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_0
    306  412d		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_1
    307  412e		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_2
    308  412f		       03		      .byte.b	BANK_WHITE_BISHOP_on_BLACK_SQUARE_3
    309  4130		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_0
    310  4131		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_1
    311  4132		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_2
    312  4133		       03		      .byte.b	BANK_WHITE_ROOK_on_BLACK_SQUARE_3
    313  4134		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_0
    314  4135		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_1
    315  4136		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_2
    316  4137		       04		      .byte.b	BANK_WHITE_QUEEN_on_BLACK_SQUARE_3
    317  4138		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_0
    318  4139		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_1
    319  413a		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_2
    320  413b		       04		      .byte.b	BANK_WHITE_KING_on_BLACK_SQUARE_3
    321  413c		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_0
    322  413d		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_1
    323  413e		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_2
    324  413f		       06		      .byte.b	BANK_WHITE_MARKER_on_BLACK_SQUARE_3
    325  4140		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_0
    326  4141		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_1
    327  4142		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_2
    328  4143		       04		      .byte.b	BANK_BLACK_BLANK_on_WHITE_SQUARE_3
    329  4144		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_0
    330  4145		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_1
    331  4146		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_2
    332  4147		       04		      .byte.b	BANK_BLACK_PAWN_on_WHITE_SQUARE_3
    333  4148		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_0
    334  4149		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_1
    335  414a		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_2
    336  414b		       04		      .byte.b	BANK_BLACK_KNIGHT_on_WHITE_SQUARE_3
    337  414c		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_0
    338  414d		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_1
    339  414e		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_2
    340  414f		       04		      .byte.b	BANK_BLACK_BISHOP_on_WHITE_SQUARE_3
    341  4150		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_0
    342  4151		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_1
    343  4152		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_2
    344  4153		       05		      .byte.b	BANK_BLACK_ROOK_on_WHITE_SQUARE_3
    345  4154		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_0
    346  4155		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_1
    347  4156		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_2
    348  4157		       05		      .byte.b	BANK_BLACK_QUEEN_on_WHITE_SQUARE_3
    349  4158		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_0
    350  4159		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_1
    351  415a		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_2
    352  415b		       05		      .byte.b	BANK_BLACK_KING_on_WHITE_SQUARE_3
    353  415c		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_0
    354  415d		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_1
    355  415e		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_2
    356  415f		       07		      .byte.b	BANK_BLACK_MARKER_on_WHITE_SQUARE_3
    357  4160		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_0
    358  4161		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_1
    359  4162		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_2
    360  4163		       05		      .byte.b	BANK_BLACK_BLANK_on_BLACK_SQUARE_3
    361  4164		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_0
    362  4165		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_1
    363  4166		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_2
    364  4167		       05		      .byte.b	BANK_BLACK_PAWN_on_BLACK_SQUARE_3
    365  4168		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_0
    366  4169		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_1
    367  416a		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_2
    368  416b		       05		      .byte.b	BANK_BLACK_KNIGHT_on_BLACK_SQUARE_3
    369  416c		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_0
    370  416d		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_1
    371  416e		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_2
    372  416f		       06		      .byte.b	BANK_BLACK_BISHOP_on_BLACK_SQUARE_3
    373  4170		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_0
    374  4171		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_1
    375  4172		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_2
    376  4173		       06		      .byte.b	BANK_BLACK_ROOK_on_BLACK_SQUARE_3
    377  4174		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_0
    378  4175		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_1
    379  4176		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_2
    380  4177		       06		      .byte.b	BANK_BLACK_QUEEN_on_BLACK_SQUARE_3
    381  4178		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_0
    382  4179		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_1
    383  417a		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_2
    384  417b		       06		      .byte.b	BANK_BLACK_KING_on_BLACK_SQUARE_3
    385  417c		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_0
    386  417d		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_1
    387  417e		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_2
    388  417f		       07		      .byte.b	BANK_BLACK_MARKER_on_BLACK_SQUARE_3
    389  4180
    390  4180							; piece index equates...
    391  4180		       00 00	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_0 =	0
    392  4180		       00 01	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_1 =	1
    393  4180		       00 02	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_2 =	2
    394  4180		       00 03	   INDEX_WHITE_BLANK_on_WHITE_SQUARE_3 =	3
    395  4180		       00 04	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_0 =	4
    396  4180		       00 05	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_1 =	5
    397  4180		       00 06	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_2 =	6
    398  4180		       00 07	   INDEX_WHITE_PAWN_on_WHITE_SQUARE_3 =	7
    399  4180		       00 08	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0 =	8
    400  4180		       00 09	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_1 =	9
    401  4180		       00 0a	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_2 =	10
    402  4180		       00 0b	   INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_3 =	11
    403  4180		       00 0c	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0 =	12
    404  4180		       00 0d	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_1 =	13
    405  4180		       00 0e	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_2 =	14
    406  4180		       00 0f	   INDEX_WHITE_BISHOP_on_WHITE_SQUARE_3 =	15
    407  4180		       00 10	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_0 =	16
    408  4180		       00 11	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_1 =	17
    409  4180		       00 12	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_2 =	18
    410  4180		       00 13	   INDEX_WHITE_ROOK_on_WHITE_SQUARE_3 =	19
    411  4180		       00 14	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0 =	20
    412  4180		       00 15	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_1 =	21
    413  4180		       00 16	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_2 =	22
    414  4180		       00 17	   INDEX_WHITE_QUEEN_on_WHITE_SQUARE_3 =	23
    415  4180		       00 18	   INDEX_WHITE_KING_on_WHITE_SQUARE_0 =	24
    416  4180		       00 19	   INDEX_WHITE_KING_on_WHITE_SQUARE_1 =	25
    417  4180		       00 1a	   INDEX_WHITE_KING_on_WHITE_SQUARE_2 =	26
    418  4180		       00 1b	   INDEX_WHITE_KING_on_WHITE_SQUARE_3 =	27
    419  4180		       00 1c	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_0 =	28
    420  4180		       00 1d	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_1 =	29
    421  4180		       00 1e	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_2 =	30
    422  4180		       00 1f	   INDEX_WHITE_MARKER_on_WHITE_SQUARE_3 =	31
    423  4180		       00 20	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_0 =	32
    424  4180		       00 21	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_1 =	33
    425  4180		       00 22	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_2 =	34
    426  4180		       00 23	   INDEX_WHITE_BLANK_on_BLACK_SQUARE_3 =	35
    427  4180		       00 24	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_0 =	36
    428  4180		       00 25	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_1 =	37
    429  4180		       00 26	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_2 =	38
    430  4180		       00 27	   INDEX_WHITE_PAWN_on_BLACK_SQUARE_3 =	39
    431  4180		       00 28	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_0 =	40
    432  4180		       00 29	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_1 =	41
    433  4180		       00 2a	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_2 =	42
    434  4180		       00 2b	   INDEX_WHITE_KNIGHT_on_BLACK_SQUARE_3 =	43
    435  4180		       00 2c	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_0 =	44
    436  4180		       00 2d	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_1 =	45
    437  4180		       00 2e	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_2 =	46
    438  4180		       00 2f	   INDEX_WHITE_BISHOP_on_BLACK_SQUARE_3 =	47
    439  4180		       00 30	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_0 =	48
    440  4180		       00 31	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_1 =	49
    441  4180		       00 32	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_2 =	50
    442  4180		       00 33	   INDEX_WHITE_ROOK_on_BLACK_SQUARE_3 =	51
    443  4180		       00 34	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_0 =	52
    444  4180		       00 35	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_1 =	53
    445  4180		       00 36	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_2 =	54
    446  4180		       00 37	   INDEX_WHITE_QUEEN_on_BLACK_SQUARE_3 =	55
    447  4180		       00 38	   INDEX_WHITE_KING_on_BLACK_SQUARE_0 =	56
    448  4180		       00 39	   INDEX_WHITE_KING_on_BLACK_SQUARE_1 =	57
    449  4180		       00 3a	   INDEX_WHITE_KING_on_BLACK_SQUARE_2 =	58
    450  4180		       00 3b	   INDEX_WHITE_KING_on_BLACK_SQUARE_3 =	59
    451  4180		       00 3c	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_0 =	60
    452  4180		       00 3d	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_1 =	61
    453  4180		       00 3e	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_2 =	62
    454  4180		       00 3f	   INDEX_WHITE_MARKER_on_BLACK_SQUARE_3 =	63
    455  4180		       00 40	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_0 =	64
    456  4180		       00 41	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_1 =	65
    457  4180		       00 42	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_2 =	66
    458  4180		       00 43	   INDEX_BLACK_BLANK_on_WHITE_SQUARE_3 =	67
    459  4180		       00 44	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_0 =	68
    460  4180		       00 45	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_1 =	69
    461  4180		       00 46	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_2 =	70
    462  4180		       00 47	   INDEX_BLACK_PAWN_on_WHITE_SQUARE_3 =	71
    463  4180		       00 48	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0 =	72
    464  4180		       00 49	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_1 =	73
    465  4180		       00 4a	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_2 =	74
    466  4180		       00 4b	   INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_3 =	75
    467  4180		       00 4c	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0 =	76
    468  4180		       00 4d	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_1 =	77
    469  4180		       00 4e	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_2 =	78
    470  4180		       00 4f	   INDEX_BLACK_BISHOP_on_WHITE_SQUARE_3 =	79
    471  4180		       00 50	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_0 =	80
    472  4180		       00 51	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_1 =	81
    473  4180		       00 52	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_2 =	82
    474  4180		       00 53	   INDEX_BLACK_ROOK_on_WHITE_SQUARE_3 =	83
    475  4180		       00 54	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0 =	84
    476  4180		       00 55	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_1 =	85
    477  4180		       00 56	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_2 =	86
    478  4180		       00 57	   INDEX_BLACK_QUEEN_on_WHITE_SQUARE_3 =	87
    479  4180		       00 58	   INDEX_BLACK_KING_on_WHITE_SQUARE_0 =	88
    480  4180		       00 59	   INDEX_BLACK_KING_on_WHITE_SQUARE_1 =	89
    481  4180		       00 5a	   INDEX_BLACK_KING_on_WHITE_SQUARE_2 =	90
    482  4180		       00 5b	   INDEX_BLACK_KING_on_WHITE_SQUARE_3 =	91
    483  4180		       00 5c	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_0 =	92
    484  4180		       00 5d	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_1 =	93
    485  4180		       00 5e	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_2 =	94
    486  4180		       00 5f	   INDEX_BLACK_MARKER_on_WHITE_SQUARE_3 =	95
    487  4180		       00 60	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_0 =	96
    488  4180		       00 61	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_1 =	97
    489  4180		       00 62	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_2 =	98
    490  4180		       00 63	   INDEX_BLACK_BLANK_on_BLACK_SQUARE_3 =	99
    491  4180		       00 64	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_0 =	100
    492  4180		       00 65	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_1 =	101
    493  4180		       00 66	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_2 =	102
    494  4180		       00 67	   INDEX_BLACK_PAWN_on_BLACK_SQUARE_3 =	103
    495  4180		       00 68	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_0 =	104
    496  4180		       00 69	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_1 =	105
    497  4180		       00 6a	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_2 =	106
    498  4180		       00 6b	   INDEX_BLACK_KNIGHT_on_BLACK_SQUARE_3 =	107
    499  4180		       00 6c	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_0 =	108
    500  4180		       00 6d	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_1 =	109
    501  4180		       00 6e	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_2 =	110
    502  4180		       00 6f	   INDEX_BLACK_BISHOP_on_BLACK_SQUARE_3 =	111
    503  4180		       00 70	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_0 =	112
    504  4180		       00 71	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_1 =	113
    505  4180		       00 72	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_2 =	114
    506  4180		       00 73	   INDEX_BLACK_ROOK_on_BLACK_SQUARE_3 =	115
    507  4180		       00 74	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_0 =	116
    508  4180		       00 75	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_1 =	117
    509  4180		       00 76	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_2 =	118
    510  4180		       00 77	   INDEX_BLACK_QUEEN_on_BLACK_SQUARE_3 =	119
    511  4180		       00 78	   INDEX_BLACK_KING_on_BLACK_SQUARE_0 =	120
    512  4180		       00 79	   INDEX_BLACK_KING_on_BLACK_SQUARE_1 =	121
    513  4180		       00 7a	   INDEX_BLACK_KING_on_BLACK_SQUARE_2 =	122
    514  4180		       00 7b	   INDEX_BLACK_KING_on_BLACK_SQUARE_3 =	123
    515  4180		       00 7c	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_0 =	124
    516  4180		       00 7d	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_1 =	125
    517  4180		       00 7e	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_2 =	126
    518  4180		       00 7f	   INDEX_BLACK_MARKER_on_BLACK_SQUARE_3 =	127
------- FILE BANK_CHESS_INCLUDES.asm
      0  4180					      CHECK_BANK_SIZE	"PIECE_VECTORS (2K)"
      1  4180		       01 80	   .TEMP      =	* - BANK_START
 PIECE_VECTORS (2K) (2K) SIZE =  $180 , FREE= $680
      2  4180					      ECHO	"PIECE_VECTORS (2K)", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4180				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4180				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4180				  -	      ERR
      6  4180					      endif
------- FILE ./chess.asm
------- FILE BANK_StateMachine.asm LEVEL 2 PASS 3
      0  4180					      include	"BANK_StateMachine.asm"
      1  4180
      2  4180
      0  4180					      NEWBANK	STATEMACHINE
      1  4b17 ????				      SEG	STATEMACHINE
      2  4800					      ORG	ORIGIN
      3  4800					      RORG	$F000
      4  4800				   BANK_START SET	*
      5  4800				   STATEMACHINE SET	ORIGIN / 2048
      6  4800				   ORIGIN     SET	ORIGIN + 2048
      7  4800				   _CURRENT_BANK SET	STATEMACHINE
      4  4800
      5  4800
      6  4800							; Banks holding data (ply 0 doubles as WHITE, and ply 1 as BLACK)
      7  4800
      8  4800		       00 09	   PLAYER     =	RAMBANK_PLY
      9  4800		       00 0a	   OPPONENT   =	PLAYER + 1
     10  4800
     11  4800							;---------------------------------------------------------------------------------------------------
     12  4800
     13  4800		       00 01	   STARTSELECTPIECE =	1
     14  4800
     15  4800		       00 00	   AI_BeginSelectMovePhase =	0
     16  4800		       00 01	   AI_SelectStartSquare =	1
     17  4800		       00 02	   AI_StartSquareSelected =	2
     18  4800		       00 03	   AI_DrawMoves =	3
     19  4800		       00 04	   AI_ShowMoveCaptures =	4
     20  4800		       00 05	   AI_SlowFlash =	5
     21  4800		       00 06	   AI_DrawTargetSquares =	6
     22  4800		       00 07	   AI_SelectDestinationSquare =	7
     23  4800		       00 08	   AI_Quiescent =	8
     24  4800		       00 09	   AI_Halt    =	9
     25  4800		       00 0a	   AI_ReselectDebounce =	10
     26  4800		       00 0b	   AI_SartMoveGen =	11
     27  4800		       00 0c	   AI_StepMoveGen =	12
     28  4800		       00 0d	   AI_LookForCheck =	13
     29  4800							;AI_StartClearBoard		    = 14
     30  4800							;AI_ClearEachRow2		   = 15
     31  4800
     32  4800					      MAC	phase
     33  4800					      lda	#{1}
     34  4800					      sta	aiPhase
     35  4800					      ENDM		;#
     36  4800
     37  4800
     38  4800		       69	   AiVectorLO .byte.b	<aiBeginSelectMovePhase	; 0
     39  4801		       84		      .byte.b	<aiSelectStartSquare	; 1
     40  4802		       f3		      .byte.b	<aiStartSquareSelected	; 2
     41  4803		       15		      .byte.b	<aiDrawMoves	; 3
     42  4804		       6e		      .byte.b	<aiShowMoveCaptures	; 4
     43  4805		       8c		      .byte.b	<aiSlowFlash	; 5
     44  4806		       4c		      .byte.b	<aiDrawTargetSquares	; 6
     45  4807		       eb		      .byte.b	<aiSelectDestinationSquare	; 7
     46  4808		       1e		      .byte.b	<aiQuiescent	; 9
     47  4809		       42		      .byte.b	<aiHalt	; 10
     48  480a		       15		      .byte.b	<aiReselectDebounce	; 11
     49  480b		       2a		      .byte.b	<aiStartMoveGen	; 12
     50  480c		       3c		      .byte.b	<aiStepMoveGen	; 13
     51  480d		       52		      .byte.b	<aiLookForCheck	; 14
     52  480e							;		      .byte <aiStartClearBoard		      ; 15
     53  480e							;		      .byte <aiClearEachRow		      ; 16
     54  480e
     55  480e		       f0	   AiVectorHI .byte.b	>aiBeginSelectMovePhase	; 0
     56  480f		       f0		      .byte.b	>aiSelectStartSquare	; 1
     57  4810		       f0		      .byte.b	>aiStartSquareSelected	; 2
     58  4811		       f1		      .byte.b	>aiDrawMoves	; 3
     59  4812		       f1		      .byte.b	>aiShowMoveCaptures	; 4
     60  4813		       f1		      .byte.b	>aiSlowFlash	; 5
     61  4814		       f1		      .byte.b	>aiDrawTargetSquares	; 6
     62  4815		       f1		      .byte.b	>aiSelectDestinationSquare	; 7
     63  4816		       f2		      .byte.b	>aiQuiescent	; 9
     64  4817		       f2		      .byte.b	>aiHalt	; 10
     65  4818		       f2		      .byte.b	>aiReselectDebounce	; 11
     66  4819		       f0		      .byte.b	>aiStartMoveGen	; 12
     67  481a		       f0		      .byte.b	>aiStepMoveGen	; 13
     68  481b		       f0		      .byte.b	>aiLookForCheck	; 14
     69  481c							;		      .byte >aiStartClearBoard		      ; 15
     70  481c							;		      .byte >aiClearEachRow		      ; 16
     71  481c
     72  481c		       09	   AiVectorBANK .byte.b	BANK_aiBeginSelectMovePhase	; 0
     73  481d		       09		      .byte.b	BANK_aiSelectStartSquare	; 1
     74  481e		       09		      .byte.b	BANK_aiStartSquareSelected	; 2
     75  481f		       09		      .byte.b	BANK_aiDrawMoves	; 3
     76  4820		       09		      .byte.b	BANK_aiShowMoveCaptures	; 4
     77  4821		       09		      .byte.b	BANK_aiSlowFlash	; 5
     78  4822		       09		      .byte.b	BANK_aiDrawTargetSquares	; 6
     79  4823		       09		      .byte.b	BANK_aiSelectDestinationSquare	; 7
     80  4824		       09		      .byte.b	BANK_aiQuiescent	; 9
     81  4825		       09		      .byte.b	BANK_aiHalt	; 10
     82  4826		       09		      .byte.b	BANK_aiReselectDebounce	; 11
     83  4827		       09		      .byte.b	BANK_aiStartMoveGen	; 12
     84  4828		       09		      .byte.b	BANK_aiStepMoveGen	; 13
     85  4829		       09		      .byte.b	BANK_aiLookForCheck	; 14
     86  482a							;		      .byte BANK_aiStartClearBoard	      ; 15
     87  482a							;		      .byte BANK_aiClearEachRow 	      ; 16
     88  482a
     89  482a							;---------------------------------------------------------------------------------------------------
     90  482a
      0  482a					      DEF	aiStartMoveGen
      1  482a				   BANK_aiStartMoveGen SET	_CURRENT_BANK
      2  482a
      3  482a				   aiStartMoveGen
     92  482a					      SUBROUTINE
     93  482a
     94  482a							; To assist with castling, generate the moves for the opponent, giving us effectively
     95  482a							; a list of squares that are being attacked. The castling can't happen if the king is
     96  482a							; in check or if the squares it would have to move over are in check
     97  482a
     98  482a							; we don't need to worry about this if K has moved, or relevant R has moved or if
     99  482a							; the squares between are occupied. We can tell THAT by examining the movelist to see
    100  482a							; if there are K-moves marked "FLAG_CASTLE" - and the relevant squares
    101  482a
    102  482a		       a9 0a		      lda	#OPPONENT
    103  482c		       85 9c		      sta	currentPly
    104  482e		       20 37 f9 	      jsr	SAFE_InitialiseMoveGeneration
    105  4831
    106  4831		       a5 9e		      lda	sideToMove
    107  4833		       49 80		      eor	#128
    108  4835		       85 9e		      sta	sideToMove	; for movegen to know
    109  4837
      0  4837					      PHASE	AI_StepMoveGen
      1  4837		       a9 0c		      lda	#AI_StepMoveGen
      2  4839		       85 8f		      sta	aiPhase
    111  483b		       60		      rts
    112  483c
    113  483c
    114  483c							;---------------------------------------------------------------------------------------------------
    115  483c
      0  483c					      DEF	aiStepMoveGen
      1  483c				   BANK_aiStepMoveGen SET	_CURRENT_BANK
      2  483c
      3  483c				   aiStepMoveGen
    117  483c					      SUBROUTINE
    118  483c
    119  483c							; Because we're (possibly) running with the screen on, processing time is very short and
    120  483c							; we generate the opponent moves piece by piece. Time isn't really an isssue here, so
    121  483c							; this happens over multiple frames.
    122  483c
    123  483c		       20 43 f9 	      jsr	SAFE_GenerateOneMove
    124  483f
    125  483f		       a5 9d		      lda	piecelistIndex
    126  4841		       29 0f		      and	#15
    127  4843		       c9 00		      cmp	#0
    128  4845		       d0 0a		      bne	.wait	; still generating
    129  4847
    130  4847		       a5 9e		      lda	sideToMove
    131  4849		       49 80		      eor	#128
    132  484b		       85 9e		      sta	sideToMove
    133  484d
    134  484d
      0  484d					      PHASE	AI_LookForCheck
      1  484d		       a9 0d		      lda	#AI_LookForCheck
      2  484f		       85 8f		      sta	aiPhase
    136  4851		       60	   .wait      rts
    137  4852
    138  4852
    139  4852							;---------------------------------------------------------------------------------------------------
    140  4852
      0  4852					      DEF	aiLookForCheck
      1  4852				   BANK_aiLookForCheck SET	_CURRENT_BANK
      2  4852
      3  4852				   aiLookForCheck
    142  4852					      SUBROUTINE
    143  4852
    144  4852							; now we've finished generating the opponent moves
    145  4852							; See if the square our king is on is an attacked square (that is, it appears as a TO
    146  4852							; square in the opponent's movelist)
    147  4852
    148  4852		       20 a1 f9 	      jsr	debug
    149  4855
    150  4855		       a9 09		      lda	#PLAYER
    151  4857		       85 9c		      sta	currentPly
    152  4859		       20 3c fd 	      jsr	SAFE_GetKingSquare	; king's current X12 square
    153  485c		       20 8b fe 	      jsr	SAFE_IsSquareUnderAttack
    154  485f		       90 03		      bcc	.exit
    155  4861
    156  4861							; king attack found!
    157  4861		       4c 61 f0    kk	      jmp	kk
    158  4864
    159  4864
      0  4864				   .exit      PHASE	AI_BeginSelectMovePhase
      1  4864		       a9 00		      lda	#AI_BeginSelectMovePhase
      2  4866		       85 8f		      sta	aiPhase
    161  4868		       60		      rts
    162  4869
    163  4869							;---------------------------------------------------------------------------------------------------
    164  4869
      0  4869					      DEF	aiBeginSelectMovePhase
      1  4869				   BANK_aiBeginSelectMovePhase SET	_CURRENT_BANK
      2  4869
      3  4869				   aiBeginSelectMovePhase
    166  4869					      SUBROUTINE
    167  4869
    168  4869		       a9 04		      lda	#4
    169  486b		       85 88		      sta	highlight_row
    170  486d		       85 89		      sta	highlight_row+1
    171  486f		       85 8a		      sta	highlight_col
    172  4871		       85 8b		      sta	highlight_col+1
    173  4873
    174  4873		       a9 00		      lda	#0
    175  4875		       85 8c		      sta	mdelay	;?
    176  4877		       85 96		      sta	aiFlashPhase	;?
    177  4879
    178  4879		       a9 ff		      lda	#-1
    179  487b		       85 91		      sta	aiFromSquare
    180  487d		       85 92		      sta	aiToSquare
    181  487f
      0  487f					      PHASE	AI_SelectStartSquare
      1  487f		       a9 01		      lda	#AI_SelectStartSquare
      2  4881		       85 8f		      sta	aiPhase
    183  4883		       60		      rts
    184  4884
    185  4884							;---------------------------------------------------------------------------------------------------
    186  4884
      0  4884					      DEF	aiSelectStartSquare
      1  4884				   BANK_aiSelectStartSquare SET	_CURRENT_BANK
      2  4884
      3  4884				   aiSelectStartSquare
    188  4884					      SUBROUTINE
    189  4884
    190  4884		       20 b1 f1 	      jsr	moveCursor
    191  4887		       20 5d fd 	      jsr	SAFE_IsValidMoveFromSquare
    192  488a
    193  488a		       c6 8d		      dec	ccur	; pulse colour for valid squares
    194  488c		       20 be f0 	      jsr	setCursorColours
    195  488f
    196  488f		       c0 ff		      cpy	#-1
    197  4891		       f0 0e		      beq	.noButton	; illegal square
    198  4893
    199  4893		       a5 96		      lda	aiFlashPhase
    200  4895		       29 01		      and	#1
    201  4897		       d0 08		      bne	.noButton	; prevent EOR-error on flashing selected piece
    202  4899
    203  4899		       a5 4c		      lda	INPT4
    204  489b		       30 04		      bmi	.noButton
      0  489d					      PHASE	AI_StartSquareSelected
      1  489d		       a9 02		      lda	#AI_StartSquareSelected
      2  489f		       85 8f		      sta	aiPhase
    206  48a1				   .noButton
    207  48a1
    208  48a1		       60		      rts
    209  48a2
    210  48a2							;---------------------------------------------------------------------------------------------------
    211  48a2
      0  48a2					      DEF	setCursorPriority
      1  48a2				   BANK_setCursorPriority SET	_CURRENT_BANK
      2  48a2
      3  48a2				   setCursorPriority
    213  48a2					      SUBROUTINE
    214  48a2
    215  48a2		       98		      tya
    216  48a3		       48		      pha
    217  48a4
    218  48a4					      if	1
    219  48a4
    220  48a4		       a5 88		      lda	highlight_row
    221  48a6		       49 07		      eor	#7
    222  48a8		       0a		      asl
    223  48a9		       0a		      asl
    224  48aa		       0a		      asl
    225  48ab		       05 8a		      ora	highlight_col
    226  48ad		       aa		      tax
    227  48ae
    228  48ae		       20 ee f8 	      jsr	SAFE_Get64toX12Board
    229  48b1		       a2 04		      ldx	#%100
    230  48b3		       c9 00		      cmp	#0
    231  48b5		       d0 02		      bne	.under
    232  48b7		       a2 00		      ldx	#0
    233  48b9		       86 4a	   .under     stx	CTRLPF	; UNDER
    234  48bb					      endif
    235  48bb
    236  48bb		       68		      pla
    237  48bc		       a8		      tay
    238  48bd		       60		      rts
    239  48be
    240  48be							;---------------------------------------------------------------------------------------------------
    241  48be
      0  48be					      DEF	setCursorColours
      1  48be				   BANK_setCursorColours SET	_CURRENT_BANK
      2  48be
      3  48be				   setCursorColours
    243  48be					      SUBROUTINE
    244  48be
    245  48be							; pass y=-1 if move is NOT in the movelist
    246  48be							; preserve y
    247  48be
    248  48be		       a9 44		      lda	#$44
    249  48c0
    250  48c0		       c0 ff		      cpy	#-1
    251  48c2		       f0 0c		      beq	.writeCursorCol	; NOT in the movelist
    252  48c4
    253  48c4		       a5 8d		      lda	ccur
    254  48c6		       4a		      lsr
    255  48c7		       4a		      lsr
    256  48c8		       4a		      lsr
    257  48c9		       29 04		      and	#4
    258  48cb		       49 ff		      eor	#$FF
    259  48cd		       38		      sec
    260  48ce		       69 a6		      adc	#COLOUR_LINE_1
    261  48d0
    262  48d0		       85 46	   .writeCursorCol sta	COLUP0
    263  48d2		       60		      rts
    264  48d3
    265  48d3
      0  48d3					      OPTIONAL_PAGEBREAK	"Joystik Tables", 32
     10  48d3					      LIST	ON
    267  48d3
    268  48d3							;			RLDU RLD  RL U RL   R DU R D  R  U R	 LDU  LD   L U	L     DU   D	 U
    269  48d3							;			0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
    270  48d3		       00 00 00 00*JoyMoveX   .byte.b	0, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 0, 0, 0, 0
    271  48e3		       00 00 00 00*JoyMoveY   .byte.b	0, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0
    272  48f3
    273  48f3							;---------------------------------------------------------------------------------------------------
    274  48f3
      0  48f3					      DEF	aiStartSquareSelected
      1  48f3				   BANK_aiStartSquareSelected SET	_CURRENT_BANK
      2  48f3
      3  48f3				   aiStartSquareSelected
    276  48f3					      SUBROUTINE
    277  48f3
    278  48f3							; Mark all the valid moves for the selected piece on the board
    279  48f3							; and then start pulsing the piece
    280  48f3							; AND start choosing for selection of TO square
    281  48f3
    282  48f3
    283  48f3
    284  48f3							; Iterate the movelist and for all from squares which = drawPieceNumber
    285  48f3							; then draw a BLANK at that square
    286  48f3							; do 1 by one, when none found then increment state
    287  48f3
    288  48f3		       a5 88		      lda	highlight_row
    289  48f5		       49 07		      eor	#7
    290  48f7		       0a		      asl
    291  48f8		       0a		      asl
    292  48f9		       0a		      asl
    293  48fa		       05 8a		      ora	highlight_col
    294  48fc		       85 80		      sta	drawPieceNumber
    295  48fe
    296  48fe		       a9 0a		      lda	#10
    297  4900		       85 90		      sta	aiFlashDelay
    298  4902		       a9 00		      lda	#0
    299  4904		       85 92		      sta	aiToSquare
    300  4906		       85 96		      sta	aiFlashPhase	; for debounce exit timing
    301  4908
    302  4908		       a9 ff		      lda	#-1
    303  490a		       85 95		      sta	aiMoveIndex
    304  490c
    305  490c		       a9 0f		      lda	#15
    306  490e		       85 8c		      sta	mdelay	; hold-down delay before moves are shown
    307  4910
      0  4910					      PHASE	AI_DrawMoves
      1  4910		       a9 03		      lda	#AI_DrawMoves
      2  4912		       85 8f		      sta	aiPhase
    309  4914		       60		      rts
    310  4915
    311  4915							;---------------------------------------------------------------------------------------------------
    312  4915
      0  4915					      DEF	aiDrawMoves
      1  4915				   BANK_aiDrawMoves SET	_CURRENT_BANK
      2  4915
      3  4915				   aiDrawMoves
    314  4915					      SUBROUTINE
    315  4915
    316  4915
    317  4915		       c6 8d		      dec	ccur
    318  4917		       20 be f0 	      jsr	setCursorColours
    319  491a
    320  491a		       c6 8c		      dec	mdelay
    321  491c		       d0 21		      bne	.exit
    322  491e		       a9 01		      lda	#1
    323  4920		       85 8c		      sta	mdelay	; once triggered, runs always
    324  4922
    325  4922
    326  4922		       a5 95		      lda	aiMoveIndex
    327  4924		       10 05		      bpl	.valid
    328  4926
    329  4926		       20 4c fe 	      jsr	SAFE_getMoveIndex
    330  4929		       85 95		      sta	aiMoveIndex
    331  492b
    332  492b		       20 58 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    333  492e		       a5 95		      lda	aiMoveIndex
    334  4930		       10 19		      bpl	.unsure	; still drawing in this phase
    335  4932
    336  4932		       a9 08		      lda	#CAP_SPEED
    337  4934		       85 8c		      sta	mdelay
    338  4936
    339  4936		       a9 00		      lda	#0
    340  4938		       85 96		      sta	aiFlashPhase	; controls odd/even exit of flashing
    341  493a
      0  493a					      PHASE	AI_ShowMoveCaptures
      1  493a		       a9 04		      lda	#AI_ShowMoveCaptures
      2  493c		       85 8f		      sta	aiPhase
    343  493e		       60		      rts
    344  493f
    345  493f				   .exit
    346  493f
    347  493f							; Initial piece selection has happened, but the button hasn't been released yet
    348  493f							; AND we're still in the waiting phase to see if the button was held long enough for move show
    349  493f
    350  493f		       a5 4c		      lda	INPT4
    351  4941		       10 08		      bpl	.unsure	; button still pressed, so still unsure what to do
    352  4943
    353  4943							; Aha! Button released, so we know the selected piece and can start flashing it
    354  4943							; and allowing movement of the selector to a destination square...
    355  4943
    356  4943		       a9 00		      lda	#0*4
    357  4945		       85 8d		      sta	ccur	; bright green square for selection
    358  4947
      0  4947					      PHASE	AI_SelectDestinationSquare
      1  4947		       a9 07		      lda	#AI_SelectDestinationSquare
      2  4949		       85 8f		      sta	aiPhase
    360  494b
    361  494b		       60	   .unsure    rts
    362  494c
    363  494c							;---------------------------------------------------------------------------------------------------
    364  494c
      0  494c					      DEF	aiDrawTargetSquares
      1  494c				   BANK_aiDrawTargetSquares SET	_CURRENT_BANK
      2  494c
      3  494c				   aiDrawTargetSquares
    366  494c					      SUBROUTINE
    367  494c
    368  494c		       c6 8d		      dec	ccur
    369  494e		       20 be f0 	      jsr	setCursorColours
    370  4951
    371  4951		       c6 8c		      dec	mdelay
    372  4953		       d0 18		      bne	.exit
    373  4955		       a9 01		      lda	#1
    374  4957		       85 8c		      sta	mdelay	; once triggered, runs always
    375  4959
    376  4959		       a5 95		      lda	aiMoveIndex
    377  495b		       10 05		      bpl	.valid
    378  495d
    379  495d		       20 4c fe 	      jsr	SAFE_getMoveIndex
    380  4960		       85 95		      sta	aiMoveIndex
    381  4962
    382  4962		       20 58 fe    .valid     jsr	SAFE_showMoveOptions	; draw potential moves one at a time
    383  4965		       a5 95		      lda	aiMoveIndex
    384  4967		       10 04		      bpl	.exit	; still drawing in this phase
    385  4969
      0  4969					      PHASE	AI_SelectStartSquare
      1  4969		       a9 01		      lda	#AI_SelectStartSquare
      2  496b		       85 8f		      sta	aiPhase
    387  496d
    388  496d		       60	   .exit      rts
    389  496e
    390  496e							;---------------------------------------------------------------------------------------------------
    391  496e
    392  496e		       00 08	   CAP_SPEED  =	8
    393  496e
      0  496e					      DEF	aiShowMoveCaptures
      1  496e				   BANK_aiShowMoveCaptures SET	_CURRENT_BANK
      2  496e
      3  496e				   aiShowMoveCaptures
    395  496e					      SUBROUTINE
    396  496e
    397  496e							; draw/undraw ALL captured pieces
    398  496e							; we should do this an even number of times so that pieces don't disappEOR
    399  496e
    400  496e		       c6 8d		      dec	ccur
    401  4970		       20 be f0 	      jsr	setCursorColours
    402  4973
    403  4973		       c6 8c		      dec	mdelay	; flash speed UNVARYING despite draw happening
    404  4975
    405  4975		       a5 95		      lda	aiMoveIndex
    406  4977		       10 05		      bpl	.valid	; guaranteed -1 on 1st call
    407  4979		       20 4c fe 	      jsr	SAFE_getMoveIndex
    408  497c		       85 95		      sta	aiMoveIndex
    409  497e
    410  497e				   .valid		;lda INTIM
    411  497e							;cmp #22
    412  497e							;bcc .exit		     ; try to prevent time overflows
    413  497e
    414  497e		       20 97 fe 	      jsr	SAFE_showMoveCaptures
    415  4981		       a5 95		      lda	aiMoveIndex
    416  4983		       10 06		      bpl	.exit
    417  4985
    418  4985		       e6 96		      inc	aiFlashPhase
    419  4987
      0  4987					      PHASE	AI_SlowFlash
      1  4987		       a9 05		      lda	#AI_SlowFlash
      2  4989		       85 8f		      sta	aiPhase
    421  498b
    422  498b		       60	   .exit      rts
    423  498c
    424  498c							;---------------------------------------------------------------------------------------------------
    425  498c
      0  498c					      DEF	aiSlowFlash
      1  498c				   BANK_aiSlowFlash SET	_CURRENT_BANK
      2  498c
      3  498c				   aiSlowFlash
    427  498c					      SUBROUTINE
    428  498c
    429  498c							; Joystick button is held down, so we're displaying the available moves
    430  498c							; They have all been drawn, so now we "slow" flash any pieces that can be captures
    431  498c
    432  498c		       c6 8d		      dec	ccur
    433  498e		       20 be f0 	      jsr	setCursorColours
    434  4991
    435  4991		       a5 96		      lda	aiFlashPhase
    436  4993		       29 01		      and	#1
    437  4995		       d0 04		      bne	.notEven	; only exit after even # EOR-draws
    438  4997
    439  4997		       a5 4c		      lda	INPT4
    440  4999		       30 0d		      bmi	.butpress	; exit on button release
    441  499b
    442  499b				   .notEven
    443  499b
    444  499b							; Wait for delay to expire then back and flash 'em again
    445  499b
    446  499b		       c6 8c		      dec	mdelay
    447  499d		       10 08		      bpl	.slowWait
    448  499f
    449  499f		       a9 08		      lda	#CAP_SPEED
    450  49a1		       85 8c		      sta	mdelay
    451  49a3
      0  49a3					      PHASE	AI_ShowMoveCaptures	; go back and rEORdraw all captures again
      1  49a3		       a9 04		      lda	#AI_ShowMoveCaptures
      2  49a5		       85 8f		      sta	aiPhase
    453  49a7
    454  49a7		       60	   .slowWait  rts
    455  49a8
    456  49a8
    457  49a8		       a9 01	   .butpress  lda	#1
    458  49aa		       85 8c		      sta	mdelay
    459  49ac
      0  49ac					      PHASE	AI_DrawTargetSquares
      1  49ac		       a9 06		      lda	#AI_DrawTargetSquares
      2  49ae		       85 8f		      sta	aiPhase
    461  49b0		       60		      rts
    462  49b1
    463  49b1
    464  49b1							;---------------------------------------------------------------------------------------------------
    465  49b1
      0  49b1					      DEF	moveCursor
      1  49b1				   BANK_moveCursor SET	_CURRENT_BANK
      2  49b1
      3  49b1				   moveCursor
    467  49b1					      SUBROUTINE
    468  49b1
    469  49b1							; Part (a) move cursor around the board waiting for joystick press
    470  49b1
    471  49b1		       c6 8c		      dec	mdelay
    472  49b3		       10 27		      bpl	.delaym
    473  49b5
    474  49b5		       ad 80 02 	      lda	SWCHA
    475  49b8		       4a		      lsr
    476  49b9		       4a		      lsr
    477  49ba		       4a		      lsr
    478  49bb		       4a		      lsr
    479  49bc		       a8		      tay
    480  49bd
    481  49bd		       18		      clc
    482  49be		       a5 88		      lda	highlight_row
    483  49c0		       79 e3 f0 	      adc	JoyMoveY,y
    484  49c3		       c9 08		      cmp	#$8
    485  49c5		       b0 02		      bcs	.abandon
    486  49c7		       85 88		      sta	highlight_row
    487  49c9				   .abandon
    488  49c9		       18		      clc
    489  49ca		       a5 8a		      lda	highlight_col
    490  49cc		       79 d3 f0 	      adc	JoyMoveX,y
    491  49cf		       c9 08		      cmp	#$8
    492  49d1		       b0 02		      bcs	.abandon2
    493  49d3		       85 8a		      sta	highlight_col
    494  49d5				   .abandon2
    495  49d5
    496  49d5		       a9 05		      lda	#5
    497  49d7		       85 8c		      sta	mdelay
    498  49d9
    499  49d9		       20 a2 f0 	      jsr	setCursorPriority
    500  49dc
    501  49dc
    502  49dc		       60	   .delaym    rts
    503  49dd
    504  49dd
    505  49dd							;---------------------------------------------------------------------------------------------------
    506  49dd
      0  49dd					      DEF	FlashPiece
      1  49dd				   BANK_FlashPiece SET	_CURRENT_BANK
      2  49dd
      3  49dd				   FlashPiece
    508  49dd					      SUBROUTINE
    509  49dd
    510  49dd							; Flash the selected piece
    511  49dd
    512  49dd		       c6 90		      dec	aiFlashDelay
    513  49df		       d0 09		      bne	.noFlashAi
    514  49e1
    515  49e1		       e6 96		      inc	aiFlashPhase
    516  49e3
    517  49e3		       a9 0a		      lda	#10
    518  49e5		       85 90		      sta	aiFlashDelay
    519  49e7
    520  49e7		       20 de fd 	      jsr	SAFE_CopySinglePiece
    521  49ea
    522  49ea		       60	   .noFlashAi rts
    523  49eb
    524  49eb							;---------------------------------------------------------------------------------------------------
    525  49eb
      0  49eb					      DEF	aiSelectDestinationSquare
      1  49eb				   BANK_aiSelectDestinationSquare SET	_CURRENT_BANK
      2  49eb
      3  49eb				   aiSelectDestinationSquare
    527  49eb					      SUBROUTINE
    528  49eb
    529  49eb							; Piece is selected and now we're looking for a button press on a destination square
    530  49eb							; we flash the piece on-and-off while we're doing that
    531  49eb
    532  49eb		       20 dd f1 	      jsr	FlashPiece
    533  49ee		       20 b1 f1 	      jsr	moveCursor
    534  49f1		       20 84 fd 	      jsr	SAFE_IsValidMoveToSquare
    535  49f4		       20 be f0 	      jsr	setCursorColours
    536  49f7
    537  49f7							; y = valid square
    538  49f7
    539  49f7		       a5 96		      lda	aiFlashPhase
    540  49f9		       29 01		      and	#1
    541  49fb		       d0 17		      bne	.noButton	; prevent EOR-error on flashing selected piece
    542  49fd
    543  49fd		       a5 4c		      lda	INPT4
    544  49ff		       30 13		      bmi	.noButton
    545  4a01
    546  4a01		       c0 ff		      cpy	#-1
    547  4a03		       d0 0b		      bne	.done	; valid square
    548  4a05
    549  4a05		       a5 92		      lda	aiToSquare
    550  4a07		       c5 91		      cmp	aiFromSquare	; is to==from?  that's a cancelllation
    551  4a09		       d0 09		      bne	.noButton	; no, so it's an INVALID square
    552  4a0b
      0  4a0b					      PHASE	AI_ReselectDebounce
      1  4a0b		       a9 0a		      lda	#AI_ReselectDebounce
      2  4a0d		       85 8f		      sta	aiPhase
    554  4a0f		       60		      rts
    555  4a10
      0  4a10				   .done      PHASE	AI_Quiescent	; destination selected!
      1  4a10		       a9 08		      lda	#AI_Quiescent
      2  4a12		       85 8f		      sta	aiPhase
    557  4a14
    558  4a14		       60	   .noButton  rts
    559  4a15
    560  4a15
    561  4a15							;---------------------------------------------------------------------------------------------------
    562  4a15
      0  4a15					      DEF	aiReselectDebounce
      1  4a15				   BANK_aiReselectDebounce SET	_CURRENT_BANK
      2  4a15
      3  4a15				   aiReselectDebounce
    564  4a15					      SUBROUTINE
    565  4a15
    566  4a15							; We've just cancelled the move. Wait for the button to be released
    567  4a15							; and then go back to selecting a piece to move
    568  4a15
    569  4a15		       a5 4c		      lda	INPT4
    570  4a17		       10 04		      bpl	.exit	; button still pressed, so wait
    571  4a19
      0  4a19					      PHASE	AI_SelectStartSquare
      1  4a19		       a9 01		      lda	#AI_SelectStartSquare
      2  4a1b		       85 8f		      sta	aiPhase
    573  4a1d		       60	   .exit      rts
    574  4a1e
    575  4a1e							;---------------------------------------------------------------------------------------------------
    576  4a1e
      0  4a1e					      DEF	aiQuiescent
      1  4a1e				   BANK_aiQuiescent SET	_CURRENT_BANK
      2  4a1e
      3  4a1e				   aiQuiescent
    578  4a1e					      SUBROUTINE
    579  4a1e
    580  4a1e		       a9 ff		      lda	#-1
    581  4a20		       85 88		      sta	highlight_row	;??? piece move error when removed...???!
    582  4a22
    583  4a22		       a5 91		      lda	aiFromSquare
    584  4a24		       85 9f		      sta	fromSquare
    585  4a26		       a5 92		      lda	aiToSquare
    586  4a28		       85 a1		      sta	toSquare
    587  4a2a
    588  4a2a		       a5 93		      lda	aiFromSquareX12
    589  4a2c		       85 86		      sta	fromX12
    590  4a2e		       a5 94		      lda	aiToSquareX12
    591  4a30		       85 87		      sta	toX12
    592  4a32
    593  4a32		       20 78 fd 	      jsr	SAFE_GetPiece
    594  4a35
    595  4a35		       a5 a6		      lda	aiPiece
    596  4a37		       85 a0		      sta	fromPiece
    597  4a39		       09 40		      ora	#FLAG_MOVED	; for K/R prevents usage in castling
    598  4a3b		       85 a2		      sta	toPiece
    599  4a3d
      0  4a3d					      PHASE	AI_Halt
      1  4a3d		       a9 09		      lda	#AI_Halt
      2  4a3f		       85 8f		      sta	aiPhase
    601  4a41		       60		      rts
    602  4a42
    603  4a42							;---------------------------------------------------------------------------------------------------
    604  4a42
      0  4a42					      DEF	aiHalt
      1  4a42				   BANK_aiHalt SET	_CURRENT_BANK
      2  4a42
      3  4a42				   aiHalt
    606  4a42					      SUBROUTINE
    607  4a42
    608  4a42							; Effectively halt at this point until the other state machine resets the AI state machine
    609  4a42
    610  4a42		       60		      rts
    611  4a43
    612  4a43							;---------------------------------------------------------------------------------------------------
    613  4a43
    614  4a43							;    align 256
      0  4a43					      DEF	PositionSprites
      1  4a43				   BANK_PositionSprites SET	_CURRENT_BANK
      2  4a43
      3  4a43				   PositionSprites
    616  4a43					      SUBROUTINE
    617  4a43
    618  4a43		       a4 8a		      ldy	highlight_col
    619  4a45
    620  4a45		       85 42		      sta	WSYNC	; 00	  Sync to start of scanline.
    621  4a47
    622  4a47		       b9 0f f3 	      lda	colToPixel,y
    623  4a4a
    624  4a4a		       38		      sec		; 02	  Set the carry flag so no borrow will be applied during the division.
    625  4a4b		       e9 0f	   .divideby15 sbc	#15	; 04	  Waste the necessary amount of time dividing X-pos by 15!
    626  4a4d		       b0 fc		      bcs	.divideby15	; 06/07  11/16/21/26/31/36/41/46/51/56/61/66
    627  4a4f
    628  4a4f		       a8		      tay
    629  4a50		       b9 0f f2 	      lda	fineAdjustTable,y	; 13 -> Consume 5 cycles by guaranteeing we cross a page boundary
    630  4a53		       85 60		      sta	HMP0
    631  4a55		       85 50		      sta	RESP0	; 21/ 26/31/36/41/46/51/56/61/66/71 - Set the rough position.
    632  4a57
    633  4a57		       85 42		      sta	WSYNC
    634  4a59		       85 6a		      sta	HMOVE
    635  4a5b
    636  4a5b		       60		      rts
    637  4a5c
    638  4a5c							; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
    639  4a5c							; fine adjustment value. This table is on a page boundary to guarantee the processor
    640  4a5c							; will cross a page boundary and waste a cycle in order to be at the precise position
    641  4a5c							; for a RESP0,x write
    642  4a5c
    643  4a5c
    644  4b00		       00 00 00 00*	      align	256
    645  4b00
    646  4b00				   fineAdjustBegin
    647  4b00
    648  4b00		       70		      DC.B	%01110000	; Left 7
    649  4b01		       60		      DC.B	%01100000	; Left 6
    650  4b02		       50		      DC.B	%01010000	; Left 5
    651  4b03		       40		      DC.B	%01000000	; Left 4
    652  4b04		       30		      DC.B	%00110000	; Left 3
    653  4b05		       20		      DC.B	%00100000	; Left 2
    654  4b06		       10		      DC.B	%00010000	; Left 1
    655  4b07		       00		      DC.B	%00000000	; No movement.
    656  4b08		       f0		      DC.B	%11110000	; Right 1
    657  4b09		       e0		      DC.B	%11100000	; Right 2
    658  4b0a		       d0		      DC.B	%11010000	; Right 3
    659  4b0b		       c0		      DC.B	%11000000	; Right 4
    660  4b0c		       b0		      DC.B	%10110000	; Right 5
    661  4b0d		       a0		      DC.B	%10100000	; Right 6
    662  4b0e		       90		      DC.B	%10010000	; Right 7
    663  4b0f
    664  4b0f		       f2 0f	   fineAdjustTable EQU	fineAdjustBegin - %11110001	; NOTE: %11110001 = -15
    665  4b0f
    666  4b0f
      0  4b0f					      OPTIONAL_PAGEBREAK	"colToPixel", 8
     10  4b0f					      LIST	ON
    668  4b0f		       00 14 28 3c*colToPixel .byte.b	0,20,40,60,80,100,120,140
    669  4b17
      0  4b17					      CHECK_BANK_SIZE	"BANK_StateMachine"
      1  4b17		       03 17	   .TEMP      =	* - BANK_START
 BANK_StateMachine (2K) SIZE =  $317 , FREE= $4e9
      2  4b17					      ECHO	"BANK_StateMachine", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  4b17				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  4b17				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  4b17				  -	      ERR
      6  4b17					      endif
    671  4b17
    672  4b17
    673  4b17							; EOF
------- FILE ./chess.asm
    357  4b17
------- FILE titleScreen.asm LEVEL 2 PASS 3
      0  4b17					      include	"titleScreen.asm"
      0  4b17					      NEWBANK	TITLESCREEN
      1  57c0 ????				      SEG	TITLESCREEN
      2  5000					      ORG	ORIGIN
      3  5000					      RORG	$F000
      4  5000				   BANK_START SET	*
      5  5000				   TITLESCREEN SET	ORIGIN / 2048
      6  5000				   ORIGIN     SET	ORIGIN + 2048
      7  5000				   _CURRENT_BANK SET	TITLESCREEN
      2  5000
      3  5000				   OverscanTime2
      4  5000		       1a 1a		      .byte.b	26, 26
      5  5002		       20 20		      .byte.b	32, 32
      6  5004
      7  5004				   colvec
      8  5004		       00 f1 d8 f1	      .word.w	colr_ntsc2, colr_pal
      9  5008
     10  5008
     11  5008		       32 32	   VBlankTime .byte.b	50,50
     12  500a
      0  500a					      DEF	TitleScreen
      1  500a				   BANK_TitleScreen SET	_CURRENT_BANK
      2  500a
      3  500a				   TitleScreen
     14  500a
     15  500a							; Start of new frame
     16  500a
     17  500a							; Start of vertical blank processing
     18  500a
     19  500a				   TitleSequence
     20  500a
     21  500a		       a9 00		      lda	#%00000000
     22  500c		       85 4a		      sta	CTRLPF
     23  500e		       85 49		      sta	COLUBK
     24  5010
     25  5010		       a2 00		      ldx	#0	;Platform
     26  5012		       a9 00		      lda	#<colr_ntsc2	;colvec,x
     27  5014		       85 a7		      sta	__colour_table
     28  5016		       a9 f1		      lda	#>colr_ntsc2	;colvec+1,x
     29  5018		       85 a8		      sta	__colour_table+1
     30  501a
     31  501a							;		  sta rndHi
     32  501a							;		  sta rnd
     33  501a
     34  501a
     35  501a				  -	      if	0
     36  501a				  -	      lda	#0
     37  501a				  -	      sta	digit
     38  501a				  -	      lda	#$10
     39  501a				  -	      sta	digit+1
     40  501a				  -	      lda	#$20
     41  501a				  -	      sta	digit+2
     42  501a					      endif
     43  501a
     44  501a
     45  501a
     46  501a
      0  501a					      RESYNC
      1  501a
      2  501a		       a9 02		      lda	#%10
      3  501c		       85 41		      sta	VBLANK
      4  501e
      5  501e		       a2 08		      ldx	#8
      6  5020				   .loopResync
      0  5020					      VERTICAL_SYNC
      1  5020		       a9 0e		      lda	#%1110
      2  5022		       85 42	   .VSLP1     sta	WSYNC
      3  5024		       85 40		      sta	VSYNC
      4  5026		       4a		      lsr
      5  5027		       d0 f9		      bne	.VSLP1
      8  5029
      9  5029		       a0 88		      ldy	#SCANLINES_NTSC/2 - 2
     10  502b		       a5 a5		      lda	Platform
     11  502d		       49 02		      eor	#PAL_50
     12  502f		       d0 02		      bne	.ntsc
     13  5031		       a0 9a		      ldy	#SCANLINES_PAL/2 - 2
     14  5033				   .ntsc
     15  5033				   .loopWait
     16  5033		       85 42		      sta	WSYNC
     17  5035		       85 42		      sta	WSYNC
     18  5037		       88		      dey
     19  5038		       d0 f9		      bne	.loopWait
     20  503a		       ca		      dex
     21  503b		       d0 e3		      bne	.loopResync
     48  503d
     49  503d				   RestartFrame0
     50  503d
     51  503d				  -	      if	0
     52  503d				  -	      ldx	#2
     53  503d				  -rollcols   clc
     54  503d				  -	      lda	digit+2
     55  503d				  -	      adc	#$10
     56  503d				  -	      sta	digit+2
     57  503d				  -	      bcc	finxc
     58  503d				  -	      dex
     59  503d				  -	      bpl	rollcols
     60  503d				  -finxc
     61  503d					      endif
     62  503d
      0  503d					      DEF	RestartFrame
      1  503d				   BANK_RestartFrame SET	_CURRENT_BANK
      2  503d
      3  503d				   RestartFrame
     64  503d		       a9 00		      LDA	#0
     65  503f		       a9 0e		      lda	#%1110	; VSYNC ON
     66  5041		       85 42	   .loopVSync2 sta	WSYNC
     67  5043		       85 40		      sta	VSYNC
     68  5045		       4a		      lsr
     69  5046		       d0 f9		      bne	.loopVSync2	; branch until VYSNC has been reset
     70  5048
     71  5048							;------------------------------------------------------------------
     72  5048
     73  5048		       a6 a5		      ldx	Platform
     74  504a		       bc 08 f0 	      ldy	VBlankTime,x
     75  504d		       8c 96 02 	      sty	TIM64T
     76  5050
     77  5050
     78  5050				  -	      if	0
     79  5050				  -	      lda	SWCHB
     80  5050				  -	      rol
     81  5050				  -	      rol
     82  5050				  -	      rol
     83  5050				  -	      and	#%11
     84  5050				  -	      eor	#PAL
     85  5050				  -	      cmp	Platform
     86  5050				  -	      beq	platOK
     87  5050				  -	      sta	Platform
     88  5050				  -	      jmp	TitleSequence
     89  5050				  -platOK
     90  5050					      endif
     91  5050
     92  5050		       e6 81	   k2	      inc	rnd
     93  5052		       f0 fc		      beq	k2
     94  5054
     95  5054
     96  5054		       85 42	   VerticalBlank sta	WSYNC
     97  5056		       ad 84 02 	      lda	INTIM
     98  5059		       d0 f9		      bne	VerticalBlank
     99  505b		       85 41		      sta	VBLANK
    100  505d
    101  505d							;sta COLUBK
    102  505d
    103  505d							;------------------------------------------------------------------
    104  505d
    105  505d							; Do X scanlines of color-changing (our picture)
    106  505d
    107  505d		       a0 d1		      ldy	#210-1	; this counts our scanline number
    108  505f		       a2 03	   SokoLogo   ldx	#3
    109  5061		       b1 a7	   triplet    lda	(__colour_table),y
    110  5063							;    eor digit-1,x
    111  5063		       85 42		      sta	WSYNC
    112  5065		       85 48		      sta	COLUPF	; 3
    113  5067
    114  5067		       b9 b0 f2 	      lda	COL_0,y	; 5
    115  506a		       85 4d		      sta	PF0	; 3   @11
    116  506c		       b9 88 f3 	      lda	COL_1,y	; 5
    117  506f		       85 4e		      sta	PF1	; 3   @19
    118  5071		       b9 60 f4 	      lda	COL_2,y	; 5
    119  5074		       85 4f		      sta	PF2	; 3   @27
    120  5076
    121  5076		       b9 38 f5 	      lda	COL_3,y	; 5
    122  5079		       85 4d		      sta	PF0	; 3   @35
      0  507b					      SLEEP	2	; @37
      1  507b				   .CYCLES    SET	2
      2  507b
      3  507b				  -	      IF	.CYCLES < 2
      4  507b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  507b				  -	      ERR
      6  507b					      ENDIF
      7  507b
      8  507b				  -	      IF	.CYCLES & 1
      9  507b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  507b				  -	      nop	0
     11  507b				  -	      ELSE
     12  507b				  -	      bit	VSYNC
     13  507b				  -	      ENDIF
     14  507b				  -.CYCLES    SET	.CYCLES - 3
     15  507b					      ENDIF
     16  507b
     17  507b					      REPEAT	.CYCLES / 2
     18  507b		       ea		      nop
     19  507c					      REPEND
    124  507c		       b9 10 f6 	      lda	COL_4,y	; 5
    125  507f		       85 4e		      sta	PF1	; 3   @45
      0  5081					      SLEEP	3	; @45
      1  5081				   .CYCLES    SET	3
      2  5081
      3  5081				  -	      IF	.CYCLES < 2
      4  5081				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  5081				  -	      ERR
      6  5081					      ENDIF
      7  5081
      8  5081					      IF	.CYCLES & 1
      9  5081					      IFNCONST	NO_ILLEGAL_OPCODES
     10  5081		       04 00		      nop	0
     11  5083				  -	      ELSE
     12  5083				  -	      bit	VSYNC
     13  5083					      ENDIF
     14  5083				   .CYCLES    SET	.CYCLES - 3
     15  5083					      ENDIF
     16  5083
     17  5083				  -	      REPEAT	.CYCLES / 2
     18  5083				  -	      nop
     19  5083					      REPEND
    127  5083		       b9 e8 f6 	      lda	COL_5,y	; 5
    128  5086		       85 4f		      sta	PF2	; 3
    129  5088
    130  5088		       88		      dey		; 2
    131  5089		       ca		      dex		; 2
    132  508a		       d0 d5		      bne	triplet	; 2(3)
    133  508c
    134  508c		       c0 ff		      cpy	#-1	; 2
    135  508e		       d0 cf		      bne	SokoLogo	; 2(3)
    136  5090
    137  5090							;lda #0
    138  5090							;sta PF0
    139  5090							;sta PF1
    140  5090							;sta PF2
    141  5090
    142  5090		       a6 a5		      ldx	Platform
    143  5092		       bd 00 f0 	      lda	OverscanTime2,x
    144  5095		       8d 96 02 	      sta	TIM64T
    145  5098
    146  5098				  -	      if	0
    147  5098				  -	      sta	WSYNC
    148  5098				  -	      sta	WSYNC
    149  5098				  -	      sta	WSYNC
    150  5098				  -	      sta	WSYNC
    151  5098				  -	      sta	WSYNC
    152  5098				  -	      SLEEP	8
    153  5098				  -	      jsr	SokoScreen
    154  5098				  -
    155  5098				  -	      lda	#0
    156  5098				  -	      sta	BoardScrollX
    157  5098				  -	      sta	BoardScrollY
    158  5098					      endif
    159  5098
    160  5098							;		ldy #63
    161  5098							;bot2		 sta WSYNC
    162  5098							;		dey
    163  5098							;		bpl bot2
    164  5098
    165  5098							;--------------------------------------------------------------------------
    166  5098
    167  5098		       a9 00		      lda	#0
    168  509a		       85 4d		      sta	PF0
    169  509c		       85 4e		      sta	PF1
    170  509e		       85 4f		      sta	PF2
    171  50a0
    172  50a0
      0  50a0					      NEXT_RANDOM
      1  50a0		       a5 81		      lda	rnd
      2  50a2		       4a		      lsr
      3  50a3		       90 02		      bcc	.skipEOR
      4  50a5		       49 fe		      eor	#RND_EOR_VAL
      5  50a7		       85 81	   .skipEOR   sta	rnd
    174  50a9
    175  50a9							; D1 VBLANK turns off beam
    176  50a9							; It needs to be turned on 37 scanlines later
    177  50a9
    178  50a9				   oscan
    179  50a9		       ad 84 02 	      lda	INTIM
    180  50ac		       d0 fb		      bne	oscan
    181  50ae
    182  50ae		       a9 42		      lda	#%01000010	; bit6 is not required
    183  50b0		       85 41		      sta	VBLANK	; end of screen - enter blanking
    184  50b2
    185  50b2				  -	      if	0
    186  50b2				  -	      inc	rnd
    187  50b2				  -	      bne	rdd
    188  50b2				  -	      inc	rndHi
    189  50b2				  -rdd
    190  50b2				  -
    191  50b2				  -	      dec	digitick
    192  50b2				  -	      bpl	ret2
    193  50b2				  -	      lda	#40
    194  50b2				  -	      sta	digitick
    195  50b2				  -
    196  50b2				  -	      jsr	Random
    197  50b2				  -	      and	#3
    198  50b2				  -	      beq	ret2
    199  50b2				  -	      tax
    200  50b2				  -	      jsr	Random
    201  50b2				  -	      and	#$F0
    202  50b2				  -	      sta	digit-1,x
    203  50b2				  -	      jmp	RestartFrame0
    204  50b2				  -
    205  50b2				  -ret2
    206  50b2					      endif
    207  50b2
    208  50b2
    209  50b2		       a5 4c		      lda	INPT4
    210  50b4		       10 03		      bpl	ret
    211  50b6
    212  50b6		       4c 3d f0 	      jmp	RestartFrame
    213  50b9
    214  50b9				   ret
    215  50b9		       60		      rts
    216  50ba
    217  50ba
    218  50ba
    219  50ba					      MAC	lumtable
    220  50ba							; {4} MIN LUM 1
    221  50ba							; {5} MIN LUM 2
    222  50ba							; {6} MIN LUM 3
    223  50ba
    224  50ba				   .LUM1      SET	{4}*256
    225  50ba				   .LUM2      SET	{5}*256
    226  50ba				   .LUM3      SET	{6}*256
    227  50ba
    228  50ba				   .STEP1     =	(256*({7}-{4}))/72
    229  50ba				   .STEP2     =	(256*({8}-{5}))/72
    230  50ba				   .STEP3     =	(256*({9}-{6}))/72
    231  50ba
    232  50ba					      REPEAT	72
    233  50ba					      .byte	{1}+(.LUM1/256)
    234  50ba					      .byte	{2}+(.LUM2/256)
    235  50ba					      .byte	{3}+(.LUM3/256)
    236  50ba
    237  50ba							;    ECHO {1}+(.LUM1/256)
    238  50ba							;    ECHO {2}+(.LUM1/256)
    239  50ba							;    ECHO {3}+(.LUM1/256)
    240  50ba
    241  50ba				   .LUM1      SET	.LUM1 + .STEP1
    242  50ba				   .LUM2      SET	.LUM2 + .STEP2
    243  50ba				   .LUM3      SET	.LUM3 + .STEP3
    244  50ba					      REPEND
    245  50ba					      ENDM		;{1}{2}{3} base colours
    246  50ba
    247  50ba							;colr_pal    LUMTABLE $B0,$30,$A0,0,8,4 ;2,4,6
    248  50ba							;    OPTIONAL_PAGEBREAK "colr_ntsc", 72*3
    249  50ba
    250  5100		       00 00 00 00*	      align	256
    251  5100							;    ECHO "NTSC LUMS"
    252  5100				   colr_ntsc2
      0  5100					      LUMTABLE	$40,$20,$90,$4,$6,$8,$4,$6,$8
      1  5100
      2  5100
      3  5100
      4  5100
      5  5100				   .LUM1      SET	$4*256
      6  5100				   .LUM2      SET	$6*256
      7  5100				   .LUM3      SET	$8*256
      8  5100
      9  5100		       00 00	   .STEP1     =	(256*($4-$4))/72
     10  5100		       00 00	   .STEP2     =	(256*($6-$6))/72
     11  5100		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  5100
     13  5100					      REPEAT	72
     14  5100		       44		      .byte.b	$40+(.LUM1/256)
     15  5101		       26		      .byte.b	$20+(.LUM2/256)
     16  5102		       98		      .byte.b	$90+(.LUM3/256)
     17  5103
     18  5103
     19  5103
     20  5103
     21  5103
     22  5103				   .LUM1      SET	.LUM1 + .STEP1
     23  5103				   .LUM2      SET	.LUM2 + .STEP2
     24  5103				   .LUM3      SET	.LUM3 + .STEP3
     13  5103					      REPEND
     14  5103		       44		      .byte.b	$40+(.LUM1/256)
     15  5104		       26		      .byte.b	$20+(.LUM2/256)
     16  5105		       98		      .byte.b	$90+(.LUM3/256)
     17  5106
     18  5106
     19  5106
     20  5106
     21  5106
     22  5106				   .LUM1      SET	.LUM1 + .STEP1
     23  5106				   .LUM2      SET	.LUM2 + .STEP2
     24  5106				   .LUM3      SET	.LUM3 + .STEP3
     13  5106					      REPEND
     14  5106		       44		      .byte.b	$40+(.LUM1/256)
     15  5107		       26		      .byte.b	$20+(.LUM2/256)
     16  5108		       98		      .byte.b	$90+(.LUM3/256)
     17  5109
     18  5109
     19  5109
     20  5109
     21  5109
     22  5109				   .LUM1      SET	.LUM1 + .STEP1
     23  5109				   .LUM2      SET	.LUM2 + .STEP2
     24  5109				   .LUM3      SET	.LUM3 + .STEP3
     13  5109					      REPEND
     14  5109		       44		      .byte.b	$40+(.LUM1/256)
     15  510a		       26		      .byte.b	$20+(.LUM2/256)
     16  510b		       98		      .byte.b	$90+(.LUM3/256)
     17  510c
     18  510c
     19  510c
     20  510c
     21  510c
     22  510c				   .LUM1      SET	.LUM1 + .STEP1
     23  510c				   .LUM2      SET	.LUM2 + .STEP2
     24  510c				   .LUM3      SET	.LUM3 + .STEP3
     13  510c					      REPEND
     14  510c		       44		      .byte.b	$40+(.LUM1/256)
     15  510d		       26		      .byte.b	$20+(.LUM2/256)
     16  510e		       98		      .byte.b	$90+(.LUM3/256)
     17  510f
     18  510f
     19  510f
     20  510f
     21  510f
     22  510f				   .LUM1      SET	.LUM1 + .STEP1
     23  510f				   .LUM2      SET	.LUM2 + .STEP2
     24  510f				   .LUM3      SET	.LUM3 + .STEP3
     13  510f					      REPEND
     14  510f		       44		      .byte.b	$40+(.LUM1/256)
     15  5110		       26		      .byte.b	$20+(.LUM2/256)
     16  5111		       98		      .byte.b	$90+(.LUM3/256)
     17  5112
     18  5112
     19  5112
     20  5112
     21  5112
     22  5112				   .LUM1      SET	.LUM1 + .STEP1
     23  5112				   .LUM2      SET	.LUM2 + .STEP2
     24  5112				   .LUM3      SET	.LUM3 + .STEP3
     13  5112					      REPEND
     14  5112		       44		      .byte.b	$40+(.LUM1/256)
     15  5113		       26		      .byte.b	$20+(.LUM2/256)
     16  5114		       98		      .byte.b	$90+(.LUM3/256)
     17  5115
     18  5115
     19  5115
     20  5115
     21  5115
     22  5115				   .LUM1      SET	.LUM1 + .STEP1
     23  5115				   .LUM2      SET	.LUM2 + .STEP2
     24  5115				   .LUM3      SET	.LUM3 + .STEP3
     13  5115					      REPEND
     14  5115		       44		      .byte.b	$40+(.LUM1/256)
     15  5116		       26		      .byte.b	$20+(.LUM2/256)
     16  5117		       98		      .byte.b	$90+(.LUM3/256)
     17  5118
     18  5118
     19  5118
     20  5118
     21  5118
     22  5118				   .LUM1      SET	.LUM1 + .STEP1
     23  5118				   .LUM2      SET	.LUM2 + .STEP2
     24  5118				   .LUM3      SET	.LUM3 + .STEP3
     13  5118					      REPEND
     14  5118		       44		      .byte.b	$40+(.LUM1/256)
     15  5119		       26		      .byte.b	$20+(.LUM2/256)
     16  511a		       98		      .byte.b	$90+(.LUM3/256)
     17  511b
     18  511b
     19  511b
     20  511b
     21  511b
     22  511b				   .LUM1      SET	.LUM1 + .STEP1
     23  511b				   .LUM2      SET	.LUM2 + .STEP2
     24  511b				   .LUM3      SET	.LUM3 + .STEP3
     13  511b					      REPEND
     14  511b		       44		      .byte.b	$40+(.LUM1/256)
     15  511c		       26		      .byte.b	$20+(.LUM2/256)
     16  511d		       98		      .byte.b	$90+(.LUM3/256)
     17  511e
     18  511e
     19  511e
     20  511e
     21  511e
     22  511e				   .LUM1      SET	.LUM1 + .STEP1
     23  511e				   .LUM2      SET	.LUM2 + .STEP2
     24  511e				   .LUM3      SET	.LUM3 + .STEP3
     13  511e					      REPEND
     14  511e		       44		      .byte.b	$40+(.LUM1/256)
     15  511f		       26		      .byte.b	$20+(.LUM2/256)
     16  5120		       98		      .byte.b	$90+(.LUM3/256)
     17  5121
     18  5121
     19  5121
     20  5121
     21  5121
     22  5121				   .LUM1      SET	.LUM1 + .STEP1
     23  5121				   .LUM2      SET	.LUM2 + .STEP2
     24  5121				   .LUM3      SET	.LUM3 + .STEP3
     13  5121					      REPEND
     14  5121		       44		      .byte.b	$40+(.LUM1/256)
     15  5122		       26		      .byte.b	$20+(.LUM2/256)
     16  5123		       98		      .byte.b	$90+(.LUM3/256)
     17  5124
     18  5124
     19  5124
     20  5124
     21  5124
     22  5124				   .LUM1      SET	.LUM1 + .STEP1
     23  5124				   .LUM2      SET	.LUM2 + .STEP2
     24  5124				   .LUM3      SET	.LUM3 + .STEP3
     13  5124					      REPEND
     14  5124		       44		      .byte.b	$40+(.LUM1/256)
     15  5125		       26		      .byte.b	$20+(.LUM2/256)
     16  5126		       98		      .byte.b	$90+(.LUM3/256)
     17  5127
     18  5127
     19  5127
     20  5127
     21  5127
     22  5127				   .LUM1      SET	.LUM1 + .STEP1
     23  5127				   .LUM2      SET	.LUM2 + .STEP2
     24  5127				   .LUM3      SET	.LUM3 + .STEP3
     13  5127					      REPEND
     14  5127		       44		      .byte.b	$40+(.LUM1/256)
     15  5128		       26		      .byte.b	$20+(.LUM2/256)
     16  5129		       98		      .byte.b	$90+(.LUM3/256)
     17  512a
     18  512a
     19  512a
     20  512a
     21  512a
     22  512a				   .LUM1      SET	.LUM1 + .STEP1
     23  512a				   .LUM2      SET	.LUM2 + .STEP2
     24  512a				   .LUM3      SET	.LUM3 + .STEP3
     13  512a					      REPEND
     14  512a		       44		      .byte.b	$40+(.LUM1/256)
     15  512b		       26		      .byte.b	$20+(.LUM2/256)
     16  512c		       98		      .byte.b	$90+(.LUM3/256)
     17  512d
     18  512d
     19  512d
     20  512d
     21  512d
     22  512d				   .LUM1      SET	.LUM1 + .STEP1
     23  512d				   .LUM2      SET	.LUM2 + .STEP2
     24  512d				   .LUM3      SET	.LUM3 + .STEP3
     13  512d					      REPEND
     14  512d		       44		      .byte.b	$40+(.LUM1/256)
     15  512e		       26		      .byte.b	$20+(.LUM2/256)
     16  512f		       98		      .byte.b	$90+(.LUM3/256)
     17  5130
     18  5130
     19  5130
     20  5130
     21  5130
     22  5130				   .LUM1      SET	.LUM1 + .STEP1
     23  5130				   .LUM2      SET	.LUM2 + .STEP2
     24  5130				   .LUM3      SET	.LUM3 + .STEP3
     13  5130					      REPEND
     14  5130		       44		      .byte.b	$40+(.LUM1/256)
     15  5131		       26		      .byte.b	$20+(.LUM2/256)
     16  5132		       98		      .byte.b	$90+(.LUM3/256)
     17  5133
     18  5133
     19  5133
     20  5133
     21  5133
     22  5133				   .LUM1      SET	.LUM1 + .STEP1
     23  5133				   .LUM2      SET	.LUM2 + .STEP2
     24  5133				   .LUM3      SET	.LUM3 + .STEP3
     13  5133					      REPEND
     14  5133		       44		      .byte.b	$40+(.LUM1/256)
     15  5134		       26		      .byte.b	$20+(.LUM2/256)
     16  5135		       98		      .byte.b	$90+(.LUM3/256)
     17  5136
     18  5136
     19  5136
     20  5136
     21  5136
     22  5136				   .LUM1      SET	.LUM1 + .STEP1
     23  5136				   .LUM2      SET	.LUM2 + .STEP2
     24  5136				   .LUM3      SET	.LUM3 + .STEP3
     13  5136					      REPEND
     14  5136		       44		      .byte.b	$40+(.LUM1/256)
     15  5137		       26		      .byte.b	$20+(.LUM2/256)
     16  5138		       98		      .byte.b	$90+(.LUM3/256)
     17  5139
     18  5139
     19  5139
     20  5139
     21  5139
     22  5139				   .LUM1      SET	.LUM1 + .STEP1
     23  5139				   .LUM2      SET	.LUM2 + .STEP2
     24  5139				   .LUM3      SET	.LUM3 + .STEP3
     13  5139					      REPEND
     14  5139		       44		      .byte.b	$40+(.LUM1/256)
     15  513a		       26		      .byte.b	$20+(.LUM2/256)
     16  513b		       98		      .byte.b	$90+(.LUM3/256)
     17  513c
     18  513c
     19  513c
     20  513c
     21  513c
     22  513c				   .LUM1      SET	.LUM1 + .STEP1
     23  513c				   .LUM2      SET	.LUM2 + .STEP2
     24  513c				   .LUM3      SET	.LUM3 + .STEP3
     13  513c					      REPEND
     14  513c		       44		      .byte.b	$40+(.LUM1/256)
     15  513d		       26		      .byte.b	$20+(.LUM2/256)
     16  513e		       98		      .byte.b	$90+(.LUM3/256)
     17  513f
     18  513f
     19  513f
     20  513f
     21  513f
     22  513f				   .LUM1      SET	.LUM1 + .STEP1
     23  513f				   .LUM2      SET	.LUM2 + .STEP2
     24  513f				   .LUM3      SET	.LUM3 + .STEP3
     13  513f					      REPEND
     14  513f		       44		      .byte.b	$40+(.LUM1/256)
     15  5140		       26		      .byte.b	$20+(.LUM2/256)
     16  5141		       98		      .byte.b	$90+(.LUM3/256)
     17  5142
     18  5142
     19  5142
     20  5142
     21  5142
     22  5142				   .LUM1      SET	.LUM1 + .STEP1
     23  5142				   .LUM2      SET	.LUM2 + .STEP2
     24  5142				   .LUM3      SET	.LUM3 + .STEP3
     13  5142					      REPEND
     14  5142		       44		      .byte.b	$40+(.LUM1/256)
     15  5143		       26		      .byte.b	$20+(.LUM2/256)
     16  5144		       98		      .byte.b	$90+(.LUM3/256)
     17  5145
     18  5145
     19  5145
     20  5145
     21  5145
     22  5145				   .LUM1      SET	.LUM1 + .STEP1
     23  5145				   .LUM2      SET	.LUM2 + .STEP2
     24  5145				   .LUM3      SET	.LUM3 + .STEP3
     13  5145					      REPEND
     14  5145		       44		      .byte.b	$40+(.LUM1/256)
     15  5146		       26		      .byte.b	$20+(.LUM2/256)
     16  5147		       98		      .byte.b	$90+(.LUM3/256)
     17  5148
     18  5148
     19  5148
     20  5148
     21  5148
     22  5148				   .LUM1      SET	.LUM1 + .STEP1
     23  5148				   .LUM2      SET	.LUM2 + .STEP2
     24  5148				   .LUM3      SET	.LUM3 + .STEP3
     13  5148					      REPEND
     14  5148		       44		      .byte.b	$40+(.LUM1/256)
     15  5149		       26		      .byte.b	$20+(.LUM2/256)
     16  514a		       98		      .byte.b	$90+(.LUM3/256)
     17  514b
     18  514b
     19  514b
     20  514b
     21  514b
     22  514b				   .LUM1      SET	.LUM1 + .STEP1
     23  514b				   .LUM2      SET	.LUM2 + .STEP2
     24  514b				   .LUM3      SET	.LUM3 + .STEP3
     13  514b					      REPEND
     14  514b		       44		      .byte.b	$40+(.LUM1/256)
     15  514c		       26		      .byte.b	$20+(.LUM2/256)
     16  514d		       98		      .byte.b	$90+(.LUM3/256)
     17  514e
     18  514e
     19  514e
     20  514e
     21  514e
     22  514e				   .LUM1      SET	.LUM1 + .STEP1
     23  514e				   .LUM2      SET	.LUM2 + .STEP2
     24  514e				   .LUM3      SET	.LUM3 + .STEP3
     13  514e					      REPEND
     14  514e		       44		      .byte.b	$40+(.LUM1/256)
     15  514f		       26		      .byte.b	$20+(.LUM2/256)
     16  5150		       98		      .byte.b	$90+(.LUM3/256)
     17  5151
     18  5151
     19  5151
     20  5151
     21  5151
     22  5151				   .LUM1      SET	.LUM1 + .STEP1
     23  5151				   .LUM2      SET	.LUM2 + .STEP2
     24  5151				   .LUM3      SET	.LUM3 + .STEP3
     13  5151					      REPEND
     14  5151		       44		      .byte.b	$40+(.LUM1/256)
     15  5152		       26		      .byte.b	$20+(.LUM2/256)
     16  5153		       98		      .byte.b	$90+(.LUM3/256)
     17  5154
     18  5154
     19  5154
     20  5154
     21  5154
     22  5154				   .LUM1      SET	.LUM1 + .STEP1
     23  5154				   .LUM2      SET	.LUM2 + .STEP2
     24  5154				   .LUM3      SET	.LUM3 + .STEP3
     13  5154					      REPEND
     14  5154		       44		      .byte.b	$40+(.LUM1/256)
     15  5155		       26		      .byte.b	$20+(.LUM2/256)
     16  5156		       98		      .byte.b	$90+(.LUM3/256)
     17  5157
     18  5157
     19  5157
     20  5157
     21  5157
     22  5157				   .LUM1      SET	.LUM1 + .STEP1
     23  5157				   .LUM2      SET	.LUM2 + .STEP2
     24  5157				   .LUM3      SET	.LUM3 + .STEP3
     13  5157					      REPEND
     14  5157		       44		      .byte.b	$40+(.LUM1/256)
     15  5158		       26		      .byte.b	$20+(.LUM2/256)
     16  5159		       98		      .byte.b	$90+(.LUM3/256)
     17  515a
     18  515a
     19  515a
     20  515a
     21  515a
     22  515a				   .LUM1      SET	.LUM1 + .STEP1
     23  515a				   .LUM2      SET	.LUM2 + .STEP2
     24  515a				   .LUM3      SET	.LUM3 + .STEP3
     13  515a					      REPEND
     14  515a		       44		      .byte.b	$40+(.LUM1/256)
     15  515b		       26		      .byte.b	$20+(.LUM2/256)
     16  515c		       98		      .byte.b	$90+(.LUM3/256)
     17  515d
     18  515d
     19  515d
     20  515d
     21  515d
     22  515d				   .LUM1      SET	.LUM1 + .STEP1
     23  515d				   .LUM2      SET	.LUM2 + .STEP2
     24  515d				   .LUM3      SET	.LUM3 + .STEP3
     13  515d					      REPEND
     14  515d		       44		      .byte.b	$40+(.LUM1/256)
     15  515e		       26		      .byte.b	$20+(.LUM2/256)
     16  515f		       98		      .byte.b	$90+(.LUM3/256)
     17  5160
     18  5160
     19  5160
     20  5160
     21  5160
     22  5160				   .LUM1      SET	.LUM1 + .STEP1
     23  5160				   .LUM2      SET	.LUM2 + .STEP2
     24  5160				   .LUM3      SET	.LUM3 + .STEP3
     13  5160					      REPEND
     14  5160		       44		      .byte.b	$40+(.LUM1/256)
     15  5161		       26		      .byte.b	$20+(.LUM2/256)
     16  5162		       98		      .byte.b	$90+(.LUM3/256)
     17  5163
     18  5163
     19  5163
     20  5163
     21  5163
     22  5163				   .LUM1      SET	.LUM1 + .STEP1
     23  5163				   .LUM2      SET	.LUM2 + .STEP2
     24  5163				   .LUM3      SET	.LUM3 + .STEP3
     13  5163					      REPEND
     14  5163		       44		      .byte.b	$40+(.LUM1/256)
     15  5164		       26		      .byte.b	$20+(.LUM2/256)
     16  5165		       98		      .byte.b	$90+(.LUM3/256)
     17  5166
     18  5166
     19  5166
     20  5166
     21  5166
     22  5166				   .LUM1      SET	.LUM1 + .STEP1
     23  5166				   .LUM2      SET	.LUM2 + .STEP2
     24  5166				   .LUM3      SET	.LUM3 + .STEP3
     13  5166					      REPEND
     14  5166		       44		      .byte.b	$40+(.LUM1/256)
     15  5167		       26		      .byte.b	$20+(.LUM2/256)
     16  5168		       98		      .byte.b	$90+(.LUM3/256)
     17  5169
     18  5169
     19  5169
     20  5169
     21  5169
     22  5169				   .LUM1      SET	.LUM1 + .STEP1
     23  5169				   .LUM2      SET	.LUM2 + .STEP2
     24  5169				   .LUM3      SET	.LUM3 + .STEP3
     13  5169					      REPEND
     14  5169		       44		      .byte.b	$40+(.LUM1/256)
     15  516a		       26		      .byte.b	$20+(.LUM2/256)
     16  516b		       98		      .byte.b	$90+(.LUM3/256)
     17  516c
     18  516c
     19  516c
     20  516c
     21  516c
     22  516c				   .LUM1      SET	.LUM1 + .STEP1
     23  516c				   .LUM2      SET	.LUM2 + .STEP2
     24  516c				   .LUM3      SET	.LUM3 + .STEP3
     13  516c					      REPEND
     14  516c		       44		      .byte.b	$40+(.LUM1/256)
     15  516d		       26		      .byte.b	$20+(.LUM2/256)
     16  516e		       98		      .byte.b	$90+(.LUM3/256)
     17  516f
     18  516f
     19  516f
     20  516f
     21  516f
     22  516f				   .LUM1      SET	.LUM1 + .STEP1
     23  516f				   .LUM2      SET	.LUM2 + .STEP2
     24  516f				   .LUM3      SET	.LUM3 + .STEP3
     13  516f					      REPEND
     14  516f		       44		      .byte.b	$40+(.LUM1/256)
     15  5170		       26		      .byte.b	$20+(.LUM2/256)
     16  5171		       98		      .byte.b	$90+(.LUM3/256)
     17  5172
     18  5172
     19  5172
     20  5172
     21  5172
     22  5172				   .LUM1      SET	.LUM1 + .STEP1
     23  5172				   .LUM2      SET	.LUM2 + .STEP2
     24  5172				   .LUM3      SET	.LUM3 + .STEP3
     13  5172					      REPEND
     14  5172		       44		      .byte.b	$40+(.LUM1/256)
     15  5173		       26		      .byte.b	$20+(.LUM2/256)
     16  5174		       98		      .byte.b	$90+(.LUM3/256)
     17  5175
     18  5175
     19  5175
     20  5175
     21  5175
     22  5175				   .LUM1      SET	.LUM1 + .STEP1
     23  5175				   .LUM2      SET	.LUM2 + .STEP2
     24  5175				   .LUM3      SET	.LUM3 + .STEP3
     13  5175					      REPEND
     14  5175		       44		      .byte.b	$40+(.LUM1/256)
     15  5176		       26		      .byte.b	$20+(.LUM2/256)
     16  5177		       98		      .byte.b	$90+(.LUM3/256)
     17  5178
     18  5178
     19  5178
     20  5178
     21  5178
     22  5178				   .LUM1      SET	.LUM1 + .STEP1
     23  5178				   .LUM2      SET	.LUM2 + .STEP2
     24  5178				   .LUM3      SET	.LUM3 + .STEP3
     13  5178					      REPEND
     14  5178		       44		      .byte.b	$40+(.LUM1/256)
     15  5179		       26		      .byte.b	$20+(.LUM2/256)
     16  517a		       98		      .byte.b	$90+(.LUM3/256)
     17  517b
     18  517b
     19  517b
     20  517b
     21  517b
     22  517b				   .LUM1      SET	.LUM1 + .STEP1
     23  517b				   .LUM2      SET	.LUM2 + .STEP2
     24  517b				   .LUM3      SET	.LUM3 + .STEP3
     13  517b					      REPEND
     14  517b		       44		      .byte.b	$40+(.LUM1/256)
     15  517c		       26		      .byte.b	$20+(.LUM2/256)
     16  517d		       98		      .byte.b	$90+(.LUM3/256)
     17  517e
     18  517e
     19  517e
     20  517e
     21  517e
     22  517e				   .LUM1      SET	.LUM1 + .STEP1
     23  517e				   .LUM2      SET	.LUM2 + .STEP2
     24  517e				   .LUM3      SET	.LUM3 + .STEP3
     13  517e					      REPEND
     14  517e		       44		      .byte.b	$40+(.LUM1/256)
     15  517f		       26		      .byte.b	$20+(.LUM2/256)
     16  5180		       98		      .byte.b	$90+(.LUM3/256)
     17  5181
     18  5181
     19  5181
     20  5181
     21  5181
     22  5181				   .LUM1      SET	.LUM1 + .STEP1
     23  5181				   .LUM2      SET	.LUM2 + .STEP2
     24  5181				   .LUM3      SET	.LUM3 + .STEP3
     13  5181					      REPEND
     14  5181		       44		      .byte.b	$40+(.LUM1/256)
     15  5182		       26		      .byte.b	$20+(.LUM2/256)
     16  5183		       98		      .byte.b	$90+(.LUM3/256)
     17  5184
     18  5184
     19  5184
     20  5184
     21  5184
     22  5184				   .LUM1      SET	.LUM1 + .STEP1
     23  5184				   .LUM2      SET	.LUM2 + .STEP2
     24  5184				   .LUM3      SET	.LUM3 + .STEP3
     13  5184					      REPEND
     14  5184		       44		      .byte.b	$40+(.LUM1/256)
     15  5185		       26		      .byte.b	$20+(.LUM2/256)
     16  5186		       98		      .byte.b	$90+(.LUM3/256)
     17  5187
     18  5187
     19  5187
     20  5187
     21  5187
     22  5187				   .LUM1      SET	.LUM1 + .STEP1
     23  5187				   .LUM2      SET	.LUM2 + .STEP2
     24  5187				   .LUM3      SET	.LUM3 + .STEP3
     13  5187					      REPEND
     14  5187		       44		      .byte.b	$40+(.LUM1/256)
     15  5188		       26		      .byte.b	$20+(.LUM2/256)
     16  5189		       98		      .byte.b	$90+(.LUM3/256)
     17  518a
     18  518a
     19  518a
     20  518a
     21  518a
     22  518a				   .LUM1      SET	.LUM1 + .STEP1
     23  518a				   .LUM2      SET	.LUM2 + .STEP2
     24  518a				   .LUM3      SET	.LUM3 + .STEP3
     13  518a					      REPEND
     14  518a		       44		      .byte.b	$40+(.LUM1/256)
     15  518b		       26		      .byte.b	$20+(.LUM2/256)
     16  518c		       98		      .byte.b	$90+(.LUM3/256)
     17  518d
     18  518d
     19  518d
     20  518d
     21  518d
     22  518d				   .LUM1      SET	.LUM1 + .STEP1
     23  518d				   .LUM2      SET	.LUM2 + .STEP2
     24  518d				   .LUM3      SET	.LUM3 + .STEP3
     13  518d					      REPEND
     14  518d		       44		      .byte.b	$40+(.LUM1/256)
     15  518e		       26		      .byte.b	$20+(.LUM2/256)
     16  518f		       98		      .byte.b	$90+(.LUM3/256)
     17  5190
     18  5190
     19  5190
     20  5190
     21  5190
     22  5190				   .LUM1      SET	.LUM1 + .STEP1
     23  5190				   .LUM2      SET	.LUM2 + .STEP2
     24  5190				   .LUM3      SET	.LUM3 + .STEP3
     13  5190					      REPEND
     14  5190		       44		      .byte.b	$40+(.LUM1/256)
     15  5191		       26		      .byte.b	$20+(.LUM2/256)
     16  5192		       98		      .byte.b	$90+(.LUM3/256)
     17  5193
     18  5193
     19  5193
     20  5193
     21  5193
     22  5193				   .LUM1      SET	.LUM1 + .STEP1
     23  5193				   .LUM2      SET	.LUM2 + .STEP2
     24  5193				   .LUM3      SET	.LUM3 + .STEP3
     13  5193					      REPEND
     14  5193		       44		      .byte.b	$40+(.LUM1/256)
     15  5194		       26		      .byte.b	$20+(.LUM2/256)
     16  5195		       98		      .byte.b	$90+(.LUM3/256)
     17  5196
     18  5196
     19  5196
     20  5196
     21  5196
     22  5196				   .LUM1      SET	.LUM1 + .STEP1
     23  5196				   .LUM2      SET	.LUM2 + .STEP2
     24  5196				   .LUM3      SET	.LUM3 + .STEP3
     13  5196					      REPEND
     14  5196		       44		      .byte.b	$40+(.LUM1/256)
     15  5197		       26		      .byte.b	$20+(.LUM2/256)
     16  5198		       98		      .byte.b	$90+(.LUM3/256)
     17  5199
     18  5199
     19  5199
     20  5199
     21  5199
     22  5199				   .LUM1      SET	.LUM1 + .STEP1
     23  5199				   .LUM2      SET	.LUM2 + .STEP2
     24  5199				   .LUM3      SET	.LUM3 + .STEP3
     13  5199					      REPEND
     14  5199		       44		      .byte.b	$40+(.LUM1/256)
     15  519a		       26		      .byte.b	$20+(.LUM2/256)
     16  519b		       98		      .byte.b	$90+(.LUM3/256)
     17  519c
     18  519c
     19  519c
     20  519c
     21  519c
     22  519c				   .LUM1      SET	.LUM1 + .STEP1
     23  519c				   .LUM2      SET	.LUM2 + .STEP2
     24  519c				   .LUM3      SET	.LUM3 + .STEP3
     13  519c					      REPEND
     14  519c		       44		      .byte.b	$40+(.LUM1/256)
     15  519d		       26		      .byte.b	$20+(.LUM2/256)
     16  519e		       98		      .byte.b	$90+(.LUM3/256)
     17  519f
     18  519f
     19  519f
     20  519f
     21  519f
     22  519f				   .LUM1      SET	.LUM1 + .STEP1
     23  519f				   .LUM2      SET	.LUM2 + .STEP2
     24  519f				   .LUM3      SET	.LUM3 + .STEP3
     13  519f					      REPEND
     14  519f		       44		      .byte.b	$40+(.LUM1/256)
     15  51a0		       26		      .byte.b	$20+(.LUM2/256)
     16  51a1		       98		      .byte.b	$90+(.LUM3/256)
     17  51a2
     18  51a2
     19  51a2
     20  51a2
     21  51a2
     22  51a2				   .LUM1      SET	.LUM1 + .STEP1
     23  51a2				   .LUM2      SET	.LUM2 + .STEP2
     24  51a2				   .LUM3      SET	.LUM3 + .STEP3
     13  51a2					      REPEND
     14  51a2		       44		      .byte.b	$40+(.LUM1/256)
     15  51a3		       26		      .byte.b	$20+(.LUM2/256)
     16  51a4		       98		      .byte.b	$90+(.LUM3/256)
     17  51a5
     18  51a5
     19  51a5
     20  51a5
     21  51a5
     22  51a5				   .LUM1      SET	.LUM1 + .STEP1
     23  51a5				   .LUM2      SET	.LUM2 + .STEP2
     24  51a5				   .LUM3      SET	.LUM3 + .STEP3
     13  51a5					      REPEND
     14  51a5		       44		      .byte.b	$40+(.LUM1/256)
     15  51a6		       26		      .byte.b	$20+(.LUM2/256)
     16  51a7		       98		      .byte.b	$90+(.LUM3/256)
     17  51a8
     18  51a8
     19  51a8
     20  51a8
     21  51a8
     22  51a8				   .LUM1      SET	.LUM1 + .STEP1
     23  51a8				   .LUM2      SET	.LUM2 + .STEP2
     24  51a8				   .LUM3      SET	.LUM3 + .STEP3
     13  51a8					      REPEND
     14  51a8		       44		      .byte.b	$40+(.LUM1/256)
     15  51a9		       26		      .byte.b	$20+(.LUM2/256)
     16  51aa		       98		      .byte.b	$90+(.LUM3/256)
     17  51ab
     18  51ab
     19  51ab
     20  51ab
     21  51ab
     22  51ab				   .LUM1      SET	.LUM1 + .STEP1
     23  51ab				   .LUM2      SET	.LUM2 + .STEP2
     24  51ab				   .LUM3      SET	.LUM3 + .STEP3
     13  51ab					      REPEND
     14  51ab		       44		      .byte.b	$40+(.LUM1/256)
     15  51ac		       26		      .byte.b	$20+(.LUM2/256)
     16  51ad		       98		      .byte.b	$90+(.LUM3/256)
     17  51ae
     18  51ae
     19  51ae
     20  51ae
     21  51ae
     22  51ae				   .LUM1      SET	.LUM1 + .STEP1
     23  51ae				   .LUM2      SET	.LUM2 + .STEP2
     24  51ae				   .LUM3      SET	.LUM3 + .STEP3
     13  51ae					      REPEND
     14  51ae		       44		      .byte.b	$40+(.LUM1/256)
     15  51af		       26		      .byte.b	$20+(.LUM2/256)
     16  51b0		       98		      .byte.b	$90+(.LUM3/256)
     17  51b1
     18  51b1
     19  51b1
     20  51b1
     21  51b1
     22  51b1				   .LUM1      SET	.LUM1 + .STEP1
     23  51b1				   .LUM2      SET	.LUM2 + .STEP2
     24  51b1				   .LUM3      SET	.LUM3 + .STEP3
     13  51b1					      REPEND
     14  51b1		       44		      .byte.b	$40+(.LUM1/256)
     15  51b2		       26		      .byte.b	$20+(.LUM2/256)
     16  51b3		       98		      .byte.b	$90+(.LUM3/256)
     17  51b4
     18  51b4
     19  51b4
     20  51b4
     21  51b4
     22  51b4				   .LUM1      SET	.LUM1 + .STEP1
     23  51b4				   .LUM2      SET	.LUM2 + .STEP2
     24  51b4				   .LUM3      SET	.LUM3 + .STEP3
     13  51b4					      REPEND
     14  51b4		       44		      .byte.b	$40+(.LUM1/256)
     15  51b5		       26		      .byte.b	$20+(.LUM2/256)
     16  51b6		       98		      .byte.b	$90+(.LUM3/256)
     17  51b7
     18  51b7
     19  51b7
     20  51b7
     21  51b7
     22  51b7				   .LUM1      SET	.LUM1 + .STEP1
     23  51b7				   .LUM2      SET	.LUM2 + .STEP2
     24  51b7				   .LUM3      SET	.LUM3 + .STEP3
     13  51b7					      REPEND
     14  51b7		       44		      .byte.b	$40+(.LUM1/256)
     15  51b8		       26		      .byte.b	$20+(.LUM2/256)
     16  51b9		       98		      .byte.b	$90+(.LUM3/256)
     17  51ba
     18  51ba
     19  51ba
     20  51ba
     21  51ba
     22  51ba				   .LUM1      SET	.LUM1 + .STEP1
     23  51ba				   .LUM2      SET	.LUM2 + .STEP2
     24  51ba				   .LUM3      SET	.LUM3 + .STEP3
     13  51ba					      REPEND
     14  51ba		       44		      .byte.b	$40+(.LUM1/256)
     15  51bb		       26		      .byte.b	$20+(.LUM2/256)
     16  51bc		       98		      .byte.b	$90+(.LUM3/256)
     17  51bd
     18  51bd
     19  51bd
     20  51bd
     21  51bd
     22  51bd				   .LUM1      SET	.LUM1 + .STEP1
     23  51bd				   .LUM2      SET	.LUM2 + .STEP2
     24  51bd				   .LUM3      SET	.LUM3 + .STEP3
     13  51bd					      REPEND
     14  51bd		       44		      .byte.b	$40+(.LUM1/256)
     15  51be		       26		      .byte.b	$20+(.LUM2/256)
     16  51bf		       98		      .byte.b	$90+(.LUM3/256)
     17  51c0
     18  51c0
     19  51c0
     20  51c0
     21  51c0
     22  51c0				   .LUM1      SET	.LUM1 + .STEP1
     23  51c0				   .LUM2      SET	.LUM2 + .STEP2
     24  51c0				   .LUM3      SET	.LUM3 + .STEP3
     13  51c0					      REPEND
     14  51c0		       44		      .byte.b	$40+(.LUM1/256)
     15  51c1		       26		      .byte.b	$20+(.LUM2/256)
     16  51c2		       98		      .byte.b	$90+(.LUM3/256)
     17  51c3
     18  51c3
     19  51c3
     20  51c3
     21  51c3
     22  51c3				   .LUM1      SET	.LUM1 + .STEP1
     23  51c3				   .LUM2      SET	.LUM2 + .STEP2
     24  51c3				   .LUM3      SET	.LUM3 + .STEP3
     13  51c3					      REPEND
     14  51c3		       44		      .byte.b	$40+(.LUM1/256)
     15  51c4		       26		      .byte.b	$20+(.LUM2/256)
     16  51c5		       98		      .byte.b	$90+(.LUM3/256)
     17  51c6
     18  51c6
     19  51c6
     20  51c6
     21  51c6
     22  51c6				   .LUM1      SET	.LUM1 + .STEP1
     23  51c6				   .LUM2      SET	.LUM2 + .STEP2
     24  51c6				   .LUM3      SET	.LUM3 + .STEP3
     13  51c6					      REPEND
     14  51c6		       44		      .byte.b	$40+(.LUM1/256)
     15  51c7		       26		      .byte.b	$20+(.LUM2/256)
     16  51c8		       98		      .byte.b	$90+(.LUM3/256)
     17  51c9
     18  51c9
     19  51c9
     20  51c9
     21  51c9
     22  51c9				   .LUM1      SET	.LUM1 + .STEP1
     23  51c9				   .LUM2      SET	.LUM2 + .STEP2
     24  51c9				   .LUM3      SET	.LUM3 + .STEP3
     13  51c9					      REPEND
     14  51c9		       44		      .byte.b	$40+(.LUM1/256)
     15  51ca		       26		      .byte.b	$20+(.LUM2/256)
     16  51cb		       98		      .byte.b	$90+(.LUM3/256)
     17  51cc
     18  51cc
     19  51cc
     20  51cc
     21  51cc
     22  51cc				   .LUM1      SET	.LUM1 + .STEP1
     23  51cc				   .LUM2      SET	.LUM2 + .STEP2
     24  51cc				   .LUM3      SET	.LUM3 + .STEP3
     13  51cc					      REPEND
     14  51cc		       44		      .byte.b	$40+(.LUM1/256)
     15  51cd		       26		      .byte.b	$20+(.LUM2/256)
     16  51ce		       98		      .byte.b	$90+(.LUM3/256)
     17  51cf
     18  51cf
     19  51cf
     20  51cf
     21  51cf
     22  51cf				   .LUM1      SET	.LUM1 + .STEP1
     23  51cf				   .LUM2      SET	.LUM2 + .STEP2
     24  51cf				   .LUM3      SET	.LUM3 + .STEP3
     13  51cf					      REPEND
     14  51cf		       44		      .byte.b	$40+(.LUM1/256)
     15  51d0		       26		      .byte.b	$20+(.LUM2/256)
     16  51d1		       98		      .byte.b	$90+(.LUM3/256)
     17  51d2
     18  51d2
     19  51d2
     20  51d2
     21  51d2
     22  51d2				   .LUM1      SET	.LUM1 + .STEP1
     23  51d2				   .LUM2      SET	.LUM2 + .STEP2
     24  51d2				   .LUM3      SET	.LUM3 + .STEP3
     13  51d2					      REPEND
     14  51d2		       44		      .byte.b	$40+(.LUM1/256)
     15  51d3		       26		      .byte.b	$20+(.LUM2/256)
     16  51d4		       98		      .byte.b	$90+(.LUM3/256)
     17  51d5
     18  51d5
     19  51d5
     20  51d5
     21  51d5
     22  51d5				   .LUM1      SET	.LUM1 + .STEP1
     23  51d5				   .LUM2      SET	.LUM2 + .STEP2
     24  51d5				   .LUM3      SET	.LUM3 + .STEP3
     13  51d5					      REPEND
     14  51d5		       44		      .byte.b	$40+(.LUM1/256)
     15  51d6		       26		      .byte.b	$20+(.LUM2/256)
     16  51d7		       98		      .byte.b	$90+(.LUM3/256)
     17  51d8
     18  51d8
     19  51d8
     20  51d8
     21  51d8
     22  51d8				   .LUM1      SET	.LUM1 + .STEP1
     23  51d8				   .LUM2      SET	.LUM2 + .STEP2
     24  51d8				   .LUM3      SET	.LUM3 + .STEP3
     25  51d8					      REPEND
    254  51d8							;colr_ntsc   LUMTABLE $70,$40,$a0,$A,$2,$E,$8,$E,$8
    255  51d8
    256  51d8							;    ECHO "PAL LUMS"
    257  51d8							;    OPTIONAL_PAGEBREAK "colr_pal", 72*3
      0  51d8				   colr_pal   LUMTABLE	$60, $80, $10, $6,$4,$8,$6,$4,$8
      1  51d8
      2  51d8
      3  51d8
      4  51d8
      5  51d8				   .LUM1      SET	$6*256
      6  51d8				   .LUM2      SET	$4*256
      7  51d8				   .LUM3      SET	$8*256
      8  51d8
      9  51d8		       00 00	   .STEP1     =	(256*($6-$6))/72
     10  51d8		       00 00	   .STEP2     =	(256*($4-$4))/72
     11  51d8		       00 00	   .STEP3     =	(256*($8-$8))/72
     12  51d8
     13  51d8					      REPEAT	72
     14  51d8		       66		      .byte.b	$60+(.LUM1/256)
     15  51d9		       84		      .byte.b	$80+(.LUM2/256)
     16  51da		       18		      .byte.b	$10+(.LUM3/256)
     17  51db
     18  51db
     19  51db
     20  51db
     21  51db
     22  51db				   .LUM1      SET	.LUM1 + .STEP1
     23  51db				   .LUM2      SET	.LUM2 + .STEP2
     24  51db				   .LUM3      SET	.LUM3 + .STEP3
     13  51db					      REPEND
     14  51db		       66		      .byte.b	$60+(.LUM1/256)
     15  51dc		       84		      .byte.b	$80+(.LUM2/256)
     16  51dd		       18		      .byte.b	$10+(.LUM3/256)
     17  51de
     18  51de
     19  51de
     20  51de
     21  51de
     22  51de				   .LUM1      SET	.LUM1 + .STEP1
     23  51de				   .LUM2      SET	.LUM2 + .STEP2
     24  51de				   .LUM3      SET	.LUM3 + .STEP3
     13  51de					      REPEND
     14  51de		       66		      .byte.b	$60+(.LUM1/256)
     15  51df		       84		      .byte.b	$80+(.LUM2/256)
     16  51e0		       18		      .byte.b	$10+(.LUM3/256)
     17  51e1
     18  51e1
     19  51e1
     20  51e1
     21  51e1
     22  51e1				   .LUM1      SET	.LUM1 + .STEP1
     23  51e1				   .LUM2      SET	.LUM2 + .STEP2
     24  51e1				   .LUM3      SET	.LUM3 + .STEP3
     13  51e1					      REPEND
     14  51e1		       66		      .byte.b	$60+(.LUM1/256)
     15  51e2		       84		      .byte.b	$80+(.LUM2/256)
     16  51e3		       18		      .byte.b	$10+(.LUM3/256)
     17  51e4
     18  51e4
     19  51e4
     20  51e4
     21  51e4
     22  51e4				   .LUM1      SET	.LUM1 + .STEP1
     23  51e4				   .LUM2      SET	.LUM2 + .STEP2
     24  51e4				   .LUM3      SET	.LUM3 + .STEP3
     13  51e4					      REPEND
     14  51e4		       66		      .byte.b	$60+(.LUM1/256)
     15  51e5		       84		      .byte.b	$80+(.LUM2/256)
     16  51e6		       18		      .byte.b	$10+(.LUM3/256)
     17  51e7
     18  51e7
     19  51e7
     20  51e7
     21  51e7
     22  51e7				   .LUM1      SET	.LUM1 + .STEP1
     23  51e7				   .LUM2      SET	.LUM2 + .STEP2
     24  51e7				   .LUM3      SET	.LUM3 + .STEP3
     13  51e7					      REPEND
     14  51e7		       66		      .byte.b	$60+(.LUM1/256)
     15  51e8		       84		      .byte.b	$80+(.LUM2/256)
     16  51e9		       18		      .byte.b	$10+(.LUM3/256)
     17  51ea
     18  51ea
     19  51ea
     20  51ea
     21  51ea
     22  51ea				   .LUM1      SET	.LUM1 + .STEP1
     23  51ea				   .LUM2      SET	.LUM2 + .STEP2
     24  51ea				   .LUM3      SET	.LUM3 + .STEP3
     13  51ea					      REPEND
     14  51ea		       66		      .byte.b	$60+(.LUM1/256)
     15  51eb		       84		      .byte.b	$80+(.LUM2/256)
     16  51ec		       18		      .byte.b	$10+(.LUM3/256)
     17  51ed
     18  51ed
     19  51ed
     20  51ed
     21  51ed
     22  51ed				   .LUM1      SET	.LUM1 + .STEP1
     23  51ed				   .LUM2      SET	.LUM2 + .STEP2
     24  51ed				   .LUM3      SET	.LUM3 + .STEP3
     13  51ed					      REPEND
     14  51ed		       66		      .byte.b	$60+(.LUM1/256)
     15  51ee		       84		      .byte.b	$80+(.LUM2/256)
     16  51ef		       18		      .byte.b	$10+(.LUM3/256)
     17  51f0
     18  51f0
     19  51f0
     20  51f0
     21  51f0
     22  51f0				   .LUM1      SET	.LUM1 + .STEP1
     23  51f0				   .LUM2      SET	.LUM2 + .STEP2
     24  51f0				   .LUM3      SET	.LUM3 + .STEP3
     13  51f0					      REPEND
     14  51f0		       66		      .byte.b	$60+(.LUM1/256)
     15  51f1		       84		      .byte.b	$80+(.LUM2/256)
     16  51f2		       18		      .byte.b	$10+(.LUM3/256)
     17  51f3
     18  51f3
     19  51f3
     20  51f3
     21  51f3
     22  51f3				   .LUM1      SET	.LUM1 + .STEP1
     23  51f3				   .LUM2      SET	.LUM2 + .STEP2
     24  51f3				   .LUM3      SET	.LUM3 + .STEP3
     13  51f3					      REPEND
     14  51f3		       66		      .byte.b	$60+(.LUM1/256)
     15  51f4		       84		      .byte.b	$80+(.LUM2/256)
     16  51f5		       18		      .byte.b	$10+(.LUM3/256)
     17  51f6
     18  51f6
     19  51f6
     20  51f6
     21  51f6
     22  51f6				   .LUM1      SET	.LUM1 + .STEP1
     23  51f6				   .LUM2      SET	.LUM2 + .STEP2
     24  51f6				   .LUM3      SET	.LUM3 + .STEP3
     13  51f6					      REPEND
     14  51f6		       66		      .byte.b	$60+(.LUM1/256)
     15  51f7		       84		      .byte.b	$80+(.LUM2/256)
     16  51f8		       18		      .byte.b	$10+(.LUM3/256)
     17  51f9
     18  51f9
     19  51f9
     20  51f9
     21  51f9
     22  51f9				   .LUM1      SET	.LUM1 + .STEP1
     23  51f9				   .LUM2      SET	.LUM2 + .STEP2
     24  51f9				   .LUM3      SET	.LUM3 + .STEP3
     13  51f9					      REPEND
     14  51f9		       66		      .byte.b	$60+(.LUM1/256)
     15  51fa		       84		      .byte.b	$80+(.LUM2/256)
     16  51fb		       18		      .byte.b	$10+(.LUM3/256)
     17  51fc
     18  51fc
     19  51fc
     20  51fc
     21  51fc
     22  51fc				   .LUM1      SET	.LUM1 + .STEP1
     23  51fc				   .LUM2      SET	.LUM2 + .STEP2
     24  51fc				   .LUM3      SET	.LUM3 + .STEP3
     13  51fc					      REPEND
     14  51fc		       66		      .byte.b	$60+(.LUM1/256)
     15  51fd		       84		      .byte.b	$80+(.LUM2/256)
     16  51fe		       18		      .byte.b	$10+(.LUM3/256)
     17  51ff
     18  51ff
     19  51ff
     20  51ff
     21  51ff
     22  51ff				   .LUM1      SET	.LUM1 + .STEP1
     23  51ff				   .LUM2      SET	.LUM2 + .STEP2
     24  51ff				   .LUM3      SET	.LUM3 + .STEP3
     13  51ff					      REPEND
     14  51ff		       66		      .byte.b	$60+(.LUM1/256)
     15  5200		       84		      .byte.b	$80+(.LUM2/256)
     16  5201		       18		      .byte.b	$10+(.LUM3/256)
     17  5202
     18  5202
     19  5202
     20  5202
     21  5202
     22  5202				   .LUM1      SET	.LUM1 + .STEP1
     23  5202				   .LUM2      SET	.LUM2 + .STEP2
     24  5202				   .LUM3      SET	.LUM3 + .STEP3
     13  5202					      REPEND
     14  5202		       66		      .byte.b	$60+(.LUM1/256)
     15  5203		       84		      .byte.b	$80+(.LUM2/256)
     16  5204		       18		      .byte.b	$10+(.LUM3/256)
     17  5205
     18  5205
     19  5205
     20  5205
     21  5205
     22  5205				   .LUM1      SET	.LUM1 + .STEP1
     23  5205				   .LUM2      SET	.LUM2 + .STEP2
     24  5205				   .LUM3      SET	.LUM3 + .STEP3
     13  5205					      REPEND
     14  5205		       66		      .byte.b	$60+(.LUM1/256)
     15  5206		       84		      .byte.b	$80+(.LUM2/256)
     16  5207		       18		      .byte.b	$10+(.LUM3/256)
     17  5208
     18  5208
     19  5208
     20  5208
     21  5208
     22  5208				   .LUM1      SET	.LUM1 + .STEP1
     23  5208				   .LUM2      SET	.LUM2 + .STEP2
     24  5208				   .LUM3      SET	.LUM3 + .STEP3
     13  5208					      REPEND
     14  5208		       66		      .byte.b	$60+(.LUM1/256)
     15  5209		       84		      .byte.b	$80+(.LUM2/256)
     16  520a		       18		      .byte.b	$10+(.LUM3/256)
     17  520b
     18  520b
     19  520b
     20  520b
     21  520b
     22  520b				   .LUM1      SET	.LUM1 + .STEP1
     23  520b				   .LUM2      SET	.LUM2 + .STEP2
     24  520b				   .LUM3      SET	.LUM3 + .STEP3
     13  520b					      REPEND
     14  520b		       66		      .byte.b	$60+(.LUM1/256)
     15  520c		       84		      .byte.b	$80+(.LUM2/256)
     16  520d		       18		      .byte.b	$10+(.LUM3/256)
     17  520e
     18  520e
     19  520e
     20  520e
     21  520e
     22  520e				   .LUM1      SET	.LUM1 + .STEP1
     23  520e				   .LUM2      SET	.LUM2 + .STEP2
     24  520e				   .LUM3      SET	.LUM3 + .STEP3
     13  520e					      REPEND
     14  520e		       66		      .byte.b	$60+(.LUM1/256)
     15  520f		       84		      .byte.b	$80+(.LUM2/256)
     16  5210		       18		      .byte.b	$10+(.LUM3/256)
     17  5211
     18  5211
     19  5211
     20  5211
     21  5211
     22  5211				   .LUM1      SET	.LUM1 + .STEP1
     23  5211				   .LUM2      SET	.LUM2 + .STEP2
     24  5211				   .LUM3      SET	.LUM3 + .STEP3
     13  5211					      REPEND
     14  5211		       66		      .byte.b	$60+(.LUM1/256)
     15  5212		       84		      .byte.b	$80+(.LUM2/256)
     16  5213		       18		      .byte.b	$10+(.LUM3/256)
     17  5214
     18  5214
     19  5214
     20  5214
     21  5214
     22  5214				   .LUM1      SET	.LUM1 + .STEP1
     23  5214				   .LUM2      SET	.LUM2 + .STEP2
     24  5214				   .LUM3      SET	.LUM3 + .STEP3
     13  5214					      REPEND
     14  5214		       66		      .byte.b	$60+(.LUM1/256)
     15  5215		       84		      .byte.b	$80+(.LUM2/256)
     16  5216		       18		      .byte.b	$10+(.LUM3/256)
     17  5217
     18  5217
     19  5217
     20  5217
     21  5217
     22  5217				   .LUM1      SET	.LUM1 + .STEP1
     23  5217				   .LUM2      SET	.LUM2 + .STEP2
     24  5217				   .LUM3      SET	.LUM3 + .STEP3
     13  5217					      REPEND
     14  5217		       66		      .byte.b	$60+(.LUM1/256)
     15  5218		       84		      .byte.b	$80+(.LUM2/256)
     16  5219		       18		      .byte.b	$10+(.LUM3/256)
     17  521a
     18  521a
     19  521a
     20  521a
     21  521a
     22  521a				   .LUM1      SET	.LUM1 + .STEP1
     23  521a				   .LUM2      SET	.LUM2 + .STEP2
     24  521a				   .LUM3      SET	.LUM3 + .STEP3
     13  521a					      REPEND
     14  521a		       66		      .byte.b	$60+(.LUM1/256)
     15  521b		       84		      .byte.b	$80+(.LUM2/256)
     16  521c		       18		      .byte.b	$10+(.LUM3/256)
     17  521d
     18  521d
     19  521d
     20  521d
     21  521d
     22  521d				   .LUM1      SET	.LUM1 + .STEP1
     23  521d				   .LUM2      SET	.LUM2 + .STEP2
     24  521d				   .LUM3      SET	.LUM3 + .STEP3
     13  521d					      REPEND
     14  521d		       66		      .byte.b	$60+(.LUM1/256)
     15  521e		       84		      .byte.b	$80+(.LUM2/256)
     16  521f		       18		      .byte.b	$10+(.LUM3/256)
     17  5220
     18  5220
     19  5220
     20  5220
     21  5220
     22  5220				   .LUM1      SET	.LUM1 + .STEP1
     23  5220				   .LUM2      SET	.LUM2 + .STEP2
     24  5220				   .LUM3      SET	.LUM3 + .STEP3
     13  5220					      REPEND
     14  5220		       66		      .byte.b	$60+(.LUM1/256)
     15  5221		       84		      .byte.b	$80+(.LUM2/256)
     16  5222		       18		      .byte.b	$10+(.LUM3/256)
     17  5223
     18  5223
     19  5223
     20  5223
     21  5223
     22  5223				   .LUM1      SET	.LUM1 + .STEP1
     23  5223				   .LUM2      SET	.LUM2 + .STEP2
     24  5223				   .LUM3      SET	.LUM3 + .STEP3
     13  5223					      REPEND
     14  5223		       66		      .byte.b	$60+(.LUM1/256)
     15  5224		       84		      .byte.b	$80+(.LUM2/256)
     16  5225		       18		      .byte.b	$10+(.LUM3/256)
     17  5226
     18  5226
     19  5226
     20  5226
     21  5226
     22  5226				   .LUM1      SET	.LUM1 + .STEP1
     23  5226				   .LUM2      SET	.LUM2 + .STEP2
     24  5226				   .LUM3      SET	.LUM3 + .STEP3
     13  5226					      REPEND
     14  5226		       66		      .byte.b	$60+(.LUM1/256)
     15  5227		       84		      .byte.b	$80+(.LUM2/256)
     16  5228		       18		      .byte.b	$10+(.LUM3/256)
     17  5229
     18  5229
     19  5229
     20  5229
     21  5229
     22  5229				   .LUM1      SET	.LUM1 + .STEP1
     23  5229				   .LUM2      SET	.LUM2 + .STEP2
     24  5229				   .LUM3      SET	.LUM3 + .STEP3
     13  5229					      REPEND
     14  5229		       66		      .byte.b	$60+(.LUM1/256)
     15  522a		       84		      .byte.b	$80+(.LUM2/256)
     16  522b		       18		      .byte.b	$10+(.LUM3/256)
     17  522c
     18  522c
     19  522c
     20  522c
     21  522c
     22  522c				   .LUM1      SET	.LUM1 + .STEP1
     23  522c				   .LUM2      SET	.LUM2 + .STEP2
     24  522c				   .LUM3      SET	.LUM3 + .STEP3
     13  522c					      REPEND
     14  522c		       66		      .byte.b	$60+(.LUM1/256)
     15  522d		       84		      .byte.b	$80+(.LUM2/256)
     16  522e		       18		      .byte.b	$10+(.LUM3/256)
     17  522f
     18  522f
     19  522f
     20  522f
     21  522f
     22  522f				   .LUM1      SET	.LUM1 + .STEP1
     23  522f				   .LUM2      SET	.LUM2 + .STEP2
     24  522f				   .LUM3      SET	.LUM3 + .STEP3
     13  522f					      REPEND
     14  522f		       66		      .byte.b	$60+(.LUM1/256)
     15  5230		       84		      .byte.b	$80+(.LUM2/256)
     16  5231		       18		      .byte.b	$10+(.LUM3/256)
     17  5232
     18  5232
     19  5232
     20  5232
     21  5232
     22  5232				   .LUM1      SET	.LUM1 + .STEP1
     23  5232				   .LUM2      SET	.LUM2 + .STEP2
     24  5232				   .LUM3      SET	.LUM3 + .STEP3
     13  5232					      REPEND
     14  5232		       66		      .byte.b	$60+(.LUM1/256)
     15  5233		       84		      .byte.b	$80+(.LUM2/256)
     16  5234		       18		      .byte.b	$10+(.LUM3/256)
     17  5235
     18  5235
     19  5235
     20  5235
     21  5235
     22  5235				   .LUM1      SET	.LUM1 + .STEP1
     23  5235				   .LUM2      SET	.LUM2 + .STEP2
     24  5235				   .LUM3      SET	.LUM3 + .STEP3
     13  5235					      REPEND
     14  5235		       66		      .byte.b	$60+(.LUM1/256)
     15  5236		       84		      .byte.b	$80+(.LUM2/256)
     16  5237		       18		      .byte.b	$10+(.LUM3/256)
     17  5238
     18  5238
     19  5238
     20  5238
     21  5238
     22  5238				   .LUM1      SET	.LUM1 + .STEP1
     23  5238				   .LUM2      SET	.LUM2 + .STEP2
     24  5238				   .LUM3      SET	.LUM3 + .STEP3
     13  5238					      REPEND
     14  5238		       66		      .byte.b	$60+(.LUM1/256)
     15  5239		       84		      .byte.b	$80+(.LUM2/256)
     16  523a		       18		      .byte.b	$10+(.LUM3/256)
     17  523b
     18  523b
     19  523b
     20  523b
     21  523b
     22  523b				   .LUM1      SET	.LUM1 + .STEP1
     23  523b				   .LUM2      SET	.LUM2 + .STEP2
     24  523b				   .LUM3      SET	.LUM3 + .STEP3
     13  523b					      REPEND
     14  523b		       66		      .byte.b	$60+(.LUM1/256)
     15  523c		       84		      .byte.b	$80+(.LUM2/256)
     16  523d		       18		      .byte.b	$10+(.LUM3/256)
     17  523e
     18  523e
     19  523e
     20  523e
     21  523e
     22  523e				   .LUM1      SET	.LUM1 + .STEP1
     23  523e				   .LUM2      SET	.LUM2 + .STEP2
     24  523e				   .LUM3      SET	.LUM3 + .STEP3
     13  523e					      REPEND
     14  523e		       66		      .byte.b	$60+(.LUM1/256)
     15  523f		       84		      .byte.b	$80+(.LUM2/256)
     16  5240		       18		      .byte.b	$10+(.LUM3/256)
     17  5241
     18  5241
     19  5241
     20  5241
     21  5241
     22  5241				   .LUM1      SET	.LUM1 + .STEP1
     23  5241				   .LUM2      SET	.LUM2 + .STEP2
     24  5241				   .LUM3      SET	.LUM3 + .STEP3
     13  5241					      REPEND
     14  5241		       66		      .byte.b	$60+(.LUM1/256)
     15  5242		       84		      .byte.b	$80+(.LUM2/256)
     16  5243		       18		      .byte.b	$10+(.LUM3/256)
     17  5244
     18  5244
     19  5244
     20  5244
     21  5244
     22  5244				   .LUM1      SET	.LUM1 + .STEP1
     23  5244				   .LUM2      SET	.LUM2 + .STEP2
     24  5244				   .LUM3      SET	.LUM3 + .STEP3
     13  5244					      REPEND
     14  5244		       66		      .byte.b	$60+(.LUM1/256)
     15  5245		       84		      .byte.b	$80+(.LUM2/256)
     16  5246		       18		      .byte.b	$10+(.LUM3/256)
     17  5247
     18  5247
     19  5247
     20  5247
     21  5247
     22  5247				   .LUM1      SET	.LUM1 + .STEP1
     23  5247				   .LUM2      SET	.LUM2 + .STEP2
     24  5247				   .LUM3      SET	.LUM3 + .STEP3
     13  5247					      REPEND
     14  5247		       66		      .byte.b	$60+(.LUM1/256)
     15  5248		       84		      .byte.b	$80+(.LUM2/256)
     16  5249		       18		      .byte.b	$10+(.LUM3/256)
     17  524a
     18  524a
     19  524a
     20  524a
     21  524a
     22  524a				   .LUM1      SET	.LUM1 + .STEP1
     23  524a				   .LUM2      SET	.LUM2 + .STEP2
     24  524a				   .LUM3      SET	.LUM3 + .STEP3
     13  524a					      REPEND
     14  524a		       66		      .byte.b	$60+(.LUM1/256)
     15  524b		       84		      .byte.b	$80+(.LUM2/256)
     16  524c		       18		      .byte.b	$10+(.LUM3/256)
     17  524d
     18  524d
     19  524d
     20  524d
     21  524d
     22  524d				   .LUM1      SET	.LUM1 + .STEP1
     23  524d				   .LUM2      SET	.LUM2 + .STEP2
     24  524d				   .LUM3      SET	.LUM3 + .STEP3
     13  524d					      REPEND
     14  524d		       66		      .byte.b	$60+(.LUM1/256)
     15  524e		       84		      .byte.b	$80+(.LUM2/256)
     16  524f		       18		      .byte.b	$10+(.LUM3/256)
     17  5250
     18  5250
     19  5250
     20  5250
     21  5250
     22  5250				   .LUM1      SET	.LUM1 + .STEP1
     23  5250				   .LUM2      SET	.LUM2 + .STEP2
     24  5250				   .LUM3      SET	.LUM3 + .STEP3
     13  5250					      REPEND
     14  5250		       66		      .byte.b	$60+(.LUM1/256)
     15  5251		       84		      .byte.b	$80+(.LUM2/256)
     16  5252		       18		      .byte.b	$10+(.LUM3/256)
     17  5253
     18  5253
     19  5253
     20  5253
     21  5253
     22  5253				   .LUM1      SET	.LUM1 + .STEP1
     23  5253				   .LUM2      SET	.LUM2 + .STEP2
     24  5253				   .LUM3      SET	.LUM3 + .STEP3
     13  5253					      REPEND
     14  5253		       66		      .byte.b	$60+(.LUM1/256)
     15  5254		       84		      .byte.b	$80+(.LUM2/256)
     16  5255		       18		      .byte.b	$10+(.LUM3/256)
     17  5256
     18  5256
     19  5256
     20  5256
     21  5256
     22  5256				   .LUM1      SET	.LUM1 + .STEP1
     23  5256				   .LUM2      SET	.LUM2 + .STEP2
     24  5256				   .LUM3      SET	.LUM3 + .STEP3
     13  5256					      REPEND
     14  5256		       66		      .byte.b	$60+(.LUM1/256)
     15  5257		       84		      .byte.b	$80+(.LUM2/256)
     16  5258		       18		      .byte.b	$10+(.LUM3/256)
     17  5259
     18  5259
     19  5259
     20  5259
     21  5259
     22  5259				   .LUM1      SET	.LUM1 + .STEP1
     23  5259				   .LUM2      SET	.LUM2 + .STEP2
     24  5259				   .LUM3      SET	.LUM3 + .STEP3
     13  5259					      REPEND
     14  5259		       66		      .byte.b	$60+(.LUM1/256)
     15  525a		       84		      .byte.b	$80+(.LUM2/256)
     16  525b		       18		      .byte.b	$10+(.LUM3/256)
     17  525c
     18  525c
     19  525c
     20  525c
     21  525c
     22  525c				   .LUM1      SET	.LUM1 + .STEP1
     23  525c				   .LUM2      SET	.LUM2 + .STEP2
     24  525c				   .LUM3      SET	.LUM3 + .STEP3
     13  525c					      REPEND
     14  525c		       66		      .byte.b	$60+(.LUM1/256)
     15  525d		       84		      .byte.b	$80+(.LUM2/256)
     16  525e		       18		      .byte.b	$10+(.LUM3/256)
     17  525f
     18  525f
     19  525f
     20  525f
     21  525f
     22  525f				   .LUM1      SET	.LUM1 + .STEP1
     23  525f				   .LUM2      SET	.LUM2 + .STEP2
     24  525f				   .LUM3      SET	.LUM3 + .STEP3
     13  525f					      REPEND
     14  525f		       66		      .byte.b	$60+(.LUM1/256)
     15  5260		       84		      .byte.b	$80+(.LUM2/256)
     16  5261		       18		      .byte.b	$10+(.LUM3/256)
     17  5262
     18  5262
     19  5262
     20  5262
     21  5262
     22  5262				   .LUM1      SET	.LUM1 + .STEP1
     23  5262				   .LUM2      SET	.LUM2 + .STEP2
     24  5262				   .LUM3      SET	.LUM3 + .STEP3
     13  5262					      REPEND
     14  5262		       66		      .byte.b	$60+(.LUM1/256)
     15  5263		       84		      .byte.b	$80+(.LUM2/256)
     16  5264		       18		      .byte.b	$10+(.LUM3/256)
     17  5265
     18  5265
     19  5265
     20  5265
     21  5265
     22  5265				   .LUM1      SET	.LUM1 + .STEP1
     23  5265				   .LUM2      SET	.LUM2 + .STEP2
     24  5265				   .LUM3      SET	.LUM3 + .STEP3
     13  5265					      REPEND
     14  5265		       66		      .byte.b	$60+(.LUM1/256)
     15  5266		       84		      .byte.b	$80+(.LUM2/256)
     16  5267		       18		      .byte.b	$10+(.LUM3/256)
     17  5268
     18  5268
     19  5268
     20  5268
     21  5268
     22  5268				   .LUM1      SET	.LUM1 + .STEP1
     23  5268				   .LUM2      SET	.LUM2 + .STEP2
     24  5268				   .LUM3      SET	.LUM3 + .STEP3
     13  5268					      REPEND
     14  5268		       66		      .byte.b	$60+(.LUM1/256)
     15  5269		       84		      .byte.b	$80+(.LUM2/256)
     16  526a		       18		      .byte.b	$10+(.LUM3/256)
     17  526b
     18  526b
     19  526b
     20  526b
     21  526b
     22  526b				   .LUM1      SET	.LUM1 + .STEP1
     23  526b				   .LUM2      SET	.LUM2 + .STEP2
     24  526b				   .LUM3      SET	.LUM3 + .STEP3
     13  526b					      REPEND
     14  526b		       66		      .byte.b	$60+(.LUM1/256)
     15  526c		       84		      .byte.b	$80+(.LUM2/256)
     16  526d		       18		      .byte.b	$10+(.LUM3/256)
     17  526e
     18  526e
     19  526e
     20  526e
     21  526e
     22  526e				   .LUM1      SET	.LUM1 + .STEP1
     23  526e				   .LUM2      SET	.LUM2 + .STEP2
     24  526e				   .LUM3      SET	.LUM3 + .STEP3
     13  526e					      REPEND
     14  526e		       66		      .byte.b	$60+(.LUM1/256)
     15  526f		       84		      .byte.b	$80+(.LUM2/256)
     16  5270		       18		      .byte.b	$10+(.LUM3/256)
     17  5271
     18  5271
     19  5271
     20  5271
     21  5271
     22  5271				   .LUM1      SET	.LUM1 + .STEP1
     23  5271				   .LUM2      SET	.LUM2 + .STEP2
     24  5271				   .LUM3      SET	.LUM3 + .STEP3
     13  5271					      REPEND
     14  5271		       66		      .byte.b	$60+(.LUM1/256)
     15  5272		       84		      .byte.b	$80+(.LUM2/256)
     16  5273		       18		      .byte.b	$10+(.LUM3/256)
     17  5274
     18  5274
     19  5274
     20  5274
     21  5274
     22  5274				   .LUM1      SET	.LUM1 + .STEP1
     23  5274				   .LUM2      SET	.LUM2 + .STEP2
     24  5274				   .LUM3      SET	.LUM3 + .STEP3
     13  5274					      REPEND
     14  5274		       66		      .byte.b	$60+(.LUM1/256)
     15  5275		       84		      .byte.b	$80+(.LUM2/256)
     16  5276		       18		      .byte.b	$10+(.LUM3/256)
     17  5277
     18  5277
     19  5277
     20  5277
     21  5277
     22  5277				   .LUM1      SET	.LUM1 + .STEP1
     23  5277				   .LUM2      SET	.LUM2 + .STEP2
     24  5277				   .LUM3      SET	.LUM3 + .STEP3
     13  5277					      REPEND
     14  5277		       66		      .byte.b	$60+(.LUM1/256)
     15  5278		       84		      .byte.b	$80+(.LUM2/256)
     16  5279		       18		      .byte.b	$10+(.LUM3/256)
     17  527a
     18  527a
     19  527a
     20  527a
     21  527a
     22  527a				   .LUM1      SET	.LUM1 + .STEP1
     23  527a				   .LUM2      SET	.LUM2 + .STEP2
     24  527a				   .LUM3      SET	.LUM3 + .STEP3
     13  527a					      REPEND
     14  527a		       66		      .byte.b	$60+(.LUM1/256)
     15  527b		       84		      .byte.b	$80+(.LUM2/256)
     16  527c		       18		      .byte.b	$10+(.LUM3/256)
     17  527d
     18  527d
     19  527d
     20  527d
     21  527d
     22  527d				   .LUM1      SET	.LUM1 + .STEP1
     23  527d				   .LUM2      SET	.LUM2 + .STEP2
     24  527d				   .LUM3      SET	.LUM3 + .STEP3
     13  527d					      REPEND
     14  527d		       66		      .byte.b	$60+(.LUM1/256)
     15  527e		       84		      .byte.b	$80+(.LUM2/256)
     16  527f		       18		      .byte.b	$10+(.LUM3/256)
     17  5280
     18  5280
     19  5280
     20  5280
     21  5280
     22  5280				   .LUM1      SET	.LUM1 + .STEP1
     23  5280				   .LUM2      SET	.LUM2 + .STEP2
     24  5280				   .LUM3      SET	.LUM3 + .STEP3
     13  5280					      REPEND
     14  5280		       66		      .byte.b	$60+(.LUM1/256)
     15  5281		       84		      .byte.b	$80+(.LUM2/256)
     16  5282		       18		      .byte.b	$10+(.LUM3/256)
     17  5283
     18  5283
     19  5283
     20  5283
     21  5283
     22  5283				   .LUM1      SET	.LUM1 + .STEP1
     23  5283				   .LUM2      SET	.LUM2 + .STEP2
     24  5283				   .LUM3      SET	.LUM3 + .STEP3
     13  5283					      REPEND
     14  5283		       66		      .byte.b	$60+(.LUM1/256)
     15  5284		       84		      .byte.b	$80+(.LUM2/256)
     16  5285		       18		      .byte.b	$10+(.LUM3/256)
     17  5286
     18  5286
     19  5286
     20  5286
     21  5286
     22  5286				   .LUM1      SET	.LUM1 + .STEP1
     23  5286				   .LUM2      SET	.LUM2 + .STEP2
     24  5286				   .LUM3      SET	.LUM3 + .STEP3
     13  5286					      REPEND
     14  5286		       66		      .byte.b	$60+(.LUM1/256)
     15  5287		       84		      .byte.b	$80+(.LUM2/256)
     16  5288		       18		      .byte.b	$10+(.LUM3/256)
     17  5289
     18  5289
     19  5289
     20  5289
     21  5289
     22  5289				   .LUM1      SET	.LUM1 + .STEP1
     23  5289				   .LUM2      SET	.LUM2 + .STEP2
     24  5289				   .LUM3      SET	.LUM3 + .STEP3
     13  5289					      REPEND
     14  5289		       66		      .byte.b	$60+(.LUM1/256)
     15  528a		       84		      .byte.b	$80+(.LUM2/256)
     16  528b		       18		      .byte.b	$10+(.LUM3/256)
     17  528c
     18  528c
     19  528c
     20  528c
     21  528c
     22  528c				   .LUM1      SET	.LUM1 + .STEP1
     23  528c				   .LUM2      SET	.LUM2 + .STEP2
     24  528c				   .LUM3      SET	.LUM3 + .STEP3
     13  528c					      REPEND
     14  528c		       66		      .byte.b	$60+(.LUM1/256)
     15  528d		       84		      .byte.b	$80+(.LUM2/256)
     16  528e		       18		      .byte.b	$10+(.LUM3/256)
     17  528f
     18  528f
     19  528f
     20  528f
     21  528f
     22  528f				   .LUM1      SET	.LUM1 + .STEP1
     23  528f				   .LUM2      SET	.LUM2 + .STEP2
     24  528f				   .LUM3      SET	.LUM3 + .STEP3
     13  528f					      REPEND
     14  528f		       66		      .byte.b	$60+(.LUM1/256)
     15  5290		       84		      .byte.b	$80+(.LUM2/256)
     16  5291		       18		      .byte.b	$10+(.LUM3/256)
     17  5292
     18  5292
     19  5292
     20  5292
     21  5292
     22  5292				   .LUM1      SET	.LUM1 + .STEP1
     23  5292				   .LUM2      SET	.LUM2 + .STEP2
     24  5292				   .LUM3      SET	.LUM3 + .STEP3
     13  5292					      REPEND
     14  5292		       66		      .byte.b	$60+(.LUM1/256)
     15  5293		       84		      .byte.b	$80+(.LUM2/256)
     16  5294		       18		      .byte.b	$10+(.LUM3/256)
     17  5295
     18  5295
     19  5295
     20  5295
     21  5295
     22  5295				   .LUM1      SET	.LUM1 + .STEP1
     23  5295				   .LUM2      SET	.LUM2 + .STEP2
     24  5295				   .LUM3      SET	.LUM3 + .STEP3
     13  5295					      REPEND
     14  5295		       66		      .byte.b	$60+(.LUM1/256)
     15  5296		       84		      .byte.b	$80+(.LUM2/256)
     16  5297		       18		      .byte.b	$10+(.LUM3/256)
     17  5298
     18  5298
     19  5298
     20  5298
     21  5298
     22  5298				   .LUM1      SET	.LUM1 + .STEP1
     23  5298				   .LUM2      SET	.LUM2 + .STEP2
     24  5298				   .LUM3      SET	.LUM3 + .STEP3
     13  5298					      REPEND
     14  5298		       66		      .byte.b	$60+(.LUM1/256)
     15  5299		       84		      .byte.b	$80+(.LUM2/256)
     16  529a		       18		      .byte.b	$10+(.LUM3/256)
     17  529b
     18  529b
     19  529b
     20  529b
     21  529b
     22  529b				   .LUM1      SET	.LUM1 + .STEP1
     23  529b				   .LUM2      SET	.LUM2 + .STEP2
     24  529b				   .LUM3      SET	.LUM3 + .STEP3
     13  529b					      REPEND
     14  529b		       66		      .byte.b	$60+(.LUM1/256)
     15  529c		       84		      .byte.b	$80+(.LUM2/256)
     16  529d		       18		      .byte.b	$10+(.LUM3/256)
     17  529e
     18  529e
     19  529e
     20  529e
     21  529e
     22  529e				   .LUM1      SET	.LUM1 + .STEP1
     23  529e				   .LUM2      SET	.LUM2 + .STEP2
     24  529e				   .LUM3      SET	.LUM3 + .STEP3
     13  529e					      REPEND
     14  529e		       66		      .byte.b	$60+(.LUM1/256)
     15  529f		       84		      .byte.b	$80+(.LUM2/256)
     16  52a0		       18		      .byte.b	$10+(.LUM3/256)
     17  52a1
     18  52a1
     19  52a1
     20  52a1
     21  52a1
     22  52a1				   .LUM1      SET	.LUM1 + .STEP1
     23  52a1				   .LUM2      SET	.LUM2 + .STEP2
     24  52a1				   .LUM3      SET	.LUM3 + .STEP3
     13  52a1					      REPEND
     14  52a1		       66		      .byte.b	$60+(.LUM1/256)
     15  52a2		       84		      .byte.b	$80+(.LUM2/256)
     16  52a3		       18		      .byte.b	$10+(.LUM3/256)
     17  52a4
     18  52a4
     19  52a4
     20  52a4
     21  52a4
     22  52a4				   .LUM1      SET	.LUM1 + .STEP1
     23  52a4				   .LUM2      SET	.LUM2 + .STEP2
     24  52a4				   .LUM3      SET	.LUM3 + .STEP3
     13  52a4					      REPEND
     14  52a4		       66		      .byte.b	$60+(.LUM1/256)
     15  52a5		       84		      .byte.b	$80+(.LUM2/256)
     16  52a6		       18		      .byte.b	$10+(.LUM3/256)
     17  52a7
     18  52a7
     19  52a7
     20  52a7
     21  52a7
     22  52a7				   .LUM1      SET	.LUM1 + .STEP1
     23  52a7				   .LUM2      SET	.LUM2 + .STEP2
     24  52a7				   .LUM3      SET	.LUM3 + .STEP3
     13  52a7					      REPEND
     14  52a7		       66		      .byte.b	$60+(.LUM1/256)
     15  52a8		       84		      .byte.b	$80+(.LUM2/256)
     16  52a9		       18		      .byte.b	$10+(.LUM3/256)
     17  52aa
     18  52aa
     19  52aa
     20  52aa
     21  52aa
     22  52aa				   .LUM1      SET	.LUM1 + .STEP1
     23  52aa				   .LUM2      SET	.LUM2 + .STEP2
     24  52aa				   .LUM3      SET	.LUM3 + .STEP3
     13  52aa					      REPEND
     14  52aa		       66		      .byte.b	$60+(.LUM1/256)
     15  52ab		       84		      .byte.b	$80+(.LUM2/256)
     16  52ac		       18		      .byte.b	$10+(.LUM3/256)
     17  52ad
     18  52ad
     19  52ad
     20  52ad
     21  52ad
     22  52ad				   .LUM1      SET	.LUM1 + .STEP1
     23  52ad				   .LUM2      SET	.LUM2 + .STEP2
     24  52ad				   .LUM3      SET	.LUM3 + .STEP3
     13  52ad					      REPEND
     14  52ad		       66		      .byte.b	$60+(.LUM1/256)
     15  52ae		       84		      .byte.b	$80+(.LUM2/256)
     16  52af		       18		      .byte.b	$10+(.LUM3/256)
     17  52b0
     18  52b0
     19  52b0
     20  52b0
     21  52b0
     22  52b0				   .LUM1      SET	.LUM1 + .STEP1
     23  52b0				   .LUM2      SET	.LUM2 + .STEP2
     24  52b0				   .LUM3      SET	.LUM3 + .STEP3
     25  52b0					      REPEND
    259  52b0							;colr_pal	  LUMTABLE $90, $20, $60, $6,$A,$a,$C,$6,$8
    260  52b0
------- FILE titleData.asm LEVEL 3 PASS 3
      0  52b0					      include	"titleData.asm"
      1  52b0				   COL_0
      2  52b0		       00		      .byte.b	0	;R (71)
      3  52b1		       00		      .byte.b	0	;G
      4  52b2		       00		      .byte.b	0	;B
      5  52b3		       40		      .byte.b	64	;R (70)
      6  52b4		       40		      .byte.b	64	;G
      7  52b5		       00		      .byte.b	0	;B
      8  52b6		       00		      .byte.b	0	;R (69)
      9  52b7		       00		      .byte.b	0	;G
     10  52b8		       00		      .byte.b	0	;B
     11  52b9		       00		      .byte.b	0	;R (68)
     12  52ba		       80		      .byte.b	128	;G
     13  52bb		       00		      .byte.b	0	;B
     14  52bc		       00		      .byte.b	0	;R (67)
     15  52bd		       20		      .byte.b	32	;G
     16  52be		       00		      .byte.b	0	;B
     17  52bf		       80		      .byte.b	128	;R (66)
     18  52c0		       80		      .byte.b	128	;G
     19  52c1		       00		      .byte.b	0	;B
     20  52c2		       c0		      .byte.b	192	;R (65)
     21  52c3		       c0		      .byte.b	192	;G
     22  52c4		       00		      .byte.b	0	;B
     23  52c5		       40		      .byte.b	64	;R (64)
     24  52c6		       c0		      .byte.b	192	;G
     25  52c7		       00		      .byte.b	0	;B
     26  52c8		       00		      .byte.b	0	;R (63)
     27  52c9		       a0		      .byte.b	160	;G
     28  52ca		       00		      .byte.b	0	;B
     29  52cb		       10		      .byte.b	16	;R (62)
     30  52cc		       70		      .byte.b	112	;G
     31  52cd		       00		      .byte.b	0	;B
     32  52ce		       00		      .byte.b	0	;R (61)
     33  52cf		       80		      .byte.b	128	;G
     34  52d0		       40		      .byte.b	64	;B
     35  52d1		       00		      .byte.b	0	;R (60)
     36  52d2		       c0		      .byte.b	192	;G
     37  52d3		       00		      .byte.b	0	;B
     38  52d4		       00		      .byte.b	0	;R (59)
     39  52d5		       c0		      .byte.b	192	;G
     40  52d6		       00		      .byte.b	0	;B
     41  52d7		       00		      .byte.b	0	;R (58)
     42  52d8		       40		      .byte.b	64	;G
     43  52d9		       00		      .byte.b	0	;B
     44  52da		       00		      .byte.b	0	;R (57)
     45  52db		       c0		      .byte.b	192	;G
     46  52dc		       00		      .byte.b	0	;B
     47  52dd		       00		      .byte.b	0	;R (56)
     48  52de		       60		      .byte.b	96	;G
     49  52df		       00		      .byte.b	0	;B
     50  52e0		       00		      .byte.b	0	;R (55)
     51  52e1		       80		      .byte.b	128	;G
     52  52e2		       00		      .byte.b	0	;B
     53  52e3		       00		      .byte.b	0	;R (54)
     54  52e4		       40		      .byte.b	64	;G
     55  52e5		       00		      .byte.b	0	;B
     56  52e6		       00		      .byte.b	0	;R (53)
     57  52e7		       80		      .byte.b	128	;G
     58  52e8		       00		      .byte.b	0	;B
     59  52e9		       00		      .byte.b	0	;R (52)
     60  52ea		       80		      .byte.b	128	;G
     61  52eb		       00		      .byte.b	0	;B
     62  52ec		       00		      .byte.b	0	;R (51)
     63  52ed		       10		      .byte.b	16	;G
     64  52ee		       00		      .byte.b	0	;B
     65  52ef		       00		      .byte.b	0	;R (50)
     66  52f0		       00		      .byte.b	0	;G
     67  52f1		       00		      .byte.b	0	;B
     68  52f2		       00		      .byte.b	0	;R (49)
     69  52f3		       00		      .byte.b	0	;G
     70  52f4		       00		      .byte.b	0	;B
     71  52f5		       00		      .byte.b	0	;R (48)
     72  52f6		       00		      .byte.b	0	;G
     73  52f7		       00		      .byte.b	0	;B
     74  52f8		       00		      .byte.b	0	;R (47)
     75  52f9		       00		      .byte.b	0	;G
     76  52fa		       00		      .byte.b	0	;B
     77  52fb		       00		      .byte.b	0	;R (46)
     78  52fc		       40		      .byte.b	64	;G
     79  52fd		       00		      .byte.b	0	;B
     80  52fe		       00		      .byte.b	0	;R (45)
     81  52ff		       00		      .byte.b	0	;G
     82  5300		       00		      .byte.b	0	;B
     83  5301		       00		      .byte.b	0	;R (44)
     84  5302		       00		      .byte.b	0	;G
     85  5303		       00		      .byte.b	0	;B
     86  5304		       00		      .byte.b	0	;R (43)
     87  5305		       00		      .byte.b	0	;G
     88  5306		       00		      .byte.b	0	;B
     89  5307		       00		      .byte.b	0	;R (42)
     90  5308		       40		      .byte.b	64	;G
     91  5309		       00		      .byte.b	0	;B
     92  530a		       00		      .byte.b	0	;R (41)
     93  530b		       00		      .byte.b	0	;G
     94  530c		       00		      .byte.b	0	;B
     95  530d		       00		      .byte.b	0	;R (40)
     96  530e		       00		      .byte.b	0	;G
     97  530f		       00		      .byte.b	0	;B
     98  5310		       00		      .byte.b	0	;R (39)
     99  5311		       20		      .byte.b	32	;G
    100  5312		       00		      .byte.b	0	;B
    101  5313		       00		      .byte.b	0	;R (38)
    102  5314		       00		      .byte.b	0	;G
    103  5315		       00		      .byte.b	0	;B
    104  5316		       00		      .byte.b	0	;R (37)
    105  5317		       10		      .byte.b	16	;G
    106  5318		       00		      .byte.b	0	;B
    107  5319		       00		      .byte.b	0	;R (36)
    108  531a		       00		      .byte.b	0	;G
    109  531b		       00		      .byte.b	0	;B
    110  531c		       00		      .byte.b	0	;R (35)
    111  531d		       40		      .byte.b	64	;G
    112  531e		       00		      .byte.b	0	;B
    113  531f		       00		      .byte.b	0	;R (34)
    114  5320		       20		      .byte.b	32	;G
    115  5321		       00		      .byte.b	0	;B
    116  5322		       00		      .byte.b	0	;R (33)
    117  5323		       00		      .byte.b	0	;G
    118  5324		       00		      .byte.b	0	;B
    119  5325		       00		      .byte.b	0	;R (32)
    120  5326		       00		      .byte.b	0	;G
    121  5327		       00		      .byte.b	0	;B
    122  5328		       00		      .byte.b	0	;R (31)
    123  5329		       20		      .byte.b	32	;G
    124  532a		       00		      .byte.b	0	;B
    125  532b		       00		      .byte.b	0	;R (30)
    126  532c		       00		      .byte.b	0	;G
    127  532d		       00		      .byte.b	0	;B
    128  532e		       00		      .byte.b	0	;R (29)
    129  532f		       80		      .byte.b	128	;G
    130  5330		       00		      .byte.b	0	;B
    131  5331		       00		      .byte.b	0	;R (28)
    132  5332		       00		      .byte.b	0	;G
    133  5333		       00		      .byte.b	0	;B
    134  5334		       00		      .byte.b	0	;R (27)
    135  5335		       20		      .byte.b	32	;G
    136  5336		       00		      .byte.b	0	;B
    137  5337		       00		      .byte.b	0	;R (26)
    138  5338		       00		      .byte.b	0	;G
    139  5339		       00		      .byte.b	0	;B
    140  533a		       00		      .byte.b	0	;R (25)
    141  533b		       00		      .byte.b	0	;G
    142  533c		       00		      .byte.b	0	;B
    143  533d		       00		      .byte.b	0	;R (24)
    144  533e		       20		      .byte.b	32	;G
    145  533f		       00		      .byte.b	0	;B
    146  5340		       00		      .byte.b	0	;R (23)
    147  5341		       00		      .byte.b	0	;G
    148  5342		       00		      .byte.b	0	;B
    149  5343		       00		      .byte.b	0	;R (22)
    150  5344		       00		      .byte.b	0	;G
    151  5345		       00		      .byte.b	0	;B
    152  5346		       00		      .byte.b	0	;R (21)
    153  5347		       20		      .byte.b	32	;G
    154  5348		       00		      .byte.b	0	;B
    155  5349		       00		      .byte.b	0	;R (20)
    156  534a		       00		      .byte.b	0	;G
    157  534b		       00		      .byte.b	0	;B
    158  534c		       00		      .byte.b	0	;R (19)
    159  534d		       00		      .byte.b	0	;G
    160  534e		       00		      .byte.b	0	;B
    161  534f		       00		      .byte.b	0	;R (18)
    162  5350		       00		      .byte.b	0	;G
    163  5351		       00		      .byte.b	0	;B
    164  5352		       00		      .byte.b	0	;R (17)
    165  5353		       80		      .byte.b	128	;G
    166  5354		       00		      .byte.b	0	;B
    167  5355		       00		      .byte.b	0	;R (16)
    168  5356		       00		      .byte.b	0	;G
    169  5357		       00		      .byte.b	0	;B
    170  5358		       00		      .byte.b	0	;R (15)
    171  5359		       10		      .byte.b	16	;G
    172  535a		       00		      .byte.b	0	;B
    173  535b		       00		      .byte.b	0	;R (14)
    174  535c		       00		      .byte.b	0	;G
    175  535d		       00		      .byte.b	0	;B
    176  535e		       00		      .byte.b	0	;R (13)
    177  535f		       00		      .byte.b	0	;G
    178  5360		       00		      .byte.b	0	;B
    179  5361		       00		      .byte.b	0	;R (12)
    180  5362		       80		      .byte.b	128	;G
    181  5363		       00		      .byte.b	0	;B
    182  5364		       00		      .byte.b	0	;R (11)
    183  5365		       00		      .byte.b	0	;G
    184  5366		       00		      .byte.b	0	;B
    185  5367		       00		      .byte.b	0	;R (10)
    186  5368		       00		      .byte.b	0	;G
    187  5369		       00		      .byte.b	0	;B
    188  536a		       00		      .byte.b	0	;R (9)
    189  536b		       80		      .byte.b	128	;G
    190  536c		       00		      .byte.b	0	;B
    191  536d		       00		      .byte.b	0	;R (8)
    192  536e		       00		      .byte.b	0	;G
    193  536f		       00		      .byte.b	0	;B
    194  5370		       00		      .byte.b	0	;R (7)
    195  5371		       20		      .byte.b	32	;G
    196  5372		       00		      .byte.b	0	;B
    197  5373		       00		      .byte.b	0	;R (6)
    198  5374		       00		      .byte.b	0	;G
    199  5375		       00		      .byte.b	0	;B
    200  5376		       00		      .byte.b	0	;R (5)
    201  5377		       10		      .byte.b	16	;G
    202  5378		       00		      .byte.b	0	;B
    203  5379		       00		      .byte.b	0	;R (4)
    204  537a		       00		      .byte.b	0	;G
    205  537b		       00		      .byte.b	0	;B
    206  537c		       00		      .byte.b	0	;R (3)
    207  537d		       00		      .byte.b	0	;G
    208  537e		       00		      .byte.b	0	;B
    209  537f		       00		      .byte.b	0	;R (2)
    210  5380		       40		      .byte.b	64	;G
    211  5381		       00		      .byte.b	0	;B
    212  5382		       00		      .byte.b	0	;R (1)
    213  5383		       00		      .byte.b	0	;G
    214  5384		       00		      .byte.b	0	;B
    215  5385		       00		      .byte.b	0	;R (0)
    216  5386		       00		      .byte.b	0	;G
    217  5387		       00		      .byte.b	0	;B
    218  5388				   COL_1
    219  5388		       80		      .byte.b	128	;R (71)
    220  5389		       80		      .byte.b	128	;G
    221  538a		       00		      .byte.b	0	;B
    222  538b		       10		      .byte.b	16	;R (70)
    223  538c		       14		      .byte.b	20	;G
    224  538d		       00		      .byte.b	0	;B
    225  538e		       00		      .byte.b	0	;R (69)
    226  538f		       41		      .byte.b	65	;G
    227  5390		       00		      .byte.b	0	;B
    228  5391		       00		      .byte.b	0	;R (68)
    229  5392		       08		      .byte.b	8	;G
    230  5393		       00		      .byte.b	0	;B
    231  5394		       20		      .byte.b	32	;R (67)
    232  5395		       20		      .byte.b	32	;G
    233  5396		       00		      .byte.b	0	;B
    234  5397		       63		      .byte.b	99	;R (66)
    235  5398		       6b		      .byte.b	107	;G
    236  5399		       00		      .byte.b	0	;B
    237  539a		       ff		      .byte.b	255	;R (65)
    238  539b		       f5		      .byte.b	245	;G
    239  539c		       00		      .byte.b	0	;B
    240  539d		       80		      .byte.b	128	;R (64)
    241  539e		       fb		      .byte.b	251	;G
    242  539f		       04		      .byte.b	4	;B
    243  53a0		       00		      .byte.b	0	;R (63)
    244  53a1		       b7		      .byte.b	183	;G
    245  53a2		       00		      .byte.b	0	;B
    246  53a3		       00		      .byte.b	0	;R (62)
    247  53a4		       b5		      .byte.b	181	;G
    248  53a5		       00		      .byte.b	0	;B
    249  53a6		       00		      .byte.b	0	;R (61)
    250  53a7		       ef		      .byte.b	239	;G
    251  53a8		       10		      .byte.b	16	;B
    252  53a9		       00		      .byte.b	0	;R (60)
    253  53aa		       bd		      .byte.b	189	;G
    254  53ab		       42		      .byte.b	66	;B
    255  53ac		       00		      .byte.b	0	;R (59)
    256  53ad		       77		      .byte.b	119	;G
    257  53ae		       00		      .byte.b	0	;B
    258  53af		       00		      .byte.b	0	;R (58)
    259  53b0		       ee		      .byte.b	238	;G
    260  53b1		       00		      .byte.b	0	;B
    261  53b2		       00		      .byte.b	0	;R (57)
    262  53b3		       9b		      .byte.b	155	;G
    263  53b4		       00		      .byte.b	0	;B
    264  53b5		       00		      .byte.b	0	;R (56)
    265  53b6		       f2		      .byte.b	242	;G
    266  53b7		       00		      .byte.b	0	;B
    267  53b8		       00		      .byte.b	0	;R (55)
    268  53b9		       40		      .byte.b	64	;G
    269  53ba		       00		      .byte.b	0	;B
    270  53bb		       00		      .byte.b	0	;R (54)
    271  53bc		       df		      .byte.b	223	;G
    272  53bd		       00		      .byte.b	0	;B
    273  53be		       10		      .byte.b	16	;R (53)
    274  53bf		       69		      .byte.b	105	;G
    275  53c0		       10		      .byte.b	16	;B
    276  53c1		       00		      .byte.b	0	;R (52)
    277  53c2		       4b		      .byte.b	75	;G
    278  53c3		       00		      .byte.b	0	;B
    279  53c4		       00		      .byte.b	0	;R (51)
    280  53c5		       b0		      .byte.b	176	;G
    281  53c6		       00		      .byte.b	0	;B
    282  53c7		       00		      .byte.b	0	;R (50)
    283  53c8		       a7		      .byte.b	167	;G
    284  53c9		       00		      .byte.b	0	;B
    285  53ca		       00		      .byte.b	0	;R (49)
    286  53cb		       7d		      .byte.b	125	;G
    287  53cc		       02		      .byte.b	2	;B
    288  53cd		       00		      .byte.b	0	;R (48)
    289  53ce		       db		      .byte.b	219	;G
    290  53cf		       20		      .byte.b	32	;B
    291  53d0		       00		      .byte.b	0	;R (47)
    292  53d1		       6d		      .byte.b	109	;G
    293  53d2		       00		      .byte.b	0	;B
    294  53d3		       00		      .byte.b	0	;R (46)
    295  53d4		       ea		      .byte.b	234	;G
    296  53d5		       00		      .byte.b	0	;B
    297  53d6		       00		      .byte.b	0	;R (45)
    298  53d7		       13		      .byte.b	19	;G
    299  53d8		       00		      .byte.b	0	;B
    300  53d9		       00		      .byte.b	0	;R (44)
    301  53da		       7e		      .byte.b	126	;G
    302  53db		       01		      .byte.b	1	;B
    303  53dc		       22		      .byte.b	34	;R (43)
    304  53dd		       77		      .byte.b	119	;G
    305  53de		       08		      .byte.b	8	;B
    306  53df		       04		      .byte.b	4	;R (42)
    307  53e0		       5f		      .byte.b	95	;G
    308  53e1		       00		      .byte.b	0	;B
    309  53e2		       00		      .byte.b	0	;R (41)
    310  53e3		       6f		      .byte.b	111	;G
    311  53e4		       00		      .byte.b	0	;B
    312  53e5		       00		      .byte.b	0	;R (40)
    313  53e6		       b5		      .byte.b	181	;G
    314  53e7		       00		      .byte.b	0	;B
    315  53e8		       00		      .byte.b	0	;R (39)
    316  53e9		       5b		      .byte.b	91	;G
    317  53ea		       00		      .byte.b	0	;B
    318  53eb		       00		      .byte.b	0	;R (38)
    319  53ec		       57		      .byte.b	87	;G
    320  53ed		       00		      .byte.b	0	;B
    321  53ee		       20		      .byte.b	32	;R (37)
    322  53ef		       4d		      .byte.b	77	;G
    323  53f0		       22		      .byte.b	34	;B
    324  53f1		       00		      .byte.b	0	;R (36)
    325  53f2		       55		      .byte.b	85	;G
    326  53f3		       00		      .byte.b	0	;B
    327  53f4		       01		      .byte.b	1	;R (35)
    328  53f5		       56		      .byte.b	86	;G
    329  53f6		       00		      .byte.b	0	;B
    330  53f7		       02		      .byte.b	2	;R (34)
    331  53f8		       57		      .byte.b	87	;G
    332  53f9		       00		      .byte.b	0	;B
    333  53fa		       00		      .byte.b	0	;R (33)
    334  53fb		       2a		      .byte.b	42	;G
    335  53fc		       01		      .byte.b	1	;B
    336  53fd		       01		      .byte.b	1	;R (32)
    337  53fe		       ab		      .byte.b	171	;G
    338  53ff		       00		      .byte.b	0	;B
    339  5400		       22		      .byte.b	34	;R (31)
    340  5401		       17		      .byte.b	23	;G
    341  5402		       20		      .byte.b	32	;B
    342  5403		       00		      .byte.b	0	;R (30)
    343  5404		       55		      .byte.b	85	;G
    344  5405		       02		      .byte.b	2	;B
    345  5406		       22		      .byte.b	34	;R (29)
    346  5407		       17		      .byte.b	23	;G
    347  5408		       20		      .byte.b	32	;B
    348  5409		       00		      .byte.b	0	;R (28)
    349  540a		       2b		      .byte.b	43	;G
    350  540b		       00		      .byte.b	0	;B
    351  540c		       00		      .byte.b	0	;R (27)
    352  540d		       95		      .byte.b	149	;G
    353  540e		       02		      .byte.b	2	;B
    354  540f		       00		      .byte.b	0	;R (26)
    355  5410		       17		      .byte.b	23	;G
    356  5411		       00		      .byte.b	0	;B
    357  5412		       00		      .byte.b	0	;R (25)
    358  5413		       2d		      .byte.b	45	;G
    359  5414		       00		      .byte.b	0	;B
    360  5415		       00		      .byte.b	0	;R (24)
    361  5416		       b4		      .byte.b	180	;G
    362  5417		       00		      .byte.b	0	;B
    363  5418		       00		      .byte.b	0	;R (23)
    364  5419		       0a		      .byte.b	10	;G
    365  541a		       00		      .byte.b	0	;B
    366  541b		       10		      .byte.b	16	;R (22)
    367  541c		       3c		      .byte.b	60	;G
    368  541d		       00		      .byte.b	0	;B
    369  541e		       10		      .byte.b	16	;R (21)
    370  541f		       98		      .byte.b	152	;G
    371  5420		       00		      .byte.b	0	;B
    372  5421		       10		      .byte.b	16	;R (20)
    373  5422		       1a		      .byte.b	26	;G
    374  5423		       00		      .byte.b	0	;B
    375  5424		       00		      .byte.b	0	;R (19)
    376  5425		       14		      .byte.b	20	;G
    377  5426		       00		      .byte.b	0	;B
    378  5427		       00		      .byte.b	0	;R (18)
    379  5428		       5a		      .byte.b	90	;G
    380  5429		       00		      .byte.b	0	;B
    381  542a		       00		      .byte.b	0	;R (17)
    382  542b		       09		      .byte.b	9	;G
    383  542c		       00		      .byte.b	0	;B
    384  542d		       08		      .byte.b	8	;R (16)
    385  542e		       1d		      .byte.b	29	;G
    386  542f		       00		      .byte.b	0	;B
    387  5430		       00		      .byte.b	0	;R (15)
    388  5431		       1a		      .byte.b	26	;G
    389  5432		       00		      .byte.b	0	;B
    390  5433		       20		      .byte.b	32	;R (14)
    391  5434		       ba		      .byte.b	186	;G
    392  5435		       00		      .byte.b	0	;B
    393  5436		       00		      .byte.b	0	;R (13)
    394  5437		       12		      .byte.b	18	;G
    395  5438		       00		      .byte.b	0	;B
    396  5439		       00		      .byte.b	0	;R (12)
    397  543a		       1a		      .byte.b	26	;G
    398  543b		       00		      .byte.b	0	;B
    399  543c		       00		      .byte.b	0	;R (11)
    400  543d		       2d		      .byte.b	45	;G
    401  543e		       10		      .byte.b	16	;B
    402  543f		       10		      .byte.b	16	;R (10)
    403  5440		       3b		      .byte.b	59	;G
    404  5441		       00		      .byte.b	0	;B
    405  5442		       24		      .byte.b	36	;R (9)
    406  5443		       39		      .byte.b	57	;G
    407  5444		       04		      .byte.b	4	;B
    408  5445		       20		      .byte.b	32	;R (8)
    409  5446		       35		      .byte.b	53	;G
    410  5447		       00		      .byte.b	0	;B
    411  5448		       00		      .byte.b	0	;R (7)
    412  5449		       3d		      .byte.b	61	;G
    413  544a		       00		      .byte.b	0	;B
    414  544b		       00		      .byte.b	0	;R (6)
    415  544c		       32		      .byte.b	50	;G
    416  544d		       00		      .byte.b	0	;B
    417  544e		       00		      .byte.b	0	;R (5)
    418  544f		       98		      .byte.b	152	;G
    419  5450		       00		      .byte.b	0	;B
    420  5451		       00		      .byte.b	0	;R (4)
    421  5452		       12		      .byte.b	18	;G
    422  5453		       00		      .byte.b	0	;B
    423  5454		       00		      .byte.b	0	;R (3)
    424  5455		       20		      .byte.b	32	;G
    425  5456		       00		      .byte.b	0	;B
    426  5457		       01		      .byte.b	1	;R (2)
    427  5458		       49		      .byte.b	73	;G
    428  5459		       00		      .byte.b	0	;B
    429  545a		       20		      .byte.b	32	;R (1)
    430  545b		       20		      .byte.b	32	;G
    431  545c		       00		      .byte.b	0	;B
    432  545d		       00		      .byte.b	0	;R (0)
    433  545e		       00		      .byte.b	0	;G
    434  545f		       00		      .byte.b	0	;B
    435  5460				   COL_2
    436  5460		       14		      .byte.b	20	;R (71)
    437  5461		       14		      .byte.b	20	;G
    438  5462		       00		      .byte.b	0	;B
    439  5463		       40		      .byte.b	64	;R (70)
    440  5464		       42		      .byte.b	66	;G
    441  5465		       00		      .byte.b	0	;B
    442  5466		       a8		      .byte.b	168	;R (69)
    443  5467		       a8		      .byte.b	168	;G
    444  5468		       00		      .byte.b	0	;B
    445  5469		       fd		      .byte.b	253	;R (68)
    446  546a		       1d		      .byte.b	29	;G
    447  546b		       00		      .byte.b	0	;B
    448  546c		       f0		      .byte.b	240	;R (67)
    449  546d		       44		      .byte.b	68	;G
    450  546e		       08		      .byte.b	8	;B
    451  546f		       ff		      .byte.b	255	;R (66)
    452  5470		       2f		      .byte.b	47	;G
    453  5471		       00		      .byte.b	0	;B
    454  5472		       ff		      .byte.b	255	;R (65)
    455  5473		       0e		      .byte.b	14	;G
    456  5474		       00		      .byte.b	0	;B
    457  5475		       f8		      .byte.b	248	;R (64)
    458  5476		       0f		      .byte.b	15	;G
    459  5477		       00		      .byte.b	0	;B
    460  5478		       f8		      .byte.b	248	;R (63)
    461  5479		       2e		      .byte.b	46	;G
    462  547a		       00		      .byte.b	0	;B
    463  547b		       f8		      .byte.b	248	;R (62)
    464  547c		       1e		      .byte.b	30	;G
    465  547d		       01		      .byte.b	1	;B
    466  547e		       74		      .byte.b	116	;R (61)
    467  547f		       23		      .byte.b	35	;G
    468  5480		       88		      .byte.b	136	;B
    469  5481		       fc		      .byte.b	252	;R (60)
    470  5482		       0f		      .byte.b	15	;G
    471  5483		       00		      .byte.b	0	;B
    472  5484		       f8		      .byte.b	248	;R (59)
    473  5485		       06		      .byte.b	6	;G
    474  5486		       01		      .byte.b	1	;B
    475  5487		       f8		      .byte.b	248	;R (58)
    476  5488		       8f		      .byte.b	143	;G
    477  5489		       00		      .byte.b	0	;B
    478  548a		       e8		      .byte.b	232	;R (57)
    479  548b		       0e		      .byte.b	14	;G
    480  548c		       10		      .byte.b	16	;B
    481  548d		       e0		      .byte.b	224	;R (56)
    482  548e		       97		      .byte.b	151	;G
    483  548f		       00		      .byte.b	0	;B
    484  5490		       f0		      .byte.b	240	;R (55)
    485  5491		       3a		      .byte.b	58	;G
    486  5492		       00		      .byte.b	0	;B
    487  5493		       e0		      .byte.b	224	;R (54)
    488  5494		       bb		      .byte.b	187	;G
    489  5495		       04		      .byte.b	4	;B
    490  5496		       e0		      .byte.b	224	;R (53)
    491  5497		       3e		      .byte.b	62	;G
    492  5498		       00		      .byte.b	0	;B
    493  5499		       c0		      .byte.b	192	;R (52)
    494  549a		       2a		      .byte.b	42	;G
    495  549b		       00		      .byte.b	0	;B
    496  549c		       80		      .byte.b	128	;R (51)
    497  549d		       3f		      .byte.b	63	;G
    498  549e		       40		      .byte.b	64	;B
    499  549f		       f5		      .byte.b	245	;R (50)
    500  54a0		       3f		      .byte.b	63	;G
    501  54a1		       00		      .byte.b	0	;B
    502  54a2		       e8		      .byte.b	232	;R (49)
    503  54a3		       7f		      .byte.b	127	;G
    504  54a4		       00		      .byte.b	0	;B
    505  54a5		       e0		      .byte.b	224	;R (48)
    506  54a6		       7a		      .byte.b	122	;G
    507  54a7		       04		      .byte.b	4	;B
    508  54a8		       c0		      .byte.b	192	;R (47)
    509  54a9		       5f		      .byte.b	95	;G
    510  54aa		       00		      .byte.b	0	;B
    511  54ab		       90		      .byte.b	144	;R (46)
    512  54ac		       dd		      .byte.b	221	;G
    513  54ad		       02		      .byte.b	2	;B
    514  54ae		       84		      .byte.b	132	;R (45)
    515  54af		       9f		      .byte.b	159	;G
    516  54b0		       00		      .byte.b	0	;B
    517  54b1		       c4		      .byte.b	196	;R (44)
    518  54b2		       cf		      .byte.b	207	;G
    519  54b3		       00		      .byte.b	0	;B
    520  54b4		       c5		      .byte.b	197	;R (43)
    521  54b5		       1f		      .byte.b	31	;G
    522  54b6		       00		      .byte.b	0	;B
    523  54b7		       d4		      .byte.b	212	;R (42)
    524  54b8		       9f		      .byte.b	159	;G
    525  54b9		       20		      .byte.b	32	;B
    526  54ba		       c8		      .byte.b	200	;R (41)
    527  54bb		       1e		      .byte.b	30	;G
    528  54bc		       01		      .byte.b	1	;B
    529  54bd		       c8		      .byte.b	200	;R (40)
    530  54be		       5f		      .byte.b	95	;G
    531  54bf		       00		      .byte.b	0	;B
    532  54c0		       cd		      .byte.b	205	;R (39)
    533  54c1		       5e		      .byte.b	94	;G
    534  54c2		       00		      .byte.b	0	;B
    535  54c3		       c7		      .byte.b	199	;R (38)
    536  54c4		       5b		      .byte.b	91	;G
    537  54c5		       00		      .byte.b	0	;B
    538  54c6		       8b		      .byte.b	139	;R (37)
    539  54c7		       1c		      .byte.b	28	;G
    540  54c8		       00		      .byte.b	0	;B
    541  54c9		       81		      .byte.b	129	;R (36)
    542  54ca		       9a		      .byte.b	154	;G
    543  54cb		       04		      .byte.b	4	;B
    544  54cc		       8e		      .byte.b	142	;R (35)
    545  54cd		       9d		      .byte.b	157	;G
    546  54ce		       00		      .byte.b	0	;B
    547  54cf		       2b		      .byte.b	43	;R (34)
    548  54d0		       36		      .byte.b	54	;G
    549  54d1		       00		      .byte.b	0	;B
    550  54d2		       3a		      .byte.b	58	;R (33)
    551  54d3		       0d		      .byte.b	13	;G
    552  54d4		       00		      .byte.b	0	;B
    553  54d5		       3e		      .byte.b	62	;R (32)
    554  54d6		       85		      .byte.b	133	;G
    555  54d7		       40		      .byte.b	64	;B
    556  54d8		       fa		      .byte.b	250	;R (31)
    557  54d9		       17		      .byte.b	23	;G
    558  54da		       00		      .byte.b	0	;B
    559  54db		       ff		      .byte.b	255	;R (30)
    560  54dc		       03		      .byte.b	3	;G
    561  54dd		       00		      .byte.b	0	;B
    562  54de		       fc		      .byte.b	252	;R (29)
    563  54df		       93		      .byte.b	147	;G
    564  54e0		       00		      .byte.b	0	;B
    565  54e1		       f7		      .byte.b	247	;R (28)
    566  54e2		       81		      .byte.b	129	;G
    567  54e3		       08		      .byte.b	8	;B
    568  54e4		       ff		      .byte.b	255	;R (27)
    569  54e5		       03		      .byte.b	3	;G
    570  54e6		       00		      .byte.b	0	;B
    571  54e7		       fe		      .byte.b	254	;R (26)
    572  54e8		       2b		      .byte.b	43	;G
    573  54e9		       00		      .byte.b	0	;B
    574  54ea		       fe		      .byte.b	254	;R (25)
    575  54eb		       0a		      .byte.b	10	;G
    576  54ec		       00		      .byte.b	0	;B
    577  54ed		       fc		      .byte.b	252	;R (24)
    578  54ee		       4f		      .byte.b	79	;G
    579  54ef		       00		      .byte.b	0	;B
    580  54f0		       fc		      .byte.b	252	;R (23)
    581  54f1		       55		      .byte.b	85	;G
    582  54f2		       00		      .byte.b	0	;B
    583  54f3		       f8		      .byte.b	248	;R (22)
    584  54f4		       45		      .byte.b	69	;G
    585  54f5		       00		      .byte.b	0	;B
    586  54f6		       e8		      .byte.b	232	;R (21)
    587  54f7		       05		      .byte.b	5	;G
    588  54f8		       10		      .byte.b	16	;B
    589  54f9		       f8		      .byte.b	248	;R (20)
    590  54fa		       5b		      .byte.b	91	;G
    591  54fb		       00		      .byte.b	0	;B
    592  54fc		       f8		      .byte.b	248	;R (19)
    593  54fd		       1d		      .byte.b	29	;G
    594  54fe		       00		      .byte.b	0	;B
    595  54ff		       f0		      .byte.b	240	;R (18)
    596  5500		       55		      .byte.b	85	;G
    597  5501		       00		      .byte.b	0	;B
    598  5502		       f0		      .byte.b	240	;R (17)
    599  5503		       16		      .byte.b	22	;G
    600  5504		       00		      .byte.b	0	;B
    601  5505		       f0		      .byte.b	240	;R (16)
    602  5506		       b2		      .byte.b	178	;G
    603  5507		       00		      .byte.b	0	;B
    604  5508		       e0		      .byte.b	224	;R (15)
    605  5509		       0e		      .byte.b	14	;G
    606  550a		       10		      .byte.b	16	;B
    607  550b		       f0		      .byte.b	240	;R (14)
    608  550c		       93		      .byte.b	147	;G
    609  550d		       00		      .byte.b	0	;B
    610  550e		       e0		      .byte.b	224	;R (13)
    611  550f		       25		      .byte.b	37	;G
    612  5510		       00		      .byte.b	0	;B
    613  5511		       c0		      .byte.b	192	;R (12)
    614  5512		       e5		      .byte.b	229	;G
    615  5513		       00		      .byte.b	0	;B
    616  5514		       80		      .byte.b	128	;R (11)
    617  5515		       0e		      .byte.b	14	;G
    618  5516		       00		      .byte.b	0	;B
    619  5517		       c0		      .byte.b	192	;R (10)
    620  5518		       ca		      .byte.b	202	;G
    621  5519		       00		      .byte.b	0	;B
    622  551a		       84		      .byte.b	132	;R (9)
    623  551b		       8e		      .byte.b	142	;G
    624  551c		       00		      .byte.b	0	;B
    625  551d		       00		      .byte.b	0	;R (8)
    626  551e		       8e		      .byte.b	142	;G
    627  551f		       00		      .byte.b	0	;B
    628  5520		       00		      .byte.b	0	;R (7)
    629  5521		       15		      .byte.b	21	;G
    630  5522		       00		      .byte.b	0	;B
    631  5523		       00		      .byte.b	0	;R (6)
    632  5524		       14		      .byte.b	20	;G
    633  5525		       00		      .byte.b	0	;B
    634  5526		       00		      .byte.b	0	;R (5)
    635  5527		       14		      .byte.b	20	;G
    636  5528		       00		      .byte.b	0	;B
    637  5529		       00		      .byte.b	0	;R (4)
    638  552a		       0a		      .byte.b	10	;G
    639  552b		       00		      .byte.b	0	;B
    640  552c		       00		      .byte.b	0	;R (3)
    641  552d		       10		      .byte.b	16	;G
    642  552e		       00		      .byte.b	0	;B
    643  552f		       08		      .byte.b	8	;R (2)
    644  5530		       88		      .byte.b	136	;G
    645  5531		       00		      .byte.b	0	;B
    646  5532		       40		      .byte.b	64	;R (1)
    647  5533		       42		      .byte.b	66	;G
    648  5534		       00		      .byte.b	0	;B
    649  5535		       00		      .byte.b	0	;R (0)
    650  5536		       00		      .byte.b	0	;G
    651  5537		       00		      .byte.b	0	;B
    652  5538				   COL_3
    653  5538		       90		      .byte.b	144	;R (71)
    654  5539		       90		      .byte.b	144	;G
    655  553a		       00		      .byte.b	0	;B
    656  553b		       40		      .byte.b	64	;R (70)
    657  553c		       40		      .byte.b	64	;G
    658  553d		       00		      .byte.b	0	;B
    659  553e		       b0		      .byte.b	176	;R (69)
    660  553f		       b0		      .byte.b	176	;G
    661  5540		       00		      .byte.b	0	;B
    662  5541		       d0		      .byte.b	208	;R (68)
    663  5542		       00		      .byte.b	0	;G
    664  5543		       20		      .byte.b	32	;B
    665  5544		       f0		      .byte.b	240	;R (67)
    666  5545		       00		      .byte.b	0	;G
    667  5546		       00		      .byte.b	0	;B
    668  5547		       f0		      .byte.b	240	;R (66)
    669  5548		       d0		      .byte.b	208	;G
    670  5549		       00		      .byte.b	0	;B
    671  554a		       f0		      .byte.b	240	;R (65)
    672  554b		       00		      .byte.b	0	;G
    673  554c		       00		      .byte.b	0	;B
    674  554d		       f0		      .byte.b	240	;R (64)
    675  554e		       00		      .byte.b	0	;G
    676  554f		       00		      .byte.b	0	;B
    677  5550		       f0		      .byte.b	240	;R (63)
    678  5551		       50		      .byte.b	80	;G
    679  5552		       00		      .byte.b	0	;B
    680  5553		       f0		      .byte.b	240	;R (62)
    681  5554		       00		      .byte.b	0	;G
    682  5555		       00		      .byte.b	0	;B
    683  5556		       f0		      .byte.b	240	;R (61)
    684  5557		       a0		      .byte.b	160	;G
    685  5558		       00		      .byte.b	0	;B
    686  5559		       f0		      .byte.b	240	;R (60)
    687  555a		       00		      .byte.b	0	;G
    688  555b		       00		      .byte.b	0	;B
    689  555c		       f0		      .byte.b	240	;R (59)
    690  555d		       d0		      .byte.b	208	;G
    691  555e		       00		      .byte.b	0	;B
    692  555f		       f0		      .byte.b	240	;R (58)
    693  5560		       c0		      .byte.b	192	;G
    694  5561		       00		      .byte.b	0	;B
    695  5562		       f0		      .byte.b	240	;R (57)
    696  5563		       90		      .byte.b	144	;G
    697  5564		       00		      .byte.b	0	;B
    698  5565		       f0		      .byte.b	240	;R (56)
    699  5566		       80		      .byte.b	128	;G
    700  5567		       00		      .byte.b	0	;B
    701  5568		       f0		      .byte.b	240	;R (55)
    702  5569		       40		      .byte.b	64	;G
    703  556a		       00		      .byte.b	0	;B
    704  556b		       70		      .byte.b	112	;R (54)
    705  556c		       00		      .byte.b	0	;G
    706  556d		       80		      .byte.b	128	;B
    707  556e		       d0		      .byte.b	208	;R (53)
    708  556f		       00		      .byte.b	0	;G
    709  5570		       20		      .byte.b	32	;B
    710  5571		       f0		      .byte.b	240	;R (52)
    711  5572		       80		      .byte.b	128	;G
    712  5573		       00		      .byte.b	0	;B
    713  5574		       f0		      .byte.b	240	;R (51)
    714  5575		       00		      .byte.b	0	;G
    715  5576		       00		      .byte.b	0	;B
    716  5577		       f0		      .byte.b	240	;R (50)
    717  5578		       a0		      .byte.b	160	;G
    718  5579		       00		      .byte.b	0	;B
    719  557a		       f0		      .byte.b	240	;R (49)
    720  557b		       80		      .byte.b	128	;G
    721  557c		       00		      .byte.b	0	;B
    722  557d		       f0		      .byte.b	240	;R (48)
    723  557e		       40		      .byte.b	64	;G
    724  557f		       00		      .byte.b	0	;B
    725  5580		       f0		      .byte.b	240	;R (47)
    726  5581		       20		      .byte.b	32	;G
    727  5582		       00		      .byte.b	0	;B
    728  5583		       f0		      .byte.b	240	;R (46)
    729  5584		       00		      .byte.b	0	;G
    730  5585		       00		      .byte.b	0	;B
    731  5586		       f0		      .byte.b	240	;R (45)
    732  5587		       80		      .byte.b	128	;G
    733  5588		       00		      .byte.b	0	;B
    734  5589		       f0		      .byte.b	240	;R (44)
    735  558a		       00		      .byte.b	0	;G
    736  558b		       00		      .byte.b	0	;B
    737  558c		       f0		      .byte.b	240	;R (43)
    738  558d		       40		      .byte.b	64	;G
    739  558e		       00		      .byte.b	0	;B
    740  558f		       f0		      .byte.b	240	;R (42)
    741  5590		       00		      .byte.b	0	;G
    742  5591		       00		      .byte.b	0	;B
    743  5592		       f0		      .byte.b	240	;R (41)
    744  5593		       20		      .byte.b	32	;G
    745  5594		       00		      .byte.b	0	;B
    746  5595		       f0		      .byte.b	240	;R (40)
    747  5596		       20		      .byte.b	32	;G
    748  5597		       00		      .byte.b	0	;B
    749  5598		       f0		      .byte.b	240	;R (39)
    750  5599		       50		      .byte.b	80	;G
    751  559a		       00		      .byte.b	0	;B
    752  559b		       f0		      .byte.b	240	;R (38)
    753  559c		       10		      .byte.b	16	;G
    754  559d		       00		      .byte.b	0	;B
    755  559e		       70		      .byte.b	112	;R (37)
    756  559f		       80		      .byte.b	128	;G
    757  55a0		       80		      .byte.b	128	;B
    758  55a1		       f0		      .byte.b	240	;R (36)
    759  55a2		       50		      .byte.b	80	;G
    760  55a3		       00		      .byte.b	0	;B
    761  55a4		       f0		      .byte.b	240	;R (35)
    762  55a5		       00		      .byte.b	0	;G
    763  55a6		       00		      .byte.b	0	;B
    764  55a7		       f0		      .byte.b	240	;R (34)
    765  55a8		       40		      .byte.b	64	;G
    766  55a9		       00		      .byte.b	0	;B
    767  55aa		       f0		      .byte.b	240	;R (33)
    768  55ab		       10		      .byte.b	16	;G
    769  55ac		       00		      .byte.b	0	;B
    770  55ad		       f0		      .byte.b	240	;R (32)
    771  55ae		       b0		      .byte.b	176	;G
    772  55af		       00		      .byte.b	0	;B
    773  55b0		       e0		      .byte.b	224	;R (31)
    774  55b1		       00		      .byte.b	0	;G
    775  55b2		       10		      .byte.b	16	;B
    776  55b3		       e0		      .byte.b	224	;R (30)
    777  55b4		       40		      .byte.b	64	;G
    778  55b5		       00		      .byte.b	0	;B
    779  55b6		       e0		      .byte.b	224	;R (29)
    780  55b7		       20		      .byte.b	32	;G
    781  55b8		       00		      .byte.b	0	;B
    782  55b9		       c0		      .byte.b	192	;R (28)
    783  55ba		       00		      .byte.b	0	;G
    784  55bb		       00		      .byte.b	0	;B
    785  55bc		       c0		      .byte.b	192	;R (27)
    786  55bd		       10		      .byte.b	16	;G
    787  55be		       00		      .byte.b	0	;B
    788  55bf		       c0		      .byte.b	192	;R (26)
    789  55c0		       40		      .byte.b	64	;G
    790  55c1		       10		      .byte.b	16	;B
    791  55c2		       90		      .byte.b	144	;R (25)
    792  55c3		       00		      .byte.b	0	;G
    793  55c4		       00		      .byte.b	0	;B
    794  55c5		       f0		      .byte.b	240	;R (24)
    795  55c6		       60		      .byte.b	96	;G
    796  55c7		       00		      .byte.b	0	;B
    797  55c8		       f0		      .byte.b	240	;R (23)
    798  55c9		       00		      .byte.b	0	;G
    799  55ca		       00		      .byte.b	0	;B
    800  55cb		       f0		      .byte.b	240	;R (22)
    801  55cc		       40		      .byte.b	64	;G
    802  55cd		       00		      .byte.b	0	;B
    803  55ce		       f0		      .byte.b	240	;R (21)
    804  55cf		       10		      .byte.b	16	;G
    805  55d0		       00		      .byte.b	0	;B
    806  55d1		       f0		      .byte.b	240	;R (20)
    807  55d2		       00		      .byte.b	0	;G
    808  55d3		       00		      .byte.b	0	;B
    809  55d4		       f0		      .byte.b	240	;R (19)
    810  55d5		       60		      .byte.b	96	;G
    811  55d6		       00		      .byte.b	0	;B
    812  55d7		       f0		      .byte.b	240	;R (18)
    813  55d8		       20		      .byte.b	32	;G
    814  55d9		       00		      .byte.b	0	;B
    815  55da		       f0		      .byte.b	240	;R (17)
    816  55db		       50		      .byte.b	80	;G
    817  55dc		       00		      .byte.b	0	;B
    818  55dd		       f0		      .byte.b	240	;R (16)
    819  55de		       40		      .byte.b	64	;G
    820  55df		       00		      .byte.b	0	;B
    821  55e0		       f0		      .byte.b	240	;R (15)
    822  55e1		       80		      .byte.b	128	;G
    823  55e2		       00		      .byte.b	0	;B
    824  55e3		       f0		      .byte.b	240	;R (14)
    825  55e4		       40		      .byte.b	64	;G
    826  55e5		       00		      .byte.b	0	;B
    827  55e6		       f0		      .byte.b	240	;R (13)
    828  55e7		       00		      .byte.b	0	;G
    829  55e8		       00		      .byte.b	0	;B
    830  55e9		       f0		      .byte.b	240	;R (12)
    831  55ea		       10		      .byte.b	16	;G
    832  55eb		       00		      .byte.b	0	;B
    833  55ec		       f0		      .byte.b	240	;R (11)
    834  55ed		       50		      .byte.b	80	;G
    835  55ee		       00		      .byte.b	0	;B
    836  55ef		       f0		      .byte.b	240	;R (10)
    837  55f0		       00		      .byte.b	0	;G
    838  55f1		       00		      .byte.b	0	;B
    839  55f2		       f0		      .byte.b	240	;R (9)
    840  55f3		       b0		      .byte.b	176	;G
    841  55f4		       00		      .byte.b	0	;B
    842  55f5		       f0		      .byte.b	240	;R (8)
    843  55f6		       90		      .byte.b	144	;G
    844  55f7		       00		      .byte.b	0	;B
    845  55f8		       e0		      .byte.b	224	;R (7)
    846  55f9		       e0		      .byte.b	224	;G
    847  55fa		       00		      .byte.b	0	;B
    848  55fb		       f0		      .byte.b	240	;R (6)
    849  55fc		       d0		      .byte.b	208	;G
    850  55fd		       00		      .byte.b	0	;B
    851  55fe		       60		      .byte.b	96	;R (5)
    852  55ff		       00		      .byte.b	0	;G
    853  5600		       00		      .byte.b	0	;B
    854  5601		       60		      .byte.b	96	;R (4)
    855  5602		       40		      .byte.b	64	;G
    856  5603		       00		      .byte.b	0	;B
    857  5604		       40		      .byte.b	64	;R (3)
    858  5605		       50		      .byte.b	80	;G
    859  5606		       00		      .byte.b	0	;B
    860  5607		       00		      .byte.b	0	;R (2)
    861  5608		       00		      .byte.b	0	;G
    862  5609		       00		      .byte.b	0	;B
    863  560a		       00		      .byte.b	0	;R (1)
    864  560b		       80		      .byte.b	128	;G
    865  560c		       00		      .byte.b	0	;B
    866  560d		       00		      .byte.b	0	;R (0)
    867  560e		       00		      .byte.b	0	;G
    868  560f		       00		      .byte.b	0	;B
    869  5610				   COL_4
    870  5610		       25		      .byte.b	37	;R (71)
    871  5611		       25		      .byte.b	37	;G
    872  5612		       00		      .byte.b	0	;B
    873  5613		       48		      .byte.b	72	;R (70)
    874  5614		       48		      .byte.b	72	;G
    875  5615		       00		      .byte.b	0	;B
    876  5616		       25		      .byte.b	37	;R (69)
    877  5617		       25		      .byte.b	37	;G
    878  5618		       88		      .byte.b	136	;B
    879  5619		       ff		      .byte.b	255	;R (68)
    880  561a		       00		      .byte.b	0	;G
    881  561b		       00		      .byte.b	0	;B
    882  561c		       ff		      .byte.b	255	;R (67)
    883  561d		       04		      .byte.b	4	;G
    884  561e		       00		      .byte.b	0	;B
    885  561f		       ef		      .byte.b	239	;R (66)
    886  5620		       40		      .byte.b	64	;G
    887  5621		       10		      .byte.b	16	;B
    888  5622		       ff		      .byte.b	255	;R (65)
    889  5623		       00		      .byte.b	0	;G
    890  5624		       00		      .byte.b	0	;B
    891  5625		       ff		      .byte.b	255	;R (64)
    892  5626		       02		      .byte.b	2	;G
    893  5627		       00		      .byte.b	0	;B
    894  5628		       ff		      .byte.b	255	;R (63)
    895  5629		       20		      .byte.b	32	;G
    896  562a		       00		      .byte.b	0	;B
    897  562b		       ff		      .byte.b	255	;R (62)
    898  562c		       a5		      .byte.b	165	;G
    899  562d		       00		      .byte.b	0	;B
    900  562e		       ff		      .byte.b	255	;R (61)
    901  562f		       09		      .byte.b	9	;G
    902  5630		       00		      .byte.b	0	;B
    903  5631		       ff		      .byte.b	255	;R (60)
    904  5632		       00		      .byte.b	0	;G
    905  5633		       00		      .byte.b	0	;B
    906  5634		       7f		      .byte.b	127	;R (59)
    907  5635		       42		      .byte.b	66	;G
    908  5636		       80		      .byte.b	128	;B
    909  5637		       ff		      .byte.b	255	;R (58)
    910  5638		       88		      .byte.b	136	;G
    911  5639		       00		      .byte.b	0	;B
    912  563a		       ff		      .byte.b	255	;R (57)
    913  563b		       40		      .byte.b	64	;G
    914  563c		       00		      .byte.b	0	;B
    915  563d		       ff		      .byte.b	255	;R (56)
    916  563e		       09		      .byte.b	9	;G
    917  563f		       00		      .byte.b	0	;B
    918  5640		       7f		      .byte.b	127	;R (55)
    919  5641		       01		      .byte.b	1	;G
    920  5642		       80		      .byte.b	128	;B
    921  5643		       ff		      .byte.b	255	;R (54)
    922  5644		       91		      .byte.b	145	;G
    923  5645		       00		      .byte.b	0	;B
    924  5646		       fe		      .byte.b	254	;R (53)
    925  5647		       81		      .byte.b	129	;G
    926  5648		       00		      .byte.b	0	;B
    927  5649		       fe		      .byte.b	254	;R (52)
    928  564a		       20		      .byte.b	32	;G
    929  564b		       00		      .byte.b	0	;B
    930  564c		       ff		      .byte.b	255	;R (51)
    931  564d		       03		      .byte.b	3	;G
    932  564e		       00		      .byte.b	0	;B
    933  564f		       ff		      .byte.b	255	;R (50)
    934  5650		       83		      .byte.b	131	;G
    935  5651		       00		      .byte.b	0	;B
    936  5652		       fe		      .byte.b	254	;R (49)
    937  5653		       90		      .byte.b	144	;G
    938  5654		       00		      .byte.b	0	;B
    939  5655		       fe		      .byte.b	254	;R (48)
    940  5656		       83		      .byte.b	131	;G
    941  5657		       00		      .byte.b	0	;B
    942  5658		       7e		      .byte.b	126	;R (47)
    943  5659		       12		      .byte.b	18	;G
    944  565a		       80		      .byte.b	128	;B
    945  565b		       fc		      .byte.b	252	;R (46)
    946  565c		       00		      .byte.b	0	;G
    947  565d		       00		      .byte.b	0	;B
    948  565e		       fe		      .byte.b	254	;R (45)
    949  565f		       07		      .byte.b	7	;G
    950  5660		       00		      .byte.b	0	;B
    951  5661		       ef		      .byte.b	239	;R (44)
    952  5662		       03		      .byte.b	3	;G
    953  5663		       10		      .byte.b	16	;B
    954  5664		       ff		      .byte.b	255	;R (43)
    955  5665		       40		      .byte.b	64	;G
    956  5666		       00		      .byte.b	0	;B
    957  5667		       ff		      .byte.b	255	;R (42)
    958  5668		       01		      .byte.b	1	;G
    959  5669		       00		      .byte.b	0	;B
    960  566a		       ff		      .byte.b	255	;R (41)
    961  566b		       01		      .byte.b	1	;G
    962  566c		       00		      .byte.b	0	;B
    963  566d		       bf		      .byte.b	191	;R (40)
    964  566e		       01		      .byte.b	1	;G
    965  566f		       40		      .byte.b	64	;B
    966  5670		       f7		      .byte.b	247	;R (39)
    967  5671		       80		      .byte.b	128	;G
    968  5672		       08		      .byte.b	8	;B
    969  5673		       ff		      .byte.b	255	;R (38)
    970  5674		       40		      .byte.b	64	;G
    971  5675		       00		      .byte.b	0	;B
    972  5676		       ff		      .byte.b	255	;R (37)
    973  5677		       00		      .byte.b	0	;G
    974  5678		       00		      .byte.b	0	;B
    975  5679		       ff		      .byte.b	255	;R (36)
    976  567a		       40		      .byte.b	64	;G
    977  567b		       00		      .byte.b	0	;B
    978  567c		       ff		      .byte.b	255	;R (35)
    979  567d		       a1		      .byte.b	161	;G
    980  567e		       00		      .byte.b	0	;B
    981  567f		       7f		      .byte.b	127	;R (34)
    982  5680		       05		      .byte.b	5	;G
    983  5681		       80		      .byte.b	128	;B
    984  5682		       ff		      .byte.b	255	;R (33)
    985  5683		       21		      .byte.b	33	;G
    986  5684		       00		      .byte.b	0	;B
    987  5685		       bf		      .byte.b	191	;R (32)
    988  5686		       40		      .byte.b	64	;G
    989  5687		       40		      .byte.b	64	;B
    990  5688		       ff		      .byte.b	255	;R (31)
    991  5689		       61		      .byte.b	97	;G
    992  568a		       00		      .byte.b	0	;B
    993  568b		       7f		      .byte.b	127	;R (30)
    994  568c		       81		      .byte.b	129	;G
    995  568d		       80		      .byte.b	128	;B
    996  568e		       f7		      .byte.b	247	;R (29)
    997  568f		       60		      .byte.b	96	;G
    998  5690		       08		      .byte.b	8	;B
    999  5691		       ff		      .byte.b	255	;R (28)
   1000  5692		       81		      .byte.b	129	;G
   1001  5693		       00		      .byte.b	0	;B
   1002  5694		       ef		      .byte.b	239	;R (27)
   1003  5695		       40		      .byte.b	64	;G
   1004  5696		       10		      .byte.b	16	;B
   1005  5697		       ff		      .byte.b	255	;R (26)
   1006  5698		       60		      .byte.b	96	;G
   1007  5699		       00		      .byte.b	0	;B
   1008  569a		       ff		      .byte.b	255	;R (25)
   1009  569b		       18		      .byte.b	24	;G
   1010  569c		       00		      .byte.b	0	;B
   1011  569d		       ff		      .byte.b	255	;R (24)
   1012  569e		       20		      .byte.b	32	;G
   1013  569f		       00		      .byte.b	0	;B
   1014  56a0		       ff		      .byte.b	255	;R (23)
   1015  56a1		       8a		      .byte.b	138	;G
   1016  56a2		       00		      .byte.b	0	;B
   1017  56a3		       f7		      .byte.b	247	;R (22)
   1018  56a4		       10		      .byte.b	16	;G
   1019  56a5		       08		      .byte.b	8	;B
   1020  56a6		       ff		      .byte.b	255	;R (21)
   1021  56a7		       04		      .byte.b	4	;G
   1022  56a8		       00		      .byte.b	0	;B
   1023  56a9		       df		      .byte.b	223	;R (20)
   1024  56aa		       10		      .byte.b	16	;G
   1025  56ab		       20		      .byte.b	32	;B
   1026  56ac		       ff		      .byte.b	255	;R (19)
   1027  56ad		       90		      .byte.b	144	;G
   1028  56ae		       00		      .byte.b	0	;B
   1029  56af		       ff		      .byte.b	255	;R (18)
   1030  56b0		       12		      .byte.b	18	;G
   1031  56b1		       00		      .byte.b	0	;B
   1032  56b2		       ff		      .byte.b	255	;R (17)
   1033  56b3		       00		      .byte.b	0	;G
   1034  56b4		       00		      .byte.b	0	;B
   1035  56b5		       ff		      .byte.b	255	;R (16)
   1036  56b6		       45		      .byte.b	69	;G
   1037  56b7		       00		      .byte.b	0	;B
   1038  56b8		       ff		      .byte.b	255	;R (15)
   1039  56b9		       10		      .byte.b	16	;G
   1040  56ba		       00		      .byte.b	0	;B
   1041  56bb		       ff		      .byte.b	255	;R (14)
   1042  56bc		       23		      .byte.b	35	;G
   1043  56bd		       00		      .byte.b	0	;B
   1044  56be		       fc		      .byte.b	252	;R (13)
   1045  56bf		       12		      .byte.b	18	;G
   1046  56c0		       00		      .byte.b	0	;B
   1047  56c1		       fc		      .byte.b	252	;R (12)
   1048  56c2		       20		      .byte.b	32	;G
   1049  56c3		       00		      .byte.b	0	;B
   1050  56c4		       fe		      .byte.b	254	;R (11)
   1051  56c5		       46		      .byte.b	70	;G
   1052  56c6		       00		      .byte.b	0	;B
   1053  56c7		       f8		      .byte.b	248	;R (10)
   1054  56c8		       48		      .byte.b	72	;G
   1055  56c9		       00		      .byte.b	0	;B
   1056  56ca		       f0		      .byte.b	240	;R (9)
   1057  56cb		       04		      .byte.b	4	;G
   1058  56cc		       00		      .byte.b	0	;B
   1059  56cd		       e0		      .byte.b	224	;R (8)
   1060  56ce		       20		      .byte.b	32	;G
   1061  56cf		       00		      .byte.b	0	;B
   1062  56d0		       e0		      .byte.b	224	;R (7)
   1063  56d1		       29		      .byte.b	41	;G
   1064  56d2		       00		      .byte.b	0	;B
   1065  56d3		       e0		      .byte.b	224	;R (6)
   1066  56d4		       20		      .byte.b	32	;G
   1067  56d5		       00		      .byte.b	0	;B
   1068  56d6		       e0		      .byte.b	224	;R (5)
   1069  56d7		       84		      .byte.b	132	;G
   1070  56d8		       00		      .byte.b	0	;B
   1071  56d9		       60		      .byte.b	96	;R (4)
   1072  56da		       40		      .byte.b	64	;G
   1073  56db		       00		      .byte.b	0	;B
   1074  56dc		       00		      .byte.b	0	;R (3)
   1075  56dd		       88		      .byte.b	136	;G
   1076  56de		       00		      .byte.b	0	;B
   1077  56df		       00		      .byte.b	0	;R (2)
   1078  56e0		       11		      .byte.b	17	;G
   1079  56e1		       00		      .byte.b	0	;B
   1080  56e2		       24		      .byte.b	36	;R (1)
   1081  56e3		       24		      .byte.b	36	;G
   1082  56e4		       00		      .byte.b	0	;B
   1083  56e5		       00		      .byte.b	0	;R (0)
   1084  56e6		       00		      .byte.b	0	;G
   1085  56e7		       00		      .byte.b	0	;B
   1086  56e8				   COL_5
   1087  56e8		       02		      .byte.b	2	;R (71)
   1088  56e9		       12		      .byte.b	18	;G
   1089  56ea		       00		      .byte.b	0	;B
   1090  56eb		       00		      .byte.b	0	;R (70)
   1091  56ec		       00		      .byte.b	0	;G
   1092  56ed		       00		      .byte.b	0	;B
   1093  56ee		       00		      .byte.b	0	;R (69)
   1094  56ef		       02		      .byte.b	2	;G
   1095  56f0		       00		      .byte.b	0	;B
   1096  56f1		       03		      .byte.b	3	;R (68)
   1097  56f2		       12		      .byte.b	18	;G
   1098  56f3		       00		      .byte.b	0	;B
   1099  56f4		       0b		      .byte.b	11	;R (67)
   1100  56f5		       09		      .byte.b	9	;G
   1101  56f6		       00		      .byte.b	0	;B
   1102  56f7		       07		      .byte.b	7	;R (66)
   1103  56f8		       05		      .byte.b	5	;G
   1104  56f9		       00		      .byte.b	0	;B
   1105  56fa		       03		      .byte.b	3	;R (65)
   1106  56fb		       06		      .byte.b	6	;G
   1107  56fc		       00		      .byte.b	0	;B
   1108  56fd		       01		      .byte.b	1	;R (64)
   1109  56fe		       20		      .byte.b	32	;G
   1110  56ff		       00		      .byte.b	0	;B
   1111  5700		       03		      .byte.b	3	;R (63)
   1112  5701		       03		      .byte.b	3	;G
   1113  5702		       00		      .byte.b	0	;B
   1114  5703		       03		      .byte.b	3	;R (62)
   1115  5704		       0a		      .byte.b	10	;G
   1116  5705		       00		      .byte.b	0	;B
   1117  5706		       03		      .byte.b	3	;R (61)
   1118  5707		       02		      .byte.b	2	;G
   1119  5708		       00		      .byte.b	0	;B
   1120  5709		       03		      .byte.b	3	;R (60)
   1121  570a		       00		      .byte.b	0	;G
   1122  570b		       00		      .byte.b	0	;B
   1123  570c		       03		      .byte.b	3	;R (59)
   1124  570d		       0a		      .byte.b	10	;G
   1125  570e		       00		      .byte.b	0	;B
   1126  570f		       03		      .byte.b	3	;R (58)
   1127  5710		       02		      .byte.b	2	;G
   1128  5711		       00		      .byte.b	0	;B
   1129  5712		       01		      .byte.b	1	;R (57)
   1130  5713		       03		      .byte.b	3	;G
   1131  5714		       00		      .byte.b	0	;B
   1132  5715		       01		      .byte.b	1	;R (56)
   1133  5716		       01		      .byte.b	1	;G
   1134  5717		       00		      .byte.b	0	;B
   1135  5718		       00		      .byte.b	0	;R (55)
   1136  5719		       25		      .byte.b	37	;G
   1137  571a		       00		      .byte.b	0	;B
   1138  571b		       00		      .byte.b	0	;R (54)
   1139  571c		       00		      .byte.b	0	;G
   1140  571d		       00		      .byte.b	0	;B
   1141  571e		       00		      .byte.b	0	;R (53)
   1142  571f		       20		      .byte.b	32	;G
   1143  5720		       00		      .byte.b	0	;B
   1144  5721		       00		      .byte.b	0	;R (52)
   1145  5722		       08		      .byte.b	8	;G
   1146  5723		       00		      .byte.b	0	;B
   1147  5724		       00		      .byte.b	0	;R (51)
   1148  5725		       02		      .byte.b	2	;G
   1149  5726		       00		      .byte.b	0	;B
   1150  5727		       00		      .byte.b	0	;R (50)
   1151  5728		       40		      .byte.b	64	;G
   1152  5729		       00		      .byte.b	0	;B
   1153  572a		       00		      .byte.b	0	;R (49)
   1154  572b		       11		      .byte.b	17	;G
   1155  572c		       00		      .byte.b	0	;B
   1156  572d		       00		      .byte.b	0	;R (48)
   1157  572e		       00		      .byte.b	0	;G
   1158  572f		       00		      .byte.b	0	;B
   1159  5730		       00		      .byte.b	0	;R (47)
   1160  5731		       20		      .byte.b	32	;G
   1161  5732		       00		      .byte.b	0	;B
   1162  5733		       00		      .byte.b	0	;R (46)
   1163  5734		       08		      .byte.b	8	;G
   1164  5735		       00		      .byte.b	0	;B
   1165  5736		       00		      .byte.b	0	;R (45)
   1166  5737		       00		      .byte.b	0	;G
   1167  5738		       00		      .byte.b	0	;B
   1168  5739		       00		      .byte.b	0	;R (44)
   1169  573a		       24		      .byte.b	36	;G
   1170  573b		       00		      .byte.b	0	;B
   1171  573c		       00		      .byte.b	0	;R (43)
   1172  573d		       00		      .byte.b	0	;G
   1173  573e		       00		      .byte.b	0	;B
   1174  573f		       00		      .byte.b	0	;R (42)
   1175  5740		       04		      .byte.b	4	;G
   1176  5741		       00		      .byte.b	0	;B
   1177  5742		       00		      .byte.b	0	;R (41)
   1178  5743		       21		      .byte.b	33	;G
   1179  5744		       00		      .byte.b	0	;B
   1180  5745		       01		      .byte.b	1	;R (40)
   1181  5746		       01		      .byte.b	1	;G
   1182  5747		       00		      .byte.b	0	;B
   1183  5748		       01		      .byte.b	1	;R (39)
   1184  5749		       25		      .byte.b	37	;G
   1185  574a		       00		      .byte.b	0	;B
   1186  574b		       01		      .byte.b	1	;R (38)
   1187  574c		       01		      .byte.b	1	;G
   1188  574d		       00		      .byte.b	0	;B
   1189  574e		       03		      .byte.b	3	;R (37)
   1190  574f		       23		      .byte.b	35	;G
   1191  5750		       00		      .byte.b	0	;B
   1192  5751		       03		      .byte.b	3	;R (36)
   1193  5752		       13		      .byte.b	19	;G
   1194  5753		       00		      .byte.b	0	;B
   1195  5754		       01		      .byte.b	1	;R (35)
   1196  5755		       02		      .byte.b	2	;G
   1197  5756		       00		      .byte.b	0	;B
   1198  5757		       01		      .byte.b	1	;R (34)
   1199  5758		       10		      .byte.b	16	;G
   1200  5759		       00		      .byte.b	0	;B
   1201  575a		       03		      .byte.b	3	;R (33)
   1202  575b		       02		      .byte.b	2	;G
   1203  575c		       00		      .byte.b	0	;B
   1204  575d		       01		      .byte.b	1	;R (32)
   1205  575e		       08		      .byte.b	8	;G
   1206  575f		       00		      .byte.b	0	;B
   1207  5760		       03		      .byte.b	3	;R (31)
   1208  5761		       20		      .byte.b	32	;G
   1209  5762		       00		      .byte.b	0	;B
   1210  5763		       03		      .byte.b	3	;R (30)
   1211  5764		       00		      .byte.b	0	;G
   1212  5765		       00		      .byte.b	0	;B
   1213  5766		       03		      .byte.b	3	;R (29)
   1214  5767		       10		      .byte.b	16	;G
   1215  5768		       00		      .byte.b	0	;B
   1216  5769		       03		      .byte.b	3	;R (28)
   1217  576a		       00		      .byte.b	0	;G
   1218  576b		       00		      .byte.b	0	;B
   1219  576c		       07		      .byte.b	7	;R (27)
   1220  576d		       0e		      .byte.b	14	;G
   1221  576e		       00		      .byte.b	0	;B
   1222  576f		       03		      .byte.b	3	;R (26)
   1223  5770		       41		      .byte.b	65	;G
   1224  5771		       00		      .byte.b	0	;B
   1225  5772		       07		      .byte.b	7	;R (25)
   1226  5773		       04		      .byte.b	4	;G
   1227  5774		       00		      .byte.b	0	;B
   1228  5775		       03		      .byte.b	3	;R (24)
   1229  5776		       21		      .byte.b	33	;G
   1230  5777		       00		      .byte.b	0	;B
   1231  5778		       03		      .byte.b	3	;R (23)
   1232  5779		       04		      .byte.b	4	;G
   1233  577a		       00		      .byte.b	0	;B
   1234  577b		       03		      .byte.b	3	;R (22)
   1235  577c		       02		      .byte.b	2	;G
   1236  577d		       00		      .byte.b	0	;B
   1237  577e		       03		      .byte.b	3	;R (21)
   1238  577f		       26		      .byte.b	38	;G
   1239  5780		       00		      .byte.b	0	;B
   1240  5781		       01		      .byte.b	1	;R (20)
   1241  5782		       01		      .byte.b	1	;G
   1242  5783		       00		      .byte.b	0	;B
   1243  5784		       00		      .byte.b	0	;R (19)
   1244  5785		       21		      .byte.b	33	;G
   1245  5786		       00		      .byte.b	0	;B
   1246  5787		       01		      .byte.b	1	;R (18)
   1247  5788		       09		      .byte.b	9	;G
   1248  5789		       00		      .byte.b	0	;B
   1249  578a		       23		      .byte.b	35	;R (17)
   1250  578b		       22		      .byte.b	34	;G
   1251  578c		       00		      .byte.b	0	;B
   1252  578d		       01		      .byte.b	1	;R (16)
   1253  578e		       01		      .byte.b	1	;G
   1254  578f		       00		      .byte.b	0	;B
   1255  5790		       00		      .byte.b	0	;R (15)
   1256  5791		       29		      .byte.b	41	;G
   1257  5792		       00		      .byte.b	0	;B
   1258  5793		       00		      .byte.b	0	;R (14)
   1259  5794		       00		      .byte.b	0	;G
   1260  5795		       00		      .byte.b	0	;B
   1261  5796		       00		      .byte.b	0	;R (13)
   1262  5797		       04		      .byte.b	4	;G
   1263  5798		       00		      .byte.b	0	;B
   1264  5799		       00		      .byte.b	0	;R (12)
   1265  579a		       20		      .byte.b	32	;G
   1266  579b		       00		      .byte.b	0	;B
   1267  579c		       10		      .byte.b	16	;R (11)
   1268  579d		       12		      .byte.b	18	;G
   1269  579e		       00		      .byte.b	0	;B
   1270  579f		       00		      .byte.b	0	;R (10)
   1271  57a0		       00		      .byte.b	0	;G
   1272  57a1		       00		      .byte.b	0	;B
   1273  57a2		       00		      .byte.b	0	;R (9)
   1274  57a3		       21		      .byte.b	33	;G
   1275  57a4		       00		      .byte.b	0	;B
   1276  57a5		       00		      .byte.b	0	;R (8)
   1277  57a6		       08		      .byte.b	8	;G
   1278  57a7		       00		      .byte.b	0	;B
   1279  57a8		       00		      .byte.b	0	;R (7)
   1280  57a9		       20		      .byte.b	32	;G
   1281  57aa		       00		      .byte.b	0	;B
   1282  57ab		       00		      .byte.b	0	;R (6)
   1283  57ac		       04		      .byte.b	4	;G
   1284  57ad		       00		      .byte.b	0	;B
   1285  57ae		       20		      .byte.b	32	;R (5)
   1286  57af		       20		      .byte.b	32	;G
   1287  57b0		       00		      .byte.b	0	;B
   1288  57b1		       00		      .byte.b	0	;R (4)
   1289  57b2		       09		      .byte.b	9	;G
   1290  57b3		       00		      .byte.b	0	;B
   1291  57b4		       00		      .byte.b	0	;R (3)
   1292  57b5		       00		      .byte.b	0	;G
   1293  57b6		       00		      .byte.b	0	;B
   1294  57b7		       00		      .byte.b	0	;R (2)
   1295  57b8		       48		      .byte.b	72	;G
   1296  57b9		       00		      .byte.b	0	;B
   1297  57ba		       02		      .byte.b	2	;R (1)
   1298  57bb		       02		      .byte.b	2	;G
   1299  57bc		       00		      .byte.b	0	;B
   1300  57bd		       00		      .byte.b	0	;R (0)
   1301  57be		       00		      .byte.b	0	;G
   1302  57bf		       00		      .byte.b	0	;B
------- FILE titleScreen.asm
    262  57c0							;    include "pizza.asm"
    263  57c0
      0  57c0					      CHECK_BANK_SIZE	"TITLESCREEN"
      1  57c0		       07 c0	   .TEMP      =	* - BANK_START
 TITLESCREEN (2K) SIZE =  $7c0 , FREE= $40
      2  57c0					      ECHO	"TITLESCREEN", "(2K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE - .TEMP
      3  57c0				  -	      if	( .TEMP ) > ROM_BANK_SIZE
      4  57c0				  -	      ECHO	"BANK OVERFLOW @ ", * - ORIGIN
      5  57c0				  -	      ERR
      6  57c0					      endif
------- FILE ./chess.asm
    359  57c0
    360  57c0							; The handlers for piece move generation
------- FILE Handler_BANK1.asm LEVEL 2 PASS 3
      0  57c0					      include	"Handler_BANK1.asm"
      1  57c0							; Copyright (C)2020 Andrew Davie
      2  57c0
      3  57c0							;---------------------------------------------------------------------------------------------------
      4  57c0
      0  57c0					      NEWRAMBANK	MOVES_RAM	; RAM bank for holding the following ROM shadow
      1  57c0
      2  57c0
      3  57c0
      4 U2000 ????				      SEG.U	MOVES_RAM
      5 U2000					      ORG	ORIGIN_RAM
      6 U2000					      RORG	RAM_3E
      7 U2000				   BANK_START SET	*
      8 U2000				   RAMBANK_MOVES_RAM SET	ORIGIN_RAM / RAM_SIZE
      9 U2000				   _CURRENT_RAMBANK SET	RAMBANK_MOVES_RAM
     10 U2000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
      0 U2000					      NEWBANK	MOVES	; copy the following bank to RAMBANK_MOVES_RAM
      1  5bdf ????				      SEG	MOVES
      2  5800					      ORG	ORIGIN
      3  5800					      RORG	$F000
      4  5800				   BANK_START SET	*
      5  5800				   MOVES      SET	ORIGIN / 2048
      6  5800				   ORIGIN     SET	ORIGIN + 2048
      7  5800				   _CURRENT_BANK SET	MOVES
      7  5800
      8  5800
      9  5800							; Board is a 10 x 12 object which simplifies the generation of moves
     10  5800							; The squares marked '░░░' are illegal. The ("X12") index of each square is the left
     11  5800							; number + the bottom number. The "BASE64" square numbering is used to simplify movement code.
     12  5800							; Bottom left legal square (AS VISIBLE ON SCREEN) is #22
     13  5800
     14  5800							;     X12 numbering
     15  5800							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     16  5800							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      BASE64 numbering
     17  5800							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     18  5800							; 90 ┃░░░┊░░░┊ 92┊ 93┊ 94┊ 95┊ 96┊ 97┊ 98┊ 99┃  BLACK    8 ┃ 56┊ 57┊ 58┊ 59┊ 60┊ 61┊ 62┊ 63┃
     19  5800							; 80 ┃░░░┊░░░┊ 82┊ 83┊ 84┊ 85┊ 86┊ 87┊ 88┊ 89┃  BLACK    7 ┃ 48┊ 49┊ 50┊ 51┊ 52┊ 53┊ 54┊ 55┃
     20  5800							; 70 ┃░░░┊░░░┊ 72┊ 73┊ 74┊ 75┊ 76┊ 77┊ 78┊ 79┃	    6 ┃ 40┊ 41┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┃
     21  5800							; 60 ┃░░░┊░░░┊ 62┊ 63┊ 64┊ 65┊ 66┊ 67┊ 68┊ 69┃	    5 ┃ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃
     22  5800							; 50 ┃░░░┊░░░┊ 52┊ 53┊ 54┊ 55┊ 56┊ 57┊ 58┊ 59┃	    4 ┃ 24┊ 25┊ 26┊ 27┊ 28┊ 29┊ 30┊ 31┃
     23  5800							; 40 ┃░░░┊░░░┊ 42┊ 43┊ 44┊ 45┊ 46┊ 47┊ 48┊ 49┃	    3 ┃ 16┊ 17┊ 18┊ 19┊ 20┊ 21┊ 22┊ 23┃
     24  5800							; 30 ┃░░░┊░░░┊ 32┊ 33┊ 34┊ 35┊ 36┊ 37┊ 38┊ 39┃  WHITE    2 ┃  8┊  9┊ 10┊ 11┊ 12┊ 13┊ 14┊ 15┃
     25  5800							; 20 ┃░░░┊░░░┊ 22┊ 23┊ 24┊ 25┊ 26┊ 27┊ 28┊ 29┃  WHITE    1 ┃  0┊  1┊  2┊  3┊  4┊  5┊  6┊  7┃
     26  5800							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃	      ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     27  5800							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃		A   B	C   D	E   F	G   H
     28  5800							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     29  5800							;	0   1	2   3	4   5	6   7	8   9
     30  5800							;		A   B	C   D	E   F	G   H
     31  5800
     32  5800							;     HEX X12
     33  5800							;    ┏━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┯━━━┓
     34  5800							;110 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     35  5800							;100 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     36  5800							; 90 ┃░░░┊░░░┊$5C┊$5D┊$5E┊$5F┊$60┊$61┊$62┊$63┃
     37  5800							; 80 ┃░░░┊░░░┊$52┊$53┊$54┊$55┊$56┊$57┊$58┊$59┃
     38  5800							; 70 ┃░░░┊░░░┊$48┊$49┊$4A┊$4B┊$4C┊$4D┊$4E┊$4F┃
     39  5800							; 60 ┃░░░┊░░░┊$3E┊$3F┊$40┊$41┊$42┊$43┊$44┊$45┃
     40  5800							; 50 ┃░░░┊░░░┊$34┊$35┊$36┊$37┊$38┊$39┊$3A┊$3B┃
     41  5800							; 40 ┃░░░┊░░░┊$2A┊$2B┊$2C┊$2D┊$2E┊$2F┊$30┊$31┃
     42  5800							; 30 ┃░░░┊░░░┊$20┊$21┊$22┊$23┊$24┊$25┊$26|$27┃
     43  5800							; 20 ┃░░░┊░░░┊$16┊$17┊$18┊$19┊$1A┊$1B┊$1C┊$1D┃
     44  5800							; 10 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     45  5800							;  0 ┃░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┊░░░┃
     46  5800							;    ┗━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┷━━━┛
     47  5800							;	0   1	2   3	4   5	6   7	8   9
     48  5800							;		A   B	C   D	E   F	G   H
     49  5800
     50  5800
     51  5800							; We put a short buffer before 'ValidSquare' when it is at the start of the bank, so that
     52  5800							; the move indexing (ie., "ValidSquare+{1},x" won't drop off the beginning of the bank
     53  5800							; and sause "segfaults". 22 is the max offset (a knight move). These spare bytes can
     54  5800							; be re-used for something else - we just need to guarantee there are 22 of them there
     55  5800
     56  5800		       00 00 00 00*	      ds	22	; so indexing of "ValidSquare-22,x" won't fail
     57  5816
     58  5816							; Note, we will never index INTO the above bytes - x will always be >= 22
     59  5816							; We just need to make sure that the actual indexing will not have an address before
     60  5816							; the index of outside the page.
     61  5816
      0  5816					      OPTIONAL_PAGEBREAK	"ValidSquare", 120 + 80
     10  5816					      LIST	ON
      0  5816					      DEF	ValidSquare
      1  5816				   BANK_ValidSquare SET	_CURRENT_BANK
      2  5816
      3  5816				   ValidSquare
     64  5816
     65  5816
     66  5816							; Use this table to
     67  5816							;   a) Determine if a square is valid (-1 = NO)
     68  5816							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
     69  5816							;	if a white pawn on square "x" can move "up" the board.
     70  5816
     71  5816		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     72  5820		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
     73  582a		       ff ff 16 17*	      .byte.b	-1, -1, 22, 23, 24, 25, 26, 27, 28, 29
     74  5834		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
     75  583e		       ff ff 2a 2b*	      .byte.b	-1, -1, 42, 43, 44, 45, 46, 47, 48, 49
     76  5848		       ff ff 34 35*	      .byte.b	-1, -1, 52, 53, 54, 55, 56, 57, 58, 59
     77  5852		       ff ff 3e 3f*	      .byte.b	-1, -1, 62, 63, 64, 65, 66, 67, 68, 69
     78  585c		       ff ff 48 49*	      .byte.b	-1, -1, 72, 73, 74, 75, 76, 77, 78, 79
     79  5866		       ff ff 52 53*	      .byte.b	-1, -1, 82, 83, 84, 85, 86, 87, 88, 89
     80  5870		       ff ff 5c 5d*	      .byte.b	-1, -1, 92, 93, 94, 95, 96, 97, 98, 99	; CONTINUES...
     81  587a
      0  587a					      DEF	Board
      1  587a				   BANK_Board SET	_CURRENT_BANK
      2  587a
      3  587a				   Board
     83  587a
     84  587a							; A 10X10... we should never write using invalid square
     85  587a							; ON COPY TO RAM BANK, 'BOARD' SELF-INITIALISES TO THE FOLLOWING VALUES
     86  587a							; FROM THEN ON IT'S WRITEABLE (REMEMBER TO +RAM_WRITE) FOR MODIFICATIONS
     87  587a
     88  587a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     89  5884		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1	; shared with above table
     90  588e
     91  588e					      REPEAT	8
     92  588e		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  588e					      REPEND
     92  5898		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  5898					      REPEND
     92  58a2		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58a2					      REPEND
     92  58ac		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58ac					      REPEND
     92  58b6		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58b6					      REPEND
     92  58c0		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58c0					      REPEND
     92  58ca		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     91  58ca					      REPEND
     92  58d4		       ff ff 00 00*	      .byte.b	-1, -1, 0, 0, 0, 0, 0, 0, 0, 0
     93  58de					      REPEND
     94  58de
     95  58de							; DON'T OVERSTEP BOUNDS WHEN WRITING BOARD - MAXIMUM INDEX = 99
     96  58de
     97  58de							; PARANOIA... following not used, but there in case above violated
     98  58de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
     99  58de							;.byte -1, -1, -1, -1, -1, -1, -1, -1, -1, -1	      ; shared with above table
    100  58de
    101  58de							;---------------------------------------------------------------------------------------------------
    102  58de
------- FILE Handler_QUEEN.asm LEVEL 3 PASS 3
      0  58de					      include	"Handler_QUEEN.asm"
      1  58de							; Copyright (C)2020 Andrew Davie
      2  58de
      3  58de							;---------------------------------------------------------------------------------------------------
      4  58de							; QUEEN
      5  58de							;---------------------------------------------------------------------------------------------------
      6  58de
      0  58de					      DEF	Handle_QUEEN
      1  58de				   BANK_Handle_QUEEN SET	_CURRENT_BANK
      2  58de
      3  58de				   Handle_QUEEN
      8  58de
      9  58de							; Pass...
     10  58de							; x = currentSquare (square the piece is on)
     11  58de							; currentPiece (with flags/colour attached)
     12  58de
      0  58de					      MOVE_TOWARDS	_DOWN+_LEFT
      1  58de					      SUBROUTINE
      2  58de
      3  58de
      4  58de		       a6 98		      ldx	currentSquare
      5  58e0		       d0 03		      bne	.project
      6  58e2
      7  58e2		       20 cc fc    .empty     jsr	AddMove
      8  58e5		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  58e8		       30 0c		      bmi	.invalid
     10  58ea		       b9 7a f0 	      lda	Board,y
     11  58ed		       f0 f3		      beq	.empty
     12  58ef		       45 97		      eor	currentPiece
     13  58f1		       10 03		      bpl	.invalid
     14  58f3		       20 cc fc 	      jsr	AddMove
     15  58f6
     16  58f6				   .invalid
      0  58f6					      MOVE_TOWARDS	_DOWN
      1  58f6					      SUBROUTINE
      2  58f6
      3  58f6
      4  58f6		       a6 98		      ldx	currentSquare
      5  58f8		       d0 03		      bne	.project
      6  58fa
      7  58fa		       20 cc fc    .empty     jsr	AddMove
      8  58fd		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  5900		       30 0c		      bmi	.invalid
     10  5902		       b9 7a f0 	      lda	Board,y
     11  5905		       f0 f3		      beq	.empty
     12  5907		       45 97		      eor	currentPiece
     13  5909		       10 03		      bpl	.invalid
     14  590b		       20 cc fc 	      jsr	AddMove
     15  590e
     16  590e				   .invalid
      0  590e					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  590e					      SUBROUTINE
      2  590e
      3  590e
      4  590e		       a6 98		      ldx	currentSquare
      5  5910		       d0 03		      bne	.project
      6  5912
      7  5912		       20 cc fc    .empty     jsr	AddMove
      8  5915		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  5918		       30 0c		      bmi	.invalid
     10  591a		       b9 7a f0 	      lda	Board,y
     11  591d		       f0 f3		      beq	.empty
     12  591f		       45 97		      eor	currentPiece
     13  5921		       10 03		      bpl	.invalid
     14  5923		       20 cc fc 	      jsr	AddMove
     15  5926
     16  5926				   .invalid
      0  5926					      MOVE_TOWARDS	_RIGHT
      1  5926					      SUBROUTINE
      2  5926
      3  5926
      4  5926		       a6 98		      ldx	currentSquare
      5  5928		       d0 03		      bne	.project
      6  592a
      7  592a		       20 cc fc    .empty     jsr	AddMove
      8  592d		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  5930		       30 0c		      bmi	.invalid
     10  5932		       b9 7a f0 	      lda	Board,y
     11  5935		       f0 f3		      beq	.empty
     12  5937		       45 97		      eor	currentPiece
     13  5939		       10 03		      bpl	.invalid
     14  593b		       20 cc fc 	      jsr	AddMove
     15  593e
     16  593e				   .invalid
      0  593e					      MOVE_TOWARDS	_UP+_RIGHT
      1  593e					      SUBROUTINE
      2  593e
      3  593e
      4  593e		       a6 98		      ldx	currentSquare
      5  5940		       d0 03		      bne	.project
      6  5942
      7  5942		       20 cc fc    .empty     jsr	AddMove
      8  5945		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  5948		       30 0c		      bmi	.invalid
     10  594a		       b9 7a f0 	      lda	Board,y
     11  594d		       f0 f3		      beq	.empty
     12  594f		       45 97		      eor	currentPiece
     13  5951		       10 03		      bpl	.invalid
     14  5953		       20 cc fc 	      jsr	AddMove
     15  5956
     16  5956				   .invalid
      0  5956					      MOVE_TOWARDS	_UP
      1  5956					      SUBROUTINE
      2  5956
      3  5956
      4  5956		       a6 98		      ldx	currentSquare
      5  5958		       d0 03		      bne	.project
      6  595a
      7  595a		       20 cc fc    .empty     jsr	AddMove
      8  595d		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  5960		       30 0c		      bmi	.invalid
     10  5962		       b9 7a f0 	      lda	Board,y
     11  5965		       f0 f3		      beq	.empty
     12  5967		       45 97		      eor	currentPiece
     13  5969		       10 03		      bpl	.invalid
     14  596b		       20 cc fc 	      jsr	AddMove
     15  596e
     16  596e				   .invalid
      0  596e					      MOVE_TOWARDS	_UP+_LEFT
      1  596e					      SUBROUTINE
      2  596e
      3  596e
      4  596e		       a6 98		      ldx	currentSquare
      5  5970		       d0 03		      bne	.project
      6  5972
      7  5972		       20 cc fc    .empty     jsr	AddMove
      8  5975		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  5978		       30 0c		      bmi	.invalid
     10  597a		       b9 7a f0 	      lda	Board,y
     11  597d		       f0 f3		      beq	.empty
     12  597f		       45 97		      eor	currentPiece
     13  5981		       10 03		      bpl	.invalid
     14  5983		       20 cc fc 	      jsr	AddMove
     15  5986
     16  5986				   .invalid
      0  5986					      MOVE_TOWARDS	_LEFT
      1  5986					      SUBROUTINE
      2  5986
      3  5986
      4  5986		       a6 98		      ldx	currentSquare
      5  5988		       d0 03		      bne	.project
      6  598a
      7  598a		       20 cc fc    .empty     jsr	AddMove
      8  598d		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  5990		       30 0c		      bmi	.invalid
     10  5992		       b9 7a f0 	      lda	Board,y
     11  5995		       f0 f3		      beq	.empty
     12  5997		       45 97		      eor	currentPiece
     13  5999		       10 03		      bpl	.invalid
     14  599b		       20 cc fc 	      jsr	AddMove
     15  599e
     16  599e				   .invalid
     21  599e
     22  599e		       4c a1 fa 	      jmp	MoveReturn
     23  59a1
     24  59a1							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_BISHOP.asm LEVEL 3 PASS 3
      0  59a1					      include	"Handler_BISHOP.asm"
      1  59a1							; Copyright (C)2020 Andrew Davie
      2  59a1
      3  59a1							;---------------------------------------------------------------------------------------------------
      4  59a1							; BISHOP
      5  59a1							;---------------------------------------------------------------------------------------------------
      6  59a1
      0  59a1					      DEF	Handle_BISHOP
      1  59a1				   BANK_Handle_BISHOP SET	_CURRENT_BANK
      2  59a1
      3  59a1				   Handle_BISHOP
      8  59a1
      9  59a1							; x = currentSquare (square the piece is on)
     10  59a1							; currentPiece (with flags/colour attached)
     11  59a1
      0  59a1					      MOVE_TOWARDS	_DOWN+_LEFT
      1  59a1					      SUBROUTINE
      2  59a1
      3  59a1
      4  59a1		       a6 98		      ldx	currentSquare
      5  59a3		       d0 03		      bne	.project
      6  59a5
      7  59a5		       20 cc fc    .empty     jsr	AddMove
      8  59a8		       bc 0b f0    .project   ldy	ValidSquare+_DOWN+_LEFT,x
      9  59ab		       30 0c		      bmi	.invalid
     10  59ad		       b9 7a f0 	      lda	Board,y
     11  59b0		       f0 f3		      beq	.empty
     12  59b2		       45 97		      eor	currentPiece
     13  59b4		       10 03		      bpl	.invalid
     14  59b6		       20 cc fc 	      jsr	AddMove
     15  59b9
     16  59b9				   .invalid
      0  59b9					      MOVE_TOWARDS	_DOWN+_RIGHT
      1  59b9					      SUBROUTINE
      2  59b9
      3  59b9
      4  59b9		       a6 98		      ldx	currentSquare
      5  59bb		       d0 03		      bne	.project
      6  59bd
      7  59bd		       20 cc fc    .empty     jsr	AddMove
      8  59c0		       bc 0d f0    .project   ldy	ValidSquare+_DOWN+_RIGHT,x
      9  59c3		       30 0c		      bmi	.invalid
     10  59c5		       b9 7a f0 	      lda	Board,y
     11  59c8		       f0 f3		      beq	.empty
     12  59ca		       45 97		      eor	currentPiece
     13  59cc		       10 03		      bpl	.invalid
     14  59ce		       20 cc fc 	      jsr	AddMove
     15  59d1
     16  59d1				   .invalid
      0  59d1					      MOVE_TOWARDS	_UP+_LEFT
      1  59d1					      SUBROUTINE
      2  59d1
      3  59d1
      4  59d1		       a6 98		      ldx	currentSquare
      5  59d3		       d0 03		      bne	.project
      6  59d5
      7  59d5		       20 cc fc    .empty     jsr	AddMove
      8  59d8		       bc 1f f0    .project   ldy	ValidSquare+_UP+_LEFT,x
      9  59db		       30 0c		      bmi	.invalid
     10  59dd		       b9 7a f0 	      lda	Board,y
     11  59e0		       f0 f3		      beq	.empty
     12  59e2		       45 97		      eor	currentPiece
     13  59e4		       10 03		      bpl	.invalid
     14  59e6		       20 cc fc 	      jsr	AddMove
     15  59e9
     16  59e9				   .invalid
      0  59e9					      MOVE_TOWARDS	_UP+_RIGHT
      1  59e9					      SUBROUTINE
      2  59e9
      3  59e9
      4  59e9		       a6 98		      ldx	currentSquare
      5  59eb		       d0 03		      bne	.project
      6  59ed
      7  59ed		       20 cc fc    .empty     jsr	AddMove
      8  59f0		       bc 21 f0    .project   ldy	ValidSquare+_UP+_RIGHT,x
      9  59f3		       30 0c		      bmi	.invalid
     10  59f5		       b9 7a f0 	      lda	Board,y
     11  59f8		       f0 f3		      beq	.empty
     12  59fa		       45 97		      eor	currentPiece
     13  59fc		       10 03		      bpl	.invalid
     14  59fe		       20 cc fc 	      jsr	AddMove
     15  5a01
     16  5a01				   .invalid
     16  5a01
     17  5a01		       4c a1 fa 	      jmp	MoveReturn
     18  5a04
     19  5a04							;---------------------------------------------------------------------------------------------------
     20  5a04							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_ROOK.asm LEVEL 3 PASS 3
      0  5a04					      include	"Handler_ROOK.asm"
      1  5a04							; Copyright (C)2020 Andrew Davie
      2  5a04							; Rook move handler
      3  5a04
      4  5a04							;---------------------------------------------------------------------------------------------------
      5  5a04							; ROOK
      6  5a04							;---------------------------------------------------------------------------------------------------
      7  5a04
      0  5a04					      DEF	Handle_ROOK
      1  5a04				   BANK_Handle_ROOK SET	_CURRENT_BANK
      2  5a04
      3  5a04				   Handle_ROOK
      9  5a04
     10  5a04							; Pass...
     11  5a04							; x = currentSquare (square the piece is on)
     12  5a04							; currentPiece (with flags/colour attached)
     13  5a04
      0  5a04					      MOVE_TOWARDS	_DOWN
      1  5a04					      SUBROUTINE
      2  5a04
      3  5a04
      4  5a04		       a6 98		      ldx	currentSquare
      5  5a06		       d0 03		      bne	.project
      6  5a08
      7  5a08		       20 cc fc    .empty     jsr	AddMove
      8  5a0b		       bc 0c f0    .project   ldy	ValidSquare+_DOWN,x
      9  5a0e		       30 0c		      bmi	.invalid
     10  5a10		       b9 7a f0 	      lda	Board,y
     11  5a13		       f0 f3		      beq	.empty
     12  5a15		       45 97		      eor	currentPiece
     13  5a17		       10 03		      bpl	.invalid
     14  5a19		       20 cc fc 	      jsr	AddMove
     15  5a1c
     16  5a1c				   .invalid
      0  5a1c					      MOVE_TOWARDS	_RIGHT
      1  5a1c					      SUBROUTINE
      2  5a1c
      3  5a1c
      4  5a1c		       a6 98		      ldx	currentSquare
      5  5a1e		       d0 03		      bne	.project
      6  5a20
      7  5a20		       20 cc fc    .empty     jsr	AddMove
      8  5a23		       bc 17 f0    .project   ldy	ValidSquare+_RIGHT,x
      9  5a26		       30 0c		      bmi	.invalid
     10  5a28		       b9 7a f0 	      lda	Board,y
     11  5a2b		       f0 f3		      beq	.empty
     12  5a2d		       45 97		      eor	currentPiece
     13  5a2f		       10 03		      bpl	.invalid
     14  5a31		       20 cc fc 	      jsr	AddMove
     15  5a34
     16  5a34				   .invalid
      0  5a34					      MOVE_TOWARDS	_UP
      1  5a34					      SUBROUTINE
      2  5a34
      3  5a34
      4  5a34		       a6 98		      ldx	currentSquare
      5  5a36		       d0 03		      bne	.project
      6  5a38
      7  5a38		       20 cc fc    .empty     jsr	AddMove
      8  5a3b		       bc 20 f0    .project   ldy	ValidSquare+_UP,x
      9  5a3e		       30 0c		      bmi	.invalid
     10  5a40		       b9 7a f0 	      lda	Board,y
     11  5a43		       f0 f3		      beq	.empty
     12  5a45		       45 97		      eor	currentPiece
     13  5a47		       10 03		      bpl	.invalid
     14  5a49		       20 cc fc 	      jsr	AddMove
     15  5a4c
     16  5a4c				   .invalid
      0  5a4c					      MOVE_TOWARDS	_LEFT
      1  5a4c					      SUBROUTINE
      2  5a4c
      3  5a4c
      4  5a4c		       a6 98		      ldx	currentSquare
      5  5a4e		       d0 03		      bne	.project
      6  5a50
      7  5a50		       20 cc fc    .empty     jsr	AddMove
      8  5a53		       bc 15 f0    .project   ldy	ValidSquare+_LEFT,x
      9  5a56		       30 0c		      bmi	.invalid
     10  5a58		       b9 7a f0 	      lda	Board,y
     11  5a5b		       f0 f3		      beq	.empty
     12  5a5d		       45 97		      eor	currentPiece
     13  5a5f		       10 03		      bpl	.invalid
     14  5a61		       20 cc fc 	      jsr	AddMove
     15  5a64
     16  5a64				   .invalid
     18  5a64
     19  5a64		       4c a1 fa 	      jmp	MoveReturn
     20  5a67
     21  5a67							;---------------------------------------------------------------------------------------------------
     22  5a67							; EOF
------- FILE Handler_BANK1.asm
------- FILE Handler_KING.asm LEVEL 3 PASS 3
      0  5a67					      include	"Handler_KING.asm"
      1  5a67							; Copyright (C)2020 Andrew Davie
      2  5a67
      3  5a67							;---------------------------------------------------------------------------------------------------
      4  5a67							; KING
      5  5a67							; This is the move handler for a KING
      6  5a67							; "Check" is detected in the next ply of the search.
      7  5a67
      8  5a67
      9  5a67							;---------------------------------------------------------------------------------------------------
     10  5a67
     11  5a67							; MACRO - Castling
     12  5a67
     13  5a67		       00 03	   KINGSIDE   =	3
     14  5a67		       ff ff ff fc QUEENSIDE  =	-4
     15  5a67
     16  5a67					      MAC	castle
     17  5a67							; {1} = "KINGSIDE" or "QUEENSIDE"
     18  5a67
     19  5a67					      ldx	currentSquare
     20  5a67					      lda	Board+{1},x	; kingside/queenside R position
     21  5a67					      and	#PIECE_MASK|FLAG_MOVED
     22  5a67					      cmp	#ROOK
     23  5a67					      bne	.noCastle	; not a R that hasn't moved
     24  5a67
     25  5a67							; It's a R and it *HAS* to be correct colour because it hasn't moved!
     26  5a67							; AND the K hasn't moved (earlier check), so check for vacant squares between K and R
     27  5a67
     28  5a67					      IF	{1} = QUEENSIDE
     29  5a67					      lda	Board-3,x	; nothing in N pos
     30  5a67					      bne	.noCastle
     31  5a67					      lda	Board-2,x	; nothing in B pos
     32  5a67					      bne	.noCastle
     33  5a67					      lda	Board-1,x	; nothing in Q pos
     34  5a67					      bne	.noCastle
     35  5a67
     36  5a67					      ENDIF
     37  5a67
     38  5a67					      IF	{1} = KINGSIDE
     39  5a67					      lda	Board+2,x	; check N pos
     40  5a67					      bne	.noCastle
     41  5a67					      lda	Board+1,x	; check B pos
     42  5a67					      bne	.noCastle
     43  5a67					      ENDIF
     44  5a67
     45  5a67							; appropriate N/B/(Q) squares are vacant so we proceed...
     46  5a67
     47  5a67							; FINALLY -- king can castle
     48  5a67							; note: when we actually DO the move we MUST insert "Phantom" kings onto the board over the
     49  5a67							; squares the king traverses so that "check" (and thus illegal moves) can be detected on the
     50  5a67							; next move. Castling will be detected by K moving > 1 square. (TODO: FIX?? not CASTLE flag??)
     51  5a67
     52  5a67					      lda	currentPiece
     53  5a67					      ora	#FLAG_CASTLE	; flag it's a castling move
     54  5a67					      sta	currentPiece
     55  5a67
     56  5a67					      IF	{1} = KINGSIDE
     57  5a67					      ldy	ValidSquare+2,x
     58  5a67					      ENDIF
     59  5a67
     60  5a67					      IF	{1} = QUEENSIDE
     61  5a67					      ldy	ValidSquare-2,x
     62  5a67					      ENDIF
     63  5a67
     64  5a67					      jsr	AddMove	; 57
     65  5a67
     66  5a67				   .noCastle
     67  5a67					      ENDM
     68  5a67
     69  5a67
     70  5a67							;---------------------------------------------------------------------------------------------------
     71  5a67
      0  5a67					      DEF	Handle_KING
      1  5a67				   BANK_Handle_KING SET	_CURRENT_BANK
      2  5a67
      3  5a67				   Handle_KING
     73  5a67					      SUBROUTINE
     74  5a67
     75  5a67							; x = currentSquare (square the KING is on)
     76  5a67							; currentPiece (KING of course, but with flags/colour attached)
     77  5a67
      0  5a67					      MOVE_TO	_DOWN+_LEFT
      1  5a67					      SUBROUTINE
      2  5a67		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      3  5a6a		       30 0c		      bmi	.invalid
      4  5a6c		       b9 7a f0 	      lda	Board,y
      5  5a6f		       f0 04		      beq	.squareEmpty
      6  5a71		       45 97		      eor	currentPiece
      7  5a73		       10 03		      bpl	.invalid
      8  5a75		       20 cc fc    .squareEmpty jsr	AddMove
      9  5a78				   .invalid
      0  5a78					      MOVE_TO_X	_DOWN
      1  5a78		       a6 98		      ldx	currentSquare
      0  5a7a					      MOVE_TO	_DOWN
      1  5a7a					      SUBROUTINE
      2  5a7a		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x
      3  5a7d		       30 0c		      bmi	.invalid
      4  5a7f		       b9 7a f0 	      lda	Board,y
      5  5a82		       f0 04		      beq	.squareEmpty
      6  5a84		       45 97		      eor	currentPiece
      7  5a86		       10 03		      bpl	.invalid
      8  5a88		       20 cc fc    .squareEmpty jsr	AddMove
      9  5a8b				   .invalid
      0  5a8b					      MOVE_TO_X	_DOWN+_RIGHT
      1  5a8b		       a6 98		      ldx	currentSquare
      0  5a8d					      MOVE_TO	_DOWN+_RIGHT
      1  5a8d					      SUBROUTINE
      2  5a8d		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      3  5a90		       30 0c		      bmi	.invalid
      4  5a92		       b9 7a f0 	      lda	Board,y
      5  5a95		       f0 04		      beq	.squareEmpty
      6  5a97		       45 97		      eor	currentPiece
      7  5a99		       10 03		      bpl	.invalid
      8  5a9b		       20 cc fc    .squareEmpty jsr	AddMove
      9  5a9e				   .invalid
      0  5a9e					      MOVE_TO_X	_RIGHT
      1  5a9e		       a6 98		      ldx	currentSquare
      0  5aa0					      MOVE_TO	_RIGHT
      1  5aa0					      SUBROUTINE
      2  5aa0		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      3  5aa3		       30 0c		      bmi	.invalid
      4  5aa5		       b9 7a f0 	      lda	Board,y
      5  5aa8		       f0 04		      beq	.squareEmpty
      6  5aaa		       45 97		      eor	currentPiece
      7  5aac		       10 03		      bpl	.invalid
      8  5aae		       20 cc fc    .squareEmpty jsr	AddMove
      9  5ab1				   .invalid
      0  5ab1					      MOVE_TO_X	_UP+_RIGHT
      1  5ab1		       a6 98		      ldx	currentSquare
      0  5ab3					      MOVE_TO	_UP+_RIGHT
      1  5ab3					      SUBROUTINE
      2  5ab3		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      3  5ab6		       30 0c		      bmi	.invalid
      4  5ab8		       b9 7a f0 	      lda	Board,y
      5  5abb		       f0 04		      beq	.squareEmpty
      6  5abd		       45 97		      eor	currentPiece
      7  5abf		       10 03		      bpl	.invalid
      8  5ac1		       20 cc fc    .squareEmpty jsr	AddMove
      9  5ac4				   .invalid
      0  5ac4					      MOVE_TO_X	_UP
      1  5ac4		       a6 98		      ldx	currentSquare
      0  5ac6					      MOVE_TO	_UP
      1  5ac6					      SUBROUTINE
      2  5ac6		       bc 20 f0 	      ldy	ValidSquare+_UP,x
      3  5ac9		       30 0c		      bmi	.invalid
      4  5acb		       b9 7a f0 	      lda	Board,y
      5  5ace		       f0 04		      beq	.squareEmpty
      6  5ad0		       45 97		      eor	currentPiece
      7  5ad2		       10 03		      bpl	.invalid
      8  5ad4		       20 cc fc    .squareEmpty jsr	AddMove
      9  5ad7				   .invalid
      0  5ad7					      MOVE_TO_X	_UP+_LEFT
      1  5ad7		       a6 98		      ldx	currentSquare
      0  5ad9					      MOVE_TO	_UP+_LEFT
      1  5ad9					      SUBROUTINE
      2  5ad9		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      3  5adc		       30 0c		      bmi	.invalid
      4  5ade		       b9 7a f0 	      lda	Board,y
      5  5ae1		       f0 04		      beq	.squareEmpty
      6  5ae3		       45 97		      eor	currentPiece
      7  5ae5		       10 03		      bpl	.invalid
      8  5ae7		       20 cc fc    .squareEmpty jsr	AddMove
      9  5aea				   .invalid
      0  5aea					      MOVE_TO_X	_LEFT
      1  5aea		       a6 98		      ldx	currentSquare
      0  5aec					      MOVE_TO	_LEFT
      1  5aec					      SUBROUTINE
      2  5aec		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      3  5aef		       30 0c		      bmi	.invalid
      4  5af1		       b9 7a f0 	      lda	Board,y
      5  5af4		       f0 04		      beq	.squareEmpty
      6  5af6		       45 97		      eor	currentPiece
      7  5af8		       10 03		      bpl	.invalid
      8  5afa		       20 cc fc    .squareEmpty jsr	AddMove
      9  5afd				   .invalid
     86  5afd
     87  5afd		       24 97		      bit	currentPiece
     88  5aff		       70 47		      bvs	.exit	; king has moved, so no castling
     89  5b01
      0  5b01					      CASTLE	KINGSIDE
      1  5b01
      2  5b01
      3  5b01		       a6 98		      ldx	currentSquare
      4  5b03		       bd 7d f0 	      lda	Board+KINGSIDE,x
      5  5b06		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5b08		       c9 05		      cmp	#ROOK
      7  5b0a		       d0 16		      bne	.noCastle
      8  5b0c
      9  5b0c
     10  5b0c
     11  5b0c
     12  5b0c				  -	      IF	KINGSIDE = QUEENSIDE
     13  5b0c				  -	      lda	Board-3,x
     14  5b0c				  -	      bne	.noCastle
     15  5b0c				  -	      lda	Board-2,x
     16  5b0c				  -	      bne	.noCastle
     17  5b0c				  -	      lda	Board-1,x
     18  5b0c				  -	      bne	.noCastle
     19  5b0c				  -
     20  5b0c					      ENDIF
     21  5b0c
     22  5b0c					      IF	KINGSIDE = KINGSIDE
     23  5b0c		       bd 7c f0 	      lda	Board+2,x
     24  5b0f		       d0 11		      bne	.noCastle
     25  5b11		       bd 7b f0 	      lda	Board+1,x
     26  5b14		       d0 0c		      bne	.noCastle
     27  5b16					      ENDIF
     28  5b16
     29  5b16
     30  5b16
     31  5b16
     32  5b16
     33  5b16
     34  5b16
     35  5b16
     36  5b16		       a5 97		      lda	currentPiece
     37  5b18		       09 10		      ora	#FLAG_CASTLE
     38  5b1a		       85 97		      sta	currentPiece
     39  5b1c
     40  5b1c					      IF	KINGSIDE = KINGSIDE
     41  5b1c		       bc 18 f0 	      ldy	ValidSquare+2,x
     42  5b1f					      ENDIF
     43  5b1f
     44  5b1f				  -	      IF	KINGSIDE = QUEENSIDE
     45  5b1f				  -	      ldy	ValidSquare-2,x
     46  5b1f					      ENDIF
     47  5b1f
     48  5b1f		       20 cc fc 	      jsr	AddMove
     49  5b22
     50  5b22				   .noCastle
      0  5b22					      CASTLE	QUEENSIDE
      1  5b22
      2  5b22
      3  5b22		       a6 98		      ldx	currentSquare
      4  5b24		       bd 76 f0 	      lda	Board+QUEENSIDE,x
      5  5b27		       29 4f		      and	#PIECE_MASK|FLAG_MOVED
      6  5b29		       c9 05		      cmp	#ROOK
      7  5b2b		       d0 1b		      bne	.noCastle
      8  5b2d
      9  5b2d
     10  5b2d
     11  5b2d
     12  5b2d					      IF	QUEENSIDE = QUEENSIDE
     13  5b2d		       bd 77 f0 	      lda	Board-3,x
     14  5b30		       d0 16		      bne	.noCastle
     15  5b32		       bd 78 f0 	      lda	Board-2,x
     16  5b35		       d0 11		      bne	.noCastle
     17  5b37		       bd 79 f0 	      lda	Board-1,x
     18  5b3a		       d0 0c		      bne	.noCastle
     19  5b3c
     20  5b3c					      ENDIF
     21  5b3c
     22  5b3c				  -	      IF	QUEENSIDE = KINGSIDE
     23  5b3c				  -	      lda	Board+2,x
     24  5b3c				  -	      bne	.noCastle
     25  5b3c				  -	      lda	Board+1,x
     26  5b3c				  -	      bne	.noCastle
     27  5b3c					      ENDIF
     28  5b3c
     29  5b3c
     30  5b3c
     31  5b3c
     32  5b3c
     33  5b3c
     34  5b3c
     35  5b3c
     36  5b3c		       a5 97		      lda	currentPiece
     37  5b3e		       09 10		      ora	#FLAG_CASTLE
     38  5b40		       85 97		      sta	currentPiece
     39  5b42
     40  5b42				  -	      IF	QUEENSIDE = KINGSIDE
     41  5b42				  -	      ldy	ValidSquare+2,x
     42  5b42					      ENDIF
     43  5b42
     44  5b42					      IF	QUEENSIDE = QUEENSIDE
     45  5b42		       bc 14 f0 	      ldy	ValidSquare-2,x
     46  5b45					      ENDIF
     47  5b45
     48  5b45		       20 cc fc 	      jsr	AddMove
     49  5b48
     50  5b48				   .noCastle
     92  5b48
     93  5b48		       4c a1 fa    .exit      jmp	MoveReturn
     94  5b4b
     95  5b4b							;---------------------------------------------------------------------------------------------------
     96  5b4b							; EOF
------- FILE Handler_BANK1.asm
    107  5b4b
    108  5b4b
      0  5b4b					      OPTIONAL_PAGEBREAK	"Base64ToIndex", 64
     10  5b4b					      LIST	ON
      0  5b4b					      DEF	Base64ToIndex
      1  5b4b				   BANK_Base64ToIndex SET	_CURRENT_BANK
      2  5b4b
      3  5b4b				   Base64ToIndex
    111  5b4b							; Convert from 0-63 numbering into an index into the Chessboard
    112  5b4b
    113  5b4b		       16 17 18 19*	      .byte.b	22,23,24,25,26,27,28,29
    114  5b53		       20 21 22 23*	      .byte.b	32,33,34,35,36,37,38,39
    115  5b5b		       2a 2b 2c 2d*	      .byte.b	42,43,44,45,46,47,48,49
    116  5b63		       34 35 36 37*	      .byte.b	52,53,54,55,56,57,58,59
    117  5b6b		       3e 3f 40 41*	      .byte.b	62,63,64,65,66,67,68,69
    118  5b73		       48 49 4a 4b*	      .byte.b	72,73,74,75,76,77,78,79
    119  5b7b		       52 53 54 55*	      .byte.b	82,83,84,85,86,87,88,89
    120  5b83		       5c 5d 5e 5f*	      .byte.b	92,93,94,95,96,97,98,99
    121  5b8b
    122  5b8b
    123  5b8b							;---------------------------------------------------------------------------------------------------
    124  5b8b
      0  5b8b					      DEF	PutAllPieces
      1  5b8b				   BANK_PutAllPieces SET	_CURRENT_BANK
      2  5b8b
      3  5b8b				   PutAllPieces
    126  5b8b					      SUBROUTINE
    127  5b8b
    128  5b8b							; Call SAFEly
    129  5b8b
    130  5b8b		       a0 63		      ldy	#99
    131  5b8d		       b9 7a f0    .zeroBoard lda	Board,y
    132  5b90		       20 9e fd 	      jsr	SAFE_PutPieceToBoard
    133  5b93
    134  5b93		       88		      dey
    135  5b94		       10 f7		      bpl	.zeroBoard
    136  5b96		       60		      rts
    137  5b97
    138  5b97
    139  5b97							;---------------------------------------------------------------------------------------------------
    140  5b97
      0  5b97					      DEF	CopySetupForMarker
      1  5b97				   BANK_CopySetupForMarker SET	_CURRENT_BANK
      2  5b97
      3  5b97				   CopySetupForMarker
    142  5b97					      SUBROUTINE
    143  5b97
    144  5b97							;lda #RAMBANK_MOVES_RAM
    145  5b97							;sta SET_BANK_RAM
    146  5b97
    147  5b97		       a5 80		      lda	drawPieceNumber
    148  5b99		       29 03		      and	#3	; shift position in PF
    149  5b9b		       18		      clc
    150  5b9c		       69 3c		      adc	#INDEX_WHITE_MARKER_on_BLACK_SQUARE_0
    151  5b9e		       a8		      tay
    152  5b9f		       60		      rts
    153  5ba0
    154  5ba0
    155  5ba0							;---------------------------------------------------------------------------------------------------
    156  5ba0
      0  5ba0					      DEF	CopySetup
      1  5ba0				   BANK_CopySetup SET	_CURRENT_BANK
      2  5ba0
      3  5ba0				   CopySetup
    158  5ba0					      SUBROUTINE
    159  5ba0
    160  5ba0							; figure colouration of square
    161  5ba0
    162  5ba0		       a5 80		      lda	drawPieceNumber	;0-63
    163  5ba2		       4a		      lsr
    164  5ba3		       4a		      lsr
    165  5ba4		       4a		      lsr
    166  5ba5		       18		      clc
    167  5ba6		       65 80		      adc	drawPieceNumber
    168  5ba8		       29 01		      and	#1
    169  5baa		       49 01		      eor	#1
    170  5bac		       f0 02		      beq	.white
    171  5bae		       a9 20		      lda	#32
    172  5bb0		       85 a7	   .white     sta	__pieceColour	; actually SQUARE black/white
    173  5bb2
    174  5bb2							; PieceColour = 0 for white square, 28 for black square
    175  5bb2
    176  5bb2							;lda #RAMBANK_MOVES_RAM
    177  5bb2							;sta SET_BANK_RAM
    178  5bb2
    179  5bb2		       a4 80		      ldy	drawPieceNumber	; 0-63
    180  5bb4		       be 4b f3 	      ldx	Base64ToIndex,y
    181  5bb7
    182  5bb7		       bd 7a f0 	      lda	Board,x
    183  5bba		       0a		      asl
    184  5bbb		       90 02		      bcc	.blackAdjust
    185  5bbd		       09 10		      ora	#16
    186  5bbf		       4a	   .blackAdjust lsr
    187  5bc0		       29 0f		      and	#%1111
    188  5bc2		       aa		      tax
    189  5bc3
    190  5bc3		       98		      tya
    191  5bc4		       29 03		      and	#3	; shift position in PF
    192  5bc6
    193  5bc6		       18		      clc
    194  5bc7		       7d cf f3 	      adc	PieceToShape,x
    195  5bca		       18		      clc
    196  5bcb		       65 a7		      adc	__pieceColour
    197  5bcd		       a8		      tay
    198  5bce		       60		      rts
    199  5bcf
    200  5bcf				   PieceToShape
    201  5bcf
    202  5bcf		       00		      .byte.b	INDEX_WHITE_BLANK_on_WHITE_SQUARE_0
    203  5bd0		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    204  5bd1		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    205  5bd2		       08		      .byte.b	INDEX_WHITE_KNIGHT_on_WHITE_SQUARE_0
    206  5bd3		       0c		      .byte.b	INDEX_WHITE_BISHOP_on_WHITE_SQUARE_0
    207  5bd4		       10		      .byte.b	INDEX_WHITE_ROOK_on_WHITE_SQUARE_0
    208  5bd5		       14		      .byte.b	INDEX_WHITE_QUEEN_on_WHITE_SQUARE_0
    209  5bd6		       18		      .byte.b	INDEX_WHITE_KING_on_WHITE_SQUARE_0
    210  5bd7
    211  5bd7		       40		      .byte.b	INDEX_BLACK_BLANK_on_WHITE_SQUARE_0
    212  5bd8		       04		      .byte.b	INDEX_WHITE_PAWN_on_WHITE_SQUARE_0
    213  5bd9		       44		      .byte.b	INDEX_BLACK_PAWN_on_WHITE_SQUARE_0
    214  5bda		       48		      .byte.b	INDEX_BLACK_KNIGHT_on_WHITE_SQUARE_0
    215  5bdb		       4c		      .byte.b	INDEX_BLACK_BISHOP_on_WHITE_SQUARE_0
    216  5bdc		       50		      .byte.b	INDEX_BLACK_ROOK_on_WHITE_SQUARE_0
    217  5bdd		       54		      .byte.b	INDEX_BLACK_QUEEN_on_WHITE_SQUARE_0
    218  5bde		       58		      .byte.b	INDEX_BLACK_KING_on_WHITE_SQUARE_0
    219  5bdf
    220  5bdf
    221  5bdf							;---------------------------------------------------------------------------------------------------
    222  5bdf
    223  5bdf
      0  5bdf					      CHECK_HALF_BANK_SIZE	"HANDLER_BANK1 -- 1K"
      1  5bdf
      2  5bdf
      3  5bdf		       03 df	   .TEMP      =	* - BANK_START
 HANDLER_BANK1 -- 1K (1K) SIZE =  $3df , FREE= $21
      4  5bdf					      ECHO	"HANDLER_BANK1 -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  5bdf				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  5bdf				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  5bdf				  -	      ERR
      8  5bdf					      endif
    225  5bdf
    226  5bdf
    227  5bdf							; There is space here (1K) for use as ROM
    228  5bdf							; but NOT when the above bank is switched in as RAM, of course!
    229  5bdf
    230  5bdf
    231  5bdf
    232  5bdf
    233  5bdf							;---------------------------------------------------------------------------------------------------
    234  5bdf							; EOF
------- FILE ./chess.asm
------- FILE ply.asm LEVEL 2 PASS 3
      0  5bdf					      include	"ply.asm"
      1  5bdf							; Copyright (C)2020 Andrew Davie
      2  5bdf							; andrew@taswegian.com
      3  5bdf
      4  5bdf							;---------------------------------------------------------------------------------------------------
      5  5bdf							; Define the RAM banks
      6  5bdf							; A "PLY" bank represents all the data required on any single ply of the search tree.
      7  5bdf							; The banks are organised sequentially, MAX_PLY of them starting at RAMBANK_PLY
      8  5bdf							; The startup code copies the ROM shadow into each of these PLY banks, and from then on
      9  5bdf							; they act as independant switchable banks usable for data on each ply during the search.
     10  5bdf							; A ply will hold the move list for that position
     11  5bdf
     12  5bdf
     13  5bdf		       00 06	   MAX_PLY    =	6
      0  5bdf					      NEWRAMBANK	PLY	; RAM bank for holding the following ROM shadow
      1  5bdf
      2  5bdf
      3  5bdf
      4 U2400 ????				      SEG.U	PLY
      5 U2400					      ORG	ORIGIN_RAM
      6 U2400					      RORG	RAM_3E
      7 U2400				   BANK_START SET	*
      8 U2400				   RAMBANK_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2400				   _CURRENT_RAMBANK SET	RAMBANK_PLY
     10 U2400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2400					      REPEAT	MAX_PLY-1
      0 U2400					      NEWRAMBANK	.DUMMY_PLY
      1 U2400
      2 U2400
      3 U2400
      4 U3800 ????				      SEG.U	.DUMMY_PLY
      5 U2800					      ORG	ORIGIN_RAM
      6 U2800					      RORG	RAM_3E
      7 U2800				   BANK_START SET	*
      8 U2800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2800					      REPEND
      0 U2800					      NEWRAMBANK	.DUMMY_PLY
      1 U2800
      2 U2800
      3 U2800
      4 U2800					      SEG.U	.DUMMY_PLY
      5 U2c00					      ORG	ORIGIN_RAM
      6 U2c00					      RORG	RAM_3E
      7 U2c00				   BANK_START SET	*
      8 U2c00				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U2c00				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U2c00				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U2c00					      REPEND
      0 U2c00					      NEWRAMBANK	.DUMMY_PLY
      1 U2c00
      2 U2c00
      3 U2c00
      4 U2c00					      SEG.U	.DUMMY_PLY
      5 U3000					      ORG	ORIGIN_RAM
      6 U3000					      RORG	RAM_3E
      7 U3000				   BANK_START SET	*
      8 U3000				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3000				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3000				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3000					      REPEND
      0 U3000					      NEWRAMBANK	.DUMMY_PLY
      1 U3000
      2 U3000
      3 U3000
      4 U3000					      SEG.U	.DUMMY_PLY
      5 U3400					      ORG	ORIGIN_RAM
      6 U3400					      RORG	RAM_3E
      7 U3400				   BANK_START SET	*
      8 U3400				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3400				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3400				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     15 U3400					      REPEND
      0 U3400					      NEWRAMBANK	.DUMMY_PLY
      1 U3400
      2 U3400
      3 U3400
      4 U3400					      SEG.U	.DUMMY_PLY
      5 U3800					      ORG	ORIGIN_RAM
      6 U3800					      RORG	RAM_3E
      7 U3800				   BANK_START SET	*
      8 U3800				   RAMBANK_.DUMMY_PLY SET	ORIGIN_RAM / RAM_SIZE
      9 U3800				   _CURRENT_RAMBANK SET	RAMBANK_.DUMMY_PLY
     10 U3800				   ORIGIN_RAM SET	ORIGIN_RAM + RAM_SIZE
     17 U3800					      REPEND
     18 U3800
     19 U3800							;---------------------------------------------------------------------------------------------------
     20 U3800							; and now the ROM shadow - this is copied to ALL of the RAM ply banks
     21 U3800
      0 U3800					      NEWBANK	BANK_PLY	; ROM SHADOW
      1  63db ????				      SEG	BANK_PLY
      2  6000					      ORG	ORIGIN
      3  6000					      RORG	$F000
      4  6000				   BANK_START SET	*
      5  6000				   BANK_PLY   SET	ORIGIN / 2048
      6  6000				   ORIGIN     SET	ORIGIN + 2048
      7  6000				   _CURRENT_BANK SET	BANK_PLY
     23  6000
     24  6000
     25  6000							;---------------------------------------------------------------------------------------------------
     26  6000							; The piece-lists
     27  6000							; ONLY the very first bank piecelist is used - all other banks switch to the first for
     28  6000							; piecelist usage. Note that this initialisation (below) comes from the shadow ROM/RAM copy
     29  6000							; but this needs to be initialised programatically on new game.
     30  6000
     31  6000							; We have TWO piecelists, in different banks
     32  6000							; WHITE pieces in bank BANK_PLY
     33  6000							; BLACK pieces in bank BANK_PLY+1
     34  6000
      0  6000					      OPTIONAL_PAGEBREAK	"PieceLists", 48
     10  6000					      LIST	ON
     36  6000
     37  6000		       00 00 00 00*SortedPieceList ds	16	; indexes into PieceSquare, PieceType.  NEG = no piece
     38  6010		       00 00 00 00*PieceSquare ds	16
     39  6020		       00 00 00 00*PieceType  ds	16
     40  6030
     41  6030		       00	   PieceListPtr ds	1
     42  6031
     43  6031							;---------------------------------------------------------------------------------------------------
     44  6031
     45  6031		       7f ff	   infinity   =	32767
     46  6031
     47  6031		       00 00	   plyValue   ds	2	; 16-bit signed score value
     48  6033		       00	   bestMove   ds	1	; index of move (-1 = none)
     49  6034
     50  6034				  -	      if	0
     51  6034				  -			; reverting a move
     52  6034				  -			; from/to/piece/toOriginal
     53  6034				  -			; castling   affects 4 squares (2xfrom/to each with original piece)
     54  6034				  -			; en-passant
     55  6034				  -
     56  6034				  -from/to/piece
     57  6034				  -
     58  6034				  -
     59  6034				  -from       =	piece
     60  6034				  -to	      =	originalPiece
     61  6034				  -from2      =	piece2
     62  6034				  -to2	      =	originalPiece2
     63  6034				  -
     64  6034				  -
     65  6034				  -
     66  6034				  -so,	      normal	move (N)
     67  6034				  -
     68  6034				  -B1	      =	knight
     69  6034				  -C3	      =	blank
     70  6034				  -null/null
     71  6034				  -
     72  6034				  -pawn       promot	with capture
     73  6034				  -A7	      =	WP
     74  6034				  -B8	      =	BLACK_ROOK
     75  6034				  -
     76  6034				  -
     77  6034				  -castle
     78  6034				  -E1	      =	king
     79  6034				  -G1	      =	blank
     80  6034				  -H1	      =	rook
     81  6034				  -F1	      =	blank
     82  6034				  -
     83  6034				  -
     84  6034				  -en-passant
     85  6034				  -B4	      =	P
     86  6034				  -A3	      =	blank
     87  6034				  -A4	      =	P
     88  6034				  -A3	      =	blank
     89  6034				  -
     90  6034				  -FROM
     91  6034				  -TO
     92  6034				  -CAPTURED_PIECE
     93  6034				  -ORIG_PIECE
     94  6034				  -FROM2
     95  6034				  -TO2
     96  6034				  -PIECE2
     97  6034				  -
     98  6034				  -board[FROM] =	ORIG_PIECE
     99  6034				  -board[TO]  =	CAPTURED_PIECE
    100  6034				  -
    101  6034				  -value      =	-new_piece + orig_piece - captured_piece
    102  6034				  -
    103  6034				  -
    104  6034					      endif
    105  6034
    106  6034
    107  6034
    108  6034
    109  6034
    110  6034
    111  6034
    112  6034
    113  6034
    114  6034
    115  6034							;---------------------------------------------------------------------------------------------------
    116  6034
    117  6034							; The X12 square at which a pawn CAN be taken en-passant. Normally 0.
    118  6034							; This is set/cleared whenever a move is made. The flag is indicated in the move description.
    119  6034
    120  6034		       00	   enPassantSquare ds	1
    121  6035
    122  6035							;---------------------------------------------------------------------------------------------------
    123  6035							; Move tables hold piece moves for this current ply
    124  6035
    125  6035		       00	   moveIndex  ds	1	; points to first available 'slot' for move storage
    126  6036
    127  6036
    128  6036		       00 80	   MAX_MOVES  =	128
    129  6036
      0  6036					      OPTIONAL_PAGEBREAK	"MoveFrom", MAX_MOVES
     10  6036					      LIST	ON
      0  6036					      DEF	MoveFrom
      1  6036				   BANK_MoveFrom SET	_CURRENT_BANK
      2  6036
      3  6036				   MoveFrom
    132  6036		       00 00 00 00*	      ds	MAX_MOVES
    133  60b6
      0  60b6					      OPTIONAL_PAGEBREAK	"MoveTo", MAX_MOVES
 PAGE BREAK INSERTED FOR  MoveTo
 REQUESTED SIZE =  $80
 WASTED SPACE =  $4a
 PAGEBREAK LOCATION =  $f100
     10  6100					      LIST	ON
      0  6100					      DEF	MoveTo
      1  6100				   BANK_MoveTo SET	_CURRENT_BANK
      2  6100
      3  6100				   MoveTo
    136  6100		       00 00 00 00*	      ds	MAX_MOVES
    137  6180
      0  6180					      OPTIONAL_PAGEBREAK	"MovePiece", MAX_MOVES
     10  6180					      LIST	ON
      0  6180					      DEF	MovePiece
      1  6180				   BANK_MovePiece SET	_CURRENT_BANK
      2  6180
      3  6180				   MovePiece
    140  6180		       00 00 00 00*	      ds	MAX_MOVES
    141  6200
    142  6200							;---------------------------------------------------------------------------------------------------
    143  6200
      0  6200					      DEF	InitPieceLists
      1  6200				   BANK_InitPieceLists SET	_CURRENT_BANK
      2  6200
      3  6200				   InitPieceLists
    145  6200
    146  6200		       a9 ff		      lda	#-1
    147  6202		       8d 30 f4 	      sta	PieceListPtr+RAM_WRITE
    148  6205
    149  6205		       a2 0f		      ldx	#15
    150  6207		       9d 00 f4    .clearLists sta	SortedPieceList+RAM_WRITE,x
    151  620a		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    152  620d		       9d 20 f4 	      sta	PieceType+RAM_WRITE,x
    153  6210		       ca		      dex
    154  6211		       10 f4		      bpl	.clearLists
    155  6213
    156  6213							; General inits that are moved out of FIXED....
    157  6213
    158  6213
    159  6213		       a9 07		      lda	#%111	; 111= quad
    160  6215		       85 44		      sta	NUSIZ0
    161  6217		       85 45		      sta	NUSIZ1	; quad-width
    162  6219
    163  6219
    164  6219
    165  6219
    166  6219		       a9 04		      lda	#%00000100
    167  621b		       85 4a		      sta	CTRLPF
    168  621d		       a9 00		      lda	#BACKGCOL
    169  621f		       85 49		      sta	COLUBK
    170  6221
    171  6221		       a9 09		      lda	#AI_Halt
    172  6223		       85 8f		      sta	aiPhase
    173  6225
    174  6225		       60		      rts
    175  6226
    176  6226
    177  6226							;---------------------------------------------------------------------------------------------------
    178  6226
    179  6226					      if	ASSERTS
    180  6226
      0  6226					      DEF	checkPiecesBank
      1  6226				   BANK_checkPiecesBank SET	_CURRENT_BANK
      2  6226
      3  6226				   checkPiecesBank
    182  6226							; odd usage - switches between concurrent bank code
    183  6226
    184  6226		       a2 0f		      ldx	#15
    185  6228		       a5 a8	   .check     lda	__bank
    186  622a		       85 3e		      sta	SET_BANK_RAM
    187  622c		       bc 10 f0 	      ldy	PieceSquare,x
    188  622f		       f0 0d		      beq	.nonehere
    189  6231
    190  6231		       86 a7		      stx	__x
    191  6233
    192  6233		       20 46 fd 	      jsr	SAFE_GetPieceFromBoard
    193  6236		       f0 fe	   .fail      beq	.fail
    194  6238		       c9 ff		      cmp	#-1
    195  623a		       f0 fe	   .fail2     beq	.fail2
    196  623c
    197  623c		       a6 a7		      ldx	__x
    198  623e
    199  623e		       ca	   .nonehere  dex
    200  623f		       10 e7		      bpl	.check
    201  6241		       60		      rts
    202  6242
    203  6242
      0  6242					      DEF	DIAGNOSTIC_checkPieces
      1  6242				   BANK_DIAGNOSTIC_checkPieces SET	_CURRENT_BANK
      2  6242
      3  6242				   DIAGNOSTIC_checkPieces
    205  6242							; SAFE call
    206  6242							; DIAGNOSTIC ONLY
    207  6242							; Scan the piecelist and the board square it points to and make sure non blank, non -1
    208  6242
    209  6242		       a9 09		      lda	#RAMBANK_PLY
    210  6244		       85 a8		      sta	__bank
    211  6246		       20 26 f2 	      jsr	checkPiecesBank
    212  6249		       e6 a8		      inc	__bank
    213  624b		       20 26 f2 	      jsr	checkPiecesBank
    214  624e		       60		      rts
    215  624f
    216  624f					      endif
    217  624f
    218  624f							;---------------------------------------------------------------------------------------------------
    219  624f
    220  624f					      if	!TEST_POSITION
    221  624f				   InitPieceList
    222  624f
    223  624f		       06 19		      .byte.b	WHITE|Q, 25
    224  6251		       04 18		      .byte.b	WHITE|B, 24
    225  6253		       04 1b		      .byte.b	WHITE|B, 27
    226  6255		       05 16		      .byte.b	WHITE|R, 22
    227  6257		       05 1d		      .byte.b	WHITE|R, 29
    228  6259		       03 17		      .byte.b	WHITE|N, 23
    229  625b		       03 1c		      .byte.b	WHITE|N, 28
    230  625d
    231  625d		       01 23		      .byte.b	WHITE|WP, 35
    232  625f		       01 24		      .byte.b	WHITE|WP, 36
    233  6261		       01 22		      .byte.b	WHITE|WP, 34
    234  6263		       01 25		      .byte.b	WHITE|WP, 37
    235  6265		       01 21		      .byte.b	WHITE|WP, 33
    236  6267		       01 26		      .byte.b	WHITE|WP, 38
    237  6269		       01 20		      .byte.b	WHITE|WP, 32
    238  626b		       01 27		      .byte.b	WHITE|WP, 39
    239  626d
    240  626d		       07 1a		      .byte.b	WHITE|K, 26
    241  626f
    242  626f		       86 5f		      .byte.b	BLACK|Q, 95
    243  6271		       84 5e		      .byte.b	BLACK|B, 94
    244  6273		       84 61		      .byte.b	BLACK|B, 97
    245  6275		       85 5c		      .byte.b	BLACK|R, 92
    246  6277		       85 63		      .byte.b	BLACK|R, 99
    247  6279		       83 5d		      .byte.b	BLACK|N, 93
    248  627b		       83 62		      .byte.b	BLACK|N, 98
    249  627d
    250  627d		       82 55		      .byte.b	BLACK|BP, 85
    251  627f		       82 56		      .byte.b	BLACK|BP, 86
    252  6281		       82 54		      .byte.b	BLACK|BP, 84
    253  6283		       82 57		      .byte.b	BLACK|BP, 87
    254  6285		       82 53		      .byte.b	BLACK|BP, 83
    255  6287		       82 58		      .byte.b	BLACK|BP, 88
    256  6289		       82 52		      .byte.b	BLACK|BP, 82
    257  628b		       82 59		      .byte.b	BLACK|BP, 89
    258  628d
    259  628d		       87 60		      .byte.b	BLACK|K, 96
    260  628f
    261  628f		       00		      .byte.b	0	;end
    262  6290
    263  6290					      endif
    264  6290
    265  6290				  -	      if	TEST_POSITION
    266  6290				  -WhitePiecelist
    267  6290				  -	      .byte	65,0,0,0,0,0,0,0
    268  6290				  -	      .byte	0,0,0,0,0,0,0,0
    269  6290				  -
    270  6290				  -BlackPiecelist
    271  6290				  -	      .byte	66,0,0,0,0,0,0,0
    272  6290				  -	      .byte	0,0,0,0,0,0,0,0
    273  6290					      endif
    274  6290
    275  6290
    276  6290
    277  6290							;---------------------------------------------------------------------------------------------------
    278  6290
    279  6290
      0  6290					      DEF	NewPlyInitialise
      1  6290				   BANK_NewPlyInitialise SET	_CURRENT_BANK
      2  6290
      3  6290				   NewPlyInitialise
    281  6290
    282  6290							; This MUST be called at the start of a new ply
    283  6290							; It initialises the movelist to empty
    284  6290
    285  6290		       a2 ff		      ldx	#-1
    286  6292		       8e 35 f4 	      stx	moveIndex+RAM_WRITE	; no valid moves
    287  6295		       8d 33 f4 	      sta	bestMove+RAM_WRITE
    288  6298
    289  6298					      if	!TEST_POSITION
    290  6298		       a9 00		      lda	#0
    291  629a					      endif
    292  629a
    293  629a				  -	      if	TEST_POSITION
    294  629a				  -	      lda	#66
    295  629a					      endif
    296  629a		       8d 34 f4 	      sta	enPassantSquare+RAM_WRITE	; no enPassant available
    297  629d
    298  629d
    299  629d							; The evaluation of the current position is a signed 16-bit number
    300  629d							; +ve is good for the current side.
    301  629d							; This is used during the alpha-beta search for finding best position
    302  629d
    303  629d		       a9 01		      lda	#<(-infinity)
    304  629f		       8d 31 f4 	      sta	plyValue+RAM_WRITE
    305  62a2		       a9 80		      lda	#>(-infinity)
    306  62a4		       8d 32 f4 	      sta	plyValue+RAM_WRITE+1
    307  62a7
    308  62a7
    309  62a7		       a9 00		      lda	#0
    310  62a9		       85 9d		      sta	piecelistIndex
    311  62ab
    312  62ab		       60		      rts
    313  62ac
    314  62ac
    315  62ac							;---------------------------------------------------------------------------------------------------
    316  62ac
      0  62ac					      DEF	GenerateMovesForNextPiece
      1  62ac				   BANK_GenerateMovesForNextPiece SET	_CURRENT_BANK
      2  62ac
      3  62ac				   GenerateMovesForNextPiece
    318  62ac
    319  62ac		       a5 9d		      lda	piecelistIndex
    320  62ae		       29 0f		      and	#15
    321  62b0		       aa		      tax
    322  62b1
    323  62b1		       a5 9e		      lda	sideToMove
    324  62b3		       0a		      asl
    325  62b4		       a9 09		      lda	#RAMBANK_PLY	; W piecelist in "PLY0" bank, and B in "PLY1"
    326  62b6		       69 00		      adc	#0
    327  62b8		       85 3e		      sta	SET_BANK_RAM	; ooh! self-switching bank
    328  62ba
    329  62ba		       bd 10 f0 	      lda	PieceSquare,x
    330  62bd		       f0 05		      beq	.noPieceHere	; piece deleted
    331  62bf		       85 98		      sta	currentSquare
    332  62c1
    333  62c1		       20 7e fa 	      jsr	MoveForSinglePiece
    334  62c4
    335  62c4		       e6 9d	   .noPieceHere inc	piecelistIndex
    336  62c6		       60		      rts
    337  62c7
    338  62c7							;---------------------------------------------------------------------------------------------------
    339  62c7
      0  62c7					      DEF	FixPieceList
      1  62c7				   BANK_FixPieceList SET	_CURRENT_BANK
      2  62c7
      3  62c7				   FixPieceList
    341  62c7
    342  62c7							; uses OVERLAY Overlay001
    343  62c7							; fromX12	      X12 square piece moved from
    344  62c7							; toX12	      X12 square piece moved to (0 to erase piece from list)
    345  62c7
    346  62c7							; It scans the piece list looking for the '__from' square and sets it to the '__to' square
    347  62c7							; Eventually this will have to be more sophisticated when moves (like castling) involve
    348  62c7							; more than one piece.
    349  62c7
    350  62c7							; TODO: this is slow and should use a pointer to pieces instead
    351  62c7
    352  62c7
    353  62c7		       a2 0f		      ldx	#15
    354  62c9		       a5 86		      lda	fromX12
    355  62cb		       dd 10 f0    .pieceCheck cmp	PieceSquare,x
    356  62ce		       f0 04		      beq	.adjustPiece
    357  62d0		       ca		      dex
    358  62d1		       10 f8		      bpl	.pieceCheck
    359  62d3		       60		      rts
    360  62d4
    361  62d4		       a5 87	   .adjustPiece lda	toX12
    362  62d6		       9d 10 f4 	      sta	PieceSquare+RAM_WRITE,x
    363  62d9		       60		      rts
    364  62da
    365  62da							;---------------------------------------------------------------------------------------------------
    366  62da
    367  62da				  -	      if	0
    368  62da				  -	      DEF	DeletePiece
    369  62da				  -
    370  62da				  -	      lda	fromX12
    371  62da				  -	      ldy	toX12
    372  62da				  -
    373  62da				  -			;		  lda sideToMove
    374  62da				  -			;		  eor #128
    375  62da				  -			;		  asl
    376  62da				  -			;		  adc #RAMBANK_PLY
    377  62da				  -	      lda	currentPly
    378  62da				  -	      sta	SET_BANK_RAM
    379  62da				  -
    380  62da				  -	      lda	toX12
    381  62da				  -	      jsr	DeletePiece
    382  62da					      endif
    383  62da
    384  62da							;---------------------------------------------------------------------------------------------------
    385  62da
      0  62da					      DEF	alphaBeta
      1  62da				   BANK_alphaBeta SET	_CURRENT_BANK
      2  62da
      3  62da				   alphaBeta
    387  62da
    388  62da		       60		      rts
    389  62db		       e6 9c		      inc	currentPly
    390  62dd		       a5 9c		      lda	currentPly
    391  62df
    392  62df		       c9 0f		      cmp	#MAX_PLY+RAMBANK_PLY
    393  62e1		       f0 31		      beq	.bottomOut	; at a leaf node of the search?
    394  62e3		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    395  62e5
    396  62e5		       a5 9e		      lda	sideToMove
    397  62e7		       49 80		      eor	#128
    398  62e9		       85 9e		      sta	sideToMove
    399  62eb
    400  62eb		       20 90 f2 	      jsr	NewPlyInitialise
    401  62ee
    402  62ee		       a5 9c		      lda	currentPly
    403  62f0		       85 3e		      sta	SET_BANK_RAM
    404  62f2
    405  62f2		       a9 00		      lda	#0
    406  62f4		       85 9d		      sta	piecelistIndex
    407  62f6		       20 ac f2    iterPieces jsr	GenerateMovesForNextPiece
    408  62f9		       a5 9d		      lda	piecelistIndex
    409  62fb		       c9 0f		      cmp	#15
    410  62fd		       d0 f7		      bne	iterPieces
    411  62ff
    412  62ff							; Perform a recursive search
    413  62ff							; simulate alpha-beta cull to just 7 moves per node
    414  62ff
    415  62ff					      REPEAT	7
    416  62ff							;jsr PhysicallyMovePiece
    417  62ff							;jsr FinaliseMove
    418  62ff		       20 da f2 	      jsr	alphaBeta
    415  62ff					      REPEND
    416  6302							;jsr PhysicallyMovePiece
    417  6302							;jsr FinaliseMove
    418  6302		       20 da f2 	      jsr	alphaBeta
    415  6302					      REPEND
    416  6305							;jsr PhysicallyMovePiece
    417  6305							;jsr FinaliseMove
    418  6305		       20 da f2 	      jsr	alphaBeta
    415  6305					      REPEND
    416  6308							;jsr PhysicallyMovePiece
    417  6308							;jsr FinaliseMove
    418  6308		       20 da f2 	      jsr	alphaBeta
    415  6308					      REPEND
    416  630b							;jsr PhysicallyMovePiece
    417  630b							;jsr FinaliseMove
    418  630b		       20 da f2 	      jsr	alphaBeta
    415  630b					      REPEND
    416  630e							;jsr PhysicallyMovePiece
    417  630e							;jsr FinaliseMove
    418  630e		       20 da f2 	      jsr	alphaBeta
    415  630e					      REPEND
    416  6311							;jsr PhysicallyMovePiece
    417  6311							;jsr FinaliseMove
    418  6311		       20 da f2 	      jsr	alphaBeta
    419  6314					      REPEND
    420  6314
    421  6314				   .bottomOut
    422  6314
    423  6314							; TODO: evaluate board position
    424  6314							; reverse move to previous position
    425  6314							; check the results, update scores and move pointers
    426  6314							; and return vars to expected
    427  6314
    428  6314		       a5 9e		      lda	sideToMove
    429  6316		       49 80		      eor	#128
    430  6318		       85 9e		      sta	sideToMove
    431  631a
    432  631a		       c6 9c		      dec	currentPly
    433  631c		       a5 9c		      lda	currentPly
    434  631e		       85 3e		      sta	SET_BANK_RAM	; self-referential weirdness!
    435  6320
    436  6320		       60		      rts
    437  6321
    438  6321							;---------------------------------------------------------------------------------------------------
    439  6321
      0  6321					      DEF	RevertMove
      1  6321				   BANK_RevertMove SET	_CURRENT_BANK
      2  6321
      3  6321				   RevertMove
    441  6321
    442  6321							; backtrack after a move, restoring things to the way they were
    443  6321
    444  6321
    445  6321
    446  6321
    447  6321
    448  6321
    449  6321
    450  6321
    451  6321		       60		      rts
    452  6322
    453  6322
    454  6322							;---------------------------------------------------------------------------------------------------
    455  6322
      0  6322					      DEF	MoveViaListAtPly
      1  6322				   BANK_MoveViaListAtPly SET	_CURRENT_BANK
      2  6322
      3  6322				   MoveViaListAtPly
    457  6322
    458  6322		       ad 35 f0 	      lda	moveIndex
    459  6325		       c9 ff		      cmp	#-1
    460  6327		       f0 41		      beq	halted	; no valid moves
    461  6329
    462  6329		       a8		      tay		; loop count
    463  632a		       c0 00		      cpy	#0
    464  632c		       f0 17		      beq	muldone
    465  632e		       c8		      iny
    466  632f
      0  632f					      NEXT_RANDOM
      1  632f		       a5 81		      lda	rnd
      2  6331		       4a		      lsr
      3  6332		       90 02		      bcc	.skipEOR
      4  6334		       49 fe		      eor	#RND_EOR_VAL
      5  6336		       85 81	   .skipEOR   sta	rnd
    468  6338
    469  6338		       a2 00		      ldx	#0
    470  633a		       a9 00		      lda	#0
    471  633c		       18	   .mulx      clc
    472  633d		       65 81		      adc	rnd
    473  633f		       90 01		      bcc	.nover
    474  6341		       e8		      inx
    475  6342		       88	   .nover     dey
    476  6343		       d0 f7		      bne	.mulx
    477  6345				   muldone
    478  6345
    479  6345							; fall through...
    480  6345							;---------------------------------------------------------------------------------------------------
    481  6345
      0  6345					      DEF	PhysicallyMovePiece
      1  6345				   BANK_PhysicallyMovePiece SET	_CURRENT_BANK
      2  6345
      3  6345				   PhysicallyMovePiece
    483  6345
    484  6345				   .foundMove
    485  6345		       bd 36 f0 	      lda	MoveFrom,x
    486  6348		       85 9f		      sta	fromSquare
    487  634a		       85 86		      sta	fromX12
    488  634c		       bd 00 f1 	      lda	MoveTo,x
    489  634f		       85 a1		      sta	toSquare
    490  6351		       85 87		      sta	toX12
    491  6353
    492  6353
    493  6353							; If en-passant flag set (pawn doing opening double-move) then record its square as the
    494  6353							; en-passant square for the ply.
    495  6353
    496  6353				  -	      if	0
    497  6353				  -	      TODO	BANK/BUGGERED AFTER
    498  6353				  -	      lda	currentPly
    499  6353				  -	      sta	SET_BANK_RAM
    500  6353				  -
    501  6353				  -	      ldy	#0
    502  6353				  -	      lda	MovePiece,x
    503  6353				  -	      and	#FLAG_ENPASSANT
    504  6353				  -	      beq	.notEP
    505  6353				  -	      ldy	toSquare
    506  6353				  -.notEP     sty	enPassantSquare+RAM_WRITE
    507  6353				  -
    508  6353					      endif
    509  6353
    510  6353
    511  6353		       bd 80 f1 	      lda	MovePiece,x
    512  6356		       29 df		      and	#~FLAG_ENPASSANT	;? unsure
    513  6358		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling (for K/R)
    514  635a		       85 a0		      sta	fromPiece	; MIGHT have castling bit set, which should be handled last
    515  635c
    516  635c
    517  635c		       a6 9f		      ldx	fromSquare
    518  635e		       bc 00 ff 	      ldy	X12toBase64,x
    519  6361		       84 9f		      sty	fromSquare	;B64
    520  6363
    521  6363		       a6 a1		      ldx	toSquare
    522  6365		       bc 00 ff 	      ldy	X12toBase64,x
    523  6368		       84 a1		      sty	toSquare	;B64
    524  636a
    525  636a		       60	   halted     rts
    526  636b
    527  636b
    528  636b							;---------------------------------------------------------------------------------------------------
    529  636b
      0  636b					      DEF	CheckMoveListFromSquare
      1  636b				   BANK_CheckMoveListFromSquare SET	_CURRENT_BANK
      2  636b
      3  636b				   CheckMoveListFromSquare
    531  636b					      SUBROUTINE
    532  636b
    533  636b							; X12 in A
    534  636b							; y = -1 on return if NOT FOUND
    535  636b
    536  636b		       ac 35 f0 	      ldy	moveIndex
    537  636e		       30 0d		      bmi	.failed
    538  6370
    539  6370		       d9 36 f0    .scan      cmp	MoveFrom,y
    540  6373		       f0 03		      beq	.scanned
    541  6375		       88		      dey
    542  6376		       10 f8		      bpl	.scan
    543  6378
    544  6378		       b9 80 f1    .scanned   lda	MovePiece,y
    545  637b		       85 a6		      sta	aiPiece
    546  637d
    547  637d		       60	   .failed    rts
    548  637e
    549  637e							;---------------------------------------------------------------------------------------------------
    550  637e
      0  637e					      DEF	IsSquareUnderAttack
      1  637e				   BANK_IsSquareUnderAttack SET	_CURRENT_BANK
      2  637e
      3  637e				   IsSquareUnderAttack
    552  637e					      SUBROUTINE
    553  637e
    554  637e							; Scan the movelist to find if given square is under attack
    555  637e
    556  637e							; Pass:	 A = X12 square to check
    557  637e							; Return:	 CC = no
    558  637e
    559  637e		       ac 35 f0 	      ldy	moveIndex
    560  6381		       30 08		      bmi	.exit
    561  6383		       d9 00 f1    .scan      cmp	MoveTo,y
    562  6386		       f0 04		      beq	.found	; YES!
    563  6388		       88		      dey
    564  6389		       10 f8		      bpl	.scan
    565  638b
    566  638b		       18	   .exit      clc
    567  638c		       60	   .found     rts
    568  638d
    569  638d
    570  638d							;---------------------------------------------------------------------------------------------------
    571  638d
      0  638d					      DEF	GetKingSquare
      1  638d				   BANK_GetKingSquare SET	_CURRENT_BANK
      2  638d
      3  638d				   GetKingSquare
    573  638d					      SUBROUTINE
    574  638d
    575  638d							; Return:	 a = square king is on (or -1)
    576  638d
    577  638d		       ac 30 f0 	      ldy	PieceListPtr
    578  6390		       30 0c		      bmi	.exit	; no pieces?!
    579  6392		       b9 20 f0    .find      lda	PieceType,y
    580  6395		       29 0f		      and	#PIECE_MASK
    581  6397		       c9 07		      cmp	#KING
    582  6399		       f0 06		      beq	.found
    583  639b		       88		      dey
    584  639c		       10 f4		      bpl	.find
    585  639e
    586  639e		       a9 ff	   .exit      lda	#-1	; not found/no king square
    587  63a0		       60		      rts
    588  63a1
    589  63a1		       b9 10 f0    .found     lda	PieceSquare,y
    590  63a4		       60		      rts
    591  63a5
    592  63a5
    593  63a5							;---------------------------------------------------------------------------------------------------
    594  63a5
      0  63a5					      DEF	GetPieceGivenFromToSquares
      1  63a5				   BANK_GetPieceGivenFromToSquares SET	_CURRENT_BANK
      2  63a5
      3  63a5				   GetPieceGivenFromToSquares
    596  63a5					      SUBROUTINE
    597  63a5
    598  63a5							; We need to get the piece from the movelist because it contains flags (e.g., castling) about
    599  63a5							; the move. We need to do from/to checks because moves can have multiple origin/desinations.
    600  63a5							; This fixes the move with/without castle flag
    601  63a5
    602  63a5		       ac 35 f0 	      ldy	moveIndex
    603  63a8		       30 11		      bmi	.fail	; shouldn't happen
    604  63aa		       a5 86	   .scan      lda	fromX12
    605  63ac		       d9 36 f0 	      cmp	MoveFrom,y
    606  63af		       d0 07		      bne	.next
    607  63b1		       a5 87		      lda	toX12
    608  63b3		       d9 00 f1 	      cmp	MoveTo,y
    609  63b6		       f0 04		      beq	.found
    610  63b8		       88	   .next      dey
    611  63b9		       10 ef		      bpl	.scan
    612  63bb		       60	   .fail      rts
    613  63bc
    614  63bc		       b9 80 f1    .found     lda	MovePiece,y
    615  63bf		       85 a6		      sta	aiPiece
    616  63c1		       60		      rts
    617  63c2
    618  63c2
    619  63c2
    620  63c2							;---------------------------------------------------------------------------------------------------
    621  63c2
      0  63c2					      DEF	CheckMoveListToSquare
      1  63c2				   BANK_CheckMoveListToSquare SET	_CURRENT_BANK
      2  63c2
      3  63c2				   CheckMoveListToSquare
    623  63c2					      SUBROUTINE
    624  63c2
    625  63c2							; X12 in A
    626  63c2							; y = -1 on return if NOT FOUND
    627  63c2
    628  63c2		       ac 35 f0 	      ldy	moveIndex
    629  63c5		       30 13		      bmi	.sout
    630  63c7		       d9 00 f1    .scan      cmp	MoveTo,y
    631  63ca		       d0 09		      bne	.xscanned
    632  63cc
    633  63cc		       48		      pha
    634  63cd		       b9 36 f0 	      lda	MoveFrom,y
    635  63d0		       c5 93		      cmp	aiFromSquareX12
    636  63d2		       f0 05		      beq	.scanned
    637  63d4		       68		      pla
    638  63d5
    639  63d5		       88	   .xscanned  dey
    640  63d6		       10 ef		      bpl	.scan
    641  63d8		       48		      pha
    642  63d9
    643  63d9		       68	   .scanned   pla
    644  63da		       60	   .sout      rts
    645  63db
    646  63db
      0  63db					      CHECK_HALF_BANK_SIZE	"PLY -- 1K"
      1  63db
      2  63db
      3  63db		       03 db	   .TEMP      =	* - BANK_START
 PLY -- 1K (1K) SIZE =  $3db , FREE= $25
      4  63db					      ECHO	"PLY -- 1K", "(1K) SIZE = ", .TEMP, ", FREE=", ROM_BANK_SIZE/2 - .TEMP
      5  63db				  -	      if	( .TEMP ) > ROM_BANK_SIZE/2
      6  63db				  -	      ECHO	"HALF-BANK OVERFLOW @ ", * - ORIGIN
      7  63db				  -	      ERR
      8  63db					      endif
    648  63db
    649  63db							;---------------------------------------------------------------------------------------------------
    650  63db
    651  63db							; There is space here (1K) for use as ROM
    652  63db							; but NOT when the above bank is switched in as RAM, of course!
    653  63db
    654  63db
    655  63db
    656  63db
    657  63db							;---------------------------------------------------------------------------------------------------
    658  63db							; EOF
------- FILE ./chess.asm
    363  63db
    364  63db							; MUST BE LAST...
------- FILE BANK_FIXED.asm LEVEL 2 PASS 3
      0  63db					      include	"BANK_FIXED.asm"
      1  63db							; Chess
      2  63db							; Copyright (c) 2019-2020 Andrew Davie
      3  63db							; andrew@taswegian.com
      4  63db
      5  63db
      6  63db							;---------------------------------------------------------------------------------------------------
      7  63db							;#########################################  FIXED BANK  ############################################
      8  63db							;---------------------------------------------------------------------------------------------------
      9  63db
     10  63db				   ORIGIN     SET	FIXED_BANK
     11  63db
      0  63db					      NEWBANK	THE_FIXED_BANK
      1  7f64 ????				      SEG	THE_FIXED_BANK
      2  7800					      ORG	ORIGIN
      3  7800					      RORG	$F000
      4  7800				   BANK_START SET	*
      5  7800				   THE_FIXED_BANK SET	ORIGIN / 2048
      6  7800				   ORIGIN     SET	ORIGIN + 2048
      7  7800				   _CURRENT_BANK SET	THE_FIXED_BANK
     13  7800					      RORG	$f800
     14  7800
     15  7800							;---------------------------------------------------------------------------------------------------
     16  7800
      0  7800					      DEF	Reset
      1  7800				   BANK_Reset SET	_CURRENT_BANK
      2  7800
      3  7800				   Reset
     18  7800					      SUBROUTINE
     19  7800
     20  7800		       78		      sei
     21  7801		       d8		      cld
     22  7802		       a2 ff		      ldx	#$FF
     23  7804		       9a		      txs
     24  7805
     25  7805
     26  7805							; See if we can come up with something 'random' for startup
     27  7805
     28  7805		       ac 84 02 	      ldy	INTIM
     29  7808		       d0 02		      bne	.toR
     30  780a		       a0 9a		      ldy	#$9A
     31  780c		       84 81	   .toR       sty	rnd
     32  780e
     33  780e							;lda #BANK_TitleScreen
     34  780e							;sta SET_BANK
     35  780e							;jsr TitleScreen
     36  780e
     37  780e
     38  780e							; Move a copy of the row bank template to the first 8 banks of RAM
     39  780e							; and then terminate the draw subroutine by substituting in a RTS on the last one
     40  780e
      0  780e					      JSRAM_SAFE	SetupBanks
      1  780e
      2  780e
      3  780e
      4  780e		       a9 00		      lda	#BANK_SetupBanks
      5  7810		       85 8e		      sta	savedBank
      6  7812		       85 3f		      sta	SET_BANK
      7  7814		       20 1f f1 	      jsr	SetupBanks
     42  7817
     43  7817							; Patch the final row's "loop" to a RTS
     44  7817
     45  7817		       a2 07		      ldx	#7
     46  7819		       86 3e		      stx	SET_BANK_RAM
     47  781b		       a9 60		      lda	#$60	; "rts"
     48  781d		       8d 00 f6 	      sta	SELFMOD_RTS_ON_LAST_ROW+RAM_WRITE
     49  7820
     50  7820
     51  7820		       a5 9c		      lda	currentPly
     52  7822		       85 3e		      sta	SET_BANK_RAM
     53  7824		       20 90 f2 	      jsr	NewPlyInitialise	; must be called at the start of every new ply
     54  7827
     55  7827		       a9 09		      lda	#RAMBANK_PLY
     56  7829		       85 3e		      sta	SET_BANK_RAM
     57  782b		       20 eb fc 	      jsr	InitialisePieceSquares
     58  782e
     59  782e		       a9 00		      lda	#WHITE
     60  7830		       85 9e		      sta	sideToMove
     61  7832
     62  7832							; Now the board is "living" in RAM (along with support code) we can do stuff with it
     63  7832
     64  7832		       a9 00		      lda	#0
     65  7834		       85 82		      sta	drawPhase
     66  7836
     67  7836							;---------------------------------------------------------------------------------------------------
     68  7836
     69  7836							;RESYNC
     70  7836				   .StartFrame
     71  7836
     72  7836
     73  7836							; START OF FRAME
     74  7836
     75  7836		       a9 0e		      lda	#%1110	; VSYNC ON
     76  7838		       85 42	   .loopVSync3 sta	WSYNC
     77  783a		       85 40		      sta	VSYNC
     78  783c		       4a		      lsr
     79  783d		       d0 f9		      bne	.loopVSync3	; branch until VYSNC has been reset
     80  783f
     81  783f		       a0 37		      ldy	#55	;VBLANK_TIM_NTSC
     82  7841		       8c 96 02 	      sty	TIM64T
     83  7844
     84  7844							; LOTS OF PROCESSING TIME - USE IT
     85  7844
     86  7844		       a2 00		      ldx	#0
     87  7846		       86 41		      stx	VBLANK
     88  7848
     89  7848
     90  7848					      IF	ASSERTS
     91  7848							;		      lda #$C2
     92  7848							;		      sta COLUBK		     ; colour timing band top of screen
     93  7848					      ENDIF
     94  7848
     95  7848							;		      lda #STATEMACHINE
     96  7848							;		      sta SET_BANK
     97  7848		       20 9e f8 	      jsr	AiStateMachine
     98  784b
     99  784b							;jsr SAFE_PhasedProcessor
    100  784b
    101  784b					      IF	ASSERTS
    102  784b							;		      lda #0
    103  784b							;		      sta COLUBK		     ; end of timing band
    104  784b					      ENDIF
    105  784b
    106  784b					      if	ASSERTS
    107  784b							; Catch timer expired already
    108  784b		       2c 85 02 	      bit	TIMINT
    109  784e							;.whoops	      bmi .whoops
    110  784e					      endif
    111  784e
    112  784e
    113  784e		       2c 85 02    .wait      bit	TIMINT
    114  7851		       10 fb		      bpl	.wait
    115  7853
    116  7853
    117  7853
    118  7853							; START OF VISIBLE SCANLINES
    119  7853
    120  7853		       85 42		      sta	WSYNC
    121  7855
    122  7855		       20 9d f8 	      jsr	_rts
    123  7858		       20 9d f8 	      jsr	_rts
    124  785b		       20 9d f8 	      jsr	_rts
    125  785e		       20 9d f8 	      jsr	_rts
      0  7861					      SLEEP	3
      1  7861				   .CYCLES    SET	3
      2  7861
      3  7861				  -	      IF	.CYCLES < 2
      4  7861				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  7861				  -	      ERR
      6  7861					      ENDIF
      7  7861
      8  7861					      IF	.CYCLES & 1
      9  7861					      IFNCONST	NO_ILLEGAL_OPCODES
     10  7861		       04 00		      nop	0
     11  7863				  -	      ELSE
     12  7863				  -	      bit	VSYNC
     13  7863					      ENDIF
     14  7863				   .CYCLES    SET	.CYCLES - 3
     15  7863					      ENDIF
     16  7863
     17  7863				  -	      REPEAT	.CYCLES / 2
     18  7863				  -	      nop
     19  7863					      REPEND
    127  7863
    128  7863		       a2 00		      ldx	#0
    129  7865		       86 41		      stx	VBLANK
    130  7867
    131  7867		       86 3e		      stx	SET_BANK_RAM
    132  7869		       20 03 f2 	      jsr	DrawRow	; draw the ENTIRE visible screen!
    133  786c
    134  786c
    135  786c
    136  786c
    137  786c		       a9 00		      lda	#0
    138  786e		       85 4d		      sta	PF0
    139  7870		       85 4e		      sta	PF1
    140  7872		       85 4f		      sta	PF2
    141  7874		       85 5b		      sta	GRP0
    142  7876		       85 5c		      sta	GRP1
    143  7878
    144  7878		       a9 42		      lda	#%01000010	; bit6 is not required
    145  787a		       85 41		      sta	VBLANK	; end of screen - enter blanking
    146  787c
    147  787c
    148  787c							; END OF VISIBLE SCREEN
    149  787c							; HERE'S SOME TIME TO DO STUFF
    150  787c
    151  787c		       a9 26		      lda	#38
    152  787e		       8d 96 02 	      sta	TIM64T
    153  7881
    154  7881							;
      0  7881					      JSRAM	PositionSprites
      1  7881
      2  7881		       a9 09		      lda	#BANK_PositionSprites
      3  7883		       85 3f		      sta	SET_BANK
      4  7885		       20 43 f2 	      jsr	PositionSprites
    156  7888
    157  7888
    158  7888
    159  7888							; "draw" sprite shapes into row banks
    160  7888
    161  7888		       a2 07		      ldx	#7
    162  788a		       86 3e	   zapem      stx	SET_BANK_RAM
    163  788c		       20 a6 f2 	      jsr	WriteBlank
    164  788f		       ca		      dex
    165  7890		       10 f8		      bpl	zapem
    166  7892
    167  7892		       20 cf f2 	      jsr	WriteCursor
    168  7895
    169  7895
    170  7895		       2c 85 02    Waitforit  bit	TIMINT
    171  7898		       10 fb		      bpl	Waitforit
    172  789a
    173  789a		       4c 36 f8 	      jmp	.StartFrame
    174  789d
    175  789d
    176  789d		       60	   _rts       rts
    177  789e
    178  789e
    179  789e							;---------------------------------------------------------------------------------------------------
    180  789e
      0  789e					      DEF	AiStateMachine
      1  789e				   BANK_AiStateMachine SET	_CURRENT_BANK
      2  789e
      3  789e				   AiStateMachine
    182  789e					      SUBROUTINE
    183  789e
    184  789e		       a9 09		      lda	#STATEMACHINE
    185  78a0		       85 3f		      sta	SET_BANK	; to access vectors
    186  78a2
    187  78a2		       a6 8f		      ldx	aiPhase
    188  78a4		       bd 00 f0 	      lda	AiVectorLO,x
    189  78a7		       85 ef		      sta	__ptr
    190  78a9		       bd 0e f0 	      lda	AiVectorHI,x
    191  78ac		       85 f0		      sta	__ptr+1
    192  78ae
    193  78ae		       bd 1c f0 	      lda	AiVectorBANK,x
    194  78b1		       85 8e		      sta	savedBank
    195  78b3		       85 3f		      sta	SET_BANK
    196  78b5
    197  78b5		       6c ef 00 	      jmp	(__ptr)
    198  78b8
    199  78b8
    200  78b8							;---------------------------------------------------------------------------------------------------
    201  78b8
    202  78b8							;    DEF SAFE_PhasedProcessor
    203  78b8							;    SUBROUTINE
    204  78b8
    205  78b8							;		      jsr PhaseJump
    206  78b8							;		      lda savedBank
    207  78b8							;		      sta SET_BANK
    208  78b8							;		      rts
    209  78b8
    210  78b8							;---------------------------------------------------------------------------------------------------
    211  78b8
    212  78b8				  -	      if	0
    213  78b8				  -	      DEF	PhaseJump
    214  78b8				  -	      SUBROUTINE
    215  78b8				  -
    216  78b8				  -	      ldx	drawPhase
    217  78b8				  -	      lda	DrawVectorLO,x
    218  78b8				  -	      sta	__ptr
    219  78b8				  -	      lda	DrawVectorHI,x
    220  78b8				  -	      sta	__ptr+1
    221  78b8				  -	      lda	DrawVectorBANK,x
    222  78b8				  -	      sta	savedBank
    223  78b8				  -	      sta	SET_BANK
    224  78b8				  -	      jmp	(__ptr)
    225  78b8					      endif
    226  78b8
    227  78b8		       00 0a	   MARCH      =	10
    228  78b8		       00 04	   STARTMOVE  =	4
    229  78b8		       00 07	   CSL	      =	7
    230  78b8
    231  78b8				   DrawVectorLO
    232  78b8		       41		      .byte.b	<aiStartClearBoard	; 0
    233  78b9		       4c		      .byte.b	<aiClearEachRow	; 1
    234  78ba		       fd		      .byte.b	<DrawEntireBoard	; 2
    235  78bb		       94		      .byte.b	<DEB2	; 3
    236  78bc		       24		      .byte.b	<FlipBuffers	; 4
    237  78bd		       6d		      .byte.b	<FB0	; 5
    238  78be		       86		      .byte.b	<FB2	; 6
    239  78bf		       60		      .byte.b	<FB3	; 7
    240  78c0		       67		      .byte.b	<EraseStartPiece	; 8
    241  78c1		       78		      .byte.b	<WriteStartPieceBlank	; 9
    242  78c2		       a2		      .byte.b	<MarchToTargetA	; 10
    243  78c3		       a1		      .byte.b	<MarchB	; 11
    244  78c4		       11		      .byte.b	<MarchToTargetB	; 12
    245  78c5		       31		      .byte.b	<MarchB2	; 13
    246  78c6		       af		      .byte.b	<FinalFlash	; 14
    247  78c7		       61		      .byte.b	<SpecialMoveFixup	; 15
    248  78c8
    249  78c8				   DrawVectorHI
    250  78c8		       f0		      .byte.b	>aiStartClearBoard
    251  78c9		       f0		      .byte.b	>aiClearEachRow
    252  78ca		       f8		      .byte.b	>DrawEntireBoard
    253  78cb		       f0		      .byte.b	>DEB2
    254  78cc		       f9		      .byte.b	>FlipBuffers
    255  78cd		       f9		      .byte.b	>FB0
    256  78ce		       f9		      .byte.b	>FB2
    257  78cf		       f0		      .byte.b	>FB3
    258  78d0		       f0		      .byte.b	>EraseStartPiece
    259  78d1		       f0		      .byte.b	>WriteStartPieceBlank
    260  78d2		       f9		      .byte.b	>MarchToTargetA
    261  78d3		       f0		      .byte.b	>MarchB
    262  78d4		       fa		      .byte.b	>MarchToTargetB
    263  78d5		       fa		      .byte.b	>MarchB2
    264  78d6		       f0		      .byte.b	>FinalFlash
    265  78d7		       fa		      .byte.b	>SpecialMoveFixup
    266  78d8
    267  78d8				   DrawVectorBANK
    268  78d8
    269  78d8		       00		      .byte.b	BANK_aiStartClearBoard
    270  78d9		       00		      .byte.b	BANK_aiClearEachRow
    271  78da		       0f		      .byte.b	BANK_DrawEntireBoard
    272  78db		       00		      .byte.b	BANK_DEB2
    273  78dc		       0f		      .byte.b	BANK_FlipBuffers
    274  78dd		       0f		      .byte.b	BANK_FB0
    275  78de		       0f		      .byte.b	BANK_FB2
    276  78df		       00		      .byte.b	BANK_FB3
    277  78e0		       00		      .byte.b	BANK_EraseStartPiece
    278  78e1		       00		      .byte.b	BANK_WriteStartPieceBlank
    279  78e2		       0f		      .byte.b	BANK_MarchToTargetA
    280  78e3		       00		      .byte.b	BANK_MarchB
    281  78e4		       0f		      .byte.b	BANK_MarchToTargetB
    282  78e5		       0f		      .byte.b	BANK_MarchB2
    283  78e6		       00		      .byte.b	BANK_FinalFlash
    284  78e7		       0f		      .byte.b	BANK_SpecialMoveFixup
    285  78e8
    286  78e8							;---------------------------------------------------------------------------------------------------
    287  78e8
      0  78e8					      DEF	CallClear
      1  78e8				   BANK_CallClear SET	_CURRENT_BANK
      2  78e8
      3  78e8				   CallClear
    289  78e8					      SUBROUTINE
    290  78e8
    291  78e8		       84 3e		      sty	SET_BANK_RAM
    292  78ea		       20 c8 f0 	      jsr	ClearRowBitmap
    293  78ed		       60		      rts
    294  78ee
    295  78ee							;---------------------------------------------------------------------------------------------------
    296  78ee
      0  78ee					      DEF	SAFE_Get64toX12Board
      1  78ee				   BANK_SAFE_Get64toX12Board SET	_CURRENT_BANK
      2  78ee
      3  78ee				   SAFE_Get64toX12Board
    298  78ee					      SUBROUTINE
    299  78ee
    300  78ee		       a9 08		      lda	#RAMBANK_MOVES_RAM
    301  78f0		       85 3e		      sta	SET_BANK_RAM
    302  78f2		       bc 4b f3 	      ldy	Base64ToIndex,x
    303  78f5		       b9 7a f0 	      lda	Board,y
    304  78f8		       a4 8e		      ldy	savedBank
    305  78fa		       84 3f		      sty	SET_BANK
    306  78fc		       60		      rts
    307  78fd
    308  78fd							;---------------------------------------------------------------------------------------------------
    309  78fd
      0  78fd					      DEF	DrawEntireBoard
      1  78fd				   BANK_DrawEntireBoard SET	_CURRENT_BANK
      2  78fd
      3  78fd				   DrawEntireBoard
    311  78fd					      SUBROUTINE
    312  78fd
    313  78fd		       a9 08		      lda	#RAMBANK_MOVES_RAM
    314  78ff		       85 3e		      sta	SET_BANK_RAM
    315  7901
    316  7901		       a6 80		      ldx	drawPieceNumber
    317  7903		       bc 4b f3 	      ldy	Base64ToIndex,x
    318  7906		       b9 7a f0 	      lda	Board,y
    319  7909		       f0 16		      beq	.isablank
    320  790b		       48		      pha
    321  790c		       a9 00		      lda	#BLANK
    322  790e		       99 7a f4 	      sta	Board+RAM_WRITE,y
    323  7911
    324  7911		       20 e6 fd 	      jsr	CopySinglePiece
    325  7914
    326  7914		       a9 08		      lda	#RAMBANK_MOVES_RAM
    327  7916		       85 3e		      sta	SET_BANK_RAM
    328  7918		       a6 80		      ldx	drawPieceNumber
    329  791a		       bc 4b f3 	      ldy	Base64ToIndex,x
    330  791d		       68		      pla
    331  791e		       99 7a f4 	      sta	Board+RAM_WRITE,y
    332  7921
    333  7921		       e6 82	   .isablank  inc	drawPhase
    334  7923		       60		      rts
    335  7924
    336  7924
    337  7924							;---------------------------------------------------------------------------------------------------
    338  7924
      0  7924					      DEF	FlipBuffers
      1  7924				   BANK_FlipBuffers SET	_CURRENT_BANK
      2  7924
      3  7924				   FlipBuffers
    340  7924					      SUBROUTINE
    341  7924
    342  7924							; Initialise for a new move
    343  7924
    344  7924
    345  7924
    346  7924		       a5 9c		      lda	currentPly
    347  7926		       85 3e		      sta	SET_BANK_RAM
    348  7928
    349  7928		       20 90 f2 	      jsr	NewPlyInitialise	; zap movelist for this ply
    350  792b
    351  792b		       ad 34 f0 	      lda	enPassantSquare	; potentially set by move in previous ply
    352  792e		       85 9a		      sta	enPassantPawn	; grab enPassant flag from PLY for later checking
    353  7930
    354  7930
    355  7930		       a9 0b		      lda	#AI_SartMoveGen
    356  7932		       85 8f		      sta	aiPhase
    357  7934
    358  7934		       e6 82		      inc	drawPhase
    359  7936		       60		      rts
    360  7937
    361  7937
    362  7937							;---------------------------------------------------------------------------------------------------
    363  7937
      0  7937					      DEF	SAFE_InitialiseMoveGeneration
      1  7937				   BANK_SAFE_InitialiseMoveGeneration SET	_CURRENT_BANK
      2  7937
      3  7937				   SAFE_InitialiseMoveGeneration
    365  7937					      SUBROUTINE
    366  7937
    367  7937		       a5 9c		      lda	currentPly
    368  7939		       85 3e		      sta	SET_BANK_RAM
    369  793b
    370  793b		       20 90 f2 	      jsr	NewPlyInitialise
    371  793e
    372  793e		       a5 8e		      lda	savedBank
    373  7940		       85 3f		      sta	SET_BANK
    374  7942		       60		      rts
    375  7943
    376  7943
    377  7943							;---------------------------------------------------------------------------------------------------
    378  7943
    379  7943							;TODO...
      0  7943					      DEF	SAFE_GenerateOneMove
      1  7943				   BANK_SAFE_GenerateOneMove SET	_CURRENT_BANK
      2  7943
      3  7943				   SAFE_GenerateOneMove
    381  7943					      SUBROUTINE
    382  7943
    383  7943		       a5 9c		      lda	currentPly
    384  7945		       85 3e		      sta	SET_BANK_RAM
    385  7947		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    386  794a
    387  794a		       a5 8e		      lda	savedBank
    388  794c		       85 3f		      sta	SET_BANK
    389  794e		       60		      rts
    390  794f
    391  794f
    392  794f							;---------------------------------------------------------------------------------------------------
    393  794f
    394  794f							;TODO...
      0  794f					      DEF	SAFE_LookForCheck
      1  794f				   BANK_SAFE_LookForCheck SET	_CURRENT_BANK
      2  794f
      3  794f				   SAFE_LookForCheck
    396  794f					      SUBROUTINE
    397  794f
    398  794f		       a5 9c		      lda	currentPly
    399  7951		       85 3e		      sta	SET_BANK_RAM
    400  7953
    401  7953		       ac 35 f0 	      ldy	moveIndex
    402  7956		       30 0f		      bmi	.failed
    403  7958
    404  7958		       be 00 f1    .scan      ldx	MoveTo,y
    405  795b		       bd 7a f0 	      lda	Board,x
    406  795e		       29 0f		      and	#PIECE_MASK
    407  7960		       c9 07		      cmp	#KING
    408  7962		       f0 04		      beq	.inCheck	; --> CS too
    409  7964		       88		      dey
    410  7965		       10 f1		      bpl	.scan
    411  7967
    412  7967		       18	   .failed    clc
    413  7968
    414  7968		       a5 8e	   .inCheck   lda	savedBank	; CS or CC
    415  796a		       85 3f		      sta	SET_BANK
    416  796c		       60		      rts
    417  796d
    418  796d							;---------------------------------------------------------------------------------------------------
    419  796d
      0  796d					      DEF	FB0
      1  796d				   BANK_FB0   SET	_CURRENT_BANK
      2  796d
      3  796d				   FB0
    421  796d					      SUBROUTINE
    422  796d
    423  796d							; Call move generation for all pieces
    424  796d							; Test alpha-beta
    425  796d
    426  796d		       a5 9c		      lda	currentPly
    427  796f		       85 3e		      sta	SET_BANK_RAM
    428  7971		       20 da f2 	      jsr	alphaBeta
    429  7974
    430  7974		       a5 9c		      lda	currentPly
    431  7976		       85 3e		      sta	SET_BANK_RAM
    432  7978		       20 ac f2 	      jsr	GenerateMovesForNextPiece
    433  797b
    434  797b		       a5 9d		      lda	piecelistIndex
    435  797d		       29 0f		      and	#15
    436  797f		       c9 00		      cmp	#0
    437  7981		       d0 02		      bne	.wait
    438  7983
    439  7983		       e6 82		      inc	drawPhase
    440  7985		       60	   .wait      rts
    441  7986
    442  7986
    443  7986							;---------------------------------------------------------------------------------------------------
    444  7986
      0  7986					      DEF	FB2
      1  7986				   BANK_FB2   SET	_CURRENT_BANK
      2  7986
      3  7986				   FB2
    446  7986					      SUBROUTINE
    447  7986
    448  7986							; Choose one of the moves
    449  7986
    450  7986		       a5 9c		      lda	currentPly
    451  7988		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
    452  798a
    453  798a		       ad 35 f0 	      lda	moveIndex
    454  798d		       c9 ff		      cmp	#-1
    455  798f		       f0 0f		      beq	.halted	; no valid moves
    456  7991
    457  7991
    458  7991		       a9 ff		      lda	#-1
    459  7993		       85 9f		      sta	fromSquare
    460  7995		       85 a1		      sta	toSquare
    461  7997
    462  7997		       a5 9e		      lda	sideToMove
    463  7999		       10 03		      bpl	.notComputer
    464  799b
    465  799b		       20 1d fe 	      jsr	MoveViaList
    466  799e
    467  799e		       e6 82	   .notComputer inc	drawPhase
    468  79a0		       60	   .halted    rts
    469  79a1
    470  79a1
    471  79a1							;---------------------------------------------------------------------------------------------------
    472  79a1
      0  79a1					      DEF	debug
      1  79a1				   BANK_debug SET	_CURRENT_BANK
      2  79a1
      3  79a1				   debug
    474  79a1					      SUBROUTINE
    475  79a1
    476  79a1							; Use this to trap breakpoints in "unknown" banks. Just "jsr catch" from wherever you want
    477  79a1							; to catch the code, and put a breakpoint here instead. Then step, and you're at the place
    478  79a1							; you wanted to see, without knowing the bank.
    479  79a1
    480  79a1		       60		      rts
    481  79a2
    482  79a2
    483  79a2							;---------------------------------------------------------------------------------------------------
    484  79a2
      0  79a2					      DEF	MarchToTargetA
      1  79a2				   BANK_MarchToTargetA SET	_CURRENT_BANK
      2  79a2
      3  79a2				   MarchToTargetA
    486  79a2					      SUBROUTINE
    487  79a2
    488  79a2							; Start marching towards destination
    489  79a2
    490  79a2		       a5 83		      lda	drawDelay
    491  79a4		       f0 00		      beq	.progress
    492  79a6							;dec drawDelay
    493  79a6							;rts
    494  79a6				   .progress
    495  79a6
    496  79a6
    497  79a6		       a5 9f		      lda	fromSquare
    498  79a8		       c5 a1		      cmp	toSquare
    499  79aa		       f0 64		      beq	.unmoved
    500  79ac
    501  79ac							; Now we calculate move to new square
    502  79ac
    503  79ac		       a5 9f		      lda	fromSquare
    504  79ae		       85 84		      sta	lastSquare
    505  79b0		       4a		      lsr
    506  79b1		       4a		      lsr
    507  79b2		       4a		      lsr
    508  79b3		       85 a7		      sta	__fromRow
    509  79b5		       a5 a1		      lda	toSquare
    510  79b7		       4a		      lsr
    511  79b8		       4a		      lsr
    512  79b9		       4a		      lsr
    513  79ba		       c5 a7		      cmp	__fromRow
    514  79bc		       f0 11		      beq	rowOK
    515  79be		       b0 09		      bcs	.downRow
    516  79c0		       a5 9f		      lda	fromSquare
    517  79c2		       e9 07		      sbc	#7
    518  79c4		       85 9f		      sta	fromSquare
    519  79c6		       4c cf f9 	      jmp	nowcol
    520  79c9		       a5 9f	   .downRow   lda	fromSquare
    521  79cb		       69 07		      adc	#7
    522  79cd		       85 9f		      sta	fromSquare
    523  79cf				   rowOK
    524  79cf				   nowcol
    525  79cf
    526  79cf		       a5 9f		      lda	fromSquare
    527  79d1		       29 07		      and	#7
    528  79d3		       85 a7		      sta	__fromRow
    529  79d5		       a5 a1		      lda	toSquare
    530  79d7		       29 07		      and	#7
    531  79d9		       c5 a7		      cmp	__fromRow
    532  79db		       f0 09		      beq	colok
    533  79dd		       90 05		      bcc	.leftCol
    534  79df		       e6 9f		      inc	fromSquare
    535  79e1		       4c e6 f9 	      jmp	colok
    536  79e4		       c6 9f	   .leftCol   dec	fromSquare
    537  79e6				   colok
    538  79e6
    539  79e6							; erase object in new sqare --> blank
    540  79e6
    541  79e6		       a6 9f		      ldx	fromSquare
    542  79e8		       86 80		      stx	drawPieceNumber
    543  79ea		       a9 08		      lda	#RAMBANK_MOVES_RAM
    544  79ec		       85 3e		      sta	SET_BANK_RAM
    545  79ee		       bc 4b f3 	      ldy	Base64ToIndex,x
    546  79f1		       b9 7a f0 	      lda	Board,y
    547  79f4		       f0 03		      beq	.skipbl
    548  79f6		       20 e6 fd 	      jsr	CopySinglePiece	; erase next square along --> blank
    549  79f9
    550  79f9		       a9 08	   .skipbl    lda	#RAMBANK_MOVES_RAM
    551  79fb		       85 3e		      sta	SET_BANK_RAM
    552  79fd		       a6 9f		      ldx	fromSquare
    553  79ff		       bc 4b f3 	      ldy	Base64ToIndex,x
    554  7a02
    555  7a02		       b9 7a f0 	      lda	Board,y
    556  7a05		       85 a3		      sta	lastPiece	; what we are overwriting
    557  7a07		       a5 a0		      lda	fromPiece
    558  7a09		       09 40		      ora	#FLAG_MOVED	; prevents usage in castling for K/R
    559  7a0b		       99 7a f4 	      sta	Board+RAM_WRITE,y	; and what's actually moving there
    560  7a0e		       e6 82		      inc	drawPhase
    561  7a10
    562  7a10		       60	   .unmoved   rts
    563  7a11
    564  7a11
    565  7a11							;---------------------------------------------------------------------------------------------------
    566  7a11
      0  7a11					      DEF	MarchToTargetB
      1  7a11				   BANK_MarchToTargetB SET	_CURRENT_BANK
      2  7a11
      3  7a11				   MarchToTargetB
    568  7a11					      SUBROUTINE
    569  7a11
    570  7a11		       a5 83		      lda	drawDelay
    571  7a13		       f0 00		      beq	.mb
    572  7a15							;dec drawDelay
    573  7a15							;rts
    574  7a15				   .mb
    575  7a15
    576  7a15
    577  7a15							; now we want to undraw the piece in the old square
    578  7a15
    579  7a15		       a5 84		      lda	lastSquare
    580  7a17		       85 80		      sta	drawPieceNumber
    581  7a19		       20 e6 fd 	      jsr	CopySinglePiece	; erase whatever was on the previous square (completely blank)
    582  7a1c
    583  7a1c		       a9 08		      lda	#RAMBANK_MOVES_RAM
    584  7a1e		       85 3e		      sta	SET_BANK_RAM
    585  7a20		       a5 a4		      lda	previousPiece
    586  7a22
    587  7a22		       a6 84		      ldx	lastSquare
    588  7a24		       bc 4b f3 	      ldy	Base64ToIndex,x
    589  7a27		       99 7a f4 	      sta	Board+RAM_WRITE,y
    590  7a2a
    591  7a2a		       a5 a3		      lda	lastPiece
    592  7a2c		       85 a4		      sta	previousPiece
    593  7a2e
    594  7a2e		       e6 82		      inc	drawPhase
    595  7a30		       60		      rts
    596  7a31
    597  7a31
    598  7a31							;---------------------------------------------------------------------------------------------------
    599  7a31
      0  7a31					      DEF	MarchB2
      1  7a31				   BANK_MarchB2 SET	_CURRENT_BANK
      2  7a31
      3  7a31				   MarchB2
    601  7a31					      SUBROUTINE
    602  7a31
    603  7a31		       a6 84		      ldx	lastSquare
    604  7a33		       86 80		      stx	drawPieceNumber
    605  7a35
    606  7a35		       a9 08		      lda	#RAMBANK_MOVES_RAM
    607  7a37		       85 3e		      sta	SET_BANK_RAM
    608  7a39		       bc 4b f3 	      ldy	Base64ToIndex,x
    609  7a3c		       b9 7a f0 	      lda	Board,y
    610  7a3f		       f0 03		      beq	.skipbl2
    611  7a41
    612  7a41		       20 e6 fd 	      jsr	CopySinglePiece	; draw previous piece back in old position
    613  7a44				   .skipbl2
    614  7a44		       a5 9f		      lda	fromSquare
    615  7a46		       c5 a1		      cmp	toSquare
    616  7a48		       f0 09		      beq	xhalt
    617  7a4a
    618  7a4a		       a9 00		      lda	#0	; inter-move segment speed (can be 0)
    619  7a4c		       85 83		      sta	drawDelay
    620  7a4e
    621  7a4e		       a9 0a		      lda	#MARCH
    622  7a50		       85 82		      sta	drawPhase
    623  7a52		       60		      rts
    624  7a53
    625  7a53				   xhalt
    626  7a53
    627  7a53		       20 25 fe 	      jsr	FinaliseMove
    628  7a56
    629  7a56
    630  7a56		       a9 04		      lda	#4	; on/off count
    631  7a58		       85 85		      sta	drawCount	; flashing for piece about to move
    632  7a5a		       a9 00		      lda	#0
    633  7a5c		       85 83		      sta	drawDelay
    634  7a5e
    635  7a5e		       e6 82		      inc	drawPhase
    636  7a60		       60		      rts
    637  7a61
    638  7a61
    639  7a61							;---------------------------------------------------------------------------------------------------
    640  7a61
      0  7a61					      DEF	SpecialMoveFixup
      1  7a61				   BANK_SpecialMoveFixup SET	_CURRENT_BANK
      2  7a61
      3  7a61				   SpecialMoveFixup
    642  7a61					      SUBROUTINE
    643  7a61
    644  7a61		       a9 04		      lda	#STARTMOVE
    645  7a63		       85 82		      sta	drawPhase
    646  7a65
      0  7a65					      JSRAM_SAFE	CastleFixup
      1  7a65
      2  7a65
      3  7a65
      4  7a65		       a9 00		      lda	#BANK_CastleFixup
      5  7a67		       85 8e		      sta	savedBank
      6  7a69		       85 3f		      sta	SET_BANK
      7  7a6b		       20 cb f0 	      jsr	CastleFixup
    648  7a6e
    649  7a6e							; Handle en-passant captures
    650  7a6e
    651  7a6e		       a5 a0		      lda	fromPiece
    652  7a70		       29 20		      and	#FLAG_ENPASSANT
    653  7a72		       f0 00		      beq	.noEP
    654  7a74
    655  7a74
    656  7a74							; TODO - handle the en-passant capture and fixup
    657  7a74
    658  7a74				   .noEP
    659  7a74
    660  7a74
    661  7a74
    662  7a74					      if	ASSERTS
      0  7a74					      JSRAM_SAFE	DIAGNOSTIC_checkPieces
      1  7a74
      2  7a74
      3  7a74
      4  7a74		       a9 0c		      lda	#BANK_DIAGNOSTIC_checkPieces
      5  7a76		       85 8e		      sta	savedBank
      6  7a78		       85 3f		      sta	SET_BANK
      7  7a7a		       20 42 f2 	      jsr	DIAGNOSTIC_checkPieces
    664  7a7d					      endif
    665  7a7d
    666  7a7d		       60		      rts
    667  7a7e
    668  7a7e
    669  7a7e							;---------------------------------------------------------------------------------------------------
    670  7a7e
      0  7a7e					      DEF	MoveForSinglePiece
      1  7a7e				   BANK_MoveForSinglePiece SET	_CURRENT_BANK
      2  7a7e
      3  7a7e				   MoveForSinglePiece
    672  7a7e					      SUBROUTINE
    673  7a7e
    674  7a7e		       a9 08		      lda	#RAMBANK_MOVES_RAM
    675  7a80		       85 3e		      sta	SET_BANK_RAM
    676  7a82
    677  7a82		       a6 98		      ldx	currentSquare	; used in move handlers
    678  7a84		       bd 7a f0 	      lda	Board,x
    679  7a87		       85 97		      sta	currentPiece
    680  7a89
    681  7a89							;***********************************************************************************************
    682  7a89					      IF	ASSERTS
    683  7a89					      SUBROUTINE
    684  7a89							; DEBUG: Make sure we're looking at correct colour
    685  7a89		       45 9e		      eor	sideToMove
    686  7a8b		       30 fe	   .lock      bmi	.lock
    687  7a8d		       a5 97		      lda	currentPiece
    688  7a8f					      ENDIF
    689  7a8f							;***********************************************************************************************
    690  7a8f
    691  7a8f		       29 0f		      and	#PIECE_MASK
    692  7a91		       a8		      tay
    693  7a92
    694  7a92							;***********************************************************************************************
    695  7a92					      IF	ASSERTS
    696  7a92							; DEBUG: Make sure we have an actual piece, not an empty square
    697  7a92					      SUBROUTINE
    698  7a92		       f0 fe	   .lock      beq	.lock	; catch errors
    699  7a94					      ENDIF
    700  7a94							;***********************************************************************************************
    701  7a94
    702  7a94		       b9 a6 fa 	      lda	HandlerVectorLO-1,y
    703  7a97		       85 a8		      sta	__vector
    704  7a99		       b9 ad fa 	      lda	HandlerVectorHI-1,y
    705  7a9c		       85 a9		      sta	__vector+1
    706  7a9e		       6c a8 00 	      jmp	(__vector)
    707  7aa1
    708  7aa1		       a5 9c	   MoveReturn lda	currentPly
    709  7aa3		       85 3e		      sta	SET_BANK_RAM
    710  7aa5
    711  7aa5		       60		      rts
    712  7aa6
      0  7aa6					      OPTIONAL_PAGEBREAK	"Vector Tables", 15
     10  7aa6					      LIST	ON
    714  7aa6
    715  7aa6		       00		      .byte.b	0	; dummy to prevent page cross access on index 0
    716  7aa7
    717  7aa7				   HandlerVectorLO
    718  7aa7		       e0		      .byte.b	<Handle_WHITE_PAWN	; 1
    719  7aa8		       a0		      .byte.b	<Handle_BLACK_PAWN	; 2
    720  7aa9		       33		      .byte.b	<Handle_KNIGHT	; 3
    721  7aaa		       a1		      .byte.b	<Handle_BISHOP	; 4
    722  7aab		       04		      .byte.b	<Handle_ROOK	; 5
    723  7aac		       de		      .byte.b	<Handle_QUEEN	; 6
    724  7aad		       67		      .byte.b	<Handle_KING	; 7
    725  7aae
    726  7aae				   HandlerVectorHI
    727  7aae		       fa		      .byte.b	>Handle_WHITE_PAWN
    728  7aaf		       fb		      .byte.b	>Handle_BLACK_PAWN
    729  7ab0		       fc		      .byte.b	>Handle_KNIGHT
    730  7ab1		       f1		      .byte.b	>Handle_BISHOP
    731  7ab2		       f2		      .byte.b	>Handle_ROOK
    732  7ab3		       f0		      .byte.b	>Handle_QUEEN
    733  7ab4		       f2		      .byte.b	>Handle_KING
    734  7ab5
    735  7ab5							;---------------------------------------------------------------------------------------------------
    736  7ab5
------- FILE Handler_PAWN.asm LEVEL 3 PASS 3
      0  7ab5					      include	"Handler_PAWN.asm"
      1  7ab5							; Copyright (C)2020 Andrew Davie
      2  7ab5							; Pawn move handlers
      3  7ab5
      4  7ab5							;---------------------------------------------------------------------------------------------------
      5  7ab5							; WHITE PAWN
      6  7ab5							;---------------------------------------------------------------------------------------------------
      7  7ab5
      8  7ab5		       00 28	   WHITE_HOME_ROW =	40	; < this, on home row
      9  7ab5		       00 52	   BLACK_HOME_ROW =	82	; >= this, on home row
     10  7ab5
     11  7ab5							;---------------------------------------------------------------------------------------------------
     12  7ab5
     13  7ab5					      MAC	en_passant
     14  7ab5					      SUBROUTINE
     15  7ab5							; {1} = _LEFT or _RIGHT
     16  7ab5					      ldy	ValidSquare+{1},x
     17  7ab5					      cpy	enPassantPawn
     18  7ab5					      bne	.invalid
     19  7ab5					      ldy	ValidSquare+{1}+{2},x	; en-passant endpoint must be blank
     20  7ab5					      lda	Board,y
     21  7ab5					      bne	.invalid
     22  7ab5					      jsr	AddMove	; the MOVE will need to deal with the details of en-passant??
     23  7ab5				   .invalid
     24  7ab5					      ENDM
     25  7ab5
     26  7ab5							;---------------------------------------------------------------------------------------------------
     27  7ab5
     28  7ab5					      MAC	promote_pawn
     29  7ab5					      SUBROUTINE
     30  7ab5							;{1} = BLACK or WHITE
     31  7ab5
     32  7ab5					      lda	currentPiece
     33  7ab5					      pha
     34  7ab5
     35  7ab5					      sty	__temp
     36  7ab5					      lda	#{1}|QUEEN
     37  7ab5					      sta	currentPiece
     38  7ab5					      jsr	AddMove
     39  7ab5
     40  7ab5					      lda	#{1}|ROOK
     41  7ab5					      sta	currentPiece
     42  7ab5					      ldy	__temp
     43  7ab5					      jsr	AddMove
     44  7ab5
     45  7ab5					      lda	#{1}|BISHOP
     46  7ab5					      sta	currentPiece
     47  7ab5					      ldy	__temp
     48  7ab5					      jsr	AddMove
     49  7ab5
     50  7ab5					      lda	#{1}|KNIGHT
     51  7ab5					      sta	currentPiece
     52  7ab5					      ldy	__temp
     53  7ab5					      jsr	AddMove
     54  7ab5
     55  7ab5					      pla
     56  7ab5					      sta	currentPiece
     57  7ab5					      ENDM
     58  7ab5
     59  7ab5							;---------------------------------------------------------------------------------------------------
     60  7ab5
     61  7ab5					      MAC	move_or_promote_pawn
     62  7ab5					      SUBROUTINE
     63  7ab5							; {1} = BLACK or WHITE
     64  7ab5
     65  7ab5					      IF	{1} = WHITE
     66  7ab5					      cpy	#90	; last rank?
     67  7ab5					      bcc	.standard
     68  7ab5					      jsr	PromoteWhitePawn
     69  7ab5					      jmp	.pMoved
     70  7ab5					      ENDIF
     71  7ab5
     72  7ab5					      IF	{1} = BLACK
     73  7ab5					      cpy	#30	; last rank?
     74  7ab5					      bcs	.standard
     75  7ab5					      jsr	PromoteBlackPawn
     76  7ab5					      jmp	.pMoved
     77  7ab5					      ENDIF
     78  7ab5
     79  7ab5				   .standard  jsr	AddMove	; add +1UP move
     80  7ab5				   .pMoved
     81  7ab5
     82  7ab5					      ENDM
     83  7ab5
     84  7ab5							;---------------------------------------------------------------------------------------------------
     85  7ab5
     86  7ab5					      MAC	take
     87  7ab5					      SUBROUTINE
     88  7ab5							; {1} = capture square offset
     89  7ab5
     90  7ab5					      ldy	ValidSquare+{1},x
     91  7ab5					      bmi	.invalid
     92  7ab5					      lda	Board,y
     93  7ab5					      beq	.invalid	; square empty
     94  7ab5					      eor	currentPiece
     95  7ab5					      bpl	.invalid	; same colour
     96  7ab5
     97  7ab5					      MOVE_OR_PROMOTE_PAWN	{2}
     98  7ab5				   .invalid
     99  7ab5					      ENDM
    100  7ab5
    101  7ab5							;---------------------------------------------------------------------------------------------------
    102  7ab5
      0  7ab5					      DEF	PromoteWhitePawn
      1  7ab5				   BANK_PromoteWhitePawn SET	_CURRENT_BANK
      2  7ab5
      3  7ab5				   PromoteWhitePawn
      0  7ab5					      PROMOTE_PAWN	WHITE
      1  7ab5					      SUBROUTINE
      2  7ab5
      3  7ab5
      4  7ab5		       a5 97		      lda	currentPiece
      5  7ab7		       48		      pha
      6  7ab8
      7  7ab8		       84 a9		      sty	__temp
      8  7aba		       a9 06		      lda	#WHITE|QUEEN
      9  7abc		       85 97		      sta	currentPiece
     10  7abe		       20 cc fc 	      jsr	AddMove
     11  7ac1
     12  7ac1		       a9 05		      lda	#WHITE|ROOK
     13  7ac3		       85 97		      sta	currentPiece
     14  7ac5		       a4 a9		      ldy	__temp
     15  7ac7		       20 cc fc 	      jsr	AddMove
     16  7aca
     17  7aca		       a9 04		      lda	#WHITE|BISHOP
     18  7acc		       85 97		      sta	currentPiece
     19  7ace		       a4 a9		      ldy	__temp
     20  7ad0		       20 cc fc 	      jsr	AddMove
     21  7ad3
     22  7ad3		       a9 03		      lda	#WHITE|KNIGHT
     23  7ad5		       85 97		      sta	currentPiece
     24  7ad7		       a4 a9		      ldy	__temp
     25  7ad9		       20 cc fc 	      jsr	AddMove
     26  7adc
     27  7adc		       68		      pla
     28  7add		       85 97		      sta	currentPiece
    105  7adf		       60		      rts
    106  7ae0
    107  7ae0							;---------------------------------------------------------------------------------------------------
    108  7ae0
      0  7ae0					      DEF	Handle_WHITE_PAWN
      1  7ae0				   BANK_Handle_WHITE_PAWN SET	_CURRENT_BANK
      2  7ae0
      3  7ae0				   Handle_WHITE_PAWN
    110  7ae0
    111  7ae0		       bc 20 f0 	      ldy	ValidSquare+_UP,x	; square above must be blank (WILL NOT EVER be off-board!)
    112  7ae3		       b9 7a f0 	      lda	Board,y
    113  7ae6		       d0 20		      bne	.pMoved	; occupied
    114  7ae8
    115  7ae8							; we may need to promote the pawn
    116  7ae8							; All possibilites (Q/R/B/N) are added as individual moves
    117  7ae8
      0  7ae8					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7ae8					      SUBROUTINE
      2  7ae8
      3  7ae8
      4  7ae8					      IF	WHITE = WHITE
      5  7ae8		       c0 5a		      cpy	#90
      6  7aea		       90 06		      bcc	.standard
      7  7aec		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7aef		       4c f5 fa 	      jmp	.pMoved
      9  7af2					      ENDIF
     10  7af2
     11  7af2				  -	      IF	WHITE = BLACK
     12  7af2				  -	      cpy	#30
     13  7af2				  -	      bcs	.standard
     14  7af2				  -	      jsr	PromoteBlackPawn
     15  7af2				  -	      jmp	.pMoved
     16  7af2					      ENDIF
     17  7af2
     18  7af2		       20 cc fc    .standard  jsr	AddMove
     19  7af5				   .pMoved
     20  7af5
    119  7af5
    120  7af5
    121  7af5
    122  7af5							; the +2 move off the home rank...
    123  7af5
    124  7af5		       a6 98		      ldx	currentSquare
    125  7af7		       e0 28		      cpx	#WHITE_HOME_ROW
    126  7af9		       b0 0d		      bcs	.pMoved	; pawn has moved so can't do +2
    127  7afb		       bc 2a f0 	      ldy	ValidSquare+_UP+_UP,x	; WILL be a valid square
    128  7afe		       b9 7a f0 	      lda	Board,y
    129  7b01		       d0 05		      bne	.pMoved	; destination square occupied
    130  7b03
    131  7b03		       20 cc fc 	      jsr	AddMove	; add the +2UP move off home row
    132  7b06		       a6 98		      ldx	currentSquare
    133  7b08
    134  7b08				   .pMoved
    135  7b08
    136  7b08							; regular captures...
    137  7b08
      0  7b08					      TAKE	_UP+_LEFT, WHITE
      1  7b08					      SUBROUTINE
      2  7b08
      3  7b08
      4  7b08		       bc 1f f0 	      ldy	ValidSquare+_UP+_LEFT,x
      5  7b0b		       30 16		      bmi	.invalid
      6  7b0d		       b9 7a f0 	      lda	Board,y
      7  7b10		       f0 11		      beq	.invalid
      8  7b12		       45 97		      eor	currentPiece
      9  7b14		       10 0d		      bpl	.invalid
     10  7b16
      0  7b16					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b16					      SUBROUTINE
      2  7b16
      3  7b16
      4  7b16					      IF	WHITE = WHITE
      5  7b16		       c0 5a		      cpy	#90
      6  7b18		       90 06		      bcc	.standard
      7  7b1a		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b1d		       4c 23 fb 	      jmp	.pMoved
      9  7b20					      ENDIF
     10  7b20
     11  7b20				  -	      IF	WHITE = BLACK
     12  7b20				  -	      cpy	#30
     13  7b20				  -	      bcs	.standard
     14  7b20				  -	      jsr	PromoteBlackPawn
     15  7b20				  -	      jmp	.pMoved
     16  7b20					      ENDIF
     17  7b20
     18  7b20		       20 cc fc    .standard  jsr	AddMove
     19  7b23				   .pMoved
     20  7b23
     12  7b23				   .invalid
    139  7b23		       a6 98		      ldx	currentSquare
      0  7b25					      TAKE	_UP+_RIGHT, WHITE
      1  7b25					      SUBROUTINE
      2  7b25
      3  7b25
      4  7b25		       bc 21 f0 	      ldy	ValidSquare+_UP+_RIGHT,x
      5  7b28		       30 16		      bmi	.invalid
      6  7b2a		       b9 7a f0 	      lda	Board,y
      7  7b2d		       f0 11		      beq	.invalid
      8  7b2f		       45 97		      eor	currentPiece
      9  7b31		       10 0d		      bpl	.invalid
     10  7b33
      0  7b33					      MOVE_OR_PROMOTE_PAWN	WHITE
      1  7b33					      SUBROUTINE
      2  7b33
      3  7b33
      4  7b33					      IF	WHITE = WHITE
      5  7b33		       c0 5a		      cpy	#90
      6  7b35		       90 06		      bcc	.standard
      7  7b37		       20 b5 fa 	      jsr	PromoteWhitePawn
      8  7b3a		       4c 40 fb 	      jmp	.pMoved
      9  7b3d					      ENDIF
     10  7b3d
     11  7b3d				  -	      IF	WHITE = BLACK
     12  7b3d				  -	      cpy	#30
     13  7b3d				  -	      bcs	.standard
     14  7b3d				  -	      jsr	PromoteBlackPawn
     15  7b3d				  -	      jmp	.pMoved
     16  7b3d					      ENDIF
     17  7b3d
     18  7b3d		       20 cc fc    .standard  jsr	AddMove
     19  7b40				   .pMoved
     20  7b40
     12  7b40				   .invalid
    141  7b40
    142  7b40
    143  7b40							; en-passant captures...
    144  7b40				   EN_PASSANTING
    145  7b40					      if	1
    146  7b40		       a5 9a		      lda	enPassantPawn
    147  7b42		       f0 2e		      beq	.noEnPassant
    148  7b44
    149  7b44		       a5 97		      lda	currentPiece
    150  7b46		       09 20		      ora	#FLAG_ENPASSANT
    151  7b48		       85 97		      sta	currentPiece
    152  7b4a
    153  7b4a		       a6 98		      ldx	currentSquare
      0  7b4c					      EN_PASSANT	_LEFT, _UP
      1  7b4c					      SUBROUTINE
      2  7b4c
      3  7b4c		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7b4f		       c4 9a		      cpy	enPassantPawn
      5  7b51		       d0 0b		      bne	.invalid
      6  7b53		       bc 1f f0 	      ldy	ValidSquare+_LEFT+_UP,x
      7  7b56		       b9 7a f0 	      lda	Board,y
      8  7b59		       d0 03		      bne	.invalid
      9  7b5b		       20 cc fc 	      jsr	AddMove
     10  7b5e				   .invalid
    155  7b5e		       a6 98		      ldx	currentSquare
      0  7b60					      EN_PASSANT	_RIGHT, _UP
      1  7b60					      SUBROUTINE
      2  7b60
      3  7b60		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7b63		       c4 9a		      cpy	enPassantPawn
      5  7b65		       d0 0b		      bne	.invalid
      6  7b67		       bc 21 f0 	      ldy	ValidSquare+_RIGHT+_UP,x
      7  7b6a		       b9 7a f0 	      lda	Board,y
      8  7b6d		       d0 03		      bne	.invalid
      9  7b6f		       20 cc fc 	      jsr	AddMove
     10  7b72				   .invalid
    157  7b72
    158  7b72				   .noEnPassant
    159  7b72					      endif
    160  7b72
    161  7b72		       4c a1 fa 	      jmp	MoveReturn
    162  7b75
    163  7b75
    164  7b75							;---------------------------------------------------------------------------------------------------
    165  7b75							; BLACK PAWN
    166  7b75							;---------------------------------------------------------------------------------------------------
    167  7b75
      0  7b75					      DEF	PromoteBlackPawn
      1  7b75				   BANK_PromoteBlackPawn SET	_CURRENT_BANK
      2  7b75
      3  7b75				   PromoteBlackPawn
      0  7b75					      PROMOTE_PAWN	BLACK
      1  7b75					      SUBROUTINE
      2  7b75
      3  7b75
      4  7b75		       a5 97		      lda	currentPiece
      5  7b77		       48		      pha
      6  7b78
      7  7b78		       84 a9		      sty	__temp
      8  7b7a		       a9 86		      lda	#BLACK|QUEEN
      9  7b7c		       85 97		      sta	currentPiece
     10  7b7e		       20 cc fc 	      jsr	AddMove
     11  7b81
     12  7b81		       a9 85		      lda	#BLACK|ROOK
     13  7b83		       85 97		      sta	currentPiece
     14  7b85		       a4 a9		      ldy	__temp
     15  7b87		       20 cc fc 	      jsr	AddMove
     16  7b8a
     17  7b8a		       a9 84		      lda	#BLACK|BISHOP
     18  7b8c		       85 97		      sta	currentPiece
     19  7b8e		       a4 a9		      ldy	__temp
     20  7b90		       20 cc fc 	      jsr	AddMove
     21  7b93
     22  7b93		       a9 83		      lda	#BLACK|KNIGHT
     23  7b95		       85 97		      sta	currentPiece
     24  7b97		       a4 a9		      ldy	__temp
     25  7b99		       20 cc fc 	      jsr	AddMove
     26  7b9c
     27  7b9c		       68		      pla
     28  7b9d		       85 97		      sta	currentPiece
    170  7b9f		       60		      rts
    171  7ba0
      0  7ba0					      DEF	Handle_BLACK_PAWN
      1  7ba0				   BANK_Handle_BLACK_PAWN SET	_CURRENT_BANK
      2  7ba0
      3  7ba0				   Handle_BLACK_PAWN
    173  7ba0					      SUBROUTINE
    174  7ba0
    175  7ba0		       bc 0c f0 	      ldy	ValidSquare+_DOWN,x	; square below must be blank (WILL NOT EVER be off-board!)
    176  7ba3		       b9 7a f0 	      lda	Board,y
    177  7ba6		       d0 20		      bne	.pMoved	; occupied
    178  7ba8
    179  7ba8							; we may need to promote the pawn
    180  7ba8							; All possibilites (Q/R/B/N) are added as individual moves
    181  7ba8
      0  7ba8					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7ba8					      SUBROUTINE
      2  7ba8
      3  7ba8
      4  7ba8				  -	      IF	BLACK = WHITE
      5  7ba8				  -	      cpy	#90
      6  7ba8				  -	      bcc	.standard
      7  7ba8				  -	      jsr	PromoteWhitePawn
      8  7ba8				  -	      jmp	.pMoved
      9  7ba8					      ENDIF
     10  7ba8
     11  7ba8					      IF	BLACK = BLACK
     12  7ba8		       c0 1e		      cpy	#30
     13  7baa		       b0 06		      bcs	.standard
     14  7bac		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7baf		       4c b5 fb 	      jmp	.pMoved
     16  7bb2					      ENDIF
     17  7bb2
     18  7bb2		       20 cc fc    .standard  jsr	AddMove
     19  7bb5				   .pMoved
     20  7bb5
    183  7bb5
    184  7bb5							; the +2 move off the home rank...
    185  7bb5
    186  7bb5		       a6 98		      ldx	currentSquare
    187  7bb7		       e0 52		      cpx	#BLACK_HOME_ROW
    188  7bb9		       90 0d		      bcc	.pMoved	; pawn has moved so can't do +2
    189  7bbb		       bc 02 f0 	      ldy	ValidSquare+_DOWN+_DOWN,x	; WILL be a valid square
    190  7bbe		       b9 7a f0 	      lda	Board,y
    191  7bc1		       d0 05		      bne	.pMoved	; destination square occupied
    192  7bc3
    193  7bc3		       20 cc fc 	      jsr	AddMove	; add the +2DOWN move off home row
    194  7bc6		       a6 98		      ldx	currentSquare
    195  7bc8
    196  7bc8				   .pMoved
    197  7bc8
    198  7bc8							; regular captures...
    199  7bc8
      0  7bc8					      TAKE	_DOWN+_LEFT, BLACK
      1  7bc8					      SUBROUTINE
      2  7bc8
      3  7bc8
      4  7bc8		       bc 0b f0 	      ldy	ValidSquare+_DOWN+_LEFT,x
      5  7bcb		       30 16		      bmi	.invalid
      6  7bcd		       b9 7a f0 	      lda	Board,y
      7  7bd0		       f0 11		      beq	.invalid
      8  7bd2		       45 97		      eor	currentPiece
      9  7bd4		       10 0d		      bpl	.invalid
     10  7bd6
      0  7bd6					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bd6					      SUBROUTINE
      2  7bd6
      3  7bd6
      4  7bd6				  -	      IF	BLACK = WHITE
      5  7bd6				  -	      cpy	#90
      6  7bd6				  -	      bcc	.standard
      7  7bd6				  -	      jsr	PromoteWhitePawn
      8  7bd6				  -	      jmp	.pMoved
      9  7bd6					      ENDIF
     10  7bd6
     11  7bd6					      IF	BLACK = BLACK
     12  7bd6		       c0 1e		      cpy	#30
     13  7bd8		       b0 06		      bcs	.standard
     14  7bda		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bdd		       4c e3 fb 	      jmp	.pMoved
     16  7be0					      ENDIF
     17  7be0
     18  7be0		       20 cc fc    .standard  jsr	AddMove
     19  7be3				   .pMoved
     20  7be3
     12  7be3				   .invalid
    201  7be3		       a6 98		      ldx	currentSquare
      0  7be5					      TAKE	_DOWN+_RIGHT, BLACK
      1  7be5					      SUBROUTINE
      2  7be5
      3  7be5
      4  7be5		       bc 0d f0 	      ldy	ValidSquare+_DOWN+_RIGHT,x
      5  7be8		       30 16		      bmi	.invalid
      6  7bea		       b9 7a f0 	      lda	Board,y
      7  7bed		       f0 11		      beq	.invalid
      8  7bef		       45 97		      eor	currentPiece
      9  7bf1		       10 0d		      bpl	.invalid
     10  7bf3
      0  7bf3					      MOVE_OR_PROMOTE_PAWN	BLACK
      1  7bf3					      SUBROUTINE
      2  7bf3
      3  7bf3
      4  7bf3				  -	      IF	BLACK = WHITE
      5  7bf3				  -	      cpy	#90
      6  7bf3				  -	      bcc	.standard
      7  7bf3				  -	      jsr	PromoteWhitePawn
      8  7bf3				  -	      jmp	.pMoved
      9  7bf3					      ENDIF
     10  7bf3
     11  7bf3					      IF	BLACK = BLACK
     12  7bf3		       c0 1e		      cpy	#30
     13  7bf5		       b0 06		      bcs	.standard
     14  7bf7		       20 75 fb 	      jsr	PromoteBlackPawn
     15  7bfa		       4c 00 fc 	      jmp	.pMoved
     16  7bfd					      ENDIF
     17  7bfd
     18  7bfd		       20 cc fc    .standard  jsr	AddMove
     19  7c00				   .pMoved
     20  7c00
     12  7c00				   .invalid
    203  7c00
    204  7c00							; en-passant captures...
    205  7c00
    206  7c00					      if	1
    207  7c00		       a5 9a		      lda	enPassantPawn
    208  7c02		       f0 2c		      beq	.noEnPassant
    209  7c04
    210  7c04		       a5 97		      lda	currentPiece
    211  7c06		       09 20		      ora	#FLAG_ENPASSANT
    212  7c08		       85 97		      sta	currentPiece
    213  7c0a
      0  7c0a					      EN_PASSANT	_LEFT, _DOWN
      1  7c0a					      SUBROUTINE
      2  7c0a
      3  7c0a		       bc 15 f0 	      ldy	ValidSquare+_LEFT,x
      4  7c0d		       c4 9a		      cpy	enPassantPawn
      5  7c0f		       d0 0b		      bne	.invalid
      6  7c11		       bc 0b f0 	      ldy	ValidSquare+_LEFT+_DOWN,x
      7  7c14		       b9 7a f0 	      lda	Board,y
      8  7c17		       d0 03		      bne	.invalid
      9  7c19		       20 cc fc 	      jsr	AddMove
     10  7c1c				   .invalid
    215  7c1c		       a6 98		      ldx	currentSquare
      0  7c1e					      EN_PASSANT	_RIGHT, _DOWN
      1  7c1e					      SUBROUTINE
      2  7c1e
      3  7c1e		       bc 17 f0 	      ldy	ValidSquare+_RIGHT,x
      4  7c21		       c4 9a		      cpy	enPassantPawn
      5  7c23		       d0 0b		      bne	.invalid
      6  7c25		       bc 0d f0 	      ldy	ValidSquare+_RIGHT+_DOWN,x
      7  7c28		       b9 7a f0 	      lda	Board,y
      8  7c2b		       d0 03		      bne	.invalid
      9  7c2d		       20 cc fc 	      jsr	AddMove
     10  7c30				   .invalid
    217  7c30
    218  7c30				   .noEnPassant
    219  7c30					      endif
    220  7c30
    221  7c30		       4c a1 fa    Handle_BLANK jmp	MoveReturn
    222  7c33
    223  7c33							; EOF
------- FILE BANK_FIXED.asm
------- FILE Handler_KNIGHT.asm LEVEL 3 PASS 3
      0  7c33					      include	"Handler_KNIGHT.asm"
      1  7c33							; Copyright (C)2020 Andrew Davie
      2  7c33							; Knight move handler
      3  7c33
      4  7c33							;---------------------------------------------------------------------------------------------------
      5  7c33							; KNIGHT
      6  7c33							;---------------------------------------------------------------------------------------------------
      7  7c33
      0  7c33					      DEF	Handle_KNIGHT
      1  7c33				   BANK_Handle_KNIGHT SET	_CURRENT_BANK
      2  7c33
      3  7c33				   Handle_KNIGHT
      9  7c33
     10  7c33							; x = currentSquare (square the piece is on)
     11  7c33							; currentPiece (with flags/colour attached)
     12  7c33
      0  7c33					      MOVE_TO	_DOWN+_DOWN+_LEFT
      1  7c33					      SUBROUTINE
      2  7c33		       bc 01 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_LEFT,x
      3  7c36		       30 0c		      bmi	.invalid
      4  7c38		       b9 7a f0 	      lda	Board,y
      5  7c3b		       f0 04		      beq	.squareEmpty
      6  7c3d		       45 97		      eor	currentPiece
      7  7c3f		       10 03		      bpl	.invalid
      8  7c41		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c44				   .invalid
      0  7c44					      MOVE_TO_X	_DOWN+_DOWN+_RIGHT
      1  7c44		       a6 98		      ldx	currentSquare
      0  7c46					      MOVE_TO	_DOWN+_DOWN+_RIGHT
      1  7c46					      SUBROUTINE
      2  7c46		       bc 03 f0 	      ldy	ValidSquare+_DOWN+_DOWN+_RIGHT,x
      3  7c49		       30 0c		      bmi	.invalid
      4  7c4b		       b9 7a f0 	      lda	Board,y
      5  7c4e		       f0 04		      beq	.squareEmpty
      6  7c50		       45 97		      eor	currentPiece
      7  7c52		       10 03		      bpl	.invalid
      8  7c54		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c57				   .invalid
      0  7c57					      MOVE_TO_X	_UP+_UP+_LEFT
      1  7c57		       a6 98		      ldx	currentSquare
      0  7c59					      MOVE_TO	_UP+_UP+_LEFT
      1  7c59					      SUBROUTINE
      2  7c59		       bc 29 f0 	      ldy	ValidSquare+_UP+_UP+_LEFT,x
      3  7c5c		       30 0c		      bmi	.invalid
      4  7c5e		       b9 7a f0 	      lda	Board,y
      5  7c61		       f0 04		      beq	.squareEmpty
      6  7c63		       45 97		      eor	currentPiece
      7  7c65		       10 03		      bpl	.invalid
      8  7c67		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c6a				   .invalid
      0  7c6a					      MOVE_TO_X	_UP+_UP+_RIGHT
      1  7c6a		       a6 98		      ldx	currentSquare
      0  7c6c					      MOVE_TO	_UP+_UP+_RIGHT
      1  7c6c					      SUBROUTINE
      2  7c6c		       bc 2b f0 	      ldy	ValidSquare+_UP+_UP+_RIGHT,x
      3  7c6f		       30 0c		      bmi	.invalid
      4  7c71		       b9 7a f0 	      lda	Board,y
      5  7c74		       f0 04		      beq	.squareEmpty
      6  7c76		       45 97		      eor	currentPiece
      7  7c78		       10 03		      bpl	.invalid
      8  7c7a		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c7d				   .invalid
     17  7c7d
      0  7c7d					      MOVE_TO_X	_DOWN+_LEFT+_LEFT
      1  7c7d		       a6 98		      ldx	currentSquare
      0  7c7f					      MOVE_TO	_DOWN+_LEFT+_LEFT
      1  7c7f					      SUBROUTINE
      2  7c7f		       bc 0a f0 	      ldy	ValidSquare+_DOWN+_LEFT+_LEFT,x
      3  7c82		       30 0c		      bmi	.invalid
      4  7c84		       b9 7a f0 	      lda	Board,y
      5  7c87		       f0 04		      beq	.squareEmpty
      6  7c89		       45 97		      eor	currentPiece
      7  7c8b		       10 03		      bpl	.invalid
      8  7c8d		       20 cc fc    .squareEmpty jsr	AddMove
      9  7c90				   .invalid
      0  7c90					      MOVE_TO_X	_DOWN+_RIGHT+_RIGHT
      1  7c90		       a6 98		      ldx	currentSquare
      0  7c92					      MOVE_TO	_DOWN+_RIGHT+_RIGHT
      1  7c92					      SUBROUTINE
      2  7c92		       bc 0e f0 	      ldy	ValidSquare+_DOWN+_RIGHT+_RIGHT,x
      3  7c95		       30 0c		      bmi	.invalid
      4  7c97		       b9 7a f0 	      lda	Board,y
      5  7c9a		       f0 04		      beq	.squareEmpty
      6  7c9c		       45 97		      eor	currentPiece
      7  7c9e		       10 03		      bpl	.invalid
      8  7ca0		       20 cc fc    .squareEmpty jsr	AddMove
      9  7ca3				   .invalid
      0  7ca3					      MOVE_TO_X	_UP+_LEFT+_LEFT
      1  7ca3		       a6 98		      ldx	currentSquare
      0  7ca5					      MOVE_TO	_UP+_LEFT+_LEFT
      1  7ca5					      SUBROUTINE
      2  7ca5		       bc 1e f0 	      ldy	ValidSquare+_UP+_LEFT+_LEFT,x
      3  7ca8		       30 0c		      bmi	.invalid
      4  7caa		       b9 7a f0 	      lda	Board,y
      5  7cad		       f0 04		      beq	.squareEmpty
      6  7caf		       45 97		      eor	currentPiece
      7  7cb1		       10 03		      bpl	.invalid
      8  7cb3		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cb6				   .invalid
      0  7cb6					      MOVE_TO_X	_UP+_RIGHT+_RIGHT
      1  7cb6		       a6 98		      ldx	currentSquare
      0  7cb8					      MOVE_TO	_UP+_RIGHT+_RIGHT
      1  7cb8					      SUBROUTINE
      2  7cb8		       bc 22 f0 	      ldy	ValidSquare+_UP+_RIGHT+_RIGHT,x
      3  7cbb		       30 0c		      bmi	.invalid
      4  7cbd		       b9 7a f0 	      lda	Board,y
      5  7cc0		       f0 04		      beq	.squareEmpty
      6  7cc2		       45 97		      eor	currentPiece
      7  7cc4		       10 03		      bpl	.invalid
      8  7cc6		       20 cc fc    .squareEmpty jsr	AddMove
      9  7cc9				   .invalid
     22  7cc9
     23  7cc9		       4c a1 fa 	      jmp	MoveReturn
     24  7ccc
     25  7ccc							; EOF
------- FILE BANK_FIXED.asm
    739  7ccc
    740  7ccc							;---------------------------------------------------------------------------------------------------
    741  7ccc
      0  7ccc					      DEF	AddMove
      1  7ccc				   BANK_AddMove SET	_CURRENT_BANK
      2  7ccc
      3  7ccc				   AddMove
    743  7ccc					      SUBROUTINE
    744  7ccc							; =57 including call
    745  7ccc
    746  7ccc							; add square in y register to movelist as destination (X12 format)
    747  7ccc							; currentPiece = piece moving
    748  7ccc							; currentSquare = start square (X12)
    749  7ccc							; ??do not modify y
    750  7ccc
    751  7ccc		       a5 9c		      lda	currentPly	; 3
    752  7cce		       85 3e		      sta	SET_BANK_RAM	; 3
    753  7cd0
    754  7cd0							; [y]		     to square (X12)
    755  7cd0							; currentSquare     from square (X12)
    756  7cd0							; currentPiece      piece. ENPASSANT flag set if pawn double-moving off opening rank
    757  7cd0							; do not modify [Y]
    758  7cd0
    759  7cd0							; add a move to the movelist
    760  7cd0
    761  7cd0		       98		      tya		; 2
    762  7cd1
    763  7cd1		       ac 35 f0 	      ldy	moveIndex	; 3
    764  7cd4		       c8		      iny		; 2
    765  7cd5		       8c 35 f4 	      sty	moveIndex+RAM_WRITE	; 4
    766  7cd8
    767  7cd8		       99 00 f5 	      sta	MoveTo+RAM_WRITE,y	; 5
    768  7cdb		       aa		      tax		; 2   new square (for projections)
    769  7cdc
    770  7cdc		       a5 98		      lda	currentSquare	; 3
    771  7cde		       99 36 f4 	      sta	MoveFrom+RAM_WRITE,y	; 5
    772  7ce1		       a5 97		      lda	currentPiece	; 3
    773  7ce3		       99 80 f5 	      sta	MovePiece+RAM_WRITE,y	; 5
    774  7ce6
    775  7ce6		       a9 08		      lda	#RAMBANK_MOVES_RAM	; 2
    776  7ce8		       85 3e		      sta	SET_BANK_RAM	; 3
    777  7cea		       60		      rts		; 6
    778  7ceb
    779  7ceb
    780  7ceb							;---------------------------------------------------------------------------------------------------
    781  7ceb
      0  7ceb					      DEF	InitialisePieceSquares
      1  7ceb				   BANK_InitialisePieceSquares SET	_CURRENT_BANK
      2  7ceb
      3  7ceb				   InitialisePieceSquares
    783  7ceb					      SUBROUTINE
    784  7ceb
    785  7ceb							; Zap the board with the "blank" ROM copy
    786  7ceb
      0  7ceb					      JSRAM_SAFE	PutAllPieces
      1  7ceb
      2  7ceb
      3  7ceb
      4  7ceb		       a9 0b		      lda	#BANK_PutAllPieces
      5  7ced		       85 8e		      sta	savedBank
      6  7cef		       85 3f		      sta	SET_BANK
      7  7cf1		       20 8b f3 	      jsr	PutAllPieces
    788  7cf4
    789  7cf4							; Initialise the piecelists and the board for the two piecelist banks (BLACK/WHITE)
    790  7cf4
    791  7cf4		       a9 09		      lda	#RAMBANK_PLY
    792  7cf6		       85 3e		      sta	SET_BANK_RAM
    793  7cf8		       20 00 f2 	      jsr	InitPieceLists	; for white
    794  7cfb		       a9 0a		      lda	#RAMBANK_PLY+1
    795  7cfd		       85 3e		      sta	SET_BANK_RAM
    796  7cff		       20 00 f2 	      jsr	InitPieceLists	; for black
    797  7d02
    798  7d02
    799  7d02							; Now setup the board/piecelists
    800  7d02
    801  7d02		       a2 00		      ldx	#0
    802  7d04				   .fillPieceLists
    803  7d04
    804  7d04		       a9 09		      lda	#RAMBANK_PLY
    805  7d06		       85 3e		      sta	SET_BANK_RAM
    806  7d08
    807  7d08		       bd 4f f2 	      lda	InitPieceList,x	; colour/-1
    808  7d0b		       f0 2e		      beq	.finish
    809  7d0d
    810  7d0d		       0a		      asl
    811  7d0e		       a9 09		      lda	#RAMBANK_PLY
    812  7d10		       69 00		      adc	#0
    813  7d12		       85 3e		      sta	SET_BANK_RAM	; BLACK/WHITE
    814  7d14
    815  7d14		       ac 30 f0 	      ldy	PieceListPtr
    816  7d17		       c8		      iny
    817  7d18
    818  7d18		       bd 50 f2 	      lda	InitPieceList+1,x	; square
    819  7d1b		       99 10 f4 	      sta	PieceSquare+RAM_WRITE,y
    820  7d1e		       98		      tya
    821  7d1f		       99 00 f4 	      sta	SortedPieceList+RAM_WRITE,y
    822  7d22
    823  7d22		       bd 4f f2 	      lda	InitPieceList,x	; piece type
    824  7d25		       99 20 f4 	      sta	PieceType+RAM_WRITE,y
    825  7d28		       48		      pha
    826  7d29
    827  7d29		       8c 30 f4 	      sty	PieceListPtr+RAM_WRITE
    828  7d2c
    829  7d2c
    830  7d2c		       bc 50 f2 	      ldy	InitPieceList+1,x	; square
    831  7d2f
    832  7d2f		       a9 08		      lda	#RAMBANK_MOVES_RAM
    833  7d31		       85 3e		      sta	SET_BANK_RAM
    834  7d33		       68		      pla
    835  7d34		       99 7a f4 	      sta	Board+RAM_WRITE,y
    836  7d37
    837  7d37		       e8		      inx
    838  7d38		       e8		      inx
    839  7d39		       10 c9		      bpl	.fillPieceLists
    840  7d3b
    841  7d3b		       60	   .finish    rts
    842  7d3c
    843  7d3c
    844  7d3c							;---------------------------------------------------------------------------------------------------
    845  7d3c
      0  7d3c					      DEF	SAFE_GetKingSquare
      1  7d3c				   BANK_SAFE_GetKingSquare SET	_CURRENT_BANK
      2  7d3c
      3  7d3c				   SAFE_GetKingSquare
    847  7d3c					      SUBROUTINE
    848  7d3c
    849  7d3c							; Pass:	 A = correct bank for current side (RAMBANK_PLY/+1)
    850  7d3c							; Return:	 A = square king is on (or -1)
    851  7d3c
    852  7d3c		       85 3e		      sta	SET_BANK_RAM
    853  7d3e		       20 8d f3 	      jsr	GetKingSquare
    854  7d41		       a4 8e		      ldy	savedBank
    855  7d43		       84 3f		      sty	SET_BANK
    856  7d45		       60		      rts
    857  7d46
    858  7d46							;---------------------------------------------------------------------------------------------------
    859  7d46
      0  7d46					      DEF	SAFE_GetPieceFromBoard
      1  7d46				   BANK_SAFE_GetPieceFromBoard SET	_CURRENT_BANK
      2  7d46
      3  7d46				   SAFE_GetPieceFromBoard
    861  7d46					      SUBROUTINE
    862  7d46
    863  7d46							; y = X12 board index
    864  7d46
    865  7d46		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    866  7d48		       86 3e		      stx	SET_BANK_RAM
    867  7d4a		       a6 8e		      ldx	savedBank
    868  7d4c		       b9 7a f0 	      lda	Board,y
    869  7d4f		       86 3f		      stx	SET_BANK
    870  7d51		       60		      rts
    871  7d52
    872  7d52
    873  7d52							;---------------------------------------------------------------------------------------------------
    874  7d52
      0  7d52					      DEF	calculateBase64Square
      1  7d52				   BANK_calculateBase64Square SET	_CURRENT_BANK
      2  7d52
      3  7d52				   calculateBase64Square
    876  7d52					      SUBROUTINE
    877  7d52
    878  7d52							; Convert row/column into Base64 index
    879  7d52
    880  7d52		       a5 88		      lda	highlight_row
    881  7d54		       49 07		      eor	#7
    882  7d56		       0a		      asl
    883  7d57		       0a		      asl
    884  7d58		       0a		      asl
    885  7d59		       05 8a		      ora	highlight_col
    886  7d5b		       aa		      tax
    887  7d5c		       60		      rts
    888  7d5d
    889  7d5d							;---------------------------------------------------------------------------------------------------
    890  7d5d
      0  7d5d					      DEF	SAFE_IsValidMoveFromSquare
      1  7d5d				   BANK_SAFE_IsValidMoveFromSquare SET	_CURRENT_BANK
      2  7d5d
      3  7d5d				   SAFE_IsValidMoveFromSquare
    892  7d5d					      SUBROUTINE
    893  7d5d
    894  7d5d							; Does the square exist in the movelist?
    895  7d5d
    896  7d5d		       20 52 fd 	      jsr	calculateBase64Square
    897  7d60		       86 91		      stx	aiFromSquare
    898  7d62
    899  7d62		       a9 08		      lda	#RAMBANK_MOVES_RAM
    900  7d64		       85 3e		      sta	SET_BANK_RAM
    901  7d66		       bc 4b f3 	      ldy	Base64ToIndex,x
    902  7d69		       84 93		      sty	aiFromSquareX12
    903  7d6b
    904  7d6b		       98		      tya
    905  7d6c
    906  7d6c		       a4 9c		      ldy	currentPly
    907  7d6e		       84 3e		      sty	SET_BANK_RAM
    908  7d70		       20 6b f3 	      jsr	CheckMoveListFromSquare
    909  7d73
    910  7d73		       a5 8e		      lda	savedBank
    911  7d75		       85 3f		      sta	SET_BANK
    912  7d77		       60		      rts
    913  7d78
    914  7d78
    915  7d78							;---------------------------------------------------------------------------------------------------
    916  7d78
      0  7d78					      DEF	SAFE_GetPiece
      1  7d78				   BANK_SAFE_GetPiece SET	_CURRENT_BANK
      2  7d78
      3  7d78				   SAFE_GetPiece
    918  7d78					      SUBROUTINE
    919  7d78
    920  7d78							; Retrieve the piece+flags from the movelist, given from/to squares
    921  7d78							; Required as moves have different flags but same origin squares (e.g., castling)
    922  7d78
    923  7d78		       a5 9c		      lda	currentPly
    924  7d7a		       85 3e		      sta	SET_BANK_RAM
    925  7d7c
    926  7d7c		       20 a5 f3 	      jsr	GetPieceGivenFromToSquares
    927  7d7f
    928  7d7f		       a5 8e		      lda	savedBank
    929  7d81		       85 3f		      sta	SET_BANK
    930  7d83		       60		      rts
    931  7d84
    932  7d84							;---------------------------------------------------------------------------------------------------
    933  7d84
      0  7d84					      DEF	SAFE_IsValidMoveToSquare
      1  7d84				   BANK_SAFE_IsValidMoveToSquare SET	_CURRENT_BANK
      2  7d84
      3  7d84				   SAFE_IsValidMoveToSquare
    935  7d84					      SUBROUTINE
    936  7d84
    937  7d84							; Does the square exist in the movelist?
    938  7d84
    939  7d84		       20 52 fd 	      jsr	calculateBase64Square
    940  7d87		       86 92		      stx	aiToSquare
    941  7d89
    942  7d89		       a9 08		      lda	#RAMBANK_MOVES_RAM
    943  7d8b		       85 3e		      sta	SET_BANK_RAM
    944  7d8d		       bd 4b f3 	      lda	Base64ToIndex,x
    945  7d90		       85 94		      sta	aiToSquareX12
    946  7d92
    947  7d92		       a4 9c		      ldy	currentPly
    948  7d94		       84 3e		      sty	SET_BANK_RAM
    949  7d96		       20 c2 f3 	      jsr	CheckMoveListToSquare
    950  7d99
    951  7d99		       a5 8e	   .found     lda	savedBank
    952  7d9b		       85 3f		      sta	SET_BANK
    953  7d9d		       60		      rts
    954  7d9e
    955  7d9e							;---------------------------------------------------------------------------------------------------
    956  7d9e
      0  7d9e					      DEF	SAFE_PutPieceToBoard
      1  7d9e				   BANK_SAFE_PutPieceToBoard SET	_CURRENT_BANK
      2  7d9e
      3  7d9e				   SAFE_PutPieceToBoard
    958  7d9e					      SUBROUTINE
    959  7d9e
    960  7d9e							; y = board index
    961  7d9e							; a = piece
    962  7d9e
    963  7d9e		       a2 08		      ldx	#RAMBANK_MOVES_RAM
    964  7da0		       86 3e		      stx	SET_BANK_RAM
    965  7da2		       99 7a f4 	      sta	Board+RAM_WRITE,y
    966  7da5		       a6 8e		      ldx	savedBank
    967  7da7		       86 3f		      stx	SET_BANK
    968  7da9		       60		      rts
    969  7daa
    970  7daa							;---------------------------------------------------------------------------------------------------
    971  7daa
      0  7daa					      DEF	SAFE_CopyShadowROMtoRAM
      1  7daa				   BANK_SAFE_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7daa
      3  7daa				   SAFE_CopyShadowROMtoRAM
    973  7daa					      SUBROUTINE
    974  7daa
    975  7daa		       20 b2 fd 	      jsr	CopyShadowROMtoRAM
    976  7dad		       a5 8e		      lda	savedBank
    977  7daf		       85 3f		      sta	SET_BANK
    978  7db1		       60		      rts
    979  7db2
    980  7db2
    981  7db2							;---------------------------------------------------------------------------------------------------
    982  7db2
      0  7db2					      DEF	CopyShadowROMtoRAM
      1  7db2				   BANK_CopyShadowROMtoRAM SET	_CURRENT_BANK
      2  7db2
      3  7db2				   CopyShadowROMtoRAM
    984  7db2					      SUBROUTINE
    985  7db2
    986  7db2							; Copy a whole 1K ROM SHADOW into a destination RAM 1K bank
    987  7db2							; used to setup callable RAM code from ROM templates
    988  7db2
    989  7db2							; x = source ROM bank
    990  7db2							; y = destination RAM bank (preserved)
    991  7db2
    992  7db2		       86 a8		      stx	__sourceBank
    993  7db4
    994  7db4		       a2 00		      ldx	#0
    995  7db6		       a5 a8	   .copyPage  lda	__sourceBank
    996  7db8		       85 3f		      sta	SET_BANK
    997  7dba
    998  7dba		       bd 00 f0 	      lda	$F000,x
    999  7dbd		       48		      pha
   1000  7dbe		       bd 00 f1 	      lda	$F100,x
   1001  7dc1		       48		      pha
   1002  7dc2		       bd 00 f2 	      lda	$F200,x
   1003  7dc5		       48		      pha
   1004  7dc6		       bd 00 f3 	      lda	$F300,x
   1005  7dc9
   1006  7dc9		       84 3e		      sty	SET_BANK_RAM
   1007  7dcb
   1008  7dcb		       9d 00 f7 	      sta	$F300+RAM_WRITE,x
   1009  7dce		       68		      pla
   1010  7dcf		       9d 00 f6 	      sta	$F200+RAM_WRITE,x
   1011  7dd2		       68		      pla
   1012  7dd3		       9d 00 f5 	      sta	$F100+RAM_WRITE,x
   1013  7dd6		       68		      pla
   1014  7dd7		       9d 00 f4 	      sta	$F000+RAM_WRITE,x
   1015  7dda
   1016  7dda		       ca		      dex
   1017  7ddb		       d0 d9		      bne	.copyPage
   1018  7ddd		       60		      rts
   1019  7dde
   1020  7dde
   1021  7dde							;---------------------------------------------------------------------------------------------------
   1022  7dde
      0  7dde					      DEF	SAFE_CopySinglePiece
      1  7dde				   BANK_SAFE_CopySinglePiece SET	_CURRENT_BANK
      2  7dde
      3  7dde				   SAFE_CopySinglePiece
   1024  7dde					      SUBROUTINE
   1025  7dde
   1026  7dde		       20 e6 fd 	      jsr	CopySinglePiece
   1027  7de1		       a5 8e		      lda	savedBank
   1028  7de3		       85 3f		      sta	SET_BANK
   1029  7de5		       60		      rts
   1030  7de6
   1031  7de6							;---------------------------------------------------------------------------------------------------
   1032  7de6
      0  7de6					      DEF	CopySinglePiece
      1  7de6				   BANK_CopySinglePiece SET	_CURRENT_BANK
      2  7de6
      3  7de6				   CopySinglePiece
   1034  7de6					      SUBROUTINE
   1035  7de6							; @2150 max
   1036  7de6							; = 33 TIM64T
   1037  7de6
   1038  7de6
   1039  7de6		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1040  7de8		       85 3e		      sta	SET_BANK_RAM
   1041  7dea		       20 a0 f3 	      jsr	CopySetup
   1042  7ded
   1043  7ded
      0  7ded					      DEF	InterceptMarkerCopy
      1  7ded				   BANK_InterceptMarkerCopy SET	_CURRENT_BANK
      2  7ded
      3  7ded				   InterceptMarkerCopy
   1045  7ded
   1046  7ded							; Copy a piece shape (3 PF bytes wide x 24 lines) to the RAM buffer
   1047  7ded							; y = piece index
   1048  7ded
   1049  7ded		       a9 08		      lda	#BANK_PIECE_VECTOR_BANK
   1050  7def		       85 3f		      sta	SET_BANK
   1051  7df1
   1052  7df1		       b9 00 f0 	      lda	PIECE_VECTOR_LO,y
   1053  7df4		       85 ef		      sta	__ptr
   1054  7df6		       b9 80 f0 	      lda	PIECE_VECTOR_HI,y
   1055  7df9		       85 f0		      sta	__ptr+1
   1056  7dfb		       b9 00 f1 	      lda	PIECE_VECTOR_BANK,y
   1057  7dfe		       85 3f		      sta	SET_BANK
   1058  7e00
   1059  7e00		       a0 47		      ldy	#PIECE_SHAPE_SIZE-1
   1060  7e02		       b1 ef	   .copy      lda	(__ptr),y
   1061  7e04		       99 a7 00 	      sta	__pieceShapeBuffer,y
   1062  7e07		       88		      dey
   1063  7e08		       10 f8		      bpl	.copy
   1064  7e0a
   1065  7e0a
   1066  7e0a		       a5 80		      lda	drawPieceNumber
   1067  7e0c		       4a		      lsr
   1068  7e0d		       4a		      lsr
   1069  7e0e		       4a		      lsr
   1070  7e0f		       49 07		      eor	#7
   1071  7e11		       aa		      tax
   1072  7e12
   1073  7e12		       a5 80		      lda	drawPieceNumber
   1074  7e14		       29 04		      and	#4
   1075  7e16		       c9 04		      cmp	#4	; cc = left side, cs = right side
   1076  7e18
   1077  7e18		       86 3e		      stx	SET_BANK_RAM
   1078  7e1a		       4c d3 f0 	      jmp	CopyPieceToRowBitmap
   1079  7e1d
   1080  7e1d							;---------------------------------------------------------------------------------------------------
   1081  7e1d
      0  7e1d					      DEF	MoveViaList
      1  7e1d				   BANK_MoveViaList SET	_CURRENT_BANK
      2  7e1d
      3  7e1d				   MoveViaList
   1083  7e1d					      SUBROUTINE
   1084  7e1d
   1085  7e1d							; Given an existing movelist, pick one of the moves and make it
   1086  7e1d							; Used for random computer moves
   1087  7e1d
   1088  7e1d		       a5 9c		      lda	currentPly
   1089  7e1f		       85 3e		      sta	SET_BANK_RAM	; switch in movelist
   1090  7e21
   1091  7e21		       20 22 f3 	      jsr	MoveViaListAtPly
   1092  7e24		       60		      rts
   1093  7e25
   1094  7e25
   1095  7e25							;---------------------------------------------------------------------------------------------------
   1096  7e25
      0  7e25					      DEF	FinaliseMove
      1  7e25				   BANK_FinaliseMove SET	_CURRENT_BANK
      2  7e25
      3  7e25				   FinaliseMove
   1098  7e25					      SUBROUTINE
   1099  7e25
   1100  7e25							; Now the visible movement on the board has happened, fix up the pointers to the pieces
   1101  7e25							; for both sides.
   1102  7e25
   1103  7e25
   1104  7e25		       a5 9e		      lda	sideToMove
   1105  7e27		       0a		      asl
   1106  7e28		       a9 09		      lda	#RAMBANK_PLY
   1107  7e2a		       69 00		      adc	#0
   1108  7e2c		       85 3e		      sta	SET_BANK_RAM
   1109  7e2e
   1110  7e2e		       20 c7 f2 	      jsr	FixPieceList
   1111  7e31
   1112  7e31		       a5 87		      lda	toX12
   1113  7e33		       85 86		      sta	fromX12	; there MAY be no other-side piece at this square - that is OK!
   1114  7e35		       a9 00		      lda	#0
   1115  7e37		       85 87		      sta	toX12	; --> deleted (square=0)
   1116  7e39
   1117  7e39		       a5 a3		      lda	lastPiece
   1118  7e3b		       f0 0e		      beq	.notake
   1119  7e3d
   1120  7e3d		       a5 9e		      lda	sideToMove
   1121  7e3f		       49 80		      eor	#128
   1122  7e41		       0a		      asl
   1123  7e42		       a9 09		      lda	#RAMBANK_PLY
   1124  7e44		       69 00		      adc	#0
   1125  7e46		       85 3e		      sta	SET_BANK_RAM
   1126  7e48
   1127  7e48		       20 c7 f2 	      jsr	FixPieceList	; REMOVE any captured object
   1128  7e4b
   1129  7e4b		       60	   .notake    rts
   1130  7e4c
   1131  7e4c
   1132  7e4c							;---------------------------------------------------------------------------------------------------
   1133  7e4c
      0  7e4c					      DEF	SAFE_getMoveIndex
      1  7e4c				   BANK_SAFE_getMoveIndex SET	_CURRENT_BANK
      2  7e4c
      3  7e4c				   SAFE_getMoveIndex
   1135  7e4c					      SUBROUTINE
   1136  7e4c
   1137  7e4c		       a9 09		      lda	#RAMBANK_PLY
   1138  7e4e		       85 3e		      sta	SET_BANK_RAM
   1139  7e50		       ad 35 f0 	      lda	moveIndex
   1140  7e53		       a6 8e		      ldx	savedBank
   1141  7e55		       86 3f		      stx	SET_BANK
   1142  7e57		       60		      rts
   1143  7e58
   1144  7e58
   1145  7e58							;---------------------------------------------------------------------------------------------------
   1146  7e58
      0  7e58					      DEF	SAFE_showMoveOptions
      1  7e58				   BANK_SAFE_showMoveOptions SET	_CURRENT_BANK
      2  7e58
      3  7e58				   SAFE_showMoveOptions
   1148  7e58					      SUBROUTINE
   1149  7e58
   1150  7e58							;SAFETIME = 40 	  ; time required to be able to safely do a piece draw TODO: optimise
   1151  7e58
   1152  7e58
   1153  7e58							; place a marker on the board for any square matching the piece
   1154  7e58							; EXCEPT for squares which are occupied (we'll flash those later)
   1155  7e58							; x = movelist item # being checked
   1156  7e58
   1157  7e58
   1158  7e58		       a6 95	   .next      ldx	aiMoveIndex
   1159  7e5a		       30 2a		      bmi	.skip
   1160  7e5c
   1161  7e5c							;lda INTIM
   1162  7e5c							;cmp #SAFETIME
   1163  7e5c							;bcc .skip
   1164  7e5c
   1165  7e5c		       a9 09		      lda	#RAMBANK_PLY	; white
   1166  7e5e		       85 3e		      sta	SET_BANK_RAM
   1167  7e60
   1168  7e60		       c6 95		      dec	aiMoveIndex
   1169  7e62
   1170  7e62		       bd 36 f0 	      lda	MoveFrom,x
   1171  7e65		       c5 93		      cmp	aiFromSquareX12
   1172  7e67		       d0 ef		      bne	.next
   1173  7e69
   1174  7e69		       bc 00 f1 	      ldy	MoveTo,x
   1175  7e6c
   1176  7e6c		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1177  7e6e		       85 3e		      sta	SET_BANK_RAM
   1178  7e70
   1179  7e70		       b9 7a f0 	      lda	Board,y
   1180  7e73		       d0 e3		      bne	.next
   1181  7e75
   1182  7e75		       a5 80		      lda	drawPieceNumber
   1183  7e77		       48		      pha
   1184  7e78
   1185  7e78		       b9 00 ff 	      lda	X12toBase64,y
   1186  7e7b		       85 80		      sta	drawPieceNumber
   1187  7e7d
   1188  7e7d		       20 97 f3 	      jsr	CopySetupForMarker
   1189  7e80		       20 ed fd 	      jsr	InterceptMarkerCopy
   1190  7e83
   1191  7e83		       68		      pla
   1192  7e84		       85 80		      sta	drawPieceNumber
   1193  7e86
   1194  7e86		       a5 8e	   .skip      lda	savedBank
   1195  7e88		       85 3f		      sta	SET_BANK
   1196  7e8a		       60		      rts
   1197  7e8b
   1198  7e8b
   1199  7e8b							;---------------------------------------------------------------------------------------------------
   1200  7e8b
      0  7e8b					      DEF	SAFE_IsSquareUnderAttack
      1  7e8b				   BANK_SAFE_IsSquareUnderAttack SET	_CURRENT_BANK
      2  7e8b
      3  7e8b				   SAFE_IsSquareUnderAttack
   1202  7e8b
   1203  7e8b							; Check if passed X12 square is in the "TO" squares in the movelist (and thus under attack)
   1204  7e8b
   1205  7e8b							; Pass:	 currentPly = which movelist to check
   1206  7e8b							;		 A = X12 square to check
   1207  7e8b							; Return:	 CC = No, CS = Yes
   1208  7e8b
   1209  7e8b		       a6 9c		      ldx	currentPly
   1210  7e8d		       86 3e		      stx	SET_BANK_RAM
   1211  7e8f		       20 7e f3 	      jsr	IsSquareUnderAttack
   1212  7e92		       a5 8e		      lda	savedBank
   1213  7e94		       85 3f		      sta	SET_BANK
   1214  7e96		       60		      rts
   1215  7e97
   1216  7e97							;---------------------------------------------------------------------------------------------------
   1217  7e97
      0  7e97					      DEF	SAFE_showMoveCaptures
      1  7e97				   BANK_SAFE_showMoveCaptures SET	_CURRENT_BANK
      2  7e97
      3  7e97				   SAFE_showMoveCaptures
   1219  7e97					      SUBROUTINE
   1220  7e97
   1221  7e97							; place a marker on the board for any square matching the piece
   1222  7e97							; EXCEPT for squares which are occupied (we'll flash those later)
   1223  7e97							; x = movelist item # being checked
   1224  7e97
   1225  7e97
   1226  7e97		       a6 95	   .next      ldx	aiMoveIndex
   1227  7e99		       30 27		      bmi	.skip	; no moves in list
   1228  7e9b
   1229  7e9b							;lda INTIM
   1230  7e9b							;cmp #24 ;SAFETIME
   1231  7e9b							;bcc .skip
   1232  7e9b
   1233  7e9b		       a9 09		      lda	#RAMBANK_PLY	; white
   1234  7e9d		       85 3e		      sta	SET_BANK_RAM
   1235  7e9f		       c6 95		      dec	aiMoveIndex
   1236  7ea1
   1237  7ea1		       bd 36 f0 	      lda	MoveFrom,x
   1238  7ea4		       c5 93		      cmp	aiFromSquareX12
   1239  7ea6		       d0 ef		      bne	.next
   1240  7ea8
   1241  7ea8		       bc 00 f1 	      ldy	MoveTo,x
   1242  7eab
   1243  7eab		       a9 08		      lda	#RAMBANK_MOVES_RAM
   1244  7ead		       85 3e		      sta	SET_BANK_RAM
   1245  7eaf
   1246  7eaf		       b9 7a f0 	      lda	Board,y
   1247  7eb2		       f0 e3		      beq	.next
   1248  7eb4
   1249  7eb4		       a5 80		      lda	drawPieceNumber
   1250  7eb6		       48		      pha
   1251  7eb7
   1252  7eb7		       b9 00 ff 	      lda	X12toBase64,y
   1253  7eba		       85 80		      sta	drawPieceNumber
   1254  7ebc
   1255  7ebc		       20 e6 fd 	      jsr	CopySinglePiece
   1256  7ebf
   1257  7ebf		       68		      pla
   1258  7ec0		       85 80		      sta	drawPieceNumber
   1259  7ec2
   1260  7ec2		       a5 8e	   .skip      lda	savedBank
   1261  7ec4		       85 3f		      sta	SET_BANK
   1262  7ec6		       60		      rts
   1263  7ec7
   1264  7ec7
      0  7ec7					      OPTIONAL_PAGEBREAK	"X12toBase64", 100
 PAGE BREAK INSERTED FOR  X12toBase64
 REQUESTED SIZE =  $64
 WASTED SPACE =  $39
 PAGEBREAK LOCATION =  $ff00
     10  7f00					      LIST	ON
   1266  7f00
   1267  7f00				   X12toBase64
   1268  7f00
   1269  7f00							; Use this table to
   1270  7f00							;   a) Determine if a square is valid (-1 = NO)
   1271  7f00							;   b) Move pieces without addition.  e.g., "lda ValidSquareTable+10,x" will let you know
   1272  7f00							;	if a white pawn on square "x" can move "up" the board.
   1273  7f00
   1274  7f00		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1275  7f0a		       ff ff ff ff*	      .byte.b	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
   1276  7f14		       ff ff 00 01*	      .byte.b	-1, -1, 0, 1, 2, 3, 4, 5, 6, 7
   1277  7f1e		       ff ff 08 09*	      .byte.b	-1, -1, 8, 9, 10, 11, 12, 13, 14, 15
   1278  7f28		       ff ff 10 11*	      .byte.b	-1, -1, 16, 17, 18, 19, 20, 21, 22, 23
   1279  7f32		       ff ff 18 19*	      .byte.b	-1, -1, 24, 25, 26, 27, 28, 29, 30, 31
   1280  7f3c		       ff ff 20 21*	      .byte.b	-1, -1, 32, 33, 34, 35, 36, 37, 38, 39
   1281  7f46		       ff ff 28 29*	      .byte.b	-1, -1, 40, 41, 42, 43, 44, 45, 46, 47
   1282  7f50		       ff ff 30 31*	      .byte.b	-1, -1, 48, 49, 50, 51, 52, 53, 54, 55
   1283  7f5a		       ff ff 38 39*	      .byte.b	-1, -1, 56, 57, 58, 59, 60, 61, 62, 63
   1284  7f64
   1285  7f64
 FREE BYTES IN FIXED BANK =  $98
   1286  7f64					      ECHO	"FREE BYTES IN FIXED BANK = ", $FFFC - *
   1287  7f64
   1288  7f64							;---------------------------------------------------------------------------------------------------
   1289  7f64							; The reset vectors
   1290  7f64							; these must live in the fixed bank (last 2K of any ROM image in TigerVision)
   1291  7f64
   1292  8000 ????				      SEG	InterruptVectors
   1293  7ffc					      ORG	FIXED_BANK + $7FC
   1294  7ffc					      RORG	$7ffC
   1295  7ffc
   1296  7ffc		       00 f8		      .word.w	Reset	; RESET
   1297  7ffe		       00 f8		      .word.w	Reset	; IRQ	      (not used)
   1298  8000
   1299  8000							;---------------------------------------------------------------------------------------------------
   1300  8000							; EOF
------- FILE ./chess.asm
    366  8000
    367  8000							;END
